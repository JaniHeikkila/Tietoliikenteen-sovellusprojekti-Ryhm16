
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	80 c6 00 20 d9 bb 00 00 27 7a 01 00 ad bb 00 00     ... ....'z......
    8010:	ad bb 00 00 ad bb 00 00 ad bb 00 00 ad bb 00 00     ................
	...
    802c:	cd b4 00 00 ad bb 00 00 00 00 00 00 6d b4 00 00     ............m...
    803c:	ad bb 00 00                                         ....

00008040 <_irq_vector_table>:
    8040:	55 b5 00 00 55 b5 00 00 55 b5 00 00 55 b5 00 00     U...U...U...U...
    8050:	55 b5 00 00 55 b5 00 00 55 b5 00 00 55 b5 00 00     U...U...U...U...
    8060:	55 b5 00 00 55 b5 00 00 55 b5 00 00 55 b5 00 00     U...U...U...U...
    8070:	55 b5 00 00 55 b5 00 00 55 b5 00 00 55 b5 00 00     U...U...U...U...
    8080:	55 b5 00 00 55 b5 00 00 55 b5 00 00 55 b5 00 00     U...U...U...U...
    8090:	55 b5 00 00 55 b5 00 00 55 b5 00 00 55 b5 00 00     U...U...U...U...
    80a0:	55 b5 00 00 55 b5 00 00 55 b5 00 00 55 b5 00 00     U...U...U...U...
    80b0:	55 b5 00 00 55 b5 00 00 55 b5 00 00 55 b5 00 00     U...U...U...U...
    80c0:	55 b5 00 00 55 b5 00 00 55 b5 00 00 55 b5 00 00     U...U...U...U...
    80d0:	55 b5 00 00 55 b5 00 00 55 b5 00 00 55 b5 00 00     U...U...U...U...
    80e0:	55 b5 00 00 55 b5 00 00 55 b5 00 00 55 b5 00 00     U...U...U...U...
    80f0:	55 b5 00 00 55 b5 00 00 55 b5 00 00 55 b5 00 00     U...U...U...U...
    8100:	55 b5 00 00 55 b5 00 00 55 b5 00 00 55 b5 00 00     U...U...U...U...
    8110:	55 b5 00 00 55 b5 00 00 55 b5 00 00 55 b5 00 00     U...U...U...U...
    8120:	55 b5 00 00 55 b5 00 00 55 b5 00 00 55 b5 00 00     U...U...U...U...
    8130:	55 b5 00 00 55 b5 00 00 55 b5 00 00 55 b5 00 00     U...U...U...U...
    8140:	55 b5 00 00 55 b5 00 00 55 b5 00 00 55 b5 00 00     U...U...U...U...
    8150:	55 b5 00 00                                         U...

Disassembly of section text:

00008154 <__aeabi_uldivmod>:
    8154:	b953      	cbnz	r3, 816c <__aeabi_uldivmod+0x18>
    8156:	b94a      	cbnz	r2, 816c <__aeabi_uldivmod+0x18>
    8158:	2900      	cmp	r1, #0
    815a:	bf08      	it	eq
    815c:	2800      	cmpeq	r0, #0
    815e:	bf1c      	itt	ne
    8160:	f04f 31ff 	movne.w	r1, #4294967295
    8164:	f04f 30ff 	movne.w	r0, #4294967295
    8168:	f000 b80c 	b.w	8184 <__aeabi_idiv0>
    816c:	f1ad 0c08 	sub.w	ip, sp, #8
    8170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8174:	f000 f808 	bl	8188 <__udivmoddi4>
    8178:	f8dd e004 	ldr.w	lr, [sp, #4]
    817c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8180:	b004      	add	sp, #16
    8182:	4770      	bx	lr

00008184 <__aeabi_idiv0>:
    8184:	4770      	bx	lr
    8186:	bf00      	nop

00008188 <__udivmoddi4>:
    8188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    818c:	4686      	mov	lr, r0
    818e:	468c      	mov	ip, r1
    8190:	4608      	mov	r0, r1
    8192:	9e08      	ldr	r6, [sp, #32]
    8194:	4615      	mov	r5, r2
    8196:	4674      	mov	r4, lr
    8198:	4619      	mov	r1, r3
    819a:	2b00      	cmp	r3, #0
    819c:	f040 80c1 	bne.w	8322 <__udivmoddi4+0x19a>
    81a0:	4285      	cmp	r5, r0
    81a2:	fab2 f282 	clz	r2, r2
    81a6:	d945      	bls.n	8234 <__udivmoddi4+0xac>
    81a8:	b14a      	cbz	r2, 81be <__udivmoddi4+0x36>
    81aa:	f1c2 0320 	rsb	r3, r2, #32
    81ae:	fa00 fc02 	lsl.w	ip, r0, r2
    81b2:	4095      	lsls	r5, r2
    81b4:	4094      	lsls	r4, r2
    81b6:	fa2e f303 	lsr.w	r3, lr, r3
    81ba:	ea43 0c0c 	orr.w	ip, r3, ip
    81be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    81c2:	b2a8      	uxth	r0, r5
    81c4:	0c23      	lsrs	r3, r4, #16
    81c6:	fbbc f8fe 	udiv	r8, ip, lr
    81ca:	fb0e cc18 	mls	ip, lr, r8, ip
    81ce:	fb08 f900 	mul.w	r9, r8, r0
    81d2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    81d6:	4599      	cmp	r9, r3
    81d8:	d928      	bls.n	822c <__udivmoddi4+0xa4>
    81da:	18eb      	adds	r3, r5, r3
    81dc:	f108 37ff 	add.w	r7, r8, #4294967295
    81e0:	d204      	bcs.n	81ec <__udivmoddi4+0x64>
    81e2:	4599      	cmp	r9, r3
    81e4:	d902      	bls.n	81ec <__udivmoddi4+0x64>
    81e6:	f1a8 0702 	sub.w	r7, r8, #2
    81ea:	442b      	add	r3, r5
    81ec:	eba3 0309 	sub.w	r3, r3, r9
    81f0:	b2a4      	uxth	r4, r4
    81f2:	fbb3 fcfe 	udiv	ip, r3, lr
    81f6:	fb0e 331c 	mls	r3, lr, ip, r3
    81fa:	fb0c f000 	mul.w	r0, ip, r0
    81fe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    8202:	42a0      	cmp	r0, r4
    8204:	d914      	bls.n	8230 <__udivmoddi4+0xa8>
    8206:	192c      	adds	r4, r5, r4
    8208:	f10c 33ff 	add.w	r3, ip, #4294967295
    820c:	d204      	bcs.n	8218 <__udivmoddi4+0x90>
    820e:	42a0      	cmp	r0, r4
    8210:	d902      	bls.n	8218 <__udivmoddi4+0x90>
    8212:	f1ac 0302 	sub.w	r3, ip, #2
    8216:	442c      	add	r4, r5
    8218:	1a24      	subs	r4, r4, r0
    821a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    821e:	b11e      	cbz	r6, 8228 <__udivmoddi4+0xa0>
    8220:	40d4      	lsrs	r4, r2
    8222:	2300      	movs	r3, #0
    8224:	6034      	str	r4, [r6, #0]
    8226:	6073      	str	r3, [r6, #4]
    8228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    822c:	4647      	mov	r7, r8
    822e:	e7dd      	b.n	81ec <__udivmoddi4+0x64>
    8230:	4663      	mov	r3, ip
    8232:	e7f1      	b.n	8218 <__udivmoddi4+0x90>
    8234:	bb92      	cbnz	r2, 829c <__udivmoddi4+0x114>
    8236:	1b43      	subs	r3, r0, r5
    8238:	2101      	movs	r1, #1
    823a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    823e:	b2af      	uxth	r7, r5
    8240:	0c20      	lsrs	r0, r4, #16
    8242:	fbb3 fcfe 	udiv	ip, r3, lr
    8246:	fb0e 331c 	mls	r3, lr, ip, r3
    824a:	fb0c f807 	mul.w	r8, ip, r7
    824e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    8252:	4598      	cmp	r8, r3
    8254:	d961      	bls.n	831a <__udivmoddi4+0x192>
    8256:	18eb      	adds	r3, r5, r3
    8258:	f10c 30ff 	add.w	r0, ip, #4294967295
    825c:	d204      	bcs.n	8268 <__udivmoddi4+0xe0>
    825e:	4598      	cmp	r8, r3
    8260:	d902      	bls.n	8268 <__udivmoddi4+0xe0>
    8262:	f1ac 0002 	sub.w	r0, ip, #2
    8266:	442b      	add	r3, r5
    8268:	eba3 0308 	sub.w	r3, r3, r8
    826c:	b2a4      	uxth	r4, r4
    826e:	fbb3 fcfe 	udiv	ip, r3, lr
    8272:	fb0e 331c 	mls	r3, lr, ip, r3
    8276:	fb0c f707 	mul.w	r7, ip, r7
    827a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    827e:	42a7      	cmp	r7, r4
    8280:	d94d      	bls.n	831e <__udivmoddi4+0x196>
    8282:	192c      	adds	r4, r5, r4
    8284:	f10c 33ff 	add.w	r3, ip, #4294967295
    8288:	d204      	bcs.n	8294 <__udivmoddi4+0x10c>
    828a:	42a7      	cmp	r7, r4
    828c:	d902      	bls.n	8294 <__udivmoddi4+0x10c>
    828e:	f1ac 0302 	sub.w	r3, ip, #2
    8292:	442c      	add	r4, r5
    8294:	1be4      	subs	r4, r4, r7
    8296:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    829a:	e7c0      	b.n	821e <__udivmoddi4+0x96>
    829c:	f1c2 0320 	rsb	r3, r2, #32
    82a0:	4095      	lsls	r5, r2
    82a2:	4094      	lsls	r4, r2
    82a4:	fa20 f103 	lsr.w	r1, r0, r3
    82a8:	fa2e f303 	lsr.w	r3, lr, r3
    82ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    82b0:	4090      	lsls	r0, r2
    82b2:	b2af      	uxth	r7, r5
    82b4:	4303      	orrs	r3, r0
    82b6:	fbb1 fcfe 	udiv	ip, r1, lr
    82ba:	fb0e 101c 	mls	r0, lr, ip, r1
    82be:	0c19      	lsrs	r1, r3, #16
    82c0:	fb0c f807 	mul.w	r8, ip, r7
    82c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    82c8:	4588      	cmp	r8, r1
    82ca:	d922      	bls.n	8312 <__udivmoddi4+0x18a>
    82cc:	1869      	adds	r1, r5, r1
    82ce:	f10c 30ff 	add.w	r0, ip, #4294967295
    82d2:	d204      	bcs.n	82de <__udivmoddi4+0x156>
    82d4:	4588      	cmp	r8, r1
    82d6:	d902      	bls.n	82de <__udivmoddi4+0x156>
    82d8:	f1ac 0002 	sub.w	r0, ip, #2
    82dc:	4429      	add	r1, r5
    82de:	eba1 0108 	sub.w	r1, r1, r8
    82e2:	b29b      	uxth	r3, r3
    82e4:	fbb1 fcfe 	udiv	ip, r1, lr
    82e8:	fb0e 111c 	mls	r1, lr, ip, r1
    82ec:	fb0c f707 	mul.w	r7, ip, r7
    82f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    82f4:	429f      	cmp	r7, r3
    82f6:	d90e      	bls.n	8316 <__udivmoddi4+0x18e>
    82f8:	18eb      	adds	r3, r5, r3
    82fa:	f10c 31ff 	add.w	r1, ip, #4294967295
    82fe:	d204      	bcs.n	830a <__udivmoddi4+0x182>
    8300:	429f      	cmp	r7, r3
    8302:	d902      	bls.n	830a <__udivmoddi4+0x182>
    8304:	f1ac 0102 	sub.w	r1, ip, #2
    8308:	442b      	add	r3, r5
    830a:	1bdb      	subs	r3, r3, r7
    830c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8310:	e793      	b.n	823a <__udivmoddi4+0xb2>
    8312:	4660      	mov	r0, ip
    8314:	e7e3      	b.n	82de <__udivmoddi4+0x156>
    8316:	4661      	mov	r1, ip
    8318:	e7f7      	b.n	830a <__udivmoddi4+0x182>
    831a:	4660      	mov	r0, ip
    831c:	e7a4      	b.n	8268 <__udivmoddi4+0xe0>
    831e:	4663      	mov	r3, ip
    8320:	e7b8      	b.n	8294 <__udivmoddi4+0x10c>
    8322:	4283      	cmp	r3, r0
    8324:	d906      	bls.n	8334 <__udivmoddi4+0x1ac>
    8326:	b916      	cbnz	r6, 832e <__udivmoddi4+0x1a6>
    8328:	2100      	movs	r1, #0
    832a:	4608      	mov	r0, r1
    832c:	e77c      	b.n	8228 <__udivmoddi4+0xa0>
    832e:	e9c6 e000 	strd	lr, r0, [r6]
    8332:	e7f9      	b.n	8328 <__udivmoddi4+0x1a0>
    8334:	fab3 f783 	clz	r7, r3
    8338:	b98f      	cbnz	r7, 835e <__udivmoddi4+0x1d6>
    833a:	4283      	cmp	r3, r0
    833c:	d301      	bcc.n	8342 <__udivmoddi4+0x1ba>
    833e:	4572      	cmp	r2, lr
    8340:	d808      	bhi.n	8354 <__udivmoddi4+0x1cc>
    8342:	ebbe 0402 	subs.w	r4, lr, r2
    8346:	eb60 0303 	sbc.w	r3, r0, r3
    834a:	2001      	movs	r0, #1
    834c:	469c      	mov	ip, r3
    834e:	b91e      	cbnz	r6, 8358 <__udivmoddi4+0x1d0>
    8350:	2100      	movs	r1, #0
    8352:	e769      	b.n	8228 <__udivmoddi4+0xa0>
    8354:	4638      	mov	r0, r7
    8356:	e7fa      	b.n	834e <__udivmoddi4+0x1c6>
    8358:	e9c6 4c00 	strd	r4, ip, [r6]
    835c:	e7f8      	b.n	8350 <__udivmoddi4+0x1c8>
    835e:	f1c7 0c20 	rsb	ip, r7, #32
    8362:	40bb      	lsls	r3, r7
    8364:	fa0e f507 	lsl.w	r5, lr, r7
    8368:	fa22 f40c 	lsr.w	r4, r2, ip
    836c:	fa2e f10c 	lsr.w	r1, lr, ip
    8370:	40ba      	lsls	r2, r7
    8372:	431c      	orrs	r4, r3
    8374:	fa20 f30c 	lsr.w	r3, r0, ip
    8378:	40b8      	lsls	r0, r7
    837a:	ea4f 4914 	mov.w	r9, r4, lsr #16
    837e:	4301      	orrs	r1, r0
    8380:	fa1f fe84 	uxth.w	lr, r4
    8384:	fbb3 f8f9 	udiv	r8, r3, r9
    8388:	fb09 3018 	mls	r0, r9, r8, r3
    838c:	0c0b      	lsrs	r3, r1, #16
    838e:	fb08 fa0e 	mul.w	sl, r8, lr
    8392:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    8396:	459a      	cmp	sl, r3
    8398:	d940      	bls.n	841c <__udivmoddi4+0x294>
    839a:	18e3      	adds	r3, r4, r3
    839c:	f108 30ff 	add.w	r0, r8, #4294967295
    83a0:	d204      	bcs.n	83ac <__udivmoddi4+0x224>
    83a2:	459a      	cmp	sl, r3
    83a4:	d902      	bls.n	83ac <__udivmoddi4+0x224>
    83a6:	f1a8 0002 	sub.w	r0, r8, #2
    83aa:	4423      	add	r3, r4
    83ac:	eba3 030a 	sub.w	r3, r3, sl
    83b0:	b289      	uxth	r1, r1
    83b2:	fbb3 f8f9 	udiv	r8, r3, r9
    83b6:	fb09 3318 	mls	r3, r9, r8, r3
    83ba:	fb08 fe0e 	mul.w	lr, r8, lr
    83be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    83c2:	458e      	cmp	lr, r1
    83c4:	d92c      	bls.n	8420 <__udivmoddi4+0x298>
    83c6:	1861      	adds	r1, r4, r1
    83c8:	f108 33ff 	add.w	r3, r8, #4294967295
    83cc:	d204      	bcs.n	83d8 <__udivmoddi4+0x250>
    83ce:	458e      	cmp	lr, r1
    83d0:	d902      	bls.n	83d8 <__udivmoddi4+0x250>
    83d2:	f1a8 0302 	sub.w	r3, r8, #2
    83d6:	4421      	add	r1, r4
    83d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    83dc:	eba1 010e 	sub.w	r1, r1, lr
    83e0:	fba0 9802 	umull	r9, r8, r0, r2
    83e4:	4541      	cmp	r1, r8
    83e6:	46ce      	mov	lr, r9
    83e8:	4643      	mov	r3, r8
    83ea:	d302      	bcc.n	83f2 <__udivmoddi4+0x26a>
    83ec:	d106      	bne.n	83fc <__udivmoddi4+0x274>
    83ee:	454d      	cmp	r5, r9
    83f0:	d204      	bcs.n	83fc <__udivmoddi4+0x274>
    83f2:	3801      	subs	r0, #1
    83f4:	ebb9 0e02 	subs.w	lr, r9, r2
    83f8:	eb68 0304 	sbc.w	r3, r8, r4
    83fc:	2e00      	cmp	r6, #0
    83fe:	d0a7      	beq.n	8350 <__udivmoddi4+0x1c8>
    8400:	ebb5 020e 	subs.w	r2, r5, lr
    8404:	eb61 0103 	sbc.w	r1, r1, r3
    8408:	fa01 fc0c 	lsl.w	ip, r1, ip
    840c:	fa22 f307 	lsr.w	r3, r2, r7
    8410:	40f9      	lsrs	r1, r7
    8412:	ea4c 0303 	orr.w	r3, ip, r3
    8416:	e9c6 3100 	strd	r3, r1, [r6]
    841a:	e799      	b.n	8350 <__udivmoddi4+0x1c8>
    841c:	4640      	mov	r0, r8
    841e:	e7c5      	b.n	83ac <__udivmoddi4+0x224>
    8420:	4643      	mov	r3, r8
    8422:	e7d9      	b.n	83d8 <__udivmoddi4+0x250>

00008424 <app_button_cb>:
}

static bool app_button_cb(void)
{
	return app_button_state;
}
    8424:	4b01      	ldr	r3, [pc, #4]	; (842c <app_button_cb+0x8>)
    8426:	7818      	ldrb	r0, [r3, #0]
    8428:	4770      	bx	lr
    842a:	bf00      	nop
    842c:	20009b34 	.word	0x20009b34

00008430 <on_disconnected>:

	dk_set_led_on(CON_STATUS_LED);
}

static void on_disconnected(struct bt_conn *conn, uint8_t reason)
{
    8430:	b508      	push	{r3, lr}
	printk("Disconnected (reason %u)\n", reason);
    8432:	4804      	ldr	r0, [pc, #16]	; (8444 <on_disconnected+0x14>)
    8434:	f00d fe86 	bl	16144 <printk>

	dk_set_led_off(CON_STATUS_LED);
}
    8438:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	dk_set_led_off(CON_STATUS_LED);
    843c:	2001      	movs	r0, #1
    843e:	f011 b8ec 	b.w	1961a <dk_set_led_off>
    8442:	bf00      	nop
    8444:	0001bb14 	.word	0x0001bb14

00008448 <on_connected>:
{
    8448:	b508      	push	{r3, lr}
	if (err) {
    844a:	b121      	cbz	r1, 8456 <on_connected+0xe>
}
    844c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Connection failed (err %u)\n", err);
    8450:	4805      	ldr	r0, [pc, #20]	; (8468 <on_connected+0x20>)
    8452:	f00d be77 	b.w	16144 <printk>
	printk("Connected\n");
    8456:	4805      	ldr	r0, [pc, #20]	; (846c <on_connected+0x24>)
    8458:	f00d fe74 	bl	16144 <printk>
}
    845c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	dk_set_led_on(CON_STATUS_LED);
    8460:	2001      	movs	r0, #1
    8462:	f011 b8d7 	b.w	19614 <dk_set_led_on>
    8466:	bf00      	nop
    8468:	0001bb2e 	.word	0x0001bb2e
    846c:	0001bb4a 	.word	0x0001bb4a

00008470 <button_changed>:
	if (has_changed & USER_BUTTON) {
    8470:	07cb      	lsls	r3, r1, #31
{
    8472:	b510      	push	{r4, lr}
	if (has_changed & USER_BUTTON) {
    8474:	d506      	bpl.n	8484 <button_changed+0x14>
		my_lbs_send_button_state_indicate(user_button_state);
    8476:	f000 0401 	and.w	r4, r0, #1
    847a:	4620      	mov	r0, r4
    847c:	f000 f914 	bl	86a8 <my_lbs_send_button_state_indicate>
		app_button_state = user_button_state ? true : false;
    8480:	4b01      	ldr	r3, [pc, #4]	; (8488 <button_changed+0x18>)
    8482:	701c      	strb	r4, [r3, #0]
}
    8484:	bd10      	pop	{r4, pc}
    8486:	bf00      	nop
    8488:	20009b34 	.word	0x20009b34

0000848c <send_data_thread>:
{
    848c:	b510      	push	{r4, lr}
	app_sensor_value++;
    848e:	4c08      	ldr	r4, [pc, #32]	; (84b0 <send_data_thread+0x24>)
    8490:	6823      	ldr	r3, [r4, #0]
    8492:	2bc7      	cmp	r3, #199	; 0xc7
    8494:	f103 0001 	add.w	r0, r3, #1
	if (app_sensor_value == 200) {
    8498:	bf08      	it	eq
    849a:	2064      	moveq	r0, #100	; 0x64
	app_sensor_value++;
    849c:	6020      	str	r0, [r4, #0]
		my_lbs_send_sensor_notify(app_sensor_value);
    849e:	f000 f925 	bl	86ec <my_lbs_send_sensor_notify>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    84a2:	2100      	movs	r1, #0
    84a4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    84a8:	f00d fa9c 	bl	159e4 <z_impl_k_sleep>
	while(1){
    84ac:	e7f0      	b.n	8490 <send_data_thread+0x4>
    84ae:	bf00      	nop
    84b0:	2000817c 	.word	0x2000817c

000084b4 <main>:

	return err;
}

void main(void)
{
    84b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    84b8:	b088      	sub	sp, #32
	int blink_status = 0;
	int err;

	LOG_INF("Starting Lesson 4 - Exercise 2 \n");
    84ba:	466d      	mov	r5, sp
{
    84bc:	af02      	add	r7, sp, #8
	LOG_INF("Starting Lesson 4 - Exercise 2 \n");
    84be:	f04f 0802 	mov.w	r8, #2
    84c2:	4b3c      	ldr	r3, [pc, #240]	; (85b4 <main+0x100>)
    84c4:	f8c7 8010 	str.w	r8, [r7, #16]
    84c8:	617b      	str	r3, [r7, #20]
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
    84ca:	2300      	movs	r3, #0
    84cc:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    84d0:	4839      	ldr	r0, [pc, #228]	; (85b8 <main+0x104>)
    84d2:	f107 0210 	add.w	r2, r7, #16
    84d6:	f002 f925 	bl	a724 <z_impl_z_log_msg_static_create>

	err = dk_leds_init();
    84da:	f00a fe9d 	bl	13218 <dk_leds_init>
	if (err) {
    84de:	b178      	cbz	r0, 8500 <main+0x4c>
		LOG_ERR("LEDs init failed (err %d)\n", err);
    84e0:	b088      	sub	sp, #32
    84e2:	aa02      	add	r2, sp, #8
    84e4:	4b35      	ldr	r3, [pc, #212]	; (85bc <main+0x108>)
    84e6:	e9c2 3005 	strd	r3, r0, [r2, #20]
    84ea:	2303      	movs	r3, #3
    84ec:	f842 3f10 	str.w	r3, [r2, #16]!
    84f0:	2300      	movs	r3, #0
    84f2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    84f6:	4830      	ldr	r0, [pc, #192]	; (85b8 <main+0x104>)
    84f8:	f002 f914 	bl	a724 <z_impl_z_log_msg_static_create>
    84fc:	46ad      	mov	sp, r5
	}
	LOG_INF("Bluetooth initialized\n");
	err = bt_le_adv_start(adv_param, ad, ARRAY_SIZE(ad), sd, ARRAY_SIZE(sd));
	if (err) {
		LOG_ERR("Advertising failed to start (err %d)\n", err);
		return;
    84fe:	e013      	b.n	8528 <main+0x74>
	err = dk_buttons_init(button_changed);
    8500:	482f      	ldr	r0, [pc, #188]	; (85c0 <main+0x10c>)
    8502:	f00a fec3 	bl	1328c <dk_buttons_init>
	if (err) {
    8506:	4604      	mov	r4, r0
    8508:	b930      	cbnz	r0, 8518 <main+0x64>
	err = bt_enable(NULL);
    850a:	f005 fc0b 	bl	dd24 <bt_enable>
	if (err) {
    850e:	b178      	cbz	r0, 8530 <main+0x7c>
		LOG_ERR("Bluetooth init failed (err %d)\n", err);
    8510:	b088      	sub	sp, #32
    8512:	aa02      	add	r2, sp, #8
    8514:	4b2b      	ldr	r3, [pc, #172]	; (85c4 <main+0x110>)
    8516:	e7e6      	b.n	84e6 <main+0x32>
		printk("Cannot init buttons (err: %d)\n", err);
    8518:	4601      	mov	r1, r0
    851a:	482b      	ldr	r0, [pc, #172]	; (85c8 <main+0x114>)
    851c:	f00d fe12 	bl	16144 <printk>
		printk("Button init failed (err %d)\n", err);
    8520:	4621      	mov	r1, r4
    8522:	482a      	ldr	r0, [pc, #168]	; (85cc <main+0x118>)
		printk("Failed to init LBS (err:%d)\n", err);
    8524:	f00d fe0e 	bl	16144 <printk>

	for (;;) {
		dk_set_led(RUN_STATUS_LED, (++blink_status) % 2);
		k_sleep(K_MSEC(RUN_LED_BLINK_INTERVAL));
	}
}
    8528:	3718      	adds	r7, #24
    852a:	46bd      	mov	sp, r7
    852c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_conn_cb_register(&connection_callbacks);
    8530:	4827      	ldr	r0, [pc, #156]	; (85d0 <main+0x11c>)
    8532:	f006 fef7 	bl	f324 <bt_conn_cb_register>
	err = my_lbs_init(&app_callbacks);
    8536:	4827      	ldr	r0, [pc, #156]	; (85d4 <main+0x120>)
    8538:	f000 f8ac 	bl	8694 <my_lbs_init>
	if (err) {
    853c:	4606      	mov	r6, r0
    853e:	b110      	cbz	r0, 8546 <main+0x92>
		printk("Failed to init LBS (err:%d)\n", err);
    8540:	4601      	mov	r1, r0
    8542:	4825      	ldr	r0, [pc, #148]	; (85d8 <main+0x124>)
    8544:	e7ee      	b.n	8524 <main+0x70>
	LOG_INF("Bluetooth initialized\n");
    8546:	4b25      	ldr	r3, [pc, #148]	; (85dc <main+0x128>)
    8548:	e9c7 8304 	strd	r8, r3, [r7, #16]
    854c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    8550:	4603      	mov	r3, r0
    8552:	f107 0210 	add.w	r2, r7, #16
    8556:	4818      	ldr	r0, [pc, #96]	; (85b8 <main+0x104>)
    8558:	f002 f8e4 	bl	a724 <z_impl_z_log_msg_static_create>
	err = bt_le_adv_start(adv_param, ad, ARRAY_SIZE(ad), sd, ARRAY_SIZE(sd));
    855c:	2301      	movs	r3, #1
    855e:	4642      	mov	r2, r8
    8560:	9300      	str	r3, [sp, #0]
    8562:	491f      	ldr	r1, [pc, #124]	; (85e0 <main+0x12c>)
    8564:	4b1f      	ldr	r3, [pc, #124]	; (85e4 <main+0x130>)
    8566:	4820      	ldr	r0, [pc, #128]	; (85e8 <main+0x134>)
    8568:	f006 f8ce 	bl	e708 <bt_le_adv_start>
	if (err) {
    856c:	4604      	mov	r4, r0
    856e:	b148      	cbz	r0, 8584 <main+0xd0>
		LOG_ERR("Advertising failed to start (err %d)\n", err);
    8570:	b088      	sub	sp, #32
    8572:	aa02      	add	r2, sp, #8
    8574:	4b1d      	ldr	r3, [pc, #116]	; (85ec <main+0x138>)
    8576:	e9c2 3005 	strd	r3, r0, [r2, #20]
    857a:	2303      	movs	r3, #3
    857c:	f842 3f10 	str.w	r3, [r2, #16]!
    8580:	4633      	mov	r3, r6
    8582:	e7b6      	b.n	84f2 <main+0x3e>
	LOG_INF("Advertising successfully started\n");
    8584:	4b1a      	ldr	r3, [pc, #104]	; (85f0 <main+0x13c>)
    8586:	e9c7 8304 	strd	r8, r3, [r7, #16]
    858a:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    858e:	4603      	mov	r3, r0
    8590:	f107 0210 	add.w	r2, r7, #16
    8594:	4808      	ldr	r0, [pc, #32]	; (85b8 <main+0x104>)
    8596:	f002 f8c5 	bl	a724 <z_impl_z_log_msg_static_create>
		dk_set_led(RUN_STATUS_LED, (++blink_status) % 2);
    859a:	3401      	adds	r4, #1
    859c:	f004 0101 	and.w	r1, r4, #1
    85a0:	2000      	movs	r0, #0
    85a2:	f00a ff05 	bl	133b0 <dk_set_led>
    85a6:	2100      	movs	r1, #0
    85a8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    85ac:	f00d fa1a 	bl	159e4 <z_impl_k_sleep>
	for (;;) {
    85b0:	e7f3      	b.n	859a <main+0xe6>
    85b2:	bf00      	nop
    85b4:	0001bb55 	.word	0x0001bb55
    85b8:	0001b1a0 	.word	0x0001b1a0
    85bc:	0001bb76 	.word	0x0001bb76
    85c0:	00008471 	.word	0x00008471
    85c4:	0001bbcd 	.word	0x0001bbcd
    85c8:	0001bb91 	.word	0x0001bb91
    85cc:	0001bbb0 	.word	0x0001bbb0
    85d0:	20008160 	.word	0x20008160
    85d4:	20008174 	.word	0x20008174
    85d8:	0001bbed 	.word	0x0001bbed
    85dc:	0001bc0a 	.word	0x0001bc0a
    85e0:	0001b350 	.word	0x0001b350
    85e4:	0001b348 	.word	0x0001b348
    85e8:	20008180 	.word	0x20008180
    85ec:	0001bc21 	.word	0x0001bc21
    85f0:	0001bc47 	.word	0x0001bc47

000085f4 <mylbsbc_ccc_cfg_changed>:

/* STEP 3 - Implement the configuration change callback function */
static void mylbsbc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	indicate_enabled = (value == BT_GATT_CCC_INDICATE);
    85f4:	1e8b      	subs	r3, r1, #2
    85f6:	4259      	negs	r1, r3
    85f8:	4159      	adcs	r1, r3
    85fa:	4b01      	ldr	r3, [pc, #4]	; (8600 <mylbsbc_ccc_cfg_changed+0xc>)
    85fc:	7019      	strb	r1, [r3, #0]
}
    85fe:	4770      	bx	lr
    8600:	20009b36 	.word	0x20009b36

00008604 <mylbsbc_ccc_mysensor_cfg_changed>:

/* STEP 13 - Define the configuration change callback function for the MYSENSOR characteristic */
static void mylbsbc_ccc_mysensor_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	notify_mysensor_enabled = (value == BT_GATT_CCC_NOTIFY);
    8604:	1e4b      	subs	r3, r1, #1
    8606:	4259      	negs	r1, r3
    8608:	4159      	adcs	r1, r3
    860a:	4b01      	ldr	r3, [pc, #4]	; (8610 <mylbsbc_ccc_mysensor_cfg_changed+0xc>)
    860c:	7019      	strb	r1, [r3, #0]
}
    860e:	4770      	bx	lr
    8610:	20009b37 	.word	0x20009b37

00008614 <write_led>:
	LOG_DBG("Indication %s\n", err != 0U ? "fail" : "success");
}

static ssize_t write_led(struct bt_conn *conn, const struct bt_gatt_attr *attr, const void *buf,
			 uint16_t len, uint16_t offset, uint8_t flags)
{
    8614:	b508      	push	{r3, lr}
	LOG_DBG("Attribute write, handle: %u, conn: %p", attr->handle, (void *)conn);

	if (len != 1U) {
    8616:	2b01      	cmp	r3, #1
{
    8618:	f8bd 1008 	ldrh.w	r1, [sp, #8]
	if (len != 1U) {
    861c:	d10c      	bne.n	8638 <write_led+0x24>
		LOG_DBG("Write led: Incorrect data length");
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (offset != 0) {
    861e:	b971      	cbnz	r1, 863e <write_led+0x2a>
		LOG_DBG("Write led: Incorrect data offset");
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (lbs_cb.led_cb) {
    8620:	4b0a      	ldr	r3, [pc, #40]	; (864c <write_led+0x38>)
    8622:	681b      	ldr	r3, [r3, #0]
    8624:	b90b      	cbnz	r3, 862a <write_led+0x16>
			LOG_DBG("Write led: Incorrect value");
			return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
		}
	}

	return len;
    8626:	2001      	movs	r0, #1
}
    8628:	bd08      	pop	{r3, pc}
		uint8_t val = *((uint8_t *)buf);
    862a:	7810      	ldrb	r0, [r2, #0]
		if (val == 0x00 || val == 0x01) {
    862c:	2801      	cmp	r0, #1
    862e:	d809      	bhi.n	8644 <write_led+0x30>
			lbs_cb.led_cb(val ? true : false);
    8630:	f000 0001 	and.w	r0, r0, #1
    8634:	4798      	blx	r3
    8636:	e7f6      	b.n	8626 <write_led+0x12>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    8638:	f06f 000c 	mvn.w	r0, #12
    863c:	e7f4      	b.n	8628 <write_led+0x14>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    863e:	f06f 0006 	mvn.w	r0, #6
    8642:	e7f1      	b.n	8628 <write_led+0x14>
			return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    8644:	f06f 0012 	mvn.w	r0, #18
    8648:	e7ee      	b.n	8628 <write_led+0x14>
    864a:	bf00      	nop
    864c:	200096f0 	.word	0x200096f0

00008650 <read_button>:

static ssize_t read_button(struct bt_conn *conn, const struct bt_gatt_attr *attr, void *buf,
			   uint16_t len, uint16_t offset)
{
    8650:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    8654:	461f      	mov	r7, r3
	// get a pointer to button_state which is passed in the BT_GATT_CHARACTERISTIC() and stored in attr->user_data
	const char *value = attr->user_data;

	LOG_DBG("Attribute read, handle: %u, conn: %p", attr->handle, (void *)conn);

	if (lbs_cb.button_cb) {
    8656:	4b0d      	ldr	r3, [pc, #52]	; (868c <read_button+0x3c>)
{
    8658:	4605      	mov	r5, r0
	if (lbs_cb.button_cb) {
    865a:	6858      	ldr	r0, [r3, #4]
{
    865c:	460c      	mov	r4, r1
    865e:	4616      	mov	r6, r2
	if (lbs_cb.button_cb) {
    8660:	b180      	cbz	r0, 8684 <read_button+0x34>
	const char *value = attr->user_data;
    8662:	f8d1 800c 	ldr.w	r8, [r1, #12]
		// Call the application callback function to update the get the current value of the button
		button_state = lbs_cb.button_cb();
    8666:	4780      	blx	r0
    8668:	4b09      	ldr	r3, [pc, #36]	; (8690 <read_button+0x40>)
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value, sizeof(*value));
    866a:	4632      	mov	r2, r6
		button_state = lbs_cb.button_cb();
    866c:	7018      	strb	r0, [r3, #0]
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value, sizeof(*value));
    866e:	2301      	movs	r3, #1
    8670:	e9cd 8301 	strd	r8, r3, [sp, #4]
    8674:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    8678:	4621      	mov	r1, r4
    867a:	9300      	str	r3, [sp, #0]
    867c:	4628      	mov	r0, r5
    867e:	463b      	mov	r3, r7
    8680:	f010 fbc1 	bl	18e06 <bt_gatt_attr_read>
	}

	return 0;
}
    8684:	b004      	add	sp, #16
    8686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    868a:	bf00      	nop
    868c:	200096f0 	.word	0x200096f0
    8690:	20009b35 	.word	0x20009b35

00008694 <my_lbs_init>:

);
/* A function to register application callbacks for the LED and Button characteristics  */
int my_lbs_init(struct my_lbs_cb *callbacks)
{
	if (callbacks) {
    8694:	b120      	cbz	r0, 86a0 <my_lbs_init+0xc>
		lbs_cb.led_cb = callbacks->led_cb;
    8696:	4b03      	ldr	r3, [pc, #12]	; (86a4 <my_lbs_init+0x10>)
    8698:	6802      	ldr	r2, [r0, #0]
    869a:	601a      	str	r2, [r3, #0]
		lbs_cb.button_cb = callbacks->button_cb;
    869c:	6842      	ldr	r2, [r0, #4]
    869e:	605a      	str	r2, [r3, #4]
	}

	return 0;
}
    86a0:	2000      	movs	r0, #0
    86a2:	4770      	bx	lr
    86a4:	200096f0 	.word	0x200096f0

000086a8 <my_lbs_send_button_state_indicate>:

/* STEP 5.1 - Define the function to send indications */
int my_lbs_send_button_state_indicate(bool button_state)
{
    86a8:	b507      	push	{r0, r1, r2, lr}
	if (!indicate_enabled) {
    86aa:	4b0c      	ldr	r3, [pc, #48]	; (86dc <my_lbs_send_button_state_indicate+0x34>)
{
    86ac:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!indicate_enabled) {
    86b0:	781b      	ldrb	r3, [r3, #0]
    86b2:	b183      	cbz	r3, 86d6 <my_lbs_send_button_state_indicate+0x2e>
		return -EACCES;
	}
	/* STEP 5.2 - Populate the indication */
	ind_params.attr = &my_lbs_svc.attrs[2];
    86b4:	490a      	ldr	r1, [pc, #40]	; (86e0 <my_lbs_send_button_state_indicate+0x38>)
    86b6:	4b0b      	ldr	r3, [pc, #44]	; (86e4 <my_lbs_send_button_state_indicate+0x3c>)
	ind_params.func = indicate_cb;
	ind_params.destroy = NULL;
    86b8:	2000      	movs	r0, #0
	ind_params.attr = &my_lbs_svc.attrs[2];
    86ba:	604b      	str	r3, [r1, #4]
	ind_params.func = indicate_cb;
    86bc:	4b0a      	ldr	r3, [pc, #40]	; (86e8 <my_lbs_send_button_state_indicate+0x40>)
	ind_params.destroy = NULL;
    86be:	60c8      	str	r0, [r1, #12]
	ind_params.func = indicate_cb;
    86c0:	608b      	str	r3, [r1, #8]
	ind_params.data = &button_state;
    86c2:	f10d 0307 	add.w	r3, sp, #7
    86c6:	610b      	str	r3, [r1, #16]
	ind_params.len = sizeof(button_state);
    86c8:	2301      	movs	r3, #1
    86ca:	828b      	strh	r3, [r1, #20]
	return bt_gatt_indicate(NULL, &ind_params);
    86cc:	f008 fdb4 	bl	11238 <bt_gatt_indicate>
}
    86d0:	b003      	add	sp, #12
    86d2:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EACCES;
    86d6:	f06f 000c 	mvn.w	r0, #12
    86da:	e7f9      	b.n	86d0 <my_lbs_send_button_state_indicate+0x28>
    86dc:	20009b36 	.word	0x20009b36
    86e0:	200096d8 	.word	0x200096d8
    86e4:	0001b388 	.word	0x0001b388
    86e8:	00016069 	.word	0x00016069

000086ec <my_lbs_send_sensor_notify>:

/* STEP 14 - Define the function to send notifications for the MYSENSOR characteristic */
int my_lbs_send_sensor_notify(uint32_t sensor_value)
{
    86ec:	b500      	push	{lr}
	if (!notify_mysensor_enabled) {
    86ee:	4b0d      	ldr	r3, [pc, #52]	; (8724 <my_lbs_send_sensor_notify+0x38>)
{
    86f0:	b089      	sub	sp, #36	; 0x24
	if (!notify_mysensor_enabled) {
    86f2:	781b      	ldrb	r3, [r3, #0]
{
    86f4:	9001      	str	r0, [sp, #4]
	if (!notify_mysensor_enabled) {
    86f6:	b193      	cbz	r3, 871e <my_lbs_send_sensor_notify+0x32>
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    86f8:	2100      	movs	r1, #0
    86fa:	2218      	movs	r2, #24
    86fc:	a802      	add	r0, sp, #8
    86fe:	f00f fa33 	bl	17b68 <memset>

	params.attr = attr;
    8702:	4b09      	ldr	r3, [pc, #36]	; (8728 <my_lbs_send_sensor_notify+0x3c>)
	params.len = len;
#if defined(CONFIG_BT_EATT)
	params.chan_opt = BT_ATT_CHAN_OPT_NONE;
#endif /* CONFIG_BT_EATT */

	return bt_gatt_notify_cb(conn, &params);
    8704:	2000      	movs	r0, #0
	params.attr = attr;
    8706:	9303      	str	r3, [sp, #12]
	params.data = data;
    8708:	ab01      	add	r3, sp, #4
    870a:	9304      	str	r3, [sp, #16]
	params.len = len;
    870c:	2304      	movs	r3, #4
	return bt_gatt_notify_cb(conn, &params);
    870e:	a902      	add	r1, sp, #8
	params.len = len;
    8710:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
    8714:	f008 ff16 	bl	11544 <bt_gatt_notify_cb>
		return -EACCES;
	}
	return bt_gatt_notify(NULL, &my_lbs_svc.attrs[7],
			      &sensor_value,
			      sizeof(sensor_value));
}
    8718:	b009      	add	sp, #36	; 0x24
    871a:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EACCES;
    871e:	f06f 000c 	mvn.w	r0, #12
    8722:	e7f9      	b.n	8718 <my_lbs_send_sensor_notify+0x2c>
    8724:	20009b37 	.word	0x20009b37
    8728:	0001b3ec 	.word	0x0001b3ec

0000872c <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    872c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8730:	b091      	sub	sp, #68	; 0x44
    8732:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    8734:	f002 0304 	and.w	r3, r2, #4
    8738:	9302      	str	r3, [sp, #8]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    873a:	f3c2 03c2 	ubfx	r3, r2, #3, #3
    873e:	3301      	adds	r3, #1
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    8740:	0784      	lsls	r4, r0, #30
{
    8742:	4605      	mov	r5, r0
    8744:	460e      	mov	r6, r1
    8746:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
    874a:	9203      	str	r2, [sp, #12]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    874c:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
    874e:	f040 81bd 	bne.w	8acc <cbvprintf_package+0x3a0>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    8752:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    8754:	b130      	cbz	r0, 8764 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    8756:	2907      	cmp	r1, #7
    8758:	d809      	bhi.n	876e <cbvprintf_package+0x42>
		return -ENOSPC;
    875a:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    875e:	b011      	add	sp, #68	; 0x44
    8760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    8764:	f001 0607 	and.w	r6, r1, #7
    8768:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    876a:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
    876e:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    8770:	f04f 0900 	mov.w	r9, #0
	align = VA_STACK_ALIGN(char *);
    8774:	f04f 0a04 	mov.w	sl, #4
	s = fmt--;
    8778:	1e59      	subs	r1, r3, #1
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    877a:	f04f 33ff 	mov.w	r3, #4294967295
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    877e:	464f      	mov	r7, r9
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    8780:	9301      	str	r3, [sp, #4]
	bool parsing = false;
    8782:	46cb      	mov	fp, r9
	size = sizeof(char *);
    8784:	4653      	mov	r3, sl
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    8786:	f8cd 9010 	str.w	r9, [sp, #16]
			if (buf0 != NULL) {
    878a:	b10d      	cbz	r5, 8790 <cbvprintf_package+0x64>
				*(const char **)buf = s;
    878c:	9a00      	ldr	r2, [sp, #0]
    878e:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    8790:	9805      	ldr	r0, [sp, #20]
    8792:	2800      	cmp	r0, #0
    8794:	f300 80eb 	bgt.w	896e <cbvprintf_package+0x242>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    8798:	4899      	ldr	r0, [pc, #612]	; (8a00 <cbvprintf_package+0x2d4>)
    879a:	9a00      	ldr	r2, [sp, #0]
    879c:	4282      	cmp	r2, r0
    879e:	d303      	bcc.n	87a8 <cbvprintf_package+0x7c>
    87a0:	4898      	ldr	r0, [pc, #608]	; (8a04 <cbvprintf_package+0x2d8>)
    87a2:	4282      	cmp	r2, r0
    87a4:	f0c0 80e3 	bcc.w	896e <cbvprintf_package+0x242>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    87a8:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    87aa:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    87ae:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    87b0:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    87b4:	f100 8106 	bmi.w	89c4 <cbvprintf_package+0x298>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    87b8:	2f0f      	cmp	r7, #15
    87ba:	f200 80b4 	bhi.w	8926 <cbvprintf_package+0x1fa>
				if (buf0 != NULL) {
    87be:	2d00      	cmp	r5, #0
    87c0:	f000 8108 	beq.w	89d4 <cbvprintf_package+0x2a8>
					str_ptr_pos[s_idx] = s_ptr_idx;
    87c4:	f107 0240 	add.w	r2, r7, #64	; 0x40
    87c8:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
    87cc:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    87ce:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    87d2:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
    87d6:	9804      	ldr	r0, [sp, #16]
    87d8:	3001      	adds	r0, #1
    87da:	9004      	str	r0, [sp, #16]
    87dc:	e0ea      	b.n	89b4 <cbvprintf_package+0x288>
			switch (*fmt) {
    87de:	287a      	cmp	r0, #122	; 0x7a
    87e0:	d860      	bhi.n	88a4 <cbvprintf_package+0x178>
    87e2:	284b      	cmp	r0, #75	; 0x4b
    87e4:	d80e      	bhi.n	8804 <cbvprintf_package+0xd8>
    87e6:	2847      	cmp	r0, #71	; 0x47
    87e8:	d85c      	bhi.n	88a4 <cbvprintf_package+0x178>
    87ea:	2829      	cmp	r0, #41	; 0x29
    87ec:	d82f      	bhi.n	884e <cbvprintf_package+0x122>
    87ee:	2825      	cmp	r0, #37	; 0x25
    87f0:	d055      	beq.n	889e <cbvprintf_package+0x172>
    87f2:	d857      	bhi.n	88a4 <cbvprintf_package+0x178>
    87f4:	2820      	cmp	r0, #32
    87f6:	d07d      	beq.n	88f4 <cbvprintf_package+0x1c8>
    87f8:	3823      	subs	r0, #35	; 0x23
    87fa:	f1d0 0b00 	rsbs	fp, r0, #0
    87fe:	eb4b 0b00 	adc.w	fp, fp, r0
    8802:	e077      	b.n	88f4 <cbvprintf_package+0x1c8>
    8804:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
    8808:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    880c:	d84a      	bhi.n	88a4 <cbvprintf_package+0x178>
    880e:	e8df f00c 	tbb	[pc, ip]
    8812:	4971      	.short	0x4971
    8814:	49494949 	.word	0x49494949
    8818:	49494949 	.word	0x49494949
    881c:	494c4949 	.word	0x494c4949
    8820:	49494949 	.word	0x49494949
    8824:	5a494949 	.word	0x5a494949
    8828:	5a4c4c49 	.word	0x5a4c4c49
    882c:	4c715a5a 	.word	0x4c715a5a
    8830:	4971496e 	.word	0x4971496e
    8834:	49184c18 	.word	0x49184c18
    8838:	4c808349 	.word	0x4c808349
    883c:	494c4949 	.word	0x494c4949
    8840:	80          	.byte	0x80
    8841:	00          	.byte	0x00
    8842:	2000      	movs	r0, #0
    8844:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
    8848:	f04f 0a04 	mov.w	sl, #4
    884c:	e039      	b.n	88c2 <cbvprintf_package+0x196>
    884e:	2201      	movs	r2, #1
			switch (*fmt) {
    8850:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
    8854:	fa5f fc8c 	uxtb.w	ip, ip
    8858:	fa02 fc0c 	lsl.w	ip, r2, ip
    885c:	ea1c 0f0e 	tst.w	ip, lr
    8860:	d148      	bne.n	88f4 <cbvprintf_package+0x1c8>
    8862:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
    8866:	d12e      	bne.n	88c6 <cbvprintf_package+0x19a>
    8868:	ea1c 0b02 	ands.w	fp, ip, r2
    886c:	d042      	beq.n	88f4 <cbvprintf_package+0x1c8>
		buf = (void *) ROUND_UP(buf, align);
    886e:	3c01      	subs	r4, #1
    8870:	4454      	add	r4, sl
    8872:	f1ca 0c00 	rsb	ip, sl, #0
    8876:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    887a:	2d00      	cmp	r5, #0
    887c:	d061      	beq.n	8942 <cbvprintf_package+0x216>
    887e:	eba3 0c05 	sub.w	ip, r3, r5
    8882:	44a4      	add	ip, r4
    8884:	45b4      	cmp	ip, r6
    8886:	f63f af68 	bhi.w	875a <cbvprintf_package+0x2e>
		if (is_str_arg) {
    888a:	2800      	cmp	r0, #0
    888c:	d168      	bne.n	8960 <cbvprintf_package+0x234>
		} else if (size == sizeof(int)) {
    888e:	2b04      	cmp	r3, #4
    8890:	d147      	bne.n	8922 <cbvprintf_package+0x1f6>
			int v = va_arg(ap, int);
    8892:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
    8896:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
    8898:	2304      	movs	r3, #4
    889a:	3404      	adds	r4, #4
    889c:	e02a      	b.n	88f4 <cbvprintf_package+0x1c8>
				arg_idx--;
    889e:	9a01      	ldr	r2, [sp, #4]
    88a0:	3a01      	subs	r2, #1
    88a2:	9201      	str	r2, [sp, #4]
				parsing = false;
    88a4:	f04f 0b00 	mov.w	fp, #0
				continue;
    88a8:	e024      	b.n	88f4 <cbvprintf_package+0x1c8>
				if (fmt[-1] == 'l') {
    88aa:	f811 0c01 	ldrb.w	r0, [r1, #-1]
    88ae:	286c      	cmp	r0, #108	; 0x6c
    88b0:	d134      	bne.n	891c <cbvprintf_package+0x1f0>
					if (fmt[-2] == 'l') {
    88b2:	2000      	movs	r0, #0
    88b4:	f811 3c02 	ldrb.w	r3, [r1, #-2]
				parsing = false;
    88b8:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
    88ba:	2b6c      	cmp	r3, #108	; 0x6c
    88bc:	d1c4      	bne.n	8848 <cbvprintf_package+0x11c>
						align = VA_STACK_ALIGN(long long);
    88be:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
    88c2:	4653      	mov	r3, sl
    88c4:	e7d3      	b.n	886e <cbvprintf_package+0x142>
					v.ld = va_arg(ap, long double);
    88c6:	f108 0807 	add.w	r8, r8, #7
    88ca:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
    88ce:	3407      	adds	r4, #7
    88d0:	f024 0407 	bic.w	r4, r4, #7
					v.ld = va_arg(ap, long double);
    88d4:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				if (buf0 != NULL) {
    88d8:	b135      	cbz	r5, 88e8 <cbvprintf_package+0x1bc>
					if (BUF_OFFSET + size > len) {
    88da:	9806      	ldr	r0, [sp, #24]
    88dc:	4420      	add	r0, r4
    88de:	42b0      	cmp	r0, r6
    88e0:	f63f af3b 	bhi.w	875a <cbvprintf_package+0x2e>
						*(long double *)buf = v.ld;
    88e4:	e9c4 ab00 	strd	sl, fp, [r4]
				parsing = false;
    88e8:	f04f 0b00 	mov.w	fp, #0
				buf += size;
    88ec:	3408      	adds	r4, #8
			switch (*fmt) {
    88ee:	f04f 0a08 	mov.w	sl, #8
    88f2:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
    88f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    88f8:	2800      	cmp	r0, #0
    88fa:	d078      	beq.n	89ee <cbvprintf_package+0x2c2>
			if (!parsing) {
    88fc:	f1bb 0f00 	cmp.w	fp, #0
    8900:	f47f af6d 	bne.w	87de <cbvprintf_package+0xb2>
				if (*fmt == '%') {
    8904:	2825      	cmp	r0, #37	; 0x25
    8906:	d1f5      	bne.n	88f4 <cbvprintf_package+0x1c8>
					parsing = true;
    8908:	f04f 0b01 	mov.w	fp, #1
					arg_idx++;
    890c:	9b01      	ldr	r3, [sp, #4]
    890e:	3301      	adds	r3, #1
    8910:	9301      	str	r3, [sp, #4]
				align = VA_STACK_ALIGN(size_t);
    8912:	f04f 0a04 	mov.w	sl, #4
    8916:	e7ec      	b.n	88f2 <cbvprintf_package+0x1c6>
			switch (*fmt) {
    8918:	4658      	mov	r0, fp
    891a:	e793      	b.n	8844 <cbvprintf_package+0x118>
    891c:	2000      	movs	r0, #0
				parsing = false;
    891e:	4683      	mov	fp, r0
    8920:	e7a5      	b.n	886e <cbvprintf_package+0x142>
		} else if (size == sizeof(long long)) {
    8922:	2b08      	cmp	r3, #8
    8924:	d002      	beq.n	892c <cbvprintf_package+0x200>
					return -EINVAL;
    8926:	f06f 0015 	mvn.w	r0, #21
    892a:	e718      	b.n	875e <cbvprintf_package+0x32>
			long long v = va_arg(ap, long long);
    892c:	f108 0807 	add.w	r8, r8, #7
    8930:	f028 0807 	bic.w	r8, r8, #7
    8934:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
    8938:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
    893c:	2308      	movs	r3, #8
    893e:	3408      	adds	r4, #8
    8940:	e7d8      	b.n	88f4 <cbvprintf_package+0x1c8>
		if (is_str_arg) {
    8942:	b968      	cbnz	r0, 8960 <cbvprintf_package+0x234>
		} else if (size == sizeof(int)) {
    8944:	2b04      	cmp	r3, #4
    8946:	d102      	bne.n	894e <cbvprintf_package+0x222>
			int v = va_arg(ap, int);
    8948:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
    894c:	e7a4      	b.n	8898 <cbvprintf_package+0x16c>
		} else if (size == sizeof(long long)) {
    894e:	2b08      	cmp	r3, #8
    8950:	d1e9      	bne.n	8926 <cbvprintf_package+0x1fa>
			long long v = va_arg(ap, long long);
    8952:	f108 0807 	add.w	r8, r8, #7
    8956:	f028 0807 	bic.w	r8, r8, #7
    895a:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
    895e:	e7ed      	b.n	893c <cbvprintf_package+0x210>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    8960:	9a05      	ldr	r2, [sp, #20]
    8962:	3a01      	subs	r2, #1
    8964:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
    8966:	f858 2b04 	ldr.w	r2, [r8], #4
    896a:	9200      	str	r2, [sp, #0]
    896c:	e70d      	b.n	878a <cbvprintf_package+0x5e>
			if (is_ro && !do_ro) {
    896e:	9a03      	ldr	r2, [sp, #12]
    8970:	0790      	lsls	r0, r2, #30
    8972:	d520      	bpl.n	89b6 <cbvprintf_package+0x28a>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    8974:	f04f 0c01 	mov.w	ip, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    8978:	eba4 0e05 	sub.w	lr, r4, r5
    897c:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    8980:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    8984:	d2cf      	bcs.n	8926 <cbvprintf_package+0x1fa>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    8986:	2f0f      	cmp	r7, #15
    8988:	d8cd      	bhi.n	8926 <cbvprintf_package+0x1fa>
				if (buf0 != NULL) {
    898a:	b1f5      	cbz	r5, 89ca <cbvprintf_package+0x29e>
					str_ptr_pos[s_idx] = s_ptr_idx;
    898c:	f107 0240 	add.w	r2, r7, #64	; 0x40
    8990:	eb0d 0e02 	add.w	lr, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
    8994:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    8996:	b2c0      	uxtb	r0, r0
    8998:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    899c:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
    89a0:	f1bc 0f00 	cmp.w	ip, #0
    89a4:	f43f af17 	beq.w	87d6 <cbvprintf_package+0xaa>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    89a8:	f060 007f 	orn	r0, r0, #127	; 0x7f
    89ac:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
    89b0:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
    89b4:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
    89b6:	f1c5 0208 	rsb	r2, r5, #8
			switch (*fmt) {
    89ba:	f64f 7eda 	movw	lr, #65498	; 0xffda
			buf += sizeof(char *);
    89be:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
    89c0:	9206      	str	r2, [sp, #24]
    89c2:	e797      	b.n	88f4 <cbvprintf_package+0x1c8>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    89c4:	f04f 0c00 	mov.w	ip, #0
    89c8:	e7da      	b.n	8980 <cbvprintf_package+0x254>
				} else if (is_ro) {
    89ca:	f1bc 0f00 	cmp.w	ip, #0
    89ce:	d001      	beq.n	89d4 <cbvprintf_package+0x2a8>
					len += 1;
    89d0:	3601      	adds	r6, #1
    89d2:	e7ef      	b.n	89b4 <cbvprintf_package+0x288>
				} else if (rws_pos_en) {
    89d4:	9802      	ldr	r0, [sp, #8]
					len += 2;
    89d6:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
    89d8:	2800      	cmp	r0, #0
    89da:	d1eb      	bne.n	89b4 <cbvprintf_package+0x288>
					len += strlen(s) + 1 + 1;
    89dc:	9800      	ldr	r0, [sp, #0]
    89de:	e9cd 3106 	strd	r3, r1, [sp, #24]
    89e2:	f00f f877 	bl	17ad4 <strlen>
    89e6:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
    89ea:	4406      	add	r6, r0
    89ec:	e7e2      	b.n	89b4 <cbvprintf_package+0x288>
	if (BUF_OFFSET / sizeof(int) > 255) {
    89ee:	1b63      	subs	r3, r4, r5
    89f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    89f4:	d297      	bcs.n	8926 <cbvprintf_package+0x1fa>
	if (buf0 == NULL) {
    89f6:	b93d      	cbnz	r5, 8a08 <cbvprintf_package+0x2dc>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    89f8:	f1a6 0408 	sub.w	r4, r6, #8
    89fc:	18e0      	adds	r0, r4, r3
    89fe:	e6ae      	b.n	875e <cbvprintf_package+0x32>
    8a00:	0001ad6c 	.word	0x0001ad6c
    8a04:	0001dde8 	.word	0x0001dde8
	if (rws_pos_en) {
    8a08:	9a02      	ldr	r2, [sp, #8]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    8a0a:	089b      	lsrs	r3, r3, #2
	*(char **)buf0 = NULL;
    8a0c:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    8a0e:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    8a10:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
    8a14:	b1c2      	cbz	r2, 8a48 <cbvprintf_package+0x31c>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    8a16:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    8a18:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
    8a1c:	f1b9 0f00 	cmp.w	r9, #0
    8a20:	d005      	beq.n	8a2e <cbvprintf_package+0x302>
		for (i = 0; i < s_idx; i++) {
    8a22:	2200      	movs	r2, #0
    8a24:	a808      	add	r0, sp, #32
			if (BUF_OFFSET + 1 > len) {
    8a26:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
    8a2a:	4297      	cmp	r7, r2
    8a2c:	d10e      	bne.n	8a4c <cbvprintf_package+0x320>
			*buf++ = str_ptr_arg[i];
    8a2e:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
    8a32:	f1c5 0301 	rsb	r3, r5, #1
    8a36:	f10d 0820 	add.w	r8, sp, #32
    8a3a:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
    8a3c:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
    8a40:	4557      	cmp	r7, sl
    8a42:	d112      	bne.n	8a6a <cbvprintf_package+0x33e>
	return BUF_OFFSET;
    8a44:	1b60      	subs	r0, r4, r5
    8a46:	e68a      	b.n	875e <cbvprintf_package+0x32>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    8a48:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    8a4a:	e7e5      	b.n	8a18 <cbvprintf_package+0x2ec>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    8a4c:	f810 3b01 	ldrb.w	r3, [r0], #1
    8a50:	0619      	lsls	r1, r3, #24
    8a52:	d508      	bpl.n	8a66 <cbvprintf_package+0x33a>
			if (BUF_OFFSET + 1 > len) {
    8a54:	eb04 0e0c 	add.w	lr, r4, ip
    8a58:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    8a5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    8a5e:	f63f ae7c 	bhi.w	875a <cbvprintf_package+0x2e>
			*buf++ = pos;
    8a62:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
    8a66:	3201      	adds	r2, #1
    8a68:	e7df      	b.n	8a2a <cbvprintf_package+0x2fe>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    8a6a:	f1b9 0f00 	cmp.w	r9, #0
    8a6e:	d003      	beq.n	8a78 <cbvprintf_package+0x34c>
    8a70:	f998 2000 	ldrsb.w	r2, [r8]
    8a74:	2a00      	cmp	r2, #0
    8a76:	db17      	blt.n	8aa8 <cbvprintf_package+0x37c>
		if (rws_pos_en) {
    8a78:	9b02      	ldr	r3, [sp, #8]
    8a7a:	b1d3      	cbz	r3, 8ab2 <cbvprintf_package+0x386>
			*buf++ = str_ptr_arg[i];
    8a7c:	f81a 200b 	ldrb.w	r2, [sl, fp]
    8a80:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
    8a84:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
    8a86:	9b01      	ldr	r3, [sp, #4]
    8a88:	1898      	adds	r0, r3, r2
    8a8a:	4420      	add	r0, r4
    8a8c:	42b0      	cmp	r0, r6
    8a8e:	f63f ae64 	bhi.w	875a <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
    8a92:	f898 0000 	ldrb.w	r0, [r8]
		memcpy(buf, s, size);
    8a96:	9900      	ldr	r1, [sp, #0]
		*buf++ = str_ptr_pos[i];
    8a98:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
    8a9c:	4620      	mov	r0, r4
    8a9e:	9203      	str	r2, [sp, #12]
    8aa0:	f00f f857 	bl	17b52 <memcpy>
		buf += size;
    8aa4:	9a03      	ldr	r2, [sp, #12]
    8aa6:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    8aa8:	f10a 0a01 	add.w	sl, sl, #1
    8aac:	f108 0801 	add.w	r8, r8, #1
    8ab0:	e7c6      	b.n	8a40 <cbvprintf_package+0x314>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    8ab2:	f898 2000 	ldrb.w	r2, [r8]
    8ab6:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    8aba:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    8abc:	9b02      	ldr	r3, [sp, #8]
			size = strlen(s) + 1;
    8abe:	9800      	ldr	r0, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    8ac0:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    8ac4:	f00f f806 	bl	17ad4 <strlen>
    8ac8:	1c42      	adds	r2, r0, #1
    8aca:	e7dc      	b.n	8a86 <cbvprintf_package+0x35a>
		return -EFAULT;
    8acc:	f06f 000d 	mvn.w	r0, #13
    8ad0:	e645      	b.n	875e <cbvprintf_package+0x32>
    8ad2:	bf00      	nop

00008ad4 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    8ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8ad8:	b095      	sub	sp, #84	; 0x54
    8ada:	af00      	add	r7, sp, #0
    8adc:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
    8ae0:	61bb      	str	r3, [r7, #24]
    8ae2:	f3cb 03c0 	ubfx	r3, fp, #3, #1
    8ae6:	4604      	mov	r4, r0
    8ae8:	627a      	str	r2, [r7, #36]	; 0x24
    8aea:	613b      	str	r3, [r7, #16]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    8aec:	6239      	str	r1, [r7, #32]
    8aee:	b951      	cbnz	r1, 8b06 <cbprintf_package_convert+0x32>
	buf += ros_nbr;
    8af0:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
    8af2:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
    8af4:	7880      	ldrb	r0, [r0, #2]
    8af6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    8afa:	4420      	add	r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
    8afc:	6a3b      	ldr	r3, [r7, #32]
    8afe:	429e      	cmp	r6, r3
    8b00:	d81a      	bhi.n	8b38 <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
    8b02:	1b03      	subs	r3, r0, r4
    8b04:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
    8b06:	f894 a002 	ldrb.w	sl, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
    8b0a:	78e3      	ldrb	r3, [r4, #3]
	ros_nbr = in_desc->ro_str_cnt;
    8b0c:	4656      	mov	r6, sl
	rws_nbr = in_desc->rw_str_cnt;
    8b0e:	617b      	str	r3, [r7, #20]
	ro_cpy = ros_nbr &&
    8b10:	f1ba 0f00 	cmp.w	sl, #0
    8b14:	d002      	beq.n	8b1c <cbprintf_package_convert+0x48>
    8b16:	f01b 0f01 	tst.w	fp, #1
    8b1a:	d117      	bne.n	8b4c <cbprintf_package_convert+0x78>
	rw_cpy = rws_nbr > 0 &&
    8b1c:	697b      	ldr	r3, [r7, #20]
    8b1e:	bb5b      	cbnz	r3, 8b78 <cbprintf_package_convert+0xa4>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
    8b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8b22:	b11b      	cbz	r3, 8b2c <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
    8b24:	4620      	mov	r0, r4
    8b26:	69ba      	ldr	r2, [r7, #24]
    8b28:	6a39      	ldr	r1, [r7, #32]
    8b2a:	4798      	blx	r3
		}

		return in_len;
    8b2c:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    8b2e:	4628      	mov	r0, r5
    8b30:	3754      	adds	r7, #84	; 0x54
    8b32:	46bd      	mov	sp, r7
    8b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
    8b38:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
    8b3a:	4628      	mov	r0, r5
    8b3c:	f00e ffca 	bl	17ad4 <strlen>
	for (unsigned int i = 0; i < s_nbr; i++) {
    8b40:	6a3b      	ldr	r3, [r7, #32]
		buf += strlen((const char *)buf) + 1;
    8b42:	3001      	adds	r0, #1
	for (unsigned int i = 0; i < s_nbr; i++) {
    8b44:	3301      	adds	r3, #1
		buf += strlen((const char *)buf) + 1;
    8b46:	4428      	add	r0, r5
	for (unsigned int i = 0; i < s_nbr; i++) {
    8b48:	623b      	str	r3, [r7, #32]
    8b4a:	e7d7      	b.n	8afc <cbprintf_package_convert+0x28>
	rw_cpy = rws_nbr > 0 &&
    8b4c:	6863      	ldr	r3, [r4, #4]
    8b4e:	f894 8000 	ldrb.w	r8, [r4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    8b52:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    8b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
    8b56:	ea4f 0288 	mov.w	r2, r8, lsl #2
    8b5a:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
    8b5c:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
    8b60:	2b00      	cmp	r3, #0
    8b62:	f040 8102 	bne.w	8d6a <cbprintf_package_convert+0x296>
		out_len = (int)in_len;
    8b66:	46c1      	mov	r9, r8
	size_t strl_cnt = 0;
    8b68:	2600      	movs	r6, #0
		out_len = (int)in_len;
    8b6a:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
    8b6c:	eb0a 0308 	add.w	r3, sl, r8
			for (unsigned int i = 0; i < ros_nbr; i++) {
    8b70:	454b      	cmp	r3, r9
    8b72:	d14e      	bne.n	8c12 <cbprintf_package_convert+0x13e>
    8b74:	44d0      	add	r8, sl
    8b76:	e013      	b.n	8ba0 <cbprintf_package_convert+0xcc>
	rw_cpy = rws_nbr > 0 &&
    8b78:	f01b 0f02 	tst.w	fp, #2
    8b7c:	d0d0      	beq.n	8b20 <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
    8b7e:	f894 8000 	ldrb.w	r8, [r4]
    8b82:	ea4f 0388 	mov.w	r3, r8, lsl #2
    8b86:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    8b88:	6863      	ldr	r3, [r4, #4]
	uint8_t *str_pos = &buf[args_size];
    8b8a:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	const char *fmt = *(const char **)(buf + sizeof(void *));
    8b8e:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    8b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8b92:	2b00      	cmp	r3, #0
    8b94:	d178      	bne.n	8c88 <cbprintf_package_convert+0x1b4>
		out_len = (int)in_len;
    8b96:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    8b98:	f1ba 0f00 	cmp.w	sl, #0
    8b9c:	d14e      	bne.n	8c3c <cbprintf_package_convert+0x168>
	size_t strl_cnt = 0;
    8b9e:	4656      	mov	r6, sl
		for (unsigned int i = 0; i < rws_nbr; i++) {
    8ba0:	f01b 0f05 	tst.w	fp, #5
    8ba4:	bf0c      	ite	eq
    8ba6:	2302      	moveq	r3, #2
    8ba8:	2301      	movne	r3, #1
    8baa:	627b      	str	r3, [r7, #36]	; 0x24
    8bac:	697b      	ldr	r3, [r7, #20]
    8bae:	eb08 0a43 	add.w	sl, r8, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    8bb2:	f00b 0302 	and.w	r3, fp, #2
    8bb6:	623b      	str	r3, [r7, #32]
		for (unsigned int i = 0; i < rws_nbr; i++) {
    8bb8:	45d0      	cmp	r8, sl
    8bba:	d0b8      	beq.n	8b2e <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
    8bbc:	f818 1b02 	ldrb.w	r1, [r8], #2
			const char *str = *(const char **)&buf32[arg_pos];
    8bc0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
    8bc4:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
    8bc8:	4bad      	ldr	r3, [pc, #692]	; (8e80 <cbprintf_package_convert+0x3ac>)
    8bca:	4599      	cmp	r9, r3
    8bcc:	d302      	bcc.n	8bd4 <cbprintf_package_convert+0x100>
    8bce:	4bad      	ldr	r3, [pc, #692]	; (8e84 <cbprintf_package_convert+0x3b0>)
    8bd0:	4599      	cmp	r9, r3
    8bd2:	d339      	bcc.n	8c48 <cbprintf_package_convert+0x174>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    8bd4:	693b      	ldr	r3, [r7, #16]
    8bd6:	2b00      	cmp	r3, #0
    8bd8:	d043      	beq.n	8c62 <cbprintf_package_convert+0x18e>
    8bda:	69f8      	ldr	r0, [r7, #28]
    8bdc:	f00d fa76 	bl	160cc <is_ptr>
    8be0:	2800      	cmp	r0, #0
    8be2:	d03e      	beq.n	8c62 <cbprintf_package_convert+0x18e>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    8be4:	46e9      	mov	r9, sp
    8be6:	b08a      	sub	sp, #40	; 0x28
    8be8:	466a      	mov	r2, sp
    8bea:	4ba7      	ldr	r3, [pc, #668]	; (8e88 <cbprintf_package_convert+0x3b4>)
    8bec:	6153      	str	r3, [r2, #20]
    8bee:	69fb      	ldr	r3, [r7, #28]
    8bf0:	e9c2 3106 	strd	r3, r1, [r2, #24]
    8bf4:	f44f 7300 	mov.w	r3, #512	; 0x200
    8bf8:	8413      	strh	r3, [r2, #32]
    8bfa:	4ba4      	ldr	r3, [pc, #656]	; (8e8c <cbprintf_package_convert+0x3b8>)
    8bfc:	f842 3f10 	str.w	r3, [r2, #16]!
    8c00:	2300      	movs	r3, #0
    8c02:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    8c06:	48a2      	ldr	r0, [pc, #648]	; (8e90 <cbprintf_package_convert+0x3bc>)
    8c08:	f001 fd8c 	bl	a724 <z_impl_z_log_msg_static_create>
				out_len -= 2;
    8c0c:	3d02      	subs	r5, #2
    8c0e:	46cd      	mov	sp, r9
				continue;
    8c10:	e7d2      	b.n	8bb8 <cbprintf_package_convert+0xe4>
				const char *str = *(const char **)&buf32[*str_pos];
    8c12:	f819 2b01 	ldrb.w	r2, [r9], #1
    8c16:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    8c18:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    8c1c:	f00e ff5a 	bl	17ad4 <strlen>
				if (strl && strl_cnt < strl_len) {
    8c20:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    8c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    8c24:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
    8c26:	b13a      	cbz	r2, 8c38 <cbprintf_package_convert+0x164>
    8c28:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    8c2c:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
    8c2e:	bf3e      	ittt	cc
    8c30:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
    8c32:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
    8c36:	3601      	addcc	r6, #1
				out_len += len;
    8c38:	4405      	add	r5, r0
			for (unsigned int i = 0; i < ros_nbr; i++) {
    8c3a:	e799      	b.n	8b70 <cbprintf_package_convert+0x9c>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    8c3c:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
    8c40:	bf1c      	itt	ne
    8c42:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
    8c44:	44d0      	addne	r8, sl
    8c46:	e7ab      	b.n	8ba0 <cbprintf_package_convert+0xcc>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    8c48:	693b      	ldr	r3, [r7, #16]
    8c4a:	b123      	cbz	r3, 8c56 <cbprintf_package_convert+0x182>
    8c4c:	69f8      	ldr	r0, [r7, #28]
    8c4e:	f00d fa3d 	bl	160cc <is_ptr>
    8c52:	2800      	cmp	r0, #0
    8c54:	d1c6      	bne.n	8be4 <cbprintf_package_convert+0x110>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    8c56:	f01b 0f01 	tst.w	fp, #1
    8c5a:	d105      	bne.n	8c68 <cbprintf_package_convert+0x194>
					out_len -= drop_ro_str_pos ? 2 : 1;
    8c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8c5e:	1aed      	subs	r5, r5, r3
    8c60:	e7aa      	b.n	8bb8 <cbprintf_package_convert+0xe4>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    8c62:	6a3b      	ldr	r3, [r7, #32]
    8c64:	2b00      	cmp	r3, #0
    8c66:	d0a7      	beq.n	8bb8 <cbprintf_package_convert+0xe4>
		return 1 + strlen(str);
    8c68:	4648      	mov	r0, r9
    8c6a:	f00e ff33 	bl	17ad4 <strlen>
				if (strl && strl_cnt < strl_len) {
    8c6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    8c70:	b143      	cbz	r3, 8c84 <cbprintf_package_convert+0x1b0>
    8c72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    8c76:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
    8c78:	bf3f      	itttt	cc
    8c7a:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
    8c7c:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
    8c7e:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
    8c82:	3601      	addcc	r6, #1
				out_len += (len - 1);
    8c84:	4405      	add	r5, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
    8c86:	e797      	b.n	8bb8 <cbprintf_package_convert+0xe4>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    8c88:	f1ba 0f00 	cmp.w	sl, #0
    8c8c:	d072      	beq.n	8d74 <cbprintf_package_convert+0x2a0>
    8c8e:	f01b 0604 	ands.w	r6, fp, #4
    8c92:	d072      	beq.n	8d7a <cbprintf_package_convert+0x2a6>
		keep_cnt = ros_nbr;
    8c94:	46d1      	mov	r9, sl
		scpy_cnt = 0;
    8c96:	2600      	movs	r6, #0
		dst = keep_str_pos;
    8c98:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
    8c9c:	4652      	mov	r2, sl
    8c9e:	4641      	mov	r1, r8
    8ca0:	f00e ff57 	bl	17b52 <memcpy>
	str_pos += ros_nbr;
    8ca4:	697b      	ldr	r3, [r7, #20]
    8ca6:	44d0      	add	r8, sl
	for (unsigned int i = 0; i < rws_nbr; i++) {
    8ca8:	005b      	lsls	r3, r3, #1
    8caa:	60bb      	str	r3, [r7, #8]
    8cac:	697b      	ldr	r3, [r7, #20]
    8cae:	eb08 0343 	add.w	r3, r8, r3, lsl #1
    8cb2:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    8cb4:	f00b 0302 	and.w	r3, fp, #2
    8cb8:	607b      	str	r3, [r7, #4]
	for (unsigned int i = 0; i < rws_nbr; i++) {
    8cba:	697b      	ldr	r3, [r7, #20]
    8cbc:	4598      	cmp	r8, r3
    8cbe:	d15e      	bne.n	8d7e <cbprintf_package_convert+0x2aa>
	out_desc.len = in_desc->len;
    8cc0:	7823      	ldrb	r3, [r4, #0]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    8cc2:	f01b 0f02 	tst.w	fp, #2
	out_desc.len = in_desc->len;
    8cc6:	61fb      	str	r3, [r7, #28]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    8cc8:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    8cca:	bf18      	it	ne
    8ccc:	2100      	movne	r1, #0
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    8cce:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    8cd2:	bf08      	it	eq
    8cd4:	ea4f 0159 	moveq.w	r1, r9, lsr #1
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    8cd8:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    8cdc:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    8cde:	f040 809d 	bne.w	8e1c <cbprintf_package_convert+0x348>
    8ce2:	f01b 0f04 	tst.w	fp, #4
    8ce6:	bf14      	ite	ne
    8ce8:	4648      	movne	r0, r9
    8cea:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
    8cec:	f894 b002 	ldrb.w	fp, [r4, #2]
    8cf0:	f894 8003 	ldrb.w	r8, [r4, #3]
    8cf4:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
    8cf6:	7062      	strb	r2, [r4, #1]
    8cf8:	70a0      	strb	r0, [r4, #2]
    8cfa:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
    8cfc:	4620      	mov	r0, r4
    8cfe:	69ba      	ldr	r2, [r7, #24]
    8d00:	68f9      	ldr	r1, [r7, #12]
    8d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8d04:	4798      	blx	r3
	if (rv < 0) {
    8d06:	1e05      	subs	r5, r0, #0
    8d08:	f6ff af11 	blt.w	8b2e <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
    8d0c:	69fb      	ldr	r3, [r7, #28]
    8d0e:	f884 8003 	strb.w	r8, [r4, #3]
    8d12:	7023      	strb	r3, [r4, #0]
    8d14:	693b      	ldr	r3, [r7, #16]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    8d16:	4649      	mov	r1, r9
	*in_desc = in_desc_backup;
    8d18:	7063      	strb	r3, [r4, #1]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    8d1a:	69ba      	ldr	r2, [r7, #24]
    8d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
    8d1e:	f884 b002 	strb.w	fp, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    8d22:	f107 0040 	add.w	r0, r7, #64	; 0x40
    8d26:	4798      	blx	r3
	if (rv < 0) {
    8d28:	f1b0 0800 	subs.w	r8, r0, #0
    8d2c:	f2c0 80a3 	blt.w	8e76 <cbprintf_package_convert+0x3a2>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    8d30:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
    8d32:	69ba      	ldr	r2, [r7, #24]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    8d34:	eba3 010a 	sub.w	r1, r3, sl
    8d38:	68fb      	ldr	r3, [r7, #12]
	rv = cb(str_pos, strs_len, ctx);
    8d3a:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    8d3c:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
    8d3e:	68bb      	ldr	r3, [r7, #8]
    8d40:	1ac9      	subs	r1, r1, r3
    8d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8d44:	4798      	blx	r3
	if (rv < 0) {
    8d46:	2800      	cmp	r0, #0
    8d48:	f2c0 8097 	blt.w	8e7a <cbprintf_package_convert+0x3a6>
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    8d4c:	f04f 0b00 	mov.w	fp, #0
	out_len += rv;
    8d50:	44a8      	add	r8, r5
	out_len += rv;
    8d52:	eb08 0500 	add.w	r5, r8, r0
		uint8_t loc = cpy_str_pos[i];
    8d56:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    8d5a:	45b3      	cmp	fp, r6
    8d5c:	d360      	bcc.n	8e20 <cbprintf_package_convert+0x34c>
	(void)cb(NULL, 0, ctx);
    8d5e:	2100      	movs	r1, #0
    8d60:	69ba      	ldr	r2, [r7, #24]
    8d62:	4608      	mov	r0, r1
    8d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8d66:	4798      	blx	r3
	return out_len;
    8d68:	e6e1      	b.n	8b2e <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
    8d6a:	f04f 0900 	mov.w	r9, #0
    8d6e:	f107 0030 	add.w	r0, r7, #48	; 0x30
    8d72:	e793      	b.n	8c9c <cbprintf_package_convert+0x1c8>
		scpy_cnt = 0;
    8d74:	4656      	mov	r6, sl
		keep_cnt = 0;
    8d76:	46d1      	mov	r9, sl
    8d78:	e794      	b.n	8ca4 <cbprintf_package_convert+0x1d0>
    8d7a:	46b1      	mov	r9, r6
    8d7c:	e792      	b.n	8ca4 <cbprintf_package_convert+0x1d0>
		uint8_t arg_idx = *str_pos++;
    8d7e:	f818 1b02 	ldrb.w	r1, [r8], #2
    8d82:	4a3f      	ldr	r2, [pc, #252]	; (8e80 <cbprintf_package_convert+0x3ac>)
		uint8_t arg_pos = *str_pos++;
    8d84:	f818 5c01 	ldrb.w	r5, [r8, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
    8d88:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
    8d8c:	4293      	cmp	r3, r2
    8d8e:	d302      	bcc.n	8d96 <cbprintf_package_convert+0x2c2>
    8d90:	4a3c      	ldr	r2, [pc, #240]	; (8e84 <cbprintf_package_convert+0x3b0>)
    8d92:	4293      	cmp	r3, r2
    8d94:	d31c      	bcc.n	8dd0 <cbprintf_package_convert+0x2fc>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    8d96:	693b      	ldr	r3, [r7, #16]
    8d98:	b123      	cbz	r3, 8da4 <cbprintf_package_convert+0x2d0>
    8d9a:	69f8      	ldr	r0, [r7, #28]
    8d9c:	f00d f996 	bl	160cc <is_ptr>
    8da0:	2800      	cmp	r0, #0
    8da2:	d18a      	bne.n	8cba <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    8da4:	687b      	ldr	r3, [r7, #4]
    8da6:	b9f3      	cbnz	r3, 8de6 <cbprintf_package_convert+0x312>
				keep_str_pos[keep_cnt++] = arg_idx;
    8da8:	f109 0228 	add.w	r2, r9, #40	; 0x28
    8dac:	f107 0028 	add.w	r0, r7, #40	; 0x28
    8db0:	4402      	add	r2, r0
    8db2:	f109 0301 	add.w	r3, r9, #1
    8db6:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
    8dba:	f107 0250 	add.w	r2, r7, #80	; 0x50
    8dbe:	f109 0902 	add.w	r9, r9, #2
    8dc2:	fa52 f383 	uxtab	r3, r2, r3
    8dc6:	fa5f f989 	uxtb.w	r9, r9
    8dca:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (unsigned int i = 0; i < rws_nbr; i++) {
    8dce:	e774      	b.n	8cba <cbprintf_package_convert+0x1e6>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    8dd0:	693b      	ldr	r3, [r7, #16]
    8dd2:	b12b      	cbz	r3, 8de0 <cbprintf_package_convert+0x30c>
    8dd4:	69f8      	ldr	r0, [r7, #28]
    8dd6:	f00d f979 	bl	160cc <is_ptr>
    8dda:	2800      	cmp	r0, #0
    8ddc:	f47f af6d 	bne.w	8cba <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    8de0:	f01b 0f01 	tst.w	fp, #1
    8de4:	d009      	beq.n	8dfa <cbprintf_package_convert+0x326>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    8de6:	f106 0228 	add.w	r2, r6, #40	; 0x28
    8dea:	f107 0128 	add.w	r1, r7, #40	; 0x28
    8dee:	1c73      	adds	r3, r6, #1
    8df0:	1856      	adds	r6, r2, r1
    8df2:	f806 5c20 	strb.w	r5, [r6, #-32]
    8df6:	b2de      	uxtb	r6, r3
    8df8:	e75f      	b.n	8cba <cbprintf_package_convert+0x1e6>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    8dfa:	f01b 0f04 	tst.w	fp, #4
    8dfe:	f43f af5c 	beq.w	8cba <cbprintf_package_convert+0x1e6>
				keep_str_pos[keep_cnt++] = arg_pos;
    8e02:	f109 0228 	add.w	r2, r9, #40	; 0x28
    8e06:	f107 0128 	add.w	r1, r7, #40	; 0x28
    8e0a:	f109 0301 	add.w	r3, r9, #1
    8e0e:	eb02 0901 	add.w	r9, r2, r1
    8e12:	f809 5c10 	strb.w	r5, [r9, #-16]
    8e16:	fa5f f983 	uxtb.w	r9, r3
    8e1a:	e74e      	b.n	8cba <cbprintf_package_convert+0x1e6>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    8e1c:	2000      	movs	r0, #0
    8e1e:	e765      	b.n	8cec <cbprintf_package_convert+0x218>
		uint8_t loc = cpy_str_pos[i];
    8e20:	f81b 300a 	ldrb.w	r3, [fp, sl]
		const char *str = *(const char **)&buf32[loc];
    8e24:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint8_t loc = cpy_str_pos[i];
    8e28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		uint16_t str_len = strl ? strl[i] : 0;
    8e2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    8e2e:	b1fb      	cbz	r3, 8e70 <cbprintf_package_convert+0x39c>
    8e30:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
    8e34:	2101      	movs	r1, #1
    8e36:	69ba      	ldr	r2, [r7, #24]
    8e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8e3a:	f107 002f 	add.w	r0, r7, #47	; 0x2f
    8e3e:	4798      	blx	r3
		if (rv < 0) {
    8e40:	2800      	cmp	r0, #0
    8e42:	db1a      	blt.n	8e7a <cbprintf_package_convert+0x3a6>
		out_len += rv;
    8e44:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    8e46:	f1b8 0f00 	cmp.w	r8, #0
    8e4a:	d106      	bne.n	8e5a <cbprintf_package_convert+0x386>
    8e4c:	4648      	mov	r0, r9
    8e4e:	f00e fe41 	bl	17ad4 <strlen>
    8e52:	f100 0801 	add.w	r8, r0, #1
    8e56:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
    8e5a:	4641      	mov	r1, r8
    8e5c:	4648      	mov	r0, r9
    8e5e:	69ba      	ldr	r2, [r7, #24]
    8e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8e62:	4798      	blx	r3
		if (rv < 0) {
    8e64:	2800      	cmp	r0, #0
    8e66:	db08      	blt.n	8e7a <cbprintf_package_convert+0x3a6>
		out_len += rv;
    8e68:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    8e6a:	f10b 0b01 	add.w	fp, fp, #1
    8e6e:	e774      	b.n	8d5a <cbprintf_package_convert+0x286>
		uint16_t str_len = strl ? strl[i] : 0;
    8e70:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
    8e74:	e7de      	b.n	8e34 <cbprintf_package_convert+0x360>
    8e76:	4645      	mov	r5, r8
    8e78:	e659      	b.n	8b2e <cbprintf_package_convert+0x5a>
    8e7a:	4605      	mov	r5, r0
    8e7c:	e657      	b.n	8b2e <cbprintf_package_convert+0x5a>
    8e7e:	bf00      	nop
    8e80:	0001ad6c 	.word	0x0001ad6c
    8e84:	0001dde8 	.word	0x0001dde8
    8e88:	0001bc97 	.word	0x0001bc97
    8e8c:	01000004 	.word	0x01000004
    8e90:	0001b218 	.word	0x0001b218

00008e94 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
    8e94:	4b01      	ldr	r3, [pc, #4]	; (8e9c <__printk_hook_install+0x8>)
    8e96:	6018      	str	r0, [r3, #0]
}
    8e98:	4770      	bx	lr
    8e9a:	bf00      	nop
    8e9c:	200081dc 	.word	0x200081dc

00008ea0 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    8ea0:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    8ea2:	2500      	movs	r5, #0
{
    8ea4:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    8ea6:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    8eaa:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    8eac:	9500      	str	r5, [sp, #0]
    8eae:	a903      	add	r1, sp, #12
    8eb0:	4805      	ldr	r0, [pc, #20]	; (8ec8 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    8eb2:	9505      	str	r5, [sp, #20]
    8eb4:	f000 f918 	bl	90e8 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    8eb8:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    8ebc:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    8ebe:	bfb8      	it	lt
    8ec0:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    8ec2:	b007      	add	sp, #28
    8ec4:	bd30      	pop	{r4, r5, pc}
    8ec6:	bf00      	nop
    8ec8:	0001611b 	.word	0x0001611b

00008ecc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    8ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8ed0:	8b05      	ldrh	r5, [r0, #24]
{
    8ed2:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    8ed4:	0728      	lsls	r0, r5, #28
{
    8ed6:	4690      	mov	r8, r2
	if (processing) {
    8ed8:	d411      	bmi.n	8efe <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    8eda:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8edc:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    8ee0:	f040 80cd 	bne.w	907e <process_event+0x1b2>
			evt = process_recheck(mgr);
    8ee4:	4620      	mov	r0, r4
    8ee6:	f00d fb16 	bl	16516 <process_recheck>
		}

		if (evt == EVT_NOP) {
    8eea:	b178      	cbz	r0, 8f0c <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    8eec:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8eee:	8b21      	ldrh	r1, [r4, #24]
    8ef0:	2804      	cmp	r0, #4
    8ef2:	d811      	bhi.n	8f18 <process_event+0x4c>
    8ef4:	e8df f000 	tbb	[pc, r0]
    8ef8:	856d10c3 	.word	0x856d10c3
    8efc:	95          	.byte	0x95
    8efd:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    8efe:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    8f00:	bf0c      	ite	eq
    8f02:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    8f06:	f045 0520 	orrne.w	r5, r5, #32
    8f0a:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    8f0c:	f388 8811 	msr	BASEPRI, r8
    8f10:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    8f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    8f18:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    8f1c:	45aa      	cmp	sl, r5
    8f1e:	f000 80a6 	beq.w	906e <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    8f22:	2700      	movs	r7, #0
    8f24:	46b9      	mov	r9, r7
    8f26:	463e      	mov	r6, r7
    8f28:	68a3      	ldr	r3, [r4, #8]
    8f2a:	2b00      	cmp	r3, #0
    8f2c:	f000 80bd 	beq.w	90aa <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    8f30:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    8f34:	8321      	strh	r1, [r4, #24]
    8f36:	f388 8811 	msr	BASEPRI, r8
    8f3a:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    8f3e:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    8f40:	2900      	cmp	r1, #0
    8f42:	f000 80bb 	beq.w	90bc <process_event+0x1f0>
	return node->next;
    8f46:	680d      	ldr	r5, [r1, #0]
    8f48:	2900      	cmp	r1, #0
    8f4a:	f000 80b7 	beq.w	90bc <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    8f4e:	4633      	mov	r3, r6
    8f50:	4652      	mov	r2, sl
    8f52:	4620      	mov	r0, r4
    8f54:	f8d1 8004 	ldr.w	r8, [r1, #4]
    8f58:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    8f5a:	2d00      	cmp	r5, #0
    8f5c:	d076      	beq.n	904c <process_event+0x180>
    8f5e:	682b      	ldr	r3, [r5, #0]
    8f60:	4629      	mov	r1, r5
    8f62:	461d      	mov	r5, r3
    8f64:	e7f0      	b.n	8f48 <process_event+0x7c>
    8f66:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    8f6a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    8f6c:	2a01      	cmp	r2, #1
    8f6e:	d81b      	bhi.n	8fa8 <process_event+0xdc>
	list->head = NULL;
    8f70:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8f72:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    8f76:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    8f78:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8f7a:	b289      	uxth	r1, r1
	list->tail = NULL;
    8f7c:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    8f80:	d109      	bne.n	8f96 <process_event+0xca>
    8f82:	463b      	mov	r3, r7
    8f84:	e003      	b.n	8f8e <process_event+0xc2>
				mgr->refs += 1U;
    8f86:	8b62      	ldrh	r2, [r4, #26]
    8f88:	3201      	adds	r2, #1
    8f8a:	8362      	strh	r2, [r4, #26]
	return node->next;
    8f8c:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    8f8e:	2b00      	cmp	r3, #0
    8f90:	d1f9      	bne.n	8f86 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8f92:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    8f96:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    8f98:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    8f9a:	f00d fabc 	bl	16516 <process_recheck>
    8f9e:	2800      	cmp	r0, #0
    8fa0:	d07b      	beq.n	909a <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    8fa2:	f041 0120 	orr.w	r1, r1, #32
    8fa6:	e077      	b.n	9098 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    8fa8:	2b04      	cmp	r3, #4
    8faa:	d10a      	bne.n	8fc2 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8fac:	f021 0107 	bic.w	r1, r1, #7
    8fb0:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    8fb2:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    8fb4:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    8fb6:	f00d faae 	bl	16516 <process_recheck>
    8fba:	b110      	cbz	r0, 8fc2 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    8fbc:	f041 0120 	orr.w	r1, r1, #32
    8fc0:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    8fc2:	8b21      	ldrh	r1, [r4, #24]
    8fc4:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    8fc8:	45aa      	cmp	sl, r5
    8fca:	d050      	beq.n	906e <process_event+0x1a2>
    8fcc:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    8fce:	46b9      	mov	r9, r7
    8fd0:	e7aa      	b.n	8f28 <process_event+0x5c>
			transit = mgr->transitions->start;
    8fd2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8fd4:	f021 0107 	bic.w	r1, r1, #7
    8fd8:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    8fdc:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    8fde:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    8fe2:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    8fe4:	d12d      	bne.n	9042 <process_event+0x176>
		    || (transit != NULL)) {
    8fe6:	f1b9 0f00 	cmp.w	r9, #0
    8fea:	d040      	beq.n	906e <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    8fec:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    8ff0:	8321      	strh	r1, [r4, #24]
    8ff2:	f388 8811 	msr	BASEPRI, r8
    8ff6:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    8ffa:	4620      	mov	r0, r4
    8ffc:	4939      	ldr	r1, [pc, #228]	; (90e4 <process_event+0x218>)
    8ffe:	47c8      	blx	r9
    9000:	e029      	b.n	9056 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9002:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    9006:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9008:	f041 0104 	orr.w	r1, r1, #4
    900c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    900e:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    9010:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    9014:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    9016:	d0e6      	beq.n	8fe6 <process_event+0x11a>
    9018:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    901a:	f04f 0a04 	mov.w	sl, #4
		res = 0;
    901e:	463e      	mov	r6, r7
    9020:	e782      	b.n	8f28 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9022:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    9026:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9028:	f041 0105 	orr.w	r1, r1, #5
    902c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    902e:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    9030:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    9034:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    9036:	d0d6      	beq.n	8fe6 <process_event+0x11a>
    9038:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    903a:	f04f 0a05 	mov.w	sl, #5
		res = 0;
    903e:	463e      	mov	r6, r7
    9040:	e772      	b.n	8f28 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    9042:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9044:	f04f 0a06 	mov.w	sl, #6
		res = 0;
    9048:	463e      	mov	r6, r7
    904a:	e76d      	b.n	8f28 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    904c:	462b      	mov	r3, r5
    904e:	e787      	b.n	8f60 <process_event+0x94>
			if (transit != NULL) {
    9050:	f1b9 0f00 	cmp.w	r9, #0
    9054:	d1d1      	bne.n	8ffa <process_event+0x12e>
	__asm__ volatile(
    9056:	f04f 0320 	mov.w	r3, #32
    905a:	f3ef 8811 	mrs	r8, BASEPRI
    905e:	f383 8812 	msr	BASEPRI_MAX, r3
    9062:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    9066:	8b23      	ldrh	r3, [r4, #24]
    9068:	f023 0308 	bic.w	r3, r3, #8
    906c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    906e:	8b25      	ldrh	r5, [r4, #24]
    9070:	06ea      	lsls	r2, r5, #27
    9072:	d52e      	bpl.n	90d2 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    9074:	f025 0310 	bic.w	r3, r5, #16
    9078:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    907a:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    907e:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9080:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    9082:	2e00      	cmp	r6, #0
    9084:	f6bf af6f 	bge.w	8f66 <process_event+0x9a>
	list->head = NULL;
    9088:	2300      	movs	r3, #0
		*clients = mgr->clients;
    908a:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    908c:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9090:	f021 0107 	bic.w	r1, r1, #7
    9094:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    9098:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    909a:	8b21      	ldrh	r1, [r4, #24]
    909c:	f04f 0900 	mov.w	r9, #0
    90a0:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    90a4:	45aa      	cmp	sl, r5
    90a6:	f47f af3f 	bne.w	8f28 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    90aa:	2f00      	cmp	r7, #0
    90ac:	d09b      	beq.n	8fe6 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    90ae:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    90b2:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    90b4:	f388 8811 	msr	BASEPRI, r8
    90b8:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    90bc:	2f00      	cmp	r7, #0
    90be:	d0c7      	beq.n	9050 <process_event+0x184>
	return node->next;
    90c0:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    90c2:	4639      	mov	r1, r7
    90c4:	4633      	mov	r3, r6
    90c6:	4652      	mov	r2, sl
    90c8:	4620      	mov	r0, r4
    90ca:	f00d fa50 	bl	1656e <notify_one>
	list->head = node;
    90ce:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    90d0:	e7f4      	b.n	90bc <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    90d2:	06ab      	lsls	r3, r5, #26
    90d4:	f57f af1a 	bpl.w	8f0c <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    90d8:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    90dc:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    90de:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    90e2:	e6ff      	b.n	8ee4 <process_event+0x18>
    90e4:	0001659b 	.word	0x0001659b

000090e8 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    90e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    90ec:	4681      	mov	r9, r0
    90ee:	468b      	mov	fp, r1
    90f0:	4617      	mov	r7, r2
    90f2:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    90f4:	2500      	movs	r5, #0
{
    90f6:	b095      	sub	sp, #84	; 0x54
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    90f8:	7838      	ldrb	r0, [r7, #0]
    90fa:	b908      	cbnz	r0, 9100 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    90fc:	4628      	mov	r0, r5
    90fe:	e357      	b.n	97b0 <z_cbvprintf_impl+0x6c8>
			OUTC(*fp++);
    9100:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    9102:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    9104:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
    9106:	d006      	beq.n	9116 <z_cbvprintf_impl+0x2e>
			OUTC('%');
    9108:	4659      	mov	r1, fp
    910a:	47c8      	blx	r9
    910c:	2800      	cmp	r0, #0
    910e:	f2c0 834f 	blt.w	97b0 <z_cbvprintf_impl+0x6c8>
    9112:	3501      	adds	r5, #1
		if (bps == NULL) {
    9114:	e1fb      	b.n	950e <z_cbvprintf_impl+0x426>
		} state = {
    9116:	2218      	movs	r2, #24
    9118:	2100      	movs	r1, #0
    911a:	a80e      	add	r0, sp, #56	; 0x38
    911c:	f00e fd24 	bl	17b68 <memset>
	if (*sp == '%') {
    9120:	787b      	ldrb	r3, [r7, #1]
    9122:	2b25      	cmp	r3, #37	; 0x25
    9124:	d07d      	beq.n	9222 <z_cbvprintf_impl+0x13a>
    9126:	2300      	movs	r3, #0
    9128:	4698      	mov	r8, r3
    912a:	469e      	mov	lr, r3
    912c:	469c      	mov	ip, r3
    912e:	461e      	mov	r6, r3
    9130:	1c78      	adds	r0, r7, #1
    9132:	4601      	mov	r1, r0
		switch (*sp) {
    9134:	f810 2b01 	ldrb.w	r2, [r0], #1
    9138:	2a2b      	cmp	r2, #43	; 0x2b
    913a:	f000 80a1 	beq.w	9280 <z_cbvprintf_impl+0x198>
    913e:	f200 8098 	bhi.w	9272 <z_cbvprintf_impl+0x18a>
    9142:	2a20      	cmp	r2, #32
    9144:	f000 809f 	beq.w	9286 <z_cbvprintf_impl+0x19e>
    9148:	2a23      	cmp	r2, #35	; 0x23
    914a:	f000 809f 	beq.w	928c <z_cbvprintf_impl+0x1a4>
    914e:	b12b      	cbz	r3, 915c <z_cbvprintf_impl+0x74>
    9150:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9158:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    915c:	f1b8 0f00 	cmp.w	r8, #0
    9160:	d005      	beq.n	916e <z_cbvprintf_impl+0x86>
    9162:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9166:	f043 0320 	orr.w	r3, r3, #32
    916a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    916e:	f1be 0f00 	cmp.w	lr, #0
    9172:	d005      	beq.n	9180 <z_cbvprintf_impl+0x98>
    9174:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9178:	f043 0310 	orr.w	r3, r3, #16
    917c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    9180:	f1bc 0f00 	cmp.w	ip, #0
    9184:	d005      	beq.n	9192 <z_cbvprintf_impl+0xaa>
    9186:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    918a:	f043 0308 	orr.w	r3, r3, #8
    918e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    9192:	b12e      	cbz	r6, 91a0 <z_cbvprintf_impl+0xb8>
    9194:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9198:	f043 0304 	orr.w	r3, r3, #4
    919c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
    91a0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    91a4:	f003 0044 	and.w	r0, r3, #68	; 0x44
    91a8:	2844      	cmp	r0, #68	; 0x44
    91aa:	d103      	bne.n	91b4 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
    91ac:	f36f 1386 	bfc	r3, #6, #1
    91b0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
    91b4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    91b8:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    91ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    91be:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    91c2:	d17f      	bne.n	92c4 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
    91c4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    91c8:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    91ca:	f042 0201 	orr.w	r2, r2, #1
    91ce:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
    91d2:	781a      	ldrb	r2, [r3, #0]
    91d4:	2a2e      	cmp	r2, #46	; 0x2e
    91d6:	bf0c      	ite	eq
    91d8:	2101      	moveq	r1, #1
    91da:	2100      	movne	r1, #0
    91dc:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    91e0:	f361 0241 	bfi	r2, r1, #1, #1
    91e4:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
    91e8:	d178      	bne.n	92dc <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
    91ea:	785a      	ldrb	r2, [r3, #1]
    91ec:	2a2a      	cmp	r2, #42	; 0x2a
    91ee:	d06e      	beq.n	92ce <z_cbvprintf_impl+0x1e6>
	size_t val = 0;
    91f0:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    91f2:	f04f 0c0a 	mov.w	ip, #10
	++sp;
    91f6:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    91f8:	4619      	mov	r1, r3
    91fa:	f811 0b01 	ldrb.w	r0, [r1], #1
    91fe:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    9202:	2e09      	cmp	r6, #9
    9204:	f240 8095 	bls.w	9332 <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
    9208:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
    920c:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
    920e:	f3c1 0040 	ubfx	r0, r1, #1, #1
    9212:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    9216:	460a      	mov	r2, r1
    9218:	f360 0241 	bfi	r2, r0, #1, #1
    921c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    9220:	e05c      	b.n	92dc <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
    9222:	1cba      	adds	r2, r7, #2
    9224:	9203      	str	r2, [sp, #12]
    9226:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
    922a:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    922e:	07da      	lsls	r2, r3, #31
    9230:	f140 812e 	bpl.w	9490 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
    9234:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    9238:	f1b8 0f00 	cmp.w	r8, #0
    923c:	da07      	bge.n	924e <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
    923e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				width = -width;
    9242:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
    9246:	f042 0204 	orr.w	r2, r2, #4
    924a:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
		if (conv->prec_star) {
    924e:	075e      	lsls	r6, r3, #29
    9250:	f140 8127 	bpl.w	94a2 <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
    9254:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
    9258:	f1ba 0f00 	cmp.w	sl, #0
    925c:	f280 8126 	bge.w	94ac <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
    9260:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    9264:	f36f 0341 	bfc	r3, #1, #1
    9268:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
    926c:	f04f 3aff 	mov.w	sl, #4294967295
    9270:	e11c      	b.n	94ac <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
    9272:	2a2d      	cmp	r2, #45	; 0x2d
    9274:	d00d      	beq.n	9292 <z_cbvprintf_impl+0x1aa>
    9276:	2a30      	cmp	r2, #48	; 0x30
    9278:	f47f af69 	bne.w	914e <z_cbvprintf_impl+0x66>
    927c:	2301      	movs	r3, #1
	} while (loop);
    927e:	e758      	b.n	9132 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
    9280:	f04f 0c01 	mov.w	ip, #1
    9284:	e755      	b.n	9132 <z_cbvprintf_impl+0x4a>
    9286:	f04f 0e01 	mov.w	lr, #1
    928a:	e752      	b.n	9132 <z_cbvprintf_impl+0x4a>
    928c:	f04f 0801 	mov.w	r8, #1
    9290:	e74f      	b.n	9132 <z_cbvprintf_impl+0x4a>
    9292:	2601      	movs	r6, #1
    9294:	e74d      	b.n	9132 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
    9296:	4603      	mov	r3, r0
    9298:	fb0e 6202 	mla	r2, lr, r2, r6
    929c:	3a30      	subs	r2, #48	; 0x30
    929e:	4618      	mov	r0, r3
    92a0:	f810 6b01 	ldrb.w	r6, [r0], #1
    92a4:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    92a8:	f1bc 0f09 	cmp.w	ip, #9
    92ac:	d9f3      	bls.n	9296 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
    92ae:	4299      	cmp	r1, r3
    92b0:	d08f      	beq.n	91d2 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    92b2:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
    92b6:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
    92b8:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    92ba:	f362 0141 	bfi	r1, r2, #1, #1
    92be:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    92c2:	e786      	b.n	91d2 <z_cbvprintf_impl+0xea>
    92c4:	460b      	mov	r3, r1
	size_t val = 0;
    92c6:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    92c8:	f04f 0e0a 	mov.w	lr, #10
    92cc:	e7e7      	b.n	929e <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
    92ce:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    92d2:	3302      	adds	r3, #2
		conv->prec_star = true;
    92d4:	f042 0204 	orr.w	r2, r2, #4
    92d8:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	switch (*sp) {
    92dc:	781a      	ldrb	r2, [r3, #0]
    92de:	2a6c      	cmp	r2, #108	; 0x6c
    92e0:	d047      	beq.n	9372 <z_cbvprintf_impl+0x28a>
    92e2:	d82b      	bhi.n	933c <z_cbvprintf_impl+0x254>
    92e4:	2a68      	cmp	r2, #104	; 0x68
    92e6:	d031      	beq.n	934c <z_cbvprintf_impl+0x264>
    92e8:	2a6a      	cmp	r2, #106	; 0x6a
    92ea:	d04b      	beq.n	9384 <z_cbvprintf_impl+0x29c>
    92ec:	2a4c      	cmp	r2, #76	; 0x4c
    92ee:	d051      	beq.n	9394 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
    92f0:	461a      	mov	r2, r3
    92f2:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    92f6:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    92f8:	9203      	str	r2, [sp, #12]
    92fa:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->length_mod == LENGTH_UPPER_L) {
    92fe:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	switch (conv->specifier) {
    9302:	f200 80be 	bhi.w	9482 <z_cbvprintf_impl+0x39a>
    9306:	2b6d      	cmp	r3, #109	; 0x6d
    9308:	d851      	bhi.n	93ae <z_cbvprintf_impl+0x2c6>
    930a:	2b69      	cmp	r3, #105	; 0x69
    930c:	f200 80b9 	bhi.w	9482 <z_cbvprintf_impl+0x39a>
    9310:	2b57      	cmp	r3, #87	; 0x57
    9312:	d867      	bhi.n	93e4 <z_cbvprintf_impl+0x2fc>
    9314:	2b41      	cmp	r3, #65	; 0x41
    9316:	d003      	beq.n	9320 <z_cbvprintf_impl+0x238>
    9318:	3b45      	subs	r3, #69	; 0x45
    931a:	2b02      	cmp	r3, #2
    931c:	f200 80b1 	bhi.w	9482 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
    9320:	2204      	movs	r2, #4
    9322:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    9326:	f362 0302 	bfi	r3, r2, #0, #3
    932a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    932e:	2301      	movs	r3, #1
			break;
    9330:	e073      	b.n	941a <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
    9332:	fb0c 0202 	mla	r2, ip, r2, r0
    9336:	460b      	mov	r3, r1
    9338:	3a30      	subs	r2, #48	; 0x30
    933a:	e75d      	b.n	91f8 <z_cbvprintf_impl+0x110>
	switch (*sp) {
    933c:	2a74      	cmp	r2, #116	; 0x74
    933e:	d025      	beq.n	938c <z_cbvprintf_impl+0x2a4>
    9340:	2a7a      	cmp	r2, #122	; 0x7a
    9342:	d1d5      	bne.n	92f0 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
    9344:	2106      	movs	r1, #6
    9346:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    934a:	e00c      	b.n	9366 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
    934c:	785a      	ldrb	r2, [r3, #1]
    934e:	2a68      	cmp	r2, #104	; 0x68
    9350:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    9354:	d106      	bne.n	9364 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
    9356:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    9358:	f361 02c6 	bfi	r2, r1, #3, #4
    935c:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    9360:	3302      	adds	r3, #2
    9362:	e7c5      	b.n	92f0 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
    9364:	2102      	movs	r1, #2
    9366:	f361 02c6 	bfi	r2, r1, #3, #4
    936a:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    936e:	3301      	adds	r3, #1
    9370:	e7be      	b.n	92f0 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
    9372:	785a      	ldrb	r2, [r3, #1]
    9374:	2a6c      	cmp	r2, #108	; 0x6c
    9376:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    937a:	d101      	bne.n	9380 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
    937c:	2104      	movs	r1, #4
    937e:	e7eb      	b.n	9358 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
    9380:	2103      	movs	r1, #3
    9382:	e7f0      	b.n	9366 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
    9384:	2105      	movs	r1, #5
    9386:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    938a:	e7ec      	b.n	9366 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
    938c:	2107      	movs	r1, #7
    938e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    9392:	e7e8      	b.n	9366 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
    9394:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    9398:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    939c:	f022 0202 	bic.w	r2, r2, #2
    93a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    93a4:	f042 0202 	orr.w	r2, r2, #2
    93a8:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    93ac:	e7df      	b.n	936e <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
    93ae:	3b6e      	subs	r3, #110	; 0x6e
    93b0:	b2d9      	uxtb	r1, r3
    93b2:	2301      	movs	r3, #1
    93b4:	408b      	lsls	r3, r1
    93b6:	f240 4182 	movw	r1, #1154	; 0x482
    93ba:	420b      	tst	r3, r1
    93bc:	d137      	bne.n	942e <z_cbvprintf_impl+0x346>
    93be:	f013 0f24 	tst.w	r3, #36	; 0x24
    93c2:	d151      	bne.n	9468 <z_cbvprintf_impl+0x380>
    93c4:	07d8      	lsls	r0, r3, #31
    93c6:	d55c      	bpl.n	9482 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
    93c8:	2103      	movs	r1, #3
    93ca:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    93ce:	f361 0302 	bfi	r3, r1, #0, #3
    93d2:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    93d6:	f002 0378 	and.w	r3, r2, #120	; 0x78
    93da:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    93de:	424b      	negs	r3, r1
    93e0:	414b      	adcs	r3, r1
    93e2:	e01a      	b.n	941a <z_cbvprintf_impl+0x332>
    93e4:	2001      	movs	r0, #1
	switch (conv->specifier) {
    93e6:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    93ea:	b2c9      	uxtb	r1, r1
    93ec:	fa00 f101 	lsl.w	r1, r0, r1
    93f0:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    93f4:	d194      	bne.n	9320 <z_cbvprintf_impl+0x238>
    93f6:	f640 0601 	movw	r6, #2049	; 0x801
    93fa:	4231      	tst	r1, r6
    93fc:	d11d      	bne.n	943a <z_cbvprintf_impl+0x352>
    93fe:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    9402:	d03e      	beq.n	9482 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
    9404:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    9408:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    940c:	f002 0278 	and.w	r2, r2, #120	; 0x78
    9410:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    9412:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    9416:	d034      	beq.n	9482 <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
    9418:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    941a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    941e:	f3c2 0140 	ubfx	r1, r2, #1, #1
    9422:	430b      	orrs	r3, r1
    9424:	f363 0241 	bfi	r2, r3, #1, #1
    9428:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    942c:	e6fd      	b.n	922a <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
    942e:	2102      	movs	r1, #2
    9430:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    9434:	f361 0302 	bfi	r3, r1, #0, #3
    9438:	e7e8      	b.n	940c <z_cbvprintf_impl+0x324>
    943a:	2002      	movs	r0, #2
    943c:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    9440:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    9444:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    9448:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    944a:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    944e:	bf02      	ittt	eq
    9450:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    9454:	f041 0101 	orreq.w	r1, r1, #1
    9458:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    945c:	2b63      	cmp	r3, #99	; 0x63
    945e:	d1db      	bne.n	9418 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
    9460:	1e13      	subs	r3, r2, #0
    9462:	bf18      	it	ne
    9464:	2301      	movne	r3, #1
    9466:	e7d8      	b.n	941a <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
    9468:	2103      	movs	r1, #3
    946a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    946e:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    9472:	f361 0302 	bfi	r3, r1, #0, #3
    9476:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    947a:	bf14      	ite	ne
    947c:	2301      	movne	r3, #1
    947e:	2300      	moveq	r3, #0
    9480:	e7cb      	b.n	941a <z_cbvprintf_impl+0x332>
		conv->invalid = true;
    9482:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9486:	f043 0301 	orr.w	r3, r3, #1
    948a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    948e:	e7c3      	b.n	9418 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
    9490:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    9494:	2a00      	cmp	r2, #0
		int width = -1;
    9496:	bfac      	ite	ge
    9498:	f04f 38ff 	movge.w	r8, #4294967295
			width = conv->width_value;
    949c:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
    94a0:	e6d5      	b.n	924e <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
    94a2:	0798      	lsls	r0, r3, #30
    94a4:	f57f aee2 	bpl.w	926c <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
    94a8:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
		conv->pad0_value = 0;
    94ac:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    94ae:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    94b2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
			= (enum length_mod_enum)conv->length_mod;
    94b6:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		enum specifier_cat_enum specifier_cat
    94ba:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    94be:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    94c0:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    94c4:	d133      	bne.n	952e <z_cbvprintf_impl+0x446>
			switch (length_mod) {
    94c6:	1ecb      	subs	r3, r1, #3
    94c8:	2b04      	cmp	r3, #4
    94ca:	d804      	bhi.n	94d6 <z_cbvprintf_impl+0x3ee>
    94cc:	e8df f003 	tbb	[pc, r3]
    94d0:	21464621 	.word	0x21464621
    94d4:	21          	.byte	0x21
    94d5:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    94d6:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    94d8:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    94da:	ea4f 72e3 	mov.w	r2, r3, asr #31
    94de:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    94e2:	d11c      	bne.n	951e <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
    94e4:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
    94e8:	17da      	asrs	r2, r3, #31
    94ea:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
    94ee:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    94f0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    94f4:	f013 0603 	ands.w	r6, r3, #3
    94f8:	d050      	beq.n	959c <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
    94fa:	463a      	mov	r2, r7
    94fc:	4659      	mov	r1, fp
    94fe:	4648      	mov	r0, r9
    9500:	9b03      	ldr	r3, [sp, #12]
    9502:	f00d f936 	bl	16772 <outs>
    9506:	2800      	cmp	r0, #0
    9508:	f2c0 8152 	blt.w	97b0 <z_cbvprintf_impl+0x6c8>
    950c:	4405      	add	r5, r0
			continue;
    950e:	9f03      	ldr	r7, [sp, #12]
    9510:	e5f2      	b.n	90f8 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    9512:	f854 3b04 	ldr.w	r3, [r4], #4
    9516:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    9518:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    951c:	e7e8      	b.n	94f0 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
    951e:	2902      	cmp	r1, #2
    9520:	d1e5      	bne.n	94ee <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
    9522:	b21a      	sxth	r2, r3
    9524:	f343 33c0 	sbfx	r3, r3, #15, #1
    9528:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    952c:	e7df      	b.n	94ee <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
    952e:	2b02      	cmp	r3, #2
    9530:	d124      	bne.n	957c <z_cbvprintf_impl+0x494>
			switch (length_mod) {
    9532:	1ecb      	subs	r3, r1, #3
    9534:	2b04      	cmp	r3, #4
    9536:	d804      	bhi.n	9542 <z_cbvprintf_impl+0x45a>
    9538:	e8df f003 	tbb	[pc, r3]
    953c:	18101018 	.word	0x18101018
    9540:	18          	.byte	0x18
    9541:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    9542:	2901      	cmp	r1, #1
    9544:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    9548:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    954c:	d014      	beq.n	9578 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
    954e:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    9550:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    9554:	d1cc      	bne.n	94f0 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
    9556:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    9558:	930e      	str	r3, [sp, #56]	; 0x38
    955a:	e7c9      	b.n	94f0 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
    955c:	3407      	adds	r4, #7
    955e:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    9562:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    9566:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    956a:	e7c1      	b.n	94f0 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
    956c:	f854 3b04 	ldr.w	r3, [r4], #4
    9570:	930e      	str	r3, [sp, #56]	; 0x38
    9572:	2300      	movs	r3, #0
    9574:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    9576:	e7bb      	b.n	94f0 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
    9578:	b2db      	uxtb	r3, r3
    957a:	e7cd      	b.n	9518 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
    957c:	2b04      	cmp	r3, #4
    957e:	d108      	bne.n	9592 <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
    9580:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    9582:	f024 0407 	bic.w	r4, r4, #7
    9586:	e9d4 2300 	ldrd	r2, r3, [r4]
    958a:	3408      	adds	r4, #8
    958c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    9590:	e7ae      	b.n	94f0 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
    9592:	2b03      	cmp	r3, #3
    9594:	d1ac      	bne.n	94f0 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
    9596:	f854 3b04 	ldr.w	r3, [r4], #4
    959a:	e7dd      	b.n	9558 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
    959c:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    95a0:	2878      	cmp	r0, #120	; 0x78
    95a2:	d8b4      	bhi.n	950e <z_cbvprintf_impl+0x426>
    95a4:	2862      	cmp	r0, #98	; 0x62
    95a6:	d81c      	bhi.n	95e2 <z_cbvprintf_impl+0x4fa>
    95a8:	2825      	cmp	r0, #37	; 0x25
    95aa:	f43f adad 	beq.w	9108 <z_cbvprintf_impl+0x20>
    95ae:	2858      	cmp	r0, #88	; 0x58
    95b0:	d1ad      	bne.n	950e <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
    95b2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    95b6:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    95ba:	9300      	str	r3, [sp, #0]
    95bc:	aa10      	add	r2, sp, #64	; 0x40
    95be:	ab08      	add	r3, sp, #32
    95c0:	f00d f891 	bl	166e6 <encode_uint>
			if (precision >= 0) {
    95c4:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    95c8:	4607      	mov	r7, r0
			if (precision >= 0) {
    95ca:	f280 8099 	bge.w	9700 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
    95ce:	2f00      	cmp	r7, #0
    95d0:	d09d      	beq.n	950e <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    95d2:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    95d6:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    95d8:	2e00      	cmp	r6, #0
    95da:	f000 80c0 	beq.w	975e <z_cbvprintf_impl+0x676>
			nj_len += 1U;
    95de:	3001      	adds	r0, #1
    95e0:	e0bd      	b.n	975e <z_cbvprintf_impl+0x676>
		switch (conv->specifier) {
    95e2:	3863      	subs	r0, #99	; 0x63
    95e4:	2815      	cmp	r0, #21
    95e6:	d892      	bhi.n	950e <z_cbvprintf_impl+0x426>
    95e8:	a201      	add	r2, pc, #4	; (adr r2, 95f0 <z_cbvprintf_impl+0x508>)
    95ea:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    95ee:	bf00      	nop
    95f0:	000096c5 	.word	0x000096c5
    95f4:	000096d7 	.word	0x000096d7
    95f8:	0000950f 	.word	0x0000950f
    95fc:	0000950f 	.word	0x0000950f
    9600:	0000950f 	.word	0x0000950f
    9604:	0000950f 	.word	0x0000950f
    9608:	000096d7 	.word	0x000096d7
    960c:	0000950f 	.word	0x0000950f
    9610:	0000950f 	.word	0x0000950f
    9614:	0000950f 	.word	0x0000950f
    9618:	0000950f 	.word	0x0000950f
    961c:	00009763 	.word	0x00009763
    9620:	000096fb 	.word	0x000096fb
    9624:	00009721 	.word	0x00009721
    9628:	0000950f 	.word	0x0000950f
    962c:	0000950f 	.word	0x0000950f
    9630:	00009649 	.word	0x00009649
    9634:	0000950f 	.word	0x0000950f
    9638:	000096fb 	.word	0x000096fb
    963c:	0000950f 	.word	0x0000950f
    9640:	0000950f 	.word	0x0000950f
    9644:	000096fb 	.word	0x000096fb
			if (precision >= 0) {
    9648:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    964c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    964e:	db35      	blt.n	96bc <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
    9650:	4651      	mov	r1, sl
    9652:	4638      	mov	r0, r7
    9654:	f00e fa45 	bl	17ae2 <strnlen>
			bpe = bps + len;
    9658:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    965c:	2f00      	cmp	r7, #0
    965e:	f43f af56 	beq.w	950e <z_cbvprintf_impl+0x426>
		char sign = 0;
    9662:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    9664:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    9668:	f013 0210 	ands.w	r2, r3, #16
    966c:	9205      	str	r2, [sp, #20]
    966e:	f000 8092 	beq.w	9796 <z_cbvprintf_impl+0x6ae>
			nj_len += 2U;
    9672:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    9674:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    9676:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    9678:	bf48      	it	mi
    967a:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    967c:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    967e:	bf48      	it	mi
    9680:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    9682:	f1b8 0f00 	cmp.w	r8, #0
		nj_len += conv->pad0_value;
    9686:	9204      	str	r2, [sp, #16]
		if (width > 0) {
    9688:	f340 809f 	ble.w	97ca <z_cbvprintf_impl+0x6e2>
			if (!conv->flag_dash) {
    968c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    9690:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    9694:	f3c2 0380 	ubfx	r3, r2, #2, #1
    9698:	0750      	lsls	r0, r2, #29
    969a:	9306      	str	r3, [sp, #24]
    969c:	f100 8095 	bmi.w	97ca <z_cbvprintf_impl+0x6e2>
				if (conv->flag_zero) {
    96a0:	0651      	lsls	r1, r2, #25
    96a2:	f140 8088 	bpl.w	97b6 <z_cbvprintf_impl+0x6ce>
					if (sign != 0) {
    96a6:	b13e      	cbz	r6, 96b8 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    96a8:	4659      	mov	r1, fp
    96aa:	4630      	mov	r0, r6
    96ac:	47c8      	blx	r9
    96ae:	2800      	cmp	r0, #0
    96b0:	db7e      	blt.n	97b0 <z_cbvprintf_impl+0x6c8>
    96b2:	9b06      	ldr	r3, [sp, #24]
    96b4:	3501      	adds	r5, #1
    96b6:	461e      	mov	r6, r3
					pad = '0';
    96b8:	2230      	movs	r2, #48	; 0x30
    96ba:	e07d      	b.n	97b8 <z_cbvprintf_impl+0x6d0>
				len = strlen(bps);
    96bc:	4638      	mov	r0, r7
    96be:	f00e fa09 	bl	17ad4 <strlen>
    96c2:	e7c9      	b.n	9658 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    96c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		char sign = 0;
    96c6:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    96c8:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    96ca:	f88d 3020 	strb.w	r3, [sp, #32]
			bps = buf;
    96ce:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    96d0:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
    96d4:	e7c6      	b.n	9664 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
    96d6:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    96d8:	bf5a      	itte	pl
    96da:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    96de:	015e      	lslpl	r6, r3, #5
				sign = '+';
    96e0:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
    96e2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
			if (sint < 0) {
    96e6:	2b00      	cmp	r3, #0
    96e8:	f6bf af63 	bge.w	95b2 <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
    96ec:	4252      	negs	r2, r2
    96ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    96f2:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    96f4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    96f8:	e75b      	b.n	95b2 <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
    96fa:	2600      	movs	r6, #0
    96fc:	e759      	b.n	95b2 <z_cbvprintf_impl+0x4ca>
		char sign = 0;
    96fe:	2600      	movs	r6, #0
				conv->flag_zero = false;
    9700:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    9704:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    9708:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    970a:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    970e:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    9710:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    9714:	f67f af5b 	bls.w	95ce <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
    9718:	ebaa 0303 	sub.w	r3, sl, r3
    971c:	9311      	str	r3, [sp, #68]	; 0x44
    971e:	e756      	b.n	95ce <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
    9720:	980e      	ldr	r0, [sp, #56]	; 0x38
    9722:	b390      	cbz	r0, 978a <z_cbvprintf_impl+0x6a2>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    9724:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    9728:	9300      	str	r3, [sp, #0]
    972a:	2100      	movs	r1, #0
    972c:	ab08      	add	r3, sp, #32
    972e:	aa10      	add	r2, sp, #64	; 0x40
    9730:	f00c ffd9 	bl	166e6 <encode_uint>
				conv->altform_0c = true;
    9734:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    9738:	f1ba 0f00 	cmp.w	sl, #0
				conv->altform_0c = true;
    973c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    9740:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    9744:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    9748:	4607      	mov	r7, r0
				conv->altform_0c = true;
    974a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    974e:	dad6      	bge.n	96fe <z_cbvprintf_impl+0x616>
		if (bps == NULL) {
    9750:	2800      	cmp	r0, #0
    9752:	f43f aedc 	beq.w	950e <z_cbvprintf_impl+0x426>
		char sign = 0;
    9756:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    9758:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    975c:	1a18      	subs	r0, r3, r0
		if (sign != 0) {
    975e:	469a      	mov	sl, r3
    9760:	e780      	b.n	9664 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
    9762:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    9764:	2907      	cmp	r1, #7
    9766:	f63f aed2 	bhi.w	950e <z_cbvprintf_impl+0x426>
    976a:	e8df f001 	tbb	[pc, r1]
    976e:	040c      	.short	0x040c
    9770:	08080c06 	.word	0x08080c06
    9774:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    9776:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    9778:	e6c9      	b.n	950e <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
    977a:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    977c:	e6c7      	b.n	950e <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
    977e:	17ea      	asrs	r2, r5, #31
    9780:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    9784:	e6c3      	b.n	950e <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    9786:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    9788:	e6c1      	b.n	950e <z_cbvprintf_impl+0x426>
    978a:	4f2f      	ldr	r7, [pc, #188]	; (9848 <z_cbvprintf_impl+0x760>)
		char sign = 0;
    978c:	4606      	mov	r6, r0
			bpe = bps + 5;
    978e:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    9792:	2005      	movs	r0, #5
    9794:	e766      	b.n	9664 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
    9796:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    9798:	bf48      	it	mi
    979a:	3001      	addmi	r0, #1
    979c:	e76a      	b.n	9674 <z_cbvprintf_impl+0x58c>
					OUTC(pad);
    979e:	4610      	mov	r0, r2
    97a0:	9307      	str	r3, [sp, #28]
    97a2:	9206      	str	r2, [sp, #24]
    97a4:	4659      	mov	r1, fp
    97a6:	47c8      	blx	r9
    97a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    97ac:	2800      	cmp	r0, #0
    97ae:	da04      	bge.n	97ba <z_cbvprintf_impl+0x6d2>
#undef OUTS
#undef OUTC
}
    97b0:	b015      	add	sp, #84	; 0x54
    97b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    97b6:	2220      	movs	r2, #32
					pad = '0';
    97b8:	4643      	mov	r3, r8
				while (width-- > 0) {
    97ba:	4619      	mov	r1, r3
    97bc:	2900      	cmp	r1, #0
    97be:	f103 33ff 	add.w	r3, r3, #4294967295
    97c2:	dcec      	bgt.n	979e <z_cbvprintf_impl+0x6b6>
    97c4:	4445      	add	r5, r8
    97c6:	4698      	mov	r8, r3
    97c8:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    97ca:	b12e      	cbz	r6, 97d8 <z_cbvprintf_impl+0x6f0>
			OUTC(sign);
    97cc:	4659      	mov	r1, fp
    97ce:	4630      	mov	r0, r6
    97d0:	47c8      	blx	r9
    97d2:	2800      	cmp	r0, #0
    97d4:	dbec      	blt.n	97b0 <z_cbvprintf_impl+0x6c8>
    97d6:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    97d8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    97dc:	06da      	lsls	r2, r3, #27
    97de:	d401      	bmi.n	97e4 <z_cbvprintf_impl+0x6fc>
    97e0:	071b      	lsls	r3, r3, #28
    97e2:	d505      	bpl.n	97f0 <z_cbvprintf_impl+0x708>
				OUTC('0');
    97e4:	4659      	mov	r1, fp
    97e6:	2030      	movs	r0, #48	; 0x30
    97e8:	47c8      	blx	r9
    97ea:	2800      	cmp	r0, #0
    97ec:	dbe0      	blt.n	97b0 <z_cbvprintf_impl+0x6c8>
    97ee:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    97f0:	9b05      	ldr	r3, [sp, #20]
    97f2:	b133      	cbz	r3, 9802 <z_cbvprintf_impl+0x71a>
				OUTC(conv->specifier);
    97f4:	4659      	mov	r1, fp
    97f6:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    97fa:	47c8      	blx	r9
    97fc:	2800      	cmp	r0, #0
    97fe:	dbd7      	blt.n	97b0 <z_cbvprintf_impl+0x6c8>
    9800:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    9802:	9e04      	ldr	r6, [sp, #16]
    9804:	442e      	add	r6, r5
    9806:	e005      	b.n	9814 <z_cbvprintf_impl+0x72c>
				OUTC('0');
    9808:	4659      	mov	r1, fp
    980a:	2030      	movs	r0, #48	; 0x30
    980c:	47c8      	blx	r9
    980e:	2800      	cmp	r0, #0
    9810:	dbce      	blt.n	97b0 <z_cbvprintf_impl+0x6c8>
    9812:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    9814:	1b73      	subs	r3, r6, r5
    9816:	2b00      	cmp	r3, #0
    9818:	dcf6      	bgt.n	9808 <z_cbvprintf_impl+0x720>
			OUTS(bps, bpe);
    981a:	4653      	mov	r3, sl
    981c:	463a      	mov	r2, r7
    981e:	4659      	mov	r1, fp
    9820:	4648      	mov	r0, r9
    9822:	f00c ffa6 	bl	16772 <outs>
    9826:	2800      	cmp	r0, #0
    9828:	dbc2      	blt.n	97b0 <z_cbvprintf_impl+0x6c8>
    982a:	4405      	add	r5, r0
		while (width > 0) {
    982c:	44a8      	add	r8, r5
    982e:	eba8 0305 	sub.w	r3, r8, r5
    9832:	2b00      	cmp	r3, #0
    9834:	f77f ae6b 	ble.w	950e <z_cbvprintf_impl+0x426>
			OUTC(' ');
    9838:	4659      	mov	r1, fp
    983a:	2020      	movs	r0, #32
    983c:	47c8      	blx	r9
    983e:	2800      	cmp	r0, #0
    9840:	dbb6      	blt.n	97b0 <z_cbvprintf_impl+0x6c8>
    9842:	3501      	adds	r5, #1
			--width;
    9844:	e7f3      	b.n	982e <z_cbvprintf_impl+0x746>
    9846:	bf00      	nop
    9848:	0001bd4b 	.word	0x0001bd4b

0000984c <z_arm_on_enter_cpu_idle>:
		DIV_ROUND_UP(200 * CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC,
				 1000000);
	static uint32_t timestamps[5];
	static bool timestamps_filled;
	static uint8_t current;
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    984c:	2305      	movs	r3, #5

	return true;
}

bool z_arm_on_enter_cpu_idle(void)
{
    984e:	b570      	push	{r4, r5, r6, lr}
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    9850:	4d14      	ldr	r5, [pc, #80]	; (98a4 <z_arm_on_enter_cpu_idle+0x58>)
    9852:	4e15      	ldr	r6, [pc, #84]	; (98a8 <z_arm_on_enter_cpu_idle+0x5c>)
    9854:	782c      	ldrb	r4, [r5, #0]
    9856:	3401      	adds	r4, #1
    9858:	fbb4 f3f3 	udiv	r3, r4, r3
    985c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    9860:	1ae4      	subs	r4, r4, r3
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    9862:	f00f feab 	bl	195bc <sys_clock_cycle_get_32>
	if (timestamps_filled &&
    9866:	4a11      	ldr	r2, [pc, #68]	; (98ac <z_arm_on_enter_cpu_idle+0x60>)
    9868:	7813      	ldrb	r3, [r2, #0]
    986a:	b123      	cbz	r3, 9876 <z_arm_on_enter_cpu_idle+0x2a>
	    (now - timestamps[oldest]) < (window_cycles + 1)) {
    986c:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
    9870:	1ac0      	subs	r0, r0, r3
	if (timestamps_filled &&
    9872:	2807      	cmp	r0, #7
    9874:	d913      	bls.n	989e <z_arm_on_enter_cpu_idle+0x52>
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_power_event_check(NRF_POWER_Type const * p_reg, nrf_power_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9876:	4b0e      	ldr	r3, [pc, #56]	; (98b0 <z_arm_on_enter_cpu_idle+0x64>)
    9878:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
	if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER)) {
    987c:	b141      	cbz	r1, 9890 <z_arm_on_enter_cpu_idle+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    987e:	2100      	movs	r1, #0
    9880:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    9884:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    9888:	702c      	strb	r4, [r5, #0]
		if (current == 0) {
    988a:	b90c      	cbnz	r4, 9890 <z_arm_on_enter_cpu_idle+0x44>
			timestamps_filled = true;
    988c:	2301      	movs	r3, #1
    988e:	7013      	strb	r3, [r2, #0]
	timestamps[current] = k_cycle_get_32();
    9890:	782c      	ldrb	r4, [r5, #0]
    9892:	f00f fe93 	bl	195bc <sys_clock_cycle_get_32>
    9896:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
	return true;
    989a:	2001      	movs	r0, #1
		suppress_message = true;
	}
#endif

	return ok_to_sleep;
}
    989c:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    989e:	2000      	movs	r0, #0
    98a0:	e7fc      	b.n	989c <z_arm_on_enter_cpu_idle+0x50>
    98a2:	bf00      	nop
    98a4:	20009b39 	.word	0x20009b39
    98a8:	200096f8 	.word	0x200096f8
    98ac:	20009b38 	.word	0x20009b38
    98b0:	40005000 	.word	0x40005000

000098b4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    98b4:	b148      	cbz	r0, 98ca <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    98b6:	4b05      	ldr	r3, [pc, #20]	; (98cc <arch_busy_wait+0x18>)
    98b8:	4a05      	ldr	r2, [pc, #20]	; (98d0 <arch_busy_wait+0x1c>)
    98ba:	681b      	ldr	r3, [r3, #0]
    98bc:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
    98c0:	4358      	muls	r0, r3
    98c2:	4b04      	ldr	r3, [pc, #16]	; (98d4 <arch_busy_wait+0x20>)
    98c4:	f043 0301 	orr.w	r3, r3, #1
    98c8:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    98ca:	4770      	bx	lr
    98cc:	20008320 	.word	0x20008320
    98d0:	000f4240 	.word	0x000f4240
    98d4:	0001b340 	.word	0x0001b340

000098d8 <sync_rtc_setup>:
	return mbox_set_enabled(&channel, true);
}

/* Setup RTC synchronization. */
static int sync_rtc_setup(void)
{
    98d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    98da:	b083      	sub	sp, #12
    98dc:	af00      	add	r7, sp, #0
	nrfx_err_t err;
	union rtc_sync_channels channels;
	int32_t sync_rtc_ch;
	int rv;

	err = nrfx_dppi_channel_alloc(&channels.ch.ppi);
    98de:	1d38      	adds	r0, r7, #4
    98e0:	f00a f80e 	bl	13900 <nrfx_dppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    98e4:	4b27      	ldr	r3, [pc, #156]	; (9984 <sync_rtc_setup+0xac>)
    98e6:	4298      	cmp	r0, r3
    98e8:	d149      	bne.n	997e <sync_rtc_setup+0xa6>
		rv = -ENODEV;
		goto bail;
	}

	sync_rtc_ch = z_nrf_rtc_timer_chan_alloc();
    98ea:	f009 fa9b 	bl	12e24 <z_nrf_rtc_timer_chan_alloc>
	if (sync_rtc_ch < 0) {
    98ee:	1e04      	subs	r4, r0, #0
    98f0:	da13      	bge.n	991a <sync_rtc_setup+0x42>
		nrfx_dppi_channel_free(channels.ch.ppi);
    98f2:	7938      	ldrb	r0, [r7, #4]
    98f4:	f00a f80a 	bl	1390c <nrfx_dppi_channel_free>
		irq_unlock(key);
	}

bail:
	if (rv != 0) {
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
    98f8:	466d      	mov	r5, sp
    98fa:	b088      	sub	sp, #32
    98fc:	466a      	mov	r2, sp
    98fe:	4b22      	ldr	r3, [pc, #136]	; (9988 <sync_rtc_setup+0xb0>)
    9900:	e9c2 3405 	strd	r3, r4, [r2, #20]
    9904:	2303      	movs	r3, #3
    9906:	f842 3f10 	str.w	r3, [r2, #16]!
    990a:	2300      	movs	r3, #0
    990c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9910:	481e      	ldr	r0, [pc, #120]	; (998c <sync_rtc_setup+0xb4>)
    9912:	f000 ff07 	bl	a724 <z_impl_z_log_msg_static_create>
    9916:	46ad      	mov	sp, r5
	}

	return rv;
    9918:	e02d      	b.n	9976 <sync_rtc_setup+0x9e>
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    991a:	f640 0307 	movw	r3, #2055	; 0x807
 */
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
	const struct mbox_driver_api *api =
    991e:	4d1c      	ldr	r5, [pc, #112]	; (9990 <sync_rtc_setup+0xb8>)
	channels.ch.rtc = (uint8_t)sync_rtc_ch;
    9920:	717c      	strb	r4, [r7, #5]
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->register_callback == NULL) {
    9922:	68ae      	ldr	r6, [r5, #8]
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    9924:	80fb      	strh	r3, [r7, #6]
    9926:	6874      	ldr	r4, [r6, #4]
	rv = mbox_rx_init((void *)channels.raw);
    9928:	687b      	ldr	r3, [r7, #4]
    992a:	b914      	cbnz	r4, 9932 <sync_rtc_setup+0x5a>
		return -ENOSYS;
    992c:	f06f 0457 	mvn.w	r4, #87	; 0x57
    9930:	e7e2      	b.n	98f8 <sync_rtc_setup+0x20>
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
    9932:	2108      	movs	r1, #8
    9934:	4628      	mov	r0, r5
    9936:	4a17      	ldr	r2, [pc, #92]	; (9994 <sync_rtc_setup+0xbc>)
    9938:	47a0      	blx	r4
	if (err < 0) {
    993a:	1e04      	subs	r4, r0, #0
    993c:	dbdc      	blt.n	98f8 <sync_rtc_setup+0x20>
static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->set_enabled == NULL) {
    993e:	6933      	ldr	r3, [r6, #16]
    9940:	2b00      	cmp	r3, #0
    9942:	d0f3      	beq.n	992c <sync_rtc_setup+0x54>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
    9944:	2201      	movs	r2, #1
    9946:	2108      	movs	r1, #8
    9948:	4628      	mov	r0, r5
    994a:	4798      	blx	r3
	if (rv < 0) {
    994c:	1e04      	subs	r4, r0, #0
    994e:	dbd3      	blt.n	98f8 <sync_rtc_setup+0x20>
	nrfx_gppi_channels_enable(BIT(channels.ch.ppi));
    9950:	2301      	movs	r3, #1
    9952:	793d      	ldrb	r5, [r7, #4]
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    9954:	4a10      	ldr	r2, [pc, #64]	; (9998 <sync_rtc_setup+0xc0>)
    9956:	40ab      	lsls	r3, r5
    9958:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    995c:	7978      	ldrb	r0, [r7, #5]
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    995e:	79fe      	ldrb	r6, [r7, #7]
    9960:	f00f fe21 	bl	195a6 <z_nrf_rtc_timer_capture_task_address_get>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    9964:	4b0d      	ldr	r3, [pc, #52]	; (999c <sync_rtc_setup+0xc4>)
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    9966:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    996a:	00b6      	lsls	r6, r6, #2
    996c:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    9970:	519d      	str	r5, [r3, r6]
	if (rv != 0) {
    9972:	2c00      	cmp	r4, #0
    9974:	d1c0      	bne.n	98f8 <sync_rtc_setup+0x20>
}
    9976:	4620      	mov	r0, r4
    9978:	370c      	adds	r7, #12
    997a:	46bd      	mov	sp, r7
    997c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rv = -ENODEV;
    997e:	f06f 0412 	mvn.w	r4, #18
    9982:	e7b9      	b.n	98f8 <sync_rtc_setup+0x20>
    9984:	0bad0000 	.word	0x0bad0000
    9988:	0001bd55 	.word	0x0001bd55
    998c:	0001b298 	.word	0x0001b298
    9990:	0001aec4 	.word	0x0001aec4
    9994:	000099e5 	.word	0x000099e5
    9998:	40017000 	.word	0x40017000
    999c:	4002a180 	.word	0x4002a180

000099a0 <rtc_cb>:
{
    99a0:	b538      	push	{r3, r4, r5, lr}
    99a2:	9c04      	ldr	r4, [sp, #16]
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    99a4:	f3c4 2507 	ubfx	r5, r4, #8, #8
    99a8:	4628      	mov	r0, r5
    99aa:	f009 f8ad 	bl	12b08 <z_nrf_rtc_timer_compare_evt_address_get>

__STATIC_INLINE void nrfx_gppi_event_endpoint_clear(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    (void)channel;
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
    99ae:	2100      	movs	r1, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    99b0:	4b0a      	ldr	r3, [pc, #40]	; (99dc <rtc_cb+0x3c>)
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    99b2:	0ba2      	lsrs	r2, r4, #14
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    99b4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    99b8:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    99bc:	5099      	str	r1, [r3, r2]
	nrfx_gppi_channels_disable(BIT(channels.ch.ppi));
    99be:	2301      	movs	r3, #1
    99c0:	b2e4      	uxtb	r4, r4
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
    99c2:	4a07      	ldr	r2, [pc, #28]	; (99e0 <rtc_cb+0x40>)
    99c4:	40a3      	lsls	r3, r4
	z_nrf_rtc_timer_chan_free(channels.ch.rtc);
    99c6:	4628      	mov	r0, r5
    99c8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    99cc:	f009 fa48 	bl	12e60 <z_nrf_rtc_timer_chan_free>
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    99d0:	4620      	mov	r0, r4
}
    99d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    99d6:	f009 bf99 	b.w	1390c <nrfx_dppi_channel_free>
    99da:	bf00      	nop
    99dc:	4002a080 	.word	0x4002a080
    99e0:	40017000 	.word	0x40017000

000099e4 <mbox_callback>:
{
    99e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    99e6:	4614      	mov	r4, r2
	if (api->set_enabled == NULL) {
    99e8:	6883      	ldr	r3, [r0, #8]
    99ea:	691b      	ldr	r3, [r3, #16]
    99ec:	b10b      	cbz	r3, 99f2 <mbox_callback+0xe>
	return api->set_enabled(channel->dev, channel->id, enable);
    99ee:	2200      	movs	r2, #0
    99f0:	4798      	blx	r3
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    99f2:	f3c4 2607 	ubfx	r6, r4, #8, #8
    99f6:	4630      	mov	r0, r6
    99f8:	f009 f88e 	bl	12b18 <z_nrf_rtc_timer_compare_read>
    99fc:	4605      	mov	r5, r0
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    99fe:	4630      	mov	r0, r6
    9a00:	f00f fdd1 	bl	195a6 <z_nrf_rtc_timer_capture_task_address_get>

__STATIC_INLINE void nrfx_gppi_task_endpoint_clear(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    (void)channel;
    *((volatile uint32_t *)(tep + 0x80uL)) = 0;
    9a04:	2700      	movs	r7, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    9a06:	4b10      	ldr	r3, [pc, #64]	; (9a48 <mbox_callback+0x64>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    9a08:	0e22      	lsrs	r2, r4, #24
    9a0a:	0092      	lsls	r2, r2, #2
    9a0c:	f8c0 7080 	str.w	r7, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    9a10:	509f      	str	r7, [r3, r2]
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    9a12:	4630      	mov	r0, r6
    9a14:	f009 f878 	bl	12b08 <z_nrf_rtc_timer_compare_evt_address_get>
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    9a18:	0ba2      	lsrs	r2, r4, #14
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    9a1a:	4b0c      	ldr	r3, [pc, #48]	; (9a4c <mbox_callback+0x68>)
    9a1c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    9a20:	4413      	add	r3, r2
            ((uint32_t)channel | IPC_SUBSCRIBE_SEND_EN_Msk);
    9a22:	b2e2      	uxtb	r2, r4
    9a24:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    9a28:	601a      	str	r2, [r3, #0]
		z_nrf_rtc_timer_set(channels.ch.rtc, cc + cc + RTC_SYNC_ARBITRARY_DELAY,
    9a2a:	4b09      	ldr	r3, [pc, #36]	; (9a50 <mbox_callback+0x6c>)
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    9a2c:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    9a30:	f105 0232 	add.w	r2, r5, #50	; 0x32
    9a34:	9300      	str	r3, [sp, #0]
    9a36:	4630      	mov	r0, r6
    9a38:	463b      	mov	r3, r7
    9a3a:	9401      	str	r4, [sp, #4]
    9a3c:	0052      	lsls	r2, r2, #1
    9a3e:	f00f fdbb 	bl	195b8 <z_nrf_rtc_timer_set>
}
    9a42:	b003      	add	sp, #12
    9a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9a46:	bf00      	nop
    9a48:	4002a180 	.word	0x4002a180
    9a4c:	4002a080 	.word	0x4002a080
    9a50:	000099a1 	.word	0x000099a1

00009a54 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    9a54:	f00f be01 	b.w	1965a <SystemInit>

00009a58 <ipc_service_open_instance>:
#include <zephyr/device.h>

LOG_MODULE_REGISTER(ipc_service, CONFIG_IPC_SERVICE_LOG_LEVEL);

int ipc_service_open_instance(const struct device *instance)
{
    9a58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct ipc_service_backend *backend;

	if (!instance) {
    9a5a:	b970      	cbnz	r0, 9a7a <ipc_service_open_instance+0x22>
		LOG_ERR("Invalid instance");
    9a5c:	4b12      	ldr	r3, [pc, #72]	; (9aa8 <ipc_service_open_instance+0x50>)
    9a5e:	4813      	ldr	r0, [pc, #76]	; (9aac <ipc_service_open_instance+0x54>)
    9a60:	9305      	str	r3, [sp, #20]
    9a62:	2302      	movs	r3, #2
    9a64:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9a68:	aa04      	add	r2, sp, #16
    9a6a:	9304      	str	r3, [sp, #16]
    9a6c:	f00d f940 	bl	16cf0 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    9a70:	f06f 0015 	mvn.w	r0, #21
		/* maybe not needed on backend */
		return 0;
	}

	return backend->open_instance(instance);
}
    9a74:	b007      	add	sp, #28
    9a76:	f85d fb04 	ldr.w	pc, [sp], #4
	backend = (const struct ipc_service_backend *) instance->api;
    9a7a:	6883      	ldr	r3, [r0, #8]
	if (!backend) {
    9a7c:	b963      	cbnz	r3, 9a98 <ipc_service_open_instance+0x40>
		LOG_ERR("Invalid backend configuration");
    9a7e:	4b0c      	ldr	r3, [pc, #48]	; (9ab0 <ipc_service_open_instance+0x58>)
    9a80:	480a      	ldr	r0, [pc, #40]	; (9aac <ipc_service_open_instance+0x54>)
    9a82:	9305      	str	r3, [sp, #20]
    9a84:	2302      	movs	r3, #2
    9a86:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9a8a:	aa04      	add	r2, sp, #16
    9a8c:	9304      	str	r3, [sp, #16]
    9a8e:	f00d f92f 	bl	16cf0 <z_log_msg_static_create.constprop.0>
		return -EIO;
    9a92:	f06f 0004 	mvn.w	r0, #4
    9a96:	e7ed      	b.n	9a74 <ipc_service_open_instance+0x1c>
	if (!backend->open_instance) {
    9a98:	681b      	ldr	r3, [r3, #0]
    9a9a:	b11b      	cbz	r3, 9aa4 <ipc_service_open_instance+0x4c>
}
    9a9c:	b007      	add	sp, #28
    9a9e:	f85d eb04 	ldr.w	lr, [sp], #4
	return backend->open_instance(instance);
    9aa2:	4718      	bx	r3
		return 0;
    9aa4:	4618      	mov	r0, r3
    9aa6:	e7e5      	b.n	9a74 <ipc_service_open_instance+0x1c>
    9aa8:	0001bd86 	.word	0x0001bd86
    9aac:	0001b238 	.word	0x0001b238
    9ab0:	0001bd97 	.word	0x0001bd97

00009ab4 <ipc_service_register_endpoint>:
}

int ipc_service_register_endpoint(const struct device *instance,
				  struct ipc_ept *ept,
				  const struct ipc_ept_cfg *cfg)
{
    9ab4:	b530      	push	{r4, r5, lr}
    9ab6:	b087      	sub	sp, #28
	const struct ipc_service_backend *backend;

	if (!instance || !ept || !cfg) {
    9ab8:	b108      	cbz	r0, 9abe <ipc_service_register_endpoint+0xa>
    9aba:	b101      	cbz	r1, 9abe <ipc_service_register_endpoint+0xa>
    9abc:	b96a      	cbnz	r2, 9ada <ipc_service_register_endpoint+0x26>
		LOG_ERR("Invalid instance, endpoint or configuration");
    9abe:	4b13      	ldr	r3, [pc, #76]	; (9b0c <ipc_service_register_endpoint+0x58>)
    9ac0:	4813      	ldr	r0, [pc, #76]	; (9b10 <ipc_service_register_endpoint+0x5c>)
    9ac2:	9305      	str	r3, [sp, #20]
    9ac4:	2302      	movs	r3, #2
    9ac6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9aca:	aa04      	add	r2, sp, #16
    9acc:	9304      	str	r3, [sp, #16]
    9ace:	f00d f90f 	bl	16cf0 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    9ad2:	f06f 0015 	mvn.w	r0, #21
	LOG_DBG("Register endpoint %s", cfg->name ? cfg->name : "");

	ept->instance = instance;

	return backend->register_endpoint(instance, &ept->token, cfg);
}
    9ad6:	b007      	add	sp, #28
    9ad8:	bd30      	pop	{r4, r5, pc}
	backend = (const struct ipc_service_backend *) instance->api;
    9ada:	6884      	ldr	r4, [r0, #8]
	if (!backend || !backend->register_endpoint) {
    9adc:	b10c      	cbz	r4, 9ae2 <ipc_service_register_endpoint+0x2e>
    9ade:	68e5      	ldr	r5, [r4, #12]
    9ae0:	b965      	cbnz	r5, 9afc <ipc_service_register_endpoint+0x48>
		LOG_ERR("Invalid backend configuration");
    9ae2:	4b0c      	ldr	r3, [pc, #48]	; (9b14 <ipc_service_register_endpoint+0x60>)
    9ae4:	480a      	ldr	r0, [pc, #40]	; (9b10 <ipc_service_register_endpoint+0x5c>)
    9ae6:	9305      	str	r3, [sp, #20]
    9ae8:	2302      	movs	r3, #2
    9aea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9aee:	aa04      	add	r2, sp, #16
    9af0:	9304      	str	r3, [sp, #16]
    9af2:	f00d f8fd 	bl	16cf0 <z_log_msg_static_create.constprop.0>
		return -EIO;
    9af6:	f06f 0004 	mvn.w	r0, #4
    9afa:	e7ec      	b.n	9ad6 <ipc_service_register_endpoint+0x22>
	ept->instance = instance;
    9afc:	f841 0b04 	str.w	r0, [r1], #4
	return backend->register_endpoint(instance, &ept->token, cfg);
    9b00:	68e3      	ldr	r3, [r4, #12]
}
    9b02:	b007      	add	sp, #28
    9b04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->register_endpoint(instance, &ept->token, cfg);
    9b08:	4718      	bx	r3
    9b0a:	bf00      	nop
    9b0c:	0001bdb5 	.word	0x0001bdb5
    9b10:	0001b238 	.word	0x0001b238
    9b14:	0001bd97 	.word	0x0001bd97

00009b18 <ipc_service_send>:
	return 0;
}


int ipc_service_send(struct ipc_ept *ept, const void *data, size_t len)
{
    9b18:	b530      	push	{r4, r5, lr}
    9b1a:	4613      	mov	r3, r2
	const struct ipc_service_backend *backend;

	if (!ept) {
    9b1c:	4604      	mov	r4, r0
{
    9b1e:	b087      	sub	sp, #28
	if (!ept) {
    9b20:	b968      	cbnz	r0, 9b3e <ipc_service_send+0x26>
		LOG_ERR("Invalid endpoint");
    9b22:	4b1a      	ldr	r3, [pc, #104]	; (9b8c <ipc_service_send+0x74>)
    9b24:	481a      	ldr	r0, [pc, #104]	; (9b90 <ipc_service_send+0x78>)
    9b26:	9305      	str	r3, [sp, #20]
    9b28:	2302      	movs	r3, #2
    9b2a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9b2e:	aa04      	add	r2, sp, #16
    9b30:	9304      	str	r3, [sp, #16]
    9b32:	f00d f8dd 	bl	16cf0 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    9b36:	f06f 0015 	mvn.w	r0, #21
		LOG_ERR("Invalid backend configuration");
		return -EIO;
	}

	return backend->send(ept->instance, ept->token, data, len);
}
    9b3a:	b007      	add	sp, #28
    9b3c:	bd30      	pop	{r4, r5, pc}
	if (!ept->instance) {
    9b3e:	6800      	ldr	r0, [r0, #0]
    9b40:	b960      	cbnz	r0, 9b5c <ipc_service_send+0x44>
		LOG_ERR("Endpoint not registered\n");
    9b42:	4b14      	ldr	r3, [pc, #80]	; (9b94 <ipc_service_send+0x7c>)
    9b44:	4812      	ldr	r0, [pc, #72]	; (9b90 <ipc_service_send+0x78>)
    9b46:	9305      	str	r3, [sp, #20]
    9b48:	2302      	movs	r3, #2
    9b4a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9b4e:	aa04      	add	r2, sp, #16
    9b50:	9304      	str	r3, [sp, #16]
    9b52:	f00d f8cd 	bl	16cf0 <z_log_msg_static_create.constprop.0>
		return -ENOENT;
    9b56:	f06f 0001 	mvn.w	r0, #1
    9b5a:	e7ee      	b.n	9b3a <ipc_service_send+0x22>
	backend = ept->instance->api;
    9b5c:	6882      	ldr	r2, [r0, #8]
	if (!backend || !backend->send) {
    9b5e:	b10a      	cbz	r2, 9b64 <ipc_service_send+0x4c>
    9b60:	6895      	ldr	r5, [r2, #8]
    9b62:	b965      	cbnz	r5, 9b7e <ipc_service_send+0x66>
		LOG_ERR("Invalid backend configuration");
    9b64:	4b0c      	ldr	r3, [pc, #48]	; (9b98 <ipc_service_send+0x80>)
    9b66:	480a      	ldr	r0, [pc, #40]	; (9b90 <ipc_service_send+0x78>)
    9b68:	9305      	str	r3, [sp, #20]
    9b6a:	2302      	movs	r3, #2
    9b6c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9b70:	aa04      	add	r2, sp, #16
    9b72:	9304      	str	r3, [sp, #16]
    9b74:	f00d f8bc 	bl	16cf0 <z_log_msg_static_create.constprop.0>
		return -EIO;
    9b78:	f06f 0004 	mvn.w	r0, #4
    9b7c:	e7dd      	b.n	9b3a <ipc_service_send+0x22>
	return backend->send(ept->instance, ept->token, data, len);
    9b7e:	460a      	mov	r2, r1
    9b80:	46ac      	mov	ip, r5
    9b82:	6861      	ldr	r1, [r4, #4]
}
    9b84:	b007      	add	sp, #28
    9b86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->send(ept->instance, ept->token, data, len);
    9b8a:	4760      	bx	ip
    9b8c:	0001bde1 	.word	0x0001bde1
    9b90:	0001b238 	.word	0x0001b238
    9b94:	0001bdf2 	.word	0x0001bdf2
    9b98:	0001bd97 	.word	0x0001bd97

00009b9c <shared_memory_prepare>:

#define BACKEND_CONFIG_DEFINE(i) BACKEND_CONFIG_POPULATE(i),

#if defined(CONFIG_IPC_SERVICE_BACKEND_RPMSG_SHMEM_RESET)
static int shared_memory_prepare(void)
{
    9b9c:	b508      	push	{r3, lr}

	for (backend_config = backend_configs;
	     backend_config < backend_configs + ARRAY_SIZE(backend_configs);
	     backend_config++) {
		if (backend_config->role == ROLE_HOST) {
			memset((void *) backend_config->shm_addr, 0, VDEV_STATUS_SIZE);
    9b9e:	2204      	movs	r2, #4
    9ba0:	2100      	movs	r1, #0
    9ba2:	4802      	ldr	r0, [pc, #8]	; (9bac <shared_memory_prepare+0x10>)
    9ba4:	f00d ffe0 	bl	17b68 <memset>
		}
	}

	return 0;
}
    9ba8:	2000      	movs	r0, #0
    9baa:	bd08      	pop	{r3, pc}
    9bac:	20070000 	.word	0x20070000

00009bb0 <advertise_ept>:
{
    9bb0:	b530      	push	{r4, r5, lr}
    9bb2:	460c      	mov	r4, r1
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    9bb4:	490e      	ldr	r1, [pc, #56]	; (9bf0 <advertise_ept+0x40>)
{
    9bb6:	b085      	sub	sp, #20
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    9bb8:	9102      	str	r1, [sp, #8]
    9bba:	f8d0 11ac 	ldr.w	r1, [r0, #428]	; 0x1ac
{
    9bbe:	4605      	mov	r5, r0
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    9bc0:	e9cd 3100 	strd	r3, r1, [sp]
    9bc4:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    9bc8:	f04f 33ff 	mov.w	r3, #4294967295
    9bcc:	4620      	mov	r0, r4
    9bce:	f00a fc59 	bl	14484 <rpmsg_create_ept>
	if (err != 0) {
    9bd2:	b950      	cbnz	r0, 9bea <advertise_ept+0x3a>
	rpmsg_ept->bound = true;
    9bd4:	2301      	movs	r3, #1
    9bd6:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (rpmsg_inst->bound_cb) {
    9bda:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
    9bde:	b123      	cbz	r3, 9bea <advertise_ept+0x3a>
		rpmsg_inst->bound_cb(rpmsg_ept);
    9be0:	4620      	mov	r0, r4
}
    9be2:	b005      	add	sp, #20
    9be4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		rpmsg_inst->bound_cb(rpmsg_ept);
    9be8:	4718      	bx	r3
}
    9bea:	b005      	add	sp, #20
    9bec:	bd30      	pop	{r4, r5, pc}
    9bee:	bf00      	nop
    9bf0:	00016de7 	.word	0x00016de7

00009bf4 <get_ept>:
{
    9bf4:	b538      	push	{r3, r4, r5, lr}
    9bf6:	460c      	mov	r4, r1
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    9bf8:	4611      	mov	r1, r2
{
    9bfa:	4605      	mov	r5, r0
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    9bfc:	f00d f8f5 	bl	16dea <get_ept_slot_with_name>
	if (ept != NULL) {
    9c00:	4603      	mov	r3, r0
    9c02:	b938      	cbnz	r0, 9c14 <get_ept+0x20>
	return get_ept_slot_with_name(rpmsg_inst, "");
    9c04:	4628      	mov	r0, r5
    9c06:	4904      	ldr	r1, [pc, #16]	; (9c18 <get_ept+0x24>)
    9c08:	f00d f8ef 	bl	16dea <get_ept_slot_with_name>
    9c0c:	4603      	mov	r3, r0
	if (ept != NULL) {
    9c0e:	2000      	movs	r0, #0
		(*rpmsg_ept) = ept;
    9c10:	6023      	str	r3, [r4, #0]
}
    9c12:	bd38      	pop	{r3, r4, r5, pc}
		return true;
    9c14:	2001      	movs	r0, #1
    9c16:	e7fb      	b.n	9c10 <get_ept+0x1c>
    9c18:	0001dcdd 	.word	0x0001dcdd

00009c1c <open>:
{
    9c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    9c20:	2301      	movs	r3, #1
    9c22:	4681      	mov	r9, r0
	struct backend_data_t *data = instance->data;
    9c24:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    9c26:	6846      	ldr	r6, [r0, #4]
{
    9c28:	b085      	sub	sp, #20
	if (!atomic_cas(&data->state, STATE_READY, STATE_BUSY)) {
    9c2a:	f505 775b 	add.w	r7, r5, #876	; 0x36c
    9c2e:	e8d7 2fef 	ldaex	r2, [r7]
    9c32:	2a00      	cmp	r2, #0
    9c34:	d103      	bne.n	9c3e <open+0x22>
    9c36:	e8c7 3fe1 	stlex	r1, r3, [r7]
    9c3a:	2900      	cmp	r1, #0
    9c3c:	d1f7      	bne.n	9c2e <open+0x12>
    9c3e:	f040 80b8 	bne.w	9db2 <open+0x196>
static inline unsigned int optimal_num_desc(size_t shm_size, unsigned int buf_size)
{
	size_t available, single_alloc;
	unsigned int num_desc;

	available = shm_size - VDEV_STATUS_SIZE;
    9c42:	68b3      	ldr	r3, [r6, #8]
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    9c44:	6ab2      	ldr	r2, [r6, #40]	; 0x28
	available = shm_size - VDEV_STATUS_SIZE;
    9c46:	3b04      	subs	r3, #4
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    9c48:	3226      	adds	r2, #38	; 0x26
 * @return most significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_msb_set(uint32_t op)
{
	if (op == 0) {
    9c4a:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    9c4e:	ea4f 0142 	mov.w	r1, r2, lsl #1

	num_desc = (unsigned int) (available / single_alloc);
    9c52:	bf26      	itte	cs
    9c54:	fbb3 f3f1 	udivcs	r3, r3, r1
		return 0;
	}

	return 32 - __builtin_clz(op);
    9c58:	fab3 f383 	clzcs	r3, r3
		return 0;
    9c5c:	2300      	movcc	r3, #0

	return (1 << (find_msb_set(num_desc) - 1));
    9c5e:	f04f 0401 	mov.w	r4, #1
	return 32 - __builtin_clz(op);
    9c62:	bf28      	it	cs
    9c64:	f1c3 0320 	rsbcs	r3, r3, #32
    9c68:	3b01      	subs	r3, #1
	if (num_desc == 0) {
    9c6a:	409c      	lsls	r4, r3
	err = vr_shm_configure(&data->vr, conf);
    9c6c:	f505 78e4 	add.w	r8, r5, #456	; 0x1c8
	if (num_desc == 0) {
    9c70:	f000 8099 	beq.w	9da6 <open+0x18a>

static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
    9c74:	2210      	movs	r2, #16
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    9c76:	2108      	movs	r1, #8
	vr->shm_addr = conf->shm_addr + VDEV_STATUS_SIZE;
    9c78:	6870      	ldr	r0, [r6, #4]
	size = num * sizeof(struct vring_desc);
    9c7a:	409a      	lsls	r2, r3
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
    9c7c:	eb02 0244 	add.w	r2, r2, r4, lsl #1
    9c80:	3004      	adds	r0, #4
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    9c82:	4099      	lsls	r1, r3
	size = (size + align - 1) & ~(align - 1);
    9c84:	3209      	adds	r2, #9
    9c86:	f8c5 0260 	str.w	r0, [r5, #608]	; 0x260
	size += sizeof(struct vring_used) +
    9c8a:	3106      	adds	r1, #6
	size = (size + align - 1) & ~(align - 1);
    9c8c:	f022 0203 	bic.w	r2, r2, #3
	size += sizeof(struct vring_used) +
    9c90:	440a      	add	r2, r1
	return (buf_size * num);
    9c92:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    9c94:	fa01 fc03 	lsl.w	ip, r1, r3
	       (VRING_COUNT * vring_size(num, VRING_ALIGNMENT)));
    9c98:	0051      	lsls	r1, r2, #1
	vr->shm_size = shm_size(num_desc, conf->buffer_size) - VDEV_STATUS_SIZE;
    9c9a:	eb01 014c 	add.w	r1, r1, ip, lsl #1
    9c9e:	f8c5 1264 	str.w	r1, [r5, #612]	; 0x264
	return (buf_size * num);
    9ca2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    9ca4:	4099      	lsls	r1, r3
	vr->rx_addr = vr->shm_addr + VRING_COUNT * vq_ring_size(num_desc, conf->buffer_size);
    9ca6:	eb00 0341 	add.w	r3, r0, r1, lsl #1
    9caa:	f8c5 3258 	str.w	r3, [r5, #600]	; 0x258
	vr->tx_addr = ROUND_UP(vr->rx_addr + vring_size(num_desc, VRING_ALIGNMENT),
    9cae:	3303      	adds	r3, #3
    9cb0:	4413      	add	r3, r2
    9cb2:	f023 0303 	bic.w	r3, r3, #3
    9cb6:	f8c5 3254 	str.w	r3, [r5, #596]	; 0x254
	vr->status_reg_addr = conf->shm_addr;
    9cba:	6873      	ldr	r3, [r6, #4]
	vr->vring_size = num_desc;
    9cbc:	f8c5 425c 	str.w	r4, [r5, #604]	; 0x25c
	vr->status_reg_addr = conf->shm_addr;
    9cc0:	f8c5 3250 	str.w	r3, [r5, #592]	; 0x250
	data->vr.notify_cb = virtio_notify_cb;
    9cc4:	4b3c      	ldr	r3, [pc, #240]	; (9db8 <open+0x19c>)
	err = ipc_static_vrings_init(&data->vr, conf->role);
    9cc6:	4640      	mov	r0, r8
	data->vr.priv = (void *) conf;
    9cc8:	e9c5 63a9 	strd	r6, r3, [r5, #676]	; 0x2a4
	err = ipc_static_vrings_init(&data->vr, conf->role);
    9ccc:	6831      	ldr	r1, [r6, #0]
    9cce:	f000 fa1d 	bl	a10c <ipc_static_vrings_init>
	if (err != 0) {
    9cd2:	4604      	mov	r4, r0
    9cd4:	bb30      	cbnz	r0, 9d24 <open+0x108>
	const struct backend_config_t *conf = instance->config;
    9cd6:	f8d9 a004 	ldr.w	sl, [r9, #4]
	struct backend_data_t *data = instance->data;
    9cda:	f8d9 9010 	ldr.w	r9, [r9, #16]
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    9cde:	e9da 3407 	ldrd	r3, r4, [sl, #28]
	k_work_queue_init(&data->mbox_wq);
    9ce2:	f509 7b30 	add.w	fp, r9, #704	; 0x2c0
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    9ce6:	2b01      	cmp	r3, #1
	k_work_queue_init(&data->mbox_wq);
    9ce8:	4658      	mov	r0, fp
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    9cea:	bf08      	it	eq
    9cec:	3c10      	subeq	r4, #16
	k_work_queue_init(&data->mbox_wq);
    9cee:	f010 fcd3 	bl	1a698 <k_work_queue_init>
	k_work_queue_start(&data->mbox_wq, mbox_stack[conf->id], WQ_STACK_SIZE, prio, NULL);
    9cf2:	2300      	movs	r3, #0
    9cf4:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
    9cf8:	4930      	ldr	r1, [pc, #192]	; (9dbc <open+0x1a0>)
    9cfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9cfe:	eb01 2180 	add.w	r1, r1, r0, lsl #10
    9d02:	9300      	str	r3, [sp, #0]
    9d04:	4658      	mov	r0, fp
    9d06:	4623      	mov	r3, r4
    9d08:	f00b fad0 	bl	152ac <k_work_queue_start>
	k_work_init(&data->mbox_work, mbox_callback_process);
    9d0c:	f509 702c 	add.w	r0, r9, #688	; 0x2b0
    9d10:	492b      	ldr	r1, [pc, #172]	; (9dc0 <open+0x1a4>)
    9d12:	f010 fc83 	bl	1a61c <k_work_init>
		(const struct mbox_driver_api *)channel->dev->api;
    9d16:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->register_callback == NULL) {
    9d1a:	6883      	ldr	r3, [r0, #8]
    9d1c:	685c      	ldr	r4, [r3, #4]
    9d1e:	b91c      	cbnz	r4, 9d28 <open+0x10c>
		return -ENOSYS;
    9d20:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_READY);
    9d24:	2100      	movs	r1, #0
    9d26:	e037      	b.n	9d98 <open+0x17c>
	return api->register_callback(channel->dev, channel->id, cb, user_data);
    9d28:	464b      	mov	r3, r9
    9d2a:	4a26      	ldr	r2, [pc, #152]	; (9dc4 <open+0x1a8>)
    9d2c:	f8da 1018 	ldr.w	r1, [sl, #24]
    9d30:	47a0      	blx	r4
	if (err != 0) {
    9d32:	4604      	mov	r4, r0
    9d34:	2800      	cmp	r0, #0
    9d36:	d1f5      	bne.n	9d24 <open+0x108>
		(const struct mbox_driver_api *)channel->dev->api;
    9d38:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->set_enabled == NULL) {
    9d3c:	6883      	ldr	r3, [r0, #8]
    9d3e:	691b      	ldr	r3, [r3, #16]
    9d40:	2b00      	cmp	r3, #0
    9d42:	d0ed      	beq.n	9d20 <open+0x104>
	return api->set_enabled(channel->dev, channel->id, enable);
    9d44:	2201      	movs	r2, #1
    9d46:	f8da 1018 	ldr.w	r1, [sl, #24]
    9d4a:	4798      	blx	r3
	if (err != 0) {
    9d4c:	4604      	mov	r4, r0
    9d4e:	2800      	cmp	r0, #0
    9d50:	d1e8      	bne.n	9d24 <open+0x108>
	rpmsg_inst->bound_cb = bound_cb;
    9d52:	4b1d      	ldr	r3, [pc, #116]	; (9dc8 <open+0x1ac>)
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    9d54:	4628      	mov	r0, r5
	rpmsg_inst->bound_cb = bound_cb;
    9d56:	f8c5 31a8 	str.w	r3, [r5, #424]	; 0x1a8
	rpmsg_inst->cb = ept_cb;
    9d5a:	4b1c      	ldr	r3, [pc, #112]	; (9dcc <open+0x1b0>)
    9d5c:	f8c5 31ac 	str.w	r3, [r5, #428]	; 0x1ac
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    9d60:	4b1b      	ldr	r3, [pc, #108]	; (9dd0 <open+0x1b4>)
    9d62:	9303      	str	r3, [sp, #12]
    9d64:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
    9d68:	9302      	str	r3, [sp, #8]
    9d6a:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
    9d6e:	e9cd 8300 	strd	r8, r3, [sp]
    9d72:	f8d5 3268 	ldr.w	r3, [r5, #616]	; 0x268
    9d76:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    9d78:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    9d7c:	f000 f98e 	bl	a09c <ipc_rpmsg_init>
	if (err != 0) {
    9d80:	4604      	mov	r4, r0
    9d82:	2800      	cmp	r0, #0
    9d84:	d1ce      	bne.n	9d24 <open+0x108>
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    9d86:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
    9d8a:	f00a fc29 	bl	145e0 <rpmsg_virtio_get_buffer_size>
	if (data->tx_buffer_size < 0) {
    9d8e:	2800      	cmp	r0, #0
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    9d90:	f8c5 0370 	str.w	r0, [r5, #880]	; 0x370
	if (data->tx_buffer_size < 0) {
    9d94:	db0a      	blt.n	9dac <open+0x190>
	atomic_set(&data->state, STATE_INITED);
    9d96:	2102      	movs	r1, #2
	atomic_set(&data->state, STATE_READY);
    9d98:	4638      	mov	r0, r7
    9d9a:	f00d f85b 	bl	16e54 <atomic_set.isra.0>
}
    9d9e:	4620      	mov	r0, r4
    9da0:	b005      	add	sp, #20
    9da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
    9da6:	f06f 040b 	mvn.w	r4, #11
    9daa:	e7bb      	b.n	9d24 <open+0x108>
		err = -EINVAL;
    9dac:	f06f 0415 	mvn.w	r4, #21
    9db0:	e7b8      	b.n	9d24 <open+0x108>
		return -EALREADY;
    9db2:	f06f 0477 	mvn.w	r4, #119	; 0x77
    9db6:	e7f2      	b.n	9d9e <open+0x182>
    9db8:	00016e3d 	.word	0x00016e3d
    9dbc:	20009fe8 	.word	0x20009fe8
    9dc0:	00016e23 	.word	0x00016e23
    9dc4:	00016e17 	.word	0x00016e17
    9dc8:	00009e99 	.word	0x00009e99
    9dcc:	00016ef5 	.word	0x00016ef5
    9dd0:	00016e85 	.word	0x00016e85

00009dd4 <close>:
{
    9dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9dd8:	4606      	mov	r6, r0
    9dda:	f04f 0901 	mov.w	r9, #1
	struct backend_data_t *data = instance->data;
    9dde:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    9de0:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (!atomic_cas(&data->state, STATE_INITED, STATE_BUSY)) {
    9de4:	f505 775b 	add.w	r7, r5, #876	; 0x36c
    9de8:	e8d7 3fef 	ldaex	r3, [r7]
    9dec:	2b02      	cmp	r3, #2
    9dee:	d103      	bne.n	9df8 <close+0x24>
    9df0:	e8c7 9fe2 	stlex	r2, r9, [r7]
    9df4:	2a00      	cmp	r2, #0
    9df6:	d1f7      	bne.n	9de8 <close+0x14>
    9df8:	d149      	bne.n	9e8e <close+0xba>
		if (strcmp("", rpmsg_ept->name) != 0) {
    9dfa:	4826      	ldr	r0, [pc, #152]	; (9e94 <close+0xc0>)
    9dfc:	f105 0140 	add.w	r1, r5, #64	; 0x40
    9e00:	f00d fe78 	bl	17af4 <strcmp>
    9e04:	b120      	cbz	r0, 9e10 <close+0x3c>
		return -EBUSY;
    9e06:	f06f 040f 	mvn.w	r4, #15
}
    9e0a:	4620      	mov	r0, r4
    9e0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (strcmp("", rpmsg_ept->name) != 0) {
    9e10:	4820      	ldr	r0, [pc, #128]	; (9e94 <close+0xc0>)
    9e12:	f105 01b0 	add.w	r1, r5, #176	; 0xb0
    9e16:	f00d fe6d 	bl	17af4 <strcmp>
    9e1a:	2800      	cmp	r0, #0
    9e1c:	d1f3      	bne.n	9e06 <close+0x32>
	err = ipc_rpmsg_deinit(rpmsg_inst, data->role);
    9e1e:	4628      	mov	r0, r5
    9e20:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    9e24:	f00d f899 	bl	16f5a <ipc_rpmsg_deinit>
	if (err != 0) {
    9e28:	4604      	mov	r4, r0
    9e2a:	bb70      	cbnz	r0, 9e8a <close+0xb6>
	const struct backend_config_t *conf = instance->config;
    9e2c:	6871      	ldr	r1, [r6, #4]
	struct backend_data_t *data = instance->data;
    9e2e:	6936      	ldr	r6, [r6, #16]
		(const struct mbox_driver_api *)channel->dev->api;
    9e30:	6948      	ldr	r0, [r1, #20]
	if (api->set_enabled == NULL) {
    9e32:	6883      	ldr	r3, [r0, #8]
    9e34:	691b      	ldr	r3, [r3, #16]
    9e36:	b333      	cbz	r3, 9e86 <close+0xb2>
	return api->set_enabled(channel->dev, channel->id, enable);
    9e38:	4622      	mov	r2, r4
    9e3a:	6989      	ldr	r1, [r1, #24]
    9e3c:	4798      	blx	r3
	if (err != 0) {
    9e3e:	4604      	mov	r4, r0
    9e40:	bb18      	cbnz	r0, 9e8a <close+0xb6>
	k_work_queue_drain(&data->mbox_wq, 1);
    9e42:	f506 7630 	add.w	r6, r6, #704	; 0x2c0
    9e46:	4649      	mov	r1, r9
    9e48:	4630      	mov	r0, r6
    9e4a:	f00b fa67 	bl	1531c <k_work_queue_drain>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_THREAD_ABORT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_abort(thread);
    9e4e:	4630      	mov	r0, r6
	err = ipc_static_vrings_deinit(&data->vr, conf->role);
    9e50:	f505 76e4 	add.w	r6, r5, #456	; 0x1c8
    9e54:	f001 ff3a 	bl	bccc <z_impl_k_thread_abort>
    9e58:	4630      	mov	r0, r6
    9e5a:	f8d8 1000 	ldr.w	r1, [r8]
    9e5e:	f00d f8b9 	bl	16fd4 <ipc_static_vrings_deinit>
	if (err != 0) {
    9e62:	4604      	mov	r4, r0
    9e64:	b988      	cbnz	r0, 9e8a <close+0xb6>
	memset(&data->vr, 0, sizeof(struct ipc_static_vrings));
    9e66:	4601      	mov	r1, r0
    9e68:	22e8      	movs	r2, #232	; 0xe8
    9e6a:	4630      	mov	r0, r6
    9e6c:	f00d fe7c 	bl	17b68 <memset>
	memset(rpmsg_inst, 0, sizeof(struct ipc_rpmsg_instance));
    9e70:	4621      	mov	r1, r4
    9e72:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
    9e76:	4628      	mov	r0, r5
    9e78:	f00d fe76 	bl	17b68 <memset>
	atomic_set(&data->state, STATE_READY);
    9e7c:	4621      	mov	r1, r4
	atomic_set(&data->state, STATE_INITED);
    9e7e:	4638      	mov	r0, r7
    9e80:	f00c ffe8 	bl	16e54 <atomic_set.isra.0>
	return err;
    9e84:	e7c1      	b.n	9e0a <close+0x36>
		return -ENOSYS;
    9e86:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_INITED);
    9e8a:	2102      	movs	r1, #2
    9e8c:	e7f7      	b.n	9e7e <close+0xaa>
		return -EALREADY;
    9e8e:	f06f 0477 	mvn.w	r4, #119	; 0x77
    9e92:	e7ba      	b.n	9e0a <close+0x36>
    9e94:	0001dcdd 	.word	0x0001dcdd

00009e98 <bound_cb>:
{
    9e98:	b513      	push	{r0, r1, r4, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	if (!ept)
    9e9a:	4604      	mov	r4, r0
    9e9c:	b140      	cbz	r0, 9eb0 <bound_cb+0x18>
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    9e9e:	2300      	movs	r3, #0
    9ea0:	2201      	movs	r2, #1
    9ea2:	e9cd 3200 	strd	r3, r2, [sp]
    9ea6:	4b07      	ldr	r3, [pc, #28]	; (9ec4 <bound_cb+0x2c>)
    9ea8:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    9eac:	f00a fa9e 	bl	143ec <rpmsg_send_offchannel_raw>
	if (ept->cb->bound) {
    9eb0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    9eb2:	681b      	ldr	r3, [r3, #0]
    9eb4:	b123      	cbz	r3, 9ec0 <bound_cb+0x28>
		ept->cb->bound(ept->priv);
    9eb6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
    9eb8:	b002      	add	sp, #8
    9eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ept->cb->bound(ept->priv);
    9ebe:	4718      	bx	r3
}
    9ec0:	b002      	add	sp, #8
    9ec2:	bd10      	pop	{r4, pc}
    9ec4:	0001dcdd 	.word	0x0001dcdd

00009ec8 <send>:
{
    9ec8:	b513      	push	{r0, r1, r4, lr}
    9eca:	4604      	mov	r4, r0
    9ecc:	4608      	mov	r0, r1
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9ece:	6921      	ldr	r1, [r4, #16]
    9ed0:	f501 715b 	add.w	r1, r1, #876	; 0x36c
    9ed4:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
    9ed8:	2902      	cmp	r1, #2
    9eda:	d110      	bne.n	9efe <send+0x36>
	if (len == 0) {
    9edc:	b193      	cbz	r3, 9f04 <send+0x3c>
	if (!rpmsg_ept) {
    9ede:	b1a0      	cbz	r0, 9f0a <send+0x42>
    9ee0:	2101      	movs	r1, #1
    9ee2:	e9cd 3100 	strd	r3, r1, [sp]
    9ee6:	4613      	mov	r3, r2
    9ee8:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    9eec:	f00a fa7e 	bl	143ec <rpmsg_send_offchannel_raw>
	if (ret == RPMSG_ERR_NO_BUFF) {
    9ef0:	4b07      	ldr	r3, [pc, #28]	; (9f10 <send+0x48>)
		return -ENOMEM;
    9ef2:	4298      	cmp	r0, r3
    9ef4:	bf08      	it	eq
    9ef6:	f06f 000b 	mvneq.w	r0, #11
}
    9efa:	b002      	add	sp, #8
    9efc:	bd10      	pop	{r4, pc}
		return -EBUSY;
    9efe:	f06f 000f 	mvn.w	r0, #15
    9f02:	e7fa      	b.n	9efa <send+0x32>
		return -EBADMSG;
    9f04:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    9f08:	e7f7      	b.n	9efa <send+0x32>
		return -ENOENT;
    9f0a:	f06f 0001 	mvn.w	r0, #1
    9f0e:	e7f4      	b.n	9efa <send+0x32>
    9f10:	fffff82e 	.word	0xfffff82e

00009f14 <register_ept>:
{
    9f14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    9f18:	4688      	mov	r8, r1
    9f1a:	4615      	mov	r5, r2
	struct backend_data_t *data = instance->data;
    9f1c:	6906      	ldr	r6, [r0, #16]
    9f1e:	f506 735b 	add.w	r3, r6, #876	; 0x36c
    9f22:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
    9f26:	2b02      	cmp	r3, #2
    9f28:	d15f      	bne.n	9fea <register_ept+0xd6>
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    9f2a:	6813      	ldr	r3, [r2, #0]
    9f2c:	b923      	cbnz	r3, 9f38 <register_ept+0x24>
		return -EINVAL;
    9f2e:	f06f 0015 	mvn.w	r0, #21
}
    9f32:	b003      	add	sp, #12
    9f34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    9f38:	781b      	ldrb	r3, [r3, #0]
    9f3a:	2b00      	cmp	r3, #0
    9f3c:	d0f7      	beq.n	9f2e <register_ept+0x1a>
			register_ept_on_host(rpmsg_inst, cfg) :
    9f3e:	f8d6 9368 	ldr.w	r9, [r6, #872]	; 0x368
    9f42:	f1b9 0f00 	cmp.w	r9, #0
    9f46:	d133      	bne.n	9fb0 <register_ept+0x9c>
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
    9f48:	f506 77d8 	add.w	r7, r6, #432	; 0x1b0
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    9f4c:	f04f 32ff 	mov.w	r2, #4294967295
    9f50:	f04f 33ff 	mov.w	r3, #4294967295
    9f54:	4638      	mov	r0, r7
    9f56:	f00a ff3d 	bl	14dd4 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, cfg->name);
    9f5a:	4630      	mov	r0, r6
    9f5c:	682a      	ldr	r2, [r5, #0]
    9f5e:	a901      	add	r1, sp, #4
    9f60:	f7ff fe48 	bl	9bf4 <get_ept>
	if (rpmsg_ept == NULL) {
    9f64:	9c01      	ldr	r4, [sp, #4]
    9f66:	b91c      	cbnz	r4, 9f70 <register_ept+0x5c>
		k_mutex_unlock(&rpmsg_inst->mtx);
    9f68:	4638      	mov	r0, r7
    9f6a:	f00c ff71 	bl	16e50 <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    9f6e:	e7de      	b.n	9f2e <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    9f70:	f105 0308 	add.w	r3, r5, #8
    9f74:	66a3      	str	r3, [r4, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    9f76:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->bound = false;
    9f78:	f884 9064 	strb.w	r9, [r4, #100]	; 0x64
	rpmsg_ept->priv = cfg->priv;
    9f7c:	66e3      	str	r3, [r4, #108]	; 0x6c
	rpmsg_ept->ep.priv = rpmsg_ept;
    9f7e:	63e4      	str	r4, [r4, #60]	; 0x3c
	if (ept_cached) {
    9f80:	b160      	cbz	r0, 9f9c <register_ept+0x88>
		k_mutex_unlock(&rpmsg_inst->mtx);
    9f82:	4638      	mov	r0, r7
    9f84:	f00c ff64 	bl	16e50 <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, cfg->name, rpmsg_ept->dest);
    9f88:	4621      	mov	r1, r4
    9f8a:	4630      	mov	r0, r6
    9f8c:	6e23      	ldr	r3, [r4, #96]	; 0x60
    9f8e:	682a      	ldr	r2, [r5, #0]
    9f90:	f7ff fe0e 	bl	9bb0 <advertise_ept>
	return 0;
    9f94:	2000      	movs	r0, #0
	(*token) = rpmsg_ept;
    9f96:	f8c8 4000 	str.w	r4, [r8]
	return 0;
    9f9a:	e7ca      	b.n	9f32 <register_ept+0x1e>
		strncpy(rpmsg_ept->name, cfg->name, sizeof(rpmsg_ept->name));
    9f9c:	2220      	movs	r2, #32
    9f9e:	6829      	ldr	r1, [r5, #0]
    9fa0:	f104 0040 	add.w	r0, r4, #64	; 0x40
    9fa4:	f00d fd82 	bl	17aac <strncpy>
		k_mutex_unlock(&rpmsg_inst->mtx);
    9fa8:	4638      	mov	r0, r7
    9faa:	f00c ff51 	bl	16e50 <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    9fae:	e7f1      	b.n	9f94 <register_ept+0x80>
	return get_ept_slot_with_name(rpmsg_inst, "");
    9fb0:	4630      	mov	r0, r6
    9fb2:	490f      	ldr	r1, [pc, #60]	; (9ff0 <register_ept+0xdc>)
    9fb4:	f00c ff19 	bl	16dea <get_ept_slot_with_name>
	if (rpmsg_ept == NULL) {
    9fb8:	4604      	mov	r4, r0
    9fba:	2800      	cmp	r0, #0
    9fbc:	d0b7      	beq.n	9f2e <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    9fbe:	f105 0308 	add.w	r3, r5, #8
    9fc2:	6683      	str	r3, [r0, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    9fc4:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->ep.priv = rpmsg_ept;
    9fc6:	63c0      	str	r0, [r0, #60]	; 0x3c
	rpmsg_ept->priv = cfg->priv;
    9fc8:	66c3      	str	r3, [r0, #108]	; 0x6c
	rpmsg_ept->bound = false;
    9fca:	2300      	movs	r3, #0
    9fcc:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
	strncpy(rpmsg_ept->name, cfg->name, sizeof(rpmsg_ept->name));
    9fd0:	2220      	movs	r2, #32
    9fd2:	6829      	ldr	r1, [r5, #0]
    9fd4:	3040      	adds	r0, #64	; 0x40
    9fd6:	f00d fd69 	bl	17aac <strncpy>
	err = ipc_rpmsg_register_ept(rpmsg_inst, RPMSG_REMOTE, rpmsg_ept);
    9fda:	4622      	mov	r2, r4
    9fdc:	2101      	movs	r1, #1
    9fde:	4630      	mov	r0, r6
    9fe0:	f000 f83e 	bl	a060 <ipc_rpmsg_register_ept>
	if (err != 0) {
    9fe4:	2800      	cmp	r0, #0
    9fe6:	d0d5      	beq.n	9f94 <register_ept+0x80>
    9fe8:	e7a1      	b.n	9f2e <register_ept+0x1a>
		return -EBUSY;
    9fea:	f06f 000f 	mvn.w	r0, #15
    9fee:	e7a0      	b.n	9f32 <register_ept+0x1e>
    9ff0:	0001dcdd 	.word	0x0001dcdd

00009ff4 <ns_bind_cb>:
{
	rpmsg_destroy_ept(ep);
}

static void ns_bind_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
    9ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ff8:	4605      	mov	r5, r0
    9ffa:	460e      	mov	r6, r1
    9ffc:	4690      	mov	r8, r2
	int err;

	p_rvdev = CONTAINER_OF(rdev, struct rpmsg_virtio_device, rdev);
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);

	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    9ffe:	2700      	movs	r7, #0
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
    a000:	f8d0 a0b0 	ldr.w	sl, [r0, #176]	; 0xb0
{
    a004:	b085      	sub	sp, #20
    a006:	f5aa 74ae 	sub.w	r4, sl, #348	; 0x15c
		ept = &instance->endpoint[i];

		if (strcmp(name, ept->name) == 0) {
    a00a:	4621      	mov	r1, r4
    a00c:	4630      	mov	r0, r6
    a00e:	f00d fd71 	bl	17af4 <strcmp>
    a012:	b9e0      	cbnz	r0, a04e <ns_bind_cb+0x5a>
			 * The destination address is 'dest' so ns_bind_cb() is
			 * *NOT* called on the REMOTE side. The bound_cb()
			 * function will eventually take care of notifying the
			 * REMOTE side if needed.
			 */
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    a014:	4b11      	ldr	r3, [pc, #68]	; (a05c <ns_bind_cb+0x68>)
		ept = &instance->endpoint[i];
    a016:	f1a4 0b40 	sub.w	fp, r4, #64	; 0x40
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    a01a:	9302      	str	r3, [sp, #8]
    a01c:	f8da 3010 	ldr.w	r3, [sl, #16]
    a020:	4632      	mov	r2, r6
    a022:	e9cd 8300 	strd	r8, r3, [sp]
    a026:	4629      	mov	r1, r5
    a028:	f04f 33ff 	mov.w	r3, #4294967295
    a02c:	4658      	mov	r0, fp
    a02e:	f5aa 79ce 	sub.w	r9, sl, #412	; 0x19c
    a032:	f00a fa27 	bl	14484 <rpmsg_create_ept>
					       dest, instance->cb, rpmsg_service_unbind);
			if (err != 0) {
    a036:	b960      	cbnz	r0, a052 <ns_bind_cb+0x5e>
				return;
			}

			ept->bound = true;
    a038:	2370      	movs	r3, #112	; 0x70
    a03a:	2201      	movs	r2, #1
    a03c:	fb03 9307 	mla	r3, r3, r7, r9
    a040:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			if (instance->bound_cb) {
    a044:	f8da 300c 	ldr.w	r3, [sl, #12]
    a048:	b10b      	cbz	r3, a04e <ns_bind_cb+0x5a>
				instance->bound_cb(ept);
    a04a:	4658      	mov	r0, fp
    a04c:	4798      	blx	r3
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    a04e:	3470      	adds	r4, #112	; 0x70
    a050:	b117      	cbz	r7, a058 <ns_bind_cb+0x64>
			}
		}
	}
}
    a052:	b005      	add	sp, #20
    a054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    a058:	2701      	movs	r7, #1
    a05a:	e7d6      	b.n	a00a <ns_bind_cb+0x16>
    a05c:	00016f57 	.word	0x00016f57

0000a060 <ipc_rpmsg_register_ept>:

int ipc_rpmsg_register_ept(struct ipc_rpmsg_instance *instance, unsigned int role,
			   struct ipc_rpmsg_ept *ept)
{
    a060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    a062:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!instance || !ept) {
    a064:	b190      	cbz	r0, a08c <ipc_rpmsg_register_ept+0x2c>
    a066:	b18a      	cbz	r2, a08c <ipc_rpmsg_register_ept+0x2c>
		return -EINVAL;
	}

	rdev = rpmsg_virtio_get_rpmsg_device(&instance->rvdev);

	if (role == RPMSG_REMOTE) {
    a068:	2901      	cmp	r1, #1
    a06a:	d112      	bne.n	a092 <ipc_rpmsg_register_ept+0x32>
		/*
		 * The destination address is RPMSG_ADDR_ANY, this will trigger
		 * the ns_bind_cb() callback function on the HOST side.
		 */
		return rpmsg_create_ept(&ept->ep, rdev, ept->name, RPMSG_ADDR_ANY,
    a06c:	4b0a      	ldr	r3, [pc, #40]	; (a098 <ipc_rpmsg_register_ept+0x38>)
    a06e:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    a072:	9302      	str	r3, [sp, #8]
    a074:	f8d0 31ac 	ldr.w	r3, [r0, #428]	; 0x1ac
    a078:	3240      	adds	r2, #64	; 0x40
    a07a:	9301      	str	r3, [sp, #4]
    a07c:	f04f 33ff 	mov.w	r3, #4294967295
    a080:	4620      	mov	r0, r4
    a082:	9300      	str	r3, [sp, #0]
    a084:	f00a f9fe 	bl	14484 <rpmsg_create_ept>
					RPMSG_ADDR_ANY, instance->cb, rpmsg_service_unbind);
	}

	return RPMSG_SUCCESS;
}
    a088:	b004      	add	sp, #16
    a08a:	bd10      	pop	{r4, pc}
		return -EINVAL;
    a08c:	f06f 0015 	mvn.w	r0, #21
    a090:	e7fa      	b.n	a088 <ipc_rpmsg_register_ept+0x28>
	return RPMSG_SUCCESS;
    a092:	2000      	movs	r0, #0
    a094:	e7f8      	b.n	a088 <ipc_rpmsg_register_ept+0x28>
    a096:	bf00      	nop
    a098:	00016f57 	.word	0x00016f57

0000a09c <ipc_rpmsg_init>:
		   unsigned int buffer_size,
		   struct metal_io_region *shm_io,
		   struct virtio_device *vdev,
		   void *shb, size_t size,
		   rpmsg_ns_bind_cb p_bind_cb)
{
    a09c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a0a0:	b087      	sub	sp, #28
    a0a2:	460e      	mov	r6, r1
    a0a4:	e9dd 810e 	ldrd	r8, r1, [sp, #56]	; 0x38
    a0a8:	4614      	mov	r4, r2
    a0aa:	e9dd 2510 	ldrd	r2, r5, [sp, #64]	; 0x40
    a0ae:	461f      	mov	r7, r3
	rpmsg_ns_bind_cb bind_cb = p_bind_cb;

	if (!instance || !shb) {
    a0b0:	b330      	cbz	r0, a100 <ipc_rpmsg_init+0x64>
    a0b2:	b329      	cbz	r1, a100 <ipc_rpmsg_init+0x64>
		return -EINVAL;
	}

	if (p_bind_cb == NULL) {
		bind_cb = ns_bind_cb;
    a0b4:	f8df c050 	ldr.w	ip, [pc, #80]	; a108 <ipc_rpmsg_init+0x6c>
		config.h2r_buf_size = (uint32_t) buffer_size;
		config.r2h_buf_size = (uint32_t) buffer_size;

		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);

		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    a0b8:	f100 09e0 	add.w	r9, r0, #224	; 0xe0
		bind_cb = ns_bind_cb;
    a0bc:	2d00      	cmp	r5, #0
    a0be:	bf08      	it	eq
    a0c0:	4665      	moveq	r5, ip
	if (role == RPMSG_HOST) {
    a0c2:	b99e      	cbnz	r6, a0ec <ipc_rpmsg_init+0x50>
		config.r2h_buf_size = (uint32_t) buffer_size;
    a0c4:	e9cd 4403 	strd	r4, r4, [sp, #12]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
    a0c8:	f500 74ce 	add.w	r4, r0, #412	; 0x19c
    a0cc:	4620      	mov	r0, r4
		struct rpmsg_virtio_config config = { 0 };
    a0ce:	9605      	str	r6, [sp, #20]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
    a0d0:	f010 f891 	bl	1a1f6 <rpmsg_virtio_init_shm_pool>
		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    a0d4:	ab03      	add	r3, sp, #12
    a0d6:	e9cd 4300 	strd	r4, r3, [sp]
    a0da:	462a      	mov	r2, r5
    a0dc:	463b      	mov	r3, r7
    a0de:	4641      	mov	r1, r8
    a0e0:	4648      	mov	r0, r9
    a0e2:	f00a faa3 	bl	1462c <rpmsg_init_vdev_with_config>
						   shm_io, &instance->shm_pool,
						   &config);
	} else {
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
	}
}
    a0e6:	b007      	add	sp, #28
    a0e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    a0ec:	2200      	movs	r2, #0
    a0ee:	4641      	mov	r1, r8
    a0f0:	920e      	str	r2, [sp, #56]	; 0x38
    a0f2:	4648      	mov	r0, r9
    a0f4:	462a      	mov	r2, r5
}
    a0f6:	b007      	add	sp, #28
    a0f8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    a0fc:	f00a bbc0 	b.w	14880 <rpmsg_init_vdev>
		return -EINVAL;
    a100:	f06f 0015 	mvn.w	r0, #21
    a104:	e7ef      	b.n	a0e6 <ipc_rpmsg_init+0x4a>
    a106:	bf00      	nop
    a108:	00009ff5 	.word	0x00009ff5

0000a10c <ipc_static_vrings_init>:

	return 0;
}

int ipc_static_vrings_init(struct ipc_static_vrings *vr, unsigned int role)
{
    a10c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a10e:	460e      	mov	r6, r1
	int err = 0;

	if (!vr) {
    a110:	4604      	mov	r4, r0
{
    a112:	b089      	sub	sp, #36	; 0x24
	if (!vr) {
    a114:	2800      	cmp	r0, #0
    a116:	d06f      	beq.n	a1f8 <ipc_static_vrings_init+0xec>
		return -EINVAL;
	}

	vr->shm_device.name = SHM_DEVICE_NAME;
	vr->shm_device.num_regions = 1;
    a118:	2301      	movs	r3, #1
	vr->shm_physmap[0] = vr->shm_addr;
    a11a:	4602      	mov	r2, r0
	vr->shm_device.num_regions = 1;
    a11c:	63c3      	str	r3, [r0, #60]	; 0x3c

	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    a11e:	2300      	movs	r3, #0
	vr->shm_physmap[0] = vr->shm_addr;
    a120:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
	vr->shm_device.name = SHM_DEVICE_NAME;
    a124:	4f36      	ldr	r7, [pc, #216]	; (a200 <ipc_static_vrings_init+0xf4>)
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    a126:	3040      	adds	r0, #64	; 0x40
	vr->shm_device.name = SHM_DEVICE_NAME;
    a128:	f840 7c0c 	str.w	r7, [r0, #-12]
	vr->shm_physmap[0] = vr->shm_addr;
    a12c:	f842 1f30 	str.w	r1, [r2, #48]!
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    a130:	e9cd 3301 	strd	r3, r3, [sp, #4]
    a134:	f04f 33ff 	mov.w	r3, #4294967295
    a138:	9300      	str	r3, [sp, #0]
    a13a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    a13c:	f00f fb19 	bl	19772 <metal_io_init>
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    a140:	4a30      	ldr	r2, [pc, #192]	; (a204 <ipc_static_vrings_init+0xf8>)
    a142:	ab06      	add	r3, sp, #24
    a144:	e892 0003 	ldmia.w	r2, {r0, r1}
    a148:	e883 0003 	stmia.w	r3, {r0, r1}
	err = metal_init(&metal_params);
    a14c:	4618      	mov	r0, r3
    a14e:	f00a f86d 	bl	1422c <metal_init>
	if (err != 0) {
    a152:	4605      	mov	r5, r0
    a154:	b9d8      	cbnz	r0, a18e <ipc_static_vrings_init+0x82>
	err = metal_register_generic_device(&vr->shm_device);
    a156:	f104 0034 	add.w	r0, r4, #52	; 0x34
    a15a:	f00a f847 	bl	141ec <metal_register_generic_device>
	if (err != 0) {
    a15e:	4605      	mov	r5, r0
    a160:	b9a8      	cbnz	r0, a18e <ipc_static_vrings_init+0x82>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    a162:	4639      	mov	r1, r7
    a164:	4828      	ldr	r0, [pc, #160]	; (a208 <ipc_static_vrings_init+0xfc>)
    a166:	aa05      	add	r2, sp, #20
    a168:	f00f fad5 	bl	19716 <metal_device_open>
	if (err != 0) {
    a16c:	4605      	mov	r5, r0
    a16e:	b970      	cbnz	r0, a18e <ipc_static_vrings_init+0x82>
	vr->shm_io = metal_device_io_region(device, 0);
    a170:	9b05      	ldr	r3, [sp, #20]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
    a172:	689a      	ldr	r2, [r3, #8]
    a174:	b172      	cbz	r2, a194 <ipc_static_vrings_init+0x88>
    a176:	330c      	adds	r3, #12
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    a178:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	vr->shm_io = metal_device_io_region(device, 0);
    a17c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    a180:	f00c ff1a 	bl	16fb8 <virtqueue_allocate>
    a184:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
	if (vr->vq[RPMSG_VQ_0] == NULL) {
    a188:	b930      	cbnz	r0, a198 <ipc_static_vrings_init+0x8c>
		return -ENOMEM;
    a18a:	f06f 050b 	mvn.w	r5, #11
	if (err != 0) {
		return err;
	}

	return vq_setup(vr, role);
}
    a18e:	4628      	mov	r0, r5
    a190:	b009      	add	sp, #36	; 0x24
    a192:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a194:	4603      	mov	r3, r0
    a196:	e7ef      	b.n	a178 <ipc_static_vrings_init+0x6c>
	vr->vq[RPMSG_VQ_1] = virtqueue_allocate(vr->vring_size);
    a198:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    a19c:	f00c ff0c 	bl	16fb8 <virtqueue_allocate>
    a1a0:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
	if (vr->vq[RPMSG_VQ_1] == NULL) {
    a1a4:	2800      	cmp	r0, #0
    a1a6:	d0f0      	beq.n	a18a <ipc_static_vrings_init+0x7e>
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    a1a8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    a1ac:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    a1b0:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	vr->rvrings[RPMSG_VQ_0].info.align = VRING_ALIGNMENT;
    a1b4:	2304      	movs	r3, #4
    a1b6:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	vr->rvrings[RPMSG_VQ_1].info.align = VRING_ALIGNMENT;
    a1ba:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	vr->vdev.vrings_num = VRING_COUNT;
    a1be:	2302      	movs	r3, #2
    a1c0:	62a3      	str	r3, [r4, #40]	; 0x28
	vr->vdev.func = &dispatch;
    a1c2:	4b12      	ldr	r3, [pc, #72]	; (a20c <ipc_static_vrings_init+0x100>)
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    a1c4:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    a1c8:	f8d4 70d4 	ldr.w	r7, [r4, #212]	; 0xd4
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    a1cc:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
	vr->rvrings[RPMSG_VQ_1].io = vr->shm_io;
    a1d0:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    a1d4:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
	vr->vdev.func = &dispatch;
    a1d8:	6223      	str	r3, [r4, #32]
	vr->vdev.vrings_info = &vr->rvrings[0];
    a1da:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    a1de:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    a1e2:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    a1e6:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	vr->rvrings[RPMSG_VQ_1].info.num_descs = vr->vring_size;
    a1ea:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	vr->rvrings[RPMSG_VQ_1].vq = vr->vq[RPMSG_VQ_1];
    a1ee:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	vr->vdev.role = role;
    a1f2:	61a6      	str	r6, [r4, #24]
	vr->vdev.vrings_info = &vr->rvrings[0];
    a1f4:	62e3      	str	r3, [r4, #44]	; 0x2c
	return 0;
    a1f6:	e7ca      	b.n	a18e <ipc_static_vrings_init+0x82>
		return -EINVAL;
    a1f8:	f06f 0515 	mvn.w	r5, #21
    a1fc:	e7c7      	b.n	a18e <ipc_static_vrings_init+0x82>
    a1fe:	bf00      	nop
    a200:	0001be1c 	.word	0x0001be1c
    a204:	0001b2c0 	.word	0x0001b2c0
    a208:	0001be26 	.word	0x0001be26
    a20c:	0001b440 	.word	0x0001b440

0000a210 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
    a210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a214:	4604      	mov	r4, r0
	uint32_t mask_cpy = mask;

	while (mask_cpy) {
    a216:	4607      	mov	r7, r0
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
    a218:	f04f 0901 	mov.w	r9, #1
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    a21c:	f8df 8050 	ldr.w	r8, [pc, #80]	; a270 <activate_foreach_backend+0x60>
	while (mask_cpy) {
    a220:	b914      	cbnz	r4, a228 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
    a222:	4638      	mov	r0, r7
    a224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    a228:	fa94 f5a4 	rbit	r5, r4
    a22c:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    a230:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    a234:	012e      	lsls	r6, r5, #4
    a236:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    a23a:	ea6f 0a03 	mvn.w	sl, r3
    a23e:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    a242:	7b2b      	ldrb	r3, [r5, #12]
    a244:	2b00      	cmp	r3, #0
    a246:	d0eb      	beq.n	a220 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    a248:	f858 3006 	ldr.w	r3, [r8, r6]
    a24c:	691b      	ldr	r3, [r3, #16]
    a24e:	b94b      	cbnz	r3, a264 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    a250:	4446      	add	r6, r8
			log_backend_enable(backend,
    a252:	6873      	ldr	r3, [r6, #4]
    a254:	2204      	movs	r2, #4
    a256:	4628      	mov	r0, r5
    a258:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    a25a:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    a25e:	f000 fa4d 	bl	a6fc <log_backend_enable>
    a262:	e7dd      	b.n	a220 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    a264:	4628      	mov	r0, r5
    a266:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    a268:	2800      	cmp	r0, #0
    a26a:	d1d9      	bne.n	a220 <activate_foreach_backend+0x10>
    a26c:	e7f0      	b.n	a250 <activate_foreach_backend+0x40>
    a26e:	bf00      	nop
    a270:	0001b2a8 	.word	0x0001b2a8

0000a274 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
    a274:	b530      	push	{r4, r5, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    a276:	2200      	movs	r2, #0
{
    a278:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    a27a:	490f      	ldr	r1, [pc, #60]	; (a2b8 <enable_logger+0x44>)
    a27c:	480f      	ldr	r0, [pc, #60]	; (a2bc <enable_logger+0x48>)
    a27e:	f010 fbd5 	bl	1aa2c <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    a282:	2200      	movs	r2, #0
    a284:	2300      	movs	r3, #0
    a286:	2400      	movs	r4, #0
    a288:	e9cd 2306 	strd	r2, r3, [sp, #24]
    a28c:	230e      	movs	r3, #14
    a28e:	4d0c      	ldr	r5, [pc, #48]	; (a2c0 <enable_logger+0x4c>)
    a290:	e9cd 3403 	strd	r3, r4, [sp, #12]
    a294:	f44f 7240 	mov.w	r2, #768	; 0x300
    a298:	4628      	mov	r0, r5
    a29a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    a29e:	4b09      	ldr	r3, [pc, #36]	; (a2c4 <enable_logger+0x50>)
    a2a0:	4909      	ldr	r1, [pc, #36]	; (a2c8 <enable_logger+0x54>)
    a2a2:	9400      	str	r4, [sp, #0]
    a2a4:	f00a fcf2 	bl	14c8c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    a2a8:	4908      	ldr	r1, [pc, #32]	; (a2cc <enable_logger+0x58>)
    a2aa:	4628      	mov	r0, r5
    a2ac:	f010 f87f 	bl	1a3ae <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    a2b0:	4620      	mov	r0, r4
    a2b2:	b009      	add	sp, #36	; 0x24
    a2b4:	bd30      	pop	{r4, r5, pc}
    a2b6:	bf00      	nop
    a2b8:	0000a2d1 	.word	0x0000a2d1
    a2bc:	20008fd8 	.word	0x20008fd8
    a2c0:	20008b48 	.word	0x20008b48
    a2c4:	0000a5a9 	.word	0x0000a5a9
    a2c8:	2000a3e8 	.word	0x2000a3e8
    a2cc:	0001be2e 	.word	0x0001be2e

0000a2d0 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    a2d0:	4801      	ldr	r0, [pc, #4]	; (a2d8 <log_process_thread_timer_expiry_fn+0x8>)
    a2d2:	f00a be69 	b.w	14fa8 <z_impl_k_sem_give>
    a2d6:	bf00      	nop
    a2d8:	200085c8 	.word	0x200085c8

0000a2dc <z_log_init>:
{
    a2dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a2e0:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
    a2e2:	481f      	ldr	r0, [pc, #124]	; (a360 <z_log_init+0x84>)
{
    a2e4:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
    a2e6:	f00c feb9 	bl	1705c <atomic_inc>
    a2ea:	4606      	mov	r6, r0
    a2ec:	2800      	cmp	r0, #0
    a2ee:	d030      	beq.n	a352 <z_log_init+0x76>
	uint32_t mask = 0;
    a2f0:	2500      	movs	r5, #0
}
    a2f2:	4628      	mov	r0, r5
    a2f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    a2f8:	7b23      	ldrb	r3, [r4, #12]
    a2fa:	b173      	cbz	r3, a31a <z_log_init+0x3e>
	if (backend->api->init) {
    a2fc:	6823      	ldr	r3, [r4, #0]
    a2fe:	68db      	ldr	r3, [r3, #12]
    a300:	b10b      	cbz	r3, a306 <z_log_init+0x2a>
		backend->api->init(backend);
    a302:	4620      	mov	r0, r4
    a304:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    a306:	6823      	ldr	r3, [r4, #0]
    a308:	691b      	ldr	r3, [r3, #16]
    a30a:	b9d3      	cbnz	r3, a342 <z_log_init+0x66>
				log_backend_enable(backend,
    a30c:	6863      	ldr	r3, [r4, #4]
    a30e:	2204      	movs	r2, #4
    a310:	4620      	mov	r0, r4
    a312:	6819      	ldr	r1, [r3, #0]
    a314:	f000 f9f2 	bl	a6fc <log_backend_enable>
			i++;
    a318:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a31a:	3410      	adds	r4, #16
    a31c:	454c      	cmp	r4, r9
    a31e:	d3eb      	bcc.n	a2f8 <z_log_init+0x1c>
	if (blocking) {
    a320:	f1b8 0f00 	cmp.w	r8, #0
    a324:	d0e5      	beq.n	a2f2 <z_log_init+0x16>
		while (mask) {
    a326:	2d00      	cmp	r5, #0
    a328:	d0e2      	beq.n	a2f0 <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
    a32a:	4628      	mov	r0, r5
    a32c:	f7ff ff70 	bl	a210 <activate_foreach_backend>
    a330:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    a332:	2f00      	cmp	r7, #0
    a334:	d0f7      	beq.n	a326 <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
    a336:	2100      	movs	r1, #0
    a338:	f44f 70a4 	mov.w	r0, #328	; 0x148
    a33c:	f00b fb52 	bl	159e4 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    a340:	e7f1      	b.n	a326 <z_log_init+0x4a>
		return backend->api->is_ready(backend);
    a342:	4620      	mov	r0, r4
    a344:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    a346:	2800      	cmp	r0, #0
    a348:	d0e0      	beq.n	a30c <z_log_init+0x30>
				mask |= BIT(i);
    a34a:	fa0a f306 	lsl.w	r3, sl, r6
    a34e:	431d      	orrs	r5, r3
    a350:	e7e2      	b.n	a318 <z_log_init+0x3c>
	uint32_t mask = 0;
    a352:	4605      	mov	r5, r0
				mask |= BIT(i);
    a354:	f04f 0a01 	mov.w	sl, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a358:	4c02      	ldr	r4, [pc, #8]	; (a364 <z_log_init+0x88>)
    a35a:	f8df 900c 	ldr.w	r9, [pc, #12]	; a368 <z_log_init+0x8c>
    a35e:	e7dd      	b.n	a31c <z_log_init+0x40>
    a360:	2000971c 	.word	0x2000971c
    a364:	0001b2a8 	.word	0x0001b2a8
    a368:	0001b2b8 	.word	0x0001b2b8

0000a36c <log_format_func_t_get>:
}
    a36c:	4b01      	ldr	r3, [pc, #4]	; (a374 <log_format_func_t_get+0x8>)
    a36e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    a372:	4770      	bx	lr
    a374:	0001b478 	.word	0x0001b478

0000a378 <log_set_timestamp_func>:
{
    a378:	b508      	push	{r3, lr}
    a37a:	4603      	mov	r3, r0
    a37c:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    a37e:	b12b      	cbz	r3, a38c <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    a380:	4a04      	ldr	r2, [pc, #16]	; (a394 <log_set_timestamp_func+0x1c>)
    a382:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    a384:	f000 fc6c 	bl	ac60 <log_output_timestamp_freq_set>
	return 0;
    a388:	2000      	movs	r0, #0
}
    a38a:	bd08      	pop	{r3, pc}
		return -EINVAL;
    a38c:	f06f 0015 	mvn.w	r0, #21
    a390:	e7fb      	b.n	a38a <log_set_timestamp_func+0x12>
    a392:	bf00      	nop
    a394:	2000820c 	.word	0x2000820c

0000a398 <z_log_notify_backend_enabled>:
{
    a398:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    a39a:	4c04      	ldr	r4, [pc, #16]	; (a3ac <z_log_notify_backend_enabled+0x14>)
    a39c:	7823      	ldrb	r3, [r4, #0]
    a39e:	b913      	cbnz	r3, a3a6 <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
    a3a0:	4803      	ldr	r0, [pc, #12]	; (a3b0 <z_log_notify_backend_enabled+0x18>)
    a3a2:	f00a fe01 	bl	14fa8 <z_impl_k_sem_give>
	backend_attached = true;
    a3a6:	2301      	movs	r3, #1
    a3a8:	7023      	strb	r3, [r4, #0]
}
    a3aa:	bd10      	pop	{r4, pc}
    a3ac:	20009b3a 	.word	0x20009b3a
    a3b0:	200085c8 	.word	0x200085c8

0000a3b4 <z_log_dropped>:
{
    a3b4:	b510      	push	{r4, lr}
    a3b6:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    a3b8:	4806      	ldr	r0, [pc, #24]	; (a3d4 <z_log_dropped+0x20>)
    a3ba:	f00c fe4f 	bl	1705c <atomic_inc>
	if (buffered) {
    a3be:	b13c      	cbz	r4, a3d0 <z_log_dropped+0x1c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    a3c0:	4b05      	ldr	r3, [pc, #20]	; (a3d8 <z_log_dropped+0x24>)
    a3c2:	e8d3 1fef 	ldaex	r1, [r3]
    a3c6:	3901      	subs	r1, #1
    a3c8:	e8c3 1fe2 	stlex	r2, r1, [r3]
    a3cc:	2a00      	cmp	r2, #0
    a3ce:	d1f8      	bne.n	a3c2 <z_log_dropped+0xe>
}
    a3d0:	bd10      	pop	{r4, pc}
    a3d2:	bf00      	nop
    a3d4:	20009714 	.word	0x20009714
    a3d8:	20009718 	.word	0x20009718

0000a3dc <z_log_dropped_read_and_clear>:
}
    a3dc:	2000      	movs	r0, #0
    a3de:	4601      	mov	r1, r0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    a3e0:	4b03      	ldr	r3, [pc, #12]	; (a3f0 <z_log_dropped_read_and_clear+0x14>)
    a3e2:	e8d3 0fef 	ldaex	r0, [r3]
    a3e6:	e8c3 1fe2 	stlex	r2, r1, [r3]
    a3ea:	2a00      	cmp	r2, #0
    a3ec:	d1f9      	bne.n	a3e2 <z_log_dropped_read_and_clear+0x6>
    a3ee:	4770      	bx	lr
    a3f0:	20009714 	.word	0x20009714

0000a3f4 <dropped_notify>:
{
    a3f4:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    a3f6:	f7ff fff1 	bl	a3dc <z_log_dropped_read_and_clear>
    a3fa:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a3fc:	4c07      	ldr	r4, [pc, #28]	; (a41c <dropped_notify+0x28>)
    a3fe:	4e08      	ldr	r6, [pc, #32]	; (a420 <dropped_notify+0x2c>)
    a400:	42b4      	cmp	r4, r6
    a402:	d300      	bcc.n	a406 <dropped_notify+0x12>
}
    a404:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    a406:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    a408:	795b      	ldrb	r3, [r3, #5]
    a40a:	b12b      	cbz	r3, a418 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
    a40c:	6823      	ldr	r3, [r4, #0]
    a40e:	685b      	ldr	r3, [r3, #4]
    a410:	b113      	cbz	r3, a418 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
    a412:	4629      	mov	r1, r5
    a414:	4620      	mov	r0, r4
    a416:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a418:	3410      	adds	r4, #16
    a41a:	e7f1      	b.n	a400 <dropped_notify+0xc>
    a41c:	0001b2a8 	.word	0x0001b2a8
    a420:	0001b2b8 	.word	0x0001b2b8

0000a424 <z_log_msg_init>:
{
    a424:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    a426:	4c04      	ldr	r4, [pc, #16]	; (a438 <z_log_msg_init+0x14>)
    a428:	4904      	ldr	r1, [pc, #16]	; (a43c <z_log_msg_init+0x18>)
    a42a:	4620      	mov	r0, r4
    a42c:	f00c fac1 	bl	169b2 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    a430:	4b03      	ldr	r3, [pc, #12]	; (a440 <z_log_msg_init+0x1c>)
    a432:	601c      	str	r4, [r3, #0]
}
    a434:	bd10      	pop	{r4, pc}
    a436:	bf00      	nop
    a438:	200084f0 	.word	0x200084f0
    a43c:	0001b464 	.word	0x0001b464
    a440:	2000970c 	.word	0x2000970c

0000a444 <log_core_init>:
{
    a444:	b508      	push	{r3, lr}
	panic_mode = false;
    a446:	2300      	movs	r3, #0
    a448:	4a07      	ldr	r2, [pc, #28]	; (a468 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
    a44a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
    a44e:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    a450:	4a06      	ldr	r2, [pc, #24]	; (a46c <log_core_init+0x28>)
		log_set_timestamp_func(default_get_timestamp,
    a452:	4807      	ldr	r0, [pc, #28]	; (a470 <log_core_init+0x2c>)
	dropped_cnt = 0;
    a454:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
    a456:	4a07      	ldr	r2, [pc, #28]	; (a474 <log_core_init+0x30>)
    a458:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    a45a:	f7ff ff8d 	bl	a378 <log_set_timestamp_func>
}
    a45e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    a462:	f7ff bfdf 	b.w	a424 <z_log_msg_init>
    a466:	bf00      	nop
    a468:	20009b3b 	.word	0x20009b3b
    a46c:	20009714 	.word	0x20009714
    a470:	00017059 	.word	0x00017059
    a474:	20009718 	.word	0x20009718

0000a478 <z_log_msg_alloc>:
{
    a478:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    a47a:	2200      	movs	r2, #0
    a47c:	2300      	movs	r3, #0
    a47e:	4801      	ldr	r0, [pc, #4]	; (a484 <z_log_msg_alloc+0xc>)
    a480:	f00c bab8 	b.w	169f4 <mpsc_pbuf_alloc>
    a484:	200084f0 	.word	0x200084f0

0000a488 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    a488:	4801      	ldr	r0, [pc, #4]	; (a490 <z_log_msg_local_claim+0x8>)
    a48a:	f00c bb51 	b.w	16b30 <mpsc_pbuf_claim>
    a48e:	bf00      	nop
    a490:	200084f0 	.word	0x200084f0

0000a494 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    a494:	4b02      	ldr	r3, [pc, #8]	; (a4a0 <z_log_msg_free+0xc>)
{
    a496:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    a498:	6818      	ldr	r0, [r3, #0]
    a49a:	f00c bb9b 	b.w	16bd4 <mpsc_pbuf_free>
    a49e:	bf00      	nop
    a4a0:	2000970c 	.word	0x2000970c

0000a4a4 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    a4a4:	4801      	ldr	r0, [pc, #4]	; (a4ac <z_log_msg_pending+0x8>)
    a4a6:	f00c bbd1 	b.w	16c4c <mpsc_pbuf_is_pending>
    a4aa:	bf00      	nop
    a4ac:	200084f0 	.word	0x200084f0

0000a4b0 <z_impl_log_process>:
{
    a4b0:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
    a4b2:	4b26      	ldr	r3, [pc, #152]	; (a54c <z_impl_log_process+0x9c>)
    a4b4:	7818      	ldrb	r0, [r3, #0]
    a4b6:	2800      	cmp	r0, #0
    a4b8:	d047      	beq.n	a54a <z_impl_log_process+0x9a>
	return z_log_msg_local_claim();
    a4ba:	f7ff ffe5 	bl	a488 <z_log_msg_local_claim>
	if (msg) {
    a4be:	4605      	mov	r5, r0
    a4c0:	b170      	cbz	r0, a4e0 <z_impl_log_process+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    a4c2:	4b23      	ldr	r3, [pc, #140]	; (a550 <z_impl_log_process+0xa0>)
    a4c4:	e8d3 1fef 	ldaex	r1, [r3]
    a4c8:	3901      	subs	r1, #1
    a4ca:	e8c3 1fe2 	stlex	r2, r1, [r3]
    a4ce:	2a00      	cmp	r2, #0
    a4d0:	d1f8      	bne.n	a4c4 <z_impl_log_process+0x14>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a4d2:	4c20      	ldr	r4, [pc, #128]	; (a554 <z_impl_log_process+0xa4>)
    a4d4:	4e20      	ldr	r6, [pc, #128]	; (a558 <z_impl_log_process+0xa8>)
    a4d6:	42b4      	cmp	r4, r6
    a4d8:	d32d      	bcc.n	a536 <z_impl_log_process+0x86>
		z_log_msg_free(msg);
    a4da:	4628      	mov	r0, r5
    a4dc:	f7ff ffda 	bl	a494 <z_log_msg_free>
	return dropped_cnt > 0;
    a4e0:	4b1e      	ldr	r3, [pc, #120]	; (a55c <z_impl_log_process+0xac>)
    a4e2:	4c1f      	ldr	r4, [pc, #124]	; (a560 <z_impl_log_process+0xb0>)
		if ((dropped_pend || unordered_pend) &&
    a4e4:	681b      	ldr	r3, [r3, #0]
    a4e6:	2b00      	cmp	r3, #0
    a4e8:	dd19      	ble.n	a51e <z_impl_log_process+0x6e>
	return z_impl_k_uptime_ticks();
    a4ea:	f010 fa77 	bl	1a9dc <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    a4ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a4f2:	fba0 0302 	umull	r0, r3, r0, r2
    a4f6:	fb02 3101 	mla	r1, r2, r1, r3
    a4fa:	0bc3      	lsrs	r3, r0, #15
    a4fc:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    a500:	e9d4 2000 	ldrd	r2, r0, [r4]
    a504:	1a9b      	subs	r3, r3, r2
		if ((dropped_pend || unordered_pend) &&
    a506:	f240 32e9 	movw	r2, #1001	; 0x3e9
    a50a:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    a50e:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    a512:	4293      	cmp	r3, r2
    a514:	f171 0100 	sbcs.w	r1, r1, #0
    a518:	d301      	bcc.n	a51e <z_impl_log_process+0x6e>
				dropped_notify();
    a51a:	f7ff ff6b 	bl	a3f4 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    a51e:	e9d4 3200 	ldrd	r3, r2, [r4]
    a522:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    a526:	f142 0200 	adc.w	r2, r2, #0
    a52a:	e9c4 3200 	strd	r3, r2, [r4]
}
    a52e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
    a532:	f7ff bfb7 	b.w	a4a4 <z_log_msg_pending>
	return backend->cb->active;
    a536:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    a538:	795b      	ldrb	r3, [r3, #5]
    a53a:	b123      	cbz	r3, a546 <z_impl_log_process+0x96>
	backend->api->process(backend, msg);
    a53c:	6823      	ldr	r3, [r4, #0]
    a53e:	4629      	mov	r1, r5
    a540:	4620      	mov	r0, r4
    a542:	681b      	ldr	r3, [r3, #0]
    a544:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a546:	3410      	adds	r4, #16
    a548:	e7c5      	b.n	a4d6 <z_impl_log_process+0x26>
}
    a54a:	bd70      	pop	{r4, r5, r6, pc}
    a54c:	20009b3a 	.word	0x20009b3a
    a550:	20009718 	.word	0x20009718
    a554:	0001b2a8 	.word	0x0001b2a8
    a558:	0001b2b8 	.word	0x0001b2b8
    a55c:	20009714 	.word	0x20009714
    a560:	20008fd0 	.word	0x20008fd0

0000a564 <z_impl_log_panic>:
{
    a564:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    a566:	4d0d      	ldr	r5, [pc, #52]	; (a59c <z_impl_log_panic+0x38>)
    a568:	7829      	ldrb	r1, [r5, #0]
    a56a:	b961      	cbnz	r1, a586 <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
    a56c:	2001      	movs	r0, #1
    a56e:	f7ff feb5 	bl	a2dc <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a572:	4c0b      	ldr	r4, [pc, #44]	; (a5a0 <z_impl_log_panic+0x3c>)
    a574:	4e0b      	ldr	r6, [pc, #44]	; (a5a4 <z_impl_log_panic+0x40>)
    a576:	42b4      	cmp	r4, r6
    a578:	d306      	bcc.n	a588 <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    a57a:	f7ff ff99 	bl	a4b0 <z_impl_log_process>
		while (log_process() == true) {
    a57e:	2800      	cmp	r0, #0
    a580:	d1fb      	bne.n	a57a <z_impl_log_panic+0x16>
	panic_mode = true;
    a582:	2301      	movs	r3, #1
    a584:	702b      	strb	r3, [r5, #0]
}
    a586:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
    a588:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    a58a:	795b      	ldrb	r3, [r3, #5]
    a58c:	b11b      	cbz	r3, a596 <z_impl_log_panic+0x32>
	backend->api->panic(backend);
    a58e:	6823      	ldr	r3, [r4, #0]
    a590:	4620      	mov	r0, r4
    a592:	689b      	ldr	r3, [r3, #8]
    a594:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a596:	3410      	adds	r4, #16
    a598:	e7ed      	b.n	a576 <z_impl_log_panic+0x12>
    a59a:	bf00      	nop
    a59c:	20009b3b 	.word	0x20009b3b
    a5a0:	0001b2a8 	.word	0x0001b2a8
    a5a4:	0001b2b8 	.word	0x0001b2b8

0000a5a8 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
    a5a8:	2100      	movs	r1, #0
{
    a5aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
    a5ae:	4608      	mov	r0, r1
    a5b0:	f7ff fe94 	bl	a2dc <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    a5b4:	4604      	mov	r4, r0
    a5b6:	b348      	cbz	r0, a60c <log_process_thread_func+0x64>
    a5b8:	f240 6867 	movw	r8, #1639	; 0x667
    a5bc:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    a5c0:	f00b fa2a 	bl	15a18 <z_impl_z_current_get>
	proc_tid = process_tid;
    a5c4:	4b1a      	ldr	r3, [pc, #104]	; (a630 <log_process_thread_func+0x88>)
    a5c6:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    a5c8:	b130      	cbz	r0, a5d8 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    a5ca:	4b1a      	ldr	r3, [pc, #104]	; (a634 <log_process_thread_func+0x8c>)
	    process_tid &&
    a5cc:	681b      	ldr	r3, [r3, #0]
    a5ce:	2b09      	cmp	r3, #9
    a5d0:	dd02      	ble.n	a5d8 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
    a5d2:	4819      	ldr	r0, [pc, #100]	; (a638 <log_process_thread_func+0x90>)
    a5d4:	f00a fce8 	bl	14fa8 <z_impl_k_sem_give>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    a5d8:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a5da:	4f18      	ldr	r7, [pc, #96]	; (a63c <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
    a5dc:	f8df a058 	ldr.w	sl, [pc, #88]	; a638 <log_process_thread_func+0x90>
		if (activate_mask) {
    a5e0:	b144      	cbz	r4, a5f4 <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
    a5e2:	4620      	mov	r0, r4
    a5e4:	f7ff fe14 	bl	a210 <activate_foreach_backend>
			if (!activate_mask) {
    a5e8:	4604      	mov	r4, r0
    a5ea:	b918      	cbnz	r0, a5f4 <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
    a5ec:	f04f 38ff 	mov.w	r8, #4294967295
    a5f0:	f04f 39ff 	mov.w	r9, #4294967295
    a5f4:	f7ff ff5c 	bl	a4b0 <z_impl_log_process>
		if (log_process() == false) {
    a5f8:	4606      	mov	r6, r0
    a5fa:	b928      	cbnz	r0, a608 <log_process_thread_func+0x60>
			if (processed_any) {
    a5fc:	b9b5      	cbnz	r5, a62c <log_process_thread_func+0x84>
    a5fe:	4642      	mov	r2, r8
    a600:	464b      	mov	r3, r9
    a602:	4650      	mov	r0, sl
    a604:	f00a fcf6 	bl	14ff4 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    a608:	4635      	mov	r5, r6
    a60a:	e7e9      	b.n	a5e0 <log_process_thread_func+0x38>
    a60c:	f04f 38ff 	mov.w	r8, #4294967295
    a610:	f04f 39ff 	mov.w	r9, #4294967295
    a614:	e7d4      	b.n	a5c0 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    a616:	682b      	ldr	r3, [r5, #0]
    a618:	699b      	ldr	r3, [r3, #24]
    a61a:	b11b      	cbz	r3, a624 <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
    a61c:	2200      	movs	r2, #0
    a61e:	4628      	mov	r0, r5
    a620:	4611      	mov	r1, r2
    a622:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a624:	3510      	adds	r5, #16
    a626:	42bd      	cmp	r5, r7
    a628:	d3f5      	bcc.n	a616 <log_process_thread_func+0x6e>
    a62a:	e7e8      	b.n	a5fe <log_process_thread_func+0x56>
    a62c:	4d04      	ldr	r5, [pc, #16]	; (a640 <log_process_thread_func+0x98>)
    a62e:	e7fa      	b.n	a626 <log_process_thread_func+0x7e>
    a630:	20009710 	.word	0x20009710
    a634:	20009718 	.word	0x20009718
    a638:	200085c8 	.word	0x200085c8
    a63c:	0001b2b8 	.word	0x0001b2b8
    a640:	0001b2a8 	.word	0x0001b2a8

0000a644 <z_log_msg_post_finalize>:
{
    a644:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    a646:	4818      	ldr	r0, [pc, #96]	; (a6a8 <z_log_msg_post_finalize+0x64>)
    a648:	f00c fd08 	bl	1705c <atomic_inc>
	if (panic_mode) {
    a64c:	4b17      	ldr	r3, [pc, #92]	; (a6ac <z_log_msg_post_finalize+0x68>)
    a64e:	781b      	ldrb	r3, [r3, #0]
    a650:	b17b      	cbz	r3, a672 <z_log_msg_post_finalize+0x2e>
	__asm__ volatile(
    a652:	f04f 0320 	mov.w	r3, #32
    a656:	f3ef 8411 	mrs	r4, BASEPRI
    a65a:	f383 8812 	msr	BASEPRI_MAX, r3
    a65e:	f3bf 8f6f 	isb	sy
    a662:	f7ff ff25 	bl	a4b0 <z_impl_log_process>
	__asm__ volatile(
    a666:	f384 8811 	msr	BASEPRI, r4
    a66a:	f3bf 8f6f 	isb	sy
}
    a66e:	b002      	add	sp, #8
    a670:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    a672:	4b0f      	ldr	r3, [pc, #60]	; (a6b0 <z_log_msg_post_finalize+0x6c>)
    a674:	681b      	ldr	r3, [r3, #0]
    a676:	2b00      	cmp	r3, #0
    a678:	d0f9      	beq.n	a66e <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
    a67a:	b950      	cbnz	r0, a692 <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
    a67c:	2200      	movs	r2, #0
    a67e:	2300      	movs	r3, #0
    a680:	480c      	ldr	r0, [pc, #48]	; (a6b4 <z_log_msg_post_finalize+0x70>)
    a682:	e9cd 2300 	strd	r2, r3, [sp]
    a686:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    a68a:	2300      	movs	r3, #0
    a68c:	f00b fc08 	bl	15ea0 <z_impl_k_timer_start>
    a690:	e7ed      	b.n	a66e <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    a692:	280a      	cmp	r0, #10
    a694:	d1eb      	bne.n	a66e <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
    a696:	4807      	ldr	r0, [pc, #28]	; (a6b4 <z_log_msg_post_finalize+0x70>)
    a698:	f010 f9d4 	bl	1aa44 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    a69c:	4806      	ldr	r0, [pc, #24]	; (a6b8 <z_log_msg_post_finalize+0x74>)
}
    a69e:	b002      	add	sp, #8
    a6a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a6a4:	f00a bc80 	b.w	14fa8 <z_impl_k_sem_give>
    a6a8:	20009718 	.word	0x20009718
    a6ac:	20009b3b 	.word	0x20009b3b
    a6b0:	20009710 	.word	0x20009710
    a6b4:	20008fd8 	.word	0x20008fd8
    a6b8:	200085c8 	.word	0x200085c8

0000a6bc <z_log_msg_commit>:
{
    a6bc:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    a6be:	4b06      	ldr	r3, [pc, #24]	; (a6d8 <z_log_msg_commit+0x1c>)
{
    a6c0:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    a6c2:	681b      	ldr	r3, [r3, #0]
    a6c4:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    a6c6:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    a6c8:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    a6ca:	4804      	ldr	r0, [pc, #16]	; (a6dc <z_log_msg_commit+0x20>)
    a6cc:	f00c fa10 	bl	16af0 <mpsc_pbuf_commit>
}
    a6d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    a6d4:	f7ff bfb6 	b.w	a644 <z_log_msg_post_finalize>
    a6d8:	2000820c 	.word	0x2000820c
    a6dc:	200084f0 	.word	0x200084f0

0000a6e0 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    a6e0:	4a04      	ldr	r2, [pc, #16]	; (a6f4 <log_source_name_get+0x14>)
    a6e2:	4b05      	ldr	r3, [pc, #20]	; (a6f8 <log_source_name_get+0x18>)
    a6e4:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    a6e6:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    a6ea:	bf34      	ite	cc
    a6ec:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    a6f0:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    a6f2:	4770      	bx	lr
    a6f4:	0001b1a0 	.word	0x0001b1a0
    a6f8:	0001b2a8 	.word	0x0001b2a8

0000a6fc <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    a6fc:	4b08      	ldr	r3, [pc, #32]	; (a720 <log_backend_enable+0x24>)
{
    a6fe:	b410      	push	{r4}
	id += backend - log_backend_get(0);
    a700:	1ac3      	subs	r3, r0, r3
	backend->cb->id = id;
    a702:	6844      	ldr	r4, [r0, #4]
    a704:	111b      	asrs	r3, r3, #4
    a706:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    a708:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    a70a:	6843      	ldr	r3, [r0, #4]
    a70c:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
    a70e:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    a710:	6843      	ldr	r3, [r0, #4]
    a712:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    a714:	6843      	ldr	r3, [r0, #4]
    a716:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    a718:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
    a71a:	f7ff be3d 	b.w	a398 <z_log_notify_backend_enabled>
    a71e:	bf00      	nop
    a720:	0001b2a8 	.word	0x0001b2a8

0000a724 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    a724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a728:	b08f      	sub	sp, #60	; 0x3c
    a72a:	f3c1 284a 	ubfx	r8, r1, #9, #11
    a72e:	af04      	add	r7, sp, #16
    a730:	460d      	mov	r5, r1
    a732:	4691      	mov	r9, r2
    a734:	60b8      	str	r0, [r7, #8]
    a736:	607b      	str	r3, [r7, #4]

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
    a738:	0d0c      	lsrs	r4, r1, #20
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    a73a:	f1b8 0f00 	cmp.w	r8, #0
    a73e:	d063      	beq.n	a808 <z_impl_z_log_msg_static_create+0xe4>
	struct z_cbprintf_buf_desc buf_desc = {
    a740:	2600      	movs	r6, #0
	return cbprintf_package_convert(in_packaged, in_len,
    a742:	f04f 0b04 	mov.w	fp, #4
    a746:	f04f 0a0a 	mov.w	sl, #10
    a74a:	f107 0314 	add.w	r3, r7, #20
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    a74e:	f8c7 800c 	str.w	r8, [r7, #12]
	struct z_cbprintf_buf_desc buf_desc = {
    a752:	e9c7 6607 	strd	r6, r6, [r7, #28]
    a756:	627e      	str	r6, [r7, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
    a758:	9301      	str	r3, [sp, #4]
    a75a:	f8cd b008 	str.w	fp, [sp, #8]
    a75e:	f8cd a000 	str.w	sl, [sp]
    a762:	f107 031c 	add.w	r3, r7, #28
    a766:	4632      	mov	r2, r6
    a768:	4648      	mov	r0, r9
    a76a:	68f9      	ldr	r1, [r7, #12]
    a76c:	f7fe f9b2 	bl	8ad4 <cbprintf_package_convert>
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
    a770:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    a774:	4603      	mov	r3, r0
    a776:	d31c      	bcc.n	a7b2 <z_impl_z_log_msg_static_create+0x8e>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
    a778:	466c      	mov	r4, sp
    a77a:	b08a      	sub	sp, #40	; 0x28
    a77c:	f8d9 1004 	ldr.w	r1, [r9, #4]
    a780:	ab04      	add	r3, sp, #16
    a782:	4826      	ldr	r0, [pc, #152]	; (a81c <z_impl_z_log_msg_static_create+0xf8>)
    a784:	461a      	mov	r2, r3
    a786:	e9c3 0105 	strd	r0, r1, [r3, #20]
    a78a:	f240 71ff 	movw	r1, #2047	; 0x7ff
    a78e:	61d9      	str	r1, [r3, #28]
    a790:	f44f 7100 	mov.w	r1, #512	; 0x200
    a794:	8419      	strh	r1, [r3, #32]
    a796:	4b22      	ldr	r3, [pc, #136]	; (a820 <z_impl_z_log_msg_static_create+0xfc>)
    a798:	f842 3f10 	str.w	r3, [r2, #16]!
    a79c:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    a7a0:	4633      	mov	r3, r6
    a7a2:	4820      	ldr	r0, [pc, #128]	; (a824 <z_impl_z_log_msg_static_create+0x100>)
    a7a4:	f7ff ffbe 	bl	a724 <z_impl_z_log_msg_static_create>
    a7a8:	46a5      	mov	sp, r4
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
}
    a7aa:	372c      	adds	r7, #44	; 0x2c
    a7ac:	46bd      	mov	sp, r7
    a7ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_desc.package_len = len;
    a7b2:	f3c0 080a 	ubfx	r8, r0, #0, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    a7b6:	f104 0017 	add.w	r0, r4, #23
    a7ba:	4418      	add	r0, r3
    a7bc:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    a7c0:	0880      	lsrs	r0, r0, #2
    a7c2:	603b      	str	r3, [r7, #0]
    a7c4:	f7ff fe58 	bl	a478 <z_log_msg_alloc>
    a7c8:	f368 2553 	bfi	r5, r8, #9, #11
		if (msg) {
    a7cc:	4604      	mov	r4, r0
    a7ce:	b190      	cbz	r0, a7f6 <z_impl_z_log_msg_static_create+0xd2>
	struct z_cbprintf_buf_desc buf_desc = {
    a7d0:	683b      	ldr	r3, [r7, #0]
						    msg->data, out_desc.package_len,
    a7d2:	f100 0110 	add.w	r1, r0, #16
    a7d6:	e9c7 3608 	strd	r3, r6, [r7, #32]
	return cbprintf_package_convert(in_packaged, in_len,
    a7da:	f107 0314 	add.w	r3, r7, #20
	struct z_cbprintf_buf_desc buf_desc = {
    a7de:	61f9      	str	r1, [r7, #28]
	return cbprintf_package_convert(in_packaged, in_len,
    a7e0:	e9cd a300 	strd	sl, r3, [sp]
    a7e4:	f8cd b008 	str.w	fp, [sp, #8]
    a7e8:	4648      	mov	r0, r9
    a7ea:	4a0f      	ldr	r2, [pc, #60]	; (a828 <z_impl_z_log_msg_static_create+0x104>)
    a7ec:	68f9      	ldr	r1, [r7, #12]
    a7ee:	f107 031c 	add.w	r3, r7, #28
    a7f2:	f7fe f96f 	bl	8ad4 <cbprintf_package_convert>
	z_log_msg_finalize(msg, source, out_desc, data);
    a7f6:	f368 2553 	bfi	r5, r8, #9, #11
    a7fa:	462a      	mov	r2, r5
    a7fc:	4620      	mov	r0, r4
    a7fe:	687b      	ldr	r3, [r7, #4]
    a800:	68b9      	ldr	r1, [r7, #8]
    a802:	f00c fc5d 	bl	170c0 <z_log_msg_finalize>
    a806:	e7d0      	b.n	a7aa <z_impl_z_log_msg_static_create+0x86>
    a808:	f104 0017 	add.w	r0, r4, #23
    a80c:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    a810:	0880      	lsrs	r0, r0, #2
    a812:	f7ff fe31 	bl	a478 <z_log_msg_alloc>
    a816:	4604      	mov	r4, r0
    a818:	e7ed      	b.n	a7f6 <z_impl_z_log_msg_static_create+0xd2>
    a81a:	bf00      	nop
    a81c:	0001be43 	.word	0x0001be43
    a820:	01000004 	.word	0x01000004
    a824:	0001b240 	.word	0x0001b240
    a828:	00017095 	.word	0x00017095

0000a82c <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    a82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a830:	b087      	sub	sp, #28
    a832:	4604      	mov	r4, r0
    a834:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
    a838:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
    a83c:	460f      	mov	r7, r1
    a83e:	4693      	mov	fp, r2
    a840:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
    a842:	b3a6      	cbz	r6, a8ae <z_impl_z_log_msg_runtime_vcreate+0x82>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    a844:	2110      	movs	r1, #16
    a846:	4633      	mov	r3, r6
    a848:	4652      	mov	r2, sl
    a84a:	2000      	movs	r0, #0
    a84c:	f8cd 9000 	str.w	r9, [sp]
		va_copy(ap2, ap);
    a850:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    a854:	f7fd ff6a 	bl	872c <cbvprintf_package>
    a858:	4601      	mov	r1, r0
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    a85a:	f105 0017 	add.w	r0, r5, #23
    a85e:	4408      	add	r0, r1
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
    a860:	4b14      	ldr	r3, [pc, #80]	; (a8b4 <z_impl_z_log_msg_runtime_vcreate+0x88>)
    a862:	f004 0407 	and.w	r4, r4, #7
    a866:	f00b 0b07 	and.w	fp, fp, #7
    a86a:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    a86c:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
    a870:	ea03 2341 	and.w	r3, r3, r1, lsl #9
    a874:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
    a878:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
    a87a:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    a87c:	9103      	str	r1, [sp, #12]
		msg = z_log_msg_alloc(msg_wlen);
    a87e:	f7ff fdfb 	bl	a478 <z_log_msg_alloc>
	struct log_msg_desc desc =
    a882:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
    a886:	4605      	mov	r5, r0
    a888:	b140      	cbz	r0, a89c <z_impl_z_log_msg_runtime_vcreate+0x70>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
    a88a:	b13e      	cbz	r6, a89c <z_impl_z_log_msg_runtime_vcreate+0x70>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    a88c:	4633      	mov	r3, r6
    a88e:	4652      	mov	r2, sl
    a890:	9903      	ldr	r1, [sp, #12]
    a892:	f8cd 9000 	str.w	r9, [sp]
    a896:	3010      	adds	r0, #16
    a898:	f7fd ff48 	bl	872c <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    a89c:	4643      	mov	r3, r8
    a89e:	4622      	mov	r2, r4
    a8a0:	4639      	mov	r1, r7
    a8a2:	4628      	mov	r0, r5
	}
}
    a8a4:	b007      	add	sp, #28
    a8a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
    a8aa:	f00c bc09 	b.w	170c0 <z_log_msg_finalize>
		plen = 0;
    a8ae:	4631      	mov	r1, r6
    a8b0:	e7d3      	b.n	a85a <z_impl_z_log_msg_runtime_vcreate+0x2e>
    a8b2:	bf00      	nop
    a8b4:	000ffe00 	.word	0x000ffe00

0000a8b8 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    a8b8:	b40e      	push	{r1, r2, r3}
    a8ba:	b503      	push	{r0, r1, lr}
    a8bc:	ab03      	add	r3, sp, #12
    a8be:	f853 2b04 	ldr.w	r2, [r3], #4
    a8c2:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    a8c4:	4804      	ldr	r0, [pc, #16]	; (a8d8 <print_formatted+0x20>)
	va_start(args, fmt);
    a8c6:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    a8c8:	f00c fc20 	bl	1710c <cbvprintf>
	va_end(args);

	return length;
}
    a8cc:	b002      	add	sp, #8
    a8ce:	f85d eb04 	ldr.w	lr, [sp], #4
    a8d2:	b003      	add	sp, #12
    a8d4:	4770      	bx	lr
    a8d6:	bf00      	nop
    a8d8:	00017135 	.word	0x00017135

0000a8dc <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    a8dc:	06ca      	lsls	r2, r1, #27
    a8de:	d405      	bmi.n	a8ec <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    a8e0:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    a8e2:	bf4c      	ite	mi
    a8e4:	4902      	ldrmi	r1, [pc, #8]	; (a8f0 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    a8e6:	4903      	ldrpl	r1, [pc, #12]	; (a8f4 <newline_print+0x18>)
    a8e8:	f7ff bfe6 	b.w	a8b8 <print_formatted>
	}
}
    a8ec:	4770      	bx	lr
    a8ee:	bf00      	nop
    a8f0:	0001dcdc 	.word	0x0001dcdc
    a8f4:	0001dcdb 	.word	0x0001dcdb

0000a8f8 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    a8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a8fc:	b089      	sub	sp, #36	; 0x24
    a8fe:	469b      	mov	fp, r3
    a900:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
    a904:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    a908:	4604      	mov	r4, r0
    a90a:	9304      	str	r3, [sp, #16]
    a90c:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
    a910:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    a912:	9b04      	ldr	r3, [sp, #16]
{
    a914:	460d      	mov	r5, r1
    a916:	9206      	str	r2, [sp, #24]
	if (!raw_string) {
    a918:	2b00      	cmp	r3, #0
    a91a:	f000 8087 	beq.w	aa2c <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    a91e:	f006 0308 	and.w	r3, r6, #8
    a922:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    a924:	f00c fbb4 	bl	17090 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    a928:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
    a92c:	4602      	mov	r2, r0
    a92e:	2800      	cmp	r0, #0
    a930:	d04b      	beq.n	a9ca <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
    a932:	4620      	mov	r0, r4
    a934:	4985      	ldr	r1, [pc, #532]	; (ab4c <log_output_process+0x254>)
    a936:	f7ff ffbf 	bl	a8b8 <print_formatted>
    a93a:	4680      	mov	r8, r0
	if (stamp) {
    a93c:	f1ba 0f00 	cmp.w	sl, #0
    a940:	d008      	beq.n	a954 <log_output_process+0x5c>
	if (!format) {
    a942:	f016 0f44 	tst.w	r6, #68	; 0x44
    a946:	d142      	bne.n	a9ce <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
    a948:	462a      	mov	r2, r5
    a94a:	4620      	mov	r0, r4
    a94c:	4980      	ldr	r1, [pc, #512]	; (ab50 <log_output_process+0x258>)
    a94e:	f7ff ffb3 	bl	a8b8 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    a952:	4480      	add	r8, r0
	if (color) {
    a954:	f006 0301 	and.w	r3, r6, #1
    a958:	b15b      	cbz	r3, a972 <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
    a95a:	4b7e      	ldr	r3, [pc, #504]	; (ab54 <log_output_process+0x25c>)
    a95c:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
    a95e:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
    a960:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
    a964:	4b7c      	ldr	r3, [pc, #496]	; (ab58 <log_output_process+0x260>)
    a966:	497d      	ldr	r1, [pc, #500]	; (ab5c <log_output_process+0x264>)
    a968:	2a00      	cmp	r2, #0
    a96a:	bf08      	it	eq
    a96c:	461a      	moveq	r2, r3
    a96e:	f7ff ffa3 	bl	a8b8 <print_formatted>
	if (level_on) {
    a972:	f006 0308 	and.w	r3, r6, #8
    a976:	2b00      	cmp	r3, #0
    a978:	d055      	beq.n	aa26 <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
    a97a:	4b79      	ldr	r3, [pc, #484]	; (ab60 <log_output_process+0x268>)
    a97c:	9a04      	ldr	r2, [sp, #16]
    a97e:	4620      	mov	r0, r4
    a980:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    a984:	4977      	ldr	r1, [pc, #476]	; (ab64 <log_output_process+0x26c>)
    a986:	f7ff ff97 	bl	a8b8 <print_formatted>
    a98a:	4605      	mov	r5, r0
	if (domain) {
    a98c:	9b06      	ldr	r3, [sp, #24]
    a98e:	b12b      	cbz	r3, a99c <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
    a990:	461a      	mov	r2, r3
    a992:	4620      	mov	r0, r4
    a994:	4974      	ldr	r1, [pc, #464]	; (ab68 <log_output_process+0x270>)
    a996:	f7ff ff8f 	bl	a8b8 <print_formatted>
    a99a:	4405      	add	r5, r0
	if (source) {
    a99c:	f1bb 0f00 	cmp.w	fp, #0
    a9a0:	d005      	beq.n	a9ae <log_output_process+0xb6>
		total += print_formatted(output,
    a9a2:	465a      	mov	r2, fp
    a9a4:	4620      	mov	r0, r4
    a9a6:	4971      	ldr	r1, [pc, #452]	; (ab6c <log_output_process+0x274>)
    a9a8:	f7ff ff86 	bl	a8b8 <print_formatted>
    a9ac:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    a9ae:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    a9b0:	f1b9 0f00 	cmp.w	r9, #0
    a9b4:	d149      	bne.n	aa4a <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    a9b6:	2f00      	cmp	r7, #0
    a9b8:	d14f      	bne.n	aa5a <log_output_process+0x162>
	if (color) {
    a9ba:	07f3      	lsls	r3, r6, #31
    a9bc:	f100 80c0 	bmi.w	ab40 <log_output_process+0x248>
	newline_print(output, flags);
    a9c0:	4631      	mov	r1, r6
    a9c2:	4620      	mov	r0, r4
    a9c4:	f7ff ff8a 	bl	a8dc <newline_print>
}
    a9c8:	e0b4      	b.n	ab34 <log_output_process+0x23c>
	uint32_t length = 0U;
    a9ca:	4680      	mov	r8, r0
    a9cc:	e7b6      	b.n	a93c <log_output_process+0x44>
	} else if (freq != 0U) {
    a9ce:	4b68      	ldr	r3, [pc, #416]	; (ab70 <log_output_process+0x278>)
    a9d0:	6818      	ldr	r0, [r3, #0]
    a9d2:	2800      	cmp	r0, #0
    a9d4:	d0bd      	beq.n	a952 <log_output_process+0x5a>
		timestamp /= timestamp_div;
    a9d6:	4b67      	ldr	r3, [pc, #412]	; (ab74 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
    a9d8:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
    a9dc:	681b      	ldr	r3, [r3, #0]
    a9de:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    a9e2:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    a9e6:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    a9ea:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
    a9ee:	fb0e f505 	mul.w	r5, lr, r5
    a9f2:	fbb3 faf2 	udiv	sl, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    a9f6:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
    a9fa:	213c      	movs	r1, #60	; 0x3c
    a9fc:	fb02 321a 	mls	r2, r2, sl, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    aa00:	fb00 551c 	mls	r5, r0, ip, r5
		mins = seconds / 60U;
    aa04:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    aa08:	fb0e f505 	mul.w	r5, lr, r5
    aa0c:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    aa10:	fb01 2213 	mls	r2, r1, r3, r2
    aa14:	4620      	mov	r0, r4
    aa16:	9200      	str	r2, [sp, #0]
    aa18:	e9cd c501 	strd	ip, r5, [sp, #4]
    aa1c:	4652      	mov	r2, sl
    aa1e:	4956      	ldr	r1, [pc, #344]	; (ab78 <log_output_process+0x280>)
    aa20:	f7ff ff4a 	bl	a8b8 <print_formatted>
    aa24:	e795      	b.n	a952 <log_output_process+0x5a>
	int total = 0;
    aa26:	f006 0508 	and.w	r5, r6, #8
    aa2a:	e7af      	b.n	a98c <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    aa2c:	f1bb 0f01 	cmp.w	fp, #1
    aa30:	d106      	bne.n	aa40 <log_output_process+0x148>
	if (package) {
    aa32:	f1b9 0f00 	cmp.w	r9, #0
    aa36:	d164      	bne.n	ab02 <log_output_process+0x20a>
	if (data_len) {
    aa38:	2f00      	cmp	r7, #0
    aa3a:	d07b      	beq.n	ab34 <log_output_process+0x23c>
		prefix_offset = 0;
    aa3c:	2500      	movs	r5, #0
    aa3e:	e00c      	b.n	aa5a <log_output_process+0x162>
	if (package) {
    aa40:	f1b9 0f00 	cmp.w	r9, #0
    aa44:	d0f8      	beq.n	aa38 <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    aa46:	484d      	ldr	r0, [pc, #308]	; (ab7c <log_output_process+0x284>)
    aa48:	e05c      	b.n	ab04 <log_output_process+0x20c>
		cb = out_func;
    aa4a:	484d      	ldr	r0, [pc, #308]	; (ab80 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    aa4c:	464b      	mov	r3, r9
    aa4e:	4622      	mov	r2, r4
    aa50:	494c      	ldr	r1, [pc, #304]	; (ab84 <log_output_process+0x28c>)
    aa52:	f00b fb0a 	bl	1606a <cbpprintf_external>
	if (data_len) {
    aa56:	2f00      	cmp	r7, #0
    aa58:	d068      	beq.n	ab2c <log_output_process+0x234>
		print_formatted(output, " ");
    aa5a:	f8df 912c 	ldr.w	r9, [pc, #300]	; ab88 <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
    aa5e:	f8df a12c 	ldr.w	sl, [pc, #300]	; ab8c <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    aa62:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    aa64:	4631      	mov	r1, r6
    aa66:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    aa68:	46b8      	mov	r8, r7
	for (int i = 0; i < prefix_offset; i++) {
    aa6a:	f04f 0b00 	mov.w	fp, #0
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    aa6e:	bf28      	it	cs
    aa70:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
    aa74:	f7ff ff32 	bl	a8dc <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    aa78:	455d      	cmp	r5, fp
    aa7a:	dc45      	bgt.n	ab08 <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
    aa7c:	9b05      	ldr	r3, [sp, #20]
    aa7e:	4651      	mov	r1, sl
    aa80:	4620      	mov	r0, r4
    aa82:	781a      	ldrb	r2, [r3, #0]
    aa84:	f7ff ff18 	bl	a8b8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    aa88:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
    aa8c:	f01b 0f07 	tst.w	fp, #7
    aa90:	d103      	bne.n	aa9a <log_output_process+0x1a2>
			print_formatted(output, " ");
    aa92:	4649      	mov	r1, r9
    aa94:	4620      	mov	r0, r4
    aa96:	f7ff ff0f 	bl	a8b8 <print_formatted>
		if (i < length) {
    aa9a:	45d8      	cmp	r8, fp
    aa9c:	d93b      	bls.n	ab16 <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
    aa9e:	9b05      	ldr	r3, [sp, #20]
    aaa0:	4651      	mov	r1, sl
    aaa2:	4620      	mov	r0, r4
    aaa4:	f813 200b 	ldrb.w	r2, [r3, fp]
    aaa8:	f7ff ff06 	bl	a8b8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    aaac:	f10b 0b01 	add.w	fp, fp, #1
    aab0:	f1bb 0f10 	cmp.w	fp, #16
    aab4:	d1ea      	bne.n	aa8c <log_output_process+0x194>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    aab6:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
    aaba:	4620      	mov	r0, r4
    aabc:	4934      	ldr	r1, [pc, #208]	; (ab90 <log_output_process+0x298>)
    aabe:	f7ff fefb 	bl	a8b8 <print_formatted>
		if (i < length) {
    aac2:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
    aac4:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
    aac6:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
    aac8:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
    aaca:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
    aace:	295f      	cmp	r1, #95	; 0x5f
    aad0:	bf28      	it	cs
    aad2:	222e      	movcs	r2, #46	; 0x2e
    aad4:	492f      	ldr	r1, [pc, #188]	; (ab94 <log_output_process+0x29c>)
    aad6:	f7ff feef 	bl	a8b8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    aada:	f10b 0b01 	add.w	fp, fp, #1
    aade:	f1bb 0f10 	cmp.w	fp, #16
    aae2:	d01d      	beq.n	ab20 <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
    aae4:	f01b 0f07 	tst.w	fp, #7
    aae8:	d103      	bne.n	aaf2 <log_output_process+0x1fa>
			print_formatted(output, " ");
    aaea:	4649      	mov	r1, r9
    aaec:	4620      	mov	r0, r4
    aaee:	f7ff fee3 	bl	a8b8 <print_formatted>
		if (i < length) {
    aaf2:	45d8      	cmp	r8, fp
    aaf4:	465a      	mov	r2, fp
    aaf6:	d8e5      	bhi.n	aac4 <log_output_process+0x1cc>
			print_formatted(output, " ");
    aaf8:	4649      	mov	r1, r9
    aafa:	4620      	mov	r0, r4
    aafc:	f7ff fedc 	bl	a8b8 <print_formatted>
    ab00:	e7eb      	b.n	aada <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    ab02:	481f      	ldr	r0, [pc, #124]	; (ab80 <log_output_process+0x288>)
		prefix_offset = 0;
    ab04:	9d04      	ldr	r5, [sp, #16]
    ab06:	e7a1      	b.n	aa4c <log_output_process+0x154>
		print_formatted(output, " ");
    ab08:	4649      	mov	r1, r9
    ab0a:	4620      	mov	r0, r4
    ab0c:	f7ff fed4 	bl	a8b8 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    ab10:	f10b 0b01 	add.w	fp, fp, #1
    ab14:	e7b0      	b.n	aa78 <log_output_process+0x180>
			print_formatted(output, "   ");
    ab16:	4620      	mov	r0, r4
    ab18:	491f      	ldr	r1, [pc, #124]	; (ab98 <log_output_process+0x2a0>)
    ab1a:	f7ff fecd 	bl	a8b8 <print_formatted>
    ab1e:	e7c5      	b.n	aaac <log_output_process+0x1b4>
		data += length;
    ab20:	9b05      	ldr	r3, [sp, #20]
	} while (len);
    ab22:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
    ab26:	4443      	add	r3, r8
    ab28:	9305      	str	r3, [sp, #20]
	} while (len);
    ab2a:	d19a      	bne.n	aa62 <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    ab2c:	9b04      	ldr	r3, [sp, #16]
    ab2e:	2b00      	cmp	r3, #0
    ab30:	f47f af43 	bne.w	a9ba <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    ab34:	4620      	mov	r0, r4
}
    ab36:	b009      	add	sp, #36	; 0x24
    ab38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    ab3c:	f00c baed 	b.w	1711a <log_output_flush>
		print_formatted(output, "%s", log_color);
    ab40:	4620      	mov	r0, r4
    ab42:	4a05      	ldr	r2, [pc, #20]	; (ab58 <log_output_process+0x260>)
    ab44:	4905      	ldr	r1, [pc, #20]	; (ab5c <log_output_process+0x264>)
    ab46:	f7ff feb7 	bl	a8b8 <print_formatted>
}
    ab4a:	e739      	b.n	a9c0 <log_output_process+0xc8>
    ab4c:	0001be87 	.word	0x0001be87
    ab50:	0001be8b 	.word	0x0001be8b
    ab54:	0001b488 	.word	0x0001b488
    ab58:	0001be82 	.word	0x0001be82
    ab5c:	0001ca61 	.word	0x0001ca61
    ab60:	0001b49c 	.word	0x0001b49c
    ab64:	0001beb0 	.word	0x0001beb0
    ab68:	0001beb6 	.word	0x0001beb6
    ab6c:	0001beba 	.word	0x0001beba
    ab70:	20009724 	.word	0x20009724
    ab74:	20009720 	.word	0x20009720
    ab78:	0001be94 	.word	0x0001be94
    ab7c:	00017163 	.word	0x00017163
    ab80:	00017135 	.word	0x00017135
    ab84:	0001710d 	.word	0x0001710d
    ab88:	0001dca7 	.word	0x0001dca7
    ab8c:	0001bebf 	.word	0x0001bebf
    ab90:	0001bec5 	.word	0x0001bec5
    ab94:	0001bec7 	.word	0x0001bec7
    ab98:	0001dca5 	.word	0x0001dca5

0000ab9c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    ab9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    aba0:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    aba2:	684b      	ldr	r3, [r1, #4]
    aba4:	4605      	mov	r5, r0
    aba6:	460c      	mov	r4, r1
    aba8:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    abaa:	688e      	ldr	r6, [r1, #8]
    abac:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
    abae:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    abb2:	b15b      	cbz	r3, abcc <log_output_msg_process+0x30>
    abb4:	4a13      	ldr	r2, [pc, #76]	; (ac04 <log_output_msg_process+0x68>)
    abb6:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    abb8:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    abbc:	2900      	cmp	r1, #0
    abbe:	db1f      	blt.n	ac00 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    abc0:	7820      	ldrb	r0, [r4, #0]
    abc2:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    abc6:	f7ff fd8b 	bl	a6e0 <log_source_name_get>
    abca:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    abcc:	4621      	mov	r1, r4
    abce:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
    abd2:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    abd4:	f3c2 224a 	ubfx	r2, r2, #9, #11
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    abd8:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    abda:	eb01 0402 	add.w	r4, r1, r2
    abde:	bf08      	it	eq
    abe0:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
    abe2:	f3c0 100b 	ubfx	r0, r0, #4, #12
    abe6:	e9cd 0803 	strd	r0, r8, [sp, #12]
    abea:	e9cd 1401 	strd	r1, r4, [sp, #4]
    abee:	2200      	movs	r2, #0
    abf0:	4631      	mov	r1, r6
    abf2:	4628      	mov	r0, r5
    abf4:	9700      	str	r7, [sp, #0]
    abf6:	f7ff fe7f 	bl	a8f8 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    abfa:	b006      	add	sp, #24
    abfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    ac00:	2300      	movs	r3, #0
    ac02:	e7e3      	b.n	abcc <log_output_msg_process+0x30>
    ac04:	0001b1a0 	.word	0x0001b1a0

0000ac08 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    ac08:	f242 730f 	movw	r3, #9999	; 0x270f
{
    ac0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    ac0e:	428b      	cmp	r3, r1
    ac10:	bf28      	it	cs
    ac12:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    ac14:	6805      	ldr	r5, [r0, #0]
{
    ac16:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    ac18:	2105      	movs	r1, #5
    ac1a:	4668      	mov	r0, sp
    ac1c:	4a0d      	ldr	r2, [pc, #52]	; (ac54 <log_output_dropped_process+0x4c>)
    ac1e:	f00b fa9e 	bl	1615e <snprintk>
    ac22:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    ac24:	6863      	ldr	r3, [r4, #4]
    ac26:	4628      	mov	r0, r5
    ac28:	220b      	movs	r2, #11
    ac2a:	685b      	ldr	r3, [r3, #4]
    ac2c:	490a      	ldr	r1, [pc, #40]	; (ac58 <log_output_dropped_process+0x50>)
    ac2e:	f00c fa60 	bl	170f2 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    ac32:	6863      	ldr	r3, [r4, #4]
    ac34:	4632      	mov	r2, r6
    ac36:	4669      	mov	r1, sp
    ac38:	4628      	mov	r0, r5
    ac3a:	685b      	ldr	r3, [r3, #4]
    ac3c:	f00c fa59 	bl	170f2 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    ac40:	6863      	ldr	r3, [r4, #4]
    ac42:	221b      	movs	r2, #27
    ac44:	4628      	mov	r0, r5
    ac46:	685b      	ldr	r3, [r3, #4]
    ac48:	4904      	ldr	r1, [pc, #16]	; (ac5c <log_output_dropped_process+0x54>)
    ac4a:	f00c fa52 	bl	170f2 <buffer_write>
		     output->control_block->ctx);
}
    ac4e:	b002      	add	sp, #8
    ac50:	bd70      	pop	{r4, r5, r6, pc}
    ac52:	bf00      	nop
    ac54:	0001c5fc 	.word	0x0001c5fc
    ac58:	0001bee6 	.word	0x0001bee6
    ac5c:	0001beca 	.word	0x0001beca

0000ac60 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    ac60:	2100      	movs	r1, #0
    ac62:	2301      	movs	r3, #1
    ac64:	4a06      	ldr	r2, [pc, #24]	; (ac80 <log_output_timestamp_freq_set+0x20>)
    ac66:	4290      	cmp	r0, r2
    ac68:	d806      	bhi.n	ac78 <log_output_timestamp_freq_set+0x18>
    ac6a:	4a06      	ldr	r2, [pc, #24]	; (ac84 <log_output_timestamp_freq_set+0x24>)
    ac6c:	b901      	cbnz	r1, ac70 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    ac6e:	2301      	movs	r3, #1
    ac70:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    ac72:	4b05      	ldr	r3, [pc, #20]	; (ac88 <log_output_timestamp_freq_set+0x28>)
    ac74:	6018      	str	r0, [r3, #0]
}
    ac76:	4770      	bx	lr
		timestamp_div *= 2U;
    ac78:	2101      	movs	r1, #1
		frequency /= 2U;
    ac7a:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    ac7c:	005b      	lsls	r3, r3, #1
    ac7e:	e7f2      	b.n	ac66 <log_output_timestamp_freq_set+0x6>
    ac80:	000f4240 	.word	0x000f4240
    ac84:	20009720 	.word	0x20009720
    ac88:	20009724 	.word	0x20009724

0000ac8c <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    ac8c:	4b01      	ldr	r3, [pc, #4]	; (ac94 <format_set+0x8>)
	return 0;
}
    ac8e:	2000      	movs	r0, #0
	log_format_current = log_type;
    ac90:	6019      	str	r1, [r3, #0]
}
    ac92:	4770      	bx	lr
    ac94:	2000973c 	.word	0x2000973c

0000ac98 <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
    ac98:	2201      	movs	r2, #1
    ac9a:	4b02      	ldr	r3, [pc, #8]	; (aca4 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    ac9c:	4802      	ldr	r0, [pc, #8]	; (aca8 <panic+0x10>)
    ac9e:	701a      	strb	r2, [r3, #0]
    aca0:	f00c ba3b 	b.w	1711a <log_output_flush>
    aca4:	20009b3d 	.word	0x20009b3d
    aca8:	0001b4cc 	.word	0x0001b4cc

0000acac <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    acac:	4801      	ldr	r0, [pc, #4]	; (acb4 <dropped+0x8>)
    acae:	f7ff bfab 	b.w	ac08 <log_output_dropped_process>
    acb2:	bf00      	nop
    acb4:	0001b4cc 	.word	0x0001b4cc

0000acb8 <process>:
{
    acb8:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    acba:	4b06      	ldr	r3, [pc, #24]	; (acd4 <process+0x1c>)
{
    acbc:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    acbe:	6818      	ldr	r0, [r3, #0]
    acc0:	f7ff fb54 	bl	a36c <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    acc4:	4621      	mov	r1, r4
}
    acc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    acca:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    accc:	220f      	movs	r2, #15
    acce:	4802      	ldr	r0, [pc, #8]	; (acd8 <process+0x20>)
    acd0:	4718      	bx	r3
    acd2:	bf00      	nop
    acd4:	2000973c 	.word	0x2000973c
    acd8:	0001b4cc 	.word	0x0001b4cc

0000acdc <char_out>:
{
    acdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    acde:	460d      	mov	r5, r1
    ace0:	4604      	mov	r4, r0
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    ace2:	4f06      	ldr	r7, [pc, #24]	; (acfc <char_out+0x20>)
    ace4:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    ace6:	42b4      	cmp	r4, r6
    ace8:	d101      	bne.n	acee <char_out+0x12>
}
    acea:	4628      	mov	r0, r5
    acec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    acee:	f814 1b01 	ldrb.w	r1, [r4], #1
    acf2:	68bb      	ldr	r3, [r7, #8]
    acf4:	4801      	ldr	r0, [pc, #4]	; (acfc <char_out+0x20>)
    acf6:	685b      	ldr	r3, [r3, #4]
    acf8:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    acfa:	e7f4      	b.n	ace6 <char_out+0xa>
    acfc:	0001ae94 	.word	0x0001ae94

0000ad00 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    ad00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ad04:	4605      	mov	r5, r0
	__asm__ volatile(
    ad06:	f04f 0320 	mov.w	r3, #32
    ad0a:	f3ef 8611 	mrs	r6, BASEPRI
    ad0e:	f383 8812 	msr	BASEPRI_MAX, r3
    ad12:	f3bf 8f6f 	isb	sy
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    ad16:	f04f 090c 	mov.w	r9, #12
	return list->head;
    ad1a:	4b0d      	ldr	r3, [pc, #52]	; (ad50 <pm_state_notify+0x50>)
    ad1c:	4f0d      	ldr	r7, [pc, #52]	; (ad54 <pm_state_notify+0x54>)
    ad1e:	681c      	ldr	r4, [r3, #0]
    ad20:	f8df 8034 	ldr.w	r8, [pc, #52]	; ad58 <pm_state_notify+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    ad24:	b92c      	cbnz	r4, ad32 <pm_state_notify+0x32>
	__asm__ volatile(
    ad26:	f386 8811 	msr	BASEPRI, r6
    ad2a:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    ad2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    ad32:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    ad36:	2d00      	cmp	r5, #0
    ad38:	bf18      	it	ne
    ad3a:	4613      	movne	r3, r2
		if (callback) {
    ad3c:	b12b      	cbz	r3, ad4a <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    ad3e:	f898 2010 	ldrb.w	r2, [r8, #16]
    ad42:	fb09 f202 	mul.w	r2, r9, r2
    ad46:	5cb8      	ldrb	r0, [r7, r2]
    ad48:	4798      	blx	r3
	return node->next;
    ad4a:	6824      	ldr	r4, [r4, #0]
    ad4c:	e7ea      	b.n	ad24 <pm_state_notify+0x24>
    ad4e:	bf00      	nop
    ad50:	20009758 	.word	0x20009758
    ad54:	2000974c 	.word	0x2000974c
    ad58:	20009ae8 	.word	0x20009ae8

0000ad5c <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    ad5c:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    ad5e:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    ad60:	4b16      	ldr	r3, [pc, #88]	; (adbc <pm_system_resume+0x60>)
    ad62:	7c1c      	ldrb	r4, [r3, #16]
    ad64:	f004 031f 	and.w	r3, r4, #31
    ad68:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ad6a:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ad6c:	4b14      	ldr	r3, [pc, #80]	; (adc0 <pm_system_resume+0x64>)
    ad6e:	0961      	lsrs	r1, r4, #5
    ad70:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    ad74:	e8d3 1fef 	ldaex	r1, [r3]
    ad78:	ea01 0500 	and.w	r5, r1, r0
    ad7c:	e8c3 5fe6 	stlex	r6, r5, [r3]
    ad80:	2e00      	cmp	r6, #0
    ad82:	d1f7      	bne.n	ad74 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    ad84:	420a      	tst	r2, r1
    ad86:	d013      	beq.n	adb0 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
    ad88:	4b0e      	ldr	r3, [pc, #56]	; (adc4 <pm_system_resume+0x68>)
    ad8a:	4d0f      	ldr	r5, [pc, #60]	; (adc8 <pm_system_resume+0x6c>)
    ad8c:	b18b      	cbz	r3, adb2 <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
    ad8e:	230c      	movs	r3, #12
    ad90:	4363      	muls	r3, r4
    ad92:	18ea      	adds	r2, r5, r3
    ad94:	7851      	ldrb	r1, [r2, #1]
    ad96:	5ce8      	ldrb	r0, [r5, r3]
    ad98:	f00b ff9d 	bl	16cd6 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    ad9c:	2000      	movs	r0, #0
    ad9e:	f7ff ffaf 	bl	ad00 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    ada2:	230c      	movs	r3, #12
    ada4:	435c      	muls	r4, r3
    ada6:	2300      	movs	r3, #0
    ada8:	192a      	adds	r2, r5, r4
    adaa:	512b      	str	r3, [r5, r4]
    adac:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    adb0:	bd70      	pop	{r4, r5, r6, pc}
    adb2:	f383 8811 	msr	BASEPRI, r3
    adb6:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    adba:	e7ef      	b.n	ad9c <pm_system_resume+0x40>
    adbc:	20009ae8 	.word	0x20009ae8
    adc0:	20009760 	.word	0x20009760
    adc4:	00016cd7 	.word	0x00016cd7
    adc8:	2000974c 	.word	0x2000974c

0000adcc <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    adcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    add0:	4b32      	ldr	r3, [pc, #200]	; (ae9c <pm_system_suspend+0xd0>)
{
    add2:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    add4:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    add6:	f04f 0320 	mov.w	r3, #32
    adda:	f3ef 8811 	mrs	r8, BASEPRI
    adde:	f383 8812 	msr	BASEPRI_MAX, r3
    ade2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    ade6:	240c      	movs	r4, #12
    ade8:	436c      	muls	r4, r5
    adea:	4b2d      	ldr	r3, [pc, #180]	; (aea0 <pm_system_suspend+0xd4>)
    adec:	4e2d      	ldr	r6, [pc, #180]	; (aea4 <pm_system_suspend+0xd8>)
    adee:	5d19      	ldrb	r1, [r3, r4]
    adf0:	191a      	adds	r2, r3, r4
    adf2:	2900      	cmp	r1, #0
    adf4:	d047      	beq.n	ae86 <pm_system_suspend+0xba>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    adf6:	ca07      	ldmia	r2, {r0, r1, r2}
    adf8:	eb06 0c04 	add.w	ip, r6, r4
    adfc:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    ae00:	2200      	movs	r2, #0
    ae02:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    ae04:	f388 8811 	msr	BASEPRI, r8
    ae08:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    ae0c:	230c      	movs	r3, #12
    ae0e:	436b      	muls	r3, r5
    ae10:	5cf0      	ldrb	r0, [r6, r3]
    ae12:	18f2      	adds	r2, r6, r3
    ae14:	b3a8      	cbz	r0, ae82 <pm_system_suspend+0xb6>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    ae16:	1c7b      	adds	r3, r7, #1
    ae18:	d010      	beq.n	ae3c <pm_system_suspend+0x70>
			return (uint32_t)((t * to_hz + off) / from_hz);
    ae1a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    ae1e:	2100      	movs	r1, #0
    ae20:	f8d2 c008 	ldr.w	ip, [r2, #8]
    ae24:	4c20      	ldr	r4, [pc, #128]	; (aea8 <pm_system_suspend+0xdc>)
    ae26:	2300      	movs	r3, #0
    ae28:	fbec 4100 	umlal	r4, r1, ip, r0
    ae2c:	4a1f      	ldr	r2, [pc, #124]	; (aeac <pm_system_suspend+0xe0>)
    ae2e:	4620      	mov	r0, r4
    ae30:	f7fd f990 	bl	8154 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    ae34:	2101      	movs	r1, #1
    ae36:	1a38      	subs	r0, r7, r0
    ae38:	f008 f820 	bl	12e7c <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    ae3c:	f00a fd18 	bl	15870 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    ae40:	2001      	movs	r0, #1
    ae42:	f7ff ff5d 	bl	ad00 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ae46:	4b1a      	ldr	r3, [pc, #104]	; (aeb0 <pm_system_suspend+0xe4>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    ae48:	096a      	lsrs	r2, r5, #5
    ae4a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    ae4e:	2201      	movs	r2, #1
    ae50:	f005 011f 	and.w	r1, r5, #31
    ae54:	408a      	lsls	r2, r1
    ae56:	e8d3 0fef 	ldaex	r0, [r3]
    ae5a:	4310      	orrs	r0, r2
    ae5c:	e8c3 0fe1 	stlex	r1, r0, [r3]
    ae60:	2900      	cmp	r1, #0
    ae62:	d1f8      	bne.n	ae56 <pm_system_suspend+0x8a>
	if (pm_state_set != NULL) {
    ae64:	4b13      	ldr	r3, [pc, #76]	; (aeb4 <pm_system_suspend+0xe8>)
    ae66:	b13b      	cbz	r3, ae78 <pm_system_suspend+0xac>
		pm_state_set(info->state, info->substate_id);
    ae68:	230c      	movs	r3, #12
    ae6a:	fb03 f005 	mul.w	r0, r3, r5
    ae6e:	1833      	adds	r3, r6, r0
    ae70:	7859      	ldrb	r1, [r3, #1]
    ae72:	5c30      	ldrb	r0, [r6, r0]
    ae74:	f00b ff23 	bl	16cbe <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    ae78:	f7ff ff70 	bl	ad5c <pm_system_resume>
	k_sched_unlock();
    ae7c:	f00a fd0c 	bl	15898 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    ae80:	2001      	movs	r0, #1
}
    ae82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    ae86:	4601      	mov	r1, r0
    ae88:	4628      	mov	r0, r5
    ae8a:	f000 f815 	bl	aeb8 <pm_policy_next_state>
		if (info != NULL) {
    ae8e:	2800      	cmp	r0, #0
    ae90:	d0b8      	beq.n	ae04 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    ae92:	c807      	ldmia	r0, {r0, r1, r2}
    ae94:	4434      	add	r4, r6
    ae96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ae9a:	e7b3      	b.n	ae04 <pm_system_suspend+0x38>
    ae9c:	20009ae8 	.word	0x20009ae8
    aea0:	20009740 	.word	0x20009740
    aea4:	2000974c 	.word	0x2000974c
    aea8:	000f423f 	.word	0x000f423f
    aeac:	000f4240 	.word	0x000f4240
    aeb0:	20009760 	.word	0x20009760
    aeb4:	00016cbf 	.word	0x00016cbf

0000aeb8 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    aeb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aebc:	b085      	sub	sp, #20
    aebe:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    aec0:	a903      	add	r1, sp, #12
    aec2:	f000 f843 	bl	af4c <pm_state_cpu_get_all>
    aec6:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    aeca:	4604      	mov	r4, r0
    aecc:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    aed0:	4b1b      	ldr	r3, [pc, #108]	; (af40 <pm_policy_next_state+0x88>)
    aed2:	9d03      	ldr	r5, [sp, #12]
    aed4:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    aed8:	1e43      	subs	r3, r0, #1
    aeda:	b21b      	sxth	r3, r3
    aedc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    aee0:	f8df 8060 	ldr.w	r8, [pc, #96]	; af44 <pm_policy_next_state+0x8c>
    aee4:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    aee8:	b924      	cbnz	r4, aef4 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    aeea:	46a1      	mov	r9, r4
}
    aeec:	4648      	mov	r0, r9
    aeee:	b005      	add	sp, #20
    aef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aef4:	46c4      	mov	ip, r8
    aef6:	4659      	mov	r1, fp
    aef8:	6868      	ldr	r0, [r5, #4]
    aefa:	2300      	movs	r3, #0
    aefc:	fbe0 c107 	umlal	ip, r1, r0, r7
    af00:	4a11      	ldr	r2, [pc, #68]	; (af48 <pm_policy_next_state+0x90>)
    af02:	4660      	mov	r0, ip
    af04:	f7fd f926 	bl	8154 <__aeabi_uldivmod>
    af08:	46c4      	mov	ip, r8
    af0a:	4659      	mov	r1, fp
    af0c:	9001      	str	r0, [sp, #4]
    af0e:	68a8      	ldr	r0, [r5, #8]
    af10:	2300      	movs	r3, #0
    af12:	fbe0 c107 	umlal	ip, r1, r0, r7
    af16:	4a0c      	ldr	r2, [pc, #48]	; (af48 <pm_policy_next_state+0x90>)
    af18:	4660      	mov	r0, ip
    af1a:	f7fd f91b 	bl	8154 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    af1e:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    af22:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    af24:	d001      	beq.n	af2a <pm_policy_next_state+0x72>
    af26:	4582      	cmp	sl, r0
    af28:	d905      	bls.n	af36 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    af2a:	1c73      	adds	r3, r6, #1
    af2c:	d0de      	beq.n	aeec <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    af2e:	9b01      	ldr	r3, [sp, #4]
    af30:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    af32:	42b0      	cmp	r0, r6
    af34:	d9da      	bls.n	aeec <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    af36:	3c01      	subs	r4, #1
    af38:	b2a4      	uxth	r4, r4
    af3a:	3d0c      	subs	r5, #12
    af3c:	e7d4      	b.n	aee8 <pm_policy_next_state+0x30>
    af3e:	bf00      	nop
    af40:	20008210 	.word	0x20008210
    af44:	000f423f 	.word	0x000f423f
    af48:	000f4240 	.word	0x000f4240

0000af4c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    af4c:	b908      	cbnz	r0, af52 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    af4e:	4b02      	ldr	r3, [pc, #8]	; (af58 <pm_state_cpu_get_all+0xc>)
    af50:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    af52:	2000      	movs	r0, #0
    af54:	4770      	bx	lr
    af56:	bf00      	nop
    af58:	0001b4dc 	.word	0x0001b4dc

0000af5c <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    af5c:	4904      	ldr	r1, [pc, #16]	; (af70 <sub_bytes+0x14>)
    af5e:	1e43      	subs	r3, r0, #1
    af60:	300f      	adds	r0, #15
    af62:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    af66:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
    af68:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
    af6a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    af6c:	d1f9      	bne.n	af62 <sub_bytes+0x6>
	}
}
    af6e:	4770      	bx	lr
    af70:	0001bf2f 	.word	0x0001bf2f

0000af74 <tc_aes128_set_encrypt_key>:
{
    af74:	b5f0      	push	{r4, r5, r6, r7, lr}
    af76:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
    af78:	4e26      	ldr	r6, [pc, #152]	; (b014 <tc_aes128_set_encrypt_key+0xa0>)
{
    af7a:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    af7c:	ad01      	add	r5, sp, #4
{
    af7e:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    af80:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    af82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    af84:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    af86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    af88:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    af8c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    af90:	4638      	mov	r0, r7
    af92:	2f00      	cmp	r7, #0
    af94:	d039      	beq.n	b00a <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
    af96:	2c00      	cmp	r4, #0
    af98:	d039      	beq.n	b00e <tc_aes128_set_encrypt_key+0x9a>
    af9a:	1f38      	subs	r0, r7, #4
    af9c:	4602      	mov	r2, r0
    af9e:	4621      	mov	r1, r4
    afa0:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    afa2:	784b      	ldrb	r3, [r1, #1]
    afa4:	780d      	ldrb	r5, [r1, #0]
    afa6:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    afa8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    afac:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
    afae:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    afb0:	432b      	orrs	r3, r5
    afb2:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
    afb6:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    afb8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    afbc:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    afc0:	d1ef      	bne.n	afa2 <tc_aes128_set_encrypt_key+0x2e>
    afc2:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
    afc4:	4c14      	ldr	r4, [pc, #80]	; (b018 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
    afc6:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    afc8:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    afca:	d116      	bne.n	affa <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    afcc:	f3c3 4207 	ubfx	r2, r3, #16, #8
    afd0:	5ca5      	ldrb	r5, [r4, r2]
    afd2:	0e1a      	lsrs	r2, r3, #24
    afd4:	5ca2      	ldrb	r2, [r4, r2]
    afd6:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    afda:	f3c3 2507 	ubfx	r5, r3, #8, #8
    afde:	5d65      	ldrb	r5, [r4, r5]
    afe0:	b2db      	uxtb	r3, r3
    afe2:	5ce3      	ldrb	r3, [r4, r3]
    afe4:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    afe8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    afec:	f021 0303 	bic.w	r3, r1, #3
    aff0:	3330      	adds	r3, #48	; 0x30
    aff2:	446b      	add	r3, sp
    aff4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    aff8:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    affa:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    affe:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    b000:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    b002:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    b004:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    b006:	d1de      	bne.n	afc6 <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
    b008:	2001      	movs	r0, #1
}
    b00a:	b00d      	add	sp, #52	; 0x34
    b00c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    b00e:	4620      	mov	r0, r4
    b010:	e7fb      	b.n	b00a <tc_aes128_set_encrypt_key+0x96>
    b012:	bf00      	nop
    b014:	0001b2c8 	.word	0x0001b2c8
    b018:	0001bf2f 	.word	0x0001bf2f

0000b01c <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
    b01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    b020:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    b022:	6803      	ldr	r3, [r0, #0]
{
    b024:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    b026:	9302      	str	r3, [sp, #8]
    b028:	6843      	ldr	r3, [r0, #4]
    b02a:	f8df a1bc 	ldr.w	sl, [pc, #444]	; b1e8 <compress+0x1cc>
    b02e:	9303      	str	r3, [sp, #12]
    b030:	6883      	ldr	r3, [r0, #8]
    b032:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
    b036:	9304      	str	r3, [sp, #16]
    b038:	68c3      	ldr	r3, [r0, #12]
    b03a:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    b03c:	6903      	ldr	r3, [r0, #16]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    b03e:	e9dd be04 	ldrd	fp, lr, [sp, #16]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    b042:	9306      	str	r3, [sp, #24]
    b044:	6943      	ldr	r3, [r0, #20]
    b046:	9307      	str	r3, [sp, #28]
    b048:	6983      	ldr	r3, [r0, #24]
    b04a:	e9dd 2c06 	ldrd	r2, ip, [sp, #24]
    b04e:	9308      	str	r3, [sp, #32]
    b050:	69c3      	ldr	r3, [r0, #28]
    b052:	4698      	mov	r8, r3
    b054:	9309      	str	r3, [sp, #36]	; 0x24
    b056:	9b08      	ldr	r3, [sp, #32]
    b058:	9300      	str	r3, [sp, #0]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
    b05a:	59cd      	ldr	r5, [r1, r7]
		t1 = work_space[i] = n;
    b05c:	ab0c      	add	r3, sp, #48	; 0x30
    b05e:	ba2d      	rev	r5, r5
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    b060:	f85a 9b04 	ldr.w	r9, [sl], #4
		t1 = work_space[i] = n;
    b064:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
    b066:	ea4f 23f2 	mov.w	r3, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    b06a:	44a9      	add	r9, r5
    b06c:	ea83 13b2 	eor.w	r3, r3, r2, ror #6
    b070:	9d00      	ldr	r5, [sp, #0]
    b072:	ea83 6372 	eor.w	r3, r3, r2, ror #25
    b076:	444b      	add	r3, r9
    b078:	ea25 0502 	bic.w	r5, r5, r2
    b07c:	ea02 090c 	and.w	r9, r2, ip
    b080:	ea85 0509 	eor.w	r5, r5, r9
    b084:	442b      	add	r3, r5
    b086:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
    b088:	ea86 050b 	eor.w	r5, r6, fp
	return (((a) >> n) | ((a) << (32 - n)));
    b08c:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    b090:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    b094:	4025      	ands	r5, r4
    b096:	ea06 090b 	and.w	r9, r6, fp
    b09a:	ea85 0509 	eor.w	r5, r5, r9
    b09e:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
	for (i = 0; i < 16; ++i) {
    b0a2:	3704      	adds	r7, #4
		t2 = Sigma0(a) + Maj(a, b, c);
    b0a4:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
    b0a6:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
    b0a8:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
    b0ac:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
    b0ae:	46de      	mov	lr, fp
    b0b0:	f8dd 8000 	ldr.w	r8, [sp]
    b0b4:	f040 8088 	bne.w	b1c8 <compress+0x1ac>
    b0b8:	f04f 0a10 	mov.w	sl, #16
    b0bc:	494b      	ldr	r1, [pc, #300]	; (b1ec <compress+0x1d0>)
    b0be:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    b0c0:	4651      	mov	r1, sl
    b0c2:	f10a 0a01 	add.w	sl, sl, #1
    b0c6:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    b0ca:	f00a 070f 	and.w	r7, sl, #15
    b0ce:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    b0d2:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    b0d6:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
    b0da:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
    b0de:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
    b0e0:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
    b0e4:	f101 070e 	add.w	r7, r1, #14
    b0e8:	f007 070f 	and.w	r7, r7, #15
    b0ec:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    b0f0:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    b0f4:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
    b0f6:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
    b0fa:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
    b0fe:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    b102:	f001 010f 	and.w	r1, r1, #15
    b106:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    b10a:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    b10e:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
    b112:	f859 ec40 	ldr.w	lr, [r9, #-64]
    b116:	f851 1c40 	ldr.w	r1, [r1, #-64]
	for ( ; i < 64; ++i) {
    b11a:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    b11e:	4471      	add	r1, lr
		s0 = sigma0(s0);
    b120:	f8dd e004 	ldr.w	lr, [sp, #4]
    b124:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
    b128:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    b12c:	4441      	add	r1, r8
		s1 = sigma1(s1);
    b12e:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    b132:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    b134:	ea05 0802 	and.w	r8, r5, r2
	return (((a) >> n) | ((a) << (32 - n)));
    b138:	ea4f 2ef5 	mov.w	lr, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    b13c:	ea2c 0705 	bic.w	r7, ip, r5
    b140:	ea87 0708 	eor.w	r7, r7, r8
    b144:	ea8e 1eb5 	eor.w	lr, lr, r5, ror #6
    b148:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    b14c:	ea8e 6e75 	eor.w	lr, lr, r5, ror #25
    b150:	4477      	add	r7, lr
    b152:	f858 ef04 	ldr.w	lr, [r8, #4]!
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    b156:	f849 1c40 	str.w	r1, [r9, #-64]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    b15a:	4477      	add	r7, lr
    b15c:	440f      	add	r7, r1
    b15e:	9900      	ldr	r1, [sp, #0]
	return (((a) >> n) | ((a) << (32 - n)));
    b160:	ea4f 3e73 	mov.w	lr, r3, ror #13
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    b164:	4439      	add	r1, r7
		t2 = Sigma0(a) + Maj(a, b, c);
    b166:	ea84 0706 	eor.w	r7, r4, r6
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    b16a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
		t2 = Sigma0(a) + Maj(a, b, c);
    b16e:	ea8e 0eb3 	eor.w	lr, lr, r3, ror #2
    b172:	ea07 0703 	and.w	r7, r7, r3
    b176:	ea04 0806 	and.w	r8, r4, r6
    b17a:	ea8e 5eb3 	eor.w	lr, lr, r3, ror #22
    b17e:	ea87 0708 	eor.w	r7, r7, r8
    b182:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
		d = c; c = b; b = a; a = t1 + t2;
    b184:	440f      	add	r7, r1
		h = g; g = f; f = e; e = d + t1;
    b186:	eb01 0e0b 	add.w	lr, r1, fp
	for ( ; i < 64; ++i) {
    b18a:	f8cd c000 	str.w	ip, [sp]
    b18e:	46b3      	mov	fp, r6
    b190:	d122      	bne.n	b1d8 <compress+0x1bc>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
    b192:	9902      	ldr	r1, [sp, #8]
    b194:	4439      	add	r1, r7
    b196:	6001      	str	r1, [r0, #0]
    b198:	9903      	ldr	r1, [sp, #12]
    b19a:	4419      	add	r1, r3
    b19c:	9b04      	ldr	r3, [sp, #16]
    b19e:	6041      	str	r1, [r0, #4]
    b1a0:	4423      	add	r3, r4
    b1a2:	6083      	str	r3, [r0, #8]
    b1a4:	9b05      	ldr	r3, [sp, #20]
    b1a6:	4433      	add	r3, r6
    b1a8:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    b1aa:	9b06      	ldr	r3, [sp, #24]
    b1ac:	4473      	add	r3, lr
    b1ae:	6103      	str	r3, [r0, #16]
    b1b0:	9b07      	ldr	r3, [sp, #28]
    b1b2:	442b      	add	r3, r5
    b1b4:	6143      	str	r3, [r0, #20]
    b1b6:	9b08      	ldr	r3, [sp, #32]
    b1b8:	4413      	add	r3, r2
    b1ba:	6183      	str	r3, [r0, #24]
    b1bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b1be:	4463      	add	r3, ip
    b1c0:	61c3      	str	r3, [r0, #28]
}
    b1c2:	b01d      	add	sp, #116	; 0x74
    b1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b1c8:	46b3      	mov	fp, r6
    b1ca:	f8cd c000 	str.w	ip, [sp]
    b1ce:	4626      	mov	r6, r4
    b1d0:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
    b1d2:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    b1d4:	462a      	mov	r2, r5
    b1d6:	e740      	b.n	b05a <compress+0x3e>
    b1d8:	4694      	mov	ip, r2
    b1da:	4626      	mov	r6, r4
    b1dc:	462a      	mov	r2, r5
    b1de:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    b1e0:	4675      	mov	r5, lr
		d = c; c = b; b = a; a = t1 + t2;
    b1e2:	463b      	mov	r3, r7
    b1e4:	e76c      	b.n	b0c0 <compress+0xa4>
    b1e6:	bf00      	nop
    b1e8:	0001b4dc 	.word	0x0001b4dc
    b1ec:	0001b518 	.word	0x0001b518

0000b1f0 <tc_sha256_init>:
{
    b1f0:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
    b1f2:	4604      	mov	r4, r0
    b1f4:	b1c8      	cbz	r0, b22a <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
    b1f6:	2270      	movs	r2, #112	; 0x70
    b1f8:	2100      	movs	r1, #0
    b1fa:	f00b ffce 	bl	1719a <_set>
	s->iv[1] = 0xbb67ae85;
    b1fe:	4b0b      	ldr	r3, [pc, #44]	; (b22c <tc_sha256_init+0x3c>)
    b200:	4a0b      	ldr	r2, [pc, #44]	; (b230 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
    b202:	490c      	ldr	r1, [pc, #48]	; (b234 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
    b204:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
    b208:	4b0b      	ldr	r3, [pc, #44]	; (b238 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
    b20a:	480c      	ldr	r0, [pc, #48]	; (b23c <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
    b20c:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
    b210:	4b0b      	ldr	r3, [pc, #44]	; (b240 <tc_sha256_init+0x50>)
    b212:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
    b216:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
    b218:	4b0a      	ldr	r3, [pc, #40]	; (b244 <tc_sha256_init+0x54>)
    b21a:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
    b21c:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    b220:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    b224:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    b228:	61e3      	str	r3, [r4, #28]
}
    b22a:	bd10      	pop	{r4, pc}
    b22c:	bb67ae85 	.word	0xbb67ae85
    b230:	6a09e667 	.word	0x6a09e667
    b234:	3c6ef372 	.word	0x3c6ef372
    b238:	a54ff53a 	.word	0xa54ff53a
    b23c:	510e527f 	.word	0x510e527f
    b240:	9b05688c 	.word	0x9b05688c
    b244:	1f83d9ab 	.word	0x1f83d9ab

0000b248 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    b248:	4901      	ldr	r1, [pc, #4]	; (b250 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    b24a:	2210      	movs	r2, #16
	str	r2, [r1]
    b24c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    b24e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    b250:	e000ed10 	.word	0xe000ed10

0000b254 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    b254:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    b256:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    b258:	f380 8811 	msr	BASEPRI, r0
	isb
    b25c:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    b260:	b501      	push	{r0, lr}
    b262:	f7fe faf3 	bl	984c <z_arm_on_enter_cpu_idle>
    b266:	2800      	cmp	r0, #0
    b268:	d002      	beq.n	b270 <_skip_0>
    b26a:	f3bf 8f4f 	dsb	sy
    b26e:	bf30      	wfi

0000b270 <_skip_0>:
    b270:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    b274:	b662      	cpsie	i
	isb
    b276:	f3bf 8f6f 	isb	sy

	bx	lr
    b27a:	4770      	bx	lr

0000b27c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    b27c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    b27e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    b280:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    b284:	b501      	push	{r0, lr}
    b286:	f7fe fae1 	bl	984c <z_arm_on_enter_cpu_idle>
    b28a:	2800      	cmp	r0, #0
    b28c:	d002      	beq.n	b294 <_skip_1>
    b28e:	f3bf 8f4f 	dsb	sy
    b292:	bf20      	wfe

0000b294 <_skip_1>:
    b294:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	msr	BASEPRI, r0
    b298:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    b29c:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    b29e:	4770      	bx	lr

0000b2a0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    b2a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b2a4:	4681      	mov	r9, r0

	if (esf != NULL) {
    b2a6:	460c      	mov	r4, r1
{
    b2a8:	af00      	add	r7, sp, #0
	if (esf != NULL) {
    b2aa:	2900      	cmp	r1, #0
    b2ac:	d04c      	beq.n	b348 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    b2ae:	e9d1 1200 	ldrd	r1, r2, [r1]
    b2b2:	466e      	mov	r6, sp
    b2b4:	b08a      	sub	sp, #40	; 0x28
    b2b6:	68a3      	ldr	r3, [r4, #8]
    b2b8:	466d      	mov	r5, sp
    b2ba:	f04f 0a05 	mov.w	sl, #5
    b2be:	46a8      	mov	r8, r5
    b2c0:	4825      	ldr	r0, [pc, #148]	; (b358 <z_arm_fatal_error+0xb8>)
    b2c2:	e9c5 2307 	strd	r2, r3, [r5, #28]
    b2c6:	e9c5 0105 	strd	r0, r1, [r5, #20]
    b2ca:	f848 af10 	str.w	sl, [r8, #16]!
    b2ce:	2300      	movs	r3, #0
    b2d0:	4642      	mov	r2, r8
    b2d2:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    b2d6:	4821      	ldr	r0, [pc, #132]	; (b35c <z_arm_fatal_error+0xbc>)
    b2d8:	f7ff fa24 	bl	a724 <z_impl_z_log_msg_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    b2dc:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    b2e0:	46b5      	mov	sp, r6
    b2e2:	6963      	ldr	r3, [r4, #20]
    b2e4:	46ad      	mov	sp, r5
    b2e6:	481e      	ldr	r0, [pc, #120]	; (b360 <z_arm_fatal_error+0xc0>)
    b2e8:	e9c5 2307 	strd	r2, r3, [r5, #28]
    b2ec:	e9c5 0105 	strd	r0, r1, [r5, #20]
    b2f0:	f8c5 a010 	str.w	sl, [r5, #16]
    b2f4:	2300      	movs	r3, #0
    b2f6:	4642      	mov	r2, r8
    b2f8:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    b2fc:	4817      	ldr	r0, [pc, #92]	; (b35c <z_arm_fatal_error+0xbc>)
    b2fe:	f7ff fa11 	bl	a724 <z_impl_z_log_msg_static_create>
    b302:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    b304:	b088      	sub	sp, #32
    b306:	69e3      	ldr	r3, [r4, #28]
    b308:	466d      	mov	r5, sp
    b30a:	f04f 0a03 	mov.w	sl, #3
    b30e:	46a8      	mov	r8, r5
    b310:	4a14      	ldr	r2, [pc, #80]	; (b364 <z_arm_fatal_error+0xc4>)
    b312:	e9c5 2305 	strd	r2, r3, [r5, #20]
    b316:	f848 af10 	str.w	sl, [r8, #16]!
    b31a:	2300      	movs	r3, #0
    b31c:	4642      	mov	r2, r8
    b31e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b322:	480e      	ldr	r0, [pc, #56]	; (b35c <z_arm_fatal_error+0xbc>)
    b324:	f7ff f9fe 	bl	a724 <z_impl_z_log_msg_static_create>
    b328:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    b32a:	69a3      	ldr	r3, [r4, #24]
    b32c:	46ad      	mov	sp, r5
    b32e:	4a0e      	ldr	r2, [pc, #56]	; (b368 <z_arm_fatal_error+0xc8>)
    b330:	f8c5 a010 	str.w	sl, [r5, #16]
    b334:	e9c5 2305 	strd	r2, r3, [r5, #20]
    b338:	2300      	movs	r3, #0
    b33a:	4642      	mov	r2, r8
    b33c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b340:	4806      	ldr	r0, [pc, #24]	; (b35c <z_arm_fatal_error+0xbc>)
    b342:	f7ff f9ef 	bl	a724 <z_impl_z_log_msg_static_create>
    b346:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    b348:	4621      	mov	r1, r4
    b34a:	4648      	mov	r0, r9
    b34c:	f009 faae 	bl	148ac <z_fatal_error>
}
    b350:	46bd      	mov	sp, r7
    b352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b356:	bf00      	nop
    b358:	0001c02f 	.word	0x0001c02f
    b35c:	0001b280 	.word	0x0001b280
    b360:	0001c05e 	.word	0x0001c05e
    b364:	0001c08d 	.word	0x0001c08d
    b368:	0001c09c 	.word	0x0001c09c

0000b36c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    b36c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    b36e:	2800      	cmp	r0, #0
    b370:	db07      	blt.n	b382 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b372:	2301      	movs	r3, #1
    b374:	0941      	lsrs	r1, r0, #5
    b376:	4a03      	ldr	r2, [pc, #12]	; (b384 <arch_irq_enable+0x18>)
    b378:	f000 001f 	and.w	r0, r0, #31
    b37c:	4083      	lsls	r3, r0
    b37e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    b382:	4770      	bx	lr
    b384:	e000e100 	.word	0xe000e100

0000b388 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    b388:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    b38a:	2800      	cmp	r0, #0
    b38c:	db0c      	blt.n	b3a8 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b38e:	2201      	movs	r2, #1
    b390:	4906      	ldr	r1, [pc, #24]	; (b3ac <arch_irq_disable+0x24>)
    b392:	0943      	lsrs	r3, r0, #5
    b394:	f000 001f 	and.w	r0, r0, #31
    b398:	4082      	lsls	r2, r0
    b39a:	3320      	adds	r3, #32
    b39c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    b3a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b3a4:	f3bf 8f6f 	isb	sy
}
    b3a8:	4770      	bx	lr
    b3aa:	bf00      	nop
    b3ac:	e000e100 	.word	0xe000e100

0000b3b0 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    b3b0:	4b05      	ldr	r3, [pc, #20]	; (b3c8 <arch_irq_is_enabled+0x18>)
    b3b2:	0942      	lsrs	r2, r0, #5
    b3b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    b3b8:	2301      	movs	r3, #1
    b3ba:	f000 001f 	and.w	r0, r0, #31
    b3be:	fa03 f000 	lsl.w	r0, r3, r0
}
    b3c2:	4010      	ands	r0, r2
    b3c4:	4770      	bx	lr
    b3c6:	bf00      	nop
    b3c8:	e000e100 	.word	0xe000e100

0000b3cc <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    b3cc:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    b3ce:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
    b3d0:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b3d4:	bfac      	ite	ge
    b3d6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b3da:	4b06      	ldrlt	r3, [pc, #24]	; (b3f4 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b3dc:	ea4f 1141 	mov.w	r1, r1, lsl #5
    b3e0:	b2c9      	uxtb	r1, r1
    b3e2:	bfab      	itete	ge
    b3e4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b3e8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b3ec:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b3f0:	5419      	strblt	r1, [r3, r0]
}
    b3f2:	4770      	bx	lr
    b3f4:	e000ed14 	.word	0xe000ed14

0000b3f8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    b3f8:	bf30      	wfi
    b z_SysNmiOnReset
    b3fa:	f7ff bffd 	b.w	b3f8 <z_SysNmiOnReset>
    b3fe:	bf00      	nop

0000b400 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    b400:	4a0b      	ldr	r2, [pc, #44]	; (b430 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    b402:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    b404:	4b0b      	ldr	r3, [pc, #44]	; (b434 <z_arm_prep_c+0x34>)
    b406:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    b40a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    b40c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b410:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    b414:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    b418:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    b41c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    b420:	f009 fb00 	bl	14a24 <z_bss_zero>
	z_data_copy();
    b424:	f00a fb70 	bl	15b08 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    b428:	f000 fbca 	bl	bbc0 <z_arm_interrupt_init>
	z_cstart();
    b42c:	f009 fb3a 	bl	14aa4 <z_cstart>
    b430:	00008000 	.word	0x00008000
    b434:	e000ed00 	.word	0xe000ed00

0000b438 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    b438:	4a09      	ldr	r2, [pc, #36]	; (b460 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    b43a:	490a      	ldr	r1, [pc, #40]	; (b464 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    b43c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    b43e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    b440:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
    b442:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    b444:	4908      	ldr	r1, [pc, #32]	; (b468 <arch_swap+0x30>)
    b446:	684b      	ldr	r3, [r1, #4]
    b448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    b44c:	604b      	str	r3, [r1, #4]
    b44e:	2300      	movs	r3, #0
    b450:	f383 8811 	msr	BASEPRI, r3
    b454:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    b458:	6893      	ldr	r3, [r2, #8]
}
    b45a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    b45c:	4770      	bx	lr
    b45e:	bf00      	nop
    b460:	20009ae8 	.word	0x20009ae8
    b464:	0001bae4 	.word	0x0001bae4
    b468:	e000ed00 	.word	0xe000ed00

0000b46c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    b46c:	4915      	ldr	r1, [pc, #84]	; (b4c4 <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
    b46e:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    b470:	f882 e081 	strb.w	lr, [r2, #129]	; 0x81
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    b474:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    b478:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    b47a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    b47e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    b482:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    b484:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    b488:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    b48c:	4f0e      	ldr	r7, [pc, #56]	; (b4c8 <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    b48e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    b492:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    b494:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    b496:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    b498:	f992 e081 	ldrsb.w	lr, [r2, #129]	; 0x81

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    b49c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    b49e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    b4a0:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    b4a2:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    b4a6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    b4aa:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    b4ae:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    b4b2:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    b4b6:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    b4b8:	f00c fabc 	bl	17a34 <configure_builtin_stack_guard>
    pop {r2, lr}
    b4bc:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    b4c0:	4770      	bx	lr
    b4c2:	0000      	.short	0x0000
    ldr r1, =_kernel
    b4c4:	20009ae8 	.word	0x20009ae8
    ldr v4, =_SCS_ICSR
    b4c8:	e000ed04 	.word	0xe000ed04

0000b4cc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    b4cc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    b4d0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    b4d2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    b4d6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    b4da:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    b4dc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    b4e0:	2902      	cmp	r1, #2
    beq _oops
    b4e2:	d0ff      	beq.n	b4e4 <_oops>

0000b4e4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    b4e4:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    b4e6:	f00c fa96 	bl	17a16 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    b4ea:	bd01      	pop	{r0, pc}

0000b4ec <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    b4ec:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    b4f0:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    b4f2:	490d      	ldr	r1, [pc, #52]	; (b528 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
    b4f4:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    b4f8:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    b4fa:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    b4fe:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    b502:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    b504:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    b508:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    b50c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    b510:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    b514:	2300      	movs	r3, #0
    b516:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
    b518:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    b51c:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    b51e:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
    b520:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    b524:	4770      	bx	lr
    b526:	bf00      	nop
    b528:	00016179 	.word	0x00016179

0000b52c <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    b52c:	4b08      	ldr	r3, [pc, #32]	; (b550 <arch_switch_to_main_thread+0x24>)
    b52e:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    b530:	6e83      	ldr	r3, [r0, #104]	; 0x68
    b532:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    b536:	4610      	mov	r0, r2
    b538:	f381 8809 	msr	PSP, r1
    b53c:	2100      	movs	r1, #0
    b53e:	b663      	cpsie	if
    b540:	f381 8811 	msr	BASEPRI, r1
    b544:	f3bf 8f6f 	isb	sy
    b548:	2200      	movs	r2, #0
    b54a:	2300      	movs	r3, #0
    b54c:	f00a fe14 	bl	16178 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    b550:	20009ae8 	.word	0x20009ae8

0000b554 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    b554:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    b556:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    b558:	4a0b      	ldr	r2, [pc, #44]	; (b588 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    b55a:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    b55c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    b55e:	bf1e      	ittt	ne
	movne	r1, #0
    b560:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    b562:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    b564:	f00e ff2a 	blne	1a3bc <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    b568:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    b56a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    b56e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    b572:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    b576:	4905      	ldr	r1, [pc, #20]	; (b58c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    b578:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    b57a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    b57c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    b57e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    b582:	4903      	ldr	r1, [pc, #12]	; (b590 <_isr_wrapper+0x3c>)
	bx r1
    b584:	4708      	bx	r1
    b586:	0000      	.short	0x0000
	ldr r2, =_kernel
    b588:	20009ae8 	.word	0x20009ae8
	ldr r1, =_sw_isr_table
    b58c:	0001aedc 	.word	0x0001aedc
	ldr r1, =z_arm_int_exit
    b590:	0000b595 	.word	0x0000b595

0000b594 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    b594:	4b04      	ldr	r3, [pc, #16]	; (b5a8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    b596:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    b598:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    b59a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    b59c:	d003      	beq.n	b5a6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    b59e:	4903      	ldr	r1, [pc, #12]	; (b5ac <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    b5a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    b5a4:	600a      	str	r2, [r1, #0]

0000b5a6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    b5a6:	4770      	bx	lr
	ldr r3, =_kernel
    b5a8:	20009ae8 	.word	0x20009ae8
	ldr r1, =_SCS_ICSR
    b5ac:	e000ed04 	.word	0xe000ed04

0000b5b0 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    b5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b5b4:	b086      	sub	sp, #24
    b5b6:	4606      	mov	r6, r0
    b5b8:	460d      	mov	r5, r1
    b5ba:	af00      	add	r7, sp, #0
			      bool *recoverable)
{
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
    b5bc:	2402      	movs	r4, #2
    b5be:	4b44      	ldr	r3, [pc, #272]	; (b6d0 <mem_manage_fault.constprop.0+0x120>)
    b5c0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b5c4:	617b      	str	r3, [r7, #20]
    b5c6:	4843      	ldr	r0, [pc, #268]	; (b6d4 <mem_manage_fault.constprop.0+0x124>)
    b5c8:	613c      	str	r4, [r7, #16]
    b5ca:	f107 0210 	add.w	r2, r7, #16
    b5ce:	f00c fa35 	bl	17a3c <z_log_msg_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    b5d2:	4b41      	ldr	r3, [pc, #260]	; (b6d8 <mem_manage_fault.constprop.0+0x128>)
    b5d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b5d6:	06db      	lsls	r3, r3, #27
    b5d8:	d578      	bpl.n	b6cc <mem_manage_fault.constprop.0+0x11c>
		reason = K_ERR_ARM_MEM_STACKING;
		PR_FAULT_INFO("  Stacking error (context area might be"
    b5da:	4b40      	ldr	r3, [pc, #256]	; (b6dc <mem_manage_fault.constprop.0+0x12c>)
    b5dc:	483d      	ldr	r0, [pc, #244]	; (b6d4 <mem_manage_fault.constprop.0+0x124>)
    b5de:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b5e2:	e9c7 4304 	strd	r4, r3, [r7, #16]
    b5e6:	f107 0210 	add.w	r2, r7, #16
    b5ea:	f00c fa27 	bl	17a3c <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_STACKING;
    b5ee:	2011      	movs	r0, #17
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    b5f0:	4b39      	ldr	r3, [pc, #228]	; (b6d8 <mem_manage_fault.constprop.0+0x128>)
    b5f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b5f4:	071c      	lsls	r4, r3, #28
    b5f6:	d50b      	bpl.n	b610 <mem_manage_fault.constprop.0+0x60>
		reason = K_ERR_ARM_MEM_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
    b5f8:	4b39      	ldr	r3, [pc, #228]	; (b6e0 <mem_manage_fault.constprop.0+0x130>)
    b5fa:	4836      	ldr	r0, [pc, #216]	; (b6d4 <mem_manage_fault.constprop.0+0x124>)
    b5fc:	617b      	str	r3, [r7, #20]
    b5fe:	2302      	movs	r3, #2
    b600:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b604:	613b      	str	r3, [r7, #16]
    b606:	f107 0210 	add.w	r2, r7, #16
    b60a:	f00c fa17 	bl	17a3c <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_UNSTACKING;
    b60e:	2012      	movs	r0, #18
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    b610:	4c31      	ldr	r4, [pc, #196]	; (b6d8 <mem_manage_fault.constprop.0+0x128>)
    b612:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    b614:	0799      	lsls	r1, r3, #30
    b616:	d523      	bpl.n	b660 <mem_manage_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
		PR_FAULT_INFO("  Data Access Violation");
    b618:	46e8      	mov	r8, sp
    b61a:	4b32      	ldr	r3, [pc, #200]	; (b6e4 <mem_manage_fault.constprop.0+0x134>)
    b61c:	f107 0210 	add.w	r2, r7, #16
    b620:	617b      	str	r3, [r7, #20]
    b622:	2302      	movs	r3, #2
    b624:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b628:	613b      	str	r3, [r7, #16]
    b62a:	482a      	ldr	r0, [pc, #168]	; (b6d4 <mem_manage_fault.constprop.0+0x124>)
    b62c:	f00c fa06 	bl	17a3c <z_log_msg_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    b630:	6b63      	ldr	r3, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    b632:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    b634:	0612      	lsls	r2, r2, #24
    b636:	d512      	bpl.n	b65e <mem_manage_fault.constprop.0+0xae>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    b638:	b088      	sub	sp, #32
    b63a:	466a      	mov	r2, sp
    b63c:	492a      	ldr	r1, [pc, #168]	; (b6e8 <mem_manage_fault.constprop.0+0x138>)
    b63e:	4825      	ldr	r0, [pc, #148]	; (b6d4 <mem_manage_fault.constprop.0+0x124>)
    b640:	e9c2 1305 	strd	r1, r3, [r2, #20]
    b644:	2303      	movs	r3, #3
    b646:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b64a:	f842 3f10 	str.w	r3, [r2, #16]!
    b64e:	f00c f9f5 	bl	17a3c <z_log_msg_static_create.constprop.0>
    b652:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    b654:	b11e      	cbz	r6, b65e <mem_manage_fault.constprop.0+0xae>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    b656:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    b658:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    b65c:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    b65e:	2013      	movs	r0, #19
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    b660:	4b1d      	ldr	r3, [pc, #116]	; (b6d8 <mem_manage_fault.constprop.0+0x128>)
    b662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b664:	07de      	lsls	r6, r3, #31
    b666:	d50b      	bpl.n	b680 <mem_manage_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
		PR_FAULT_INFO("  Instruction Access Violation");
    b668:	4b20      	ldr	r3, [pc, #128]	; (b6ec <mem_manage_fault.constprop.0+0x13c>)
    b66a:	481a      	ldr	r0, [pc, #104]	; (b6d4 <mem_manage_fault.constprop.0+0x124>)
    b66c:	617b      	str	r3, [r7, #20]
    b66e:	2302      	movs	r3, #2
    b670:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b674:	613b      	str	r3, [r7, #16]
    b676:	f107 0210 	add.w	r2, r7, #16
    b67a:	f00c f9df 	bl	17a3c <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    b67e:	2014      	movs	r0, #20
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    b680:	4b15      	ldr	r3, [pc, #84]	; (b6d8 <mem_manage_fault.constprop.0+0x128>)
    b682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b684:	069c      	lsls	r4, r3, #26
    b686:	d50b      	bpl.n	b6a0 <mem_manage_fault.constprop.0+0xf0>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
		PR_FAULT_INFO(
    b688:	4b19      	ldr	r3, [pc, #100]	; (b6f0 <mem_manage_fault.constprop.0+0x140>)
    b68a:	4812      	ldr	r0, [pc, #72]	; (b6d4 <mem_manage_fault.constprop.0+0x124>)
    b68c:	617b      	str	r3, [r7, #20]
    b68e:	2302      	movs	r3, #2
    b690:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b694:	613b      	str	r3, [r7, #16]
    b696:	f107 0210 	add.w	r2, r7, #16
    b69a:	f00c f9cf 	bl	17a3c <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    b69e:	2015      	movs	r0, #21
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    b6a0:	4b0d      	ldr	r3, [pc, #52]	; (b6d8 <mem_manage_fault.constprop.0+0x128>)

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
    b6a2:	3718      	adds	r7, #24
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    b6a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b6a6:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    b6a8:	bf58      	it	pl
    b6aa:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    b6ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b6ae:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    b6b0:	bf42      	ittt	mi
    b6b2:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    b6b4:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    b6b8:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    b6ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b6bc:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    b6c0:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    b6c2:	2300      	movs	r3, #0
    b6c4:	702b      	strb	r3, [r5, #0]
}
    b6c6:	46bd      	mov	sp, r7
    b6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    b6cc:	2010      	movs	r0, #16
    b6ce:	e78f      	b.n	b5f0 <mem_manage_fault.constprop.0+0x40>
    b6d0:	0001c0ca 	.word	0x0001c0ca
    b6d4:	0001b280 	.word	0x0001b280
    b6d8:	e000ed00 	.word	0xe000ed00
    b6dc:	0001c0e0 	.word	0x0001c0e0
    b6e0:	0001c113 	.word	0x0001c113
    b6e4:	0001c126 	.word	0x0001c126
    b6e8:	0001c13e 	.word	0x0001c13e
    b6ec:	0001c154 	.word	0x0001c154
    b6f0:	0001c173 	.word	0x0001c173

0000b6f4 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    b6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b6f8:	b086      	sub	sp, #24
    b6fa:	4606      	mov	r6, r0
    b6fc:	460d      	mov	r5, r1
    b6fe:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
    b700:	2402      	movs	r4, #2
    b702:	4b47      	ldr	r3, [pc, #284]	; (b820 <bus_fault.constprop.0+0x12c>)
    b704:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b708:	617b      	str	r3, [r7, #20]
    b70a:	4846      	ldr	r0, [pc, #280]	; (b824 <bus_fault.constprop.0+0x130>)
    b70c:	613c      	str	r4, [r7, #16]
    b70e:	f107 0210 	add.w	r2, r7, #16
    b712:	f00c f993 	bl	17a3c <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    b716:	4b44      	ldr	r3, [pc, #272]	; (b828 <bus_fault.constprop.0+0x134>)
    b718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b71a:	04d9      	lsls	r1, r3, #19
    b71c:	d56d      	bpl.n	b7fa <bus_fault.constprop.0+0x106>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
    b71e:	4b43      	ldr	r3, [pc, #268]	; (b82c <bus_fault.constprop.0+0x138>)
    b720:	4840      	ldr	r0, [pc, #256]	; (b824 <bus_fault.constprop.0+0x130>)
    b722:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b726:	e9c7 4304 	strd	r4, r3, [r7, #16]
    b72a:	f107 0210 	add.w	r2, r7, #16
    b72e:	f00c f985 	bl	17a3c <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
    b732:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    b734:	4b3c      	ldr	r3, [pc, #240]	; (b828 <bus_fault.constprop.0+0x134>)
    b736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b738:	051a      	lsls	r2, r3, #20
    b73a:	d50b      	bpl.n	b754 <bus_fault.constprop.0+0x60>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
    b73c:	4b3c      	ldr	r3, [pc, #240]	; (b830 <bus_fault.constprop.0+0x13c>)
    b73e:	4839      	ldr	r0, [pc, #228]	; (b824 <bus_fault.constprop.0+0x130>)
    b740:	617b      	str	r3, [r7, #20]
    b742:	2302      	movs	r3, #2
    b744:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b748:	613b      	str	r3, [r7, #16]
    b74a:	f107 0210 	add.w	r2, r7, #16
    b74e:	f00c f975 	bl	17a3c <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
    b752:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    b754:	4c34      	ldr	r4, [pc, #208]	; (b828 <bus_fault.constprop.0+0x134>)
    b756:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    b758:	059b      	lsls	r3, r3, #22
    b75a:	d523      	bpl.n	b7a4 <bus_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
    b75c:	46e8      	mov	r8, sp
    b75e:	4b35      	ldr	r3, [pc, #212]	; (b834 <bus_fault.constprop.0+0x140>)
    b760:	4830      	ldr	r0, [pc, #192]	; (b824 <bus_fault.constprop.0+0x130>)
    b762:	617b      	str	r3, [r7, #20]
    b764:	2302      	movs	r3, #2
    b766:	f107 0210 	add.w	r2, r7, #16
    b76a:	613b      	str	r3, [r7, #16]
    b76c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b770:	f00c f964 	bl	17a3c <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    b774:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    b776:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    b778:	0410      	lsls	r0, r2, #16
    b77a:	d512      	bpl.n	b7a2 <bus_fault.constprop.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    b77c:	b088      	sub	sp, #32
    b77e:	466a      	mov	r2, sp
    b780:	492d      	ldr	r1, [pc, #180]	; (b838 <bus_fault.constprop.0+0x144>)
    b782:	4828      	ldr	r0, [pc, #160]	; (b824 <bus_fault.constprop.0+0x130>)
    b784:	e9c2 1305 	strd	r1, r3, [r2, #20]
    b788:	2303      	movs	r3, #3
    b78a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b78e:	f842 3f10 	str.w	r3, [r2, #16]!
    b792:	f00c f953 	bl	17a3c <z_log_msg_static_create.constprop.0>
    b796:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    b798:	b11e      	cbz	r6, b7a2 <bus_fault.constprop.0+0xae>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    b79a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    b79c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    b7a0:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    b7a2:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    b7a4:	4b20      	ldr	r3, [pc, #128]	; (b828 <bus_fault.constprop.0+0x134>)
    b7a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b7a8:	0559      	lsls	r1, r3, #21
    b7aa:	d50b      	bpl.n	b7c4 <bus_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
    b7ac:	4b23      	ldr	r3, [pc, #140]	; (b83c <bus_fault.constprop.0+0x148>)
    b7ae:	481d      	ldr	r0, [pc, #116]	; (b824 <bus_fault.constprop.0+0x130>)
    b7b0:	617b      	str	r3, [r7, #20]
    b7b2:	2302      	movs	r3, #2
    b7b4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b7b8:	613b      	str	r3, [r7, #16]
    b7ba:	f107 0210 	add.w	r2, r7, #16
    b7be:	f00c f93d 	bl	17a3c <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    b7c2:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    b7c4:	4b18      	ldr	r3, [pc, #96]	; (b828 <bus_fault.constprop.0+0x134>)
    b7c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b7c8:	05d2      	lsls	r2, r2, #23
    b7ca:	d518      	bpl.n	b7fe <bus_fault.constprop.0+0x10a>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
    b7cc:	4b1c      	ldr	r3, [pc, #112]	; (b840 <bus_fault.constprop.0+0x14c>)
    b7ce:	4815      	ldr	r0, [pc, #84]	; (b824 <bus_fault.constprop.0+0x130>)
    b7d0:	617b      	str	r3, [r7, #20]
    b7d2:	2302      	movs	r3, #2
    b7d4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b7d8:	613b      	str	r3, [r7, #16]
    b7da:	f107 0210 	add.w	r2, r7, #16
    b7de:	f00c f92d 	bl	17a3c <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    b7e2:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    b7e4:	4a10      	ldr	r2, [pc, #64]	; (b828 <bus_fault.constprop.0+0x134>)

	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
    b7e6:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    b7e8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    b7ea:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    b7ee:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    b7f0:	2300      	movs	r3, #0
    b7f2:	702b      	strb	r3, [r5, #0]
}
    b7f4:	46bd      	mov	sp, r7
    b7f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    b7fa:	2016      	movs	r0, #22
    b7fc:	e79a      	b.n	b734 <bus_fault.constprop.0+0x40>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    b7fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b800:	049b      	lsls	r3, r3, #18
    b802:	d5ef      	bpl.n	b7e4 <bus_fault.constprop.0+0xf0>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    b804:	4b0f      	ldr	r3, [pc, #60]	; (b844 <bus_fault.constprop.0+0x150>)
    b806:	4807      	ldr	r0, [pc, #28]	; (b824 <bus_fault.constprop.0+0x130>)
    b808:	617b      	str	r3, [r7, #20]
    b80a:	2302      	movs	r3, #2
    b80c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b810:	613b      	str	r3, [r7, #16]
    b812:	f107 0210 	add.w	r2, r7, #16
    b816:	f00c f911 	bl	17a3c <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    b81a:	201c      	movs	r0, #28
    b81c:	e7e2      	b.n	b7e4 <bus_fault.constprop.0+0xf0>
    b81e:	bf00      	nop
    b820:	0001c1a2 	.word	0x0001c1a2
    b824:	0001b280 	.word	0x0001b280
    b828:	e000ed00 	.word	0xe000ed00
    b82c:	0001c1b8 	.word	0x0001c1b8
    b830:	0001c113 	.word	0x0001c113
    b834:	0001c1c9 	.word	0x0001c1c9
    b838:	0001c1e2 	.word	0x0001c1e2
    b83c:	0001c1f7 	.word	0x0001c1f7
    b840:	0001c212 	.word	0x0001c212
    b844:	0001c173 	.word	0x0001c173

0000b848 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    b848:	b510      	push	{r4, lr}
    b84a:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    b84c:	2402      	movs	r4, #2
    b84e:	4b3e      	ldr	r3, [pc, #248]	; (b948 <usage_fault.constprop.0+0x100>)
    b850:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b854:	483d      	ldr	r0, [pc, #244]	; (b94c <usage_fault.constprop.0+0x104>)
    b856:	aa04      	add	r2, sp, #16
    b858:	9305      	str	r3, [sp, #20]
    b85a:	9404      	str	r4, [sp, #16]
    b85c:	f00c f8ee 	bl	17a3c <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    b860:	4b3b      	ldr	r3, [pc, #236]	; (b950 <usage_fault.constprop.0+0x108>)
    b862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b864:	0199      	lsls	r1, r3, #6
    b866:	d56c      	bpl.n	b942 <usage_fault.constprop.0+0xfa>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
    b868:	4b3a      	ldr	r3, [pc, #232]	; (b954 <usage_fault.constprop.0+0x10c>)
    b86a:	4838      	ldr	r0, [pc, #224]	; (b94c <usage_fault.constprop.0+0x104>)
    b86c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b870:	aa04      	add	r2, sp, #16
    b872:	e9cd 4304 	strd	r4, r3, [sp, #16]
    b876:	f00c f8e1 	bl	17a3c <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
    b87a:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    b87c:	4b34      	ldr	r3, [pc, #208]	; (b950 <usage_fault.constprop.0+0x108>)
    b87e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b880:	01da      	lsls	r2, r3, #7
    b882:	d50a      	bpl.n	b89a <usage_fault.constprop.0+0x52>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
    b884:	4b34      	ldr	r3, [pc, #208]	; (b958 <usage_fault.constprop.0+0x110>)
    b886:	4831      	ldr	r0, [pc, #196]	; (b94c <usage_fault.constprop.0+0x104>)
    b888:	9305      	str	r3, [sp, #20]
    b88a:	2302      	movs	r3, #2
    b88c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b890:	aa04      	add	r2, sp, #16
    b892:	9304      	str	r3, [sp, #16]
    b894:	f00c f8d2 	bl	17a3c <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    b898:	201f      	movs	r0, #31
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    b89a:	4b2d      	ldr	r3, [pc, #180]	; (b950 <usage_fault.constprop.0+0x108>)
    b89c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b89e:	02db      	lsls	r3, r3, #11
    b8a0:	d50a      	bpl.n	b8b8 <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_STACK_OVERFLOW;
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    b8a2:	2402      	movs	r4, #2
    b8a4:	4b2d      	ldr	r3, [pc, #180]	; (b95c <usage_fault.constprop.0+0x114>)
    b8a6:	4829      	ldr	r0, [pc, #164]	; (b94c <usage_fault.constprop.0+0x104>)
    b8a8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b8ac:	aa04      	add	r2, sp, #16
    b8ae:	9305      	str	r3, [sp, #20]
    b8b0:	9404      	str	r4, [sp, #16]
    b8b2:	f00c f8c3 	bl	17a3c <z_log_msg_static_create.constprop.0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    b8b6:	4620      	mov	r0, r4
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    b8b8:	4b25      	ldr	r3, [pc, #148]	; (b950 <usage_fault.constprop.0+0x108>)
    b8ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b8bc:	031c      	lsls	r4, r3, #12
    b8be:	d50a      	bpl.n	b8d6 <usage_fault.constprop.0+0x8e>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
    b8c0:	4b27      	ldr	r3, [pc, #156]	; (b960 <usage_fault.constprop.0+0x118>)
    b8c2:	4822      	ldr	r0, [pc, #136]	; (b94c <usage_fault.constprop.0+0x104>)
    b8c4:	9305      	str	r3, [sp, #20]
    b8c6:	2302      	movs	r3, #2
    b8c8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b8cc:	aa04      	add	r2, sp, #16
    b8ce:	9304      	str	r3, [sp, #16]
    b8d0:	f00c f8b4 	bl	17a3c <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    b8d4:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    b8d6:	4b1e      	ldr	r3, [pc, #120]	; (b950 <usage_fault.constprop.0+0x108>)
    b8d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b8da:	0359      	lsls	r1, r3, #13
    b8dc:	d50a      	bpl.n	b8f4 <usage_fault.constprop.0+0xac>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    b8de:	4b21      	ldr	r3, [pc, #132]	; (b964 <usage_fault.constprop.0+0x11c>)
    b8e0:	481a      	ldr	r0, [pc, #104]	; (b94c <usage_fault.constprop.0+0x104>)
    b8e2:	9305      	str	r3, [sp, #20]
    b8e4:	2302      	movs	r3, #2
    b8e6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b8ea:	aa04      	add	r2, sp, #16
    b8ec:	9304      	str	r3, [sp, #16]
    b8ee:	f00c f8a5 	bl	17a3c <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    b8f2:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    b8f4:	4b16      	ldr	r3, [pc, #88]	; (b950 <usage_fault.constprop.0+0x108>)
    b8f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b8f8:	039a      	lsls	r2, r3, #14
    b8fa:	d50a      	bpl.n	b912 <usage_fault.constprop.0+0xca>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
    b8fc:	4b1a      	ldr	r3, [pc, #104]	; (b968 <usage_fault.constprop.0+0x120>)
    b8fe:	4813      	ldr	r0, [pc, #76]	; (b94c <usage_fault.constprop.0+0x104>)
    b900:	9305      	str	r3, [sp, #20]
    b902:	2302      	movs	r3, #2
    b904:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b908:	aa04      	add	r2, sp, #16
    b90a:	9304      	str	r3, [sp, #16]
    b90c:	f00c f896 	bl	17a3c <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    b910:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    b912:	4b0f      	ldr	r3, [pc, #60]	; (b950 <usage_fault.constprop.0+0x108>)
    b914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b916:	03db      	lsls	r3, r3, #15
    b918:	d50a      	bpl.n	b930 <usage_fault.constprop.0+0xe8>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    b91a:	4b14      	ldr	r3, [pc, #80]	; (b96c <usage_fault.constprop.0+0x124>)
    b91c:	480b      	ldr	r0, [pc, #44]	; (b94c <usage_fault.constprop.0+0x104>)
    b91e:	9305      	str	r3, [sp, #20]
    b920:	2302      	movs	r3, #2
    b922:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b926:	aa04      	add	r2, sp, #16
    b928:	9304      	str	r3, [sp, #16]
    b92a:	f00c f887 	bl	17a3c <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    b92e:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    b930:	4a07      	ldr	r2, [pc, #28]	; (b950 <usage_fault.constprop.0+0x108>)
    b932:	6a93      	ldr	r3, [r2, #40]	; 0x28
    b934:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    b938:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    b93c:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    b93e:	b006      	add	sp, #24
    b940:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    b942:	201d      	movs	r0, #29
    b944:	e79a      	b.n	b87c <usage_fault.constprop.0+0x34>
    b946:	bf00      	nop
    b948:	0001c22a 	.word	0x0001c22a
    b94c:	0001b280 	.word	0x0001b280
    b950:	e000ed00 	.word	0xe000ed00
    b954:	0001c242 	.word	0x0001c242
    b958:	0001c255 	.word	0x0001c255
    b95c:	0001c26f 	.word	0x0001c26f
    b960:	0001c299 	.word	0x0001c299
    b964:	0001c2b7 	.word	0x0001c2b7
    b968:	0001c2dc 	.word	0x0001c2dc
    b96c:	0001c2f6 	.word	0x0001c2f6

0000b970 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    b970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b974:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    b976:	4b7a      	ldr	r3, [pc, #488]	; (bb60 <z_arm_fault+0x1f0>)
{
    b978:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    b97a:	f8d3 9004 	ldr.w	r9, [r3, #4]
{
    b97e:	468a      	mov	sl, r1
    b980:	4614      	mov	r4, r2
    b982:	2600      	movs	r6, #0
    b984:	af00      	add	r7, sp, #0
    b986:	f3c9 0808 	ubfx	r8, r9, #0, #9
    b98a:	f386 8811 	msr	BASEPRI, r6
    b98e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    b992:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    b996:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    b99a:	d125      	bne.n	b9e8 <z_arm_fault+0x78>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    b99c:	07d3      	lsls	r3, r2, #31
    b99e:	d423      	bmi.n	b9e8 <z_arm_fault+0x78>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    b9a0:	0650      	lsls	r0, r2, #25
    b9a2:	d403      	bmi.n	b9ac <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    b9a4:	0711      	lsls	r1, r2, #28
    b9a6:	d40f      	bmi.n	b9c8 <z_arm_fault+0x58>
			*nested_exc = true;
    b9a8:	2601      	movs	r6, #1
    b9aa:	e00f      	b.n	b9cc <z_arm_fault+0x5c>
		PR_FAULT_INFO("Exception occurred in Secure State");
    b9ac:	4b6d      	ldr	r3, [pc, #436]	; (bb64 <z_arm_fault+0x1f4>)
    b9ae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b9b2:	61fb      	str	r3, [r7, #28]
    b9b4:	2302      	movs	r3, #2
    b9b6:	486c      	ldr	r0, [pc, #432]	; (bb68 <z_arm_fault+0x1f8>)
    b9b8:	61bb      	str	r3, [r7, #24]
    b9ba:	f107 0218 	add.w	r2, r7, #24
    b9be:	f00c f83d 	bl	17a3c <z_log_msg_static_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    b9c2:	f014 0404 	ands.w	r4, r4, #4
    b9c6:	d000      	beq.n	b9ca <z_arm_fault+0x5a>
			ptr_esf = (z_arch_esf_t *)psp;
    b9c8:	4655      	mov	r5, sl
	*nested_exc = false;
    b9ca:	2600      	movs	r6, #0
	*recoverable = false;
    b9cc:	2300      	movs	r3, #0
    b9ce:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    b9d0:	f1a8 0303 	sub.w	r3, r8, #3
    b9d4:	2b09      	cmp	r3, #9
    b9d6:	f200 80a2 	bhi.w	bb1e <z_arm_fault+0x1ae>
    b9da:	e8df f003 	tbb	[pc, r3]
    b9de:	9507      	.short	0x9507
    b9e0:	a0a09198 	.word	0xa0a09198
    b9e4:	9ba0a0a0 	.word	0x9ba0a0a0
		return NULL;
    b9e8:	4635      	mov	r5, r6
    b9ea:	e7ef      	b.n	b9cc <z_arm_fault+0x5c>
	PR_FAULT_INFO("***** HARD FAULT *****");
    b9ec:	46e9      	mov	r9, sp
    b9ee:	f04f 0802 	mov.w	r8, #2
    b9f2:	4b5e      	ldr	r3, [pc, #376]	; (bb6c <z_arm_fault+0x1fc>)
    b9f4:	f107 0218 	add.w	r2, r7, #24
    b9f8:	61fb      	str	r3, [r7, #28]
    b9fa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b9fe:	485a      	ldr	r0, [pc, #360]	; (bb68 <z_arm_fault+0x1f8>)
    ba00:	f8c7 8018 	str.w	r8, [r7, #24]
    ba04:	f00c f81a 	bl	17a3c <z_log_msg_static_create.constprop.0>
	*recoverable = false;
    ba08:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    ba0a:	4c55      	ldr	r4, [pc, #340]	; (bb60 <z_arm_fault+0x1f0>)
	*recoverable = false;
    ba0c:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    ba0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ba10:	079a      	lsls	r2, r3, #30
    ba12:	d50b      	bpl.n	ba2c <z_arm_fault+0xbc>
		PR_EXC("  Bus fault on vector table read");
    ba14:	4b56      	ldr	r3, [pc, #344]	; (bb70 <z_arm_fault+0x200>)
		PR_EXC("  Debug event");
    ba16:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
    ba1a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ba1e:	4852      	ldr	r0, [pc, #328]	; (bb68 <z_arm_fault+0x1f8>)
    ba20:	f107 0218 	add.w	r2, r7, #24
    ba24:	f00c f80a 	bl	17a3c <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    ba28:	2400      	movs	r4, #0
    ba2a:	e038      	b.n	ba9e <z_arm_fault+0x12e>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    ba2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ba2e:	2b00      	cmp	r3, #0
    ba30:	da01      	bge.n	ba36 <z_arm_fault+0xc6>
		PR_EXC("  Debug event");
    ba32:	4b50      	ldr	r3, [pc, #320]	; (bb74 <z_arm_fault+0x204>)
    ba34:	e7ef      	b.n	ba16 <z_arm_fault+0xa6>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    ba36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ba38:	005b      	lsls	r3, r3, #1
    ba3a:	d5f5      	bpl.n	ba28 <z_arm_fault+0xb8>
		PR_EXC("  Fault escalation (see below)");
    ba3c:	4b4e      	ldr	r3, [pc, #312]	; (bb78 <z_arm_fault+0x208>)
    ba3e:	f107 0218 	add.w	r2, r7, #24
    ba42:	e9c7 8306 	strd	r8, r3, [r7, #24]
    ba46:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ba4a:	4847      	ldr	r0, [pc, #284]	; (bb68 <z_arm_fault+0x1f8>)
    ba4c:	f00b fff6 	bl	17a3c <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    ba50:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    ba52:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    ba54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    ba58:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    ba5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ba5e:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    ba62:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    ba64:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    ba68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    ba6c:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    ba6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ba72:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    ba76:	f64d 7302 	movw	r3, #57090	; 0xdf02
    ba7a:	429a      	cmp	r2, r3
    ba7c:	d12b      	bne.n	bad6 <z_arm_fault+0x166>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    ba7e:	b088      	sub	sp, #32
    ba80:	682b      	ldr	r3, [r5, #0]
    ba82:	466a      	mov	r2, sp
    ba84:	493d      	ldr	r1, [pc, #244]	; (bb7c <z_arm_fault+0x20c>)
    ba86:	4838      	ldr	r0, [pc, #224]	; (bb68 <z_arm_fault+0x1f8>)
    ba88:	e9c2 1305 	strd	r1, r3, [r2, #20]
    ba8c:	2303      	movs	r3, #3
    ba8e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ba92:	f842 3f10 	str.w	r3, [r2, #16]!
    ba96:	f00b ffd1 	bl	17a3c <z_log_msg_static_create.constprop.0>
    ba9a:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
    ba9c:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    ba9e:	79fb      	ldrb	r3, [r7, #7]
    baa0:	b9ab      	cbnz	r3, bace <z_arm_fault+0x15e>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    baa2:	2220      	movs	r2, #32
    baa4:	4629      	mov	r1, r5
    baa6:	f107 0008 	add.w	r0, r7, #8
    baaa:	f00c f852 	bl	17b52 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    baae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    bab0:	2e00      	cmp	r6, #0
    bab2:	d050      	beq.n	bb56 <z_arm_fault+0x1e6>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    bab4:	f3c3 0208 	ubfx	r2, r3, #0, #9
    bab8:	b922      	cbnz	r2, bac4 <z_arm_fault+0x154>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    baba:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    babe:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    bac2:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    bac4:	4620      	mov	r0, r4
    bac6:	f107 0108 	add.w	r1, r7, #8
    baca:	f7ff fbe9 	bl	b2a0 <z_arm_fatal_error>
}
    bace:	3728      	adds	r7, #40	; 0x28
    bad0:	46bd      	mov	sp, r7
    bad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    bad6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    bad8:	b2db      	uxtb	r3, r3
    bada:	b123      	cbz	r3, bae6 <z_arm_fault+0x176>
			reason = mem_manage_fault(esf, 1, recoverable);
    badc:	2001      	movs	r0, #1
    bade:	1df9      	adds	r1, r7, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    bae0:	f7ff fd66 	bl	b5b0 <mem_manage_fault.constprop.0>
    bae4:	e00e      	b.n	bb04 <z_arm_fault+0x194>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    bae6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    bae8:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    baec:	d004      	beq.n	baf8 <z_arm_fault+0x188>
			reason = bus_fault(esf, 1, recoverable);
    baee:	2001      	movs	r0, #1
    baf0:	1df9      	adds	r1, r7, #7
		reason = bus_fault(esf, 0, recoverable);
    baf2:	f7ff fdff 	bl	b6f4 <bus_fault.constprop.0>
    baf6:	e005      	b.n	bb04 <z_arm_fault+0x194>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    baf8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    bafa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    bafe:	d393      	bcc.n	ba28 <z_arm_fault+0xb8>
			reason = usage_fault(esf);
    bb00:	f7ff fea2 	bl	b848 <usage_fault.constprop.0>
    bb04:	4604      	mov	r4, r0
    bb06:	e7ca      	b.n	ba9e <z_arm_fault+0x12e>
		reason = mem_manage_fault(esf, 0, recoverable);
    bb08:	2000      	movs	r0, #0
    bb0a:	1df9      	adds	r1, r7, #7
    bb0c:	e7e8      	b.n	bae0 <z_arm_fault+0x170>
		reason = bus_fault(esf, 0, recoverable);
    bb0e:	2000      	movs	r0, #0
    bb10:	1df9      	adds	r1, r7, #7
    bb12:	e7ee      	b.n	baf2 <z_arm_fault+0x182>
	PR_FAULT_INFO(
    bb14:	4b1a      	ldr	r3, [pc, #104]	; (bb80 <z_arm_fault+0x210>)
    bb16:	61fb      	str	r3, [r7, #28]
    bb18:	2302      	movs	r3, #2
    bb1a:	61bb      	str	r3, [r7, #24]
    bb1c:	e77d      	b.n	ba1a <z_arm_fault+0xaa>
	PR_FAULT_INFO("***** %s %d) *****",
    bb1e:	4a19      	ldr	r2, [pc, #100]	; (bb84 <z_arm_fault+0x214>)
    bb20:	466c      	mov	r4, sp
    bb22:	f419 7ff8 	tst.w	r9, #496	; 0x1f0
    bb26:	b08a      	sub	sp, #40	; 0x28
    bb28:	4b17      	ldr	r3, [pc, #92]	; (bb88 <z_arm_fault+0x218>)
    bb2a:	bf18      	it	ne
    bb2c:	4613      	movne	r3, r2
    bb2e:	466a      	mov	r2, sp
    bb30:	4916      	ldr	r1, [pc, #88]	; (bb8c <z_arm_fault+0x21c>)
    bb32:	480d      	ldr	r0, [pc, #52]	; (bb68 <z_arm_fault+0x1f8>)
    bb34:	e9c2 1305 	strd	r1, r3, [r2, #20]
    bb38:	f1a8 0310 	sub.w	r3, r8, #16
    bb3c:	61d3      	str	r3, [r2, #28]
    bb3e:	f44f 7300 	mov.w	r3, #512	; 0x200
    bb42:	8413      	strh	r3, [r2, #32]
    bb44:	4b12      	ldr	r3, [pc, #72]	; (bb90 <z_arm_fault+0x220>)
    bb46:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    bb4a:	f842 3f10 	str.w	r3, [r2, #16]!
    bb4e:	f00b ff75 	bl	17a3c <z_log_msg_static_create.constprop.0>
    bb52:	46a5      	mov	sp, r4
}
    bb54:	e768      	b.n	ba28 <z_arm_fault+0xb8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    bb56:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    bb5a:	f023 0301 	bic.w	r3, r3, #1
    bb5e:	e7b0      	b.n	bac2 <z_arm_fault+0x152>
    bb60:	e000ed00 	.word	0xe000ed00
    bb64:	0001c34f 	.word	0x0001c34f
    bb68:	0001b280 	.word	0x0001b280
    bb6c:	0001c372 	.word	0x0001c372
    bb70:	0001c389 	.word	0x0001c389
    bb74:	0001c3aa 	.word	0x0001c3aa
    bb78:	0001c3b8 	.word	0x0001c3b8
    bb7c:	0001c3d7 	.word	0x0001c3d7
    bb80:	0001c3f3 	.word	0x0001c3f3
    bb84:	0001c336 	.word	0x0001c336
    bb88:	0001c321 	.word	0x0001c321
    bb8c:	0001c417 	.word	0x0001c417
    bb90:	01000004 	.word	0x01000004

0000bb94 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    bb94:	4b04      	ldr	r3, [pc, #16]	; (bba8 <z_arm_fault_init+0x14>)
    bb96:	695a      	ldr	r2, [r3, #20]
    bb98:	f042 0210 	orr.w	r2, r2, #16
    bb9c:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    bb9e:	695a      	ldr	r2, [r3, #20]
    bba0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    bba4:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    bba6:	4770      	bx	lr
    bba8:	e000ed00 	.word	0xe000ed00

0000bbac <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    bbac:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    bbb0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    bbb4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    bbb6:	4672      	mov	r2, lr
	bl z_arm_fault
    bbb8:	f7ff feda 	bl	b970 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    bbbc:	bd01      	pop	{r0, pc}
    bbbe:	bf00      	nop

0000bbc0 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    bbc0:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    bbc2:	2120      	movs	r1, #32
    bbc4:	4803      	ldr	r0, [pc, #12]	; (bbd4 <z_arm_interrupt_init+0x14>)
    bbc6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    bbc8:	3301      	adds	r3, #1
    bbca:	2b45      	cmp	r3, #69	; 0x45
    bbcc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    bbd0:	d1f9      	bne.n	bbc6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    bbd2:	4770      	bx	lr
    bbd4:	e000e100 	.word	0xe000e100

0000bbd8 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    bbd8:	2000      	movs	r0, #0
    msr CONTROL, r0
    bbda:	f380 8814 	msr	CONTROL, r0
    isb
    bbde:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    bbe2:	2000      	movs	r0, #0
    msr MSPLIM, r0
    bbe4:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    bbe8:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    bbec:	f7fd ff32 	bl	9a54 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    bbf0:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    bbf2:	490e      	ldr	r1, [pc, #56]	; (bc2c <__start+0x54>)
    str r0, [r1]
    bbf4:	6008      	str	r0, [r1, #0]
    dsb
    bbf6:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    bbfa:	480d      	ldr	r0, [pc, #52]	; (bc30 <__start+0x58>)
    msr msp, r0
    bbfc:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    bc00:	f000 f83e 	bl	bc80 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    bc04:	2020      	movs	r0, #32
    msr BASEPRI, r0
    bc06:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    bc0a:	480a      	ldr	r0, [pc, #40]	; (bc34 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    bc0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    bc10:	1840      	adds	r0, r0, r1
    msr PSP, r0
    bc12:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    bc16:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    bc1a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    bc1c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    bc1e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    bc22:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    bc26:	f7ff fbeb 	bl	b400 <z_arm_prep_c>
    bc2a:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    bc2c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    bc30:	2000c680 	.word	0x2000c680
    ldr r0, =z_interrupt_stacks
    bc34:	2000b540 	.word	0x2000b540

0000bc38 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    bc38:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    bc3c:	4905      	ldr	r1, [pc, #20]	; (bc54 <sys_arch_reboot+0x1c>)
    bc3e:	4b06      	ldr	r3, [pc, #24]	; (bc58 <sys_arch_reboot+0x20>)
    bc40:	68ca      	ldr	r2, [r1, #12]
    bc42:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    bc46:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    bc48:	60cb      	str	r3, [r1, #12]
    bc4a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    bc4e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    bc50:	e7fd      	b.n	bc4e <sys_arch_reboot+0x16>
    bc52:	bf00      	nop
    bc54:	e000ed00 	.word	0xe000ed00
    bc58:	05fa0004 	.word	0x05fa0004

0000bc5c <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    bc5c:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    bc5e:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    bc60:	4906      	ldr	r1, [pc, #24]	; (bc7c <z_arm_clear_arm_mpu_config+0x20>)
    bc62:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    bc66:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    bc6a:	4293      	cmp	r3, r2
    bc6c:	db00      	blt.n	bc70 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    bc6e:	4770      	bx	lr
  mpu->RNR = rnr;
    bc70:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    bc74:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    bc78:	3301      	adds	r3, #1
    bc7a:	e7f6      	b.n	bc6a <z_arm_clear_arm_mpu_config+0xe>
    bc7c:	e000ed00 	.word	0xe000ed00

0000bc80 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    bc80:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    bc82:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    bc84:	2400      	movs	r4, #0
    bc86:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    bc8a:	f7ff ffe7 	bl	bc5c <z_arm_clear_arm_mpu_config>
    bc8e:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    bc90:	f04f 30ff 	mov.w	r0, #4294967295
    bc94:	4a0c      	ldr	r2, [pc, #48]	; (bcc8 <z_arm_init_arch_hw_at_boot+0x48>)
    bc96:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    bc9a:	3301      	adds	r3, #1
    bc9c:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    bc9e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    bca2:	d1f8      	bne.n	bc96 <z_arm_init_arch_hw_at_boot+0x16>
    bca4:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    bca6:	f04f 30ff 	mov.w	r0, #4294967295
    bcaa:	4a07      	ldr	r2, [pc, #28]	; (bcc8 <z_arm_init_arch_hw_at_boot+0x48>)
    bcac:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    bcb0:	3301      	adds	r3, #1
    bcb2:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    bcb4:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    bcb8:	d1f8      	bne.n	bcac <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    bcba:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    bcbc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    bcc0:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    bcc4:	bd10      	pop	{r4, pc}
    bcc6:	bf00      	nop
    bcc8:	e000e100 	.word	0xe000e100

0000bccc <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    bccc:	4b08      	ldr	r3, [pc, #32]	; (bcf0 <z_impl_k_thread_abort+0x24>)
    bcce:	689b      	ldr	r3, [r3, #8]
    bcd0:	4283      	cmp	r3, r0
    bcd2:	d10b      	bne.n	bcec <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    bcd4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    bcd8:	b143      	cbz	r3, bcec <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    bcda:	4b06      	ldr	r3, [pc, #24]	; (bcf4 <z_impl_k_thread_abort+0x28>)
    bcdc:	685a      	ldr	r2, [r3, #4]
    bcde:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    bce2:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    bce4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    bce6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    bcea:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    bcec:	f009 be9a 	b.w	15a24 <z_thread_abort>
    bcf0:	20009ae8 	.word	0x20009ae8
    bcf4:	e000ed00 	.word	0xe000ed00

0000bcf8 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    bcf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    bcfa:	4c09      	ldr	r4, [pc, #36]	; (bd20 <z_arm_configure_static_mpu_regions+0x28>)
    bcfc:	4a09      	ldr	r2, [pc, #36]	; (bd24 <z_arm_configure_static_mpu_regions+0x2c>)
    bcfe:	4623      	mov	r3, r4
    bd00:	2101      	movs	r1, #1
    bd02:	4809      	ldr	r0, [pc, #36]	; (bd28 <z_arm_configure_static_mpu_regions+0x30>)
    bd04:	f000 f92a 	bl	bf5c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    bd08:	2300      	movs	r3, #0
    bd0a:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    bd0c:	4b07      	ldr	r3, [pc, #28]	; (bd2c <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    bd0e:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    bd10:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    bd12:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    bd14:	9301      	str	r3, [sp, #4]
    bd16:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    bd18:	f000 f92a 	bl	bf70 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    bd1c:	b004      	add	sp, #16
    bd1e:	bd10      	pop	{r4, pc}
    bd20:	20070000 	.word	0x20070000
    bd24:	20008000 	.word	0x20008000
    bd28:	0001b5dc 	.word	0x0001b5dc
    bd2c:	20008748 	.word	0x20008748

0000bd30 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    bd30:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
    bd32:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    bd34:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    bd36:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
    bd3a:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    bd3e:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    bd40:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    bd42:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    bd44:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    bd48:	4905      	ldr	r1, [pc, #20]	; (bd60 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    bd4a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    bd4e:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    bd52:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    bd56:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    bd5a:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    bd5e:	bd10      	pop	{r4, pc}
    bd60:	e000ed00 	.word	0xe000ed00

0000bd64 <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
    bd64:	b580      	push	{r7, lr}
    bd66:	af00      	add	r7, sp, #0
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    bd68:	b088      	sub	sp, #32
    bd6a:	466a      	mov	r2, sp
    bd6c:	4b07      	ldr	r3, [pc, #28]	; (bd8c <region_allocate_and_init.part.0+0x28>)
    bd6e:	e9c2 3005 	strd	r3, r0, [r2, #20]
    bd72:	2303      	movs	r3, #3
    bd74:	f842 3f10 	str.w	r3, [r2, #16]!
    bd78:	2300      	movs	r3, #0
    bd7a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bd7e:	4804      	ldr	r0, [pc, #16]	; (bd90 <region_allocate_and_init.part.0+0x2c>)
    bd80:	f7fe fcd0 	bl	a724 <z_impl_z_log_msg_static_create>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    bd84:	f06f 0015 	mvn.w	r0, #21
    bd88:	46bd      	mov	sp, r7
    bd8a:	bd80      	pop	{r7, pc}
    bd8c:	0001c42e 	.word	0x0001c42e
    bd90:	0001b260 	.word	0x0001b260

0000bd94 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    bd94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bd98:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    bd9a:	4606      	mov	r6, r0
    bd9c:	f04f 0900 	mov.w	r9, #0
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    bda0:	b087      	sub	sp, #28
	MPU->RNR = rnr;
    bda2:	4d5f      	ldr	r5, [pc, #380]	; (bf20 <mpu_configure_regions_and_partition.constprop.0+0x18c>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    bda4:	af00      	add	r7, sp, #0
    bda6:	6079      	str	r1, [r7, #4]
	for (i = 0; i < regions_num; i++) {
    bda8:	687b      	ldr	r3, [r7, #4]
    bdaa:	4599      	cmp	r9, r3
    bdac:	da35      	bge.n	be1a <mpu_configure_regions_and_partition.constprop.0+0x86>
		if (regions[i].size == 0U) {
    bdae:	f8d6 8004 	ldr.w	r8, [r6, #4]
    bdb2:	f1b8 0f00 	cmp.w	r8, #0
    bdb6:	d054      	beq.n	be62 <mpu_configure_regions_and_partition.constprop.0+0xce>
		&&
    bdb8:	f1b8 0f1f 	cmp.w	r8, #31
    bdbc:	d91b      	bls.n	bdf6 <mpu_configure_regions_and_partition.constprop.0+0x62>
		&&
    bdbe:	f018 0f1f 	tst.w	r8, #31
    bdc2:	d118      	bne.n	bdf6 <mpu_configure_regions_and_partition.constprop.0+0x62>
		((part->start &
    bdc4:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    bdc8:	f01b 0f1f 	tst.w	fp, #31
    bdcc:	d113      	bne.n	bdf6 <mpu_configure_regions_and_partition.constprop.0+0x62>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    bdce:	4658      	mov	r0, fp
    bdd0:	f00b fe39 	bl	17a46 <arm_cmse_mpu_region_get>
    bdd4:	4682      	mov	sl, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    bdd6:	eb08 000b 	add.w	r0, r8, fp
    bdda:	3801      	subs	r0, #1
    bddc:	f00b fe33 	bl	17a46 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    bde0:	4582      	cmp	sl, r0
    bde2:	d01f      	beq.n	be24 <mpu_configure_regions_and_partition.constprop.0+0x90>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
    bde4:	f06f 0a15 	mvn.w	sl, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    bde8:	466c      	mov	r4, sp
    bdea:	b088      	sub	sp, #32
    bdec:	466a      	mov	r2, sp
    bdee:	494d      	ldr	r1, [pc, #308]	; (bf24 <mpu_configure_regions_and_partition.constprop.0+0x190>)
    bdf0:	e9c2 1a05 	strd	r1, sl, [r2, #20]
    bdf4:	e005      	b.n	be02 <mpu_configure_regions_and_partition.constprop.0+0x6e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    bdf6:	466c      	mov	r4, sp
    bdf8:	b088      	sub	sp, #32
    bdfa:	466a      	mov	r2, sp
    bdfc:	4b4a      	ldr	r3, [pc, #296]	; (bf28 <mpu_configure_regions_and_partition.constprop.0+0x194>)
    bdfe:	e9c2 3905 	strd	r3, r9, [r2, #20]
			LOG_ERR("Invalid underlying region index %u",
    be02:	2303      	movs	r3, #3
    be04:	f842 3f10 	str.w	r3, [r2, #16]!
    be08:	2300      	movs	r3, #0
    be0a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    be0e:	4847      	ldr	r0, [pc, #284]	; (bf2c <mpu_configure_regions_and_partition.constprop.0+0x198>)
    be10:	f7fe fc88 	bl	a724 <z_impl_z_log_msg_static_create>
    be14:	46a5      	mov	sp, r4
			return -EINVAL;
    be16:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    be1a:	4620      	mov	r0, r4
    be1c:	371c      	adds	r7, #28
    be1e:	46bd      	mov	sp, r7
    be20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    be24:	f11a 0f16 	cmn.w	sl, #22
    be28:	d0de      	beq.n	bde8 <mpu_configure_regions_and_partition.constprop.0+0x54>
    be2a:	4554      	cmp	r4, sl
    be2c:	dddc      	ble.n	bde8 <mpu_configure_regions_and_partition.constprop.0+0x54>
	MPU->RNR = rnr;
    be2e:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    be32:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    be36:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RLAR;
    be3a:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    be3e:	f020 001f 	bic.w	r0, r0, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    be42:	f042 081f 	orr.w	r8, r2, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    be46:	e9d6 2100 	ldrd	r2, r1, [r6]
    be4a:	4411      	add	r1, r2
		if ((regions[i].start == u_reg_base) &&
    be4c:	4290      	cmp	r0, r2
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    be4e:	f101 3bff 	add.w	fp, r1, #4294967295
		if ((regions[i].start == u_reg_base) &&
    be52:	d11e      	bne.n	be92 <mpu_configure_regions_and_partition.constprop.0+0xfe>
    be54:	45d8      	cmp	r8, fp
    be56:	d108      	bne.n	be6a <mpu_configure_regions_and_partition.constprop.0+0xd6>
			mpu_configure_region(u_reg_index, &regions[i]);
    be58:	4631      	mov	r1, r6
    be5a:	fa5f f08a 	uxtb.w	r0, sl
    be5e:	f00b fdfb 	bl	17a58 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    be62:	f109 0901 	add.w	r9, r9, #1
    be66:	360c      	adds	r6, #12
    be68:	e79e      	b.n	bda8 <mpu_configure_regions_and_partition.constprop.0+0x14>
	MPU->RNR = rnr;
    be6a:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    be6e:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    be72:	f021 011f 	bic.w	r1, r1, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    be76:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    be7a:	430b      	orrs	r3, r1
				mpu_configure_region(reg_index, &regions[i]);
    be7c:	4631      	mov	r1, r6
	MPU->RBAR = rbar;
    be7e:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    be82:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    be84:	f00b fde8 	bl	17a58 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    be88:	f110 0f16 	cmn.w	r0, #22
    be8c:	d0c3      	beq.n	be16 <mpu_configure_regions_and_partition.constprop.0+0x82>
			reg_index++;
    be8e:	1c44      	adds	r4, r0, #1
    be90:	e7e7      	b.n	be62 <mpu_configure_regions_and_partition.constprop.0+0xce>
				regions[i].start - 1);
    be92:	3a01      	subs	r2, #1
		} else if (reg_last == u_reg_last) {
    be94:	45d8      	cmp	r8, fp
				mpu_configure_region(reg_index, &regions[i]);
    be96:	b2e0      	uxtb	r0, r4
		     | (limit & MPU_RLAR_LIMIT_Msk));
    be98:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
    be9c:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
    bea0:	d108      	bne.n	beb4 <mpu_configure_regions_and_partition.constprop.0+0x120>
	return MPU->RLAR;
    bea2:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    bea6:	4631      	mov	r1, r6
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    bea8:	f003 031f 	and.w	r3, r3, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    beac:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    beae:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
    beb2:	e7e7      	b.n	be84 <mpu_configure_regions_and_partition.constprop.0+0xf0>
	return MPU->RLAR;
    beb4:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    beb8:	f001 011f 	and.w	r1, r1, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    bebc:	430a      	orrs	r2, r1
	MPU->RLAR = rlar;
    bebe:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    bec2:	4631      	mov	r1, r6
    bec4:	f00b fdc8 	bl	17a58 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    bec8:	f110 0f16 	cmn.w	r0, #22
    becc:	d0a3      	beq.n	be16 <mpu_configure_regions_and_partition.constprop.0+0x82>
	MPU->RNR = rnr;
    bece:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    bed2:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    bed6:	7c3b      	ldrb	r3, [r7, #16]
			REGION_LIMIT_ADDR((regions[i].start +
    bed8:	f108 38ff 	add.w	r8, r8, #4294967295
	attr->rbar = mpu_get_rbar() &
    bedc:	f362 0304 	bfi	r3, r2, #0, #5
    bee0:	743b      	strb	r3, [r7, #16]
	return MPU->RLAR;
    bee2:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    bee6:	7c3a      	ldrb	r2, [r7, #16]
    bee8:	085b      	lsrs	r3, r3, #1
    beea:	f363 1247 	bfi	r2, r3, #5, #3
    beee:	743a      	strb	r2, [r7, #16]
			fill_region.base = regions[i].start +
    bef0:	e9d6 3200 	ldrd	r3, r2, [r6]
    bef4:	4413      	add	r3, r2
    bef6:	60bb      	str	r3, [r7, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    bef8:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    befc:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    befe:	4443      	add	r3, r8
    bf00:	eba3 030b 	sub.w	r3, r3, fp
				region_allocate_and_init(reg_index,
    bf04:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i].start +
    bf06:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    bf0a:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
    bf0c:	617b      	str	r3, [r7, #20]
    bf0e:	d902      	bls.n	bf16 <mpu_configure_regions_and_partition.constprop.0+0x182>
    bf10:	f7ff ff28 	bl	bd64 <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
    bf14:	e7b8      	b.n	be88 <mpu_configure_regions_and_partition.constprop.0+0xf4>
	region_init(index, region_conf);
    bf16:	f107 0108 	add.w	r1, r7, #8
    bf1a:	f7ff ff09 	bl	bd30 <region_init>
    bf1e:	e7b6      	b.n	be8e <mpu_configure_regions_and_partition.constprop.0+0xfa>
    bf20:	e000ed00 	.word	0xe000ed00
    bf24:	0001c477 	.word	0x0001c477
    bf28:	0001c454 	.word	0x0001c454
    bf2c:	0001b260 	.word	0x0001b260

0000bf30 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    bf30:	2205      	movs	r2, #5
    bf32:	4b04      	ldr	r3, [pc, #16]	; (bf44 <arm_core_mpu_enable+0x14>)
    bf34:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    bf38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    bf3c:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    bf40:	4770      	bx	lr
    bf42:	bf00      	nop
    bf44:	e000ed00 	.word	0xe000ed00

0000bf48 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    bf48:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    bf4c:	2200      	movs	r2, #0
    bf4e:	4b02      	ldr	r3, [pc, #8]	; (bf58 <arm_core_mpu_disable+0x10>)
    bf50:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    bf54:	4770      	bx	lr
    bf56:	bf00      	nop
    bf58:	e000ed00 	.word	0xe000ed00

0000bf5c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    bf5c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    bf5e:	4c03      	ldr	r4, [pc, #12]	; (bf6c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    bf60:	7822      	ldrb	r2, [r4, #0]
    bf62:	f7ff ff17 	bl	bd94 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    bf66:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    bf68:	bd10      	pop	{r4, pc}
    bf6a:	bf00      	nop
    bf6c:	20009b3e 	.word	0x20009b3e

0000bf70 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    bf70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bf74:	4d29      	ldr	r5, [pc, #164]	; (c01c <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
    bf76:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
    bf78:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    bf7a:	f04f 0800 	mov.w	r8, #0
    bf7e:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
    bf80:	4f27      	ldr	r7, [pc, #156]	; (c020 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    bf82:	45d0      	cmp	r8, sl
    bf84:	da1b      	bge.n	bfbe <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    bf86:	f8d6 9004 	ldr.w	r9, [r6, #4]
    bf8a:	f1b9 0f00 	cmp.w	r9, #0
    bf8e:	d03f      	beq.n	c010 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    bf90:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    bf92:	4608      	mov	r0, r1
    bf94:	9101      	str	r1, [sp, #4]
    bf96:	f00b fd56 	bl	17a46 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    bf9a:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    bf9c:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    bf9e:	eb09 0001 	add.w	r0, r9, r1
    bfa2:	3801      	subs	r0, #1
    bfa4:	f00b fd4f 	bl	17a46 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    bfa8:	4284      	cmp	r4, r0
    bfaa:	f04f 0214 	mov.w	r2, #20
    bfae:	4b1d      	ldr	r3, [pc, #116]	; (c024 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
    bfb0:	d008      	beq.n	bfc4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    bfb2:	fb02 f308 	mul.w	r3, r2, r8
    bfb6:	f06f 0215 	mvn.w	r2, #21
    bfba:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    bfbe:	b003      	add	sp, #12
    bfc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    bfc4:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    bfc8:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    bfca:	d0f8      	beq.n	bfbe <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    bfcc:	7819      	ldrb	r1, [r3, #0]
    bfce:	42a1      	cmp	r1, r4
    bfd0:	ddf5      	ble.n	bfbe <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
    bfd2:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
    bfd6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
    bfda:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
    bfde:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    bfe2:	f100 0108 	add.w	r1, r0, #8
    bfe6:	7b00      	ldrb	r0, [r0, #12]
    bfe8:	f364 0004 	bfi	r0, r4, #0, #5
    bfec:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
    bfee:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    bff2:	790c      	ldrb	r4, [r1, #4]
    bff4:	0840      	lsrs	r0, r0, #1
    bff6:	f360 1447 	bfi	r4, r0, #5, #3
    bffa:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
    bffc:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    c000:	f021 011f 	bic.w	r1, r1, #31
    c004:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
    c006:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    c00a:	f021 011f 	bic.w	r1, r1, #31
    c00e:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    c010:	f108 0801 	add.w	r8, r8, #1
    c014:	3514      	adds	r5, #20
    c016:	360c      	adds	r6, #12
    c018:	e7b3      	b.n	bf82 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    c01a:	bf00      	nop
    c01c:	20009764 	.word	0x20009764
    c020:	e000ed00 	.word	0xe000ed00
    c024:	20009b3e 	.word	0x20009b3e

0000c028 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    c028:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    c02a:	4d0e      	ldr	r5, [pc, #56]	; (c064 <z_arm_mpu_init+0x3c>)
    c02c:	682c      	ldr	r4, [r5, #0]
    c02e:	2c08      	cmp	r4, #8
    c030:	d815      	bhi.n	c05e <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    c032:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    c034:	f7ff ff88 	bl	bf48 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
    c038:	4b0b      	ldr	r3, [pc, #44]	; (c068 <z_arm_mpu_init+0x40>)
    c03a:	4a0c      	ldr	r2, [pc, #48]	; (c06c <z_arm_mpu_init+0x44>)
    c03c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    c040:	4284      	cmp	r4, r0
    c042:	d105      	bne.n	c050 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    c044:	4b0a      	ldr	r3, [pc, #40]	; (c070 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    c046:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    c048:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    c04a:	f7ff ff71 	bl	bf30 <arm_core_mpu_enable>
}
    c04e:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    c050:	6869      	ldr	r1, [r5, #4]
    c052:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    c056:	f7ff fe6b 	bl	bd30 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    c05a:	3001      	adds	r0, #1
    c05c:	e7f0      	b.n	c040 <z_arm_mpu_init+0x18>
		return -1;
    c05e:	f04f 30ff 	mov.w	r0, #4294967295
    c062:	e7f4      	b.n	c04e <z_arm_mpu_init+0x26>
    c064:	0001b5e8 	.word	0x0001b5e8
    c068:	e000ed00 	.word	0xe000ed00
    c06c:	0044ffaa 	.word	0x0044ffaa
    c070:	20009b3e 	.word	0x20009b3e

0000c074 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    c074:	4b01      	ldr	r3, [pc, #4]	; (c07c <__stdout_hook_install+0x8>)
    c076:	6018      	str	r0, [r3, #0]
}
    c078:	4770      	bx	lr
    c07a:	bf00      	nop
    c07c:	20008214 	.word	0x20008214

0000c080 <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    c080:	2000      	movs	r0, #0
    c082:	4b02      	ldr	r3, [pc, #8]	; (c08c <remoteproc_mgr_boot+0xc>)
    c084:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
    c088:	4770      	bx	lr
    c08a:	bf00      	nop
    c08c:	40005000 	.word	0x40005000

0000c090 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(void)
{
    c090:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    c092:	4804      	ldr	r0, [pc, #16]	; (c0a4 <xoshiro128_initialize+0x14>)
    c094:	f00e f8c5 	bl	1a222 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
    c098:	2800      	cmp	r0, #0
}
    c09a:	bf0c      	ite	eq
    c09c:	f06f 0012 	mvneq.w	r0, #18
    c0a0:	2000      	movne	r0, #0
    c0a2:	bd08      	pop	{r3, pc}
    c0a4:	0001ae7c 	.word	0x0001ae7c

0000c0a8 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    c0a8:	4b0e      	ldr	r3, [pc, #56]	; (c0e4 <bt_hex+0x3c>)
    c0aa:	2940      	cmp	r1, #64	; 0x40
    c0ac:	bf28      	it	cs
    c0ae:	2140      	movcs	r1, #64	; 0x40
{
    c0b0:	b570      	push	{r4, r5, r6, lr}
    c0b2:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
    c0b4:	4c0c      	ldr	r4, [pc, #48]	; (c0e8 <bt_hex+0x40>)
    c0b6:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
    c0b8:	42b0      	cmp	r0, r6
    c0ba:	f103 0302 	add.w	r3, r3, #2
    c0be:	d104      	bne.n	c0ca <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    c0c0:	2300      	movs	r3, #0
    c0c2:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    c0c6:	4807      	ldr	r0, [pc, #28]	; (c0e4 <bt_hex+0x3c>)
    c0c8:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
    c0ca:	7802      	ldrb	r2, [r0, #0]
    c0cc:	0912      	lsrs	r2, r2, #4
    c0ce:	5ca2      	ldrb	r2, [r4, r2]
    c0d0:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    c0d4:	f810 2b01 	ldrb.w	r2, [r0], #1
    c0d8:	f002 020f 	and.w	r2, r2, #15
    c0dc:	5ca2      	ldrb	r2, [r4, r2]
    c0de:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    c0e2:	e7e9      	b.n	c0b8 <bt_hex+0x10>
    c0e4:	20009b5d 	.word	0x20009b5d
    c0e8:	0001c521 	.word	0x0001c521

0000c0ec <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    c0ec:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    c0ee:	7803      	ldrb	r3, [r0, #0]
    c0f0:	b08b      	sub	sp, #44	; 0x2c
    c0f2:	4604      	mov	r4, r0
    c0f4:	ad07      	add	r5, sp, #28
    c0f6:	2b03      	cmp	r3, #3
    c0f8:	d821      	bhi.n	c13e <bt_addr_le_str+0x52>
    c0fa:	e8df f003 	tbb	[pc, r3]
    c0fe:	1a02      	.short	0x1a02
    c100:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    c102:	4912      	ldr	r1, [pc, #72]	; (c14c <bt_addr_le_str+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    c104:	4628      	mov	r0, r5
    c106:	f00b fcc7 	bl	17a98 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    c10a:	9505      	str	r5, [sp, #20]
    c10c:	7863      	ldrb	r3, [r4, #1]
    c10e:	211e      	movs	r1, #30
    c110:	9304      	str	r3, [sp, #16]
    c112:	78a3      	ldrb	r3, [r4, #2]
    c114:	4a0e      	ldr	r2, [pc, #56]	; (c150 <bt_addr_le_str+0x64>)
    c116:	9303      	str	r3, [sp, #12]
    c118:	78e3      	ldrb	r3, [r4, #3]
    c11a:	480e      	ldr	r0, [pc, #56]	; (c154 <bt_addr_le_str+0x68>)
    c11c:	9302      	str	r3, [sp, #8]
    c11e:	7923      	ldrb	r3, [r4, #4]
    c120:	9301      	str	r3, [sp, #4]
    c122:	7963      	ldrb	r3, [r4, #5]
    c124:	9300      	str	r3, [sp, #0]
    c126:	79a3      	ldrb	r3, [r4, #6]
    c128:	f00a f819 	bl	1615e <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    c12c:	4809      	ldr	r0, [pc, #36]	; (c154 <bt_addr_le_str+0x68>)
    c12e:	b00b      	add	sp, #44	; 0x2c
    c130:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    c132:	4909      	ldr	r1, [pc, #36]	; (c158 <bt_addr_le_str+0x6c>)
    c134:	e7e6      	b.n	c104 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
    c136:	4909      	ldr	r1, [pc, #36]	; (c15c <bt_addr_le_str+0x70>)
    c138:	e7e4      	b.n	c104 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
    c13a:	4909      	ldr	r1, [pc, #36]	; (c160 <bt_addr_le_str+0x74>)
    c13c:	e7e2      	b.n	c104 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    c13e:	210a      	movs	r1, #10
    c140:	4628      	mov	r0, r5
    c142:	4a08      	ldr	r2, [pc, #32]	; (c164 <bt_addr_le_str+0x78>)
    c144:	f00a f80b 	bl	1615e <snprintk>
		break;
    c148:	e7df      	b.n	c10a <bt_addr_le_str+0x1e>
    c14a:	bf00      	nop
    c14c:	0001c4dc 	.word	0x0001c4dc
    c150:	0001c4fe 	.word	0x0001c4fe
    c154:	20009b3f 	.word	0x20009b3f
    c158:	0001c4e3 	.word	0x0001c4e3
    c15c:	0001c4ea 	.word	0x0001c4ea
    c160:	0001c4f4 	.word	0x0001c4f4
    c164:	0001d470 	.word	0x0001d470

0000c168 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(void)
{
    c168:	b530      	push	{r4, r5, lr}

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    c16a:	2400      	movs	r4, #0

	k_work_queue_init(&bt_long_wq);
    c16c:	4d09      	ldr	r5, [pc, #36]	; (c194 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    c16e:	4b0a      	ldr	r3, [pc, #40]	; (c198 <long_wq_init+0x30>)
{
    c170:	b085      	sub	sp, #20
	k_work_queue_init(&bt_long_wq);
    c172:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    c174:	9302      	str	r3, [sp, #8]
    c176:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
    c178:	f00e fa8e 	bl	1a698 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
    c17c:	ab02      	add	r3, sp, #8
    c17e:	4628      	mov	r0, r5
    c180:	9300      	str	r3, [sp, #0]
    c182:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    c186:	230a      	movs	r3, #10
    c188:	4904      	ldr	r1, [pc, #16]	; (c19c <long_wq_init+0x34>)
    c18a:	f009 f88f 	bl	152ac <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
    c18e:	4620      	mov	r0, r4
    c190:	b005      	add	sp, #20
    c192:	bd30      	pop	{r4, r5, pc}
    c194:	20009010 	.word	0x20009010
    c198:	0001c532 	.word	0x0001c532
    c19c:	2000a6e8 	.word	0x2000a6e8

0000c1a0 <bt_long_wq_schedule>:
{
    c1a0:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
    c1a2:	4801      	ldr	r0, [pc, #4]	; (c1a8 <bt_long_wq_schedule+0x8>)
    c1a4:	f009 b8f8 	b.w	15398 <k_work_schedule_for_queue>
    c1a8:	20009010 	.word	0x20009010

0000c1ac <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    c1ac:	4603      	mov	r3, r0
    c1ae:	b430      	push	{r4, r5}
	switch (src->type) {
    c1b0:	781a      	ldrb	r2, [r3, #0]
{
    c1b2:	4608      	mov	r0, r1
	switch (src->type) {
    c1b4:	2a01      	cmp	r2, #1
    c1b6:	d013      	beq.n	c1e0 <uuid_to_uuid128+0x34>
    c1b8:	2a02      	cmp	r2, #2
    c1ba:	d026      	beq.n	c20a <uuid_to_uuid128+0x5e>
    c1bc:	b972      	cbnz	r2, c1dc <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    c1be:	4a15      	ldr	r2, [pc, #84]	; (c214 <uuid_to_uuid128+0x68>)
    c1c0:	f102 0410 	add.w	r4, r2, #16
    c1c4:	f852 5b04 	ldr.w	r5, [r2], #4
    c1c8:	42a2      	cmp	r2, r4
    c1ca:	f841 5b04 	str.w	r5, [r1], #4
    c1ce:	d1f9      	bne.n	c1c4 <uuid_to_uuid128+0x18>
    c1d0:	7812      	ldrb	r2, [r2, #0]
    c1d2:	700a      	strb	r2, [r1, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    c1d4:	885b      	ldrh	r3, [r3, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    c1d6:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    c1d8:	0a1b      	lsrs	r3, r3, #8
    c1da:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    c1dc:	bc30      	pop	{r4, r5}
    c1de:	4770      	bx	lr
		*dst = uuid128_base;
    c1e0:	4a0c      	ldr	r2, [pc, #48]	; (c214 <uuid_to_uuid128+0x68>)
    c1e2:	f102 0410 	add.w	r4, r2, #16
    c1e6:	f852 5b04 	ldr.w	r5, [r2], #4
    c1ea:	42a2      	cmp	r2, r4
    c1ec:	f841 5b04 	str.w	r5, [r1], #4
    c1f0:	d1f9      	bne.n	c1e6 <uuid_to_uuid128+0x3a>
    c1f2:	7812      	ldrb	r2, [r2, #0]
    c1f4:	700a      	strb	r2, [r1, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    c1f6:	685b      	ldr	r3, [r3, #4]
    c1f8:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    c1fc:	7343      	strb	r3, [r0, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    c1fe:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    c200:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    c202:	0a1b      	lsrs	r3, r3, #8
    c204:	7382      	strb	r2, [r0, #14]
    c206:	7403      	strb	r3, [r0, #16]
}
    c208:	e7e8      	b.n	c1dc <uuid_to_uuid128+0x30>
		memcpy(dst, src, sizeof(*dst));
    c20a:	2211      	movs	r2, #17
}
    c20c:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    c20e:	4619      	mov	r1, r3
    c210:	f00b bc9f 	b.w	17b52 <memcpy>
    c214:	0001c53b 	.word	0x0001c53b

0000c218 <bt_buf_get_rx>:
	     type == BT_BUF_ISO_IN) {
		return bt_iso_get_rx(timeout);
	}

#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	if (type == BT_BUF_EVT) {
    c218:	2801      	cmp	r0, #1
{
    c21a:	b538      	push	{r3, r4, r5, lr}
    c21c:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
    c21e:	bf0c      	ite	eq
    c220:	4806      	ldreq	r0, [pc, #24]	; (c23c <bt_buf_get_rx+0x24>)
    c222:	4807      	ldrne	r0, [pc, #28]	; (c240 <bt_buf_get_rx+0x28>)
    c224:	f00c ff67 	bl	190f6 <net_buf_alloc_fixed>
    c228:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    c22a:	b120      	cbz	r0, c236 <bt_buf_get_rx+0x1e>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
    c22c:	2101      	movs	r1, #1
    c22e:	300c      	adds	r0, #12
    c230:	f00c ffbd 	bl	191ae <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    c234:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    c236:	4620      	mov	r0, r4
    c238:	bd38      	pop	{r3, r4, r5, pc}
    c23a:	bf00      	nop
    c23c:	20008694 	.word	0x20008694
    c240:	20008610 	.word	0x20008610

0000c244 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    c244:	4602      	mov	r2, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    c246:	2000      	movs	r0, #0
    c248:	b570      	push	{r4, r5, r6, lr}
    c24a:	460b      	mov	r3, r1
    c24c:	490a      	ldr	r1, [pc, #40]	; (c278 <bt_buf_get_cmd_complete+0x34>)
    c24e:	e8d1 4fef 	ldaex	r4, [r1]
    c252:	e8c1 0fe5 	stlex	r5, r0, [r1]
    c256:	2d00      	cmp	r5, #0
    c258:	d1f9      	bne.n	c24e <bt_buf_get_cmd_complete+0xa>
	struct net_buf *buf;

	buf = (struct net_buf *)atomic_ptr_clear((atomic_ptr_t *)&bt_dev.sent_cmd);
	if (buf) {
    c25a:	b924      	cbnz	r4, c266 <bt_buf_get_cmd_complete+0x22>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    c25c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    c260:	2001      	movs	r0, #1
    c262:	f7ff bfd9 	b.w	c218 <bt_buf_get_rx>
    c266:	2101      	movs	r1, #1
		buf->len = 0U;
    c268:	8220      	strh	r0, [r4, #16]
    c26a:	7621      	strb	r1, [r4, #24]
    c26c:	f104 000c 	add.w	r0, r4, #12
    c270:	f00c ff9d 	bl	191ae <net_buf_simple_reserve>
}
    c274:	4620      	mov	r0, r4
    c276:	bd70      	pop	{r4, r5, r6, pc}
    c278:	20008138 	.word	0x20008138

0000c27c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    c27c:	b570      	push	{r4, r5, r6, lr}
    c27e:	4604      	mov	r4, r0
	switch (evt) {
    c280:	2c0f      	cmp	r4, #15
{
    c282:	460d      	mov	r5, r1
    c284:	4610      	mov	r0, r2
    c286:	4619      	mov	r1, r3
	switch (evt) {
    c288:	d805      	bhi.n	c296 <bt_buf_get_evt+0x1a>
    c28a:	2c0d      	cmp	r4, #13
    c28c:	d90d      	bls.n	c2aa <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    c28e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    c292:	f7ff bfd7 	b.w	c244 <bt_buf_get_cmd_complete>
	switch (evt) {
    c296:	2c13      	cmp	r4, #19
    c298:	d107      	bne.n	c2aa <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
    c29a:	480c      	ldr	r0, [pc, #48]	; (c2cc <bt_buf_get_evt+0x50>)
    c29c:	f00c ff2b 	bl	190f6 <net_buf_alloc_fixed>
			if (buf) {
    c2a0:	4604      	mov	r4, r0
    c2a2:	b938      	cbnz	r0, c2b4 <bt_buf_get_evt+0x38>
{
    c2a4:	2400      	movs	r4, #0
}
    c2a6:	4620      	mov	r0, r4
    c2a8:	bd70      	pop	{r4, r5, r6, pc}
    c2aa:	4602      	mov	r2, r0
    c2ac:	460b      	mov	r3, r1
		if (discardable) {
    c2ae:	b145      	cbz	r5, c2c2 <bt_buf_get_evt+0x46>
    c2b0:	4807      	ldr	r0, [pc, #28]	; (c2d0 <bt_buf_get_evt+0x54>)
    c2b2:	e7f3      	b.n	c29c <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
    c2b4:	2101      	movs	r1, #1
    c2b6:	300c      	adds	r0, #12
    c2b8:	f00c ff79 	bl	191ae <net_buf_simple_reserve>
    c2bc:	2301      	movs	r3, #1
    c2be:	7623      	strb	r3, [r4, #24]
}
    c2c0:	e7f1      	b.n	c2a6 <bt_buf_get_evt+0x2a>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    c2c2:	2001      	movs	r0, #1
}
    c2c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    c2c8:	f7ff bfa6 	b.w	c218 <bt_buf_get_rx>
    c2cc:	20008718 	.word	0x20008718
    c2d0:	20008668 	.word	0x20008668

0000c2d4 <ver_str>:
	sys_put_le64(mask, ev->events);
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static const char *ver_str(uint8_t ver)
{
    c2d4:	b570      	push	{r4, r5, r6, lr}
    c2d6:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
    c2d8:	466c      	mov	r4, sp
{
    c2da:	4606      	mov	r6, r0
	const char * const str[] = {
    c2dc:	4d0a      	ldr	r5, [pc, #40]	; (c308 <ver_str+0x34>)
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2", "5.3", "5.4"
	};

	if (ver < ARRAY_SIZE(str)) {
    c2de:	2e0d      	cmp	r6, #13
	const char * const str[] = {
    c2e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c2e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c2e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c2e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c2e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c2ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c2ec:	e895 0003 	ldmia.w	r5, {r0, r1}
    c2f0:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
    c2f4:	bf9d      	ittte	ls
    c2f6:	ab0e      	addls	r3, sp, #56	; 0x38
    c2f8:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
    c2fc:	f856 0c38 	ldrls.w	r0, [r6, #-56]
	}

	return "unknown";
    c300:	4802      	ldrhi	r0, [pc, #8]	; (c30c <ver_str+0x38>)
}
    c302:	b00e      	add	sp, #56	; 0x38
    c304:	bd70      	pop	{r4, r5, r6, pc}
    c306:	bf00      	nop
    c308:	0001b2f4 	.word	0x0001b2f4
    c30c:	0001c554 	.word	0x0001c554

0000c310 <hci_disconn_complete_prio>:
{
    c310:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    c312:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    c314:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
    c318:	781b      	ldrb	r3, [r3, #0]
    c31a:	b963      	cbnz	r3, c336 <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
    c31c:	4620      	mov	r0, r4
    c31e:	f002 fe5b 	bl	efd8 <bt_conn_lookup_handle>
	if (!conn) {
    c322:	4605      	mov	r5, r0
    c324:	b940      	cbnz	r0, c338 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
    c326:	4b08      	ldr	r3, [pc, #32]	; (c348 <hci_disconn_complete_prio+0x38>)
    c328:	881a      	ldrh	r2, [r3, #0]
    c32a:	b922      	cbnz	r2, c336 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
    c32c:	ea6f 5004 	mvn.w	r0, r4, lsl #20
    c330:	ea6f 5010 	mvn.w	r0, r0, lsr #20
    c334:	8018      	strh	r0, [r3, #0]
}
    c336:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    c338:	2101      	movs	r1, #1
    c33a:	f002 fe55 	bl	efe8 <bt_conn_set_state>
	bt_conn_unref(conn);
    c33e:	4628      	mov	r0, r5
}
    c340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    c344:	f00b bea1 	b.w	1808a <bt_conn_unref>
    c348:	20009b24 	.word	0x20009b24

0000c34c <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    c34c:	b510      	push	{r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    c34e:	4c08      	ldr	r4, [pc, #32]	; (c370 <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    c350:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    c352:	2205      	movs	r2, #5
    c354:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    c358:	f003 f850 	bl	f3fc <bt_conn_lookup_state_le>
		if (!conn) {
    c35c:	b938      	cbnz	r0, c36e <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    c35e:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    c362:	2204      	movs	r2, #4
}
    c364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    c368:	4902      	ldr	r1, [pc, #8]	; (c374 <find_pending_connect.part.0+0x28>)
    c36a:	f003 b847 	b.w	f3fc <bt_conn_lookup_state_le>
}
    c36e:	bd10      	pop	{r4, pc}
    c370:	20008000 	.word	0x20008000
    c374:	0001c4c2 	.word	0x0001c4c2

0000c378 <hci_data_buf_overflow>:
{
    c378:	b580      	push	{r7, lr}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    c37a:	68c3      	ldr	r3, [r0, #12]
{
    c37c:	af00      	add	r7, sp, #0
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    c37e:	b088      	sub	sp, #32
    c380:	466a      	mov	r2, sp
    c382:	781b      	ldrb	r3, [r3, #0]
    c384:	4906      	ldr	r1, [pc, #24]	; (c3a0 <hci_data_buf_overflow+0x28>)
    c386:	4807      	ldr	r0, [pc, #28]	; (c3a4 <hci_data_buf_overflow+0x2c>)
    c388:	e9c2 1305 	strd	r1, r3, [r2, #20]
    c38c:	2303      	movs	r3, #3
    c38e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    c392:	f842 3f10 	str.w	r3, [r2, #16]!
    c396:	f00b fc76 	bl	17c86 <z_log_msg_static_create.constprop.0>
}
    c39a:	46bd      	mov	sp, r7
    c39c:	bd80      	pop	{r7, pc}
    c39e:	bf00      	nop
    c3a0:	0001c55c 	.word	0x0001c55c
    c3a4:	0001b1e8 	.word	0x0001b1e8

0000c3a8 <le_conn_param_neg_reply.part.0>:
static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
    c3a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_ERR("Unable to allocate buffer");
    c3aa:	4b06      	ldr	r3, [pc, #24]	; (c3c4 <le_conn_param_neg_reply.part.0+0x1c>)
    c3ac:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c3b0:	9305      	str	r3, [sp, #20]
    c3b2:	2302      	movs	r3, #2
    c3b4:	4804      	ldr	r0, [pc, #16]	; (c3c8 <le_conn_param_neg_reply.part.0+0x20>)
    c3b6:	aa04      	add	r2, sp, #16
    c3b8:	9304      	str	r3, [sp, #16]
    c3ba:	f00b fc64 	bl	17c86 <z_log_msg_static_create.constprop.0>
}
    c3be:	b007      	add	sp, #28
    c3c0:	f85d fb04 	ldr.w	pc, [sp], #4
    c3c4:	0001c584 	.word	0x0001c584
    c3c8:	0001b1e8 	.word	0x0001b1e8

0000c3cc <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
    c3cc:	b598      	push	{r3, r4, r7, lr}
    c3ce:	4601      	mov	r1, r0
    c3d0:	af00      	add	r7, sp, #0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
    c3d2:	480d      	ldr	r0, [pc, #52]	; (c408 <rx_queue_put+0x3c>)
    c3d4:	f00c fe96 	bl	19104 <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
    c3d8:	490c      	ldr	r1, [pc, #48]	; (c40c <rx_queue_put+0x40>)
    c3da:	480d      	ldr	r0, [pc, #52]	; (c410 <rx_queue_put+0x44>)
    c3dc:	f00e f94b 	bl	1a676 <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
    c3e0:	2800      	cmp	r0, #0
    c3e2:	da0e      	bge.n	c402 <rx_queue_put+0x36>
		LOG_ERR("Could not submit rx_work: %d", err);
    c3e4:	466c      	mov	r4, sp
    c3e6:	b088      	sub	sp, #32
    c3e8:	466a      	mov	r2, sp
    c3ea:	4b0a      	ldr	r3, [pc, #40]	; (c414 <rx_queue_put+0x48>)
    c3ec:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c3f0:	e9c2 3005 	strd	r3, r0, [r2, #20]
    c3f4:	2303      	movs	r3, #3
    c3f6:	4808      	ldr	r0, [pc, #32]	; (c418 <rx_queue_put+0x4c>)
    c3f8:	f842 3f10 	str.w	r3, [r2, #16]!
    c3fc:	f00b fc43 	bl	17c86 <z_log_msg_static_create.constprop.0>
    c400:	46a5      	mov	sp, r4
	}
}
    c402:	46bd      	mov	sp, r7
    c404:	bd98      	pop	{r3, r4, r7, pc}
    c406:	bf00      	nop
    c408:	2000813c 	.word	0x2000813c
    c40c:	20008254 	.word	0x20008254
    c410:	20009140 	.word	0x20009140
    c414:	0001c59e 	.word	0x0001c59e
    c418:	0001b1e8 	.word	0x0001b1e8

0000c41c <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
    c41c:	460b      	mov	r3, r1
    c41e:	b5b0      	push	{r4, r5, r7, lr}
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
    c420:	8a0d      	ldrh	r5, [r1, #16]
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
    c422:	af00      	add	r7, sp, #0
    c424:	4604      	mov	r4, r0
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
    c426:	4629      	mov	r1, r5
    c428:	68d8      	ldr	r0, [r3, #12]
    c42a:	f7ff fe3d 	bl	c0a8 <bt_hex>
    c42e:	b08a      	sub	sp, #40	; 0x28
    c430:	466a      	mov	r2, sp
    c432:	4b09      	ldr	r3, [pc, #36]	; (c458 <handle_event.part.0+0x3c>)
    c434:	e9c2 5007 	strd	r5, r0, [r2, #28]
    c438:	e9c2 3405 	strd	r3, r4, [r2, #20]
    c43c:	f240 4302 	movw	r3, #1026	; 0x402
    c440:	8493      	strh	r3, [r2, #36]	; 0x24
    c442:	4b06      	ldr	r3, [pc, #24]	; (c45c <handle_event.part.0+0x40>)
    c444:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
    c448:	4805      	ldr	r0, [pc, #20]	; (c460 <handle_event.part.0+0x44>)
    c44a:	f842 3f10 	str.w	r3, [r2, #16]!
    c44e:	f00b fc1a 	bl	17c86 <z_log_msg_static_create.constprop.0>
}
    c452:	46bd      	mov	sp, r7
    c454:	bdb0      	pop	{r4, r5, r7, pc}
    c456:	bf00      	nop
    c458:	0001c5bb 	.word	0x0001c5bb
    c45c:	01000005 	.word	0x01000005
    c460:	0001b1e8 	.word	0x0001b1e8

0000c464 <hci_hardware_error>:
{
    c464:	b580      	push	{r7, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    c466:	2101      	movs	r1, #1
    c468:	af00      	add	r7, sp, #0
    c46a:	300c      	adds	r0, #12
    c46c:	f00c fed3 	bl	19216 <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    c470:	b088      	sub	sp, #32
    c472:	466a      	mov	r2, sp
    c474:	7803      	ldrb	r3, [r0, #0]
    c476:	4906      	ldr	r1, [pc, #24]	; (c490 <hci_hardware_error+0x2c>)
    c478:	4806      	ldr	r0, [pc, #24]	; (c494 <hci_hardware_error+0x30>)
    c47a:	e9c2 1305 	strd	r1, r3, [r2, #20]
    c47e:	2303      	movs	r3, #3
    c480:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c484:	f842 3f10 	str.w	r3, [r2, #16]!
    c488:	f00b fbfd 	bl	17c86 <z_log_msg_static_create.constprop.0>
}
    c48c:	46bd      	mov	sp, r7
    c48e:	bd80      	pop	{r7, pc}
    c490:	0001c5dd 	.word	0x0001c5dd
    c494:	0001b1e8 	.word	0x0001b1e8

0000c498 <le_data_len_change>:
{
    c498:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    c49a:	68c3      	ldr	r3, [r0, #12]
{
    c49c:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    c49e:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    c4a0:	4620      	mov	r0, r4
    c4a2:	f002 fd99 	bl	efd8 <bt_conn_lookup_handle>
	if (!conn) {
    c4a6:	b980      	cbnz	r0, c4ca <le_data_len_change+0x32>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
    c4a8:	466d      	mov	r5, sp
    c4aa:	b088      	sub	sp, #32
    c4ac:	466a      	mov	r2, sp
    c4ae:	4b08      	ldr	r3, [pc, #32]	; (c4d0 <le_data_len_change+0x38>)
    c4b0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c4b4:	e9c2 3405 	strd	r3, r4, [r2, #20]
    c4b8:	2303      	movs	r3, #3
    c4ba:	4806      	ldr	r0, [pc, #24]	; (c4d4 <le_data_len_change+0x3c>)
    c4bc:	f842 3f10 	str.w	r3, [r2, #16]!
    c4c0:	f00b fbe1 	bl	17c86 <z_log_msg_static_create.constprop.0>
    c4c4:	46ad      	mov	sp, r5
}
    c4c6:	46bd      	mov	sp, r7
    c4c8:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
    c4ca:	f00b fdde 	bl	1808a <bt_conn_unref>
    c4ce:	e7fa      	b.n	c4c6 <le_data_len_change+0x2e>
    c4d0:	0001c5ff 	.word	0x0001c5ff
    c4d4:	0001b1e8 	.word	0x0001b1e8

0000c4d8 <le_phy_update_complete>:
{
    c4d8:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    c4da:	68c3      	ldr	r3, [r0, #12]
{
    c4dc:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    c4de:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    c4e2:	4620      	mov	r0, r4
    c4e4:	f002 fd78 	bl	efd8 <bt_conn_lookup_handle>
	if (!conn) {
    c4e8:	b980      	cbnz	r0, c50c <le_phy_update_complete+0x34>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
    c4ea:	466d      	mov	r5, sp
    c4ec:	b088      	sub	sp, #32
    c4ee:	466a      	mov	r2, sp
    c4f0:	4b08      	ldr	r3, [pc, #32]	; (c514 <le_phy_update_complete+0x3c>)
    c4f2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c4f6:	e9c2 3405 	strd	r3, r4, [r2, #20]
    c4fa:	2303      	movs	r3, #3
    c4fc:	4806      	ldr	r0, [pc, #24]	; (c518 <le_phy_update_complete+0x40>)
    c4fe:	f842 3f10 	str.w	r3, [r2, #16]!
    c502:	f00b fbc0 	bl	17c86 <z_log_msg_static_create.constprop.0>
    c506:	46ad      	mov	sp, r5
}
    c508:	46bd      	mov	sp, r7
    c50a:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
    c50c:	f00b fdbd 	bl	1808a <bt_conn_unref>
    c510:	e7fa      	b.n	c508 <le_phy_update_complete+0x30>
    c512:	bf00      	nop
    c514:	0001c5ff 	.word	0x0001c5ff
    c518:	0001b1e8 	.word	0x0001b1e8

0000c51c <hci_disconn_complete>:
{
    c51c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    c520:	68c5      	ldr	r5, [r0, #12]
{
    c522:	af00      	add	r7, sp, #0
	if (evt->status) {
    c524:	782e      	ldrb	r6, [r5, #0]
    c526:	b9ae      	cbnz	r6, c554 <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    c528:	f8b5 8001 	ldrh.w	r8, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    c52c:	4640      	mov	r0, r8
    c52e:	f002 fd53 	bl	efd8 <bt_conn_lookup_handle>
	if (!conn) {
    c532:	4604      	mov	r4, r0
    c534:	b988      	cbnz	r0, c55a <hci_disconn_complete+0x3e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
    c536:	466c      	mov	r4, sp
    c538:	b088      	sub	sp, #32
    c53a:	466a      	mov	r2, sp
    c53c:	4b0b      	ldr	r3, [pc, #44]	; (c56c <hci_disconn_complete+0x50>)
    c53e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c542:	e9c2 3805 	strd	r3, r8, [r2, #20]
    c546:	2303      	movs	r3, #3
    c548:	4809      	ldr	r0, [pc, #36]	; (c570 <hci_disconn_complete+0x54>)
    c54a:	f842 3f10 	str.w	r3, [r2, #16]!
    c54e:	f00b fb9a 	bl	17c86 <z_log_msg_static_create.constprop.0>
    c552:	46a5      	mov	sp, r4
}
    c554:	46bd      	mov	sp, r7
    c556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
    c55a:	78eb      	ldrb	r3, [r5, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    c55c:	4631      	mov	r1, r6
	conn->err = evt->reason;
    c55e:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    c560:	f002 fd42 	bl	efe8 <bt_conn_set_state>
		bt_conn_unref(conn);
    c564:	4620      	mov	r0, r4
	bt_conn_unref(conn);
    c566:	f00b fd90 	bl	1808a <bt_conn_unref>
    c56a:	e7f3      	b.n	c554 <hci_disconn_complete+0x38>
    c56c:	0001c623 	.word	0x0001c623
    c570:	0001b1e8 	.word	0x0001b1e8

0000c574 <handle_event>:
{
    c574:	b5b0      	push	{r4, r5, r7, lr}
    c576:	4604      	mov	r4, r0
    c578:	af00      	add	r7, sp, #0
    c57a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	for (i = 0; i < num_handlers; i++) {
    c57e:	4293      	cmp	r3, r2
    c580:	d103      	bne.n	c58a <handle_event+0x16>
	if (err == -EOPNOTSUPP) {
    c582:	4620      	mov	r0, r4
    c584:	f7ff ff4a 	bl	c41c <handle_event.part.0>
}
    c588:	e018      	b.n	c5bc <handle_event+0x48>
		if (handler->event != event) {
    c58a:	4610      	mov	r0, r2
    c58c:	f810 5b08 	ldrb.w	r5, [r0], #8
    c590:	42a5      	cmp	r5, r4
    c592:	d119      	bne.n	c5c8 <handle_event+0x54>
		if (buf->len < handler->min_len) {
    c594:	8a0b      	ldrh	r3, [r1, #16]
    c596:	7850      	ldrb	r0, [r2, #1]
    c598:	4298      	cmp	r0, r3
    c59a:	d911      	bls.n	c5c0 <handle_event+0x4c>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
    c59c:	466d      	mov	r5, sp
    c59e:	b088      	sub	sp, #32
    c5a0:	466a      	mov	r2, sp
    c5a2:	490a      	ldr	r1, [pc, #40]	; (c5cc <handle_event+0x58>)
    c5a4:	61d4      	str	r4, [r2, #28]
    c5a6:	e9c2 1305 	strd	r1, r3, [r2, #20]
    c5aa:	2304      	movs	r3, #4
    c5ac:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    c5b0:	4807      	ldr	r0, [pc, #28]	; (c5d0 <handle_event+0x5c>)
    c5b2:	f842 3f10 	str.w	r3, [r2, #16]!
    c5b6:	f00b fb66 	bl	17c86 <z_log_msg_static_create.constprop.0>
    c5ba:	46ad      	mov	sp, r5
}
    c5bc:	46bd      	mov	sp, r7
    c5be:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
    c5c0:	4608      	mov	r0, r1
    c5c2:	6853      	ldr	r3, [r2, #4]
    c5c4:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
    c5c6:	e7f9      	b.n	c5bc <handle_event+0x48>
    c5c8:	4602      	mov	r2, r0
    c5ca:	e7d8      	b.n	c57e <handle_event+0xa>
    c5cc:	0001c649 	.word	0x0001c649
    c5d0:	0001b1e8 	.word	0x0001b1e8

0000c5d4 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
    c5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
    c5d6:	4855      	ldr	r0, [pc, #340]	; (c72c <rx_work_handler+0x158>)
{
    c5d8:	af00      	add	r7, sp, #0
	buf = net_buf_slist_get(&bt_dev.rx_queue);
    c5da:	f00c fda9 	bl	19130 <net_buf_slist_get>
	if (!buf) {
    c5de:	4604      	mov	r4, r0
    c5e0:	2800      	cmp	r0, #0
    c5e2:	d06a      	beq.n	c6ba <rx_work_handler+0xe6>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    c5e4:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
    c5e6:	2b01      	cmp	r3, #1
    c5e8:	d069      	beq.n	c6be <rx_work_handler+0xea>
    c5ea:	2b03      	cmp	r3, #3
    c5ec:	f040 8099 	bne.w	c722 <rx_work_handler+0x14e>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    c5f0:	8a03      	ldrh	r3, [r0, #16]
    c5f2:	2b03      	cmp	r3, #3
    c5f4:	d80c      	bhi.n	c610 <rx_work_handler+0x3c>
    c5f6:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
    c5fa:	4a4d      	ldr	r2, [pc, #308]	; (c730 <rx_work_handler+0x15c>)
    c5fc:	494d      	ldr	r1, [pc, #308]	; (c734 <rx_work_handler+0x160>)
    c5fe:	484e      	ldr	r0, [pc, #312]	; (c738 <rx_work_handler+0x164>)
    c600:	f00a f8ce 	bl	167a0 <assert_print>
    c604:	4040      	eors	r0, r0
    c606:	f380 8811 	msr	BASEPRI, r0
    c60a:	f04f 0003 	mov.w	r0, #3
    c60e:	df02      	svc	2
    c610:	2104      	movs	r1, #4
    c612:	f104 000c 	add.w	r0, r4, #12
    c616:	f00c fdfe 	bl	19216 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    c61a:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    c61c:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    c61e:	8806      	ldrh	r6, [r0, #0]
	if (buf->len != len) {
    c620:	8a21      	ldrh	r1, [r4, #16]
	acl(buf)->handle = bt_acl_handle(handle);
    c622:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    c626:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
    c628:	8360      	strh	r0, [r4, #26]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    c62a:	7662      	strb	r2, [r4, #25]
	if (buf->len != len) {
    c62c:	d010      	beq.n	c650 <rx_work_handler+0x7c>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    c62e:	466d      	mov	r5, sp
    c630:	b088      	sub	sp, #32
    c632:	466a      	mov	r2, sp
    c634:	4841      	ldr	r0, [pc, #260]	; (c73c <rx_work_handler+0x168>)
    c636:	61d3      	str	r3, [r2, #28]
    c638:	2304      	movs	r3, #4
    c63a:	e9c2 0105 	strd	r0, r1, [r2, #20]
    c63e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    c642:	f842 3f10 	str.w	r3, [r2, #16]!
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    c646:	483e      	ldr	r0, [pc, #248]	; (c740 <rx_work_handler+0x16c>)
    c648:	f00b fb1d 	bl	17c86 <z_log_msg_static_create.constprop.0>
    c64c:	46ad      	mov	sp, r5
    c64e:	e064      	b.n	c71a <rx_work_handler+0x146>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    c650:	f002 fcc2 	bl	efd8 <bt_conn_lookup_handle>
	if (!conn) {
    c654:	4605      	mov	r5, r0
    c656:	b960      	cbnz	r0, c672 <rx_work_handler+0x9e>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    c658:	466d      	mov	r5, sp
    c65a:	b088      	sub	sp, #32
    c65c:	8b63      	ldrh	r3, [r4, #26]
    c65e:	466a      	mov	r2, sp
    c660:	4938      	ldr	r1, [pc, #224]	; (c744 <rx_work_handler+0x170>)
	switch (bt_buf_get_type(buf)) {
    c662:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    c666:	2303      	movs	r3, #3
    c668:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c66c:	f842 3f10 	str.w	r3, [r2, #16]!
    c670:	e7e9      	b.n	c646 <rx_work_handler+0x72>
	acl(buf)->index = bt_conn_index(conn);
    c672:	f002 fdb7 	bl	f1e4 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    c676:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
    c678:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
    c67a:	0b32      	lsrs	r2, r6, #12
    c67c:	4628      	mov	r0, r5
    c67e:	f002 fb55 	bl	ed2c <bt_conn_recv>
	bt_conn_unref(conn);
    c682:	4628      	mov	r0, r5
    c684:	f00b fd01 	bl	1808a <bt_conn_unref>
	return list->head;
    c688:	4b2f      	ldr	r3, [pc, #188]	; (c748 <rx_work_handler+0x174>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
    c68a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    c68e:	b1a3      	cbz	r3, c6ba <rx_work_handler+0xe6>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
    c690:	492e      	ldr	r1, [pc, #184]	; (c74c <rx_work_handler+0x178>)
    c692:	482f      	ldr	r0, [pc, #188]	; (c750 <rx_work_handler+0x17c>)
    c694:	f00d ffef 	bl	1a676 <k_work_submit_to_queue>
#endif
		if (err < 0) {
    c698:	2800      	cmp	r0, #0
    c69a:	da0e      	bge.n	c6ba <rx_work_handler+0xe6>
			LOG_ERR("Could not submit rx_work: %d", err);
    c69c:	466c      	mov	r4, sp
    c69e:	b088      	sub	sp, #32
    c6a0:	466a      	mov	r2, sp
    c6a2:	4b2c      	ldr	r3, [pc, #176]	; (c754 <rx_work_handler+0x180>)
    c6a4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c6a8:	e9c2 3005 	strd	r3, r0, [r2, #20]
    c6ac:	2303      	movs	r3, #3
    c6ae:	4824      	ldr	r0, [pc, #144]	; (c740 <rx_work_handler+0x16c>)
    c6b0:	f842 3f10 	str.w	r3, [r2, #16]!
    c6b4:	f00b fae7 	bl	17c86 <z_log_msg_static_create.constprop.0>
    c6b8:	46a5      	mov	sp, r4
		}
	}
}
    c6ba:	46bd      	mov	sp, r7
    c6bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    c6be:	8a03      	ldrh	r3, [r0, #16]
    c6c0:	2b01      	cmp	r3, #1
    c6c2:	d80c      	bhi.n	c6de <rx_work_handler+0x10a>
    c6c4:	f640 2347 	movw	r3, #2631	; 0xa47
    c6c8:	4a19      	ldr	r2, [pc, #100]	; (c730 <rx_work_handler+0x15c>)
    c6ca:	491a      	ldr	r1, [pc, #104]	; (c734 <rx_work_handler+0x160>)
    c6cc:	481a      	ldr	r0, [pc, #104]	; (c738 <rx_work_handler+0x164>)
    c6ce:	f00a f867 	bl	167a0 <assert_print>
    c6d2:	4040      	eors	r0, r0
    c6d4:	f380 8811 	msr	BASEPRI, r0
    c6d8:	f04f 0003 	mov.w	r0, #3
    c6dc:	df02      	svc	2
    c6de:	2102      	movs	r1, #2
    c6e0:	f104 000c 	add.w	r0, r4, #12
    c6e4:	f00c fd97 	bl	19216 <net_buf_simple_pull_mem>
    c6e8:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    c6ea:	7800      	ldrb	r0, [r0, #0]
    c6ec:	f00b faad 	bl	17c4a <bt_hci_evt_get_flags>
    c6f0:	0783      	lsls	r3, r0, #30
    c6f2:	d40c      	bmi.n	c70e <rx_work_handler+0x13a>
    c6f4:	f640 234b 	movw	r3, #2635	; 0xa4b
    c6f8:	4a0d      	ldr	r2, [pc, #52]	; (c730 <rx_work_handler+0x15c>)
    c6fa:	4917      	ldr	r1, [pc, #92]	; (c758 <rx_work_handler+0x184>)
    c6fc:	480e      	ldr	r0, [pc, #56]	; (c738 <rx_work_handler+0x164>)
    c6fe:	f00a f84f 	bl	167a0 <assert_print>
    c702:	4040      	eors	r0, r0
    c704:	f380 8811 	msr	BASEPRI, r0
    c708:	f04f 0003 	mov.w	r0, #3
    c70c:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    c70e:	2304      	movs	r3, #4
    c710:	4621      	mov	r1, r4
    c712:	4a12      	ldr	r2, [pc, #72]	; (c75c <rx_work_handler+0x188>)
    c714:	7828      	ldrb	r0, [r5, #0]
    c716:	f7ff ff2d 	bl	c574 <handle_event>
		net_buf_unref(buf);
    c71a:	4620      	mov	r0, r4
    c71c:	f005 f93e 	bl	1199c <net_buf_unref>
		break;
    c720:	e7b2      	b.n	c688 <rx_work_handler+0xb4>
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    c722:	466d      	mov	r5, sp
    c724:	b088      	sub	sp, #32
    c726:	466a      	mov	r2, sp
    c728:	490d      	ldr	r1, [pc, #52]	; (c760 <rx_work_handler+0x18c>)
    c72a:	e79a      	b.n	c662 <rx_work_handler+0x8e>
    c72c:	2000813c 	.word	0x2000813c
    c730:	0001c66b 	.word	0x0001c66b
    c734:	0001c69f 	.word	0x0001c69f
    c738:	0001c6b8 	.word	0x0001c6b8
    c73c:	0001c6d5 	.word	0x0001c6d5
    c740:	0001b1e8 	.word	0x0001b1e8
    c744:	0001c6f9 	.word	0x0001c6f9
    c748:	20008000 	.word	0x20008000
    c74c:	20008254 	.word	0x20008254
    c750:	20009140 	.word	0x20009140
    c754:	0001c59e 	.word	0x0001c59e
    c758:	0001c71b 	.word	0x0001c71b
    c75c:	0001b6a8 	.word	0x0001b6a8
    c760:	0001c749 	.word	0x0001c749

0000c764 <hci_le_meta_event>:
{
    c764:	b510      	push	{r4, lr}
    c766:	2101      	movs	r1, #1
    c768:	4604      	mov	r4, r0
    c76a:	300c      	adds	r0, #12
    c76c:	f00c fd53 	bl	19216 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    c770:	4621      	mov	r1, r4
}
    c772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    c776:	2307      	movs	r3, #7
    c778:	4a01      	ldr	r2, [pc, #4]	; (c780 <hci_le_meta_event+0x1c>)
    c77a:	7800      	ldrb	r0, [r0, #0]
    c77c:	f7ff befa 	b.w	c574 <handle_event>
    c780:	0001b6c8 	.word	0x0001b6c8

0000c784 <le_remote_feat_complete>:
{
    c784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    c786:	68c5      	ldr	r5, [r0, #12]
{
    c788:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    c78a:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    c78e:	4630      	mov	r0, r6
    c790:	f002 fc22 	bl	efd8 <bt_conn_lookup_handle>
	if (!conn) {
    c794:	4604      	mov	r4, r0
    c796:	b980      	cbnz	r0, c7ba <le_remote_feat_complete+0x36>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
    c798:	466c      	mov	r4, sp
    c79a:	b088      	sub	sp, #32
    c79c:	466a      	mov	r2, sp
    c79e:	4b0f      	ldr	r3, [pc, #60]	; (c7dc <le_remote_feat_complete+0x58>)
    c7a0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c7a4:	e9c2 3605 	strd	r3, r6, [r2, #20]
    c7a8:	2303      	movs	r3, #3
    c7aa:	480d      	ldr	r0, [pc, #52]	; (c7e0 <le_remote_feat_complete+0x5c>)
    c7ac:	f842 3f10 	str.w	r3, [r2, #16]!
    c7b0:	f00b fa69 	bl	17c86 <z_log_msg_static_create.constprop.0>
    c7b4:	46a5      	mov	sp, r4
}
    c7b6:	46bd      	mov	sp, r7
    c7b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
    c7ba:	782b      	ldrb	r3, [r5, #0]
    c7bc:	b923      	cbnz	r3, c7c8 <le_remote_feat_complete+0x44>
		memcpy(conn->le.features, evt->features,
    c7be:	2208      	movs	r2, #8
    c7c0:	1ce9      	adds	r1, r5, #3
    c7c2:	30ad      	adds	r0, #173	; 0xad
    c7c4:	f00b f9c5 	bl	17b52 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    c7c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    c7cc:	1d20      	adds	r0, r4, #4
    c7ce:	f00b fa4f 	bl	17c70 <atomic_or>
	bt_conn_unref(conn);
    c7d2:	4620      	mov	r0, r4
    c7d4:	f00b fc59 	bl	1808a <bt_conn_unref>
    c7d8:	e7ed      	b.n	c7b6 <le_remote_feat_complete+0x32>
    c7da:	bf00      	nop
    c7dc:	0001c5ff 	.word	0x0001c5ff
    c7e0:	0001b1e8 	.word	0x0001b1e8

0000c7e4 <hci_cmd_done>:
{
    c7e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c7e8:	4606      	mov	r6, r0
    c7ea:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    c7ec:	7a90      	ldrb	r0, [r2, #10]
{
    c7ee:	4688      	mov	r8, r1
    c7f0:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    c7f2:	f005 f811 	bl	11818 <net_buf_pool_get>
    c7f6:	4d41      	ldr	r5, [pc, #260]	; (c8fc <hci_cmd_done+0x118>)
    c7f8:	4285      	cmp	r5, r0
    c7fa:	d018      	beq.n	c82e <hci_cmd_done+0x4a>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
    c7fc:	7aa4      	ldrb	r4, [r4, #10]
    c7fe:	46e8      	mov	r8, sp
    c800:	4620      	mov	r0, r4
    c802:	f005 f809 	bl	11818 <net_buf_pool_get>
    c806:	b08a      	sub	sp, #40	; 0x28
    c808:	466a      	mov	r2, sp
    c80a:	4b3d      	ldr	r3, [pc, #244]	; (c900 <hci_cmd_done+0x11c>)
    c80c:	e9c2 4007 	strd	r4, r0, [r2, #28]
    c810:	e9c2 3605 	strd	r3, r6, [r2, #20]
    c814:	2306      	movs	r3, #6
    c816:	6255      	str	r5, [r2, #36]	; 0x24
    c818:	f44f 5142 	mov.w	r1, #12416	; 0x3080
    c81c:	4839      	ldr	r0, [pc, #228]	; (c904 <hci_cmd_done+0x120>)
    c81e:	f842 3f10 	str.w	r3, [r2, #16]!
    c822:	f00b fa30 	bl	17c86 <z_log_msg_static_create.constprop.0>
    c826:	46c5      	mov	sp, r8
}
    c828:	46bd      	mov	sp, r7
    c82a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    c82e:	4620      	mov	r0, r4
    c830:	f004 fffa 	bl	11828 <net_buf_id>
    c834:	f04f 090c 	mov.w	r9, #12
    c838:	4d33      	ldr	r5, [pc, #204]	; (c908 <hci_cmd_done+0x124>)
    c83a:	fb09 5000 	mla	r0, r9, r0, r5
    c83e:	8843      	ldrh	r3, [r0, #2]
    c840:	42b3      	cmp	r3, r6
    c842:	d016      	beq.n	c872 <hci_cmd_done+0x8e>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
    c844:	4620      	mov	r0, r4
    c846:	f004 ffef 	bl	11828 <net_buf_id>
    c84a:	fb09 5000 	mla	r0, r9, r0, r5
    c84e:	466c      	mov	r4, sp
    c850:	b088      	sub	sp, #32
    c852:	466a      	mov	r2, sp
    c854:	8843      	ldrh	r3, [r0, #2]
    c856:	61d3      	str	r3, [r2, #28]
    c858:	2304      	movs	r3, #4
    c85a:	492c      	ldr	r1, [pc, #176]	; (c90c <hci_cmd_done+0x128>)
    c85c:	4829      	ldr	r0, [pc, #164]	; (c904 <hci_cmd_done+0x120>)
    c85e:	e9c2 1605 	strd	r1, r6, [r2, #20]
    c862:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    c866:	f842 3f10 	str.w	r3, [r2, #16]!
    c86a:	f00b fa0c 	bl	17c86 <z_log_msg_static_create.constprop.0>
    c86e:	46a5      	mov	sp, r4
		return;
    c870:	e7da      	b.n	c828 <hci_cmd_done+0x44>
	if (bt_dev.sent_cmd) {
    c872:	4e27      	ldr	r6, [pc, #156]	; (c910 <hci_cmd_done+0x12c>)
    c874:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
    c878:	b120      	cbz	r0, c884 <hci_cmd_done+0xa0>
		net_buf_unref(bt_dev.sent_cmd);
    c87a:	f005 f88f 	bl	1199c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    c87e:	2300      	movs	r3, #0
    c880:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
    c884:	4620      	mov	r0, r4
    c886:	f004 ffcf 	bl	11828 <net_buf_id>
    c88a:	260c      	movs	r6, #12
    c88c:	fb06 5000 	mla	r0, r6, r0, r5
    c890:	6843      	ldr	r3, [r0, #4]
    c892:	b1ab      	cbz	r3, c8c0 <hci_cmd_done+0xdc>
    c894:	f1b8 0f00 	cmp.w	r8, #0
    c898:	d112      	bne.n	c8c0 <hci_cmd_done+0xdc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    c89a:	4620      	mov	r0, r4
    c89c:	f004 ffc4 	bl	11828 <net_buf_id>
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    c8a0:	2101      	movs	r1, #1
    c8a2:	fb06 5000 	mla	r0, r6, r0, r5
    c8a6:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    c8a8:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
    c8ac:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
    c8ae:	f003 061f 	and.w	r6, r3, #31
    c8b2:	40b1      	lsls	r1, r6
	if (val) {
    c8b4:	095b      	lsrs	r3, r3, #5
    c8b6:	b1da      	cbz	r2, c8f0 <hci_cmd_done+0x10c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    c8b8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    c8bc:	f00b f9d8 	bl	17c70 <atomic_or>
	if (cmd(buf)->sync) {
    c8c0:	4620      	mov	r0, r4
    c8c2:	f004 ffb1 	bl	11828 <net_buf_id>
    c8c6:	260c      	movs	r6, #12
    c8c8:	fb06 5000 	mla	r0, r6, r0, r5
    c8cc:	6883      	ldr	r3, [r0, #8]
    c8ce:	2b00      	cmp	r3, #0
    c8d0:	d0aa      	beq.n	c828 <hci_cmd_done+0x44>
		cmd(buf)->status = status;
    c8d2:	4620      	mov	r0, r4
    c8d4:	f004 ffa8 	bl	11828 <net_buf_id>
    c8d8:	4370      	muls	r0, r6
    c8da:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    c8de:	4620      	mov	r0, r4
    c8e0:	f004 ffa2 	bl	11828 <net_buf_id>
    c8e4:	fb06 5500 	mla	r5, r6, r0, r5
    c8e8:	68a8      	ldr	r0, [r5, #8]
    c8ea:	f008 fb5d 	bl	14fa8 <z_impl_k_sem_give>
}
    c8ee:	e79b      	b.n	c828 <hci_cmd_done+0x44>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c8f0:	43c9      	mvns	r1, r1
    c8f2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    c8f6:	f00b f9c9 	bl	17c8c <atomic_and.isra.0>
    c8fa:	e7e1      	b.n	c8c0 <hci_cmd_done+0xdc>
    c8fc:	200086ec 	.word	0x200086ec
    c900:	0001c75d 	.word	0x0001c75d
    c904:	0001b1e8 	.word	0x0001b1e8
    c908:	20009778 	.word	0x20009778
    c90c:	0001c792 	.word	0x0001c792
    c910:	20008000 	.word	0x20008000

0000c914 <hci_cmd_status>:
{
    c914:	b538      	push	{r3, r4, r5, lr}
    c916:	2104      	movs	r1, #4
    c918:	4604      	mov	r4, r0
    c91a:	300c      	adds	r0, #12
    c91c:	f00c fc7b 	bl	19216 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    c920:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    c922:	7801      	ldrb	r1, [r0, #0]
    c924:	4622      	mov	r2, r4
    c926:	8840      	ldrh	r0, [r0, #2]
    c928:	f7ff ff5c 	bl	c7e4 <hci_cmd_done>
	if (ncmd) {
    c92c:	b125      	cbz	r5, c938 <hci_cmd_status+0x24>
}
    c92e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
    c932:	4802      	ldr	r0, [pc, #8]	; (c93c <hci_cmd_status+0x28>)
    c934:	f008 bb38 	b.w	14fa8 <z_impl_k_sem_give>
    c938:	bd38      	pop	{r3, r4, r5, pc}
    c93a:	bf00      	nop
    c93c:	20008120 	.word	0x20008120

0000c940 <hci_cmd_complete>:
{
    c940:	b538      	push	{r3, r4, r5, lr}
    c942:	2103      	movs	r1, #3
    c944:	4604      	mov	r4, r0
    c946:	300c      	adds	r0, #12
    c948:	f00c fc65 	bl	19216 <net_buf_simple_pull_mem>
	status = buf->data[0];
    c94c:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
    c94e:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    c950:	4622      	mov	r2, r4
    c952:	7819      	ldrb	r1, [r3, #0]
    c954:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    c958:	f7ff ff44 	bl	c7e4 <hci_cmd_done>
	if (ncmd) {
    c95c:	b125      	cbz	r5, c968 <hci_cmd_complete+0x28>
}
    c95e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c962:	4802      	ldr	r0, [pc, #8]	; (c96c <hci_cmd_complete+0x2c>)
    c964:	f008 bb20 	b.w	14fa8 <z_impl_k_sem_give>
    c968:	bd38      	pop	{r3, r4, r5, pc}
    c96a:	bf00      	nop
    c96c:	20008120 	.word	0x20008120

0000c970 <hci_num_completed_packets>:
{
    c970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c974:	b087      	sub	sp, #28
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
    c976:	2301      	movs	r3, #1
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    c978:	f8d0 800c 	ldr.w	r8, [r0, #12]
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
    c97c:	8a01      	ldrh	r1, [r0, #16]
    c97e:	f898 4000 	ldrb.w	r4, [r8]
{
    c982:	af00      	add	r7, sp, #0
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
    c984:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    c988:	428b      	cmp	r3, r1
    c98a:	f240 808c 	bls.w	caa6 <hci_num_completed_packets+0x136>
		LOG_ERR("evt num_handles (=%u) too large (%u > %u)",
    c98e:	466d      	mov	r5, sp
    c990:	b08a      	sub	sp, #40	; 0x28
    c992:	466a      	mov	r2, sp
    c994:	e9c2 3107 	strd	r3, r1, [r2, #28]
    c998:	2305      	movs	r3, #5
    c99a:	4845      	ldr	r0, [pc, #276]	; (cab0 <hci_num_completed_packets+0x140>)
    c99c:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    c9a0:	e9c2 0405 	strd	r0, r4, [r2, #20]
    c9a4:	4843      	ldr	r0, [pc, #268]	; (cab4 <hci_num_completed_packets+0x144>)
    c9a6:	f842 3f10 	str.w	r3, [r2, #16]!
    c9aa:	f00b f96c 	bl	17c86 <z_log_msg_static_create.constprop.0>
    c9ae:	46ad      	mov	sp, r5
}
    c9b0:	371c      	adds	r7, #28
    c9b2:	46bd      	mov	sp, r7
    c9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("No connection for handle %u", handle);
    c9b8:	466c      	mov	r4, sp
    c9ba:	b088      	sub	sp, #32
    c9bc:	466a      	mov	r2, sp
    c9be:	4b3e      	ldr	r3, [pc, #248]	; (cab8 <hci_num_completed_packets+0x148>)
    c9c0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c9c4:	e9c2 3b05 	strd	r3, fp, [r2, #20]
    c9c8:	2303      	movs	r3, #3
    c9ca:	483a      	ldr	r0, [pc, #232]	; (cab4 <hci_num_completed_packets+0x144>)
    c9cc:	f842 3f10 	str.w	r3, [r2, #16]!
    c9d0:	f00b f959 	bl	17c86 <z_log_msg_static_create.constprop.0>
    c9d4:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
    c9d6:	3501      	adds	r5, #1
    c9d8:	f898 3000 	ldrb.w	r3, [r8]
    c9dc:	429d      	cmp	r5, r3
    c9de:	dae7      	bge.n	c9b0 <hci_num_completed_packets+0x40>
		handle = sys_le16_to_cpu(evt->h[i].handle);
    c9e0:	eb08 0385 	add.w	r3, r8, r5, lsl #2
    c9e4:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    c9e8:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    c9ec:	4658      	mov	r0, fp
    c9ee:	f002 faf3 	bl	efd8 <bt_conn_lookup_handle>
		if (!conn) {
    c9f2:	4604      	mov	r4, r0
    c9f4:	2800      	cmp	r0, #0
    c9f6:	d0df      	beq.n	c9b8 <hci_num_completed_packets+0x48>
			k_work_submit(&conn->tx_complete_work);
    c9f8:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    c9fc:	b346      	cbz	r6, ca50 <hci_num_completed_packets+0xe0>
	__asm__ volatile(
    c9fe:	f04f 0320 	mov.w	r3, #32
    ca02:	f3ef 8211 	mrs	r2, BASEPRI
    ca06:	f383 8812 	msr	BASEPRI_MAX, r3
    ca0a:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    ca0e:	69e3      	ldr	r3, [r4, #28]
    ca10:	b16b      	cbz	r3, ca2e <hci_num_completed_packets+0xbe>
				conn->pending_no_cb--;
    ca12:	3b01      	subs	r3, #1
    ca14:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    ca16:	f382 8811 	msr	BASEPRI, r2
    ca1a:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    ca1e:	4620      	mov	r0, r4
    ca20:	f002 f94a 	bl	ecb8 <bt_conn_get_pkts>
    ca24:	3e01      	subs	r6, #1
    ca26:	f008 fabf 	bl	14fa8 <z_impl_k_sem_give>
    ca2a:	b2b6      	uxth	r6, r6
    ca2c:	e7e6      	b.n	c9fc <hci_num_completed_packets+0x8c>
    ca2e:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    ca30:	b993      	cbnz	r3, ca58 <hci_num_completed_packets+0xe8>
    ca32:	f382 8811 	msr	BASEPRI, r2
    ca36:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
    ca3a:	2302      	movs	r3, #2
    ca3c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ca40:	481c      	ldr	r0, [pc, #112]	; (cab4 <hci_num_completed_packets+0x144>)
    ca42:	f107 0210 	add.w	r2, r7, #16
    ca46:	f8c7 a014 	str.w	sl, [r7, #20]
    ca4a:	613b      	str	r3, [r7, #16]
    ca4c:	f00b f91b 	bl	17c86 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
    ca50:	4620      	mov	r0, r4
    ca52:	f00b fb1a 	bl	1808a <bt_conn_unref>
    ca56:	e7be      	b.n	c9d6 <hci_num_completed_packets+0x66>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ca58:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    ca5a:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ca5c:	428b      	cmp	r3, r1
	list->head = node;
    ca5e:	6160      	str	r0, [r4, #20]
	list->tail = node;
    ca60:	bf08      	it	eq
    ca62:	61a0      	streq	r0, [r4, #24]
    ca64:	f382 8811 	msr	BASEPRI, r2
    ca68:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    ca6c:	f04f 0220 	mov.w	r2, #32
    ca70:	f3ef 8111 	mrs	r1, BASEPRI
    ca74:	f382 8812 	msr	BASEPRI_MAX, r2
    ca78:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    ca7c:	68da      	ldr	r2, [r3, #12]
    ca7e:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
    ca80:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
    ca84:	f8c3 9000 	str.w	r9, [r3]
	return list->tail;
    ca88:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
    ca8a:	b94a      	cbnz	r2, caa0 <hci_num_completed_packets+0x130>
	list->head = node;
    ca8c:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    ca90:	f381 8811 	msr	BASEPRI, r1
    ca94:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
    ca98:	4658      	mov	r0, fp
    ca9a:	f008 fc01 	bl	152a0 <k_work_submit>
    ca9e:	e7be      	b.n	ca1e <hci_num_completed_packets+0xae>
	parent->next = child;
    caa0:	6013      	str	r3, [r2, #0]
	list->tail = node;
    caa2:	6263      	str	r3, [r4, #36]	; 0x24
}
    caa4:	e7f4      	b.n	ca90 <hci_num_completed_packets+0x120>
	for (i = 0; i < evt->num_handles; i++) {
    caa6:	2500      	movs	r5, #0
				LOG_ERR("packets count mismatch");
    caa8:	f8df a010 	ldr.w	sl, [pc, #16]	; cabc <hci_num_completed_packets+0x14c>
			tx->pending_no_cb = 0U;
    caac:	46a9      	mov	r9, r5
    caae:	e793      	b.n	c9d8 <hci_num_completed_packets+0x68>
    cab0:	0001c7c5 	.word	0x0001c7c5
    cab4:	0001b1e8 	.word	0x0001b1e8
    cab8:	0001c7ef 	.word	0x0001c7ef
    cabc:	0001c80b 	.word	0x0001c80b

0000cac0 <le_conn_update_complete>:
{
    cac0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cac2:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    cac4:	68c5      	ldr	r5, [r0, #12]
{
    cac6:	af00      	add	r7, sp, #0
	handle = sys_le16_to_cpu(evt->handle);
    cac8:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    cacc:	4630      	mov	r0, r6
    cace:	f002 fa83 	bl	efd8 <bt_conn_lookup_handle>
	if (!conn) {
    cad2:	4604      	mov	r4, r0
    cad4:	b988      	cbnz	r0, cafa <le_conn_update_complete+0x3a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
    cad6:	466c      	mov	r4, sp
    cad8:	b088      	sub	sp, #32
    cada:	466a      	mov	r2, sp
    cadc:	4b2b      	ldr	r3, [pc, #172]	; (cb8c <le_conn_update_complete+0xcc>)
    cade:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cae2:	e9c2 3605 	strd	r3, r6, [r2, #20]
    cae6:	2303      	movs	r3, #3
    cae8:	4829      	ldr	r0, [pc, #164]	; (cb90 <le_conn_update_complete+0xd0>)
    caea:	f842 3f10 	str.w	r3, [r2, #16]!
    caee:	f00b f8ca 	bl	17c86 <z_log_msg_static_create.constprop.0>
    caf2:	46a5      	mov	sp, r4
}
    caf4:	370c      	adds	r7, #12
    caf6:	46bd      	mov	sp, r7
    caf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    cafa:	782b      	ldrb	r3, [r5, #0]
	    !atomic_test_and_set_bit(conn->flags,
    cafc:	1d06      	adds	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    cafe:	2b1a      	cmp	r3, #26
    cb00:	d117      	bne.n	cb32 <le_conn_update_complete+0x72>
    cb02:	78c3      	ldrb	r3, [r0, #3]
    cb04:	2b01      	cmp	r3, #1
    cb06:	d128      	bne.n	cb5a <le_conn_update_complete+0x9a>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    cb08:	f44f 6180 	mov.w	r1, #1024	; 0x400
    cb0c:	4630      	mov	r0, r6
    cb0e:	f00b f8af 	bl	17c70 <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
    cb12:	0542      	lsls	r2, r0, #21
    cb14:	d40d      	bmi.n	cb32 <le_conn_update_complete+0x72>
		param.interval_min = conn->le.interval_min;
    cb16:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
		bt_l2cap_update_conn_param(conn, &param);
    cb1a:	4639      	mov	r1, r7
		param.interval_min = conn->le.interval_min;
    cb1c:	603b      	str	r3, [r7, #0]
		param.latency = conn->le.pending_latency;
    cb1e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		bt_l2cap_update_conn_param(conn, &param);
    cb22:	4620      	mov	r0, r4
		param.latency = conn->le.pending_latency;
    cb24:	607b      	str	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
    cb26:	f002 ff3b 	bl	f9a0 <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
    cb2a:	4620      	mov	r0, r4
    cb2c:	f00b faad 	bl	1808a <bt_conn_unref>
    cb30:	e7e0      	b.n	caf4 <le_conn_update_complete+0x34>
		if (!evt->status) {
    cb32:	782b      	ldrb	r3, [r5, #0]
    cb34:	b98b      	cbnz	r3, cb5a <le_conn_update_complete+0x9a>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
    cb36:	f8b5 3003 	ldrh.w	r3, [r5, #3]
    cb3a:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
			conn->le.latency = sys_le16_to_cpu(evt->latency);
    cb3e:	f8b5 3005 	ldrh.w	r3, [r5, #5]
    cb42:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    cb46:	f8b5 3007 	ldrh.w	r3, [r5, #7]
    cb4a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    cb4e:	f46f 7180 	mvn.w	r1, #256	; 0x100
    cb52:	4630      	mov	r0, r6
    cb54:	f00b f89a 	bl	17c8c <atomic_and.isra.0>
}
    cb58:	e014      	b.n	cb84 <le_conn_update_complete+0xc4>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cb5a:	e8d6 3faf 	lda	r3, [r6]
		} else if (atomic_test_bit(conn->flags,
    cb5e:	05db      	lsls	r3, r3, #23
    cb60:	d5f5      	bpl.n	cb4e <le_conn_update_complete+0x8e>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
    cb62:	782b      	ldrb	r3, [r5, #0]
    cb64:	2b20      	cmp	r3, #32
    cb66:	d1f2      	bne.n	cb4e <le_conn_update_complete+0x8e>
			   conn->le.conn_param_retry_countdown) {
    cb68:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
    cb6c:	2b00      	cmp	r3, #0
    cb6e:	d0ee      	beq.n	cb4e <le_conn_update_complete+0x8e>
			conn->le.conn_param_retry_countdown--;
    cb70:	3b01      	subs	r3, #1
    cb72:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
    cb76:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    cb7a:	2300      	movs	r3, #0
    cb7c:	f104 0058 	add.w	r0, r4, #88	; 0x58
    cb80:	f008 fc34 	bl	153ec <k_work_schedule>
		notify_le_param_updated(conn);
    cb84:	4620      	mov	r0, r4
    cb86:	f002 fb4f 	bl	f228 <notify_le_param_updated>
    cb8a:	e7ce      	b.n	cb2a <le_conn_update_complete+0x6a>
    cb8c:	0001c5ff 	.word	0x0001c5ff
    cb90:	0001b1e8 	.word	0x0001b1e8

0000cb94 <bt_hci_cmd_state_set_init>:
{
    cb94:	b510      	push	{r4, lr}
	state->bit = bit;
    cb96:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    cb9a:	f89d 3008 	ldrb.w	r3, [sp, #8]
{
    cb9e:	460c      	mov	r4, r1
	state->val = val;
    cba0:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
    cba2:	f004 fe41 	bl	11828 <net_buf_id>
    cba6:	220c      	movs	r2, #12
    cba8:	4b02      	ldr	r3, [pc, #8]	; (cbb4 <bt_hci_cmd_state_set_init+0x20>)
    cbaa:	fb02 3300 	mla	r3, r2, r0, r3
    cbae:	605c      	str	r4, [r3, #4]
}
    cbb0:	bd10      	pop	{r4, pc}
    cbb2:	bf00      	nop
    cbb4:	20009778 	.word	0x20009778

0000cbb8 <bt_hci_cmd_create>:
{
    cbb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    cbbc:	f04f 32ff 	mov.w	r2, #4294967295
    cbc0:	f04f 33ff 	mov.w	r3, #4294967295
    cbc4:	4606      	mov	r6, r0
    cbc6:	4817      	ldr	r0, [pc, #92]	; (cc24 <bt_hci_cmd_create+0x6c>)
    cbc8:	460f      	mov	r7, r1
    cbca:	f00c fa94 	bl	190f6 <net_buf_alloc_fixed>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    cbce:	f04f 0800 	mov.w	r8, #0
    cbd2:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    cbd4:	f100 0a0c 	add.w	sl, r0, #12
    cbd8:	2101      	movs	r1, #1
    cbda:	4650      	mov	r0, sl
    cbdc:	f00c fae7 	bl	191ae <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
    cbe0:	4620      	mov	r0, r4
    cbe2:	f884 8018 	strb.w	r8, [r4, #24]
    cbe6:	f004 fe1f 	bl	11828 <net_buf_id>
    cbea:	f04f 090c 	mov.w	r9, #12
    cbee:	4d0e      	ldr	r5, [pc, #56]	; (cc28 <bt_hci_cmd_create+0x70>)
    cbf0:	fb09 5000 	mla	r0, r9, r0, r5
    cbf4:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    cbf6:	4620      	mov	r0, r4
    cbf8:	f004 fe16 	bl	11828 <net_buf_id>
    cbfc:	fb09 5000 	mla	r0, r9, r0, r5
    cc00:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    cc04:	4620      	mov	r0, r4
    cc06:	f004 fe0f 	bl	11828 <net_buf_id>
    cc0a:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    cc0e:	2103      	movs	r1, #3
    cc10:	4650      	mov	r0, sl
    cc12:	f8c5 8004 	str.w	r8, [r5, #4]
    cc16:	f00c face 	bl	191b6 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    cc1a:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
    cc1c:	7087      	strb	r7, [r0, #2]
}
    cc1e:	4620      	mov	r0, r4
    cc20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cc24:	200086ec 	.word	0x200086ec
    cc28:	20009778 	.word	0x20009778

0000cc2c <bt_hci_cmd_send_sync>:
{
    cc2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cc30:	b087      	sub	sp, #28
    cc32:	4606      	mov	r6, r0
    cc34:	4615      	mov	r5, r2
	if (!buf) {
    cc36:	460c      	mov	r4, r1
{
    cc38:	af00      	add	r7, sp, #0
	if (!buf) {
    cc3a:	b921      	cbnz	r1, cc46 <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
    cc3c:	f7ff ffbc 	bl	cbb8 <bt_hci_cmd_create>
		if (!buf) {
    cc40:	4604      	mov	r4, r0
    cc42:	2800      	cmp	r0, #0
    cc44:	d05f      	beq.n	cd06 <bt_hci_cmd_send_sync+0xda>
	return z_impl_k_sem_init(sem, initial_count, limit);
    cc46:	2201      	movs	r2, #1
    cc48:	2100      	movs	r1, #0
    cc4a:	4638      	mov	r0, r7
    cc4c:	f00d fc63 	bl	1a516 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    cc50:	4620      	mov	r0, r4
    cc52:	f004 fde9 	bl	11828 <net_buf_id>
    cc56:	230c      	movs	r3, #12
    cc58:	f8df 90b0 	ldr.w	r9, [pc, #176]	; cd0c <bt_hci_cmd_send_sync+0xe0>
    cc5c:	fb03 9000 	mla	r0, r3, r0, r9
    cc60:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    cc62:	4620      	mov	r0, r4
    cc64:	f00c fa7d 	bl	19162 <net_buf_ref>
    cc68:	4601      	mov	r1, r0
    cc6a:	4829      	ldr	r0, [pc, #164]	; (cd10 <bt_hci_cmd_send_sync+0xe4>)
    cc6c:	f00c fa77 	bl	1915e <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    cc70:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    cc74:	2300      	movs	r3, #0
    cc76:	4638      	mov	r0, r7
    cc78:	f008 f9bc 	bl	14ff4 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "command opcode 0x%04x timeout with err %d", opcode, err);
    cc7c:	4680      	mov	r8, r0
    cc7e:	b188      	cbz	r0, cca4 <bt_hci_cmd_send_sync+0x78>
    cc80:	f44f 73a5 	mov.w	r3, #330	; 0x14a
    cc84:	4a23      	ldr	r2, [pc, #140]	; (cd14 <bt_hci_cmd_send_sync+0xe8>)
    cc86:	4924      	ldr	r1, [pc, #144]	; (cd18 <bt_hci_cmd_send_sync+0xec>)
    cc88:	4824      	ldr	r0, [pc, #144]	; (cd1c <bt_hci_cmd_send_sync+0xf0>)
    cc8a:	f009 fd89 	bl	167a0 <assert_print>
    cc8e:	4642      	mov	r2, r8
    cc90:	4631      	mov	r1, r6
    cc92:	4823      	ldr	r0, [pc, #140]	; (cd20 <bt_hci_cmd_send_sync+0xf4>)
    cc94:	f009 fd84 	bl	167a0 <assert_print>
    cc98:	4040      	eors	r0, r0
    cc9a:	f380 8811 	msr	BASEPRI, r0
    cc9e:	f04f 0003 	mov.w	r0, #3
    cca2:	df02      	svc	2
	status = cmd(buf)->status;
    cca4:	4620      	mov	r0, r4
    cca6:	f004 fdbf 	bl	11828 <net_buf_id>
    ccaa:	230c      	movs	r3, #12
    ccac:	4358      	muls	r0, r3
    ccae:	f819 8000 	ldrb.w	r8, [r9, r0]
	if (status) {
    ccb2:	f1b8 0f00 	cmp.w	r8, #0
    ccb6:	d01e      	beq.n	ccf6 <bt_hci_cmd_send_sync+0xca>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
    ccb8:	466d      	mov	r5, sp
    ccba:	b088      	sub	sp, #32
    ccbc:	466a      	mov	r2, sp
    ccbe:	4b19      	ldr	r3, [pc, #100]	; (cd24 <bt_hci_cmd_send_sync+0xf8>)
    ccc0:	f8c2 801c 	str.w	r8, [r2, #28]
    ccc4:	e9c2 3605 	strd	r3, r6, [r2, #20]
    ccc8:	2304      	movs	r3, #4
    ccca:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    ccce:	4816      	ldr	r0, [pc, #88]	; (cd28 <bt_hci_cmd_send_sync+0xfc>)
    ccd0:	f842 3f10 	str.w	r3, [r2, #16]!
    ccd4:	f00a ffd7 	bl	17c86 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
    ccd8:	4620      	mov	r0, r4
    ccda:	46ad      	mov	sp, r5
    ccdc:	f004 fe5e 	bl	1199c <net_buf_unref>
			return -ECONNREFUSED;
    cce0:	f1b8 0f09 	cmp.w	r8, #9
    cce4:	bf14      	ite	ne
    cce6:	f06f 0004 	mvnne.w	r0, #4
    ccea:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
    ccee:	371c      	adds	r7, #28
    ccf0:	46bd      	mov	sp, r7
    ccf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
    ccf6:	b115      	cbz	r5, ccfe <bt_hci_cmd_send_sync+0xd2>
		*rsp = buf;
    ccf8:	602c      	str	r4, [r5, #0]
	return 0;
    ccfa:	2000      	movs	r0, #0
    ccfc:	e7f7      	b.n	ccee <bt_hci_cmd_send_sync+0xc2>
		net_buf_unref(buf);
    ccfe:	4620      	mov	r0, r4
    cd00:	f004 fe4c 	bl	1199c <net_buf_unref>
    cd04:	e7f9      	b.n	ccfa <bt_hci_cmd_send_sync+0xce>
			return -ENOBUFS;
    cd06:	f06f 0068 	mvn.w	r0, #104	; 0x68
    cd0a:	e7f0      	b.n	ccee <bt_hci_cmd_send_sync+0xc2>
    cd0c:	20009778 	.word	0x20009778
    cd10:	20008144 	.word	0x20008144
    cd14:	0001c66b 	.word	0x0001c66b
    cd18:	0001c822 	.word	0x0001c822
    cd1c:	0001c6b8 	.word	0x0001c6b8
    cd20:	0001c82b 	.word	0x0001c82b
    cd24:	0001c857 	.word	0x0001c857
    cd28:	0001b1e8 	.word	0x0001b1e8

0000cd2c <hci_le_read_max_data_len>:
{
    cd2c:	b570      	push	{r4, r5, r6, lr}
    cd2e:	b088      	sub	sp, #32
    cd30:	4606      	mov	r6, r0
    cd32:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    cd34:	f242 002f 	movw	r0, #8239	; 0x202f
    cd38:	2100      	movs	r1, #0
    cd3a:	aa01      	add	r2, sp, #4
    cd3c:	f7ff ff76 	bl	cc2c <bt_hci_cmd_send_sync>
	if (err) {
    cd40:	4604      	mov	r4, r0
    cd42:	b160      	cbz	r0, cd5e <hci_le_read_max_data_len+0x32>
		LOG_ERR("Failed to read DLE max data len");
    cd44:	4b0b      	ldr	r3, [pc, #44]	; (cd74 <hci_le_read_max_data_len+0x48>)
    cd46:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cd4a:	9307      	str	r3, [sp, #28]
    cd4c:	2302      	movs	r3, #2
    cd4e:	480a      	ldr	r0, [pc, #40]	; (cd78 <hci_le_read_max_data_len+0x4c>)
    cd50:	aa06      	add	r2, sp, #24
    cd52:	9306      	str	r3, [sp, #24]
    cd54:	f00a ff97 	bl	17c86 <z_log_msg_static_create.constprop.0>
}
    cd58:	4620      	mov	r0, r4
    cd5a:	b008      	add	sp, #32
    cd5c:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    cd5e:	9801      	ldr	r0, [sp, #4]
    cd60:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    cd62:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    cd66:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    cd68:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    cd6c:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    cd6e:	f004 fe15 	bl	1199c <net_buf_unref>
	return 0;
    cd72:	e7f1      	b.n	cd58 <hci_le_read_max_data_len+0x2c>
    cd74:	0001c873 	.word	0x0001c873
    cd78:	0001b1e8 	.word	0x0001b1e8

0000cd7c <bt_hci_le_rand>:
{
    cd7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    cd7e:	4b14      	ldr	r3, [pc, #80]	; (cdd0 <bt_hci_le_rand+0x54>)
{
    cd80:	4605      	mov	r5, r0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    cd82:	f993 309b 	ldrsb.w	r3, [r3, #155]	; 0x9b
{
    cd86:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    cd88:	2b00      	cmp	r3, #0
    cd8a:	da1d      	bge.n	cdc8 <bt_hci_le_rand+0x4c>
	while (len > 0) {
    cd8c:	b914      	cbnz	r4, cd94 <bt_hci_le_rand+0x18>
	return 0;
    cd8e:	4620      	mov	r0, r4
}
    cd90:	b003      	add	sp, #12
    cd92:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
    cd94:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    cd96:	f04f 0100 	mov.w	r1, #0
    cd9a:	f242 0018 	movw	r0, #8216	; 0x2018
    cd9e:	aa01      	add	r2, sp, #4
		count = MIN(len, sizeof(rp->rand));
    cda0:	4626      	mov	r6, r4
    cda2:	bf28      	it	cs
    cda4:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    cda6:	f7ff ff41 	bl	cc2c <bt_hci_cmd_send_sync>
		if (err) {
    cdaa:	2800      	cmp	r0, #0
    cdac:	d1f0      	bne.n	cd90 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
    cdae:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
    cdb0:	4632      	mov	r2, r6
    cdb2:	68f9      	ldr	r1, [r7, #12]
    cdb4:	4628      	mov	r0, r5
    cdb6:	3101      	adds	r1, #1
    cdb8:	f00a fecb 	bl	17b52 <memcpy>
		net_buf_unref(rsp);
    cdbc:	4638      	mov	r0, r7
    cdbe:	f004 fded 	bl	1199c <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
    cdc2:	4435      	add	r5, r6
		len -= count;
    cdc4:	1ba4      	subs	r4, r4, r6
    cdc6:	e7e1      	b.n	cd8c <bt_hci_le_rand+0x10>
		return -ENOTSUP;
    cdc8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    cdcc:	e7e0      	b.n	cd90 <bt_hci_le_rand+0x14>
    cdce:	bf00      	nop
    cdd0:	20008000 	.word	0x20008000

0000cdd4 <bt_hci_le_enh_conn_complete>:
{
    cdd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cdd8:	b08c      	sub	sp, #48	; 0x30
    cdda:	2600      	movs	r6, #0
		if (disconnected_handles[i] == handle) {
    cddc:	4bac      	ldr	r3, [pc, #688]	; (d090 <bt_hci_le_enh_conn_complete+0x2bc>)
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    cdde:	f8b0 8001 	ldrh.w	r8, [r0, #1]
		if (disconnected_handles[i] == handle) {
    cde2:	8819      	ldrh	r1, [r3, #0]
    cde4:	f448 4270 	orr.w	r2, r8, #61440	; 0xf000
    cde8:	4291      	cmp	r1, r2
			disconnected_handles[i] = 0;
    cdea:	bf08      	it	eq
    cdec:	801e      	strheq	r6, [r3, #0]
	if (evt->status) {
    cdee:	7804      	ldrb	r4, [r0, #0]
{
    cdf0:	4605      	mov	r5, r0
			return true;
    cdf2:	bf08      	it	eq
    cdf4:	2601      	moveq	r6, #1
{
    cdf6:	af02      	add	r7, sp, #8
	if (evt->status) {
    cdf8:	b3a4      	cbz	r4, ce64 <bt_hci_le_enh_conn_complete+0x90>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    cdfa:	2c3c      	cmp	r4, #60	; 0x3c
    cdfc:	d122      	bne.n	ce44 <bt_hci_le_enh_conn_complete+0x70>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    cdfe:	f001 fb45 	bl	e48c <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ce02:	f06f 0180 	mvn.w	r1, #128	; 0x80
    ce06:	3010      	adds	r0, #16
    ce08:	f00a ff40 	bl	17c8c <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    ce0c:	2000      	movs	r0, #0
    ce0e:	f7ff fa9d 	bl	c34c <find_pending_connect.part.0>
		if (!conn) {
    ce12:	4605      	mov	r5, r0
    ce14:	b970      	cbnz	r0, ce34 <bt_hci_le_enh_conn_complete+0x60>
			LOG_ERR("No pending peripheral connection");
    ce16:	4b9f      	ldr	r3, [pc, #636]	; (d094 <bt_hci_le_enh_conn_complete+0x2c0>)
    ce18:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ce1c:	627b      	str	r3, [r7, #36]	; 0x24
    ce1e:	2302      	movs	r3, #2
    ce20:	489d      	ldr	r0, [pc, #628]	; (d098 <bt_hci_le_enh_conn_complete+0x2c4>)
    ce22:	623b      	str	r3, [r7, #32]
    ce24:	f107 0220 	add.w	r2, r7, #32
    ce28:	f00a ff2d 	bl	17c86 <z_log_msg_static_create.constprop.0>
}
    ce2c:	3728      	adds	r7, #40	; 0x28
    ce2e:	46bd      	mov	sp, r7
    ce30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    ce34:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    ce36:	2100      	movs	r1, #0
    ce38:	f002 f8d6 	bl	efe8 <bt_conn_set_state>
		bt_conn_unref(conn);
    ce3c:	4628      	mov	r0, r5
	bt_conn_unref(conn);
    ce3e:	f00b f924 	bl	1808a <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ce42:	e7f3      	b.n	ce2c <bt_hci_le_enh_conn_complete+0x58>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
    ce44:	466d      	mov	r5, sp
    ce46:	b088      	sub	sp, #32
    ce48:	aa02      	add	r2, sp, #8
    ce4a:	4b94      	ldr	r3, [pc, #592]	; (d09c <bt_hci_le_enh_conn_complete+0x2c8>)
    ce4c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    ce50:	e9c2 3405 	strd	r3, r4, [r2, #20]
    ce54:	2303      	movs	r3, #3
    ce56:	4890      	ldr	r0, [pc, #576]	; (d098 <bt_hci_le_enh_conn_complete+0x2c4>)
    ce58:	f842 3f10 	str.w	r3, [r2, #16]!
    ce5c:	f00a ff13 	bl	17c86 <z_log_msg_static_create.constprop.0>
    ce60:	46ad      	mov	sp, r5
		return;
    ce62:	e7e3      	b.n	ce2c <bt_hci_le_enh_conn_complete+0x58>
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
    ce64:	78c3      	ldrb	r3, [r0, #3]
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
    ce66:	f100 0904 	add.w	r9, r0, #4
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
    ce6a:	2b01      	cmp	r3, #1
    ce6c:	bf08      	it	eq
    ce6e:	4b8c      	ldreq	r3, [pc, #560]	; (d0a0 <bt_hci_le_enh_conn_complete+0x2cc>)
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
    ce70:	4648      	mov	r0, r9
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
    ce72:	bf08      	it	eq
    ce74:	f893 406f 	ldrbeq.w	r4, [r3, #111]	; 0x6f
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
    ce78:	f00a fee3 	bl	17c42 <bt_addr_le_is_resolved>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
    ce7c:	4649      	mov	r1, r9
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
    ce7e:	b348      	cbz	r0, ced4 <bt_hci_le_enh_conn_complete+0x100>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
    ce80:	f107 0010 	add.w	r0, r7, #16
    ce84:	f00a fed3 	bl	17c2e <bt_addr_le_copy_resolved>
	memcpy(dst, src, sizeof(*dst));
    ce88:	2206      	movs	r2, #6
    ce8a:	f105 0111 	add.w	r1, r5, #17
    ce8e:	f107 0009 	add.w	r0, r7, #9
    ce92:	f00a fe5e 	bl	17b52 <memcpy>
		peer_addr->type = BT_ADDR_LE_RANDOM;
    ce96:	2301      	movs	r3, #1
    ce98:	723b      	strb	r3, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    ce9a:	78eb      	ldrb	r3, [r5, #3]
    ce9c:	2b01      	cmp	r3, #1
    ce9e:	d029      	beq.n	cef4 <bt_hci_le_enh_conn_complete+0x120>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
    cea0:	4648      	mov	r0, r9
    cea2:	f7ff f923 	bl	c0ec <bt_addr_le_str>
    cea6:	466c      	mov	r4, sp
    cea8:	b088      	sub	sp, #32
    ceaa:	aa02      	add	r2, sp, #8
    ceac:	4b7d      	ldr	r3, [pc, #500]	; (d0a4 <bt_hci_le_enh_conn_complete+0x2d0>)
    ceae:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    ceb2:	e9c2 3005 	strd	r3, r0, [r2, #20]
    ceb6:	f44f 7300 	mov.w	r3, #512	; 0x200
    ceba:	8393      	strh	r3, [r2, #28]
    cebc:	4b7a      	ldr	r3, [pc, #488]	; (d0a8 <bt_hci_le_enh_conn_complete+0x2d4>)
    cebe:	4876      	ldr	r0, [pc, #472]	; (d098 <bt_hci_le_enh_conn_complete+0x2c4>)
    cec0:	f842 3f10 	str.w	r3, [r2, #16]!
    cec4:	f00a fedf 	bl	17c86 <z_log_msg_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    cec8:	211f      	movs	r1, #31
    ceca:	46a5      	mov	sp, r4
    cecc:	4640      	mov	r0, r8
    cece:	f00a fee5 	bl	17c9c <bt_hci_disconnect>
		return;
    ced2:	e7ab      	b.n	ce2c <bt_hci_le_enh_conn_complete+0x58>
		bt_addr_le_copy(id_addr, bt_lookup_id_addr(id, &evt->peer_addr));
    ced4:	4620      	mov	r0, r4
    ced6:	f00a ff90 	bl	17dfa <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
    ceda:	2207      	movs	r2, #7
    cedc:	4601      	mov	r1, r0
    cede:	f107 0010 	add.w	r0, r7, #16
    cee2:	f00a fe36 	bl	17b52 <memcpy>
    cee6:	2207      	movs	r2, #7
    cee8:	4649      	mov	r1, r9
    ceea:	f107 0008 	add.w	r0, r7, #8
    ceee:	f00a fe30 	bl	17b52 <memcpy>
}
    cef2:	e7d2      	b.n	ce9a <bt_hci_le_enh_conn_complete+0xc6>
    cef4:	f107 0010 	add.w	r0, r7, #16
    cef8:	f7ff fa28 	bl	c34c <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    cefc:	78eb      	ldrb	r3, [r5, #3]
    cefe:	4604      	mov	r4, r0
    cf00:	2b01      	cmp	r3, #1
    cf02:	d10a      	bne.n	cf1a <bt_hci_le_enh_conn_complete+0x146>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    cf04:	f001 fac2 	bl	e48c <bt_le_adv_lookup_legacy>
    cf08:	4682      	mov	sl, r0
    cf0a:	f06f 0180 	mvn.w	r1, #128	; 0x80
    cf0e:	3010      	adds	r0, #16
    cf10:	f00a febc 	bl	17c8c <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
    cf14:	4650      	mov	r0, sl
    cf16:	f00b f86f 	bl	17ff8 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
    cf1a:	2c00      	cmp	r4, #0
    cf1c:	d0c0      	beq.n	cea0 <bt_hci_le_enh_conn_complete+0xcc>
	conn->handle = sys_le16_to_cpu(evt->handle);
    cf1e:	4620      	mov	r0, r4
    cf20:	f8b5 3001 	ldrh.w	r3, [r5, #1]
	memcpy(dst, src, sizeof(*dst));
    cf24:	2207      	movs	r2, #7
    cf26:	f820 3b88 	strh.w	r3, [r0], #136
    cf2a:	f107 0110 	add.w	r1, r7, #16
    cf2e:	f00a fe10 	bl	17b52 <memcpy>
	conn->err = 0U;
    cf32:	2200      	movs	r2, #0
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    cf34:	f8b5 3017 	ldrh.w	r3, [r5, #23]
    cf38:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    cf3c:	f8b5 3019 	ldrh.w	r3, [r5, #25]
    cf40:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    cf44:	f8b5 301b 	ldrh.w	r3, [r5, #27]
    cf48:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
    cf4c:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
    cf4e:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    cf50:	2b01      	cmp	r3, #1
	conn->role = evt->role;
    cf52:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    cf54:	d118      	bne.n	cf88 <bt_hci_le_enh_conn_complete+0x1b4>
    cf56:	2207      	movs	r2, #7
    cf58:	f107 0108 	add.w	r1, r7, #8
    cf5c:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    cf60:	f00a fdf7 	bl	17b52 <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    cf64:	f001 fa92 	bl	e48c <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
    cf68:	7a21      	ldrb	r1, [r4, #8]
    cf6a:	4d4d      	ldr	r5, [pc, #308]	; (d0a0 <bt_hci_le_enh_conn_complete+0x2cc>)
    cf6c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    cf70:	4429      	add	r1, r5
    cf72:	2207      	movs	r2, #7
    cf74:	f104 0096 	add.w	r0, r4, #150	; 0x96
    cf78:	f00a fdeb 	bl	17b52 <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
    cf7c:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
    cf80:	065d      	lsls	r5, r3, #25
    cf82:	d501      	bpl.n	cf88 <bt_hci_le_enh_conn_complete+0x1b4>
			bt_le_adv_resume();
    cf84:	f001 fc4a 	bl	e81c <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    cf88:	2107      	movs	r1, #7
    cf8a:	4620      	mov	r0, r4
    cf8c:	f002 f82c 	bl	efe8 <bt_conn_set_state>
	if (is_disconnected) {
    cf90:	b11e      	cbz	r6, cf9a <bt_hci_le_enh_conn_complete+0x1c6>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    cf92:	2101      	movs	r1, #1
    cf94:	4620      	mov	r0, r4
    cf96:	f002 f827 	bl	efe8 <bt_conn_set_state>
	bt_conn_connected(conn);
    cf9a:	4620      	mov	r0, r4
    cf9c:	f00b f8ab 	bl	180f6 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
    cfa0:	7aa3      	ldrb	r3, [r4, #10]
    cfa2:	2b07      	cmp	r3, #7
    cfa4:	d16e      	bne.n	d084 <bt_hci_le_enh_conn_complete+0x2b0>
    cfa6:	1d23      	adds	r3, r4, #4
    cfa8:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    cfac:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    cfb0:	4d3b      	ldr	r5, [pc, #236]	; (d0a0 <bt_hci_le_enh_conn_complete+0x2cc>)
    cfb2:	d129      	bne.n	d008 <bt_hci_le_enh_conn_complete+0x234>
    cfb4:	78e3      	ldrb	r3, [r4, #3]
    cfb6:	b11b      	cbz	r3, cfc0 <bt_hci_le_enh_conn_complete+0x1ec>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
    cfb8:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
    cfbc:	0718      	lsls	r0, r3, #28
    cfbe:	d523      	bpl.n	d008 <bt_hci_le_enh_conn_complete+0x234>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    cfc0:	2102      	movs	r1, #2
    cfc2:	f242 0016 	movw	r0, #8214	; 0x2016
    cfc6:	f7ff fdf7 	bl	cbb8 <bt_hci_cmd_create>
	if (!buf) {
    cfca:	4606      	mov	r6, r0
    cfcc:	2800      	cmp	r0, #0
    cfce:	d05b      	beq.n	d088 <bt_hci_le_enh_conn_complete+0x2b4>
    cfd0:	2102      	movs	r1, #2
    cfd2:	300c      	adds	r0, #12
    cfd4:	f00c f8ef 	bl	191b6 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    cfd8:	8823      	ldrh	r3, [r4, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
    cfda:	2200      	movs	r2, #0
	cp->handle = sys_cpu_to_le16(conn->handle);
    cfdc:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
    cfde:	4631      	mov	r1, r6
    cfe0:	f242 0016 	movw	r0, #8214	; 0x2016
    cfe4:	f7ff fe22 	bl	cc2c <bt_hci_cmd_send_sync>
		if (err) {
    cfe8:	b170      	cbz	r0, d008 <bt_hci_le_enh_conn_complete+0x234>
			LOG_ERR("Failed read remote features (%d)", err);
    cfea:	466e      	mov	r6, sp
    cfec:	b088      	sub	sp, #32
    cfee:	aa02      	add	r2, sp, #8
    cff0:	4b2e      	ldr	r3, [pc, #184]	; (d0ac <bt_hci_le_enh_conn_complete+0x2d8>)
    cff2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cff6:	e9c2 3005 	strd	r3, r0, [r2, #20]
    cffa:	2303      	movs	r3, #3
    cffc:	4826      	ldr	r0, [pc, #152]	; (d098 <bt_hci_le_enh_conn_complete+0x2c4>)
    cffe:	f842 3f10 	str.w	r3, [r2, #16]!
    d002:	f00a fe40 	bl	17c86 <z_log_msg_static_create.constprop.0>
    d006:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    d008:	f895 30d9 	ldrb.w	r3, [r5, #217]	; 0xd9
    d00c:	07d9      	lsls	r1, r3, #31
    d00e:	d516      	bpl.n	d03e <bt_hci_le_enh_conn_complete+0x26a>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    d010:	2100      	movs	r1, #0
    d012:	2302      	movs	r3, #2
    d014:	4620      	mov	r0, r4
    d016:	461a      	mov	r2, r3
    d018:	9100      	str	r1, [sp, #0]
    d01a:	f00a fe78 	bl	17d0e <bt_le_set_phy>
		if (err) {
    d01e:	b170      	cbz	r0, d03e <bt_hci_le_enh_conn_complete+0x26a>
			LOG_ERR("Failed LE Set PHY (%d)", err);
    d020:	466e      	mov	r6, sp
    d022:	b088      	sub	sp, #32
    d024:	aa02      	add	r2, sp, #8
    d026:	4b22      	ldr	r3, [pc, #136]	; (d0b0 <bt_hci_le_enh_conn_complete+0x2dc>)
    d028:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d02c:	e9c2 3005 	strd	r3, r0, [r2, #20]
    d030:	2303      	movs	r3, #3
    d032:	4819      	ldr	r0, [pc, #100]	; (d098 <bt_hci_le_enh_conn_complete+0x2c4>)
    d034:	f842 3f10 	str.w	r3, [r2, #16]!
    d038:	f00a fe25 	bl	17c86 <z_log_msg_static_create.constprop.0>
    d03c:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    d03e:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
    d042:	069a      	lsls	r2, r3, #26
    d044:	d51e      	bpl.n	d084 <bt_hci_le_enh_conn_complete+0x2b0>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    d046:	f8d5 315c 	ldr.w	r3, [r5, #348]	; 0x15c
    d04a:	689b      	ldr	r3, [r3, #8]
    d04c:	079b      	lsls	r3, r3, #30
    d04e:	d519      	bpl.n	d084 <bt_hci_le_enh_conn_complete+0x2b0>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    d050:	1db9      	adds	r1, r7, #6
    d052:	1d38      	adds	r0, r7, #4
    d054:	f7ff fe6a 	bl	cd2c <hci_le_read_max_data_len>
			if (!err) {
    d058:	b9a0      	cbnz	r0, d084 <bt_hci_le_enh_conn_complete+0x2b0>
				err = bt_le_set_data_len(conn,
    d05a:	4620      	mov	r0, r4
    d05c:	88fa      	ldrh	r2, [r7, #6]
    d05e:	88b9      	ldrh	r1, [r7, #4]
    d060:	f00a fe37 	bl	17cd2 <bt_le_set_data_len>
				if (err) {
    d064:	b170      	cbz	r0, d084 <bt_hci_le_enh_conn_complete+0x2b0>
					LOG_ERR("Failed to set data len (%d)", err);
    d066:	466d      	mov	r5, sp
    d068:	b088      	sub	sp, #32
    d06a:	aa02      	add	r2, sp, #8
    d06c:	4b11      	ldr	r3, [pc, #68]	; (d0b4 <bt_hci_le_enh_conn_complete+0x2e0>)
    d06e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d072:	e9c2 3005 	strd	r3, r0, [r2, #20]
    d076:	2303      	movs	r3, #3
    d078:	4807      	ldr	r0, [pc, #28]	; (d098 <bt_hci_le_enh_conn_complete+0x2c4>)
    d07a:	f842 3f10 	str.w	r3, [r2, #16]!
    d07e:	f00a fe02 	bl	17c86 <z_log_msg_static_create.constprop.0>
    d082:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
    d084:	4620      	mov	r0, r4
    d086:	e6da      	b.n	ce3e <bt_hci_le_enh_conn_complete+0x6a>
		return -ENOBUFS;
    d088:	f06f 0068 	mvn.w	r0, #104	; 0x68
    d08c:	e7ad      	b.n	cfea <bt_hci_le_enh_conn_complete+0x216>
    d08e:	bf00      	nop
    d090:	20009b24 	.word	0x20009b24
    d094:	0001c893 	.word	0x0001c893
    d098:	0001b1e8 	.word	0x0001b1e8
    d09c:	0001c8b4 	.word	0x0001c8b4
    d0a0:	20008000 	.word	0x20008000
    d0a4:	0001c8cd 	.word	0x0001c8cd
    d0a8:	01000003 	.word	0x01000003
    d0ac:	0001c8e9 	.word	0x0001c8e9
    d0b0:	0001c90a 	.word	0x0001c90a
    d0b4:	0001c921 	.word	0x0001c921

0000d0b8 <le_legacy_conn_complete>:
{
    d0b8:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    d0ba:	68c1      	ldr	r1, [r0, #12]
{
    d0bc:	b088      	sub	sp, #32
	enh.status         = evt->status;
    d0be:	780b      	ldrb	r3, [r1, #0]
	memcpy(dst, src, sizeof(*dst));
    d0c0:	4c17      	ldr	r4, [pc, #92]	; (d120 <le_legacy_conn_complete+0x68>)
    d0c2:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
    d0c6:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	memcpy(dst, src, sizeof(*dst));
    d0ca:	2207      	movs	r2, #7
    d0cc:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
    d0d0:	78cb      	ldrb	r3, [r1, #3]
    d0d2:	a801      	add	r0, sp, #4
    d0d4:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
    d0d8:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    d0dc:	3104      	adds	r1, #4
    d0de:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
    d0e2:	f8b1 3009 	ldrh.w	r3, [r1, #9]
    d0e6:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
    d0ea:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    d0ee:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
    d0f2:	7b4b      	ldrb	r3, [r1, #13]
    d0f4:	f88d 301d 	strb.w	r3, [sp, #29]
    d0f8:	f00a fd2b 	bl	17b52 <memcpy>
	memcpy(dst, src, sizeof(*dst));
    d0fc:	4621      	mov	r1, r4
    d0fe:	2206      	movs	r2, #6
    d100:	f10d 000b 	add.w	r0, sp, #11
    d104:	f00a fd25 	bl	17b52 <memcpy>
    d108:	2206      	movs	r2, #6
    d10a:	4621      	mov	r1, r4
    d10c:	f10d 0011 	add.w	r0, sp, #17
    d110:	f00a fd1f 	bl	17b52 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
    d114:	4668      	mov	r0, sp
    d116:	f7ff fe5d 	bl	cdd4 <bt_hci_le_enh_conn_complete>
}
    d11a:	b008      	add	sp, #32
    d11c:	bd10      	pop	{r4, pc}
    d11e:	bf00      	nop
    d120:	0001c4d6 	.word	0x0001c4d6

0000d124 <bt_send>:
	return bt_dev.drv->send(buf);
    d124:	4b02      	ldr	r3, [pc, #8]	; (d130 <bt_send+0xc>)
    d126:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
    d12a:	695b      	ldr	r3, [r3, #20]
    d12c:	4718      	bx	r3
    d12e:	bf00      	nop
    d130:	20008000 	.word	0x20008000

0000d134 <bt_hci_cmd_send>:
{
    d134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d136:	4605      	mov	r5, r0
	if (!buf) {
    d138:	460c      	mov	r4, r1
{
    d13a:	af00      	add	r7, sp, #0
	if (!buf) {
    d13c:	b919      	cbnz	r1, d146 <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    d13e:	f7ff fd3b 	bl	cbb8 <bt_hci_cmd_create>
		if (!buf) {
    d142:	4604      	mov	r4, r0
    d144:	b318      	cbz	r0, d18e <bt_hci_cmd_send+0x5a>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    d146:	f640 4335 	movw	r3, #3125	; 0xc35
    d14a:	429d      	cmp	r5, r3
    d14c:	d119      	bne.n	d182 <bt_hci_cmd_send+0x4e>
		err = bt_send(buf);
    d14e:	4620      	mov	r0, r4
    d150:	f7ff ffe8 	bl	d124 <bt_send>
		if (err) {
    d154:	4605      	mov	r5, r0
    d156:	b188      	cbz	r0, d17c <bt_hci_cmd_send+0x48>
			LOG_ERR("Unable to send to driver (err %d)", err);
    d158:	466e      	mov	r6, sp
    d15a:	b088      	sub	sp, #32
    d15c:	466a      	mov	r2, sp
    d15e:	4b0d      	ldr	r3, [pc, #52]	; (d194 <bt_hci_cmd_send+0x60>)
    d160:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d164:	e9c2 3005 	strd	r3, r0, [r2, #20]
    d168:	2303      	movs	r3, #3
    d16a:	480b      	ldr	r0, [pc, #44]	; (d198 <bt_hci_cmd_send+0x64>)
    d16c:	f842 3f10 	str.w	r3, [r2, #16]!
    d170:	f00a fd89 	bl	17c86 <z_log_msg_static_create.constprop.0>
			net_buf_unref(buf);
    d174:	4620      	mov	r0, r4
    d176:	46b5      	mov	sp, r6
    d178:	f004 fc10 	bl	1199c <net_buf_unref>
}
    d17c:	4628      	mov	r0, r5
    d17e:	46bd      	mov	sp, r7
    d180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    d182:	4621      	mov	r1, r4
    d184:	4805      	ldr	r0, [pc, #20]	; (d19c <bt_hci_cmd_send+0x68>)
    d186:	f00b ffea 	bl	1915e <net_buf_put>
	return 0;
    d18a:	2500      	movs	r5, #0
    d18c:	e7f6      	b.n	d17c <bt_hci_cmd_send+0x48>
			return -ENOBUFS;
    d18e:	f06f 0568 	mvn.w	r5, #104	; 0x68
    d192:	e7f3      	b.n	d17c <bt_hci_cmd_send+0x48>
    d194:	0001c93d 	.word	0x0001c93d
    d198:	0001b1e8 	.word	0x0001b1e8
    d19c:	20008144 	.word	0x20008144

0000d1a0 <bt_hci_host_num_completed_packets>:
{
    d1a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d1a4:	b086      	sub	sp, #24
    d1a6:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
    d1a8:	8b45      	ldrh	r5, [r0, #26]
	uint8_t index = acl(buf)->index;
    d1aa:	7e46      	ldrb	r6, [r0, #25]
{
    d1ac:	af00      	add	r7, sp, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    d1ae:	7a80      	ldrb	r0, [r0, #10]
    d1b0:	f004 fb32 	bl	11818 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
    d1b4:	4621      	mov	r1, r4
    d1b6:	f00d f9a0 	bl	1a4fa <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    d1ba:	4b2d      	ldr	r3, [pc, #180]	; (d270 <bt_hci_host_num_completed_packets+0xd0>)
    d1bc:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
    d1c0:	069b      	lsls	r3, r3, #26
    d1c2:	d513      	bpl.n	d1ec <bt_hci_host_num_completed_packets+0x4c>
	conn = bt_conn_lookup_index(index);
    d1c4:	4630      	mov	r0, r6
    d1c6:	f002 fa8b 	bl	f6e0 <bt_conn_lookup_index>
	if (!conn) {
    d1ca:	4604      	mov	r4, r0
    d1cc:	b990      	cbnz	r0, d1f4 <bt_hci_host_num_completed_packets+0x54>
		LOG_WRN("Unable to look up conn with index 0x%02x", index);
    d1ce:	466c      	mov	r4, sp
    d1d0:	b088      	sub	sp, #32
    d1d2:	466a      	mov	r2, sp
    d1d4:	4b27      	ldr	r3, [pc, #156]	; (d274 <bt_hci_host_num_completed_packets+0xd4>)
    d1d6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    d1da:	e9c2 3605 	strd	r3, r6, [r2, #20]
    d1de:	2303      	movs	r3, #3
    d1e0:	4825      	ldr	r0, [pc, #148]	; (d278 <bt_hci_host_num_completed_packets+0xd8>)
    d1e2:	f842 3f10 	str.w	r3, [r2, #16]!
    d1e6:	f00a fd4e 	bl	17c86 <z_log_msg_static_create.constprop.0>
    d1ea:	46a5      	mov	sp, r4
}
    d1ec:	3718      	adds	r7, #24
    d1ee:	46bd      	mov	sp, r7
    d1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->state != BT_CONN_CONNECTED &&
    d1f4:	7a83      	ldrb	r3, [r0, #10]
    d1f6:	3b07      	subs	r3, #7
    d1f8:	2b01      	cmp	r3, #1
    d1fa:	d90e      	bls.n	d21a <bt_hci_host_num_completed_packets+0x7a>
		LOG_WRN("Not reporting packet for non-connected conn");
    d1fc:	4b1f      	ldr	r3, [pc, #124]	; (d27c <bt_hci_host_num_completed_packets+0xdc>)
    d1fe:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    d202:	617b      	str	r3, [r7, #20]
    d204:	2302      	movs	r3, #2
    d206:	481c      	ldr	r0, [pc, #112]	; (d278 <bt_hci_host_num_completed_packets+0xd8>)
    d208:	613b      	str	r3, [r7, #16]
    d20a:	f107 0210 	add.w	r2, r7, #16
    d20e:	f00a fd3a 	bl	17c86 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
    d212:	4620      	mov	r0, r4
    d214:	f00a ff39 	bl	1808a <bt_conn_unref>
		return;
    d218:	e7e8      	b.n	d1ec <bt_hci_host_num_completed_packets+0x4c>
	bt_conn_unref(conn);
    d21a:	f00a ff36 	bl	1808a <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
    d21e:	2105      	movs	r1, #5
    d220:	f640 4035 	movw	r0, #3125	; 0xc35
    d224:	f7ff fcc8 	bl	cbb8 <bt_hci_cmd_create>
	if (!buf) {
    d228:	4604      	mov	r4, r0
    d22a:	b958      	cbnz	r0, d244 <bt_hci_host_num_completed_packets+0xa4>
		LOG_ERR("Unable to allocate new HCI command");
    d22c:	4b14      	ldr	r3, [pc, #80]	; (d280 <bt_hci_host_num_completed_packets+0xe0>)
    d22e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d232:	617b      	str	r3, [r7, #20]
    d234:	2302      	movs	r3, #2
    d236:	4810      	ldr	r0, [pc, #64]	; (d278 <bt_hci_host_num_completed_packets+0xd8>)
    d238:	613b      	str	r3, [r7, #16]
    d23a:	f107 0210 	add.w	r2, r7, #16
    d23e:	f00a fd22 	bl	17c86 <z_log_msg_static_create.constprop.0>
		return;
    d242:	e7d3      	b.n	d1ec <bt_hci_host_num_completed_packets+0x4c>
	return net_buf_simple_add(&buf->b, len);
    d244:	f100 080c 	add.w	r8, r0, #12
    d248:	2101      	movs	r1, #1
    d24a:	4640      	mov	r0, r8
    d24c:	f00b ffb3 	bl	191b6 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
    d250:	2601      	movs	r6, #1
    d252:	2104      	movs	r1, #4
    d254:	7006      	strb	r6, [r0, #0]
    d256:	4640      	mov	r0, r8
    d258:	f00b ffad 	bl	191b6 <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
    d25c:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
    d25e:	8005      	strh	r5, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
    d260:	7086      	strb	r6, [r0, #2]
    d262:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    d264:	4621      	mov	r1, r4
    d266:	f640 4035 	movw	r0, #3125	; 0xc35
    d26a:	f7ff ff63 	bl	d134 <bt_hci_cmd_send>
    d26e:	e7bd      	b.n	d1ec <bt_hci_host_num_completed_packets+0x4c>
    d270:	20008000 	.word	0x20008000
    d274:	0001c95f 	.word	0x0001c95f
    d278:	0001b1e8 	.word	0x0001b1e8
    d27c:	0001c988 	.word	0x0001c988
    d280:	0001c9b4 	.word	0x0001c9b4

0000d284 <le_conn_param_req>:
{
    d284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d288:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    d28a:	68c3      	ldr	r3, [r0, #12]
{
    d28c:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    d28e:	78d9      	ldrb	r1, [r3, #3]
    d290:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    d292:	f8b3 8000 	ldrh.w	r8, [r3]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    d296:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    d29a:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    d29c:	7959      	ldrb	r1, [r3, #5]
    d29e:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
    d2a0:	fa1f f488 	uxth.w	r4, r8
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    d2a4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    d2a8:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    d2aa:	799a      	ldrb	r2, [r3, #6]
    d2ac:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
    d2ae:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
    d2b0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    d2b4:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    d2b6:	7a1a      	ldrb	r2, [r3, #8]
    d2b8:	7a5b      	ldrb	r3, [r3, #9]
    d2ba:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    d2be:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
    d2c0:	f001 fe8a 	bl	efd8 <bt_conn_lookup_handle>
	if (!conn) {
    d2c4:	4606      	mov	r6, r0
    d2c6:	b9b0      	cbnz	r0, d2f6 <le_conn_param_req+0x72>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
    d2c8:	466d      	mov	r5, sp
    d2ca:	b088      	sub	sp, #32
    d2cc:	466a      	mov	r2, sp
    d2ce:	4b20      	ldr	r3, [pc, #128]	; (d350 <le_conn_param_req+0xcc>)
    d2d0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d2d4:	e9c2 3405 	strd	r3, r4, [r2, #20]
    d2d8:	2303      	movs	r3, #3
    d2da:	481e      	ldr	r0, [pc, #120]	; (d354 <le_conn_param_req+0xd0>)
    d2dc:	f842 3f10 	str.w	r3, [r2, #16]!
    d2e0:	f00a fcd1 	bl	17c86 <z_log_msg_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    d2e4:	2102      	movs	r1, #2
    d2e6:	46ad      	mov	sp, r5
    d2e8:	4620      	mov	r0, r4
    d2ea:	f00a fd5c 	bl	17da6 <le_conn_param_neg_reply>
}
    d2ee:	3708      	adds	r7, #8
    d2f0:	46bd      	mov	sp, r7
    d2f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!le_param_req(conn, &param)) {
    d2f6:	4639      	mov	r1, r7
    d2f8:	f001 ffda 	bl	f2b0 <le_param_req>
    d2fc:	b938      	cbnz	r0, d30e <le_conn_param_req+0x8a>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    d2fe:	211e      	movs	r1, #30
    d300:	4620      	mov	r0, r4
    d302:	f00a fd50 	bl	17da6 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    d306:	4630      	mov	r0, r6
    d308:	f00a febf 	bl	1808a <bt_conn_unref>
    d30c:	e7ef      	b.n	d2ee <le_conn_param_req+0x6a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    d30e:	210e      	movs	r1, #14
    d310:	f242 0020 	movw	r0, #8224	; 0x2020
    d314:	f7ff fc50 	bl	cbb8 <bt_hci_cmd_create>
	if (!buf) {
    d318:	4605      	mov	r5, r0
    d31a:	2800      	cmp	r0, #0
    d31c:	d0f3      	beq.n	d306 <le_conn_param_req+0x82>
    d31e:	210e      	movs	r1, #14
    d320:	300c      	adds	r0, #12
    d322:	f00b ff48 	bl	191b6 <net_buf_simple_add>
    d326:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    d328:	220e      	movs	r2, #14
    d32a:	2100      	movs	r1, #0
    d32c:	f00a fc1c 	bl	17b68 <memset>
	cp->handle = sys_cpu_to_le16(handle);
    d330:	f8a4 8000 	strh.w	r8, [r4]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    d334:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    d336:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    d338:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    d33a:	887b      	ldrh	r3, [r7, #2]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    d33c:	f242 0020 	movw	r0, #8224	; 0x2020
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    d340:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    d342:	88bb      	ldrh	r3, [r7, #4]
    d344:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    d346:	88fb      	ldrh	r3, [r7, #6]
    d348:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    d34a:	f7ff fef3 	bl	d134 <bt_hci_cmd_send>
    d34e:	e7da      	b.n	d306 <le_conn_param_req+0x82>
    d350:	0001c5ff 	.word	0x0001c5ff
    d354:	0001b1e8 	.word	0x0001b1e8

0000d358 <hci_tx_thread>:
{
    d358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    d35c:	f8df 8154 	ldr.w	r8, [pc, #340]	; d4b4 <hci_tx_thread+0x15c>
{
    d360:	b087      	sub	sp, #28
		BT_ASSERT(err == 0);
    d362:	f8df 9154 	ldr.w	r9, [pc, #340]	; d4b8 <hci_tx_thread+0x160>
{
    d366:	af00      	add	r7, sp, #0
		events[0].state = K_POLL_STATE_NOT_READY;
    d368:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    d36c:	4853      	ldr	r0, [pc, #332]	; (d4bc <hci_tx_thread+0x164>)
		events[0].state = K_POLL_STATE_NOT_READY;
    d36e:	f36f 3394 	bfc	r3, #14, #7
    d372:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    d376:	f001 fde5 	bl	ef44 <bt_conn_prepare_events>
    d37a:	1c45      	adds	r5, r0, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    d37c:	f04f 32ff 	mov.w	r2, #4294967295
    d380:	f04f 33ff 	mov.w	r3, #4294967295
    d384:	4629      	mov	r1, r5
    d386:	484b      	ldr	r0, [pc, #300]	; (d4b4 <hci_tx_thread+0x15c>)
    d388:	f008 fdba 	bl	15f00 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    d38c:	b160      	cbz	r0, d3a8 <hci_tx_thread+0x50>
    d38e:	f640 23c8 	movw	r3, #2760	; 0xac8
    d392:	464a      	mov	r2, r9
    d394:	494a      	ldr	r1, [pc, #296]	; (d4c0 <hci_tx_thread+0x168>)
    d396:	484b      	ldr	r0, [pc, #300]	; (d4c4 <hci_tx_thread+0x16c>)
    d398:	f009 fa02 	bl	167a0 <assert_print>
    d39c:	4040      	eors	r0, r0
    d39e:	f380 8811 	msr	BASEPRI, r0
    d3a2:	f04f 0003 	mov.w	r0, #3
    d3a6:	df02      	svc	2
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
    d3a8:	f04f 0a03 	mov.w	sl, #3
{
    d3ac:	4e41      	ldr	r6, [pc, #260]	; (d4b4 <hci_tx_thread+0x15c>)
	for (; count; ev++, count--) {
    d3ae:	b915      	cbnz	r5, d3b6 <hci_tx_thread+0x5e>
	z_impl_k_yield();
    d3b0:	f008 fa96 	bl	158e0 <z_impl_k_yield>
	while (1) {
    d3b4:	e7d8      	b.n	d368 <hci_tx_thread+0x10>
		switch (ev->state) {
    d3b6:	68f3      	ldr	r3, [r6, #12]
    d3b8:	f3c3 3386 	ubfx	r3, r3, #14, #7
    d3bc:	2b02      	cmp	r3, #2
    d3be:	d960      	bls.n	d482 <hci_tx_thread+0x12a>
    d3c0:	2b04      	cmp	r3, #4
    d3c2:	d168      	bne.n	d496 <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
    d3c4:	7b33      	ldrb	r3, [r6, #12]
    d3c6:	2b00      	cmp	r3, #0
    d3c8:	d15e      	bne.n	d488 <hci_tx_thread+0x130>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    d3ca:	2200      	movs	r2, #0
    d3cc:	2300      	movs	r3, #0
    d3ce:	483e      	ldr	r0, [pc, #248]	; (d4c8 <hci_tx_thread+0x170>)
    d3d0:	f00b fe96 	bl	19100 <net_buf_get>
	BT_ASSERT(buf);
    d3d4:	4604      	mov	r4, r0
    d3d6:	b960      	cbnz	r0, d3f2 <hci_tx_thread+0x9a>
    d3d8:	f640 235a 	movw	r3, #2650	; 0xa5a
    d3dc:	464a      	mov	r2, r9
    d3de:	493b      	ldr	r1, [pc, #236]	; (d4cc <hci_tx_thread+0x174>)
    d3e0:	4838      	ldr	r0, [pc, #224]	; (d4c4 <hci_tx_thread+0x16c>)
    d3e2:	f009 f9dd 	bl	167a0 <assert_print>
    d3e6:	4040      	eors	r0, r0
    d3e8:	f380 8811 	msr	BASEPRI, r0
    d3ec:	f04f 0003 	mov.w	r0, #3
    d3f0:	df02      	svc	2
	if (bt_dev.sent_cmd) {
    d3f2:	f8df b0dc 	ldr.w	fp, [pc, #220]	; d4d0 <hci_tx_thread+0x178>
	return z_impl_k_sem_take(sem, timeout);
    d3f6:	f04f 33ff 	mov.w	r3, #4294967295
    d3fa:	f04f 32ff 	mov.w	r2, #4294967295
    d3fe:	4835      	ldr	r0, [pc, #212]	; (d4d4 <hci_tx_thread+0x17c>)
    d400:	f007 fdf8 	bl	14ff4 <z_impl_k_sem_take>
    d404:	f8db 3138 	ldr.w	r3, [fp, #312]	; 0x138
    d408:	b18b      	cbz	r3, d42e <hci_tx_thread+0xd6>
		LOG_ERR("Uncleared pending sent_cmd");
    d40a:	4b33      	ldr	r3, [pc, #204]	; (d4d8 <hci_tx_thread+0x180>)
    d40c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d410:	617b      	str	r3, [r7, #20]
    d412:	2302      	movs	r3, #2
    d414:	4831      	ldr	r0, [pc, #196]	; (d4dc <hci_tx_thread+0x184>)
    d416:	f107 0210 	add.w	r2, r7, #16
    d41a:	613b      	str	r3, [r7, #16]
    d41c:	f00a fc33 	bl	17c86 <z_log_msg_static_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
    d420:	f8db 0138 	ldr.w	r0, [fp, #312]	; 0x138
    d424:	f004 faba 	bl	1199c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    d428:	2300      	movs	r3, #0
    d42a:	f8cb 3138 	str.w	r3, [fp, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
    d42e:	4620      	mov	r0, r4
    d430:	f00b fe97 	bl	19162 <net_buf_ref>
    d434:	f8cb 0138 	str.w	r0, [fp, #312]	; 0x138
	err = bt_send(buf);
    d438:	4620      	mov	r0, r4
    d43a:	f7ff fe73 	bl	d124 <bt_send>
	if (err) {
    d43e:	b300      	cbz	r0, d482 <hci_tx_thread+0x12a>
		LOG_ERR("Unable to send to driver (err %d)", err);
    d440:	46eb      	mov	fp, sp
    d442:	b088      	sub	sp, #32
    d444:	466a      	mov	r2, sp
    d446:	4b26      	ldr	r3, [pc, #152]	; (d4e0 <hci_tx_thread+0x188>)
    d448:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d44c:	e9c2 3005 	strd	r3, r0, [r2, #20]
    d450:	2303      	movs	r3, #3
    d452:	4822      	ldr	r0, [pc, #136]	; (d4dc <hci_tx_thread+0x184>)
    d454:	f842 3f10 	str.w	r3, [r2, #16]!
    d458:	f00a fc15 	bl	17c86 <z_log_msg_static_create.constprop.0>
    d45c:	46dd      	mov	sp, fp
	z_impl_k_sem_give(sem);
    d45e:	481d      	ldr	r0, [pc, #116]	; (d4d4 <hci_tx_thread+0x17c>)
    d460:	f007 fda2 	bl	14fa8 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    d464:	4620      	mov	r0, r4
    d466:	f004 f9df 	bl	11828 <net_buf_id>
    d46a:	220c      	movs	r2, #12
    d46c:	4b1d      	ldr	r3, [pc, #116]	; (d4e4 <hci_tx_thread+0x18c>)
    d46e:	211f      	movs	r1, #31
    d470:	fb02 3000 	mla	r0, r2, r0, r3
    d474:	4622      	mov	r2, r4
    d476:	8840      	ldrh	r0, [r0, #2]
    d478:	f7ff f9b4 	bl	c7e4 <hci_cmd_done>
		net_buf_unref(buf);
    d47c:	4620      	mov	r0, r4
    d47e:	f004 fa8d 	bl	1199c <net_buf_unref>
	for (; count; ev++, count--) {
    d482:	3614      	adds	r6, #20
    d484:	3d01      	subs	r5, #1
    d486:	e792      	b.n	d3ae <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    d488:	2b01      	cmp	r3, #1
    d48a:	d1fa      	bne.n	d482 <hci_tx_thread+0x12a>
					conn = CONTAINER_OF(ev->fifo,
    d48c:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    d48e:	3838      	subs	r0, #56	; 0x38
    d490:	f002 f89c 	bl	f5cc <bt_conn_process_tx>
    d494:	e7f5      	b.n	d482 <hci_tx_thread+0x12a>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
    d496:	466c      	mov	r4, sp
    d498:	b088      	sub	sp, #32
    d49a:	466a      	mov	r2, sp
    d49c:	4912      	ldr	r1, [pc, #72]	; (d4e8 <hci_tx_thread+0x190>)
    d49e:	480f      	ldr	r0, [pc, #60]	; (d4dc <hci_tx_thread+0x184>)
		switch (ev->state) {
    d4a0:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
    d4a4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    d4a8:	f842 af10 	str.w	sl, [r2, #16]!
    d4ac:	f00a fbeb 	bl	17c86 <z_log_msg_static_create.constprop.0>
    d4b0:	46a5      	mov	sp, r4
    d4b2:	e7e6      	b.n	d482 <hci_tx_thread+0x12a>
    d4b4:	20008218 	.word	0x20008218
    d4b8:	0001c66b 	.word	0x0001c66b
    d4bc:	2000822c 	.word	0x2000822c
    d4c0:	0001c822 	.word	0x0001c822
    d4c4:	0001c6b8 	.word	0x0001c6b8
    d4c8:	20008144 	.word	0x20008144
    d4cc:	0001d6ae 	.word	0x0001d6ae
    d4d0:	20008000 	.word	0x20008000
    d4d4:	20008120 	.word	0x20008120
    d4d8:	0001c9d7 	.word	0x0001c9d7
    d4dc:	0001b1e8 	.word	0x0001b1e8
    d4e0:	0001c93d 	.word	0x0001c93d
    d4e4:	20009778 	.word	0x20009778
    d4e8:	0001c9f2 	.word	0x0001c9f2

0000d4ec <hci_event_prio>:
{
    d4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d4f0:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    d4f2:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
    d4f6:	4630      	mov	r0, r6
    d4f8:	f00b fe9d 	bl	19236 <net_buf_simple_headroom>
	state->len = buf->len;
    d4fc:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    d500:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
    d502:	f1b8 0f01 	cmp.w	r8, #1
    d506:	d80c      	bhi.n	d522 <hci_event_prio+0x36>
    d508:	f640 636f 	movw	r3, #3695	; 0xe6f
    d50c:	4a1b      	ldr	r2, [pc, #108]	; (d57c <hci_event_prio+0x90>)
    d50e:	491c      	ldr	r1, [pc, #112]	; (d580 <hci_event_prio+0x94>)
    d510:	481c      	ldr	r0, [pc, #112]	; (d584 <hci_event_prio+0x98>)
    d512:	f009 f945 	bl	167a0 <assert_print>
    d516:	4040      	eors	r0, r0
    d518:	f380 8811 	msr	BASEPRI, r0
    d51c:	f04f 0003 	mov.w	r0, #3
    d520:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    d522:	4630      	mov	r0, r6
    d524:	2102      	movs	r1, #2
    d526:	f00b fe76 	bl	19216 <net_buf_simple_pull_mem>
    d52a:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    d52c:	7800      	ldrb	r0, [r0, #0]
    d52e:	f00a fb8c 	bl	17c4a <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    d532:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    d534:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    d536:	d40c      	bmi.n	d552 <hci_event_prio+0x66>
    d538:	f640 6373 	movw	r3, #3699	; 0xe73
    d53c:	4a0f      	ldr	r2, [pc, #60]	; (d57c <hci_event_prio+0x90>)
    d53e:	4912      	ldr	r1, [pc, #72]	; (d588 <hci_event_prio+0x9c>)
    d540:	4810      	ldr	r0, [pc, #64]	; (d584 <hci_event_prio+0x98>)
    d542:	f009 f92d 	bl	167a0 <assert_print>
    d546:	4040      	eors	r0, r0
    d548:	f380 8811 	msr	BASEPRI, r0
    d54c:	f04f 0003 	mov.w	r0, #3
    d550:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    d552:	2305      	movs	r3, #5
    d554:	4621      	mov	r1, r4
    d556:	4a0d      	ldr	r2, [pc, #52]	; (d58c <hci_event_prio+0xa0>)
    d558:	7838      	ldrb	r0, [r7, #0]
    d55a:	f7ff f80b 	bl	c574 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    d55e:	07b3      	lsls	r3, r6, #30
    d560:	d507      	bpl.n	d572 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    d562:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
    d564:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
    d568:	fa13 f585 	uxtah	r5, r3, r5
    d56c:	60e5      	str	r5, [r4, #12]
}
    d56e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    d572:	4620      	mov	r0, r4
}
    d574:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    d578:	f004 ba10 	b.w	1199c <net_buf_unref>
    d57c:	0001c66b 	.word	0x0001c66b
    d580:	0001c69f 	.word	0x0001c69f
    d584:	0001c6b8 	.word	0x0001c6b8
    d588:	0001ca13 	.word	0x0001ca13
    d58c:	0001b680 	.word	0x0001b680

0000d590 <bt_recv>:
{
    d590:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    d592:	7e03      	ldrb	r3, [r0, #24]
    d594:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    d596:	2b01      	cmp	r3, #1
{
    d598:	af00      	add	r7, sp, #0
	switch (bt_buf_get_type(buf)) {
    d59a:	d006      	beq.n	d5aa <bt_recv+0x1a>
    d59c:	2b03      	cmp	r3, #3
    d59e:	d112      	bne.n	d5c6 <bt_recv+0x36>
			rx_queue_put(buf);
    d5a0:	f7fe ff14 	bl	c3cc <rx_queue_put>
		return 0;
    d5a4:	2000      	movs	r0, #0
}
    d5a6:	46bd      	mov	sp, r7
    d5a8:	bdb0      	pop	{r4, r5, r7, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    d5aa:	68c3      	ldr	r3, [r0, #12]
    d5ac:	7818      	ldrb	r0, [r3, #0]
    d5ae:	f00a fb4c 	bl	17c4a <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    d5b2:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    d5b4:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    d5b6:	d502      	bpl.n	d5be <bt_recv+0x2e>
			hci_event_prio(buf);
    d5b8:	4620      	mov	r0, r4
    d5ba:	f7ff ff97 	bl	d4ec <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    d5be:	07ab      	lsls	r3, r5, #30
    d5c0:	d5f0      	bpl.n	d5a4 <bt_recv+0x14>
			rx_queue_put(buf);
    d5c2:	4620      	mov	r0, r4
    d5c4:	e7ec      	b.n	d5a0 <bt_recv+0x10>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    d5c6:	466d      	mov	r5, sp
    d5c8:	b088      	sub	sp, #32
    d5ca:	466a      	mov	r2, sp
    d5cc:	4908      	ldr	r1, [pc, #32]	; (d5f0 <bt_recv+0x60>)
    d5ce:	4809      	ldr	r0, [pc, #36]	; (d5f4 <bt_recv+0x64>)
	switch (bt_buf_get_type(buf)) {
    d5d0:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    d5d4:	2303      	movs	r3, #3
    d5d6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d5da:	f842 3f10 	str.w	r3, [r2, #16]!
    d5de:	f00a fb52 	bl	17c86 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
    d5e2:	4620      	mov	r0, r4
    d5e4:	46ad      	mov	sp, r5
    d5e6:	f004 f9d9 	bl	1199c <net_buf_unref>
		return -EINVAL;
    d5ea:	f06f 0015 	mvn.w	r0, #21
    d5ee:	e7da      	b.n	d5a6 <bt_recv+0x16>
    d5f0:	0001ca2c 	.word	0x0001ca2c
    d5f4:	0001b1e8 	.word	0x0001b1e8

0000d5f8 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    d5f8:	4a08      	ldr	r2, [pc, #32]	; (d61c <bt_hci_driver_register+0x24>)
{
    d5fa:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    d5fc:	f8d2 015c 	ldr.w	r0, [r2, #348]	; 0x15c
    d600:	b930      	cbnz	r0, d610 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    d602:	68d9      	ldr	r1, [r3, #12]
    d604:	b139      	cbz	r1, d616 <bt_hci_driver_register+0x1e>
    d606:	6959      	ldr	r1, [r3, #20]
    d608:	b129      	cbz	r1, d616 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    d60a:	f8c2 315c 	str.w	r3, [r2, #348]	; 0x15c
	return 0;
    d60e:	4770      	bx	lr
		return -EALREADY;
    d610:	f06f 0077 	mvn.w	r0, #119	; 0x77
    d614:	4770      	bx	lr
		return -EINVAL;
    d616:	f06f 0015 	mvn.w	r0, #21
}
    d61a:	4770      	bx	lr
    d61c:	20008000 	.word	0x20008000

0000d620 <bt_finalize_init>:
{
    d620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    d624:	4c45      	ldr	r4, [pc, #276]	; (d73c <bt_finalize_init+0x11c>)
{
    d626:	b083      	sub	sp, #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    d628:	2104      	movs	r1, #4
    d62a:	af00      	add	r7, sp, #0
    d62c:	4844      	ldr	r0, [pc, #272]	; (d740 <bt_finalize_init+0x120>)
    d62e:	f00a fb1f 	bl	17c70 <atomic_or>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    d632:	4d44      	ldr	r5, [pc, #272]	; (d744 <bt_finalize_init+0x124>)
    d634:	79e2      	ldrb	r2, [r4, #7]
    d636:	4b44      	ldr	r3, [pc, #272]	; (d748 <bt_finalize_init+0x128>)
    d638:	4620      	mov	r0, r4
    d63a:	2a01      	cmp	r2, #1
    d63c:	bf88      	it	hi
    d63e:	461d      	movhi	r5, r3
    d640:	466e      	mov	r6, sp
    d642:	f7fe fd53 	bl	c0ec <bt_addr_le_str>
    d646:	b08a      	sub	sp, #40	; 0x28
    d648:	466b      	mov	r3, sp
    d64a:	4940      	ldr	r1, [pc, #256]	; (d74c <bt_finalize_init+0x12c>)
    d64c:	61d8      	str	r0, [r3, #28]
    d64e:	e9c3 1505 	strd	r1, r5, [r3, #20]
    d652:	493f      	ldr	r1, [pc, #252]	; (d750 <bt_finalize_init+0x130>)
    d654:	f103 0210 	add.w	r2, r3, #16
    d658:	6079      	str	r1, [r7, #4]
    d65a:	1d38      	adds	r0, r7, #4
    d65c:	f103 011f 	add.w	r1, r3, #31
    d660:	f103 0523 	add.w	r5, r3, #35	; 0x23
    d664:	f810 cb01 	ldrb.w	ip, [r0], #1
    d668:	f801 cf01 	strb.w	ip, [r1, #1]!
    d66c:	42a9      	cmp	r1, r5
    d66e:	d1f9      	bne.n	d664 <bt_finalize_init+0x44>
	for (i = 1; i < bt_dev.id_count; i++) {
    d670:	2501      	movs	r5, #1
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    d672:	4938      	ldr	r1, [pc, #224]	; (d754 <bt_finalize_init+0x134>)
    d674:	4838      	ldr	r0, [pc, #224]	; (d758 <bt_finalize_init+0x138>)
    d676:	6119      	str	r1, [r3, #16]
    d678:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
    d67c:	f00a fb03 	bl	17c86 <z_log_msg_static_create.constprop.0>
    d680:	f8df b0b8 	ldr.w	fp, [pc, #184]	; d73c <bt_finalize_init+0x11c>
    d684:	46b5      	mov	sp, r6
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
    d686:	f8df 80d4 	ldr.w	r8, [pc, #212]	; d75c <bt_finalize_init+0x13c>
    d68a:	4e35      	ldr	r6, [pc, #212]	; (d760 <bt_finalize_init+0x140>)
    d68c:	f8df 90c8 	ldr.w	r9, [pc, #200]	; d758 <bt_finalize_init+0x138>
	for (i = 1; i < bt_dev.id_count; i++) {
    d690:	79e3      	ldrb	r3, [r4, #7]
    d692:	f10b 0b07 	add.w	fp, fp, #7
    d696:	429d      	cmp	r5, r3
    d698:	db39      	blt.n	d70e <bt_finalize_init+0xee>
	LOG_INF("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    d69a:	f894 5070 	ldrb.w	r5, [r4, #112]	; 0x70
    d69e:	466e      	mov	r6, sp
    d6a0:	4628      	mov	r0, r5
    d6a2:	f7fe fe17 	bl	c2d4 <ver_str>
    d6a6:	b08c      	sub	sp, #48	; 0x30
    d6a8:	466a      	mov	r2, sp
    d6aa:	f8b4 1072 	ldrh.w	r1, [r4, #114]	; 0x72
    d6ae:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
    d6b2:	e9c2 5107 	strd	r5, r1, [r2, #28]
    d6b6:	f44f 7500 	mov.w	r5, #512	; 0x200
    d6ba:	6253      	str	r3, [r2, #36]	; 0x24
    d6bc:	f8df c0a4 	ldr.w	ip, [pc, #164]	; d764 <bt_finalize_init+0x144>
    d6c0:	4b29      	ldr	r3, [pc, #164]	; (d768 <bt_finalize_init+0x148>)
    d6c2:	e9c2 c005 	strd	ip, r0, [r2, #20]
    d6c6:	8515      	strh	r5, [r2, #40]	; 0x28
    d6c8:	f44f 5153 	mov.w	r1, #13504	; 0x34c0
    d6cc:	f842 3f10 	str.w	r3, [r2, #16]!
    d6d0:	4821      	ldr	r0, [pc, #132]	; (d758 <bt_finalize_init+0x138>)
    d6d2:	f00a fad8 	bl	17c86 <z_log_msg_static_create.constprop.0>
    d6d6:	46b5      	mov	sp, r6
	LOG_INF("LMP: version %s (0x%02x) subver 0x%04x", ver_str(bt_dev.lmp_version),
    d6d8:	f894 6071 	ldrb.w	r6, [r4, #113]	; 0x71
    d6dc:	4630      	mov	r0, r6
    d6de:	f7fe fdf9 	bl	c2d4 <ver_str>
    d6e2:	b08a      	sub	sp, #40	; 0x28
    d6e4:	466a      	mov	r2, sp
    d6e6:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
    d6ea:	4920      	ldr	r1, [pc, #128]	; (d76c <bt_finalize_init+0x14c>)
    d6ec:	e9c2 6307 	strd	r6, r3, [r2, #28]
    d6f0:	4b1f      	ldr	r3, [pc, #124]	; (d770 <bt_finalize_init+0x150>)
    d6f2:	e9c2 1005 	strd	r1, r0, [r2, #20]
    d6f6:	8495      	strh	r5, [r2, #36]	; 0x24
    d6f8:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
    d6fc:	4816      	ldr	r0, [pc, #88]	; (d758 <bt_finalize_init+0x138>)
    d6fe:	f842 3f10 	str.w	r3, [r2, #16]!
    d702:	f00a fac0 	bl	17c86 <z_log_msg_static_create.constprop.0>
}
    d706:	370c      	adds	r7, #12
    d708:	46bd      	mov	sp, r7
    d70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
    d70e:	4658      	mov	r0, fp
    d710:	f7fe fcec 	bl	c0ec <bt_addr_le_str>
    d714:	46ea      	mov	sl, sp
    d716:	b08a      	sub	sp, #40	; 0x28
    d718:	466a      	mov	r2, sp
    d71a:	f240 3301 	movw	r3, #769	; 0x301
    d71e:	e9c2 6505 	strd	r6, r5, [r2, #20]
    d722:	61d0      	str	r0, [r2, #28]
    d724:	8413      	strh	r3, [r2, #32]
    d726:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    d72a:	4648      	mov	r0, r9
    d72c:	f842 8f10 	str.w	r8, [r2, #16]!
    d730:	f00a faa9 	bl	17c86 <z_log_msg_static_create.constprop.0>
	for (i = 1; i < bt_dev.id_count; i++) {
    d734:	3501      	adds	r5, #1
    d736:	46d5      	mov	sp, sl
    d738:	e7aa      	b.n	d690 <bt_finalize_init+0x70>
    d73a:	bf00      	nop
    d73c:	20008000 	.word	0x20008000
    d740:	200080d4 	.word	0x200080d4
    d744:	0001dcdd 	.word	0x0001dcdd
    d748:	0001ca40 	.word	0x0001ca40
    d74c:	0001ca44 	.word	0x0001ca44
    d750:	03010200 	.word	0x03010200
    d754:	02000004 	.word	0x02000004
    d758:	0001b1e8 	.word	0x0001b1e8
    d75c:	01000004 	.word	0x01000004
    d760:	0001ca53 	.word	0x0001ca53
    d764:	0001ca64 	.word	0x0001ca64
    d768:	01000006 	.word	0x01000006
    d76c:	0001caa2 	.word	0x0001caa2
    d770:	01000005 	.word	0x01000005

0000d774 <bt_init>:
{
    d774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d778:	b088      	sub	sp, #32
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    d77a:	4d65      	ldr	r5, [pc, #404]	; (d910 <bt_init+0x19c>)
{
    d77c:	af00      	add	r7, sp, #0
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    d77e:	f8d5 315c 	ldr.w	r3, [r5, #348]	; 0x15c
    d782:	6899      	ldr	r1, [r3, #8]
    d784:	f011 0101 	ands.w	r1, r1, #1
    d788:	d11a      	bne.n	d7c0 <bt_init+0x4c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    d78a:	f640 4003 	movw	r0, #3075	; 0xc03
    d78e:	1d3a      	adds	r2, r7, #4
    d790:	f7ff fa4c 	bl	cc2c <bt_hci_cmd_send_sync>
		if (err) {
    d794:	4604      	mov	r4, r0
    d796:	2800      	cmp	r0, #0
    d798:	f040 80b4 	bne.w	d904 <bt_init+0x190>
		hci_reset_complete(rsp);
    d79c:	6878      	ldr	r0, [r7, #4]
	uint8_t status = buf->data[0];
    d79e:	68c3      	ldr	r3, [r0, #12]
	if (status) {
    d7a0:	781b      	ldrb	r3, [r3, #0]
    d7a2:	b95b      	cbnz	r3, d7bc <bt_init+0x48>
    d7a4:	f105 03d4 	add.w	r3, r5, #212	; 0xd4
    d7a8:	e8d3 2faf 	lda	r2, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    d7ac:	f002 0209 	and.w	r2, r2, #9
    d7b0:	e8d3 1fef 	ldaex	r1, [r3]
    d7b4:	e8c3 2fe4 	stlex	r4, r2, [r3]
    d7b8:	2c00      	cmp	r4, #0
    d7ba:	d1f9      	bne.n	d7b0 <bt_init+0x3c>
		net_buf_unref(rsp);
    d7bc:	f004 f8ee 	bl	1199c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    d7c0:	2100      	movs	r1, #0
    d7c2:	f241 0003 	movw	r0, #4099	; 0x1003
    d7c6:	1d3a      	adds	r2, r7, #4
    d7c8:	f7ff fa30 	bl	cc2c <bt_hci_cmd_send_sync>
	if (err) {
    d7cc:	4604      	mov	r4, r0
    d7ce:	2800      	cmp	r0, #0
    d7d0:	f040 8098 	bne.w	d904 <bt_init+0x190>
	read_local_features_complete(rsp);
    d7d4:	687e      	ldr	r6, [r7, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    d7d6:	2208      	movs	r2, #8
    d7d8:	68f1      	ldr	r1, [r6, #12]
    d7da:	484e      	ldr	r0, [pc, #312]	; (d914 <bt_init+0x1a0>)
    d7dc:	3101      	adds	r1, #1
    d7de:	f00a f9b8 	bl	17b52 <memcpy>
	net_buf_unref(rsp);
    d7e2:	4630      	mov	r0, r6
    d7e4:	f004 f8da 	bl	1199c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    d7e8:	4621      	mov	r1, r4
    d7ea:	f241 0001 	movw	r0, #4097	; 0x1001
    d7ee:	1d3a      	adds	r2, r7, #4
    d7f0:	f7ff fa1c 	bl	cc2c <bt_hci_cmd_send_sync>
	if (err) {
    d7f4:	4604      	mov	r4, r0
    d7f6:	2800      	cmp	r0, #0
    d7f8:	f040 8084 	bne.w	d904 <bt_init+0x190>
	read_local_ver_complete(rsp);
    d7fc:	6878      	ldr	r0, [r7, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    d7fe:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
    d800:	785a      	ldrb	r2, [r3, #1]
    d802:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    d806:	885a      	ldrh	r2, [r3, #2]
    d808:	f8a5 2072 	strh.w	r2, [r5, #114]	; 0x72
	bt_dev.lmp_version = rp->lmp_version;
    d80c:	791a      	ldrb	r2, [r3, #4]
    d80e:	f885 2071 	strb.w	r2, [r5, #113]	; 0x71
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    d812:	f8b3 2007 	ldrh.w	r2, [r3, #7]
    d816:	f8a5 2074 	strh.w	r2, [r5, #116]	; 0x74
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    d81a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
    d81e:	f8a5 3076 	strh.w	r3, [r5, #118]	; 0x76
	net_buf_unref(rsp);
    d822:	f004 f8bb 	bl	1199c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    d826:	4621      	mov	r1, r4
    d828:	f241 0002 	movw	r0, #4098	; 0x1002
    d82c:	1d3a      	adds	r2, r7, #4
    d82e:	f7ff f9fd 	bl	cc2c <bt_hci_cmd_send_sync>
	if (err) {
    d832:	4604      	mov	r4, r0
    d834:	2800      	cmp	r0, #0
    d836:	d165      	bne.n	d904 <bt_init+0x190>
	read_supported_commands_complete(rsp);
    d838:	687c      	ldr	r4, [r7, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
    d83a:	2240      	movs	r2, #64	; 0x40
    d83c:	68e1      	ldr	r1, [r4, #12]
    d83e:	4836      	ldr	r0, [pc, #216]	; (d918 <bt_init+0x1a4>)
    d840:	3101      	adds	r1, #1
    d842:	f00a f986 	bl	17b52 <memcpy>
	net_buf_unref(rsp);
    d846:	4620      	mov	r0, r4
    d848:	f004 f8a8 	bl	1199c <net_buf_unref>
		err = prng_init();
    d84c:	f001 f896 	bl	e97c <prng_init>
		if (err) {
    d850:	4604      	mov	r4, r0
    d852:	2800      	cmp	r0, #0
    d854:	d156      	bne.n	d904 <bt_init+0x190>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    d856:	f895 308a 	ldrb.w	r3, [r5, #138]	; 0x8a
    d85a:	069b      	lsls	r3, r3, #26
    d85c:	d41c      	bmi.n	d898 <bt_init+0x124>
		LOG_WRN("Controller to host flow control not supported");
    d85e:	4b2f      	ldr	r3, [pc, #188]	; (d91c <bt_init+0x1a8>)
    d860:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    d864:	61fb      	str	r3, [r7, #28]
    d866:	2302      	movs	r3, #2
    d868:	482d      	ldr	r0, [pc, #180]	; (d920 <bt_init+0x1ac>)
    d86a:	61bb      	str	r3, [r7, #24]
    d86c:	f107 0218 	add.w	r2, r7, #24
    d870:	f00a fa09 	bl	17c86 <z_log_msg_static_create.constprop.0>
	if (!BT_FEAT_LE(bt_dev.features)) {
    d874:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
    d878:	065e      	lsls	r6, r3, #25
    d87a:	d455      	bmi.n	d928 <bt_init+0x1b4>
		LOG_ERR("Non-LE capable controller detected!");
    d87c:	4b29      	ldr	r3, [pc, #164]	; (d924 <bt_init+0x1b0>)
    d87e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d882:	61fb      	str	r3, [r7, #28]
    d884:	2302      	movs	r3, #2
    d886:	4826      	ldr	r0, [pc, #152]	; (d920 <bt_init+0x1ac>)
    d888:	61bb      	str	r3, [r7, #24]
    d88a:	f107 0218 	add.w	r2, r7, #24
    d88e:	f00a f9fa 	bl	17c86 <z_log_msg_static_create.constprop.0>
		return -ENODEV;
    d892:	f06f 0412 	mvn.w	r4, #18
    d896:	e035      	b.n	d904 <bt_init+0x190>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    d898:	2107      	movs	r1, #7
    d89a:	f640 4033 	movw	r0, #3123	; 0xc33
    d89e:	f7ff f98b 	bl	cbb8 <bt_hci_cmd_create>
	if (!buf) {
    d8a2:	4680      	mov	r8, r0
    d8a4:	2800      	cmp	r0, #0
    d8a6:	f000 8127 	beq.w	daf8 <bt_init+0x384>
	return net_buf_simple_add(&buf->b, len);
    d8aa:	2107      	movs	r1, #7
    d8ac:	300c      	adds	r0, #12
    d8ae:	f00b fc82 	bl	191b6 <net_buf_simple_add>
	(void)memset(hbs, 0, sizeof(*hbs));
    d8b2:	4621      	mov	r1, r4
    d8b4:	2207      	movs	r2, #7
    d8b6:	4606      	mov	r6, r0
    d8b8:	f00a f956 	bl	17b68 <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    d8bc:	231b      	movs	r3, #27
    d8be:	7033      	strb	r3, [r6, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    d8c0:	2306      	movs	r3, #6
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    d8c2:	4622      	mov	r2, r4
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    d8c4:	7074      	strb	r4, [r6, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    d8c6:	7134      	strb	r4, [r6, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    d8c8:	4641      	mov	r1, r8
    d8ca:	f640 4033 	movw	r0, #3123	; 0xc33
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    d8ce:	70f3      	strb	r3, [r6, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    d8d0:	f7ff f9ac 	bl	cc2c <bt_hci_cmd_send_sync>
	if (err) {
    d8d4:	4604      	mov	r4, r0
    d8d6:	b9a8      	cbnz	r0, d904 <bt_init+0x190>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    d8d8:	2101      	movs	r1, #1
    d8da:	f640 4031 	movw	r0, #3121	; 0xc31
    d8de:	f7ff f96b 	bl	cbb8 <bt_hci_cmd_create>
	if (!buf) {
    d8e2:	4606      	mov	r6, r0
    d8e4:	2800      	cmp	r0, #0
    d8e6:	f000 8107 	beq.w	daf8 <bt_init+0x384>
	return net_buf_simple_add_u8(&buf->b, val);
    d8ea:	2101      	movs	r1, #1
    d8ec:	300c      	adds	r0, #12
    d8ee:	f00b fc71 	bl	191d4 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    d8f2:	4622      	mov	r2, r4
    d8f4:	4631      	mov	r1, r6
    d8f6:	f640 4031 	movw	r0, #3121	; 0xc31
    d8fa:	f7ff f997 	bl	cc2c <bt_hci_cmd_send_sync>
	if (err) {
    d8fe:	4604      	mov	r4, r0
    d900:	2800      	cmp	r0, #0
    d902:	d0b7      	beq.n	d874 <bt_init+0x100>
}
    d904:	4620      	mov	r0, r4
    d906:	3720      	adds	r7, #32
    d908:	46bd      	mov	sp, r7
    d90a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d90e:	bf00      	nop
    d910:	20008000 	.word	0x20008000
    d914:	20008078 	.word	0x20008078
    d918:	20008080 	.word	0x20008080
    d91c:	0001cac9 	.word	0x0001cac9
    d920:	0001b1e8 	.word	0x0001b1e8
    d924:	0001caf7 	.word	0x0001caf7
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    d928:	2100      	movs	r1, #0
    d92a:	f242 0003 	movw	r0, #8195	; 0x2003
    d92e:	f107 0208 	add.w	r2, r7, #8
    d932:	f7ff f97b 	bl	cc2c <bt_hci_cmd_send_sync>
	if (err) {
    d936:	4604      	mov	r4, r0
    d938:	2800      	cmp	r0, #0
    d93a:	d1e3      	bne.n	d904 <bt_init+0x190>
	read_le_features_complete(rsp);
    d93c:	68be      	ldr	r6, [r7, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    d93e:	2208      	movs	r2, #8
    d940:	68f1      	ldr	r1, [r6, #12]
    d942:	4894      	ldr	r0, [pc, #592]	; (db94 <bt_init+0x420>)
    d944:	3101      	adds	r1, #1
    d946:	f00a f904 	bl	17b52 <memcpy>
	net_buf_unref(rsp);
    d94a:	4630      	mov	r0, r6
    d94c:	f004 f826 	bl	1199c <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    d950:	4621      	mov	r1, r4
    d952:	f242 0002 	movw	r0, #8194	; 0x2002
    d956:	f107 0208 	add.w	r2, r7, #8
    d95a:	f7ff f967 	bl	cc2c <bt_hci_cmd_send_sync>
		if (err) {
    d95e:	4604      	mov	r4, r0
    d960:	2800      	cmp	r0, #0
    d962:	d1cf      	bne.n	d904 <bt_init+0x190>
		le_read_buffer_size_complete(rsp);
    d964:	68bc      	ldr	r4, [r7, #8]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    d966:	68e3      	ldr	r3, [r4, #12]
	uint16_t acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    d968:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    d96c:	b291      	uxth	r1, r2
	if (!acl_mtu || !rp->le_max_num) {
    d96e:	b141      	cbz	r1, d982 <bt_init+0x20e>
    d970:	78d9      	ldrb	r1, [r3, #3]
    d972:	b131      	cbz	r1, d982 <bt_init+0x20e>
	bt_dev.le.acl_mtu = acl_mtu;
    d974:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    d978:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    d97a:	4887      	ldr	r0, [pc, #540]	; (db98 <bt_init+0x424>)
    d97c:	4611      	mov	r1, r2
    d97e:	f00c fdca 	bl	1a516 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    d982:	4620      	mov	r0, r4
    d984:	f004 f80a 	bl	1199c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    d988:	f895 607c 	ldrb.w	r6, [r5, #124]	; 0x7c
    d98c:	f016 0620 	ands.w	r6, r6, #32
    d990:	d118      	bne.n	d9c4 <bt_init+0x250>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    d992:	2102      	movs	r1, #2
    d994:	f640 406d 	movw	r0, #3181	; 0xc6d
    d998:	f7ff f90e 	bl	cbb8 <bt_hci_cmd_create>
		if (!buf) {
    d99c:	4604      	mov	r4, r0
    d99e:	2800      	cmp	r0, #0
    d9a0:	f000 80aa 	beq.w	daf8 <bt_init+0x384>
	return net_buf_simple_add(&buf->b, len);
    d9a4:	2102      	movs	r1, #2
    d9a6:	300c      	adds	r0, #12
    d9a8:	f00b fc05 	bl	191b6 <net_buf_simple_add>
		cp_le->le = 0x01;
    d9ac:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    d9ae:	4621      	mov	r1, r4
		cp_le->le = 0x01;
    d9b0:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    d9b2:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    d9b4:	4632      	mov	r2, r6
    d9b6:	f640 406d 	movw	r0, #3181	; 0xc6d
    d9ba:	f7ff f937 	bl	cc2c <bt_hci_cmd_send_sync>
		if (err) {
    d9be:	4604      	mov	r4, r0
    d9c0:	2800      	cmp	r0, #0
    d9c2:	d19f      	bne.n	d904 <bt_init+0x190>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    d9c4:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
    d9c8:	071c      	lsls	r4, r3, #28
    d9ca:	d513      	bpl.n	d9f4 <bt_init+0x280>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    d9cc:	2100      	movs	r1, #0
    d9ce:	f242 001c 	movw	r0, #8220	; 0x201c
    d9d2:	f107 0208 	add.w	r2, r7, #8
    d9d6:	f7ff f929 	bl	cc2c <bt_hci_cmd_send_sync>
		if (err) {
    d9da:	4604      	mov	r4, r0
    d9dc:	2800      	cmp	r0, #0
    d9de:	d191      	bne.n	d904 <bt_init+0x190>
		le_read_supp_states_complete(rsp);
    d9e0:	68b8      	ldr	r0, [r7, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    d9e2:	68c3      	ldr	r3, [r0, #12]
    d9e4:	f8d3 2001 	ldr.w	r2, [r3, #1]
    d9e8:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    d9ec:	e9c5 2338 	strd	r2, r3, [r5, #224]	; 0xe0
		net_buf_unref(rsp);
    d9f0:	f003 ffd4 	bl	1199c <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    d9f4:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
    d9f8:	0698      	lsls	r0, r3, #26
    d9fa:	d521      	bpl.n	da40 <bt_init+0x2cc>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    d9fc:	1d39      	adds	r1, r7, #4
    d9fe:	1cb8      	adds	r0, r7, #2
    da00:	f7ff f994 	bl	cd2c <hci_le_read_max_data_len>
		if (err) {
    da04:	4604      	mov	r4, r0
    da06:	2800      	cmp	r0, #0
    da08:	f47f af7c 	bne.w	d904 <bt_init+0x190>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    da0c:	2104      	movs	r1, #4
    da0e:	f242 0024 	movw	r0, #8228	; 0x2024
    da12:	f7ff f8d1 	bl	cbb8 <bt_hci_cmd_create>
		if (!buf) {
    da16:	4606      	mov	r6, r0
    da18:	2800      	cmp	r0, #0
    da1a:	d06d      	beq.n	daf8 <bt_init+0x384>
    da1c:	2104      	movs	r1, #4
    da1e:	300c      	adds	r0, #12
    da20:	f00b fbc9 	bl	191b6 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    da24:	887b      	ldrh	r3, [r7, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    da26:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    da28:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    da2a:	88bb      	ldrh	r3, [r7, #4]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    da2c:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    da2e:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    da30:	f242 0024 	movw	r0, #8228	; 0x2024
    da34:	f7ff f8fa 	bl	cc2c <bt_hci_cmd_send_sync>
		if (err) {
    da38:	4604      	mov	r4, r0
    da3a:	2800      	cmp	r0, #0
    da3c:	f47f af62 	bne.w	d904 <bt_init+0x190>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    da40:	2108      	movs	r1, #8
    da42:	f242 0001 	movw	r0, #8193	; 0x2001
    da46:	f7ff f8b7 	bl	cbb8 <bt_hci_cmd_create>
	if (!buf) {
    da4a:	4604      	mov	r4, r0
    da4c:	2800      	cmp	r0, #0
    da4e:	d053      	beq.n	daf8 <bt_init+0x384>
    da50:	2108      	movs	r1, #8
    da52:	300c      	adds	r0, #12
    da54:	f00b fbaf 	bl	191b6 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    da58:	f895 20d8 	ldrb.w	r2, [r5, #216]	; 0xd8
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    da5c:	f012 0f02 	tst.w	r2, #2
    da60:	bf14      	ite	ne
    da62:	232f      	movne	r3, #47	; 0x2f
    da64:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    da66:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    da68:	f895 20d9 	ldrb.w	r2, [r5, #217]	; 0xd9
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    da6c:	bf48      	it	mi
    da6e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    da72:	f012 0f09 	tst.w	r2, #9
	dst[0] = val;
    da76:	f04f 0200 	mov.w	r2, #0
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    da7a:	bf18      	it	ne
    da7c:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
    da80:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    da82:	f3c3 2307 	ubfx	r3, r3, #8, #8
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    da86:	4621      	mov	r1, r4
    da88:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    da8a:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    da8c:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    da8e:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    da90:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    da92:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    da94:	71c2      	strb	r2, [r0, #7]
    da96:	f242 0001 	movw	r0, #8193	; 0x2001
    da9a:	f7ff f8c7 	bl	cc2c <bt_hci_cmd_send_sync>
	if (err) {
    da9e:	4604      	mov	r4, r0
    daa0:	2800      	cmp	r0, #0
    daa2:	f47f af2f 	bne.w	d904 <bt_init+0x190>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    daa6:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
	if (bt_dev.le.acl_mtu) {
    daaa:	f8b5 1104 	ldrh.w	r1, [r5, #260]	; 0x104
	if (BT_FEAT_BREDR(bt_dev.features)) {
    daae:	069a      	lsls	r2, r3, #26
    dab0:	d425      	bmi.n	dafe <bt_init+0x38a>
	if (bt_dev.le.acl_mtu) {
    dab2:	b9d1      	cbnz	r1, daea <bt_init+0x376>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    dab4:	f241 0005 	movw	r0, #4101	; 0x1005
    dab8:	f107 0208 	add.w	r2, r7, #8
    dabc:	f7ff f8b6 	bl	cc2c <bt_hci_cmd_send_sync>
	if (err) {
    dac0:	4604      	mov	r4, r0
    dac2:	2800      	cmp	r0, #0
    dac4:	f47f af1e 	bne.w	d904 <bt_init+0x190>
	if (bt_dev.le.acl_mtu) {
    dac8:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
	read_buffer_size_complete(rsp);
    dacc:	68bc      	ldr	r4, [r7, #8]
	if (bt_dev.le.acl_mtu) {
    dace:	b94b      	cbnz	r3, dae4 <bt_init+0x370>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    dad0:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    dad2:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    dad6:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    dada:	889a      	ldrh	r2, [r3, #4]
    dadc:	482e      	ldr	r0, [pc, #184]	; (db98 <bt_init+0x424>)
    dade:	4611      	mov	r1, r2
    dae0:	f00c fd19 	bl	1a516 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    dae4:	4620      	mov	r0, r4
    dae6:	f003 ff59 	bl	1199c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    daea:	2108      	movs	r1, #8
    daec:	f640 4001 	movw	r0, #3073	; 0xc01
    daf0:	f7ff f862 	bl	cbb8 <bt_hci_cmd_create>
	if (!buf) {
    daf4:	4604      	mov	r4, r0
    daf6:	b990      	cbnz	r0, db1e <bt_init+0x3aa>
		return -ENOBUFS;
    daf8:	f06f 0468 	mvn.w	r4, #104	; 0x68
    dafc:	e702      	b.n	d904 <bt_init+0x190>
	else if (!bt_dev.le.acl_mtu) {
    dafe:	2900      	cmp	r1, #0
    db00:	d1f3      	bne.n	daea <bt_init+0x376>
		LOG_ERR("ACL BR/EDR buffers not initialized");
    db02:	4b26      	ldr	r3, [pc, #152]	; (db9c <bt_init+0x428>)
    db04:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    db08:	61fb      	str	r3, [r7, #28]
    db0a:	2302      	movs	r3, #2
    db0c:	4824      	ldr	r0, [pc, #144]	; (dba0 <bt_init+0x42c>)
    db0e:	61bb      	str	r3, [r7, #24]
    db10:	f107 0218 	add.w	r2, r7, #24
    db14:	f00a f8b7 	bl	17c86 <z_log_msg_static_create.constprop.0>
		return -EIO;
    db18:	f06f 0404 	mvn.w	r4, #4
    db1c:	e6f2      	b.n	d904 <bt_init+0x190>
    db1e:	2108      	movs	r1, #8
    db20:	300c      	adds	r0, #12
    db22:	f00b fb48 	bl	191b6 <net_buf_simple_add>
	dst[0] = val;
    db26:	2310      	movs	r3, #16
    db28:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    db2a:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
    db2c:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    db2e:	7043      	strb	r3, [r0, #1]
    db30:	2602      	movs	r6, #2
    db32:	2320      	movs	r3, #32
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    db34:	4621      	mov	r1, r4
	dst[0] = val;
    db36:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    db38:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
    db3a:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    db3c:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    db3e:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    db40:	71c3      	strb	r3, [r0, #7]
    db42:	f640 4001 	movw	r0, #3073	; 0xc01
    db46:	f7ff f871 	bl	cc2c <bt_hci_cmd_send_sync>
	if (err) {
    db4a:	4604      	mov	r4, r0
    db4c:	2800      	cmp	r0, #0
    db4e:	f47f aed9 	bne.w	d904 <bt_init+0x190>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    db52:	4601      	mov	r1, r0
    db54:	1d3a      	adds	r2, r7, #4
    db56:	f64f 4001 	movw	r0, #64513	; 0xfc01
    db5a:	f7ff f867 	bl	cc2c <bt_hci_cmd_send_sync>
	if (err) {
    db5e:	b318      	cbz	r0, dba8 <bt_init+0x434>
		LOG_WRN("Vendor HCI extensions not available");
    db60:	4b10      	ldr	r3, [pc, #64]	; (dba4 <bt_init+0x430>)
    db62:	e9c7 6306 	strd	r6, r3, [r7, #24]
			LOG_WRN("Failed to read supported vendor features");
    db66:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    db6a:	480d      	ldr	r0, [pc, #52]	; (dba0 <bt_init+0x42c>)
    db6c:	f107 0218 	add.w	r2, r7, #24
    db70:	f00a f889 	bl	17c86 <z_log_msg_static_create.constprop.0>
	err = bt_id_init();
    db74:	f000 fb6c 	bl	e250 <bt_id_init>
	if (err) {
    db78:	4604      	mov	r4, r0
    db7a:	2800      	cmp	r0, #0
    db7c:	f47f aec2 	bne.w	d904 <bt_init+0x190>
		err = bt_conn_init();
    db80:	f001 fdb6 	bl	f6f0 <bt_conn_init>
		if (err) {
    db84:	4604      	mov	r4, r0
    db86:	2800      	cmp	r0, #0
    db88:	f47f aebc 	bne.w	d904 <bt_init+0x190>
	bt_finalize_init();
    db8c:	f7ff fd48 	bl	d620 <bt_finalize_init>
	return 0;
    db90:	e6b8      	b.n	d904 <bt_init+0x190>
    db92:	bf00      	nop
    db94:	200080d8 	.word	0x200080d8
    db98:	20008108 	.word	0x20008108
    db9c:	0001cb1b 	.word	0x0001cb1b
    dba0:	0001b1e8 	.word	0x0001b1e8
    dba4:	0001cb3e 	.word	0x0001cb3e
	rp.info = (void *)rsp->data;
    dba8:	687b      	ldr	r3, [r7, #4]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
    dbaa:	466e      	mov	r6, sp
	rp.info = (void *)rsp->data;
    dbac:	68dc      	ldr	r4, [r3, #12]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
    dbae:	b08a      	sub	sp, #40	; 0x28
    dbb0:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    dbb4:	2b03      	cmp	r3, #3
		return plat_str[platform];
    dbb6:	bf96      	itet	ls
    dbb8:	4a46      	ldrls	r2, [pc, #280]	; (dcd4 <bt_init+0x560>)
	return "unknown";
    dbba:	4947      	ldrhi	r1, [pc, #284]	; (dcd8 <bt_init+0x564>)
		return plat_str[platform];
    dbbc:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
    dbc0:	466a      	mov	r2, sp
    dbc2:	61d3      	str	r3, [r2, #28]
    dbc4:	f44f 7300 	mov.w	r3, #512	; 0x200
    dbc8:	4844      	ldr	r0, [pc, #272]	; (dcdc <bt_init+0x568>)
    dbca:	8413      	strh	r3, [r2, #32]
    dbcc:	4b44      	ldr	r3, [pc, #272]	; (dce0 <bt_init+0x56c>)
    dbce:	e9c2 0105 	strd	r0, r1, [r2, #20]
    dbd2:	f842 3f10 	str.w	r3, [r2, #16]!
    dbd6:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    dbda:	4842      	ldr	r0, [pc, #264]	; (dce4 <bt_init+0x570>)
    dbdc:	f00a f853 	bl	17c86 <z_log_msg_static_create.constprop.0>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    dbe0:	f8b4 2001 	ldrh.w	r2, [r4, #1]
    dbe4:	46b5      	mov	sp, r6
    dbe6:	2a02      	cmp	r2, #2
	LOG_INF("HW Variant: %s (0x%04x)",
    dbe8:	f8b4 3003 	ldrh.w	r3, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    dbec:	d14c      	bne.n	dc88 <bt_init+0x514>
	if (variant < ARRAY_SIZE(nordic_str)) {
    dbee:	2b03      	cmp	r3, #3
    dbf0:	d84a      	bhi.n	dc88 <bt_init+0x514>
		return nordic_str[variant];
    dbf2:	4a3d      	ldr	r2, [pc, #244]	; (dce8 <bt_init+0x574>)
    dbf4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Variant: %s (0x%04x)",
    dbf8:	466e      	mov	r6, sp
    dbfa:	b08a      	sub	sp, #40	; 0x28
    dbfc:	466a      	mov	r2, sp
    dbfe:	61d3      	str	r3, [r2, #28]
    dc00:	f44f 7300 	mov.w	r3, #512	; 0x200
    dc04:	4839      	ldr	r0, [pc, #228]	; (dcec <bt_init+0x578>)
    dc06:	8413      	strh	r3, [r2, #32]
    dc08:	4b35      	ldr	r3, [pc, #212]	; (dce0 <bt_init+0x56c>)
    dc0a:	e9c2 0105 	strd	r0, r1, [r2, #20]
    dc0e:	f842 3f10 	str.w	r3, [r2, #16]!
    dc12:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    dc16:	4833      	ldr	r0, [pc, #204]	; (dce4 <bt_init+0x570>)
    dc18:	f00a f835 	bl	17c86 <z_log_msg_static_create.constprop.0>
    dc1c:	46b5      	mov	sp, r6
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
    dc1e:	7963      	ldrb	r3, [r4, #5]
    dc20:	f894 c006 	ldrb.w	ip, [r4, #6]
	if (variant < ARRAY_SIZE(var_str)) {
    dc24:	2b03      	cmp	r3, #3
		return var_str[variant];
    dc26:	bf98      	it	ls
    dc28:	4a31      	ldrls	r2, [pc, #196]	; (dcf0 <bt_init+0x57c>)
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
    dc2a:	f8b4 6007 	ldrh.w	r6, [r4, #7]
    dc2e:	f8d4 0009 	ldr.w	r0, [r4, #9]
    dc32:	466c      	mov	r4, sp
    dc34:	b08c      	sub	sp, #48	; 0x30
		return var_str[variant];
    dc36:	bf94      	ite	ls
    dc38:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	return "unknown";
    dc3c:	4926      	ldrhi	r1, [pc, #152]	; (dcd8 <bt_init+0x564>)
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
    dc3e:	466a      	mov	r2, sp
    dc40:	e9c2 3c07 	strd	r3, ip, [r2, #28]
    dc44:	f44f 7300 	mov.w	r3, #512	; 0x200
    dc48:	f8df e0a8 	ldr.w	lr, [pc, #168]	; dcf4 <bt_init+0x580>
    dc4c:	8593      	strh	r3, [r2, #44]	; 0x2c
    dc4e:	4b2a      	ldr	r3, [pc, #168]	; (dcf8 <bt_init+0x584>)
    dc50:	e9c2 e105 	strd	lr, r1, [r2, #20]
    dc54:	e9c2 6009 	strd	r6, r0, [r2, #36]	; 0x24
    dc58:	f44f 5173 	mov.w	r1, #15552	; 0x3cc0
    dc5c:	f842 3f10 	str.w	r3, [r2, #16]!
    dc60:	4820      	ldr	r0, [pc, #128]	; (dce4 <bt_init+0x570>)
    dc62:	f00a f810 	bl	17c86 <z_log_msg_static_create.constprop.0>
    dc66:	46a5      	mov	sp, r4
	net_buf_unref(rsp);
    dc68:	6878      	ldr	r0, [r7, #4]
    dc6a:	f003 fe97 	bl	1199c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    dc6e:	2100      	movs	r1, #0
    dc70:	f64f 4002 	movw	r0, #64514	; 0xfc02
    dc74:	1d3a      	adds	r2, r7, #4
    dc76:	f7fe ffd9 	bl	cc2c <bt_hci_cmd_send_sync>
	if (err) {
    dc7a:	4604      	mov	r4, r0
    dc7c:	b130      	cbz	r0, dc8c <bt_init+0x518>
		LOG_WRN("Failed to read supported vendor commands");
    dc7e:	4b1f      	ldr	r3, [pc, #124]	; (dcfc <bt_init+0x588>)
			LOG_WRN("Failed to read supported vendor features");
    dc80:	61fb      	str	r3, [r7, #28]
    dc82:	2302      	movs	r3, #2
    dc84:	61bb      	str	r3, [r7, #24]
    dc86:	e76e      	b.n	db66 <bt_init+0x3f2>
		return "unknown";
    dc88:	4913      	ldr	r1, [pc, #76]	; (dcd8 <bt_init+0x564>)
    dc8a:	e7b5      	b.n	dbf8 <bt_init+0x484>
	rp.cmds = (void *)rsp->data;
    dc8c:	687e      	ldr	r6, [r7, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    dc8e:	2202      	movs	r2, #2
    dc90:	68f1      	ldr	r1, [r6, #12]
    dc92:	481b      	ldr	r0, [pc, #108]	; (dd00 <bt_init+0x58c>)
    dc94:	3101      	adds	r1, #1
    dc96:	f009 ff5c 	bl	17b52 <memcpy>
	net_buf_unref(rsp);
    dc9a:	4630      	mov	r0, r6
    dc9c:	f003 fe7e 	bl	1199c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    dca0:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    dca4:	075b      	lsls	r3, r3, #29
    dca6:	f57f af65 	bpl.w	db74 <bt_init+0x400>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    dcaa:	4621      	mov	r1, r4
    dcac:	f64f 4003 	movw	r0, #64515	; 0xfc03
    dcb0:	1d3a      	adds	r2, r7, #4
    dcb2:	f7fe ffbb 	bl	cc2c <bt_hci_cmd_send_sync>
		if (err) {
    dcb6:	b108      	cbz	r0, dcbc <bt_init+0x548>
			LOG_WRN("Failed to read supported vendor features");
    dcb8:	4b12      	ldr	r3, [pc, #72]	; (dd04 <bt_init+0x590>)
    dcba:	e7e1      	b.n	dc80 <bt_init+0x50c>
		memcpy(bt_dev.vs_features, rp.feat->features,
    dcbc:	2201      	movs	r2, #1
		rp.feat = (void *)rsp->data;
    dcbe:	687c      	ldr	r4, [r7, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    dcc0:	4811      	ldr	r0, [pc, #68]	; (dd08 <bt_init+0x594>)
    dcc2:	68e1      	ldr	r1, [r4, #12]
    dcc4:	4411      	add	r1, r2
    dcc6:	f009 ff44 	bl	17b52 <memcpy>
		net_buf_unref(rsp);
    dcca:	4620      	mov	r0, r4
    dccc:	f003 fe66 	bl	1199c <net_buf_unref>
    dcd0:	e750      	b.n	db74 <bt_init+0x400>
    dcd2:	bf00      	nop
    dcd4:	0001b670 	.word	0x0001b670
    dcd8:	0001c554 	.word	0x0001c554
    dcdc:	0001cb62 	.word	0x0001cb62
    dce0:	01000004 	.word	0x01000004
    dce4:	0001b1e8 	.word	0x0001b1e8
    dce8:	0001b660 	.word	0x0001b660
    dcec:	0001cb7b 	.word	0x0001cb7b
    dcf0:	0001b650 	.word	0x0001b650
    dcf4:	0001cb93 	.word	0x0001cb93
    dcf8:	01000007 	.word	0x01000007
    dcfc:	0001cbc0 	.word	0x0001cbc0
    dd00:	200080c1 	.word	0x200080c1
    dd04:	0001cbe9 	.word	0x0001cbe9
    dd08:	200080c0 	.word	0x200080c0

0000dd0c <init_work>:
{
    dd0c:	b510      	push	{r4, lr}
	err = bt_init();
    dd0e:	f7ff fd31 	bl	d774 <bt_init>
	if (ready_cb) {
    dd12:	4b03      	ldr	r3, [pc, #12]	; (dd20 <init_work+0x14>)
    dd14:	681b      	ldr	r3, [r3, #0]
    dd16:	b113      	cbz	r3, dd1e <init_work+0x12>
}
    dd18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    dd1c:	4718      	bx	r3
}
    dd1e:	bd10      	pop	{r4, pc}
    dd20:	200097f0 	.word	0x200097f0

0000dd24 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
    dd24:	b5f0      	push	{r4, r5, r6, r7, lr}
    dd26:	b08f      	sub	sp, #60	; 0x3c
	int err;

	if (!bt_dev.drv) {
    dd28:	4d3b      	ldr	r5, [pc, #236]	; (de18 <bt_enable+0xf4>)
{
    dd2a:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    dd2c:	f8d5 315c 	ldr.w	r3, [r5, #348]	; 0x15c
{
    dd30:	af08      	add	r7, sp, #32
	if (!bt_dev.drv) {
    dd32:	b983      	cbnz	r3, dd56 <bt_enable+0x32>
		LOG_ERR("No HCI driver registered");
    dd34:	4b39      	ldr	r3, [pc, #228]	; (de1c <bt_enable+0xf8>)
		return -ENODEV;
    dd36:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("No HCI driver registered");
    dd3a:	617b      	str	r3, [r7, #20]
    dd3c:	2302      	movs	r3, #2
    dd3e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    dd42:	4837      	ldr	r0, [pc, #220]	; (de20 <bt_enable+0xfc>)
    dd44:	f107 0210 	add.w	r2, r7, #16
    dd48:	613b      	str	r3, [r7, #16]
    dd4a:	f009 ff9c 	bl	17c86 <z_log_msg_static_create.constprop.0>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    dd4e:	4620      	mov	r0, r4
    dd50:	371c      	adds	r7, #28
    dd52:	46bd      	mov	sp, r7
    dd54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    dd56:	f06f 0102 	mvn.w	r1, #2
    dd5a:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
    dd5e:	f009 ff95 	bl	17c8c <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    dd62:	2101      	movs	r1, #1
    dd64:	f009 ff84 	bl	17c70 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    dd68:	ea10 0401 	ands.w	r4, r0, r1
    dd6c:	d150      	bne.n	de10 <bt_enable+0xec>
	ready_cb = cb;
    dd6e:	4b2d      	ldr	r3, [pc, #180]	; (de24 <bt_enable+0x100>)
    dd70:	601e      	str	r6, [r3, #0]
    dd72:	460a      	mov	r2, r1
    dd74:	f505 7090 	add.w	r0, r5, #288	; 0x120
    dd78:	f00c fbcd 	bl	1a516 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
    dd7c:	f505 70a2 	add.w	r0, r5, #324	; 0x144
    dd80:	f00c fba4 	bl	1a4cc <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    dd84:	2200      	movs	r2, #0
    dd86:	2300      	movs	r3, #0
    dd88:	e9cd 2306 	strd	r2, r3, [sp, #24]
    dd8c:	f06f 0308 	mvn.w	r3, #8
    dd90:	f44f 6280 	mov.w	r2, #1024	; 0x400
    dd94:	e9cd 4302 	strd	r4, r3, [sp, #8]
    dd98:	e9cd 4400 	strd	r4, r4, [sp]
    dd9c:	4b22      	ldr	r3, [pc, #136]	; (de28 <bt_enable+0x104>)
    dd9e:	4923      	ldr	r1, [pc, #140]	; (de2c <bt_enable+0x108>)
    dda0:	9404      	str	r4, [sp, #16]
    dda2:	4823      	ldr	r0, [pc, #140]	; (de30 <bt_enable+0x10c>)
    dda4:	f006 ff72 	bl	14c8c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    dda8:	4922      	ldr	r1, [pc, #136]	; (de34 <bt_enable+0x110>)
    ddaa:	4821      	ldr	r0, [pc, #132]	; (de30 <bt_enable+0x10c>)
    ddac:	f00c faff 	bl	1a3ae <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
    ddb0:	4821      	ldr	r0, [pc, #132]	; (de38 <bt_enable+0x114>)
    ddb2:	f00c fc71 	bl	1a698 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
    ddb6:	f06f 0307 	mvn.w	r3, #7
    ddba:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
    ddbe:	491f      	ldr	r1, [pc, #124]	; (de3c <bt_enable+0x118>)
    ddc0:	481d      	ldr	r0, [pc, #116]	; (de38 <bt_enable+0x114>)
    ddc2:	9400      	str	r4, [sp, #0]
    ddc4:	f007 fa72 	bl	152ac <k_work_queue_start>
    ddc8:	491d      	ldr	r1, [pc, #116]	; (de40 <bt_enable+0x11c>)
    ddca:	481b      	ldr	r0, [pc, #108]	; (de38 <bt_enable+0x114>)
    ddcc:	f00c faef 	bl	1a3ae <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
    ddd0:	f8d5 315c 	ldr.w	r3, [r5, #348]	; 0x15c
    ddd4:	68db      	ldr	r3, [r3, #12]
    ddd6:	4798      	blx	r3
	if (err) {
    ddd8:	4604      	mov	r4, r0
    ddda:	b178      	cbz	r0, ddfc <bt_enable+0xd8>
		LOG_ERR("HCI driver open failed (%d)", err);
    dddc:	466d      	mov	r5, sp
    ddde:	b088      	sub	sp, #32
    dde0:	462a      	mov	r2, r5
    dde2:	4b18      	ldr	r3, [pc, #96]	; (de44 <bt_enable+0x120>)
    dde4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    dde8:	e9c5 3005 	strd	r3, r0, [r5, #20]
    ddec:	2303      	movs	r3, #3
    ddee:	480c      	ldr	r0, [pc, #48]	; (de20 <bt_enable+0xfc>)
    ddf0:	f842 3f10 	str.w	r3, [r2, #16]!
    ddf4:	f009 ff47 	bl	17c86 <z_log_msg_static_create.constprop.0>
    ddf8:	46ad      	mov	sp, r5
		return err;
    ddfa:	e7a8      	b.n	dd4e <bt_enable+0x2a>
	if (!cb) {
    ddfc:	b91e      	cbnz	r6, de06 <bt_enable+0xe2>
		return bt_init();
    ddfe:	f7ff fcb9 	bl	d774 <bt_init>
    de02:	4604      	mov	r4, r0
    de04:	e7a3      	b.n	dd4e <bt_enable+0x2a>
	k_work_submit(&bt_dev.init);
    de06:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
    de0a:	f007 fa49 	bl	152a0 <k_work_submit>
	return 0;
    de0e:	e79e      	b.n	dd4e <bt_enable+0x2a>
		return -EALREADY;
    de10:	f06f 0477 	mvn.w	r4, #119	; 0x77
    de14:	e79b      	b.n	dd4e <bt_enable+0x2a>
    de16:	bf00      	nop
    de18:	20008000 	.word	0x20008000
    de1c:	0001cc12 	.word	0x0001cc12
    de20:	0001b1e8 	.word	0x0001b1e8
    de24:	200097f0 	.word	0x200097f0
    de28:	0000d359 	.word	0x0000d359
    de2c:	2000ac00 	.word	0x2000ac00
    de30:	200090b8 	.word	0x200090b8
    de34:	0001cc2b 	.word	0x0001cc2b
    de38:	20009140 	.word	0x20009140
    de3c:	2000b000 	.word	0x2000b000
    de40:	0001cc31 	.word	0x0001cc31
    de44:	0001cc37 	.word	0x0001cc37

0000de48 <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    de48:	4b02      	ldr	r3, [pc, #8]	; (de54 <bt_is_ready+0xc>)
    de4a:	e8d3 0faf 	lda	r0, [r3]
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
    de4e:	f3c0 0080 	ubfx	r0, r0, #2, #1
    de52:	4770      	bx	lr
    de54:	200080d4 	.word	0x200080d4

0000de58 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    de58:	4800      	ldr	r0, [pc, #0]	; (de5c <bt_get_name+0x4>)
    de5a:	4770      	bx	lr
    de5c:	0001bc7d 	.word	0x0001bc7d

0000de60 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    de60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    de62:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    de64:	2500      	movs	r5, #0
    de66:	4f09      	ldr	r7, [pc, #36]	; (de8c <id_find+0x2c>)
    de68:	79fb      	ldrb	r3, [r7, #7]
    de6a:	b2ec      	uxtb	r4, r5
    de6c:	42a3      	cmp	r3, r4
    de6e:	d802      	bhi.n	de76 <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    de70:	f06f 0001 	mvn.w	r0, #1
    de74:	e009      	b.n	de8a <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
    de76:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    de7a:	4630      	mov	r0, r6
    de7c:	4439      	add	r1, r7
    de7e:	f009 ffb1 	bl	17de4 <bt_addr_le_eq>
    de82:	3501      	adds	r5, #1
    de84:	2800      	cmp	r0, #0
    de86:	d0ef      	beq.n	de68 <id_find+0x8>
    de88:	4620      	mov	r0, r4
}
    de8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    de8c:	20008000 	.word	0x20008000

0000de90 <set_random_address>:
{
    de90:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    de92:	2206      	movs	r2, #6
    de94:	4912      	ldr	r1, [pc, #72]	; (dee0 <set_random_address+0x50>)
    de96:	4605      	mov	r5, r0
    de98:	f009 fe4b 	bl	17b32 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    de9c:	b1d8      	cbz	r0, ded6 <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    de9e:	2106      	movs	r1, #6
    dea0:	f242 0005 	movw	r0, #8197	; 0x2005
    dea4:	f7fe fe88 	bl	cbb8 <bt_hci_cmd_create>
	if (!buf) {
    dea8:	4604      	mov	r4, r0
    deaa:	b1b0      	cbz	r0, deda <set_random_address+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    deac:	2206      	movs	r2, #6
    deae:	4629      	mov	r1, r5
    deb0:	300c      	adds	r0, #12
    deb2:	f00b f986 	bl	191c2 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    deb6:	2200      	movs	r2, #0
    deb8:	4621      	mov	r1, r4
    deba:	f242 0005 	movw	r0, #8197	; 0x2005
    debe:	f7fe feb5 	bl	cc2c <bt_hci_cmd_send_sync>
	if (err) {
    dec2:	b948      	cbnz	r0, ded8 <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
    dec4:	2206      	movs	r2, #6
    dec6:	4629      	mov	r1, r5
    dec8:	4805      	ldr	r0, [pc, #20]	; (dee0 <set_random_address+0x50>)
    deca:	f009 fe42 	bl	17b52 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    dece:	2201      	movs	r2, #1
    ded0:	4b04      	ldr	r3, [pc, #16]	; (dee4 <set_random_address+0x54>)
    ded2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		return 0;
    ded6:	2000      	movs	r0, #0
}
    ded8:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    deda:	f06f 0068 	mvn.w	r0, #104	; 0x68
    dede:	e7fb      	b.n	ded8 <set_random_address+0x48>
    dee0:	20008069 	.word	0x20008069
    dee4:	20008000 	.word	0x20008000

0000dee8 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    dee8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    deea:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    deec:	460d      	mov	r5, r1
    deee:	b179      	cbz	r1, df10 <id_create.constprop.0+0x28>
    def0:	4628      	mov	r0, r5
    def2:	4914      	ldr	r1, [pc, #80]	; (df44 <id_create.constprop.0+0x5c>)
    def4:	f009 ff76 	bl	17de4 <bt_addr_le_eq>
    def8:	b950      	cbnz	r0, df10 <id_create.constprop.0+0x28>
	memcpy(dst, src, sizeof(*dst));
    defa:	2207      	movs	r2, #7
    defc:	4629      	mov	r1, r5
    defe:	4812      	ldr	r0, [pc, #72]	; (df48 <id_create.constprop.0+0x60>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    df00:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    df04:	4420      	add	r0, r4
    df06:	f009 fe24 	bl	17b52 <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
    df0a:	2000      	movs	r0, #0
}
    df0c:	b003      	add	sp, #12
    df0e:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
    df10:	4668      	mov	r0, sp
    df12:	f009 fe7e 	bl	17c12 <bt_addr_le_create_static>
			if (err) {
    df16:	2800      	cmp	r0, #0
    df18:	d1f8      	bne.n	df0c <id_create.constprop.0+0x24>
		} while (id_find(&new_addr) >= 0);
    df1a:	4668      	mov	r0, sp
    df1c:	f7ff ffa0 	bl	de60 <id_find>
    df20:	2800      	cmp	r0, #0
    df22:	daf5      	bge.n	df10 <id_create.constprop.0+0x28>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    df24:	4b08      	ldr	r3, [pc, #32]	; (df48 <id_create.constprop.0+0x60>)
    df26:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    df2a:	441c      	add	r4, r3
    df2c:	2207      	movs	r2, #7
    df2e:	4669      	mov	r1, sp
    df30:	4620      	mov	r0, r4
    df32:	f009 fe0e 	bl	17b52 <memcpy>
		if (addr) {
    df36:	2d00      	cmp	r5, #0
    df38:	d0e7      	beq.n	df0a <id_create.constprop.0+0x22>
    df3a:	2207      	movs	r2, #7
    df3c:	4621      	mov	r1, r4
    df3e:	4628      	mov	r0, r5
    df40:	e7e1      	b.n	df06 <id_create.constprop.0+0x1e>
    df42:	bf00      	nop
    df44:	0001c4c9 	.word	0x0001c4c9
    df48:	20008000 	.word	0x20008000

0000df4c <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    df4c:	b570      	push	{r4, r5, r6, lr}
    df4e:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    df50:	4604      	mov	r4, r0
{
    df52:	b086      	sub	sp, #24
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    df54:	b920      	cbnz	r0, df60 <bt_id_create+0x14>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    df56:	b31d      	cbz	r5, dfa0 <bt_id_create+0x54>
			return -EINVAL;
    df58:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
    df5c:	b006      	add	sp, #24
    df5e:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    df60:	4920      	ldr	r1, [pc, #128]	; (dfe4 <bt_id_create+0x98>)
    df62:	f009 ff3f 	bl	17de4 <bt_addr_le_eq>
    df66:	2800      	cmp	r0, #0
    df68:	d1f5      	bne.n	df56 <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    df6a:	7823      	ldrb	r3, [r4, #0]
    df6c:	2b01      	cmp	r3, #1
    df6e:	d104      	bne.n	df7a <bt_id_create+0x2e>
    df70:	79a3      	ldrb	r3, [r4, #6]
    df72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    df76:	2bc0      	cmp	r3, #192	; 0xc0
    df78:	d00a      	beq.n	df90 <bt_id_create+0x44>
			LOG_ERR("Only static random identity address supported");
    df7a:	4b1b      	ldr	r3, [pc, #108]	; (dfe8 <bt_id_create+0x9c>)
    df7c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    df80:	9305      	str	r3, [sp, #20]
    df82:	2302      	movs	r3, #2
    df84:	4819      	ldr	r0, [pc, #100]	; (dfec <bt_id_create+0xa0>)
    df86:	aa04      	add	r2, sp, #16
    df88:	9304      	str	r3, [sp, #16]
    df8a:	f009 ff33 	bl	17df4 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
    df8e:	e7e3      	b.n	df58 <bt_id_create+0xc>
		if (id_find(addr) >= 0) {
    df90:	4620      	mov	r0, r4
    df92:	f7ff ff65 	bl	de60 <id_find>
    df96:	2800      	cmp	r0, #0
    df98:	dbdd      	blt.n	df56 <bt_id_create+0xa>
			return -EALREADY;
    df9a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    df9e:	e7dd      	b.n	df5c <bt_id_create+0x10>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    dfa0:	4d13      	ldr	r5, [pc, #76]	; (dff0 <bt_id_create+0xa4>)
    dfa2:	79eb      	ldrb	r3, [r5, #7]
    dfa4:	2b01      	cmp	r3, #1
    dfa6:	d01a      	beq.n	dfde <bt_id_create+0x92>
    dfa8:	f105 03d4 	add.w	r3, r5, #212	; 0xd4
    dfac:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    dfb0:	07db      	lsls	r3, r3, #31
    dfb2:	d50b      	bpl.n	dfcc <bt_id_create+0x80>
	new_id = bt_dev.id_count;
    dfb4:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
    dfb6:	4621      	mov	r1, r4
    dfb8:	4630      	mov	r0, r6
    dfba:	f7ff ff95 	bl	dee8 <id_create.constprop.0>
	if (err) {
    dfbe:	2800      	cmp	r0, #0
    dfc0:	d1cc      	bne.n	df5c <bt_id_create+0x10>
		bt_dev.id_count++;
    dfc2:	79eb      	ldrb	r3, [r5, #7]
	new_id = bt_dev.id_count;
    dfc4:	4630      	mov	r0, r6
		bt_dev.id_count++;
    dfc6:	3301      	adds	r3, #1
    dfc8:	71eb      	strb	r3, [r5, #7]
	return new_id;
    dfca:	e7c7      	b.n	df5c <bt_id_create+0x10>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
    dfcc:	2c00      	cmp	r4, #0
    dfce:	d0c3      	beq.n	df58 <bt_id_create+0xc>
    dfd0:	4620      	mov	r0, r4
    dfd2:	4904      	ldr	r1, [pc, #16]	; (dfe4 <bt_id_create+0x98>)
    dfd4:	f009 ff06 	bl	17de4 <bt_addr_le_eq>
    dfd8:	2800      	cmp	r0, #0
    dfda:	d0eb      	beq.n	dfb4 <bt_id_create+0x68>
    dfdc:	e7bc      	b.n	df58 <bt_id_create+0xc>
		return -ENOMEM;
    dfde:	f06f 000b 	mvn.w	r0, #11
    dfe2:	e7bb      	b.n	df5c <bt_id_create+0x10>
    dfe4:	0001c4c9 	.word	0x0001c4c9
    dfe8:	0001cd46 	.word	0x0001cd46
    dfec:	0001b200 	.word	0x0001b200
    dff0:	20008000 	.word	0x20008000

0000dff4 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    dff4:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
    dff6:	4604      	mov	r4, r0
{
    dff8:	b088      	sub	sp, #32
	CHECKIF(addr == NULL) {
    dffa:	b960      	cbnz	r0, e016 <bt_id_read_public_addr+0x22>
		LOG_WRN("Invalid input parameters");
    dffc:	4b1a      	ldr	r3, [pc, #104]	; (e068 <bt_id_read_public_addr+0x74>)
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
    dffe:	9307      	str	r3, [sp, #28]
    e000:	2302      	movs	r3, #2
    e002:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    e006:	4819      	ldr	r0, [pc, #100]	; (e06c <bt_id_read_public_addr+0x78>)
    e008:	aa06      	add	r2, sp, #24
    e00a:	9306      	str	r3, [sp, #24]
    e00c:	f009 fef2 	bl	17df4 <z_log_msg_static_create.constprop.0>
		return 0U;
    e010:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    e012:	b008      	add	sp, #32
    e014:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    e016:	2100      	movs	r1, #0
    e018:	f241 0009 	movw	r0, #4105	; 0x1009
    e01c:	aa01      	add	r2, sp, #4
    e01e:	f7fe fe05 	bl	cc2c <bt_hci_cmd_send_sync>
	if (err) {
    e022:	4606      	mov	r6, r0
    e024:	b108      	cbz	r0, e02a <bt_id_read_public_addr+0x36>
		LOG_WRN("Failed to read public address");
    e026:	4b12      	ldr	r3, [pc, #72]	; (e070 <bt_id_read_public_addr+0x7c>)
    e028:	e7e9      	b.n	dffe <bt_id_read_public_addr+0xa>
	rp = (void *)rsp->data;
    e02a:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
    e02c:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    e02e:	68dd      	ldr	r5, [r3, #12]
    e030:	4910      	ldr	r1, [pc, #64]	; (e074 <bt_id_read_public_addr+0x80>)
    e032:	3501      	adds	r5, #1
    e034:	4628      	mov	r0, r5
    e036:	f009 fd7c 	bl	17b32 <memcmp>
    e03a:	b918      	cbnz	r0, e044 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
    e03c:	9801      	ldr	r0, [sp, #4]
    e03e:	f003 fcad 	bl	1199c <net_buf_unref>
		return 0U;
    e042:	e7e5      	b.n	e010 <bt_id_read_public_addr+0x1c>
    e044:	2206      	movs	r2, #6
    e046:	4628      	mov	r0, r5
    e048:	490b      	ldr	r1, [pc, #44]	; (e078 <bt_id_read_public_addr+0x84>)
    e04a:	f009 fd72 	bl	17b32 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    e04e:	2800      	cmp	r0, #0
    e050:	d0f4      	beq.n	e03c <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
    e052:	2206      	movs	r2, #6
    e054:	4629      	mov	r1, r5
    e056:	1c60      	adds	r0, r4, #1
    e058:	f009 fd7b 	bl	17b52 <memcpy>
	net_buf_unref(rsp);
    e05c:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    e05e:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
    e060:	f003 fc9c 	bl	1199c <net_buf_unref>
	return 1U;
    e064:	2001      	movs	r0, #1
    e066:	e7d4      	b.n	e012 <bt_id_read_public_addr+0x1e>
    e068:	0001cd74 	.word	0x0001cd74
    e06c:	0001b200 	.word	0x0001b200
    e070:	0001cd8d 	.word	0x0001cd8d
    e074:	0001c4d6 	.word	0x0001c4d6
    e078:	0001c4d0 	.word	0x0001c4d0

0000e07c <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    e07c:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    e07e:	4668      	mov	r0, sp
    e080:	f7ff ffb8 	bl	dff4 <bt_id_read_public_addr>
    e084:	4b04      	ldr	r3, [pc, #16]	; (e098 <bt_setup_public_id_addr+0x1c>)
    e086:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    e088:	b118      	cbz	r0, e092 <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
    e08a:	4669      	mov	r1, sp
    e08c:	2000      	movs	r0, #0
    e08e:	f7ff ff2b 	bl	dee8 <id_create.constprop.0>
}
    e092:	b003      	add	sp, #12
    e094:	f85d fb04 	ldr.w	pc, [sp], #4
    e098:	20008000 	.word	0x20008000

0000e09c <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    e09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    e0a0:	4b22      	ldr	r3, [pc, #136]	; (e12c <bt_read_static_addr+0x90>)
{
    e0a2:	4607      	mov	r7, r0
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    e0a4:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
{
    e0a8:	4688      	mov	r8, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    e0aa:	07db      	lsls	r3, r3, #31
{
    e0ac:	b088      	sub	sp, #32
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    e0ae:	d40e      	bmi.n	e0ce <bt_read_static_addr+0x32>
		LOG_WRN("Read Static Addresses command not available");
    e0b0:	4b1f      	ldr	r3, [pc, #124]	; (e130 <bt_read_static_addr+0x94>)
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
    e0b2:	9307      	str	r3, [sp, #28]
		return 0;
    e0b4:	2500      	movs	r5, #0
		LOG_WRN("Failed to read static addresses");
    e0b6:	2302      	movs	r3, #2
    e0b8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    e0bc:	481d      	ldr	r0, [pc, #116]	; (e134 <bt_read_static_addr+0x98>)
    e0be:	aa06      	add	r2, sp, #24
    e0c0:	9306      	str	r3, [sp, #24]
    e0c2:	f009 fe97 	bl	17df4 <z_log_msg_static_create.constprop.0>
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
    e0c6:	4628      	mov	r0, r5
    e0c8:	b008      	add	sp, #32
    e0ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    e0ce:	2100      	movs	r1, #0
    e0d0:	f64f 4009 	movw	r0, #64521	; 0xfc09
    e0d4:	aa01      	add	r2, sp, #4
    e0d6:	f7fe fda9 	bl	cc2c <bt_hci_cmd_send_sync>
	if (err) {
    e0da:	4604      	mov	r4, r0
    e0dc:	b108      	cbz	r0, e0e2 <bt_read_static_addr+0x46>
		LOG_WRN("Failed to read static addresses");
    e0de:	4b16      	ldr	r3, [pc, #88]	; (e138 <bt_read_static_addr+0x9c>)
    e0e0:	e7e7      	b.n	e0b2 <bt_read_static_addr+0x16>
	rp = (void *)rsp->data;
    e0e2:	9b01      	ldr	r3, [sp, #4]
    e0e4:	68de      	ldr	r6, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
    e0e6:	7875      	ldrb	r5, [r6, #1]
    e0e8:	3602      	adds	r6, #2
    e0ea:	4545      	cmp	r5, r8
    e0ec:	bf28      	it	cs
    e0ee:	4645      	movcs	r5, r8
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
    e0f0:	f04f 0816 	mov.w	r8, #22
	for (i = 0; i < cnt; i++) {
    e0f4:	42a5      	cmp	r5, r4
    e0f6:	dc0f      	bgt.n	e118 <bt_read_static_addr+0x7c>
	net_buf_unref(rsp);
    e0f8:	9801      	ldr	r0, [sp, #4]
    e0fa:	f003 fc4f 	bl	1199c <net_buf_unref>
	if (!cnt) {
    e0fe:	2d00      	cmp	r5, #0
    e100:	d1e1      	bne.n	e0c6 <bt_read_static_addr+0x2a>
		LOG_WRN("No static addresses stored in controller");
    e102:	4b0e      	ldr	r3, [pc, #56]	; (e13c <bt_read_static_addr+0xa0>)
    e104:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    e108:	9307      	str	r3, [sp, #28]
    e10a:	2302      	movs	r3, #2
    e10c:	4809      	ldr	r0, [pc, #36]	; (e134 <bt_read_static_addr+0x98>)
    e10e:	aa06      	add	r2, sp, #24
    e110:	9306      	str	r3, [sp, #24]
    e112:	f009 fe6f 	bl	17df4 <z_log_msg_static_create.constprop.0>
    e116:	e7d6      	b.n	e0c6 <bt_read_static_addr+0x2a>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
    e118:	4631      	mov	r1, r6
    e11a:	fb08 7004 	mla	r0, r8, r4, r7
    e11e:	2216      	movs	r2, #22
    e120:	f009 fd17 	bl	17b52 <memcpy>
	for (i = 0; i < cnt; i++) {
    e124:	3401      	adds	r4, #1
    e126:	3616      	adds	r6, #22
    e128:	e7e4      	b.n	e0f4 <bt_read_static_addr+0x58>
    e12a:	bf00      	nop
    e12c:	20008000 	.word	0x20008000
    e130:	0001cdab 	.word	0x0001cdab
    e134:	0001b200 	.word	0x0001b200
    e138:	0001cdd7 	.word	0x0001cdd7
    e13c:	0001cdf7 	.word	0x0001cdf7

0000e140 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    e140:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    e142:	4e15      	ldr	r6, [pc, #84]	; (e198 <bt_setup_random_id_addr+0x58>)
{
    e144:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    e146:	79f4      	ldrb	r4, [r6, #7]
    e148:	b92c      	cbnz	r4, e156 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    e14a:	2101      	movs	r1, #1
    e14c:	a802      	add	r0, sp, #8
    e14e:	f7ff ffa5 	bl	e09c <bt_read_static_addr>
    e152:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
    e154:	b9c8      	cbnz	r0, e18a <bt_setup_random_id_addr+0x4a>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
    e156:	2100      	movs	r1, #0
    e158:	4608      	mov	r0, r1
}
    e15a:	b009      	add	sp, #36	; 0x24
    e15c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
    e160:	f7ff bef4 	b.w	df4c <bt_id_create>
    e164:	ab02      	add	r3, sp, #8
    e166:	fb07 3105 	mla	r1, r7, r5, r3
    e16a:	2206      	movs	r2, #6
    e16c:	f10d 0001 	add.w	r0, sp, #1
    e170:	f009 fcef 	bl	17b52 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    e174:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
    e176:	4669      	mov	r1, sp
    e178:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
    e17a:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    e17e:	f7ff feb3 	bl	dee8 <id_create.constprop.0>
				if (err) {
    e182:	3401      	adds	r4, #1
    e184:	b110      	cbz	r0, e18c <bt_setup_random_id_addr+0x4c>
}
    e186:	b009      	add	sp, #36	; 0x24
    e188:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    e18a:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    e18c:	79f3      	ldrb	r3, [r6, #7]
    e18e:	b2e5      	uxtb	r5, r4
    e190:	42ab      	cmp	r3, r5
    e192:	d8e7      	bhi.n	e164 <bt_setup_random_id_addr+0x24>
			return 0;
    e194:	2000      	movs	r0, #0
    e196:	e7f6      	b.n	e186 <bt_setup_random_id_addr+0x46>
    e198:	20008000 	.word	0x20008000

0000e19c <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
    e19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e1a0:	4690      	mov	r8, r2
    e1a2:	460e      	mov	r6, r1
    e1a4:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
    e1a6:	4602      	mov	r2, r0
    e1a8:	2800      	cmp	r0, #0
    e1aa:	d04b      	beq.n	e244 <bt_id_set_adv_own_addr+0xa8>
    e1ac:	2b00      	cmp	r3, #0
    e1ae:	d049      	beq.n	e244 <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    e1b0:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
    e1b2:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    e1b4:	d531      	bpl.n	e21a <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    e1b6:	4f25      	ldr	r7, [pc, #148]	; (e24c <bt_id_set_adv_own_addr+0xb0>)
    e1b8:	f1b8 0f00 	cmp.w	r8, #0
    e1bc:	d013      	beq.n	e1e6 <bt_id_set_adv_own_addr+0x4a>
    e1be:	0688      	lsls	r0, r1, #26
    e1c0:	d40a      	bmi.n	e1d8 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    e1c2:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    e1c6:	5cfb      	ldrb	r3, [r7, r3]
    e1c8:	2b01      	cmp	r3, #1
    e1ca:	d015      	beq.n	e1f8 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
    e1cc:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    e1ce:	06b2      	lsls	r2, r6, #26
    e1d0:	d50f      	bpl.n	e1f2 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    e1d2:	f043 0302 	orr.w	r3, r3, #2
    e1d6:	e00b      	b.n	e1f0 <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    e1d8:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
    e1dc:	0659      	lsls	r1, r3, #25
    e1de:	d4f0      	bmi.n	e1c2 <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
    e1e0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    e1e4:	e006      	b.n	e1f4 <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    e1e6:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    e1ea:	5cfb      	ldrb	r3, [r7, r3]
    e1ec:	2b01      	cmp	r3, #1
    e1ee:	d003      	beq.n	e1f8 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
    e1f0:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
    e1f2:	2000      	movs	r0, #0
}
    e1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    e1f8:	2107      	movs	r1, #7
    e1fa:	fb01 7104 	mla	r1, r1, r4, r7
    e1fe:	4610      	mov	r0, r2
    e200:	3101      	adds	r1, #1
    e202:	f009 fdff 	bl	17e04 <bt_id_set_adv_random_addr>
				if (err) {
    e206:	2800      	cmp	r0, #0
    e208:	d1f4      	bne.n	e1f4 <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
    e20a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    e20e:	5d3b      	ldrb	r3, [r7, r4]
    e210:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    e212:	f1b8 0f00 	cmp.w	r8, #0
    e216:	d0ec      	beq.n	e1f2 <bt_id_set_adv_own_addr+0x56>
    e218:	e7d9      	b.n	e1ce <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    e21a:	074b      	lsls	r3, r1, #29
    e21c:	d50e      	bpl.n	e23c <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    e21e:	4e0b      	ldr	r6, [pc, #44]	; (e24c <bt_id_set_adv_own_addr+0xb0>)
    e220:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
    e224:	5df3      	ldrb	r3, [r6, r7]
    e226:	2b01      	cmp	r3, #1
    e228:	d1e2      	bne.n	e1f0 <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    e22a:	2107      	movs	r1, #7
    e22c:	fb11 3104 	smlabb	r1, r1, r4, r3
    e230:	4431      	add	r1, r6
    e232:	f009 fde7 	bl	17e04 <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
    e236:	5df3      	ldrb	r3, [r6, r7]
    e238:	702b      	strb	r3, [r5, #0]
		if (err) {
    e23a:	e7db      	b.n	e1f4 <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
    e23c:	f009 fdea 	bl	17e14 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    e240:	2301      	movs	r3, #1
    e242:	e7f9      	b.n	e238 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
    e244:	f06f 0015 	mvn.w	r0, #21
    e248:	e7d4      	b.n	e1f4 <bt_id_set_adv_own_addr+0x58>
    e24a:	bf00      	nop
    e24c:	20008000 	.word	0x20008000

0000e250 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    e250:	b530      	push	{r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    e252:	4d13      	ldr	r5, [pc, #76]	; (e2a0 <bt_id_init+0x50>)
{
    e254:	b087      	sub	sp, #28
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    e256:	79eb      	ldrb	r3, [r5, #7]
    e258:	b11b      	cbz	r3, e262 <bt_id_init+0x12>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    e25a:	2400      	movs	r4, #0
}
    e25c:	4620      	mov	r0, r4
    e25e:	b007      	add	sp, #28
    e260:	bd30      	pop	{r4, r5, pc}
		err = bt_setup_public_id_addr();
    e262:	f7ff ff0b 	bl	e07c <bt_setup_public_id_addr>
		if (err) {
    e266:	4604      	mov	r4, r0
    e268:	b150      	cbz	r0, e280 <bt_id_init+0x30>
			LOG_ERR("Unable to set identity address");
    e26a:	4b0e      	ldr	r3, [pc, #56]	; (e2a4 <bt_id_init+0x54>)
			LOG_ERR("Unable to set random address");
    e26c:	9305      	str	r3, [sp, #20]
    e26e:	2302      	movs	r3, #2
    e270:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e274:	480c      	ldr	r0, [pc, #48]	; (e2a8 <bt_id_init+0x58>)
    e276:	aa04      	add	r2, sp, #16
    e278:	9304      	str	r3, [sp, #16]
    e27a:	f009 fdbb 	bl	17df4 <z_log_msg_static_create.constprop.0>
			return err;
    e27e:	e7ed      	b.n	e25c <bt_id_init+0xc>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    e280:	79eb      	ldrb	r3, [r5, #7]
    e282:	2b00      	cmp	r3, #0
    e284:	d1e9      	bne.n	e25a <bt_id_init+0xa>
		err = bt_setup_random_id_addr();
    e286:	f7ff ff5b 	bl	e140 <bt_setup_random_id_addr>
		if (err) {
    e28a:	4604      	mov	r4, r0
    e28c:	2800      	cmp	r0, #0
    e28e:	d1ec      	bne.n	e26a <bt_id_init+0x1a>
		err = set_random_address(&bt_dev.id_addr[0].a);
    e290:	1c68      	adds	r0, r5, #1
    e292:	f7ff fdfd 	bl	de90 <set_random_address>
		if (err) {
    e296:	4604      	mov	r4, r0
    e298:	2800      	cmp	r0, #0
    e29a:	d0df      	beq.n	e25c <bt_id_init+0xc>
			LOG_ERR("Unable to set random address");
    e29c:	4b03      	ldr	r3, [pc, #12]	; (e2ac <bt_id_init+0x5c>)
    e29e:	e7e5      	b.n	e26c <bt_id_init+0x1c>
    e2a0:	20008000 	.word	0x20008000
    e2a4:	0001ce20 	.word	0x0001ce20
    e2a8:	0001b200 	.word	0x0001b200
    e2ac:	0001ce3f 	.word	0x0001ce3f

0000e2b0 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
    e2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e2b4:	460c      	mov	r4, r1
    e2b6:	b089      	sub	sp, #36	; 0x24
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    e2b8:	2120      	movs	r1, #32
{
    e2ba:	4692      	mov	sl, r2
    e2bc:	9000      	str	r0, [sp, #0]
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    e2be:	f7fe fc7b 	bl	cbb8 <bt_hci_cmd_create>
	if (!buf) {
    e2c2:	4605      	mov	r5, r0
    e2c4:	2800      	cmp	r0, #0
    e2c6:	d05b      	beq.n	e380 <hci_set_ad+0xd0>
	return net_buf_simple_add(&buf->b, len);
    e2c8:	2120      	movs	r1, #32
    e2ca:	300c      	adds	r0, #12
    e2cc:	f00a ff73 	bl	191b6 <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
    e2d0:	2220      	movs	r2, #32
    e2d2:	4681      	mov	r9, r0
    e2d4:	2100      	movs	r1, #0
    e2d6:	f009 fc47 	bl	17b68 <memset>
	uint8_t set_data_len = 0;
    e2da:	2600      	movs	r6, #0

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    e2dc:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    e2e0:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
		for (size_t j = 0; j < ad[i].len; j++) {
    e2e4:	2300      	movs	r3, #0
    e2e6:	f8d4 8000 	ldr.w	r8, [r4]
    e2ea:	6862      	ldr	r2, [r4, #4]
    e2ec:	4293      	cmp	r3, r2
    e2ee:	d30c      	bcc.n	e30a <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
    e2f0:	3408      	adds	r4, #8
    e2f2:	45a2      	cmp	sl, r4
    e2f4:	d1f6      	bne.n	e2e4 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    e2f6:	2200      	movs	r2, #0
    e2f8:	4629      	mov	r1, r5
    e2fa:	9800      	ldr	r0, [sp, #0]
	*data_len = set_data_len;
    e2fc:	f889 6000 	strb.w	r6, [r9]
}
    e300:	b009      	add	sp, #36	; 0x24
    e302:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    e306:	f7fe bc91 	b.w	cc2c <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    e30a:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    e30e:	1cb0      	adds	r0, r6, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
    e310:	1811      	adds	r1, r2, r0
    e312:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
    e314:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    e318:	d91b      	bls.n	e352 <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    e31a:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    e31e:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
    e322:	d101      	bne.n	e328 <hci_set_ad+0x78>
    e324:	2a00      	cmp	r2, #0
    e326:	dc12      	bgt.n	e34e <hci_set_ad+0x9e>
					LOG_ERR("Too big advertising data");
    e328:	4b17      	ldr	r3, [pc, #92]	; (e388 <hci_set_ad+0xd8>)
    e32a:	9307      	str	r3, [sp, #28]
    e32c:	2302      	movs	r3, #2
    e32e:	9306      	str	r3, [sp, #24]
    e330:	2300      	movs	r3, #0
    e332:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e336:	4815      	ldr	r0, [pc, #84]	; (e38c <hci_set_ad+0xdc>)
    e338:	aa06      	add	r2, sp, #24
    e33a:	f7fc f9f3 	bl	a724 <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
    e33e:	4628      	mov	r0, r5
    e340:	f003 fb2c 	bl	1199c <net_buf_unref>
					return -EINVAL;
    e344:	f06f 0015 	mvn.w	r0, #21
}
    e348:	b009      	add	sp, #36	; 0x24
    e34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    e34e:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    e352:	b2d7      	uxtb	r7, r2
    e354:	1c79      	adds	r1, r7, #1
    e356:	f80b 1006 	strb.w	r1, [fp, r6]
    e35a:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
    e35c:	b2c9      	uxtb	r1, r1
    e35e:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    e362:	f8d8 1004 	ldr.w	r1, [r8, #4]
    e366:	fa5b f080 	uxtab	r0, fp, r0
    e36a:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    e36c:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    e36e:	f009 fbf0 	bl	17b52 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    e372:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    e374:	4437      	add	r7, r6
    e376:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
    e378:	3301      	adds	r3, #1
    e37a:	f108 0808 	add.w	r8, r8, #8
    e37e:	e7b4      	b.n	e2ea <hci_set_ad+0x3a>
		return -ENOBUFS;
    e380:	f06f 0068 	mvn.w	r0, #104	; 0x68
    e384:	e7e0      	b.n	e348 <hci_set_ad+0x98>
    e386:	bf00      	nop
    e388:	0001ce62 	.word	0x0001ce62
    e38c:	0001b1c0 	.word	0x0001b1c0

0000e390 <adv_is_directed>:
	return memcmp(a, b, sizeof(*a));
    e390:	2207      	movs	r2, #7

	return channel_map;
}

static inline bool adv_is_directed(const struct bt_le_ext_adv *adv)
{
    e392:	b508      	push	{r3, lr}
    e394:	4903      	ldr	r1, [pc, #12]	; (e3a4 <adv_is_directed+0x14>)
    e396:	3009      	adds	r0, #9
    e398:	f009 fbcb 	bl	17b32 <memcmp>
	/* The advertiser is assumed to be directed when the peer address has
	 * been set.
	 */
	return !bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY);
}
    e39c:	3800      	subs	r0, #0
    e39e:	bf18      	it	ne
    e3a0:	2001      	movne	r0, #1
    e3a2:	bd08      	pop	{r3, pc}
    e3a4:	0001c4c9 	.word	0x0001c4c9

0000e3a8 <le_adv_start_add_conn>:

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    e3a8:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
    e3aa:	4b15      	ldr	r3, [pc, #84]	; (e400 <le_adv_start_add_conn+0x58>)
    e3ac:	7802      	ldrb	r2, [r0, #0]
{
    e3ae:	4604      	mov	r4, r0
	bt_dev.adv_conn_id = adv->id;
    e3b0:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
{
    e3b4:	460d      	mov	r5, r1

	if (!adv_is_directed(adv)) {
    e3b6:	f7ff ffeb 	bl	e390 <adv_is_directed>
    e3ba:	4603      	mov	r3, r0
    e3bc:	7820      	ldrb	r0, [r4, #0]
    e3be:	b96b      	cbnz	r3, e3dc <le_adv_start_add_conn+0x34>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    e3c0:	4910      	ldr	r1, [pc, #64]	; (e404 <le_adv_start_add_conn+0x5c>)
    e3c2:	f000 ffb7 	bl	f334 <bt_conn_add_le>
		if (!conn) {
    e3c6:	4604      	mov	r4, r0
    e3c8:	b910      	cbnz	r0, e3d0 <le_adv_start_add_conn+0x28>
			return -ENOMEM;
    e3ca:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
    e3ce:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
    e3d0:	2104      	movs	r1, #4
    e3d2:	f000 fe09 	bl	efe8 <bt_conn_set_state>
		return 0;
    e3d6:	2000      	movs	r0, #0
		*out_conn = conn;
    e3d8:	602c      	str	r4, [r5, #0]
    e3da:	e7f8      	b.n	e3ce <le_adv_start_add_conn+0x26>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    e3dc:	f104 0609 	add.w	r6, r4, #9
    e3e0:	4631      	mov	r1, r6
    e3e2:	f000 ffdb 	bl	f39c <bt_conn_exists_le>
    e3e6:	b940      	cbnz	r0, e3fa <le_adv_start_add_conn+0x52>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    e3e8:	7820      	ldrb	r0, [r4, #0]
    e3ea:	4631      	mov	r1, r6
    e3ec:	f000 ffa2 	bl	f334 <bt_conn_add_le>
	if (!conn) {
    e3f0:	4604      	mov	r4, r0
    e3f2:	2800      	cmp	r0, #0
    e3f4:	d0e9      	beq.n	e3ca <le_adv_start_add_conn+0x22>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
    e3f6:	2105      	movs	r1, #5
    e3f8:	e7eb      	b.n	e3d2 <le_adv_start_add_conn+0x2a>
		return -EINVAL;
    e3fa:	f06f 0015 	mvn.w	r0, #21
    e3fe:	e7e6      	b.n	e3ce <le_adv_start_add_conn+0x26>
    e400:	20008000 	.word	0x20008000
    e404:	0001c4c2 	.word	0x0001c4c2

0000e408 <valid_adv_param>:
{
    e408:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    e40a:	6843      	ldr	r3, [r0, #4]
{
    e40c:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    e40e:	0558      	lsls	r0, r3, #21
    e410:	d501      	bpl.n	e416 <valid_adv_param+0xe>
		return false;
    e412:	2000      	movs	r0, #0
}
    e414:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    e416:	6922      	ldr	r2, [r4, #16]
    e418:	b10a      	cbz	r2, e41e <valid_adv_param+0x16>
    e41a:	07d9      	lsls	r1, r3, #31
    e41c:	d5f9      	bpl.n	e412 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    e41e:	4d19      	ldr	r5, [pc, #100]	; (e484 <valid_adv_param+0x7c>)
    e420:	7820      	ldrb	r0, [r4, #0]
    e422:	79eb      	ldrb	r3, [r5, #7]
    e424:	4283      	cmp	r3, r0
    e426:	d9f4      	bls.n	e412 <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    e428:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    e42c:	2207      	movs	r2, #7
    e42e:	4916      	ldr	r1, [pc, #88]	; (e488 <valid_adv_param+0x80>)
    e430:	4428      	add	r0, r5
    e432:	f009 fb7e 	bl	17b32 <memcmp>
	if (param->id >= bt_dev.id_count ||
    e436:	2800      	cmp	r0, #0
    e438:	d0eb      	beq.n	e412 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    e43a:	6860      	ldr	r0, [r4, #4]
    e43c:	07c2      	lsls	r2, r0, #31
    e43e:	d406      	bmi.n	e44e <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    e440:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
    e444:	2b08      	cmp	r3, #8
    e446:	d802      	bhi.n	e44e <valid_adv_param+0x46>
    e448:	68a3      	ldr	r3, [r4, #8]
    e44a:	2b9f      	cmp	r3, #159	; 0x9f
    e44c:	d9e1      	bls.n	e412 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    e44e:	f010 0f30 	tst.w	r0, #48	; 0x30
    e452:	d002      	beq.n	e45a <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    e454:	6923      	ldr	r3, [r4, #16]
    e456:	2b00      	cmp	r3, #0
    e458:	d0db      	beq.n	e412 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    e45a:	06c3      	lsls	r3, r0, #27
    e45c:	d401      	bmi.n	e462 <valid_adv_param+0x5a>
    e45e:	6923      	ldr	r3, [r4, #16]
    e460:	b943      	cbnz	r3, e474 <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
    e462:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    e466:	429a      	cmp	r2, r3
    e468:	d8d3      	bhi.n	e412 <valid_adv_param+0xa>
    e46a:	2a1f      	cmp	r2, #31
    e46c:	d9d1      	bls.n	e412 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    e46e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    e472:	d8ce      	bhi.n	e412 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    e474:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    e478:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    e47c:	bf18      	it	ne
    e47e:	2001      	movne	r0, #1
    e480:	e7c8      	b.n	e414 <valid_adv_param+0xc>
    e482:	bf00      	nop
    e484:	20008000 	.word	0x20008000
    e488:	0001c4c9 	.word	0x0001c4c9

0000e48c <bt_le_adv_lookup_legacy>:
}
    e48c:	4800      	ldr	r0, [pc, #0]	; (e490 <bt_le_adv_lookup_legacy+0x4>)
    e48e:	4770      	bx	lr
    e490:	20008018 	.word	0x20008018

0000e494 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    e494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e498:	b093      	sub	sp, #76	; 0x4c
    e49a:	9305      	str	r3, [sp, #20]
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
    e49c:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
    e49e:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
    e4a2:	4606      	mov	r6, r0
	bool dir_adv = (param->peer != NULL), scannable = false;
    e4a4:	ebba 0403 	subs.w	r4, sl, r3
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    e4a8:	4892      	ldr	r0, [pc, #584]	; (e6f4 <bt_le_adv_start_legacy+0x260>)
    e4aa:	bf18      	it	ne
    e4ac:	2401      	movne	r4, #1
	struct bt_conn *conn = NULL;
    e4ae:	9307      	str	r3, [sp, #28]
    e4b0:	f009 fcda 	bl	17e68 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    e4b4:	0747      	lsls	r7, r0, #29
{
    e4b6:	460d      	mov	r5, r1
    e4b8:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    e4ba:	f140 8112 	bpl.w	e6e2 <bt_le_adv_start_legacy+0x24e>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    e4be:	4608      	mov	r0, r1
    e4c0:	f7ff ffa2 	bl	e408 <valid_adv_param>
    e4c4:	b928      	cbnz	r0, e4d2 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
    e4c6:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    e4ca:	4620      	mov	r0, r4
    e4cc:	b013      	add	sp, #76	; 0x4c
    e4ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
    e4d2:	4628      	mov	r0, r5
    e4d4:	f009 fcb5 	bl	17e42 <bt_id_adv_random_addr_check>
    e4d8:	4681      	mov	r9, r0
    e4da:	2800      	cmp	r0, #0
    e4dc:	d0f3      	beq.n	e4c6 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    e4de:	f106 0810 	add.w	r8, r6, #16
    e4e2:	4640      	mov	r0, r8
    e4e4:	f009 fcc0 	bl	17e68 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    e4e8:	f3c0 17c0 	ubfx	r7, r0, #7, #1
    e4ec:	0600      	lsls	r0, r0, #24
    e4ee:	f100 80fb 	bmi.w	e6e8 <bt_le_adv_start_legacy+0x254>
	(void)memset(&set_param, 0, sizeof(set_param));
    e4f2:	220f      	movs	r2, #15
    e4f4:	4639      	mov	r1, r7
    e4f6:	a808      	add	r0, sp, #32
    e4f8:	f009 fb36 	bl	17b68 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    e4fc:	68ab      	ldr	r3, [r5, #8]
	set_param.channel_map  = get_adv_channel_map(param->options);
    e4fe:	6868      	ldr	r0, [r5, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    e500:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    e504:	68eb      	ldr	r3, [r5, #12]
    e506:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
    e50a:	f009 fc9e 	bl	17e4a <get_adv_channel_map>
	if (adv->id != param->id) {
    e50e:	7832      	ldrb	r2, [r6, #0]
    e510:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
    e512:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
    e516:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
    e518:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
	if (adv->id != param->id) {
    e51c:	d004      	beq.n	e528 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    e51e:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    e522:	4874      	ldr	r0, [pc, #464]	; (e6f4 <bt_le_adv_start_legacy+0x260>)
    e524:	f009 fca3 	bl	17e6e <atomic_and>
	adv->id = param->id;
    e528:	782b      	ldrb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
    e52a:	4a73      	ldr	r2, [pc, #460]	; (e6f8 <bt_le_adv_start_legacy+0x264>)
	adv->id = param->id;
    e52c:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
    e52e:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
    e532:	4630      	mov	r0, r6
    e534:	4622      	mov	r2, r4
    e536:	6869      	ldr	r1, [r5, #4]
    e538:	f10d 0325 	add.w	r3, sp, #37	; 0x25
    e53c:	f7ff fe2e 	bl	e19c <bt_id_set_adv_own_addr>
	if (err) {
    e540:	4604      	mov	r4, r0
    e542:	2800      	cmp	r0, #0
    e544:	d1c1      	bne.n	e4ca <bt_le_adv_start_legacy+0x36>
	memcpy(dst, src, sizeof(*dst));
    e546:	2207      	movs	r2, #7
		bt_addr_le_copy(&adv->target_addr, param->peer);
    e548:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
    e54c:	f1ba 0f00 	cmp.w	sl, #0
    e550:	d013      	beq.n	e57a <bt_le_adv_start_legacy+0xe6>
    e552:	6929      	ldr	r1, [r5, #16]
    e554:	f009 fafd 	bl	17b52 <memcpy>
	name_type = get_adv_name_type_param(param);
    e558:	4628      	mov	r0, r5
    e55a:	f009 fd18 	bl	17f8e <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    e55e:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
    e560:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    e562:	07d9      	lsls	r1, r3, #31
    e564:	d416      	bmi.n	e594 <bt_le_adv_start_legacy+0x100>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
    e566:	059b      	lsls	r3, r3, #22
    e568:	d403      	bmi.n	e572 <bt_le_adv_start_legacy+0xde>
    e56a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    e56c:	b90b      	cbnz	r3, e572 <bt_le_adv_start_legacy+0xde>
    e56e:	2f02      	cmp	r7, #2
    e570:	d15a      	bne.n	e628 <bt_le_adv_start_legacy+0x194>
		set_param.type = BT_HCI_ADV_SCAN_IND;
    e572:	2302      	movs	r3, #2
    e574:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    e578:	e01a      	b.n	e5b0 <bt_le_adv_start_legacy+0x11c>
    e57a:	4960      	ldr	r1, [pc, #384]	; (e6fc <bt_le_adv_start_legacy+0x268>)
    e57c:	f009 fae9 	bl	17b52 <memcpy>
	name_type = get_adv_name_type_param(param);
    e580:	4628      	mov	r0, r5
    e582:	f009 fd04 	bl	17f8e <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    e586:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
    e588:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    e58a:	07da      	lsls	r2, r3, #31
    e58c:	d5eb      	bpl.n	e566 <bt_le_adv_start_legacy+0xd2>
			set_param.type = BT_HCI_ADV_IND;
    e58e:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
    e592:	e00d      	b.n	e5b0 <bt_le_adv_start_legacy+0x11c>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
    e594:	f013 0f10 	tst.w	r3, #16
    e598:	bf0c      	ite	eq
    e59a:	2301      	moveq	r3, #1
    e59c:	2304      	movne	r3, #4
    e59e:	2207      	movs	r2, #7
    e5a0:	6929      	ldr	r1, [r5, #16]
    e5a2:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    e5a6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bool dir_adv = (param->peer != NULL), scannable = false;
    e5aa:	46a1      	mov	r9, r4
    e5ac:	f009 fad1 	bl	17b52 <memcpy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    e5b0:	210f      	movs	r1, #15
    e5b2:	f242 0006 	movw	r0, #8198	; 0x2006
    e5b6:	f7fe faff 	bl	cbb8 <bt_hci_cmd_create>
	if (!buf) {
    e5ba:	4604      	mov	r4, r0
    e5bc:	2800      	cmp	r0, #0
    e5be:	f000 8096 	beq.w	e6ee <bt_le_adv_start_legacy+0x25a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    e5c2:	220f      	movs	r2, #15
    e5c4:	a908      	add	r1, sp, #32
    e5c6:	300c      	adds	r0, #12
    e5c8:	f00a fdfb 	bl	191c2 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    e5cc:	4621      	mov	r1, r4
    e5ce:	2200      	movs	r2, #0
    e5d0:	f242 0006 	movw	r0, #8198	; 0x2006
    e5d4:	f7fe fb2a 	bl	cc2c <bt_hci_cmd_send_sync>
	if (err) {
    e5d8:	4604      	mov	r4, r0
    e5da:	2800      	cmp	r0, #0
    e5dc:	f47f af75 	bne.w	e4ca <bt_le_adv_start_legacy+0x36>
	if (!dir_adv) {
    e5e0:	f1ba 0f00 	cmp.w	sl, #0
    e5e4:	d026      	beq.n	e634 <bt_le_adv_start_legacy+0x1a0>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    e5e6:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    e5e8:	07dc      	lsls	r4, r3, #31
    e5ea:	d431      	bmi.n	e650 <bt_le_adv_start_legacy+0x1bc>
	return bt_le_adv_set_enable_legacy(adv, enable);
    e5ec:	2101      	movs	r1, #1
    e5ee:	4630      	mov	r0, r6
    e5f0:	f009 fcdd 	bl	17fae <bt_le_adv_set_enable_legacy>
	if (err) {
    e5f4:	4604      	mov	r4, r0
    e5f6:	2800      	cmp	r0, #0
    e5f8:	d06b      	beq.n	e6d2 <bt_le_adv_start_legacy+0x23e>
		LOG_ERR("Failed to start advertiser");
    e5fa:	4b41      	ldr	r3, [pc, #260]	; (e700 <bt_le_adv_start_legacy+0x26c>)
    e5fc:	9311      	str	r3, [sp, #68]	; 0x44
    e5fe:	2302      	movs	r3, #2
    e600:	9310      	str	r3, [sp, #64]	; 0x40
    e602:	2300      	movs	r3, #0
    e604:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e608:	483e      	ldr	r0, [pc, #248]	; (e704 <bt_le_adv_start_legacy+0x270>)
    e60a:	aa10      	add	r2, sp, #64	; 0x40
    e60c:	f7fc f88a 	bl	a724 <z_impl_z_log_msg_static_create>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    e610:	9d07      	ldr	r5, [sp, #28]
    e612:	2d00      	cmp	r5, #0
    e614:	f43f af59 	beq.w	e4ca <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    e618:	4628      	mov	r0, r5
    e61a:	2100      	movs	r1, #0
    e61c:	f000 fce4 	bl	efe8 <bt_conn_set_state>
			bt_conn_unref(conn);
    e620:	4628      	mov	r0, r5
    e622:	f009 fd32 	bl	1808a <bt_conn_unref>
    e626:	e750      	b.n	e4ca <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    e628:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
    e62a:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    e62e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    e632:	e7bd      	b.n	e5b0 <bt_le_adv_start_legacy+0x11c>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    e634:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    e636:	4659      	mov	r1, fp
    e638:	9300      	str	r3, [sp, #0]
    e63a:	4630      	mov	r0, r6
    e63c:	e9cd 9701 	strd	r9, r7, [sp, #4]
    e640:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    e642:	9a05      	ldr	r2, [sp, #20]
    e644:	f009 fc31 	bl	17eaa <le_adv_update.constprop.0>
		if (err) {
    e648:	4604      	mov	r4, r0
    e64a:	2800      	cmp	r0, #0
    e64c:	d0cb      	beq.n	e5e6 <bt_le_adv_start_legacy+0x152>
    e64e:	e73c      	b.n	e4ca <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
    e650:	4630      	mov	r0, r6
    e652:	a907      	add	r1, sp, #28
    e654:	f7ff fea8 	bl	e3a8 <le_adv_start_add_conn>
		if (err) {
    e658:	4604      	mov	r4, r0
    e65a:	2800      	cmp	r0, #0
    e65c:	d0c6      	beq.n	e5ec <bt_le_adv_start_legacy+0x158>
			if (err == -ENOMEM && !dir_adv &&
    e65e:	f110 0f0c 	cmn.w	r0, #12
    e662:	f47f af32 	bne.w	e4ca <bt_le_adv_start_legacy+0x36>
    e666:	f1ba 0f00 	cmp.w	sl, #0
    e66a:	f47f af2e 	bne.w	e4ca <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    e66e:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
    e670:	0798      	lsls	r0, r3, #30
    e672:	f53f af2a 	bmi.w	e4ca <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    e676:	686c      	ldr	r4, [r5, #4]
    e678:	f084 0402 	eor.w	r4, r4, #2
    e67c:	f3c4 0440 	ubfx	r4, r4, #1, #1
    e680:	f004 0201 	and.w	r2, r4, #1
    e684:	210e      	movs	r1, #14
    e686:	4640      	mov	r0, r8
    e688:	f009 fbfc 	bl	17e84 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
    e68c:	1e7b      	subs	r3, r7, #1
    e68e:	425a      	negs	r2, r3
    e690:	415a      	adcs	r2, r3
    e692:	2108      	movs	r1, #8
    e694:	4640      	mov	r0, r8
    e696:	f009 fbf5 	bl	17e84 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
    e69a:	1eb9      	subs	r1, r7, #2
    e69c:	424a      	negs	r2, r1
    e69e:	414a      	adcs	r2, r1
    e6a0:	4640      	mov	r0, r8
    e6a2:	2109      	movs	r1, #9
    e6a4:	f009 fbee 	bl	17e84 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    e6a8:	686a      	ldr	r2, [r5, #4]
    e6aa:	210a      	movs	r1, #10
    e6ac:	4640      	mov	r0, r8
    e6ae:	f002 0201 	and.w	r2, r2, #1
    e6b2:	f009 fbe7 	bl	17e84 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    e6b6:	464a      	mov	r2, r9
    e6b8:	210b      	movs	r1, #11
    e6ba:	4640      	mov	r0, r8
    e6bc:	f009 fbe2 	bl	17e84 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    e6c0:	686a      	ldr	r2, [r5, #4]
    e6c2:	210d      	movs	r1, #13
    e6c4:	4640      	mov	r0, r8
    e6c6:	f3c2 0280 	ubfx	r2, r2, #2, #1
    e6ca:	f009 fbdb 	bl	17e84 <atomic_set_bit_to>
	return 0;
    e6ce:	2400      	movs	r4, #0
    e6d0:	e6fb      	b.n	e4ca <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    e6d2:	9807      	ldr	r0, [sp, #28]
    e6d4:	b108      	cbz	r0, e6da <bt_le_adv_start_legacy+0x246>
		bt_conn_unref(conn);
    e6d6:	f009 fcd8 	bl	1808a <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    e6da:	f1ba 0f00 	cmp.w	sl, #0
    e6de:	d1cf      	bne.n	e680 <bt_le_adv_start_legacy+0x1ec>
    e6e0:	e7c9      	b.n	e676 <bt_le_adv_start_legacy+0x1e2>
		return -EAGAIN;
    e6e2:	f06f 040a 	mvn.w	r4, #10
    e6e6:	e6f0      	b.n	e4ca <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
    e6e8:	f06f 0477 	mvn.w	r4, #119	; 0x77
    e6ec:	e6ed      	b.n	e4ca <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
    e6ee:	f06f 0468 	mvn.w	r4, #104	; 0x68
    e6f2:	e6ea      	b.n	e4ca <bt_le_adv_start_legacy+0x36>
    e6f4:	200080d4 	.word	0x200080d4
    e6f8:	20008000 	.word	0x20008000
    e6fc:	0001c4c9 	.word	0x0001c4c9
    e700:	0001ce7b 	.word	0x0001ce7b
    e704:	0001b1c0 	.word	0x0001b1c0

0000e708 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    e708:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e70a:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    e70c:	9a06      	ldr	r2, [sp, #24]
{
    e70e:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    e710:	e9cd 3200 	strd	r3, r2, [sp]
    e714:	462b      	mov	r3, r5
    e716:	460a      	mov	r2, r1
    e718:	4601      	mov	r1, r0
    e71a:	4811      	ldr	r0, [pc, #68]	; (e760 <bt_le_adv_start+0x58>)
    e71c:	f7ff feba 	bl	e494 <bt_le_adv_start_legacy>
    e720:	4621      	mov	r1, r4
    e722:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
    e724:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
    e726:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
    e72a:	429d      	cmp	r5, r3
    e72c:	d102      	bne.n	e734 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
    e72e:	4630      	mov	r0, r6
    e730:	b002      	add	sp, #8
    e732:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
    e734:	880a      	ldrh	r2, [r1, #0]
    e736:	4282      	cmp	r2, r0
    e738:	d104      	bne.n	e744 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
    e73a:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
    e73c:	b112      	cbz	r2, e744 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
    e73e:	7812      	ldrb	r2, [r2, #0]
    e740:	07d2      	lsls	r2, r2, #31
    e742:	d402      	bmi.n	e74a <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
    e744:	3301      	adds	r3, #1
    e746:	3108      	adds	r1, #8
    e748:	e7ef      	b.n	e72a <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
    e74a:	4906      	ldr	r1, [pc, #24]	; (e764 <bt_le_adv_start+0x5c>)
    e74c:	4806      	ldr	r0, [pc, #24]	; (e768 <bt_le_adv_start+0x60>)
    e74e:	f00b ffa9 	bl	1a6a4 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
    e752:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    e756:	2300      	movs	r3, #0
    e758:	4803      	ldr	r0, [pc, #12]	; (e768 <bt_le_adv_start+0x60>)
    e75a:	f006 fe7b 	bl	15454 <k_work_reschedule>
    e75e:	e7e6      	b.n	e72e <bt_le_adv_start+0x26>
    e760:	20008018 	.word	0x20008018
    e764:	0000e7e5 	.word	0x0000e7e5
    e768:	20008030 	.word	0x20008030

0000e76c <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    e76c:	b510      	push	{r4, lr}
	if (!adv) {
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
    e76e:	4819      	ldr	r0, [pc, #100]	; (e7d4 <bt_le_adv_stop+0x68>)
    e770:	f009 fc42 	bl	17ff8 <bt_le_lim_adv_cancel_timeout>
    e774:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
    e778:	4817      	ldr	r0, [pc, #92]	; (e7d8 <bt_le_adv_stop+0x6c>)
    e77a:	f009 fb78 	bl	17e6e <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    e77e:	4816      	ldr	r0, [pc, #88]	; (e7d8 <bt_le_adv_stop+0x6c>)
    e780:	f009 fb72 	bl	17e68 <atomic_get>
    e784:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    e786:	061a      	lsls	r2, r3, #24
    e788:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    e78c:	d521      	bpl.n	e7d2 <bt_le_adv_stop+0x66>
    e78e:	4812      	ldr	r0, [pc, #72]	; (e7d8 <bt_le_adv_stop+0x6c>)
    e790:	f009 fb6a 	bl	17e68 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    e794:	0543      	lsls	r3, r0, #21
    e796:	d512      	bpl.n	e7be <bt_le_adv_stop+0x52>
	if (!adv_is_directed(adv)) {
    e798:	480e      	ldr	r0, [pc, #56]	; (e7d4 <bt_le_adv_stop+0x68>)
    e79a:	f7ff fdf9 	bl	e390 <adv_is_directed>
    e79e:	4b0f      	ldr	r3, [pc, #60]	; (e7dc <bt_le_adv_stop+0x70>)
    e7a0:	b998      	cbnz	r0, e7ca <bt_le_adv_stop+0x5e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    e7a2:	2204      	movs	r2, #4
    e7a4:	490e      	ldr	r1, [pc, #56]	; (e7e0 <bt_le_adv_stop+0x74>)
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    e7a6:	7e18      	ldrb	r0, [r3, #24]
    e7a8:	f000 fe28 	bl	f3fc <bt_conn_lookup_state_le>
    e7ac:	4604      	mov	r4, r0
	if (conn) {
    e7ae:	b130      	cbz	r0, e7be <bt_le_adv_stop+0x52>
		conn->err = status;
    e7b0:	2100      	movs	r1, #0
    e7b2:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    e7b4:	f000 fc18 	bl	efe8 <bt_conn_set_state>
		bt_conn_unref(conn);
    e7b8:	4620      	mov	r0, r4
    e7ba:	f009 fc66 	bl	1808a <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    e7be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
    e7c2:	2100      	movs	r1, #0
    e7c4:	4803      	ldr	r0, [pc, #12]	; (e7d4 <bt_le_adv_stop+0x68>)
    e7c6:	f009 bbf2 	b.w	17fae <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    e7ca:	2205      	movs	r2, #5
    e7cc:	f103 0121 	add.w	r1, r3, #33	; 0x21
    e7d0:	e7e9      	b.n	e7a6 <bt_le_adv_stop+0x3a>
}
    e7d2:	bd10      	pop	{r4, pc}
    e7d4:	20008018 	.word	0x20008018
    e7d8:	20008028 	.word	0x20008028
    e7dc:	20008000 	.word	0x20008000
    e7e0:	0001c4c2 	.word	0x0001c4c2

0000e7e4 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
    e7e4:	b598      	push	{r3, r4, r7, lr}
    e7e6:	af00      	add	r7, sp, #0
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
    e7e8:	f7ff ffc0 	bl	e76c <bt_le_adv_stop>
#endif
	if (err) {
    e7ec:	b178      	cbz	r0, e80e <adv_timeout+0x2a>
		LOG_WRN("Failed to stop advertising: %d", err);
    e7ee:	466c      	mov	r4, sp
    e7f0:	b088      	sub	sp, #32
    e7f2:	466a      	mov	r2, sp
    e7f4:	4b07      	ldr	r3, [pc, #28]	; (e814 <adv_timeout+0x30>)
    e7f6:	e9c2 3005 	strd	r3, r0, [r2, #20]
    e7fa:	2303      	movs	r3, #3
    e7fc:	f842 3f10 	str.w	r3, [r2, #16]!
    e800:	2300      	movs	r3, #0
    e802:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    e806:	4804      	ldr	r0, [pc, #16]	; (e818 <adv_timeout+0x34>)
    e808:	f7fb ff8c 	bl	a724 <z_impl_z_log_msg_static_create>
    e80c:	46a5      	mov	sp, r4
	}
}
    e80e:	46bd      	mov	sp, r7
    e810:	bd98      	pop	{r3, r4, r7, pc}
    e812:	bf00      	nop
    e814:	0001ce96 	.word	0x0001ce96
    e818:	0001b1c0 	.word	0x0001b1c0

0000e81c <bt_le_adv_resume>:
{
    e81c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e81e:	b083      	sub	sp, #12
    e820:	4837      	ldr	r0, [pc, #220]	; (e900 <bt_le_adv_resume+0xe4>)
    e822:	af00      	add	r7, sp, #0
    e824:	f009 fb20 	bl	17e68 <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    e828:	f410 4f80 	tst.w	r0, #16384	; 0x4000
    e82c:	4c34      	ldr	r4, [pc, #208]	; (e900 <bt_le_adv_resume+0xe4>)
    e82e:	d041      	beq.n	e8b4 <bt_le_adv_resume+0x98>
    e830:	4620      	mov	r0, r4
    e832:	f009 fb19 	bl	17e68 <atomic_get>
    e836:	0603      	lsls	r3, r0, #24
    e838:	d43c      	bmi.n	e8b4 <bt_le_adv_resume+0x98>
    e83a:	4620      	mov	r0, r4
    e83c:	f009 fb14 	bl	17e68 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    e840:	0546      	lsls	r6, r0, #21
    e842:	d537      	bpl.n	e8b4 <bt_le_adv_resume+0x98>
	err = le_adv_start_add_conn(adv, &conn);
    e844:	1d39      	adds	r1, r7, #4
    e846:	f1a4 0010 	sub.w	r0, r4, #16
    e84a:	f7ff fdad 	bl	e3a8 <le_adv_start_add_conn>
	if (err) {
    e84e:	bb88      	cbnz	r0, e8b4 <bt_le_adv_resume+0x98>
		bool dir_adv = adv_is_directed(adv);
    e850:	f1a4 0010 	sub.w	r0, r4, #16
    e854:	f7ff fd9c 	bl	e390 <adv_is_directed>
    e858:	4602      	mov	r2, r0
    e85a:	4620      	mov	r0, r4
    e85c:	f009 fb04 	bl	17e68 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    e860:	f3c0 3180 	ubfx	r1, r0, #14, #1
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    e864:	4620      	mov	r0, r4
    e866:	f009 faff 	bl	17e68 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST)) {
    e86a:	f081 0101 	eor.w	r1, r1, #1
	if (atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    e86e:	0545      	lsls	r5, r0, #21
	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST)) {
    e870:	ea4f 0141 	mov.w	r1, r1, lsl #1
    e874:	4822      	ldr	r0, [pc, #136]	; (e900 <bt_le_adv_resume+0xe4>)
		options |= BT_LE_ADV_OPT_CONNECTABLE;
    e876:	bf48      	it	mi
    e878:	f041 0101 	orrmi.w	r1, r1, #1
    e87c:	f009 faf4 	bl	17e68 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
    e880:	0480      	lsls	r0, r0, #18
		options |= BT_LE_ADV_OPT_USE_IDENTITY;
    e882:	bf48      	it	mi
    e884:	f041 0104 	orrmi.w	r1, r1, #4
		err = bt_id_set_adv_own_addr(adv, options, dir_adv, &own_addr_type);
    e888:	481e      	ldr	r0, [pc, #120]	; (e904 <bt_le_adv_resume+0xe8>)
    e88a:	1cfb      	adds	r3, r7, #3
    e88c:	f7ff fc86 	bl	e19c <bt_id_set_adv_own_addr>
		if (err) {
    e890:	4605      	mov	r5, r0
    e892:	b190      	cbz	r0, e8ba <bt_le_adv_resume+0x9e>
			LOG_ERR("Controller cannot resume connectable advertising (%d)", err);
    e894:	466c      	mov	r4, sp
    e896:	b088      	sub	sp, #32
    e898:	466a      	mov	r2, sp
    e89a:	4b1b      	ldr	r3, [pc, #108]	; (e908 <bt_le_adv_resume+0xec>)
    e89c:	e9c2 3005 	strd	r3, r0, [r2, #20]
    e8a0:	2303      	movs	r3, #3
    e8a2:	f842 3f10 	str.w	r3, [r2, #16]!
    e8a6:	2300      	movs	r3, #0
    e8a8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e8ac:	4817      	ldr	r0, [pc, #92]	; (e90c <bt_le_adv_resume+0xf0>)
    e8ae:	f7fb ff39 	bl	a724 <z_impl_z_log_msg_static_create>
    e8b2:	46a5      	mov	sp, r4
}
    e8b4:	370c      	adds	r7, #12
    e8b6:	46bd      	mov	sp, r7
    e8b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_le_adv_set_enable_legacy(adv, enable);
    e8ba:	2101      	movs	r1, #1
    e8bc:	4811      	ldr	r0, [pc, #68]	; (e904 <bt_le_adv_resume+0xe8>)
    e8be:	f009 fb76 	bl	17fae <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
    e8c2:	687e      	ldr	r6, [r7, #4]
	if (err) {
    e8c4:	b918      	cbnz	r0, e8ce <bt_le_adv_resume+0xb2>
	bt_conn_unref(conn);
    e8c6:	4630      	mov	r0, r6
    e8c8:	f009 fbdf 	bl	1808a <bt_conn_unref>
	if (persist_paused) {
    e8cc:	e7f2      	b.n	e8b4 <bt_le_adv_resume+0x98>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    e8ce:	4629      	mov	r1, r5
    e8d0:	4630      	mov	r0, r6
    e8d2:	f000 fb89 	bl	efe8 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    e8d6:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
    e8da:	4809      	ldr	r0, [pc, #36]	; (e900 <bt_le_adv_resume+0xe4>)
    e8dc:	f009 fac7 	bl	17e6e <atomic_and>
    e8e0:	4605      	mov	r5, r0
	bt_conn_unref(conn);
    e8e2:	4630      	mov	r0, r6
    e8e4:	f009 fbd1 	bl	1808a <bt_conn_unref>
	if (persist_paused) {
    e8e8:	046b      	lsls	r3, r5, #17
    e8ea:	d5e3      	bpl.n	e8b4 <bt_le_adv_resume+0x98>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e8ec:	e8d4 3fef 	ldaex	r3, [r4]
    e8f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    e8f4:	e8c4 3fe2 	stlex	r2, r3, [r4]
    e8f8:	2a00      	cmp	r2, #0
    e8fa:	d0db      	beq.n	e8b4 <bt_le_adv_resume+0x98>
    e8fc:	e7f6      	b.n	e8ec <bt_le_adv_resume+0xd0>
    e8fe:	bf00      	nop
    e900:	20008028 	.word	0x20008028
    e904:	20008018 	.word	0x20008018
    e908:	0001ceb5 	.word	0x0001ceb5
    e90c:	0001b1c0 	.word	0x0001b1c0

0000e910 <prng_reseed.constprop.0>:
#include <zephyr/logging/log.h>
LOG_MODULE_REGISTER(bt_host_crypto);

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
    e910:	b530      	push	{r4, r5, lr}
    e912:	b093      	sub	sp, #76	; 0x4c
{
	uint8_t seed[32];
	int64_t extra;
	int ret;

	ret = bt_hci_le_rand(seed, sizeof(seed));
    e914:	2120      	movs	r1, #32
    e916:	a80a      	add	r0, sp, #40	; 0x28
    e918:	f7fe fa30 	bl	cd7c <bt_hci_le_rand>
	if (ret) {
    e91c:	4604      	mov	r4, r0
    e91e:	bb18      	cbnz	r0, e968 <prng_reseed.constprop.0+0x58>
	return z_impl_k_uptime_ticks();
    e920:	f00c f85c 	bl	1a9dc <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
    e924:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    e928:	fba0 2305 	umull	r2, r3, r0, r5
    e92c:	fb05 3101 	mla	r1, r5, r1, r3
		return ret;
	}

	extra = k_uptime_get();

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
    e930:	2308      	movs	r3, #8
    e932:	0bd2      	lsrs	r2, r2, #15
    e934:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
    e938:	0bc9      	lsrs	r1, r1, #15
	extra = k_uptime_get();
    e93a:	e9cd 2102 	strd	r2, r1, [sp, #8]
	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
    e93e:	9300      	str	r3, [sp, #0]
    e940:	2220      	movs	r2, #32
    e942:	480b      	ldr	r0, [pc, #44]	; (e970 <prng_reseed.constprop.0+0x60>)
    e944:	446b      	add	r3, sp
    e946:	a90a      	add	r1, sp, #40	; 0x28
    e948:	f009 f805 	bl	17956 <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
    e94c:	b960      	cbnz	r0, e968 <prng_reseed.constprop.0+0x58>
		LOG_ERR("Failed to re-seed PRNG");
    e94e:	4b09      	ldr	r3, [pc, #36]	; (e974 <prng_reseed.constprop.0+0x64>)
    e950:	9309      	str	r3, [sp, #36]	; 0x24
    e952:	2302      	movs	r3, #2
    e954:	9308      	str	r3, [sp, #32]
    e956:	4623      	mov	r3, r4
    e958:	f06f 0404 	mvn.w	r4, #4
    e95c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e960:	4805      	ldr	r0, [pc, #20]	; (e978 <prng_reseed.constprop.0+0x68>)
    e962:	aa08      	add	r2, sp, #32
    e964:	f7fb fede 	bl	a724 <z_impl_z_log_msg_static_create>
		return -EIO;
	}

	return 0;
}
    e968:	4620      	mov	r0, r4
    e96a:	b013      	add	sp, #76	; 0x4c
    e96c:	bd30      	pop	{r4, r5, pc}
    e96e:	bf00      	nop
    e970:	200091e8 	.word	0x200091e8
    e974:	0001cef2 	.word	0x0001cef2
    e978:	0001b1f8 	.word	0x0001b1f8

0000e97c <prng_init>:

int prng_init(void)
{
    e97c:	b510      	push	{r4, lr}
    e97e:	b088      	sub	sp, #32
	uint8_t perso[8];
	int ret;

	ret = bt_hci_le_rand(perso, sizeof(perso));
    e980:	2108      	movs	r1, #8
    e982:	4668      	mov	r0, sp
    e984:	f7fe f9fa 	bl	cd7c <bt_hci_le_rand>
	if (ret) {
    e988:	4604      	mov	r4, r0
    e98a:	b990      	cbnz	r0, e9b2 <prng_init+0x36>
		return ret;
	}

	ret = tc_hmac_prng_init(&prng, perso, sizeof(perso));
    e98c:	2208      	movs	r2, #8
    e98e:	4669      	mov	r1, sp
    e990:	480b      	ldr	r0, [pc, #44]	; (e9c0 <prng_init+0x44>)
    e992:	f008 ffc0 	bl	17916 <tc_hmac_prng_init>
	if (ret == TC_CRYPTO_FAIL) {
    e996:	b978      	cbnz	r0, e9b8 <prng_init+0x3c>
		LOG_ERR("Failed to initialize PRNG");
    e998:	4b0a      	ldr	r3, [pc, #40]	; (e9c4 <prng_init+0x48>)
    e99a:	9307      	str	r3, [sp, #28]
    e99c:	2302      	movs	r3, #2
    e99e:	9306      	str	r3, [sp, #24]
    e9a0:	4623      	mov	r3, r4
		return -EIO;
    e9a2:	f06f 0404 	mvn.w	r4, #4
    e9a6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e9aa:	4807      	ldr	r0, [pc, #28]	; (e9c8 <prng_init+0x4c>)
    e9ac:	aa06      	add	r2, sp, #24
    e9ae:	f7fb feb9 	bl	a724 <z_impl_z_log_msg_static_create>
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
    e9b2:	4620      	mov	r0, r4
    e9b4:	b008      	add	sp, #32
    e9b6:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
    e9b8:	f7ff ffaa 	bl	e910 <prng_reseed.constprop.0>
    e9bc:	4604      	mov	r4, r0
    e9be:	e7f8      	b.n	e9b2 <prng_init+0x36>
    e9c0:	200091e8 	.word	0x200091e8
    e9c4:	0001cf09 	.word	0x0001cf09
    e9c8:	0001b1f8 	.word	0x0001b1f8

0000e9cc <bt_rand>:

#if defined(CONFIG_BT_HOST_CRYPTO_PRNG)
int bt_rand(void *buf, size_t len)
{
    e9cc:	b538      	push	{r3, r4, r5, lr}
    e9ce:	460d      	mov	r5, r1
	int ret;

	CHECKIF(buf == NULL || len == 0) {
    e9d0:	4604      	mov	r4, r0
    e9d2:	b198      	cbz	r0, e9fc <bt_rand+0x30>
    e9d4:	b191      	cbz	r1, e9fc <bt_rand+0x30>
		return -EINVAL;
	}

	ret = tc_hmac_prng_generate(buf, len, &prng);
    e9d6:	4a0b      	ldr	r2, [pc, #44]	; (ea04 <bt_rand+0x38>)
    e9d8:	f008 ffd6 	bl	17988 <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
    e9dc:	1c43      	adds	r3, r0, #1
    e9de:	d107      	bne.n	e9f0 <bt_rand+0x24>
		ret = prng_reseed(&prng);
    e9e0:	f7ff ff96 	bl	e910 <prng_reseed.constprop.0>
		if (ret) {
    e9e4:	b948      	cbnz	r0, e9fa <bt_rand+0x2e>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
    e9e6:	4629      	mov	r1, r5
    e9e8:	4620      	mov	r0, r4
    e9ea:	4a06      	ldr	r2, [pc, #24]	; (ea04 <bt_rand+0x38>)
    e9ec:	f008 ffcc 	bl	17988 <tc_hmac_prng_generate>

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
	}

	return -EIO;
    e9f0:	2801      	cmp	r0, #1
    e9f2:	bf0c      	ite	eq
    e9f4:	2000      	moveq	r0, #0
    e9f6:	f06f 0004 	mvnne.w	r0, #4
}
    e9fa:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    e9fc:	f06f 0015 	mvn.w	r0, #21
    ea00:	e7fb      	b.n	e9fa <bt_rand+0x2e>
    ea02:	bf00      	nop
    ea04:	200091e8 	.word	0x200091e8

0000ea08 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
    ea08:	b570      	push	{r4, r5, r6, lr}
    ea0a:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    ea0c:	4b0a      	ldr	r3, [pc, #40]	; (ea38 <notify_connected+0x30>)
    ea0e:	681d      	ldr	r5, [r3, #0]
    ea10:	b925      	cbnz	r5, ea1c <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    ea12:	4d0a      	ldr	r5, [pc, #40]	; (ea3c <notify_connected+0x34>)
    ea14:	4e0a      	ldr	r6, [pc, #40]	; (ea40 <notify_connected+0x38>)
    ea16:	42b5      	cmp	r5, r6
    ea18:	d307      	bcc.n	ea2a <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    ea1a:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
    ea1c:	682b      	ldr	r3, [r5, #0]
    ea1e:	b113      	cbz	r3, ea26 <notify_connected+0x1e>
			cb->connected(conn, conn->err);
    ea20:	4620      	mov	r0, r4
    ea22:	7a61      	ldrb	r1, [r4, #9]
    ea24:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    ea26:	692d      	ldr	r5, [r5, #16]
    ea28:	e7f2      	b.n	ea10 <notify_connected+0x8>
		if (cb->connected) {
    ea2a:	682b      	ldr	r3, [r5, #0]
    ea2c:	b113      	cbz	r3, ea34 <notify_connected+0x2c>
			cb->connected(conn, conn->err);
    ea2e:	4620      	mov	r0, r4
    ea30:	7a61      	ldrb	r1, [r4, #9]
    ea32:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    ea34:	3514      	adds	r5, #20
    ea36:	e7ee      	b.n	ea16 <notify_connected+0xe>
    ea38:	20009824 	.word	0x20009824
    ea3c:	0001b188 	.word	0x0001b188
    ea40:	0001b188 	.word	0x0001b188

0000ea44 <bt_conn_create_pdu_timeout.part.0>:
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
    ea44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_WRN("Unable to allocate buffer within timeout");
    ea46:	4b07      	ldr	r3, [pc, #28]	; (ea64 <bt_conn_create_pdu_timeout.part.0+0x20>)
    ea48:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    ea4c:	9305      	str	r3, [sp, #20]
    ea4e:	2302      	movs	r3, #2
    ea50:	4805      	ldr	r0, [pc, #20]	; (ea68 <bt_conn_create_pdu_timeout.part.0+0x24>)
    ea52:	aa04      	add	r2, sp, #16
    ea54:	9304      	str	r3, [sp, #16]
    ea56:	f009 fad2 	bl	17ffe <z_log_msg_static_create.constprop.0>
}
    ea5a:	2000      	movs	r0, #0
    ea5c:	b007      	add	sp, #28
    ea5e:	f85d fb04 	ldr.w	pc, [sp], #4
    ea62:	bf00      	nop
    ea64:	0001cf32 	.word	0x0001cf32
    ea68:	0001b1d0 	.word	0x0001b1d0

0000ea6c <tx_notify>:
{
    ea6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ea70:	4604      	mov	r4, r0
	tx->cb = NULL;
    ea72:	f04f 0800 	mov.w	r8, #0
	k_fifo_put(&free_tx, tx);
    ea76:	4f14      	ldr	r7, [pc, #80]	; (eac8 <tx_notify+0x5c>)
	__asm__ volatile(
    ea78:	f04f 0220 	mov.w	r2, #32
    ea7c:	f3ef 8311 	mrs	r3, BASEPRI
    ea80:	f382 8812 	msr	BASEPRI_MAX, r2
    ea84:	f3bf 8f6f 	isb	sy
	return list->head;
    ea88:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
    ea8a:	b929      	cbnz	r1, ea98 <tx_notify+0x2c>
	__asm__ volatile(
    ea8c:	f383 8811 	msr	BASEPRI, r3
    ea90:	f3bf 8f6f 	isb	sy
}
    ea94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ea98:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
    ea9a:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ea9c:	4281      	cmp	r1, r0
	list->tail = node;
    ea9e:	bf08      	it	eq
    eaa0:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
    eaa2:	6222      	str	r2, [r4, #32]
    eaa4:	f383 8811 	msr	BASEPRI, r3
    eaa8:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
    eaac:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	k_fifo_put(&free_tx, tx);
    eab0:	4638      	mov	r0, r7
	tx->user_data = NULL;
    eab2:	e9c1 8801 	strd	r8, r8, [r1, #4]
	tx->pending_no_cb = 0U;
    eab6:	f8c1 800c 	str.w	r8, [r1, #12]
	k_fifo_put(&free_tx, tx);
    eaba:	f00b fd13 	bl	1a4e4 <k_queue_append>
		cb(conn, user_data, 0);
    eabe:	2200      	movs	r2, #0
    eac0:	4631      	mov	r1, r6
    eac2:	4620      	mov	r0, r4
    eac4:	47a8      	blx	r5
	while (1) {
    eac6:	e7d7      	b.n	ea78 <tx_notify+0xc>
    eac8:	200085f8 	.word	0x200085f8

0000eacc <conn_tx_destroy>:
	tx->cb = NULL;
    eacc:	2200      	movs	r2, #0
{
    eace:	b570      	push	{r4, r5, r6, lr}
    ead0:	4604      	mov	r4, r0
	void *user_data = tx->user_data;
    ead2:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
    ead6:	60ca      	str	r2, [r1, #12]
	tx->user_data = NULL;
    ead8:	e9c1 2201 	strd	r2, r2, [r1, #4]
	k_fifo_put(&free_tx, tx);
    eadc:	4805      	ldr	r0, [pc, #20]	; (eaf4 <conn_tx_destroy+0x28>)
    eade:	f00b fd01 	bl	1a4e4 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
    eae2:	4631      	mov	r1, r6
    eae4:	4620      	mov	r0, r4
    eae6:	462b      	mov	r3, r5
}
    eae8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
    eaec:	f06f 026d 	mvn.w	r2, #109	; 0x6d
    eaf0:	4718      	bx	r3
    eaf2:	bf00      	nop
    eaf4:	200085f8 	.word	0x200085f8

0000eaf8 <send_frag>:
{
    eaf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eafc:	b083      	sub	sp, #12
	if (bt_dev.le.acl_mtu) {
    eafe:	f8df 91a8 	ldr.w	r9, [pc, #424]	; eca8 <send_frag+0x1b0>
{
    eb02:	4698      	mov	r8, r3
	if (bt_dev.le.acl_mtu) {
    eb04:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
{
    eb08:	4604      	mov	r4, r0
	return NULL;
    eb0a:	2b00      	cmp	r3, #0
{
    eb0c:	af00      	add	r7, sp, #0
	return NULL;
    eb0e:	f509 7084 	add.w	r0, r9, #264	; 0x108
{
    eb12:	460d      	mov	r5, r1
	return NULL;
    eb14:	bf08      	it	eq
    eb16:	2000      	moveq	r0, #0
{
    eb18:	4616      	mov	r6, r2
	return z_impl_k_sem_take(sem, timeout);
    eb1a:	2200      	movs	r2, #0
    eb1c:	2300      	movs	r3, #0
    eb1e:	f006 fa69 	bl	14ff4 <z_impl_k_sem_take>
	if (k_sem_take(bt_conn_get_pkts(conn), K_NO_WAIT)) {
    eb22:	2800      	cmp	r0, #0
    eb24:	f040 80bd 	bne.w	eca2 <send_frag+0x1aa>
	if (frag) {
    eb28:	2e00      	cmp	r6, #0
    eb2a:	f000 8090 	beq.w	ec4e <send_frag+0x156>
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    eb2e:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    eb32:	f106 0b0c 	add.w	fp, r6, #12
    eb36:	4658      	mov	r0, fp
    eb38:	607b      	str	r3, [r7, #4]
    eb3a:	f00a fb80 	bl	1923e <net_buf_simple_tailroom>
    eb3e:	687b      	ldr	r3, [r7, #4]
    eb40:	4298      	cmp	r0, r3
    eb42:	d97f      	bls.n	ec44 <send_frag+0x14c>
	return bt_dev.le.acl_mtu;
    eb44:	f8b9 2104 	ldrh.w	r2, [r9, #260]	; 0x104
	return net_buf_simple_add_mem(&buf->b, mem, len);
    eb48:	f855 1f0c 	ldr.w	r1, [r5, #12]!
    eb4c:	4658      	mov	r0, fp
    eb4e:	607a      	str	r2, [r7, #4]
    eb50:	f00a fb37 	bl	191c2 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    eb54:	687a      	ldr	r2, [r7, #4]
    eb56:	4628      	mov	r0, r5
    eb58:	4611      	mov	r1, r2
    eb5a:	f00a fb54 	bl	19206 <net_buf_simple_pull>
	if (conn->state != BT_CONN_CONNECTED) {
    eb5e:	7aa3      	ldrb	r3, [r4, #10]
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    eb60:	69b5      	ldr	r5, [r6, #24]
	if (conn->state != BT_CONN_CONNECTED) {
    eb62:	2b07      	cmp	r3, #7
    eb64:	f040 809a 	bne.w	ec9c <send_frag+0x1a4>
	__asm__ volatile(
    eb68:	f04f 0320 	mov.w	r3, #32
    eb6c:	f3ef 8211 	mrs	r2, BASEPRI
    eb70:	f383 8812 	msr	BASEPRI_MAX, r3
    eb74:	f3bf 8f6f 	isb	sy
	if (tx) {
    eb78:	2d00      	cmp	r5, #0
    eb7a:	d073      	beq.n	ec64 <send_frag+0x16c>
	parent->next = child;
    eb7c:	2300      	movs	r3, #0
    eb7e:	602b      	str	r3, [r5, #0]
	return list->tail;
    eb80:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
    eb82:	2b00      	cmp	r3, #0
    eb84:	d16b      	bne.n	ec5e <send_frag+0x166>
	list->head = node;
    eb86:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    eb8a:	f382 8811 	msr	BASEPRI, r2
    eb8e:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    eb92:	2104      	movs	r1, #4
    eb94:	f106 000c 	add.w	r0, r6, #12
    eb98:	f00a fb24 	bl	191e4 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    eb9c:	8823      	ldrh	r3, [r4, #0]
    eb9e:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
    eba2:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
    eba6:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    ebaa:	8a33      	ldrh	r3, [r6, #16]
    ebac:	3b04      	subs	r3, #4
    ebae:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    ebb0:	2302      	movs	r3, #2
	return bt_send(buf);
    ebb2:	4630      	mov	r0, r6
    ebb4:	7633      	strb	r3, [r6, #24]
    ebb6:	f7fe fab5 	bl	d124 <bt_send>
	if (err) {
    ebba:	4680      	mov	r8, r0
    ebbc:	2800      	cmp	r0, #0
    ebbe:	d03c      	beq.n	ec3a <send_frag+0x142>
		LOG_ERR("Unable to send to driver (err %d)", err);
    ebc0:	46eb      	mov	fp, sp
    ebc2:	b088      	sub	sp, #32
    ebc4:	466a      	mov	r2, sp
    ebc6:	4b39      	ldr	r3, [pc, #228]	; (ecac <send_frag+0x1b4>)
    ebc8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ebcc:	e9c2 3005 	strd	r3, r0, [r2, #20]
    ebd0:	2303      	movs	r3, #3
    ebd2:	4837      	ldr	r0, [pc, #220]	; (ecb0 <send_frag+0x1b8>)
    ebd4:	f842 3f10 	str.w	r3, [r2, #16]!
    ebd8:	f009 fa11 	bl	17ffe <z_log_msg_static_create.constprop.0>
    ebdc:	46dd      	mov	sp, fp
	__asm__ volatile(
    ebde:	f04f 0320 	mov.w	r3, #32
    ebe2:	f3ef 8111 	mrs	r1, BASEPRI
    ebe6:	f383 8812 	msr	BASEPRI_MAX, r3
    ebea:	f3bf 8f6f 	isb	sy
		if (tx) {
    ebee:	2d00      	cmp	r5, #0
    ebf0:	d04e      	beq.n	ec90 <send_frag+0x198>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ebf2:	2200      	movs	r2, #0
	return list->head;
    ebf4:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ebf6:	b15b      	cbz	r3, ec10 <send_frag+0x118>
    ebf8:	429d      	cmp	r5, r3
    ebfa:	d146      	bne.n	ec8a <send_frag+0x192>
	return node->next;
    ebfc:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
    ebfe:	2a00      	cmp	r2, #0
    ec00:	d13d      	bne.n	ec7e <send_frag+0x186>
    ec02:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
    ec04:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    ec06:	4295      	cmp	r5, r2
    ec08:	d100      	bne.n	ec0c <send_frag+0x114>
	list->tail = node;
    ec0a:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    ec0c:	2300      	movs	r3, #0
    ec0e:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    ec10:	f381 8811 	msr	BASEPRI, r1
    ec14:	f3bf 8f6f 	isb	sy
		err = -EIO;
    ec18:	f06f 0804 	mvn.w	r8, #4
	if (bt_dev.le.acl_mtu) {
    ec1c:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
	return NULL;
    ec20:	4824      	ldr	r0, [pc, #144]	; (ecb4 <send_frag+0x1bc>)
    ec22:	2b00      	cmp	r3, #0
    ec24:	bf08      	it	eq
    ec26:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
    ec28:	f006 f9be 	bl	14fa8 <z_impl_k_sem_give>
	if (tx) {
    ec2c:	b12d      	cbz	r5, ec3a <send_frag+0x142>
		tx_data(buf)->tx = NULL;
    ec2e:	2300      	movs	r3, #0
		conn_tx_destroy(conn, tx);
    ec30:	4629      	mov	r1, r5
    ec32:	4620      	mov	r0, r4
		tx_data(buf)->tx = NULL;
    ec34:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
    ec36:	f7ff ff49 	bl	eacc <conn_tx_destroy>
}
    ec3a:	4640      	mov	r0, r8
    ec3c:	370c      	adds	r7, #12
    ec3e:	46bd      	mov	sp, r7
    ec40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_tailroom(&buf->b);
    ec44:	4658      	mov	r0, fp
    ec46:	f00a fafa 	bl	1923e <net_buf_simple_tailroom>
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    ec4a:	b282      	uxth	r2, r0
    ec4c:	e77c      	b.n	eb48 <send_frag+0x50>
		buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    ec4e:	2200      	movs	r2, #0
    ec50:	2300      	movs	r3, #0
    ec52:	f104 0038 	add.w	r0, r4, #56	; 0x38
    ec56:	f00a fa53 	bl	19100 <net_buf_get>
    ec5a:	4606      	mov	r6, r0
		frag = buf;
    ec5c:	e77f      	b.n	eb5e <send_frag+0x66>
    ec5e:	601d      	str	r5, [r3, #0]
	list->tail = node;
    ec60:	61a5      	str	r5, [r4, #24]
}
    ec62:	e792      	b.n	eb8a <send_frag+0x92>
	return list->tail;
    ec64:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    ec66:	b133      	cbz	r3, ec76 <send_frag+0x17e>
			pending_no_cb = &tail_tx->pending_no_cb;
    ec68:	f103 0a0c 	add.w	sl, r3, #12
    ec6c:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    ec6e:	3301      	adds	r3, #1
    ec70:	f8ca 3000 	str.w	r3, [sl]
    ec74:	e789      	b.n	eb8a <send_frag+0x92>
			pending_no_cb = &conn->pending_no_cb;
    ec76:	69e3      	ldr	r3, [r4, #28]
    ec78:	f104 0a1c 	add.w	sl, r4, #28
    ec7c:	e7f7      	b.n	ec6e <send_frag+0x176>
	parent->next = child;
    ec7e:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    ec80:	69a3      	ldr	r3, [r4, #24]
    ec82:	429d      	cmp	r5, r3
	list->tail = node;
    ec84:	bf08      	it	eq
    ec86:	61a2      	streq	r2, [r4, #24]
}
    ec88:	e7c0      	b.n	ec0c <send_frag+0x114>
	return node->next;
    ec8a:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ec8c:	681b      	ldr	r3, [r3, #0]
    ec8e:	e7b2      	b.n	ebf6 <send_frag+0xfe>
			(*pending_no_cb)--;
    ec90:	f8da 3000 	ldr.w	r3, [sl]
    ec94:	3b01      	subs	r3, #1
    ec96:	f8ca 3000 	str.w	r3, [sl]
    ec9a:	e7b9      	b.n	ec10 <send_frag+0x118>
		err = -ENOTCONN;
    ec9c:	f06f 087f 	mvn.w	r8, #127	; 0x7f
    eca0:	e7bc      	b.n	ec1c <send_frag+0x124>
		return -ENOBUFS;
    eca2:	f06f 0868 	mvn.w	r8, #104	; 0x68
    eca6:	e7c8      	b.n	ec3a <send_frag+0x142>
    eca8:	20008000 	.word	0x20008000
    ecac:	0001c93d 	.word	0x0001c93d
    ecb0:	0001b1d0 	.word	0x0001b1d0
    ecb4:	20008108 	.word	0x20008108

0000ecb8 <bt_conn_get_pkts>:
	if (bt_dev.le.acl_mtu) {
    ecb8:	4804      	ldr	r0, [pc, #16]	; (eccc <bt_conn_get_pkts+0x14>)
    ecba:	f8b0 3104 	ldrh.w	r3, [r0, #260]	; 0x104
	return NULL;
    ecbe:	f500 7084 	add.w	r0, r0, #264	; 0x108
    ecc2:	2b00      	cmp	r3, #0
}
    ecc4:	bf08      	it	eq
    ecc6:	2000      	moveq	r0, #0
    ecc8:	4770      	bx	lr
    ecca:	bf00      	nop
    eccc:	20008000 	.word	0x20008000

0000ecd0 <bt_conn_new>:
{
    ecd0:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
    ecd2:	2200      	movs	r2, #0
    ecd4:	4604      	mov	r4, r0
    ecd6:	428a      	cmp	r2, r1
    ecd8:	d102      	bne.n	ece0 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
    ecda:	2400      	movs	r4, #0
}
    ecdc:	4620      	mov	r0, r4
    ecde:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    ece0:	2001      	movs	r0, #1
    ece2:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
    ece6:	e8d3 5fef 	ldaex	r5, [r3]
    ecea:	2d00      	cmp	r5, #0
    ecec:	d104      	bne.n	ecf8 <bt_conn_new+0x28>
    ecee:	e8c3 0fec 	stlex	ip, r0, [r3]
    ecf2:	f1bc 0f00 	cmp.w	ip, #0
    ecf6:	d1f6      	bne.n	ece6 <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
    ecf8:	d002      	beq.n	ed00 <bt_conn_new+0x30>
    ecfa:	34c0      	adds	r4, #192	; 0xc0
	for (i = 0; i < size; i++) {
    ecfc:	4402      	add	r2, r0
    ecfe:	e7ea      	b.n	ecd6 <bt_conn_new+0x6>
	if (!conn) {
    ed00:	2c00      	cmp	r4, #0
    ed02:	d0ea      	beq.n	ecda <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
    ed04:	22bc      	movs	r2, #188	; 0xbc
    ed06:	2100      	movs	r1, #0
    ed08:	4620      	mov	r0, r4
    ed0a:	f008 ff2d 	bl	17b68 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
    ed0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
    ed12:	4904      	ldr	r1, [pc, #16]	; (ed24 <bt_conn_new+0x54>)
    ed14:	f00b fcc6 	bl	1a6a4 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
    ed18:	4903      	ldr	r1, [pc, #12]	; (ed28 <bt_conn_new+0x58>)
    ed1a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    ed1e:	f00b fc7d 	bl	1a61c <k_work_init>
	return conn;
    ed22:	e7db      	b.n	ecdc <bt_conn_new+0xc>
    ed24:	0000f4a9 	.word	0x0000f4a9
    ed28:	00018005 	.word	0x00018005

0000ed2c <bt_conn_recv>:
{
    ed2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ed30:	4616      	mov	r6, r2
    ed32:	b086      	sub	sp, #24
    ed34:	af00      	add	r7, sp, #0
    ed36:	4604      	mov	r4, r0
    ed38:	460d      	mov	r5, r1
	tx_notify(conn);
    ed3a:	f7ff fe97 	bl	ea6c <tx_notify>
	switch (flags) {
    ed3e:	2e01      	cmp	r6, #1
    ed40:	d030      	beq.n	eda4 <bt_conn_recv+0x78>
    ed42:	2e02      	cmp	r6, #2
    ed44:	d16a      	bne.n	ee1c <bt_conn_recv+0xf0>
		if (conn->rx) {
    ed46:	6923      	ldr	r3, [r4, #16]
    ed48:	b163      	cbz	r3, ed64 <bt_conn_recv+0x38>
			LOG_ERR("Unexpected first L2CAP frame");
    ed4a:	4b40      	ldr	r3, [pc, #256]	; (ee4c <bt_conn_recv+0x120>)
    ed4c:	4840      	ldr	r0, [pc, #256]	; (ee50 <bt_conn_recv+0x124>)
    ed4e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ed52:	e9c7 6304 	strd	r6, r3, [r7, #16]
    ed56:	f107 0210 	add.w	r2, r7, #16
    ed5a:	f009 f950 	bl	17ffe <z_log_msg_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
    ed5e:	4620      	mov	r0, r4
    ed60:	f009 f953 	bl	1800a <bt_conn_reset_rx_state>
		conn->rx = buf;
    ed64:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
    ed66:	6921      	ldr	r1, [r4, #16]
    ed68:	8a08      	ldrh	r0, [r1, #16]
    ed6a:	2801      	cmp	r0, #1
    ed6c:	d930      	bls.n	edd0 <bt_conn_recv+0xa4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    ed6e:	68cb      	ldr	r3, [r1, #12]
    ed70:	881b      	ldrh	r3, [r3, #0]
    ed72:	3304      	adds	r3, #4
    ed74:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
    ed76:	4298      	cmp	r0, r3
    ed78:	d32a      	bcc.n	edd0 <bt_conn_recv+0xa4>
	if (conn->rx->len > acl_total_len) {
    ed7a:	d95f      	bls.n	ee3c <bt_conn_recv+0x110>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
    ed7c:	466d      	mov	r5, sp
    ed7e:	b088      	sub	sp, #32
    ed80:	466a      	mov	r2, sp
    ed82:	61d3      	str	r3, [r2, #28]
    ed84:	2304      	movs	r3, #4
    ed86:	4933      	ldr	r1, [pc, #204]	; (ee54 <bt_conn_recv+0x128>)
    ed88:	e9c2 1005 	strd	r1, r0, [r2, #20]
    ed8c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    ed90:	482f      	ldr	r0, [pc, #188]	; (ee50 <bt_conn_recv+0x124>)
    ed92:	f842 3f10 	str.w	r3, [r2, #16]!
    ed96:	f009 f932 	bl	17ffe <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
    ed9a:	4620      	mov	r0, r4
    ed9c:	46ad      	mov	sp, r5
    ed9e:	f009 f934 	bl	1800a <bt_conn_reset_rx_state>
		return;
    eda2:	e015      	b.n	edd0 <bt_conn_recv+0xa4>
		if (!conn->rx) {
    eda4:	6920      	ldr	r0, [r4, #16]
    eda6:	b970      	cbnz	r0, edc6 <bt_conn_recv+0x9a>
			LOG_ERR("Unexpected L2CAP continuation");
    eda8:	4b2b      	ldr	r3, [pc, #172]	; (ee58 <bt_conn_recv+0x12c>)
    edaa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    edae:	617b      	str	r3, [r7, #20]
    edb0:	2302      	movs	r3, #2
    edb2:	4827      	ldr	r0, [pc, #156]	; (ee50 <bt_conn_recv+0x124>)
    edb4:	613b      	str	r3, [r7, #16]
    edb6:	f107 0210 	add.w	r2, r7, #16
    edba:	f009 f920 	bl	17ffe <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
    edbe:	4620      	mov	r0, r4
    edc0:	f009 f923 	bl	1800a <bt_conn_reset_rx_state>
    edc4:	e001      	b.n	edca <bt_conn_recv+0x9e>
		if (!buf->len) {
    edc6:	8a2e      	ldrh	r6, [r5, #16]
    edc8:	b936      	cbnz	r6, edd8 <bt_conn_recv+0xac>
		net_buf_unref(buf);
    edca:	4628      	mov	r0, r5
    edcc:	f002 fde6 	bl	1199c <net_buf_unref>
}
    edd0:	3718      	adds	r7, #24
    edd2:	46bd      	mov	sp, r7
    edd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    edd8:	300c      	adds	r0, #12
    edda:	f00a fa30 	bl	1923e <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    edde:	4286      	cmp	r6, r0
    ede0:	d912      	bls.n	ee08 <bt_conn_recv+0xdc>
			LOG_ERR("Not enough buffer space for L2CAP data");
    ede2:	4b1e      	ldr	r3, [pc, #120]	; (ee5c <bt_conn_recv+0x130>)
    ede4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ede8:	617b      	str	r3, [r7, #20]
    edea:	2302      	movs	r3, #2
    edec:	4818      	ldr	r0, [pc, #96]	; (ee50 <bt_conn_recv+0x124>)
    edee:	613b      	str	r3, [r7, #16]
    edf0:	f107 0210 	add.w	r2, r7, #16
    edf4:	f009 f903 	bl	17ffe <z_log_msg_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
    edf8:	2200      	movs	r2, #0
    edfa:	4620      	mov	r0, r4
    edfc:	6921      	ldr	r1, [r4, #16]
    edfe:	f000 fd91 	bl	f924 <bt_l2cap_recv>
			conn->rx = NULL;
    ee02:	2300      	movs	r3, #0
    ee04:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
    ee06:	e7e0      	b.n	edca <bt_conn_recv+0x9e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    ee08:	6920      	ldr	r0, [r4, #16]
    ee0a:	8a2a      	ldrh	r2, [r5, #16]
    ee0c:	68e9      	ldr	r1, [r5, #12]
    ee0e:	300c      	adds	r0, #12
    ee10:	f00a f9d7 	bl	191c2 <net_buf_simple_add_mem>
		net_buf_unref(buf);
    ee14:	4628      	mov	r0, r5
    ee16:	f002 fdc1 	bl	1199c <net_buf_unref>
		break;
    ee1a:	e7a4      	b.n	ed66 <bt_conn_recv+0x3a>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
    ee1c:	46e8      	mov	r8, sp
    ee1e:	b088      	sub	sp, #32
    ee20:	466a      	mov	r2, sp
    ee22:	4b0f      	ldr	r3, [pc, #60]	; (ee60 <bt_conn_recv+0x134>)
    ee24:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (flags) {
    ee28:	e9c2 3605 	strd	r3, r6, [r2, #20]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
    ee2c:	2303      	movs	r3, #3
    ee2e:	4808      	ldr	r0, [pc, #32]	; (ee50 <bt_conn_recv+0x124>)
    ee30:	f842 3f10 	str.w	r3, [r2, #16]!
    ee34:	f009 f8e3 	bl	17ffe <z_log_msg_static_create.constprop.0>
    ee38:	46c5      	mov	sp, r8
    ee3a:	e7c0      	b.n	edbe <bt_conn_recv+0x92>
	conn->rx = NULL;
    ee3c:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf, true);
    ee3e:	2201      	movs	r2, #1
    ee40:	4620      	mov	r0, r4
	conn->rx = NULL;
    ee42:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
    ee44:	f000 fd6e 	bl	f924 <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
    ee48:	e7c2      	b.n	edd0 <bt_conn_recv+0xa4>
    ee4a:	bf00      	nop
    ee4c:	0001cf5b 	.word	0x0001cf5b
    ee50:	0001b1d0 	.word	0x0001b1d0
    ee54:	0001cfdb 	.word	0x0001cfdb
    ee58:	0001cf78 	.word	0x0001cf78
    ee5c:	0001cf96 	.word	0x0001cf96
    ee60:	0001cfbd 	.word	0x0001cfbd

0000ee64 <bt_conn_send_cb>:
{
    ee64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ee68:	4698      	mov	r8, r3
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
    ee6a:	7acb      	ldrb	r3, [r1, #11]
{
    ee6c:	4606      	mov	r6, r0
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
    ee6e:	2b07      	cmp	r3, #7
{
    ee70:	460d      	mov	r5, r1
    ee72:	4617      	mov	r7, r2
    ee74:	b086      	sub	sp, #24
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
    ee76:	d80e      	bhi.n	ee96 <bt_conn_send_cb+0x32>
		LOG_ERR("not enough room in user_data");
    ee78:	4b2c      	ldr	r3, [pc, #176]	; (ef2c <bt_conn_send_cb+0xc8>)
    ee7a:	482d      	ldr	r0, [pc, #180]	; (ef30 <bt_conn_send_cb+0xcc>)
    ee7c:	9305      	str	r3, [sp, #20]
    ee7e:	2302      	movs	r3, #2
    ee80:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ee84:	aa04      	add	r2, sp, #16
    ee86:	9304      	str	r3, [sp, #16]
    ee88:	f009 f8b9 	bl	17ffe <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    ee8c:	f06f 0015 	mvn.w	r0, #21
}
    ee90:	b006      	add	sp, #24
    ee92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->state != BT_CONN_CONNECTED) {
    ee96:	7a83      	ldrb	r3, [r0, #10]
    ee98:	2b07      	cmp	r3, #7
    ee9a:	d00c      	beq.n	eeb6 <bt_conn_send_cb+0x52>
		LOG_ERR("not connected!");
    ee9c:	4b25      	ldr	r3, [pc, #148]	; (ef34 <bt_conn_send_cb+0xd0>)
    ee9e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    eea2:	9305      	str	r3, [sp, #20]
    eea4:	2302      	movs	r3, #2
    eea6:	4822      	ldr	r0, [pc, #136]	; (ef30 <bt_conn_send_cb+0xcc>)
    eea8:	aa04      	add	r2, sp, #16
    eeaa:	9304      	str	r3, [sp, #16]
    eeac:	f009 f8a7 	bl	17ffe <z_log_msg_static_create.constprop.0>
		return -ENOTCONN;
    eeb0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    eeb4:	e7ec      	b.n	ee90 <bt_conn_send_cb+0x2c>
	if (cb) {
    eeb6:	2a00      	cmp	r2, #0
    eeb8:	d033      	beq.n	ef22 <bt_conn_send_cb+0xbe>
	return z_impl_z_current_get();
    eeba:	f006 fdad 	bl	15a18 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    eebe:	4b1e      	ldr	r3, [pc, #120]	; (ef38 <bt_conn_send_cb+0xd4>)
    eec0:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    eec2:	481e      	ldr	r0, [pc, #120]	; (ef3c <bt_conn_send_cb+0xd8>)
    eec4:	bf07      	ittee	eq
    eec6:	2200      	moveq	r2, #0
    eec8:	2300      	moveq	r3, #0
    eeca:	f04f 32ff 	movne.w	r2, #4294967295
    eece:	f04f 33ff 	movne.w	r3, #4294967295
    eed2:	f006 f835 	bl	14f40 <z_impl_k_queue_get>
    eed6:	4604      	mov	r4, r0
		if (!tx) {
    eed8:	b328      	cbz	r0, ef26 <bt_conn_send_cb+0xc2>
		if (conn->state != BT_CONN_CONNECTED) {
    eeda:	7ab3      	ldrb	r3, [r6, #10]
    eedc:	2b07      	cmp	r3, #7
    eede:	d012      	beq.n	ef06 <bt_conn_send_cb+0xa2>
			LOG_WRN("Disconnected while allocating context");
    eee0:	4b17      	ldr	r3, [pc, #92]	; (ef40 <bt_conn_send_cb+0xdc>)
    eee2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    eee6:	9305      	str	r3, [sp, #20]
    eee8:	2302      	movs	r3, #2
    eeea:	4811      	ldr	r0, [pc, #68]	; (ef30 <bt_conn_send_cb+0xcc>)
    eeec:	aa04      	add	r2, sp, #16
    eeee:	9304      	str	r3, [sp, #16]
    eef0:	f009 f885 	bl	17ffe <z_log_msg_static_create.constprop.0>
	tx->cb = NULL;
    eef4:	2300      	movs	r3, #0
	k_fifo_put(&free_tx, tx);
    eef6:	4621      	mov	r1, r4
	tx->user_data = NULL;
    eef8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	k_fifo_put(&free_tx, tx);
    eefc:	480f      	ldr	r0, [pc, #60]	; (ef3c <bt_conn_send_cb+0xd8>)
	tx->pending_no_cb = 0U;
    eefe:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
    ef00:	f00b faf0 	bl	1a4e4 <k_queue_append>
}
    ef04:	e7d4      	b.n	eeb0 <bt_conn_send_cb+0x4c>
		tx->pending_no_cb = 0U;
    ef06:	2300      	movs	r3, #0
		tx->user_data = user_data;
    ef08:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    ef0c:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    ef0e:	61ac      	str	r4, [r5, #24]
	tx_data(buf)->is_cont = false;
    ef10:	2400      	movs	r4, #0
	net_buf_put(&conn->tx_queue, buf);
    ef12:	f106 0038 	add.w	r0, r6, #56	; 0x38
    ef16:	4629      	mov	r1, r5
	tx_data(buf)->is_cont = false;
    ef18:	772c      	strb	r4, [r5, #28]
	net_buf_put(&conn->tx_queue, buf);
    ef1a:	f00a f920 	bl	1915e <net_buf_put>
	return 0;
    ef1e:	4620      	mov	r0, r4
    ef20:	e7b6      	b.n	ee90 <bt_conn_send_cb+0x2c>
    ef22:	4614      	mov	r4, r2
    ef24:	e7f3      	b.n	ef0e <bt_conn_send_cb+0xaa>
			return -ENOBUFS;
    ef26:	f06f 0068 	mvn.w	r0, #104	; 0x68
    ef2a:	e7b1      	b.n	ee90 <bt_conn_send_cb+0x2c>
    ef2c:	0001cff6 	.word	0x0001cff6
    ef30:	0001b1d0 	.word	0x0001b1d0
    ef34:	0001d013 	.word	0x0001d013
    ef38:	20009610 	.word	0x20009610
    ef3c:	200085f8 	.word	0x200085f8
    ef40:	0001d022 	.word	0x0001d022

0000ef44 <bt_conn_prepare_events>:
{
    ef44:	b570      	push	{r4, r5, r6, lr}
    ef46:	4604      	mov	r4, r0
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
    ef48:	481f      	ldr	r0, [pc, #124]	; (efc8 <bt_conn_prepare_events+0x84>)
    ef4a:	f00b fee6 	bl	1ad1a <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    ef4e:	4620      	mov	r0, r4
    ef50:	2200      	movs	r2, #0
    ef52:	2101      	movs	r1, #1
    ef54:	4b1c      	ldr	r3, [pc, #112]	; (efc8 <bt_conn_prepare_events+0x84>)
    ef56:	f00b fec3 	bl	1ace0 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ef5a:	4b1c      	ldr	r3, [pc, #112]	; (efcc <bt_conn_prepare_events+0x88>)
		if (!conn_prepare_events(conn, &events[ev_count])) {
    ef5c:	f104 0014 	add.w	r0, r4, #20
    ef60:	e8d3 2faf 	lda	r2, [r3]
	if (!atomic_get(&conn->ref)) {
    ef64:	b90a      	cbnz	r2, ef6a <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    ef66:	2001      	movs	r0, #1
}
    ef68:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    ef6a:	f1a3 01bc 	sub.w	r1, r3, #188	; 0xbc
    ef6e:	f813 3cb2 	ldrb.w	r3, [r3, #-178]
    ef72:	b973      	cbnz	r3, ef92 <bt_conn_prepare_events+0x4e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ef74:	1d0b      	adds	r3, r1, #4
    ef76:	e8d3 2fef 	ldaex	r2, [r3]
    ef7a:	f022 0540 	bic.w	r5, r2, #64	; 0x40
    ef7e:	e8c3 5fe6 	stlex	r6, r5, [r3]
    ef82:	2e00      	cmp	r6, #0
    ef84:	d1f7      	bne.n	ef76 <bt_conn_prepare_events+0x32>
    ef86:	0653      	lsls	r3, r2, #25
    ef88:	d503      	bpl.n	ef92 <bt_conn_prepare_events+0x4e>
		conn_cleanup(conn);
    ef8a:	4608      	mov	r0, r1
    ef8c:	f009 f846 	bl	1801c <conn_cleanup>
		return -ENOTCONN;
    ef90:	e7e9      	b.n	ef66 <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
    ef92:	7a8b      	ldrb	r3, [r1, #10]
    ef94:	2b07      	cmp	r3, #7
    ef96:	d1e6      	bne.n	ef66 <bt_conn_prepare_events+0x22>
	if (bt_dev.le.acl_mtu) {
    ef98:	4b0d      	ldr	r3, [pc, #52]	; (efd0 <bt_conn_prepare_events+0x8c>)
    ef9a:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
    ef9e:	2a00      	cmp	r2, #0
    efa0:	d0e1      	beq.n	ef66 <bt_conn_prepare_events+0x22>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
    efa2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (packets_waiting && !buffers_available) {
    efa6:	6b89      	ldr	r1, [r1, #56]	; 0x38
    efa8:	b151      	cbz	r1, efc0 <bt_conn_prepare_events+0x7c>
    efaa:	b94a      	cbnz	r2, efc0 <bt_conn_prepare_events+0x7c>
		k_poll_event_init(&events[0],
    efac:	2102      	movs	r1, #2
    efae:	f503 7384 	add.w	r3, r3, #264	; 0x108
		k_poll_event_init(&events[0],
    efb2:	f00b fe95 	bl	1ace0 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    efb6:	2301      	movs	r3, #1
			ev_count++;
    efb8:	2002      	movs	r0, #2
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    efba:	f884 3020 	strb.w	r3, [r4, #32]
	return ev_count;
    efbe:	e7d3      	b.n	ef68 <bt_conn_prepare_events+0x24>
		k_poll_event_init(&events[0],
    efc0:	2200      	movs	r2, #0
    efc2:	2104      	movs	r1, #4
    efc4:	4b03      	ldr	r3, [pc, #12]	; (efd4 <bt_conn_prepare_events+0x90>)
    efc6:	e7f4      	b.n	efb2 <bt_conn_prepare_events+0x6e>
    efc8:	20008264 	.word	0x20008264
    efcc:	200093dc 	.word	0x200093dc
    efd0:	20008000 	.word	0x20008000
    efd4:	20009358 	.word	0x20009358

0000efd8 <bt_conn_lookup_handle>:
{
    efd8:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    efda:	2101      	movs	r1, #1
    efdc:	4801      	ldr	r0, [pc, #4]	; (efe4 <bt_conn_lookup_handle+0xc>)
    efde:	f009 b868 	b.w	180b2 <conn_lookup_handle>
    efe2:	bf00      	nop
    efe4:	20009320 	.word	0x20009320

0000efe8 <bt_conn_set_state>:
{
    efe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
    efec:	7a86      	ldrb	r6, [r0, #10]
{
    efee:	4604      	mov	r4, r0
	if (conn->state == state) {
    eff0:	428e      	cmp	r6, r1
{
    eff2:	460d      	mov	r5, r1
    eff4:	af00      	add	r7, sp, #0
	if (conn->state == state) {
    eff6:	d119      	bne.n	f02c <bt_conn_set_state+0x44>
	switch (state) {
    eff8:	2e08      	cmp	r6, #8
    effa:	bf98      	it	ls
    effc:	4b70      	ldrls	r3, [pc, #448]	; (f1c0 <bt_conn_set_state+0x1d8>)
		LOG_WRN("no transition %s", state2str(state));
    effe:	466c      	mov	r4, sp
    f000:	b088      	sub	sp, #32
    f002:	bf94      	ite	ls
    f004:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
	if (conn->state == state) {
    f008:	4b6e      	ldrhi	r3, [pc, #440]	; (f1c4 <bt_conn_set_state+0x1dc>)
		LOG_WRN("no transition %s", state2str(state));
    f00a:	466a      	mov	r2, sp
    f00c:	496e      	ldr	r1, [pc, #440]	; (f1c8 <bt_conn_set_state+0x1e0>)
    f00e:	e9c2 1305 	strd	r1, r3, [r2, #20]
    f012:	f44f 7300 	mov.w	r3, #512	; 0x200
    f016:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
    f01a:	8393      	strh	r3, [r2, #28]
    f01c:	4b6b      	ldr	r3, [pc, #428]	; (f1cc <bt_conn_set_state+0x1e4>)
    f01e:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_WRN("no valid (%u) state was set", state);
    f022:	486b      	ldr	r0, [pc, #428]	; (f1d0 <bt_conn_set_state+0x1e8>)
    f024:	f008 ffeb 	bl	17ffe <z_log_msg_static_create.constprop.0>
    f028:	46a5      	mov	sp, r4
    f02a:	e04b      	b.n	f0c4 <bt_conn_set_state+0xdc>
	conn->state = state;
    f02c:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
    f02e:	b926      	cbnz	r6, f03a <bt_conn_set_state+0x52>
		if (conn->type != BT_CONN_TYPE_ISO) {
    f030:	7883      	ldrb	r3, [r0, #2]
    f032:	2b08      	cmp	r3, #8
    f034:	d001      	beq.n	f03a <bt_conn_set_state+0x52>
			bt_conn_ref(conn);
    f036:	f009 f814 	bl	18062 <bt_conn_ref>
	switch (conn->state) {
    f03a:	7aa3      	ldrb	r3, [r4, #10]
    f03c:	2b08      	cmp	r3, #8
    f03e:	f200 80ba 	bhi.w	f1b6 <bt_conn_set_state+0x1ce>
    f042:	e8df f003 	tbb	[pc, r3]
    f046:	0542      	.short	0x0542
    f048:	3f3f3f3f 	.word	0x3f3f3f3f
    f04c:	243f      	.short	0x243f
    f04e:	3f          	.byte	0x3f
    f04f:	00          	.byte	0x00
		tx->pending_no_cb = 0U;
    f050:	f04f 0800 	mov.w	r8, #0
	if (bt_dev.le.acl_mtu) {
    f054:	4d5f      	ldr	r5, [pc, #380]	; (f1d4 <bt_conn_set_state+0x1ec>)
	return NULL;
    f056:	f505 7684 	add.w	r6, r5, #264	; 0x108
	__asm__ volatile(
    f05a:	f04f 0220 	mov.w	r2, #32
    f05e:	f3ef 8311 	mrs	r3, BASEPRI
    f062:	f382 8812 	msr	BASEPRI_MAX, r2
    f066:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    f06a:	69e2      	ldr	r2, [r4, #28]
    f06c:	2a00      	cmp	r2, #0
    f06e:	d07d      	beq.n	f16c <bt_conn_set_state+0x184>
			conn->pending_no_cb--;
    f070:	3a01      	subs	r2, #1
    f072:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
    f074:	f383 8811 	msr	BASEPRI, r3
    f078:	f3bf 8f6f 	isb	sy
	if (bt_dev.le.acl_mtu) {
    f07c:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
	return NULL;
    f080:	2b00      	cmp	r3, #0
    f082:	bf14      	ite	ne
    f084:	4630      	movne	r0, r6
    f086:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
    f088:	f005 ff8e 	bl	14fa8 <z_impl_k_sem_give>
}
    f08c:	e7e5      	b.n	f05a <bt_conn_set_state+0x72>
		if (conn->type == BT_CONN_TYPE_SCO) {
    f08e:	78a3      	ldrb	r3, [r4, #2]
    f090:	2b04      	cmp	r3, #4
    f092:	d017      	beq.n	f0c4 <bt_conn_set_state+0xdc>
	z_impl_k_queue_init(queue);
    f094:	f104 0038 	add.w	r0, r4, #56	; 0x38
    f098:	f00b fa18 	bl	1a4cc <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    f09c:	2100      	movs	r1, #0
    f09e:	484e      	ldr	r0, [pc, #312]	; (f1d8 <bt_conn_set_state+0x1f0>)
    f0a0:	f006 ff8a 	bl	15fb8 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    f0a4:	2300      	movs	r3, #0
	list->tail = NULL;
    f0a6:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    f0aa:	78e3      	ldrb	r3, [r4, #3]
    f0ac:	2b01      	cmp	r3, #1
    f0ae:	d109      	bne.n	f0c4 <bt_conn_set_state+0xdc>
			conn->le.conn_param_retry_countdown =
    f0b0:	2303      	movs	r3, #3
			k_work_schedule(&conn->deferred_work,
    f0b2:	f44f 3220 	mov.w	r2, #163840	; 0x28000
			conn->le.conn_param_retry_countdown =
    f0b6:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
    f0ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
    f0be:	2300      	movs	r3, #0
    f0c0:	f006 f994 	bl	153ec <k_work_schedule>
}
    f0c4:	46bd      	mov	sp, r7
    f0c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
    f0ca:	78a3      	ldrb	r3, [r4, #2]
    f0cc:	2b04      	cmp	r3, #4
    f0ce:	d103      	bne.n	f0d8 <bt_conn_set_state+0xf0>
			bt_conn_unref(conn);
    f0d0:	4620      	mov	r0, r4
    f0d2:	f008 ffda 	bl	1808a <bt_conn_unref>
			break;
    f0d6:	e7f5      	b.n	f0c4 <bt_conn_set_state+0xdc>
		switch (old_state) {
    f0d8:	2e08      	cmp	r6, #8
    f0da:	d8f3      	bhi.n	f0c4 <bt_conn_set_state+0xdc>
    f0dc:	a301      	add	r3, pc, #4	; (adr r3, f0e4 <bt_conn_set_state+0xfc>)
    f0de:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
    f0e2:	bf00      	nop
    f0e4:	0000f155 	.word	0x0000f155
    f0e8:	0000f109 	.word	0x0000f109
    f0ec:	0000f147 	.word	0x0000f147
    f0f0:	0000f0d1 	.word	0x0000f0d1
    f0f4:	0000f0d1 	.word	0x0000f0d1
    f0f8:	0000f147 	.word	0x0000f147
    f0fc:	0000f147 	.word	0x0000f147
    f100:	0000f155 	.word	0x0000f155
    f104:	0000f155 	.word	0x0000f155
			tx_notify(conn);
    f108:	4620      	mov	r0, r4
    f10a:	f7ff fcaf 	bl	ea6c <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
    f10e:	78a3      	ldrb	r3, [r4, #2]
    f110:	2b01      	cmp	r3, #1
    f112:	d10a      	bne.n	f12a <bt_conn_set_state+0x142>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
    f114:	f104 0558 	add.w	r5, r4, #88	; 0x58
    f118:	4628      	mov	r0, r5
    f11a:	f00b facf 	bl	1a6bc <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
    f11e:	f010 0f0c 	tst.w	r0, #12
    f122:	d002      	beq.n	f12a <bt_conn_set_state+0x142>
				k_work_cancel_delayable(&conn->deferred_work);
    f124:	4628      	mov	r0, r5
    f126:	f00b facb 	bl	1a6c0 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    f12a:	3404      	adds	r4, #4
    f12c:	e8d4 3fef 	ldaex	r3, [r4]
    f130:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f134:	e8c4 3fe2 	stlex	r2, r3, [r4]
    f138:	2a00      	cmp	r2, #0
    f13a:	d1f7      	bne.n	f12c <bt_conn_set_state+0x144>
    f13c:	2100      	movs	r1, #0
    f13e:	4826      	ldr	r0, [pc, #152]	; (f1d8 <bt_conn_set_state+0x1f0>)
    f140:	f006 ff3a 	bl	15fb8 <z_impl_k_poll_signal_raise>
    f144:	e7be      	b.n	f0c4 <bt_conn_set_state+0xdc>
			if (conn->err) {
    f146:	7a63      	ldrb	r3, [r4, #9]
    f148:	2b00      	cmp	r3, #0
    f14a:	d0c1      	beq.n	f0d0 <bt_conn_set_state+0xe8>
				notify_connected(conn);
    f14c:	4620      	mov	r0, r4
    f14e:	f7ff fc5b 	bl	ea08 <notify_connected>
    f152:	e7bd      	b.n	f0d0 <bt_conn_set_state+0xe8>
			LOG_WRN("Invalid (%u) old state", state);
    f154:	466c      	mov	r4, sp
    f156:	b088      	sub	sp, #32
    f158:	466a      	mov	r2, sp
    f15a:	4b20      	ldr	r3, [pc, #128]	; (f1dc <bt_conn_set_state+0x1f4>)
		LOG_WRN("no valid (%u) state was set", state);
    f15c:	e9c2 3505 	strd	r3, r5, [r2, #20]
    f160:	2303      	movs	r3, #3
    f162:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    f166:	f842 3f10 	str.w	r3, [r2, #16]!
    f16a:	e75a      	b.n	f022 <bt_conn_set_state+0x3a>
	return list->head;
    f16c:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
    f16e:	b921      	cbnz	r1, f17a <bt_conn_set_state+0x192>
    f170:	f383 8811 	msr	BASEPRI, r3
    f174:	f3bf 8f6f 	isb	sy
		if (!node) {
    f178:	e7a4      	b.n	f0c4 <bt_conn_set_state+0xdc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    f17a:	69a0      	ldr	r0, [r4, #24]
	return node->next;
    f17c:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    f17e:	4281      	cmp	r1, r0
	list->tail = node;
    f180:	bf08      	it	eq
    f182:	61a2      	streq	r2, [r4, #24]
	list->head = node;
    f184:	6162      	str	r2, [r4, #20]
    f186:	f383 8811 	msr	BASEPRI, r3
    f18a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    f18e:	f04f 0220 	mov.w	r2, #32
    f192:	f3ef 8311 	mrs	r3, BASEPRI
    f196:	f382 8812 	msr	BASEPRI_MAX, r2
    f19a:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    f19e:	68ca      	ldr	r2, [r1, #12]
    f1a0:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    f1a2:	f8c1 800c 	str.w	r8, [r1, #12]
	__asm__ volatile(
    f1a6:	f383 8811 	msr	BASEPRI, r3
    f1aa:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
    f1ae:	4620      	mov	r0, r4
    f1b0:	f7ff fc8c 	bl	eacc <conn_tx_destroy>
    f1b4:	e762      	b.n	f07c <bt_conn_set_state+0x94>
		LOG_WRN("no valid (%u) state was set", state);
    f1b6:	466c      	mov	r4, sp
    f1b8:	b088      	sub	sp, #32
    f1ba:	466a      	mov	r2, sp
    f1bc:	4b08      	ldr	r3, [pc, #32]	; (f1e0 <bt_conn_set_state+0x1f8>)
    f1be:	e7cd      	b.n	f15c <bt_conn_set_state+0x174>
    f1c0:	0001b710 	.word	0x0001b710
    f1c4:	0001d048 	.word	0x0001d048
    f1c8:	0001d052 	.word	0x0001d052
    f1cc:	01000003 	.word	0x01000003
    f1d0:	0001b1d0 	.word	0x0001b1d0
    f1d4:	20008000 	.word	0x20008000
    f1d8:	20008264 	.word	0x20008264
    f1dc:	0001d063 	.word	0x0001d063
    f1e0:	0001d07a 	.word	0x0001d07a

0000f1e4 <bt_conn_index>:
		index = conn - acl_conns;
    f1e4:	4b03      	ldr	r3, [pc, #12]	; (f1f4 <bt_conn_index+0x10>)
    f1e6:	1ac0      	subs	r0, r0, r3
    f1e8:	4b03      	ldr	r3, [pc, #12]	; (f1f8 <bt_conn_index+0x14>)
    f1ea:	1180      	asrs	r0, r0, #6
    f1ec:	4358      	muls	r0, r3
}
    f1ee:	b2c0      	uxtb	r0, r0
    f1f0:	4770      	bx	lr
    f1f2:	bf00      	nop
    f1f4:	20009320 	.word	0x20009320
    f1f8:	aaaaaaab 	.word	0xaaaaaaab

0000f1fc <bt_conn_create_pdu_timeout>:
{
    f1fc:	b538      	push	{r3, r4, r5, lr}
    f1fe:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    f200:	4908      	ldr	r1, [pc, #32]	; (f224 <bt_conn_create_pdu_timeout+0x28>)
    f202:	2800      	cmp	r0, #0
    f204:	bf08      	it	eq
    f206:	4608      	moveq	r0, r1
    f208:	f009 ff75 	bl	190f6 <net_buf_alloc_fixed>
	if (!buf) {
    f20c:	4604      	mov	r4, r0
    f20e:	b918      	cbnz	r0, f218 <bt_conn_create_pdu_timeout+0x1c>
}
    f210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f214:	f7ff bc16 	b.w	ea44 <bt_conn_create_pdu_timeout.part.0>
	net_buf_simple_reserve(&buf->b, reserve);
    f218:	1d69      	adds	r1, r5, #5
    f21a:	300c      	adds	r0, #12
    f21c:	f009 ffc7 	bl	191ae <net_buf_simple_reserve>
    f220:	4620      	mov	r0, r4
    f222:	bd38      	pop	{r3, r4, r5, pc}
    f224:	2000863c 	.word	0x2000863c

0000f228 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
    f228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f22a:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    f22c:	1d03      	adds	r3, r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f22e:	e8d3 2faf 	lda	r2, [r3]
    f232:	0592      	lsls	r2, r2, #22
    f234:	d515      	bpl.n	f262 <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
    f236:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    f23a:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
    f23e:	4291      	cmp	r1, r2
    f240:	d80f      	bhi.n	f262 <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
    f242:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
    f246:	4291      	cmp	r1, r2
    f248:	d30b      	bcc.n	f262 <notify_le_param_updated+0x3a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
    f24a:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
    f24e:	4291      	cmp	r1, r2
    f250:	d107      	bne.n	f262 <notify_le_param_updated+0x3a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    f252:	e8d3 1fef 	ldaex	r1, [r3]
    f256:	f421 7100 	bic.w	r1, r1, #512	; 0x200
    f25a:	e8c3 1fe2 	stlex	r2, r1, [r3]
    f25e:	2a00      	cmp	r2, #0
    f260:	d1f7      	bne.n	f252 <notify_le_param_updated+0x2a>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    f262:	4b10      	ldr	r3, [pc, #64]	; (f2a4 <notify_le_param_updated+0x7c>)
    f264:	681d      	ldr	r5, [r3, #0]
    f266:	b925      	cbnz	r5, f272 <notify_le_param_updated+0x4a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    f268:	4d0f      	ldr	r5, [pc, #60]	; (f2a8 <notify_le_param_updated+0x80>)
    f26a:	4f10      	ldr	r7, [pc, #64]	; (f2ac <notify_le_param_updated+0x84>)
    f26c:	42bd      	cmp	r5, r7
    f26e:	d30c      	bcc.n	f28a <notify_le_param_updated+0x62>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
    f270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
    f272:	68ee      	ldr	r6, [r5, #12]
    f274:	b13e      	cbz	r6, f286 <notify_le_param_updated+0x5e>
			cb->le_param_updated(conn, conn->le.interval,
    f276:	4620      	mov	r0, r4
    f278:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    f27c:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    f280:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    f284:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    f286:	692d      	ldr	r5, [r5, #16]
    f288:	e7ed      	b.n	f266 <notify_le_param_updated+0x3e>
		if (cb->le_param_updated) {
    f28a:	68ee      	ldr	r6, [r5, #12]
    f28c:	b13e      	cbz	r6, f29e <notify_le_param_updated+0x76>
			cb->le_param_updated(conn, conn->le.interval,
    f28e:	4620      	mov	r0, r4
    f290:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    f294:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    f298:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    f29c:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    f29e:	3514      	adds	r5, #20
    f2a0:	e7e4      	b.n	f26c <notify_le_param_updated+0x44>
    f2a2:	bf00      	nop
    f2a4:	20009824 	.word	0x20009824
    f2a8:	0001b188 	.word	0x0001b188
    f2ac:	0001b188 	.word	0x0001b188

0000f2b0 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    f2b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f2b4:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    f2b6:	4608      	mov	r0, r1
{
    f2b8:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
    f2ba:	f008 fd53 	bl	17d64 <bt_le_conn_params_valid>
    f2be:	4605      	mov	r5, r0
    f2c0:	b918      	cbnz	r0, f2ca <le_param_req+0x1a>
		return false;
    f2c2:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
    f2c4:	4628      	mov	r0, r5
    f2c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    f2ca:	4b13      	ldr	r3, [pc, #76]	; (f318 <le_param_req+0x68>)
    f2cc:	681e      	ldr	r6, [r3, #0]
    f2ce:	b946      	cbnz	r6, f2e2 <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    f2d0:	4e12      	ldr	r6, [pc, #72]	; (f31c <le_param_req+0x6c>)
    f2d2:	f8df 804c 	ldr.w	r8, [pc, #76]	; f320 <le_param_req+0x70>
    f2d6:	4546      	cmp	r6, r8
    f2d8:	d2f4      	bcs.n	f2c4 <le_param_req+0x14>
		if (!cb->le_param_req) {
    f2da:	68b3      	ldr	r3, [r6, #8]
    f2dc:	b983      	cbnz	r3, f300 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    f2de:	3614      	adds	r6, #20
    f2e0:	e7f9      	b.n	f2d6 <le_param_req+0x26>
		if (!cb->le_param_req) {
    f2e2:	68b3      	ldr	r3, [r6, #8]
    f2e4:	b90b      	cbnz	r3, f2ea <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
    f2e6:	6936      	ldr	r6, [r6, #16]
    f2e8:	e7f1      	b.n	f2ce <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
    f2ea:	4621      	mov	r1, r4
    f2ec:	4638      	mov	r0, r7
    f2ee:	4798      	blx	r3
    f2f0:	2800      	cmp	r0, #0
    f2f2:	d0e6      	beq.n	f2c2 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    f2f4:	4620      	mov	r0, r4
    f2f6:	f008 fd35 	bl	17d64 <bt_le_conn_params_valid>
    f2fa:	2800      	cmp	r0, #0
    f2fc:	d1f3      	bne.n	f2e6 <le_param_req+0x36>
    f2fe:	e7e0      	b.n	f2c2 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
    f300:	4621      	mov	r1, r4
    f302:	4638      	mov	r0, r7
    f304:	4798      	blx	r3
    f306:	2800      	cmp	r0, #0
    f308:	d0db      	beq.n	f2c2 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    f30a:	4620      	mov	r0, r4
    f30c:	f008 fd2a 	bl	17d64 <bt_le_conn_params_valid>
    f310:	2800      	cmp	r0, #0
    f312:	d1e4      	bne.n	f2de <le_param_req+0x2e>
    f314:	e7d5      	b.n	f2c2 <le_param_req+0x12>
    f316:	bf00      	nop
    f318:	20009824 	.word	0x20009824
    f31c:	0001b188 	.word	0x0001b188
    f320:	0001b188 	.word	0x0001b188

0000f324 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
    f324:	4b02      	ldr	r3, [pc, #8]	; (f330 <bt_conn_cb_register+0xc>)
    f326:	681a      	ldr	r2, [r3, #0]
	callback_list = cb;
    f328:	6018      	str	r0, [r3, #0]
	cb->_next = callback_list;
    f32a:	6102      	str	r2, [r0, #16]
}
    f32c:	4770      	bx	lr
    f32e:	bf00      	nop
    f330:	20009824 	.word	0x20009824

0000f334 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    f334:	b570      	push	{r4, r5, r6, lr}
    f336:	4606      	mov	r6, r0
    f338:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    f33a:	4809      	ldr	r0, [pc, #36]	; (f360 <bt_conn_add_le+0x2c>)
    f33c:	2101      	movs	r1, #1
    f33e:	f7ff fcc7 	bl	ecd0 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
    f342:	4604      	mov	r4, r0
    f344:	b150      	cbz	r0, f35c <bt_conn_add_le+0x28>
		return NULL;
	}

	conn->id = id;
    f346:	7206      	strb	r6, [r0, #8]
    f348:	2207      	movs	r2, #7
    f34a:	4629      	mov	r1, r5
    f34c:	3088      	adds	r0, #136	; 0x88
    f34e:	f008 fc00 	bl	17b52 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    f352:	2301      	movs	r3, #1
    f354:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    f356:	4b03      	ldr	r3, [pc, #12]	; (f364 <bt_conn_add_le+0x30>)
    f358:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    f35c:	4620      	mov	r0, r4
    f35e:	bd70      	pop	{r4, r5, r6, pc}
    f360:	20009320 	.word	0x20009320
    f364:	00280018 	.word	0x00280018

0000f368 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    f368:	b570      	push	{r4, r5, r6, lr}
    f36a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    f36c:	480a      	ldr	r0, [pc, #40]	; (f398 <bt_conn_lookup_addr_le+0x30>)
{
    f36e:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    f370:	f008 fe77 	bl	18062 <bt_conn_ref>
    f374:	4604      	mov	r4, r0

		if (!conn) {
    f376:	b120      	cbz	r0, f382 <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    f378:	7883      	ldrb	r3, [r0, #2]
    f37a:	2b01      	cmp	r3, #1
    f37c:	d004      	beq.n	f388 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
    f37e:	f008 fe84 	bl	1808a <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    f382:	2400      	movs	r4, #0
}
    f384:	4620      	mov	r0, r4
    f386:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    f388:	4632      	mov	r2, r6
    f38a:	4629      	mov	r1, r5
    f38c:	f008 febc 	bl	18108 <bt_conn_is_peer_addr_le>
    f390:	2800      	cmp	r0, #0
    f392:	d1f7      	bne.n	f384 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
    f394:	4620      	mov	r0, r4
    f396:	e7f2      	b.n	f37e <bt_conn_lookup_addr_le+0x16>
    f398:	20009320 	.word	0x20009320

0000f39c <bt_conn_exists_le>:
{
    f39c:	b5b0      	push	{r4, r5, r7, lr}
    f39e:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    f3a0:	f7ff ffe2 	bl	f368 <bt_conn_lookup_addr_le>
	if (conn) {
    f3a4:	4604      	mov	r4, r0
    f3a6:	b1e8      	cbz	r0, f3e4 <bt_conn_exists_le+0x48>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
    f3a8:	7a83      	ldrb	r3, [r0, #10]
    f3aa:	466d      	mov	r5, sp
    f3ac:	2b08      	cmp	r3, #8
    f3ae:	bf98      	it	ls
    f3b0:	4a0d      	ldrls	r2, [pc, #52]	; (f3e8 <bt_conn_exists_le+0x4c>)
    f3b2:	b088      	sub	sp, #32
    f3b4:	bf94      	ite	ls
    f3b6:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
    f3ba:	4b0c      	ldrhi	r3, [pc, #48]	; (f3ec <bt_conn_exists_le+0x50>)
    f3bc:	466a      	mov	r2, sp
    f3be:	490c      	ldr	r1, [pc, #48]	; (f3f0 <bt_conn_exists_le+0x54>)
    f3c0:	480c      	ldr	r0, [pc, #48]	; (f3f4 <bt_conn_exists_le+0x58>)
    f3c2:	e9c2 1305 	strd	r1, r3, [r2, #20]
    f3c6:	f44f 7300 	mov.w	r3, #512	; 0x200
    f3ca:	8393      	strh	r3, [r2, #28]
    f3cc:	4b0a      	ldr	r3, [pc, #40]	; (f3f8 <bt_conn_exists_le+0x5c>)
    f3ce:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
    f3d2:	f842 3f10 	str.w	r3, [r2, #16]!
    f3d6:	f008 fe12 	bl	17ffe <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
    f3da:	4620      	mov	r0, r4
    f3dc:	46ad      	mov	sp, r5
    f3de:	f008 fe54 	bl	1808a <bt_conn_unref>
		return true;
    f3e2:	2001      	movs	r0, #1
}
    f3e4:	46bd      	mov	sp, r7
    f3e6:	bdb0      	pop	{r4, r5, r7, pc}
    f3e8:	0001b710 	.word	0x0001b710
    f3ec:	0001d048 	.word	0x0001d048
    f3f0:	0001d096 	.word	0x0001d096
    f3f4:	0001b1d0 	.word	0x0001b1d0
    f3f8:	01000003 	.word	0x01000003

0000f3fc <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    f3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f3fe:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    f400:	480e      	ldr	r0, [pc, #56]	; (f43c <bt_conn_lookup_state_le+0x40>)
{
    f402:	460e      	mov	r6, r1
    f404:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    f406:	f008 fe2c 	bl	18062 <bt_conn_ref>

		if (!conn) {
    f40a:	4604      	mov	r4, r0
    f40c:	b120      	cbz	r0, f418 <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    f40e:	7883      	ldrb	r3, [r0, #2]
    f410:	2b01      	cmp	r3, #1
    f412:	d003      	beq.n	f41c <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
    f414:	f008 fe39 	bl	1808a <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    f418:	2400      	movs	r4, #0
    f41a:	e00d      	b.n	f438 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    f41c:	b136      	cbz	r6, f42c <bt_conn_lookup_state_le+0x30>
    f41e:	4632      	mov	r2, r6
    f420:	4629      	mov	r1, r5
    f422:	f008 fe71 	bl	18108 <bt_conn_is_peer_addr_le>
    f426:	b908      	cbnz	r0, f42c <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
    f428:	4620      	mov	r0, r4
    f42a:	e7f3      	b.n	f414 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
    f42c:	7aa3      	ldrb	r3, [r4, #10]
    f42e:	42bb      	cmp	r3, r7
    f430:	d1fa      	bne.n	f428 <bt_conn_lookup_state_le+0x2c>
    f432:	7a23      	ldrb	r3, [r4, #8]
    f434:	42ab      	cmp	r3, r5
    f436:	d1f7      	bne.n	f428 <bt_conn_lookup_state_le+0x2c>
}
    f438:	4620      	mov	r0, r4
    f43a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f43c:	20009320 	.word	0x20009320

0000f440 <send_conn_le_param_update>:
{
    f440:	b538      	push	{r3, r4, r5, lr}
    f442:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    f444:	4608      	mov	r0, r1
{
    f446:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    f448:	f008 fc8c 	bl	17d64 <bt_le_conn_params_valid>
    f44c:	b338      	cbz	r0, f49e <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    f44e:	4b15      	ldr	r3, [pc, #84]	; (f4a4 <send_conn_le_param_update+0x64>)
    f450:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
    f454:	0799      	lsls	r1, r3, #30
    f456:	d407      	bmi.n	f468 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
    f458:	78e3      	ldrb	r3, [r4, #3]
    f45a:	b173      	cbz	r3, f47a <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
    f45c:	4629      	mov	r1, r5
    f45e:	4620      	mov	r0, r4
}
    f460:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    f464:	f000 ba9c 	b.w	f9a0 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    f468:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
    f46c:	079a      	lsls	r2, r3, #30
    f46e:	d5f3      	bpl.n	f458 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f470:	1d23      	adds	r3, r4, #4
    f472:	e8d3 3faf 	lda	r3, [r3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    f476:	055b      	lsls	r3, r3, #21
    f478:	d4ee      	bmi.n	f458 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    f47a:	4629      	mov	r1, r5
    f47c:	4620      	mov	r0, r4
    f47e:	f008 fe63 	bl	18148 <bt_conn_le_conn_update>
		if (rc == 0) {
    f482:	b958      	cbnz	r0, f49c <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
    f484:	882b      	ldrh	r3, [r5, #0]
    f486:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
    f48a:	886b      	ldrh	r3, [r5, #2]
    f48c:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
    f490:	88ab      	ldrh	r3, [r5, #4]
    f492:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    f496:	88eb      	ldrh	r3, [r5, #6]
    f498:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    f49c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    f49e:	f06f 0015 	mvn.w	r0, #21
    f4a2:	e7fb      	b.n	f49c <send_conn_le_param_update+0x5c>
    f4a4:	20008000 	.word	0x20008000

0000f4a8 <deferred_work>:
{
    f4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f4ac:	b082      	sub	sp, #8
	if (conn->state == BT_CONN_DISCONNECTED) {
    f4ae:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
    f4b2:	4604      	mov	r4, r0
    f4b4:	af00      	add	r7, sp, #0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
    f4b6:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    f4ba:	bb0b      	cbnz	r3, f500 <deferred_work+0x58>
		bt_l2cap_disconnected(conn);
    f4bc:	4630      	mov	r0, r6
    f4be:	f008 fea0 	bl	18202 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    f4c2:	4b38      	ldr	r3, [pc, #224]	; (f5a4 <deferred_work+0xfc>)
    f4c4:	681d      	ldr	r5, [r3, #0]
    f4c6:	b95d      	cbnz	r5, f4e0 <deferred_work+0x38>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    f4c8:	4d37      	ldr	r5, [pc, #220]	; (f5a8 <deferred_work+0x100>)
    f4ca:	f8df 80e0 	ldr.w	r8, [pc, #224]	; f5ac <deferred_work+0x104>
    f4ce:	4545      	cmp	r5, r8
    f4d0:	d30e      	bcc.n	f4f0 <deferred_work+0x48>
		bt_conn_unref(conn);
    f4d2:	4630      	mov	r0, r6
    f4d4:	f008 fdd9 	bl	1808a <bt_conn_unref>
}
    f4d8:	3708      	adds	r7, #8
    f4da:	46bd      	mov	sp, r7
    f4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cb->disconnected) {
    f4e0:	686b      	ldr	r3, [r5, #4]
    f4e2:	b11b      	cbz	r3, f4ec <deferred_work+0x44>
			cb->disconnected(conn, conn->err);
    f4e4:	4630      	mov	r0, r6
    f4e6:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    f4ea:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    f4ec:	692d      	ldr	r5, [r5, #16]
    f4ee:	e7ea      	b.n	f4c6 <deferred_work+0x1e>
		if (cb->disconnected) {
    f4f0:	686b      	ldr	r3, [r5, #4]
    f4f2:	b11b      	cbz	r3, f4fc <deferred_work+0x54>
			cb->disconnected(conn, conn->err);
    f4f4:	4630      	mov	r0, r6
    f4f6:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    f4fa:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    f4fc:	3514      	adds	r5, #20
    f4fe:	e7e6      	b.n	f4ce <deferred_work+0x26>
	if (conn->type != BT_CONN_TYPE_LE) {
    f500:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    f504:	2b01      	cmp	r3, #1
    f506:	d1e7      	bne.n	f4d8 <deferred_work+0x30>
	if (atomic_test_and_clear_bit(conn->flags,
    f508:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    f50c:	e8d5 3fef 	ldaex	r3, [r5]
    f510:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    f514:	e8c5 2fe1 	stlex	r1, r2, [r5]
    f518:	2900      	cmp	r1, #0
    f51a:	d1f7      	bne.n	f50c <deferred_work+0x64>
    f51c:	0599      	lsls	r1, r3, #22
    f51e:	d529      	bpl.n	f574 <deferred_work+0xcc>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    f520:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		err = send_conn_le_param_update(conn, param);
    f522:	4639      	mov	r1, r7
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    f524:	603b      	str	r3, [r7, #0]
    f526:	6d23      	ldr	r3, [r4, #80]	; 0x50
		err = send_conn_le_param_update(conn, param);
    f528:	4630      	mov	r0, r6
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    f52a:	607b      	str	r3, [r7, #4]
		err = send_conn_le_param_update(conn, param);
    f52c:	f7ff ff88 	bl	f440 <send_conn_le_param_update>
		if (!err) {
    f530:	b980      	cbnz	r0, f554 <deferred_work+0xac>
    f532:	e8d5 3fef 	ldaex	r3, [r5]
    f536:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    f53a:	e8c5 3fe2 	stlex	r2, r3, [r5]
    f53e:	2a00      	cmp	r2, #0
    f540:	d1f7      	bne.n	f532 <deferred_work+0x8a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    f542:	e8d5 3fef 	ldaex	r3, [r5]
    f546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f54a:	e8c5 3fe2 	stlex	r2, r3, [r5]
    f54e:	2a00      	cmp	r2, #0
    f550:	d0c2      	beq.n	f4d8 <deferred_work+0x30>
    f552:	e7f6      	b.n	f542 <deferred_work+0x9a>
			LOG_WRN("Send LE param update failed (err %d)", err);
    f554:	466c      	mov	r4, sp
    f556:	b088      	sub	sp, #32
    f558:	466a      	mov	r2, sp
    f55a:	4b15      	ldr	r3, [pc, #84]	; (f5b0 <deferred_work+0x108>)
			LOG_WRN("Send auto LE param update failed (err %d)",
    f55c:	e9c2 3005 	strd	r3, r0, [r2, #20]
    f560:	2303      	movs	r3, #3
    f562:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    f566:	4813      	ldr	r0, [pc, #76]	; (f5b4 <deferred_work+0x10c>)
    f568:	f842 3f10 	str.w	r3, [r2, #16]!
    f56c:	f008 fd47 	bl	17ffe <z_log_msg_static_create.constprop.0>
    f570:	46a5      	mov	sp, r4
    f572:	e7e6      	b.n	f542 <deferred_work+0x9a>
		param = BT_LE_CONN_PARAM(
    f574:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
    f578:	4a0f      	ldr	r2, [pc, #60]	; (f5b8 <deferred_work+0x110>)
		err = send_conn_le_param_update(conn, param);
    f57a:	4639      	mov	r1, r7
    f57c:	4630      	mov	r0, r6
		param = BT_LE_CONN_PARAM(
    f57e:	e9c7 2300 	strd	r2, r3, [r7]
		err = send_conn_le_param_update(conn, param);
    f582:	f7ff ff5d 	bl	f440 <send_conn_le_param_update>
		if (!err) {
    f586:	b940      	cbnz	r0, f59a <deferred_work+0xf2>
    f588:	e8d5 3fef 	ldaex	r3, [r5]
    f58c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    f590:	e8c5 3fe2 	stlex	r2, r3, [r5]
    f594:	2a00      	cmp	r2, #0
    f596:	d0d4      	beq.n	f542 <deferred_work+0x9a>
    f598:	e7f6      	b.n	f588 <deferred_work+0xe0>
			LOG_WRN("Send auto LE param update failed (err %d)",
    f59a:	466c      	mov	r4, sp
    f59c:	b088      	sub	sp, #32
    f59e:	466a      	mov	r2, sp
    f5a0:	4b06      	ldr	r3, [pc, #24]	; (f5bc <deferred_work+0x114>)
    f5a2:	e7db      	b.n	f55c <deferred_work+0xb4>
    f5a4:	20009824 	.word	0x20009824
    f5a8:	0001b188 	.word	0x0001b188
    f5ac:	0001b188 	.word	0x0001b188
    f5b0:	0001d0b9 	.word	0x0001d0b9
    f5b4:	0001b1d0 	.word	0x0001b1d0
    f5b8:	00280018 	.word	0x00280018
    f5bc:	0001d0de 	.word	0x0001d0de

0000f5c0 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
    f5c0:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    f5c2:	4801      	ldr	r0, [pc, #4]	; (f5c8 <bt_conn_create_frag_timeout+0x8>)
    f5c4:	f7ff be1a 	b.w	f1fc <bt_conn_create_pdu_timeout>
    f5c8:	200086c0 	.word	0x200086c0

0000f5cc <bt_conn_process_tx>:
{
    f5cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    f5d0:	7a83      	ldrb	r3, [r0, #10]
{
    f5d2:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    f5d4:	b973      	cbnz	r3, f5f4 <bt_conn_process_tx+0x28>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    f5d6:	1d03      	adds	r3, r0, #4
    f5d8:	e8d3 2fef 	ldaex	r2, [r3]
    f5dc:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    f5e0:	e8c3 1fe4 	stlex	r4, r1, [r3]
    f5e4:	2c00      	cmp	r4, #0
    f5e6:	d1f7      	bne.n	f5d8 <bt_conn_process_tx+0xc>
    f5e8:	0653      	lsls	r3, r2, #25
    f5ea:	d503      	bpl.n	f5f4 <bt_conn_process_tx+0x28>
}
    f5ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		conn_cleanup(conn);
    f5f0:	f008 bd14 	b.w	1801c <conn_cleanup>
	return z_impl_k_queue_peek_head(queue);
    f5f4:	f105 0038 	add.w	r0, r5, #56	; 0x38
    f5f8:	f00a ff89 	bl	1a50e <z_impl_k_queue_peek_head>
	BT_ASSERT(buf);
    f5fc:	4604      	mov	r4, r0
    f5fe:	b960      	cbnz	r0, f61a <bt_conn_process_tx+0x4e>
    f600:	f44f 735d 	mov.w	r3, #884	; 0x374
    f604:	4a32      	ldr	r2, [pc, #200]	; (f6d0 <bt_conn_process_tx+0x104>)
    f606:	4933      	ldr	r1, [pc, #204]	; (f6d4 <bt_conn_process_tx+0x108>)
    f608:	4833      	ldr	r0, [pc, #204]	; (f6d8 <bt_conn_process_tx+0x10c>)
    f60a:	f007 f8c9 	bl	167a0 <assert_print>
    f60e:	4040      	eors	r0, r0
    f610:	f380 8811 	msr	BASEPRI, r0
    f614:	f04f 0003 	mov.w	r0, #3
    f618:	df02      	svc	2
	buf = net_buf_ref(buf);
    f61a:	4620      	mov	r0, r4
    f61c:	f009 fda1 	bl	19162 <net_buf_ref>
	return bt_dev.le.acl_mtu;
    f620:	f8df 90b8 	ldr.w	r9, [pc, #184]	; f6dc <bt_conn_process_tx+0x110>
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
    f624:	8a02      	ldrh	r2, [r0, #16]
    f626:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
	buf = net_buf_ref(buf);
    f62a:	4604      	mov	r4, r0
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
    f62c:	429a      	cmp	r2, r3
    f62e:	7f02      	ldrb	r2, [r0, #28]
    f630:	d807      	bhi.n	f642 <bt_conn_process_tx+0x76>
    f632:	b932      	cbnz	r2, f642 <bt_conn_process_tx+0x76>
		return send_frag(conn, buf, NULL, FRAG_SINGLE);
    f634:	2302      	movs	r3, #2
	return send_frag(conn, buf, NULL, FRAG_END);
    f636:	4621      	mov	r1, r4
    f638:	4628      	mov	r0, r5
    f63a:	f7ff fa5d 	bl	eaf8 <send_frag>
    f63e:	4606      	mov	r6, r0
    f640:	e030      	b.n	f6a4 <bt_conn_process_tx+0xd8>
	if (tx_data(buf)->is_cont) {
    f642:	4617      	mov	r7, r2
		frag = bt_conn_create_frag(0);
    f644:	f04f 0a00 	mov.w	sl, #0
	while (buf->len > conn_mtu(conn)) {
    f648:	8a22      	ldrh	r2, [r4, #16]
    f64a:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
    f64e:	429a      	cmp	r2, r3
    f650:	d804      	bhi.n	f65c <bt_conn_process_tx+0x90>
	tx_data(buf)->is_cont = true;
    f652:	2301      	movs	r3, #1
	return send_frag(conn, buf, NULL, FRAG_END);
    f654:	2200      	movs	r2, #0
	tx_data(buf)->is_cont = true;
    f656:	7723      	strb	r3, [r4, #28]
	return send_frag(conn, buf, NULL, FRAG_END);
    f658:	2303      	movs	r3, #3
    f65a:	e7ec      	b.n	f636 <bt_conn_process_tx+0x6a>
		frag = bt_conn_create_frag(0);
    f65c:	f04f 33ff 	mov.w	r3, #4294967295
    f660:	f04f 32ff 	mov.w	r2, #4294967295
    f664:	2000      	movs	r0, #0
    f666:	f7ff ffab 	bl	f5c0 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    f66a:	7aab      	ldrb	r3, [r5, #10]
		frag = bt_conn_create_frag(0);
    f66c:	4680      	mov	r8, r0
	if (conn->state != BT_CONN_CONNECTED) {
    f66e:	2b07      	cmp	r3, #7
    f670:	d006      	beq.n	f680 <bt_conn_process_tx+0xb4>
		net_buf_unref(frag);
    f672:	f002 f993 	bl	1199c <net_buf_unref>
	net_buf_unref(buf);
    f676:	4620      	mov	r0, r4
}
    f678:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	net_buf_unref(buf);
    f67c:	f002 b98e 	b.w	1199c <net_buf_unref>
		err = send_frag(conn, buf, frag, flags);
    f680:	4602      	mov	r2, r0
	tx_data(frag)->tx = NULL;
    f682:	f8c0 a018 	str.w	sl, [r0, #24]
	tx_data(frag)->is_cont = false;
    f686:	f880 a01c 	strb.w	sl, [r0, #28]
		err = send_frag(conn, buf, frag, flags);
    f68a:	463b      	mov	r3, r7
    f68c:	4621      	mov	r1, r4
    f68e:	4628      	mov	r0, r5
    f690:	f7ff fa32 	bl	eaf8 <send_frag>
		if (err) {
    f694:	4606      	mov	r6, r0
    f696:	b1b8      	cbz	r0, f6c8 <bt_conn_process_tx+0xfc>
			tx_data(buf)->is_cont = flags != FRAG_START;
    f698:	f007 0701 	and.w	r7, r7, #1
			net_buf_unref(frag);
    f69c:	4640      	mov	r0, r8
			tx_data(buf)->is_cont = flags != FRAG_START;
    f69e:	7727      	strb	r7, [r4, #28]
			net_buf_unref(frag);
    f6a0:	f002 f97c 	bl	1199c <net_buf_unref>
	net_buf_unref(buf);
    f6a4:	4620      	mov	r0, r4
    f6a6:	f002 f979 	bl	1199c <net_buf_unref>
	if (err  == -EIO) {
    f6aa:	3605      	adds	r6, #5
    f6ac:	d10e      	bne.n	f6cc <bt_conn_process_tx+0x100>
		tx_data(buf)->tx = NULL;
    f6ae:	2300      	movs	r3, #0
		struct bt_conn_tx *tx = tx_data(buf)->tx;
    f6b0:	69a6      	ldr	r6, [r4, #24]
		net_buf_unref(buf);
    f6b2:	4620      	mov	r0, r4
		tx_data(buf)->tx = NULL;
    f6b4:	61a3      	str	r3, [r4, #24]
		net_buf_unref(buf);
    f6b6:	f002 f971 	bl	1199c <net_buf_unref>
		if (tx) {
    f6ba:	b13e      	cbz	r6, f6cc <bt_conn_process_tx+0x100>
			conn_tx_destroy(conn, tx);
    f6bc:	4631      	mov	r1, r6
    f6be:	4628      	mov	r0, r5
}
    f6c0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			conn_tx_destroy(conn, tx);
    f6c4:	f7ff ba02 	b.w	eacc <conn_tx_destroy>
		flags = FRAG_CONT;
    f6c8:	2701      	movs	r7, #1
    f6ca:	e7bd      	b.n	f648 <bt_conn_process_tx+0x7c>
}
    f6cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f6d0:	0001d108 	.word	0x0001d108
    f6d4:	0001d6ae 	.word	0x0001d6ae
    f6d8:	0001c6b8 	.word	0x0001c6b8
    f6dc:	20008000 	.word	0x20008000

0000f6e0 <bt_conn_lookup_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
    f6e0:	b910      	cbnz	r0, f6e8 <bt_conn_lookup_index+0x8>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
    f6e2:	4802      	ldr	r0, [pc, #8]	; (f6ec <bt_conn_lookup_index+0xc>)
    f6e4:	f008 bcbd 	b.w	18062 <bt_conn_ref>
}
    f6e8:	2000      	movs	r0, #0
    f6ea:	4770      	bx	lr
    f6ec:	20009320 	.word	0x20009320

0000f6f0 <bt_conn_init>:

int bt_conn_init(void)
{
    f6f0:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
    f6f2:	480c      	ldr	r0, [pc, #48]	; (f724 <bt_conn_init+0x34>)
    f6f4:	f00a feea 	bl	1a4cc <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    f6f8:	490b      	ldr	r1, [pc, #44]	; (f728 <bt_conn_init+0x38>)
    f6fa:	480a      	ldr	r0, [pc, #40]	; (f724 <bt_conn_init+0x34>)
    f6fc:	f00a fef2 	bl	1a4e4 <k_queue_append>
    f700:	490a      	ldr	r1, [pc, #40]	; (f72c <bt_conn_init+0x3c>)
    f702:	4808      	ldr	r0, [pc, #32]	; (f724 <bt_conn_init+0x34>)
    f704:	f00a feee 	bl	1a4e4 <k_queue_append>
    f708:	4909      	ldr	r1, [pc, #36]	; (f730 <bt_conn_init+0x40>)
    f70a:	4806      	ldr	r0, [pc, #24]	; (f724 <bt_conn_init+0x34>)
    f70c:	f00a feea 	bl	1a4e4 <k_queue_append>
	}

	bt_att_init();
    f710:	f001 f8c2 	bl	10898 <bt_att_init>

	err = bt_smp_init();
    f714:	f009 fcec 	bl	190f0 <bt_smp_init>
	if (err) {
    f718:	4604      	mov	r4, r0
    f71a:	b908      	cbnz	r0, f720 <bt_conn_init+0x30>
		return err;
	}

	bt_l2cap_init();
    f71c:	f008 fdae 	bl	1827c <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    f720:	4620      	mov	r0, r4
    f722:	bd10      	pop	{r4, pc}
    f724:	200085f8 	.word	0x200085f8
    f728:	200097f4 	.word	0x200097f4
    f72c:	20009804 	.word	0x20009804
    f730:	20009814 	.word	0x20009814

0000f734 <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    f734:	b580      	push	{r7, lr}
    f736:	af00      	add	r7, sp, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
    f738:	b088      	sub	sp, #32
    f73a:	466a      	mov	r2, sp
    f73c:	4b06      	ldr	r3, [pc, #24]	; (f758 <l2cap_create_le_sig_pdu.part.0+0x24>)
    f73e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f742:	e9c2 3005 	strd	r3, r0, [r2, #20]
    f746:	2303      	movs	r3, #3
    f748:	4804      	ldr	r0, [pc, #16]	; (f75c <l2cap_create_le_sig_pdu.part.0+0x28>)
    f74a:	f842 3f10 	str.w	r3, [r2, #16]!
    f74e:	f008 fd24 	bl	1819a <z_log_msg_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
    f752:	2000      	movs	r0, #0
    f754:	46bd      	mov	sp, r7
    f756:	bd80      	pop	{r7, pc}
    f758:	0001d1b1 	.word	0x0001d1b1
    f75c:	0001b208 	.word	0x0001b208

0000f760 <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
    f760:	b580      	push	{r7, lr}
    f762:	af00      	add	r7, sp, #0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);
    f764:	b088      	sub	sp, #32
    f766:	466a      	mov	r2, sp
    f768:	4b07      	ldr	r3, [pc, #28]	; (f788 <l2cap_accept.part.0+0x28>)
    f76a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f76e:	e9c2 3005 	strd	r3, r0, [r2, #20]
    f772:	2303      	movs	r3, #3
    f774:	4805      	ldr	r0, [pc, #20]	; (f78c <l2cap_accept.part.0+0x2c>)
    f776:	f842 3f10 	str.w	r3, [r2, #16]!
    f77a:	f008 fd0e 	bl	1819a <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
    f77e:	f06f 000b 	mvn.w	r0, #11
    f782:	46bd      	mov	sp, r7
    f784:	bd80      	pop	{r7, pc}
    f786:	bf00      	nop
    f788:	0001d1d9 	.word	0x0001d1d9
    f78c:	0001b208 	.word	0x0001b208

0000f790 <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
    f790:	4b04      	ldr	r3, [pc, #16]	; (f7a4 <l2cap_accept+0x14>)
    f792:	681a      	ldr	r2, [r3, #0]
    f794:	b10a      	cbz	r2, f79a <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    f796:	f7ff bfe3 	b.w	f760 <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
    f79a:	4803      	ldr	r0, [pc, #12]	; (f7a8 <l2cap_accept+0x18>)
    f79c:	6058      	str	r0, [r3, #4]
}
    f79e:	4610      	mov	r0, r2
		*chan = &l2cap->chan.chan;
    f7a0:	600b      	str	r3, [r1, #0]
}
    f7a2:	4770      	bx	lr
    f7a4:	20009828 	.word	0x20009828
    f7a8:	0001b754 	.word	0x0001b754

0000f7ac <bt_l2cap_connected>:
{
    f7ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f7ae:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    f7b0:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    f7b2:	4d1f      	ldr	r5, [pc, #124]	; (f830 <bt_l2cap_connected+0x84>)
    f7b4:	4f1f      	ldr	r7, [pc, #124]	; (f834 <bt_l2cap_connected+0x88>)
    f7b6:	42bd      	cmp	r5, r7
    f7b8:	d301      	bcc.n	f7be <bt_l2cap_connected+0x12>
}
    f7ba:	b003      	add	sp, #12
    f7bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
    f7be:	4620      	mov	r0, r4
    f7c0:	686b      	ldr	r3, [r5, #4]
    f7c2:	a901      	add	r1, sp, #4
    f7c4:	4798      	blx	r3
    f7c6:	2800      	cmp	r0, #0
    f7c8:	db2c      	blt.n	f824 <bt_l2cap_connected+0x78>
		le_chan = BT_L2CAP_LE_CHAN(chan);
    f7ca:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
    f7cc:	882a      	ldrh	r2, [r5, #0]
    f7ce:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
    f7d0:	849a      	strh	r2, [r3, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    f7d2:	68a8      	ldr	r0, [r5, #8]
    f7d4:	f103 0210 	add.w	r2, r3, #16
    f7d8:	e8d2 1fef 	ldaex	r1, [r2]
    f7dc:	e8c2 6fec 	stlex	ip, r6, [r2]
    f7e0:	f1bc 0f00 	cmp.w	ip, #0
    f7e4:	d1f8      	bne.n	f7d8 <bt_l2cap_connected+0x2c>
	parent->next = child;
    f7e6:	609e      	str	r6, [r3, #8]
	return list->tail;
    f7e8:	6d61      	ldr	r1, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
    f7ea:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
    f7ee:	b9d9      	cbnz	r1, f828 <bt_l2cap_connected+0x7c>
	list->head = node;
    f7f0:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
	chan->conn = conn;
    f7f4:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
    f7f6:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
    f7f8:	9801      	ldr	r0, [sp, #4]
    f7fa:	6843      	ldr	r3, [r0, #4]
    f7fc:	681b      	ldr	r3, [r3, #0]
    f7fe:	b103      	cbz	r3, f802 <bt_l2cap_connected+0x56>
			chan->ops->connected(chan);
    f800:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    f802:	9b01      	ldr	r3, [sp, #4]
    f804:	3310      	adds	r3, #16
    f806:	e8d3 1fef 	ldaex	r1, [r3]
    f80a:	f041 0101 	orr.w	r1, r1, #1
    f80e:	e8c3 1fe2 	stlex	r2, r1, [r3]
    f812:	2a00      	cmp	r2, #0
    f814:	d1f7      	bne.n	f806 <bt_l2cap_connected+0x5a>
		if (chan->ops->status) {
    f816:	9801      	ldr	r0, [sp, #4]
    f818:	6843      	ldr	r3, [r0, #4]
    f81a:	69db      	ldr	r3, [r3, #28]
    f81c:	b113      	cbz	r3, f824 <bt_l2cap_connected+0x78>
			chan->ops->status(chan, chan->status);
    f81e:	f100 0110 	add.w	r1, r0, #16
    f822:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    f824:	350c      	adds	r5, #12
    f826:	e7c6      	b.n	f7b6 <bt_l2cap_connected+0xa>
	parent->next = child;
    f828:	600a      	str	r2, [r1, #0]
	list->tail = node;
    f82a:	6562      	str	r2, [r4, #84]	; 0x54
}
    f82c:	e7e2      	b.n	f7f4 <bt_l2cap_connected+0x48>
    f82e:	bf00      	nop
    f830:	0001b164 	.word	0x0001b164
    f834:	0001b188 	.word	0x0001b188

0000f838 <l2cap_recv>:
{
    f838:	b5f0      	push	{r4, r5, r6, r7, lr}
    f83a:	b089      	sub	sp, #36	; 0x24
	if (buf->len < sizeof(*hdr)) {
    f83c:	8a0b      	ldrh	r3, [r1, #16]
{
    f83e:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
    f840:	2b03      	cmp	r3, #3
{
    f842:	460d      	mov	r5, r1
    f844:	af02      	add	r7, sp, #8
	if (buf->len < sizeof(*hdr)) {
    f846:	d80b      	bhi.n	f860 <l2cap_recv+0x28>
		LOG_ERR("Too small L2CAP signaling PDU");
    f848:	4b30      	ldr	r3, [pc, #192]	; (f90c <l2cap_recv+0xd4>)
		LOG_ERR("Invalid ident value in L2CAP PDU");
    f84a:	617b      	str	r3, [r7, #20]
    f84c:	2302      	movs	r3, #2
    f84e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f852:	482f      	ldr	r0, [pc, #188]	; (f910 <l2cap_recv+0xd8>)
    f854:	613b      	str	r3, [r7, #16]
    f856:	f107 0210 	add.w	r2, r7, #16
    f85a:	f008 fc9e 	bl	1819a <z_log_msg_static_create.constprop.0>
		return 0;
    f85e:	e019      	b.n	f894 <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
    f860:	2104      	movs	r1, #4
    f862:	f105 000c 	add.w	r0, r5, #12
    f866:	f009 fcd6 	bl	19216 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    f86a:	8a29      	ldrh	r1, [r5, #16]
	len = sys_le16_to_cpu(hdr->len);
    f86c:	8843      	ldrh	r3, [r0, #2]
    f86e:	4604      	mov	r4, r0
	if (buf->len != len) {
    f870:	4299      	cmp	r1, r3
    f872:	d013      	beq.n	f89c <l2cap_recv+0x64>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    f874:	466c      	mov	r4, sp
    f876:	b088      	sub	sp, #32
    f878:	aa02      	add	r2, sp, #8
    f87a:	61d3      	str	r3, [r2, #28]
    f87c:	2304      	movs	r3, #4
    f87e:	4825      	ldr	r0, [pc, #148]	; (f914 <l2cap_recv+0xdc>)
    f880:	e9c2 0105 	strd	r0, r1, [r2, #20]
    f884:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    f888:	4821      	ldr	r0, [pc, #132]	; (f910 <l2cap_recv+0xd8>)
    f88a:	f842 3f10 	str.w	r3, [r2, #16]!
    f88e:	f008 fc84 	bl	1819a <z_log_msg_static_create.constprop.0>
    f892:	46a5      	mov	sp, r4
}
    f894:	2000      	movs	r0, #0
    f896:	371c      	adds	r7, #28
    f898:	46bd      	mov	sp, r7
    f89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
    f89c:	7843      	ldrb	r3, [r0, #1]
    f89e:	b90b      	cbnz	r3, f8a4 <l2cap_recv+0x6c>
		LOG_ERR("Invalid ident value in L2CAP PDU");
    f8a0:	4b1d      	ldr	r3, [pc, #116]	; (f918 <l2cap_recv+0xe0>)
    f8a2:	e7d2      	b.n	f84a <l2cap_recv+0x12>
	switch (hdr->code) {
    f8a4:	7803      	ldrb	r3, [r0, #0]
    f8a6:	2b01      	cmp	r3, #1
    f8a8:	d0f4      	beq.n	f894 <l2cap_recv+0x5c>
    f8aa:	2b13      	cmp	r3, #19
    f8ac:	d103      	bne.n	f8b6 <l2cap_recv+0x7e>
	if (buf->len < sizeof(*rsp)) {
    f8ae:	2901      	cmp	r1, #1
    f8b0:	d8f0      	bhi.n	f894 <l2cap_recv+0x5c>
		LOG_ERR("Too small LE conn param rsp");
    f8b2:	4b1a      	ldr	r3, [pc, #104]	; (f91c <l2cap_recv+0xe4>)
    f8b4:	e7c9      	b.n	f84a <l2cap_recv+0x12>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
    f8b6:	466d      	mov	r5, sp
    f8b8:	b088      	sub	sp, #32
    f8ba:	aa02      	add	r2, sp, #8
    f8bc:	4918      	ldr	r1, [pc, #96]	; (f920 <l2cap_recv+0xe8>)
    f8be:	4814      	ldr	r0, [pc, #80]	; (f910 <l2cap_recv+0xd8>)
	switch (hdr->code) {
    f8c0:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
    f8c4:	2303      	movs	r3, #3
    f8c6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    f8ca:	f842 3f10 	str.w	r3, [r2, #16]!
    f8ce:	f008 fc64 	bl	1819a <z_log_msg_static_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    f8d2:	2202      	movs	r2, #2
    f8d4:	46ad      	mov	sp, r5
    f8d6:	7861      	ldrb	r1, [r4, #1]
    f8d8:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
    f8da:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    f8dc:	f008 fc60 	bl	181a0 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    f8e0:	4604      	mov	r4, r0
    f8e2:	2800      	cmp	r0, #0
    f8e4:	d0d6      	beq.n	f894 <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
    f8e6:	2102      	movs	r1, #2
    f8e8:	300c      	adds	r0, #12
    f8ea:	f009 fc64 	bl	191b6 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    f8ee:	2300      	movs	r3, #0
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    f8f0:	4622      	mov	r2, r4
    f8f2:	7003      	strb	r3, [r0, #0]
    f8f4:	7043      	strb	r3, [r0, #1]
    f8f6:	2105      	movs	r1, #5
    f8f8:	4628      	mov	r0, r5
    f8fa:	9300      	str	r3, [sp, #0]
    f8fc:	f008 fc9c 	bl	18238 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
    f900:	2800      	cmp	r0, #0
    f902:	d0c7      	beq.n	f894 <l2cap_recv+0x5c>
		net_buf_unref(buf);
    f904:	4620      	mov	r0, r4
    f906:	f002 f849 	bl	1199c <net_buf_unref>
    f90a:	e7c3      	b.n	f894 <l2cap_recv+0x5c>
    f90c:	0001d200 	.word	0x0001d200
    f910:	0001b208 	.word	0x0001b208
    f914:	0001d21e 	.word	0x0001d21e
    f918:	0001d23f 	.word	0x0001d23f
    f91c:	0001d260 	.word	0x0001d260
    f920:	0001d27c 	.word	0x0001d27c

0000f924 <bt_l2cap_recv>:
{
    f924:	b5b0      	push	{r4, r5, r7, lr}
    f926:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
    f928:	8a0b      	ldrh	r3, [r1, #16]
{
    f92a:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
    f92c:	2b03      	cmp	r3, #3
{
    f92e:	460c      	mov	r4, r1
    f930:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
    f932:	d810      	bhi.n	f956 <bt_l2cap_recv+0x32>
		LOG_ERR("Too small L2CAP PDU received");
    f934:	4b17      	ldr	r3, [pc, #92]	; (f994 <bt_l2cap_recv+0x70>)
    f936:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f93a:	617b      	str	r3, [r7, #20]
    f93c:	2302      	movs	r3, #2
    f93e:	4816      	ldr	r0, [pc, #88]	; (f998 <bt_l2cap_recv+0x74>)
    f940:	f107 0210 	add.w	r2, r7, #16
    f944:	613b      	str	r3, [r7, #16]
    f946:	f008 fc28 	bl	1819a <z_log_msg_static_create.constprop.0>
	net_buf_unref(buf);
    f94a:	4620      	mov	r0, r4
    f94c:	f002 f826 	bl	1199c <net_buf_unref>
}
    f950:	3718      	adds	r7, #24
    f952:	46bd      	mov	sp, r7
    f954:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    f956:	2104      	movs	r1, #4
    f958:	f104 000c 	add.w	r0, r4, #12
    f95c:	f009 fc5b 	bl	19216 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    f960:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    f962:	4628      	mov	r0, r5
    f964:	f008 fc81 	bl	1826a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    f968:	b978      	cbnz	r0, f98a <bt_l2cap_recv+0x66>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
    f96a:	466d      	mov	r5, sp
    f96c:	b088      	sub	sp, #32
    f96e:	466a      	mov	r2, sp
    f970:	4b0a      	ldr	r3, [pc, #40]	; (f99c <bt_l2cap_recv+0x78>)
    f972:	4809      	ldr	r0, [pc, #36]	; (f998 <bt_l2cap_recv+0x74>)
    f974:	e9c2 3105 	strd	r3, r1, [r2, #20]
    f978:	2303      	movs	r3, #3
    f97a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    f97e:	f842 3f10 	str.w	r3, [r2, #16]!
    f982:	f008 fc0a 	bl	1819a <z_log_msg_static_create.constprop.0>
    f986:	46ad      	mov	sp, r5
		net_buf_unref(buf);
    f988:	e7df      	b.n	f94a <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
    f98a:	6843      	ldr	r3, [r0, #4]
    f98c:	4621      	mov	r1, r4
    f98e:	695b      	ldr	r3, [r3, #20]
    f990:	4798      	blx	r3
    f992:	e7da      	b.n	f94a <bt_l2cap_recv+0x26>
    f994:	0001d2a4 	.word	0x0001d2a4
    f998:	0001b208 	.word	0x0001b208
    f99c:	0001d2c1 	.word	0x0001d2c1

0000f9a0 <bt_l2cap_update_conn_param>:
{
    f9a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
    f9a2:	4b17      	ldr	r3, [pc, #92]	; (fa00 <bt_l2cap_update_conn_param+0x60>)
{
    f9a4:	460e      	mov	r6, r1
	ident++;
    f9a6:	7819      	ldrb	r1, [r3, #0]
{
    f9a8:	4605      	mov	r5, r0
	ident++;
    f9aa:	3101      	adds	r1, #1
    f9ac:	b2c9      	uxtb	r1, r1
    f9ae:	2901      	cmp	r1, #1
    f9b0:	bf38      	it	cc
    f9b2:	2101      	movcc	r1, #1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    f9b4:	2208      	movs	r2, #8
    f9b6:	2012      	movs	r0, #18
	ident++;
    f9b8:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    f9ba:	f008 fbf1 	bl	181a0 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    f9be:	4604      	mov	r4, r0
    f9c0:	b1d0      	cbz	r0, f9f8 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
    f9c2:	2108      	movs	r1, #8
    f9c4:	300c      	adds	r0, #12
    f9c6:	f009 fbf6 	bl	191b6 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    f9ca:	8833      	ldrh	r3, [r6, #0]
    f9cc:	4622      	mov	r2, r4
    f9ce:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    f9d0:	8873      	ldrh	r3, [r6, #2]
    f9d2:	2105      	movs	r1, #5
    f9d4:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    f9d6:	88b3      	ldrh	r3, [r6, #4]
    f9d8:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    f9da:	88f3      	ldrh	r3, [r6, #6]
    f9dc:	80c3      	strh	r3, [r0, #6]
    f9de:	2300      	movs	r3, #0
    f9e0:	4628      	mov	r0, r5
    f9e2:	9300      	str	r3, [sp, #0]
    f9e4:	f008 fc28 	bl	18238 <bt_l2cap_send_cb>
	if (err) {
    f9e8:	4605      	mov	r5, r0
    f9ea:	b110      	cbz	r0, f9f2 <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
    f9ec:	4620      	mov	r0, r4
    f9ee:	f001 ffd5 	bl	1199c <net_buf_unref>
}
    f9f2:	4628      	mov	r0, r5
    f9f4:	b002      	add	sp, #8
    f9f6:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    f9f8:	f06f 050b 	mvn.w	r5, #11
    f9fc:	e7f9      	b.n	f9f2 <bt_l2cap_update_conn_param+0x52>
    f9fe:	bf00      	nop
    fa00:	20009bde 	.word	0x20009bde

0000fa04 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
    fa04:	2823      	cmp	r0, #35	; 0x23
    fa06:	d81f      	bhi.n	fa48 <att_op_get_type+0x44>
    fa08:	281a      	cmp	r0, #26
    fa0a:	d804      	bhi.n	fa16 <att_op_get_type+0x12>
    fa0c:	1e43      	subs	r3, r0, #1
    fa0e:	2b18      	cmp	r3, #24
    fa10:	d90e      	bls.n	fa30 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    fa12:	2006      	movs	r0, #6
    fa14:	4770      	bx	lr
	switch (op) {
    fa16:	f1a0 031b 	sub.w	r3, r0, #27
    fa1a:	2b08      	cmp	r3, #8
    fa1c:	d81e      	bhi.n	fa5c <att_op_get_type+0x58>
    fa1e:	e8df f003 	tbb	[pc, r3]
    fa22:	1d05      	.short	0x1d05
    fa24:	191d231b 	.word	0x191d231b
    fa28:	1d25      	.short	0x1d25
    fa2a:	05          	.byte	0x05
    fa2b:	00          	.byte	0x00
		return ATT_NOTIFICATION;
    fa2c:	2003      	movs	r0, #3
    fa2e:	4770      	bx	lr
    fa30:	2301      	movs	r3, #1
	switch (op) {
    fa32:	4a0f      	ldr	r2, [pc, #60]	; (fa70 <att_op_get_type+0x6c>)
    fa34:	4083      	lsls	r3, r0
    fa36:	401a      	ands	r2, r3
    fa38:	b9c2      	cbnz	r2, fa6c <att_op_get_type+0x68>
    fa3a:	4a0e      	ldr	r2, [pc, #56]	; (fa74 <att_op_get_type+0x70>)
    fa3c:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
    fa3e:	2a00      	cmp	r2, #0
    fa40:	bf14      	ite	ne
    fa42:	2001      	movne	r0, #1
    fa44:	2006      	moveq	r0, #6
    fa46:	4770      	bx	lr
	switch (op) {
    fa48:	f000 037f 	and.w	r3, r0, #127	; 0x7f
    fa4c:	2b52      	cmp	r3, #82	; 0x52
    fa4e:	d105      	bne.n	fa5c <att_op_get_type+0x58>
		return ATT_COMMAND;
    fa50:	2000      	movs	r0, #0
}
    fa52:	4770      	bx	lr
		return ATT_REQUEST;
    fa54:	2001      	movs	r0, #1
    fa56:	4770      	bx	lr
		return ATT_INDICATION;
    fa58:	2005      	movs	r0, #5
    fa5a:	4770      	bx	lr
		return ATT_COMMAND;
    fa5c:	f010 0f40 	tst.w	r0, #64	; 0x40
    fa60:	bf0c      	ite	eq
    fa62:	2006      	moveq	r0, #6
    fa64:	2000      	movne	r0, #0
    fa66:	4770      	bx	lr
	switch (op) {
    fa68:	2004      	movs	r0, #4
    fa6a:	4770      	bx	lr
		return ATT_RESPONSE;
    fa6c:	2002      	movs	r0, #2
    fa6e:	4770      	bx	lr
    fa70:	028aaaaa 	.word	0x028aaaaa
    fa74:	01455554 	.word	0x01455554

0000fa78 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    fa78:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    fa7a:	3804      	subs	r0, #4
    fa7c:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    fa7e:	a901      	add	r1, sp, #4
    fa80:	4802      	ldr	r0, [pc, #8]	; (fa8c <bt_att_released+0x14>)
    fa82:	f00a fc65 	bl	1a350 <k_mem_slab_free>
}
    fa86:	b003      	add	sp, #12
    fa88:	f85d fb04 	ldr.w	pc, [sp], #4
    fa8c:	20008550 	.word	0x20008550

0000fa90 <tx_meta_data_free>:
{
    fa90:	b510      	push	{r4, lr}
    fa92:	4604      	mov	r4, r0
	(void)memset(data, 0, sizeof(*data));
    fa94:	2100      	movs	r1, #0
    fa96:	2214      	movs	r2, #20
    fa98:	f008 f866 	bl	17b68 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
    fa9c:	4621      	mov	r1, r4
}
    fa9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
    faa2:	4801      	ldr	r0, [pc, #4]	; (faa8 <tx_meta_data_free+0x18>)
    faa4:	f00a bd1e 	b.w	1a4e4 <k_queue_append>
    faa8:	200085e0 	.word	0x200085e0

0000faac <find_type_cb>:
{
    faac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fab0:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
    fab2:	f8d2 a000 	ldr.w	sl, [r2]
{
    fab6:	af02      	add	r7, sp, #8
	struct bt_conn *conn = chan->chan.chan.conn;
    fab8:	f8da 3004 	ldr.w	r3, [sl, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    fabc:	2500      	movs	r5, #0
	struct bt_conn *conn = chan->chan.chan.conn;
    fabe:	607b      	str	r3, [r7, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    fac0:	f642 0301 	movw	r3, #10241	; 0x2801
{
    fac4:	4680      	mov	r8, r0
    fac6:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    fac8:	6800      	ldr	r0, [r0, #0]
    faca:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
    face:	85fb      	strh	r3, [r7, #46]	; 0x2e
    fad0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
{
    fad4:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    fad6:	f008 f853 	bl	17b80 <bt_uuid_cmp>
    fada:	2800      	cmp	r0, #0
    fadc:	d070      	beq.n	fbc0 <find_type_cb+0x114>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    fade:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    fae2:	f8d8 0000 	ldr.w	r0, [r8]
    fae6:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
    faea:	85fb      	strh	r3, [r7, #46]	; 0x2e
    faec:	f107 012c 	add.w	r1, r7, #44	; 0x2c
    faf0:	f008 f846 	bl	17b80 <bt_uuid_cmp>
    faf4:	b138      	cbz	r0, fb06 <find_type_cb+0x5a>
		if (data->group &&
    faf6:	68a3      	ldr	r3, [r4, #8]
    faf8:	b11b      	cbz	r3, fb02 <find_type_cb+0x56>
    fafa:	885a      	ldrh	r2, [r3, #2]
    fafc:	42b2      	cmp	r2, r6
    fafe:	d200      	bcs.n	fb02 <find_type_cb+0x56>
	data->group->end_handle = sys_cpu_to_le16(handle);
    fb00:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    fb02:	2001      	movs	r0, #1
    fb04:	e009      	b.n	fb1a <find_type_cb+0x6e>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    fb06:	6861      	ldr	r1, [r4, #4]
    fb08:	4608      	mov	r0, r1
    fb0a:	f008 fbc2 	bl	18292 <net_buf_frags_len>
    fb0e:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
    fb12:	1a1b      	subs	r3, r3, r0
    fb14:	2b03      	cmp	r3, #3
    fb16:	d804      	bhi.n	fb22 <find_type_cb+0x76>
		return BT_GATT_ITER_STOP;
    fb18:	2000      	movs	r0, #0
}
    fb1a:	3744      	adds	r7, #68	; 0x44
    fb1c:	46bd      	mov	sp, r7
    fb1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
    fb22:	4608      	mov	r0, r1
    fb24:	f009 fb21 	bl	1916a <net_buf_frag_last>
    fb28:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    fb2a:	6860      	ldr	r0, [r4, #4]
    fb2c:	f008 fbb1 	bl	18292 <net_buf_frags_len>
    fb30:	f8ba b02a 	ldrh.w	fp, [sl, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
    fb34:	f105 090c 	add.w	r9, r5, #12
    fb38:	ebab 0b00 	sub.w	fp, fp, r0
    fb3c:	4648      	mov	r0, r9
    fb3e:	f009 fb7e 	bl	1923e <net_buf_simple_tailroom>
    fb42:	4558      	cmp	r0, fp
    fb44:	d93f      	bls.n	fbc6 <find_type_cb+0x11a>
    fb46:	6860      	ldr	r0, [r4, #4]
    fb48:	f008 fba3 	bl	18292 <net_buf_frags_len>
    fb4c:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
    fb50:	1a18      	subs	r0, r3, r0
	if (!len) {
    fb52:	b970      	cbnz	r0, fb72 <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    fb54:	6863      	ldr	r3, [r4, #4]
    fb56:	7a98      	ldrb	r0, [r3, #10]
    fb58:	f001 fe5e 	bl	11818 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
    fb5c:	2200      	movs	r2, #0
    fb5e:	2300      	movs	r3, #0
    fb60:	f009 fac9 	bl	190f6 <net_buf_alloc_fixed>
		if (!frag) {
    fb64:	4605      	mov	r5, r0
    fb66:	2800      	cmp	r0, #0
    fb68:	d0d6      	beq.n	fb18 <find_type_cb+0x6c>
		net_buf_frag_add(data->buf, frag);
    fb6a:	4601      	mov	r1, r0
    fb6c:	6860      	ldr	r0, [r4, #4]
    fb6e:	f009 fb0d 	bl	1918c <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    fb72:	2300      	movs	r3, #0
    fb74:	9300      	str	r3, [sp, #0]
    fb76:	4641      	mov	r1, r8
    fb78:	f8d8 a004 	ldr.w	sl, [r8, #4]
    fb7c:	2310      	movs	r3, #16
    fb7e:	6878      	ldr	r0, [r7, #4]
    fb80:	f107 0208 	add.w	r2, r7, #8
    fb84:	47d0      	blx	sl
	if (read < 0) {
    fb86:	f1b0 0800 	subs.w	r8, r0, #0
    fb8a:	db19      	blt.n	fbc0 <find_type_cb+0x114>
	if (read != data->value_len) {
    fb8c:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    fb8e:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
    fb90:	4542      	cmp	r2, r8
    fb92:	d03f      	beq.n	fc14 <find_type_cb+0x168>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    fb94:	4601      	mov	r1, r0
    fb96:	f107 002c 	add.w	r0, r7, #44	; 0x2c
    fb9a:	f008 f81f 	bl	17bdc <bt_uuid_create>
    fb9e:	b9b0      	cbnz	r0, fbce <find_type_cb+0x122>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
    fba0:	466d      	mov	r5, sp
    fba2:	b088      	sub	sp, #32
    fba4:	7c23      	ldrb	r3, [r4, #16]
    fba6:	aa02      	add	r2, sp, #8
    fba8:	491d      	ldr	r1, [pc, #116]	; (fc20 <find_type_cb+0x174>)
    fbaa:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unable to create UUID: size %d", read);
    fbae:	2303      	movs	r3, #3
    fbb0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    fbb4:	481b      	ldr	r0, [pc, #108]	; (fc24 <find_type_cb+0x178>)
    fbb6:	f842 3f10 	str.w	r3, [r2, #16]!
    fbba:	f008 fc55 	bl	18468 <z_log_msg_static_create.constprop.0>
    fbbe:	46ad      	mov	sp, r5
	data->group = NULL;
    fbc0:	2300      	movs	r3, #0
    fbc2:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
    fbc4:	e79d      	b.n	fb02 <find_type_cb+0x56>
	return net_buf_simple_tailroom(&buf->b);
    fbc6:	4648      	mov	r0, r9
    fbc8:	f009 fb39 	bl	1923e <net_buf_simple_tailroom>
    fbcc:	e7c1      	b.n	fb52 <find_type_cb+0xa6>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    fbce:	fa5f f288 	uxtb.w	r2, r8
    fbd2:	f107 0108 	add.w	r1, r7, #8
    fbd6:	f107 0018 	add.w	r0, r7, #24
    fbda:	f007 ffff 	bl	17bdc <bt_uuid_create>
    fbde:	b930      	cbnz	r0, fbee <find_type_cb+0x142>
			LOG_WRN("Unable to create UUID: size %d", read);
    fbe0:	466d      	mov	r5, sp
    fbe2:	b088      	sub	sp, #32
    fbe4:	aa02      	add	r2, sp, #8
    fbe6:	4b10      	ldr	r3, [pc, #64]	; (fc28 <find_type_cb+0x17c>)
    fbe8:	e9c2 3805 	strd	r3, r8, [r2, #20]
    fbec:	e7df      	b.n	fbae <find_type_cb+0x102>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    fbee:	f107 0118 	add.w	r1, r7, #24
    fbf2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
    fbf6:	f007 ffc3 	bl	17b80 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    fbfa:	2800      	cmp	r0, #0
    fbfc:	d1e0      	bne.n	fbc0 <find_type_cb+0x114>
	data->err = 0x00;
    fbfe:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
    fc00:	2104      	movs	r1, #4
    fc02:	7463      	strb	r3, [r4, #17]
    fc04:	f105 000c 	add.w	r0, r5, #12
    fc08:	f009 fad5 	bl	191b6 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
    fc0c:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    fc0e:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    fc10:	68a3      	ldr	r3, [r4, #8]
    fc12:	e775      	b.n	fb00 <find_type_cb+0x54>
	} else if (memcmp(data->value, uuid, read)) {
    fc14:	f107 0108 	add.w	r1, r7, #8
    fc18:	f007 ff8b 	bl	17b32 <memcmp>
    fc1c:	e7ed      	b.n	fbfa <find_type_cb+0x14e>
    fc1e:	bf00      	nop
    fc20:	0001d2fd 	.word	0x0001d2fd
    fc24:	0001b1c8 	.word	0x0001b1c8
    fc28:	0001d31c 	.word	0x0001d31c

0000fc2c <chan_send>:
{
    fc2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fc30:	4606      	mov	r6, r0
    fc32:	460c      	mov	r4, r1
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
    fc34:	f8d1 9018 	ldr.w	r9, [r1, #24]
	hdr = (void *)buf->data;
    fc38:	68cb      	ldr	r3, [r1, #12]
{
    fc3a:	b089      	sub	sp, #36	; 0x24
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
    fc3c:	2102      	movs	r1, #2
    fc3e:	3034      	adds	r0, #52	; 0x34
    fc40:	f008 fb41 	bl	182c6 <atomic_test_bit>
    fc44:	b970      	cbnz	r0, fc64 <chan_send+0x38>
		return -EINVAL;
    fc46:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("ATT channel not connected");
    fc4a:	4b2e      	ldr	r3, [pc, #184]	; (fd04 <chan_send+0xd8>)
    fc4c:	482e      	ldr	r0, [pc, #184]	; (fd08 <chan_send+0xdc>)
    fc4e:	e9cd 1306 	strd	r1, r3, [sp, #24]
    fc52:	aa06      	add	r2, sp, #24
    fc54:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    fc58:	f008 fc06 	bl	18468 <z_log_msg_static_create.constprop.0>
}
    fc5c:	4628      	mov	r0, r5
    fc5e:	b009      	add	sp, #36	; 0x24
    fc60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    fc64:	781b      	ldrb	r3, [r3, #0]
    fc66:	2bd2      	cmp	r3, #210	; 0xd2
    fc68:	d117      	bne.n	fc9a <chan_send+0x6e>
		err = bt_smp_sign(chan->att->conn, buf);
    fc6a:	6833      	ldr	r3, [r6, #0]
    fc6c:	4621      	mov	r1, r4
    fc6e:	6818      	ldr	r0, [r3, #0]
    fc70:	f009 fa3b 	bl	190ea <bt_smp_sign>
		if (err) {
    fc74:	4605      	mov	r5, r0
    fc76:	b180      	cbz	r0, fc9a <chan_send+0x6e>
			LOG_ERR("Error signing data");
    fc78:	4b24      	ldr	r3, [pc, #144]	; (fd0c <chan_send+0xe0>)
    fc7a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    fc7e:	9307      	str	r3, [sp, #28]
    fc80:	2302      	movs	r3, #2
    fc82:	aa06      	add	r2, sp, #24
    fc84:	4820      	ldr	r0, [pc, #128]	; (fd08 <chan_send+0xdc>)
    fc86:	9306      	str	r3, [sp, #24]
    fc88:	f008 fbee 	bl	18468 <z_log_msg_static_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
    fc8c:	69a0      	ldr	r0, [r4, #24]
    fc8e:	f7ff feff 	bl	fa90 <tx_meta_data_free>
			net_buf_unref(buf);
    fc92:	4620      	mov	r0, r4
    fc94:	f001 fe82 	bl	1199c <net_buf_unref>
			return err;
    fc98:	e7e0      	b.n	fc5c <chan_send+0x30>
	state->offset = net_buf_simple_headroom(buf);
    fc9a:	f104 000c 	add.w	r0, r4, #12
    fc9e:	f009 faca 	bl	19236 <net_buf_simple_headroom>
	state->len = buf->len;
    fca2:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	data->att_chan = chan;
    fca6:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    fcaa:	6833      	ldr	r3, [r6, #0]
	state->offset = net_buf_simple_headroom(buf);
    fcac:	4607      	mov	r7, r0
    fcae:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
    fcb0:	68e3      	ldr	r3, [r4, #12]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    fcb2:	2104      	movs	r1, #4
	const att_type_t op_type = att_op_get_type(buf->data[0]);
    fcb4:	7818      	ldrb	r0, [r3, #0]
    fcb6:	f7ff fea5 	bl	fa04 <att_op_get_type>
	switch (op_type) {
    fcba:	2805      	cmp	r0, #5
    fcbc:	bf98      	it	ls
    fcbe:	4b14      	ldrls	r3, [pc, #80]	; (fd10 <chan_send+0xe4>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    fcc0:	4622      	mov	r2, r4
    fcc2:	bf94      	ite	ls
    fcc4:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
    fcc8:	4b12      	ldrhi	r3, [pc, #72]	; (fd14 <chan_send+0xe8>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    fcca:	4628      	mov	r0, r5
    fccc:	f8cd 9000 	str.w	r9, [sp]
    fcd0:	f008 fab2 	bl	18238 <bt_l2cap_send_cb>
	if (err) {
    fcd4:	4605      	mov	r5, r0
    fcd6:	2800      	cmp	r0, #0
    fcd8:	d0c0      	beq.n	fc5c <chan_send+0x30>
		if (err == -ENOBUFS) {
    fcda:	f110 0f69 	cmn.w	r0, #105	; 0x69
    fcde:	d109      	bne.n	fcf4 <chan_send+0xc8>
			LOG_ERR("Ran out of TX buffers or contexts.");
    fce0:	4b0d      	ldr	r3, [pc, #52]	; (fd18 <chan_send+0xec>)
    fce2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    fce6:	9307      	str	r3, [sp, #28]
    fce8:	2302      	movs	r3, #2
    fcea:	4807      	ldr	r0, [pc, #28]	; (fd08 <chan_send+0xdc>)
    fcec:	aa06      	add	r2, sp, #24
    fcee:	9306      	str	r3, [sp, #24]
    fcf0:	f008 fbba 	bl	18468 <z_log_msg_static_create.constprop.0>
	buf->data = buf->__buf + state->offset;
    fcf4:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
    fcf6:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
    fcfa:	fa13 f787 	uxtah	r7, r3, r7
    fcfe:	60e7      	str	r7, [r4, #12]
}
    fd00:	e7ac      	b.n	fc5c <chan_send+0x30>
    fd02:	bf00      	nop
    fd04:	0001d33b 	.word	0x0001d33b
    fd08:	0001b1c8 	.word	0x0001b1c8
    fd0c:	0001d355 	.word	0x0001d355
    fd10:	0001b77c 	.word	0x0001b77c
    fd14:	0001884d 	.word	0x0001884d
    fd18:	0001d368 	.word	0x0001d368

0000fd1c <att_get>:
{
    fd1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    fd1e:	7a83      	ldrb	r3, [r0, #10]
    fd20:	2b07      	cmp	r3, #7
    fd22:	d00d      	beq.n	fd40 <att_get+0x24>
		LOG_WRN("Not connected");
    fd24:	4b13      	ldr	r3, [pc, #76]	; (fd74 <att_get+0x58>)
    fd26:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    fd2a:	9305      	str	r3, [sp, #20]
    fd2c:	2302      	movs	r3, #2
    fd2e:	aa04      	add	r2, sp, #16
    fd30:	9304      	str	r3, [sp, #16]
		LOG_ERR("Unable to find ATT channel");
    fd32:	4811      	ldr	r0, [pc, #68]	; (fd78 <att_get+0x5c>)
    fd34:	f008 fb98 	bl	18468 <z_log_msg_static_create.constprop.0>
		return NULL;
    fd38:	2000      	movs	r0, #0
}
    fd3a:	b007      	add	sp, #28
    fd3c:	f85d fb04 	ldr.w	pc, [sp], #4
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    fd40:	2104      	movs	r1, #4
    fd42:	f008 fa92 	bl	1826a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    fd46:	4603      	mov	r3, r0
    fd48:	b938      	cbnz	r0, fd5a <att_get+0x3e>
		LOG_ERR("Unable to find ATT channel");
    fd4a:	4b0c      	ldr	r3, [pc, #48]	; (fd7c <att_get+0x60>)
    fd4c:	9305      	str	r3, [sp, #20]
    fd4e:	2302      	movs	r3, #2
    fd50:	9304      	str	r3, [sp, #16]
    fd52:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    fd56:	aa04      	add	r2, sp, #16
    fd58:	e7eb      	b.n	fd32 <att_get+0x16>
	if (!atomic_test_bit(att_chan->flags, ATT_CONNECTED)) {
    fd5a:	2102      	movs	r1, #2
    fd5c:	3030      	adds	r0, #48	; 0x30
    fd5e:	f008 fab2 	bl	182c6 <atomic_test_bit>
    fd62:	b918      	cbnz	r0, fd6c <att_get+0x50>
		LOG_ERR("ATT channel not connected");
    fd64:	4b06      	ldr	r3, [pc, #24]	; (fd80 <att_get+0x64>)
    fd66:	e9cd 1304 	strd	r1, r3, [sp, #16]
    fd6a:	e7f2      	b.n	fd52 <att_get+0x36>
	return att_chan->att;
    fd6c:	f853 0c04 	ldr.w	r0, [r3, #-4]
    fd70:	e7e3      	b.n	fd3a <att_get+0x1e>
    fd72:	bf00      	nop
    fd74:	0001d38b 	.word	0x0001d38b
    fd78:	0001b1c8 	.word	0x0001b1c8
    fd7c:	0001d399 	.word	0x0001d399
    fd80:	0001d33b 	.word	0x0001d33b

0000fd84 <bt_att_connected>:
{
    fd84:	b510      	push	{r4, lr}
    fd86:	4604      	mov	r4, r0
    fd88:	f100 0330 	add.w	r3, r0, #48	; 0x30
    fd8c:	e8d3 1fef 	ldaex	r1, [r3]
    fd90:	f041 0104 	orr.w	r1, r1, #4
    fd94:	e8c3 1fe2 	stlex	r2, r1, [r3]
    fd98:	2a00      	cmp	r2, #0
    fd9a:	d1f7      	bne.n	fd8c <bt_att_connected+0x8>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    fd9c:	2317      	movs	r3, #23
	att_chan_mtu_updated(att_chan);
    fd9e:	1f20      	subs	r0, r4, #4
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    fda0:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    fda2:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
    fda4:	f008 fb1d 	bl	183e2 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    fda8:	f104 0054 	add.w	r0, r4, #84	; 0x54
    fdac:	4903      	ldr	r1, [pc, #12]	; (fdbc <bt_att_connected+0x38>)
    fdae:	f00a fc79 	bl	1a6a4 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
    fdb2:	6820      	ldr	r0, [r4, #0]
}
    fdb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
    fdb8:	f001 bcc0 	b.w	1173c <bt_gatt_connected>
    fdbc:	00010aa1 	.word	0x00010aa1

0000fdc0 <read_group_cb>:
{
    fdc0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    fdc4:	f04f 0800 	mov.w	r8, #0
    fdc8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
    fdcc:	4605      	mov	r5, r0
    fdce:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    fdd0:	6800      	ldr	r0, [r0, #0]
    fdd2:	a902      	add	r1, sp, #8
{
    fdd4:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
    fdd6:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    fdd8:	f88d 8008 	strb.w	r8, [sp, #8]
    fddc:	f8ad 300a 	strh.w	r3, [sp, #10]
    fde0:	f007 fece 	bl	17b80 <bt_uuid_cmp>
    fde4:	b1a0      	cbz	r0, fe10 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    fde6:	f642 0301 	movw	r3, #10241	; 0x2801
    fdea:	6828      	ldr	r0, [r5, #0]
    fdec:	a903      	add	r1, sp, #12
    fdee:	f88d 800c 	strb.w	r8, [sp, #12]
    fdf2:	f8ad 300e 	strh.w	r3, [sp, #14]
    fdf6:	f007 fec3 	bl	17b80 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    fdfa:	b148      	cbz	r0, fe10 <read_group_cb+0x50>
		if (data->group &&
    fdfc:	6923      	ldr	r3, [r4, #16]
    fdfe:	b11b      	cbz	r3, fe08 <read_group_cb+0x48>
    fe00:	885a      	ldrh	r2, [r3, #2]
    fe02:	42b2      	cmp	r2, r6
    fe04:	d200      	bcs.n	fe08 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    fe06:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    fe08:	2001      	movs	r0, #1
}
    fe0a:	b004      	add	sp, #16
    fe0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    fe10:	6861      	ldr	r1, [r4, #4]
    fe12:	6828      	ldr	r0, [r5, #0]
    fe14:	f007 feb4 	bl	17b80 <bt_uuid_cmp>
    fe18:	b110      	cbz	r0, fe20 <read_group_cb+0x60>
		data->group = NULL;
    fe1a:	2300      	movs	r3, #0
    fe1c:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    fe1e:	e7f3      	b.n	fe08 <read_group_cb+0x48>
	if (data->rsp->len &&
    fe20:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    fe22:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
    fe24:	781a      	ldrb	r2, [r3, #0]
    fe26:	b132      	cbz	r2, fe36 <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    fe28:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    fe2a:	8a01      	ldrh	r1, [r0, #16]
    fe2c:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    fe2e:	4293      	cmp	r3, r2
    fe30:	da01      	bge.n	fe36 <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
    fe32:	2000      	movs	r0, #0
    fe34:	e7e9      	b.n	fe0a <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
    fe36:	2104      	movs	r1, #4
    fe38:	300c      	adds	r0, #12
    fe3a:	f009 f9bc 	bl	191b6 <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    fe3e:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
    fe40:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    fe42:	6923      	ldr	r3, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    fe44:	4629      	mov	r1, r5
	data->group->end_handle = sys_cpu_to_le16(handle);
    fe46:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    fe48:	4b07      	ldr	r3, [pc, #28]	; (fe68 <read_group_cb+0xa8>)
    fe4a:	9401      	str	r4, [sp, #4]
    fe4c:	9300      	str	r3, [sp, #0]
    fe4e:	4638      	mov	r0, r7
    fe50:	2300      	movs	r3, #0
    fe52:	68a2      	ldr	r2, [r4, #8]
    fe54:	f008 fb4a 	bl	184ec <att_chan_read>
	if (read < 0) {
    fe58:	2800      	cmp	r0, #0
    fe5a:	dbea      	blt.n	fe32 <read_group_cb+0x72>
	if (!data->group) {
    fe5c:	6920      	ldr	r0, [r4, #16]
    fe5e:	3800      	subs	r0, #0
    fe60:	bf18      	it	ne
    fe62:	2001      	movne	r0, #1
    fe64:	e7d1      	b.n	fe0a <read_group_cb+0x4a>
    fe66:	bf00      	nop
    fe68:	00018449 	.word	0x00018449

0000fe6c <read_type_cb>:
{
    fe6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    fe70:	6817      	ldr	r7, [r2, #0]
{
    fe72:	4605      	mov	r5, r0
    fe74:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    fe76:	6800      	ldr	r0, [r0, #0]
    fe78:	6851      	ldr	r1, [r2, #4]
{
    fe7a:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
    fe7c:	687e      	ldr	r6, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    fe7e:	f007 fe7f 	bl	17b80 <bt_uuid_cmp>
    fe82:	4681      	mov	r9, r0
    fe84:	2800      	cmp	r0, #0
    fe86:	d13c      	bne.n	ff02 <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    fe88:	4630      	mov	r0, r6
    fe8a:	2295      	movs	r2, #149	; 0x95
    fe8c:	4629      	mov	r1, r5
    fe8e:	f009 f82a 	bl	18ee6 <bt_gatt_check_perm>
    fe92:	4606      	mov	r6, r0
    fe94:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    fe96:	b140      	cbz	r0, feaa <read_type_cb+0x3e>
		if (data->rsp->len) {
    fe98:	68e3      	ldr	r3, [r4, #12]
    fe9a:	781b      	ldrb	r3, [r3, #0]
    fe9c:	b10b      	cbz	r3, fea2 <read_type_cb+0x36>
			data->err = 0x00;
    fe9e:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
    fea2:	2000      	movs	r0, #0
}
    fea4:	b003      	add	sp, #12
    fea6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    feaa:	68a0      	ldr	r0, [r4, #8]
    feac:	f009 f95d 	bl	1916a <net_buf_frag_last>
    feb0:	2102      	movs	r1, #2
    feb2:	300c      	adds	r0, #12
    feb4:	f009 f97f 	bl	191b6 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    feb8:	4b13      	ldr	r3, [pc, #76]	; (ff08 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    feba:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
    febc:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    fec0:	9300      	str	r3, [sp, #0]
    fec2:	9401      	str	r4, [sp, #4]
    fec4:	4633      	mov	r3, r6
    fec6:	4629      	mov	r1, r5
    fec8:	4638      	mov	r0, r7
    feca:	68a2      	ldr	r2, [r4, #8]
    fecc:	f008 fb0e 	bl	184ec <att_chan_read>
	if (read < 0) {
    fed0:	2800      	cmp	r0, #0
    fed2:	da07      	bge.n	fee4 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
    fed4:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
    fed8:	bf32      	itee	cc
    feda:	200e      	movcc	r0, #14
		return -err;
    fedc:	4240      	negcs	r0, r0
    fede:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
    fee0:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    fee2:	e7de      	b.n	fea2 <read_type_cb+0x36>
	if (!data->item) {
    fee4:	6923      	ldr	r3, [r4, #16]
    fee6:	2b00      	cmp	r3, #0
    fee8:	d0db      	beq.n	fea2 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    feea:	68a0      	ldr	r0, [r4, #8]
    feec:	f008 f9d1 	bl	18292 <net_buf_frags_len>
    fef0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    fef2:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    fef4:	68e3      	ldr	r3, [r4, #12]
    fef6:	781b      	ldrb	r3, [r3, #0]
    fef8:	4298      	cmp	r0, r3
    fefa:	bf94      	ite	ls
    fefc:	2000      	movls	r0, #0
    fefe:	2001      	movhi	r0, #1
    ff00:	e7d0      	b.n	fea4 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    ff02:	2001      	movs	r0, #1
    ff04:	e7ce      	b.n	fea4 <read_type_cb+0x38>
    ff06:	bf00      	nop
    ff08:	000182a3 	.word	0x000182a3

0000ff0c <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    ff0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ff10:	b082      	sub	sp, #8
    ff12:	af00      	add	r7, sp, #0
    ff14:	4604      	mov	r4, r0
    ff16:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    ff18:	2200      	movs	r2, #0
    ff1a:	2300      	movs	r3, #0
    ff1c:	4639      	mov	r1, r7
    ff1e:	4838      	ldr	r0, [pc, #224]	; (10000 <CONFIG_RPMSG_NRF53_SRAM_SIZE>)
    ff20:	f004 fe56 	bl	14bd0 <k_mem_slab_alloc>
    ff24:	4605      	mov	r5, r0
    ff26:	b1a8      	cbz	r0, ff54 <bt_att_accept+0x48>
		LOG_ERR("No available ATT context for conn %p", conn);
    ff28:	466d      	mov	r5, sp
    ff2a:	b088      	sub	sp, #32
    ff2c:	466a      	mov	r2, sp
    ff2e:	4b35      	ldr	r3, [pc, #212]	; (10004 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x4>)
    ff30:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ff34:	e9c2 3405 	strd	r3, r4, [r2, #20]
    ff38:	2303      	movs	r3, #3
    ff3a:	4833      	ldr	r0, [pc, #204]	; (10008 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x8>)
    ff3c:	f842 3f10 	str.w	r3, [r2, #16]!
    ff40:	f008 fa92 	bl	18468 <z_log_msg_static_create.constprop.0>
    ff44:	46ad      	mov	sp, r5
		return -ENOMEM;
    ff46:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    ff4a:	4628      	mov	r0, r5
    ff4c:	3708      	adds	r7, #8
    ff4e:	46bd      	mov	sp, r7
    ff50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_z_current_get();
    ff54:	f005 fd60 	bl	15a18 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
    ff58:	4b2c      	ldr	r3, [pc, #176]	; (1000c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xc>)
	(void)memset(att, 0, sizeof(*att));
    ff5a:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
    ff5c:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
    ff5e:	222c      	movs	r2, #44	; 0x2c
    ff60:	6838      	ldr	r0, [r7, #0]
    ff62:	f007 fe01 	bl	17b68 <memset>
	att->conn = conn;
    ff66:	683b      	ldr	r3, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    ff68:	2200      	movs	r2, #0
	att->conn = conn;
    ff6a:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
    ff6c:	683c      	ldr	r4, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    ff6e:	2300      	movs	r3, #0
	list->tail = NULL;
    ff70:	e9c4 5501 	strd	r5, r5, [r4, #4]
    ff74:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
    ff78:	4825      	ldr	r0, [pc, #148]	; (10010 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x10>)
    ff7a:	1d39      	adds	r1, r7, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    ff7c:	607d      	str	r5, [r7, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    ff7e:	f004 fe27 	bl	14bd0 <k_mem_slab_alloc>
    ff82:	4605      	mov	r5, r0
    ff84:	b180      	cbz	r0, ffa8 <bt_att_accept+0x9c>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
    ff86:	6823      	ldr	r3, [r4, #0]
    ff88:	466c      	mov	r4, sp
    ff8a:	b088      	sub	sp, #32
    ff8c:	466a      	mov	r2, sp
    ff8e:	4921      	ldr	r1, [pc, #132]	; (10014 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x14>)
    ff90:	481d      	ldr	r0, [pc, #116]	; (10008 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x8>)
    ff92:	e9c2 1305 	strd	r1, r3, [r2, #20]
    ff96:	2303      	movs	r3, #3
    ff98:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    ff9c:	f842 3f10 	str.w	r3, [r2, #16]!
    ffa0:	f008 fa62 	bl	18468 <z_log_msg_static_create.constprop.0>
    ffa4:	46a5      	mov	sp, r4
	if (!chan) {
    ffa6:	e7ce      	b.n	ff46 <bt_att_accept+0x3a>
	(void)memset(chan, 0, sizeof(*chan));
    ffa8:	4601      	mov	r1, r0
    ffaa:	2290      	movs	r2, #144	; 0x90
    ffac:	6878      	ldr	r0, [r7, #4]
    ffae:	f007 fddb 	bl	17b68 <memset>
	chan->chan.chan.ops = &ops;
    ffb2:	6878      	ldr	r0, [r7, #4]
    ffb4:	4b18      	ldr	r3, [pc, #96]	; (10018 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x18>)
    ffb6:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
    ffb8:	303c      	adds	r0, #60	; 0x3c
    ffba:	f00a fa87 	bl	1a4cc <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    ffbe:	687b      	ldr	r3, [r7, #4]
    ffc0:	3334      	adds	r3, #52	; 0x34
    ffc2:	e8d3 2fef 	ldaex	r2, [r3]
    ffc6:	e8c3 5fe1 	stlex	r1, r5, [r3]
    ffca:	2900      	cmp	r1, #0
    ffcc:	d1f9      	bne.n	ffc2 <bt_att_accept+0xb6>
	chan->att = att;
    ffce:	687b      	ldr	r3, [r7, #4]
    ffd0:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
    ffd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
	att_chan_attach(att, chan);
    ffd4:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
    ffd8:	b91b      	cbnz	r3, ffe2 <bt_att_accept+0xd6>
    ffda:	f104 000c 	add.w	r0, r4, #12
    ffde:	f00a fa75 	bl	1a4cc <z_impl_k_queue_init>
	return list->head;
    ffe2:	6a62      	ldr	r2, [r4, #36]	; 0x24
	sys_slist_prepend(&att->chans, &chan->node);
    ffe4:	f108 0388 	add.w	r3, r8, #136	; 0x88
	parent->next = child;
    ffe8:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
Z_GENLIST_PREPEND(slist, snode)
    ffec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	list->head = node;
    ffee:	6263      	str	r3, [r4, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
    fff0:	b902      	cbnz	r2, fff4 <bt_att_accept+0xe8>
	list->tail = node;
    fff2:	62a3      	str	r3, [r4, #40]	; 0x28
	return chan;
    fff4:	687b      	ldr	r3, [r7, #4]
	if (!chan) {
    fff6:	2b00      	cmp	r3, #0
    fff8:	d0a5      	beq.n	ff46 <bt_att_accept+0x3a>
	*ch = &chan->chan.chan;
    fffa:	3304      	adds	r3, #4
    fffc:	6033      	str	r3, [r6, #0]
	return 0;
    fffe:	e7a4      	b.n	ff4a <bt_att_accept+0x3e>
   10000:	20008534 	.word	0x20008534
   10004:	0001d3b4 	.word	0x0001d3b4
   10008:	0001b1c8 	.word	0x0001b1c8
   1000c:	20009894 	.word	0x20009894
   10010:	20008550 	.word	0x20008550
   10014:	0001d3d9 	.word	0x0001d3d9
   10018:	20008274 	.word	0x20008274

0001001c <bt_att_chan_create_pdu>:
{
   1001c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   10020:	b086      	sub	sp, #24
   10022:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   10024:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   10026:	1c53      	adds	r3, r2, #1
   10028:	428b      	cmp	r3, r1
{
   1002a:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1002c:	d915      	bls.n	1005a <bt_att_chan_create_pdu+0x3e>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   1002e:	466c      	mov	r4, sp
   10030:	b088      	sub	sp, #32
   10032:	466a      	mov	r2, sp
   10034:	482d      	ldr	r0, [pc, #180]	; (100ec <bt_att_chan_create_pdu+0xd0>)
   10036:	61d3      	str	r3, [r2, #28]
   10038:	2304      	movs	r3, #4
   1003a:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1003e:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   10042:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   10046:	482a      	ldr	r0, [pc, #168]	; (100f0 <bt_att_chan_create_pdu+0xd4>)
   10048:	f008 fa0e 	bl	18468 <z_log_msg_static_create.constprop.0>
   1004c:	46a5      	mov	sp, r4
		return NULL;
   1004e:	2400      	movs	r4, #0
}
   10050:	4620      	mov	r0, r4
   10052:	3718      	adds	r7, #24
   10054:	46bd      	mov	sp, r7
   10056:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
   1005a:	4628      	mov	r0, r5
   1005c:	f7ff fcd2 	bl	fa04 <att_op_get_type>
   10060:	2802      	cmp	r0, #2
   10062:	d019      	beq.n	10098 <bt_att_chan_create_pdu+0x7c>
   10064:	2804      	cmp	r0, #4
   10066:	d017      	beq.n	10098 <bt_att_chan_create_pdu+0x7c>
		timeout = K_FOREVER;
   10068:	f04f 38ff 	mov.w	r8, #4294967295
   1006c:	f04f 39ff 	mov.w	r9, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   10070:	2100      	movs	r1, #0
   10072:	4642      	mov	r2, r8
   10074:	464b      	mov	r3, r9
   10076:	4608      	mov	r0, r1
   10078:	f008 f8db 	bl	18232 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1007c:	4604      	mov	r4, r0
   1007e:	b980      	cbnz	r0, 100a2 <bt_att_chan_create_pdu+0x86>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   10080:	466c      	mov	r4, sp
   10082:	b088      	sub	sp, #32
   10084:	466a      	mov	r2, sp
   10086:	4b1b      	ldr	r3, [pc, #108]	; (100f4 <bt_att_chan_create_pdu+0xd8>)
   10088:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1008c:	e9c2 3505 	strd	r3, r5, [r2, #20]
   10090:	2303      	movs	r3, #3
   10092:	f842 3f10 	str.w	r3, [r2, #16]!
   10096:	e7d6      	b.n	10046 <bt_att_chan_create_pdu+0x2a>
	switch (att_op_get_type(op)) {
   10098:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   1009c:	f04f 0900 	mov.w	r9, #0
   100a0:	e7e6      	b.n	10070 <bt_att_chan_create_pdu+0x54>
	return z_impl_z_current_get();
   100a2:	f005 fcb9 	bl	15a18 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   100a6:	4b14      	ldr	r3, [pc, #80]	; (100f8 <bt_att_chan_create_pdu+0xdc>)
   100a8:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   100aa:	4814      	ldr	r0, [pc, #80]	; (100fc <bt_att_chan_create_pdu+0xe0>)
   100ac:	bf07      	ittee	eq
   100ae:	2200      	moveq	r2, #0
   100b0:	2300      	moveq	r3, #0
   100b2:	4642      	movne	r2, r8
   100b4:	464b      	movne	r3, r9
   100b6:	f004 ff43 	bl	14f40 <z_impl_k_queue_get>
	if (!data) {
   100ba:	b970      	cbnz	r0, 100da <bt_att_chan_create_pdu+0xbe>
		LOG_WRN("Unable to allocate ATT TX meta");
   100bc:	4b10      	ldr	r3, [pc, #64]	; (10100 <bt_att_chan_create_pdu+0xe4>)
   100be:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   100c2:	617b      	str	r3, [r7, #20]
   100c4:	2302      	movs	r3, #2
   100c6:	480a      	ldr	r0, [pc, #40]	; (100f0 <bt_att_chan_create_pdu+0xd4>)
   100c8:	f107 0210 	add.w	r2, r7, #16
   100cc:	613b      	str	r3, [r7, #16]
   100ce:	f008 f9cb 	bl	18468 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   100d2:	4620      	mov	r0, r4
   100d4:	f001 fc62 	bl	1199c <net_buf_unref>
		return NULL;
   100d8:	e7b9      	b.n	1004e <bt_att_chan_create_pdu+0x32>
	bt_att_tx_meta_data(buf) = data;
   100da:	61a0      	str	r0, [r4, #24]
   100dc:	2101      	movs	r1, #1
   100de:	f104 000c 	add.w	r0, r4, #12
   100e2:	f009 f868 	bl	191b6 <net_buf_simple_add>
	hdr->code = op;
   100e6:	7005      	strb	r5, [r0, #0]
	return buf;
   100e8:	e7b2      	b.n	10050 <bt_att_chan_create_pdu+0x34>
   100ea:	bf00      	nop
   100ec:	0001d3fe 	.word	0x0001d3fe
   100f0:	0001b1c8 	.word	0x0001b1c8
   100f4:	0001d1b1 	.word	0x0001d1b1
   100f8:	20009610 	.word	0x20009610
   100fc:	200085e0 	.word	0x200085e0
   10100:	0001d423 	.word	0x0001d423

00010104 <bt_att_recv>:
{
   10104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10108:	b087      	sub	sp, #28
	if (buf->len < sizeof(*hdr)) {
   1010a:	8a0b      	ldrh	r3, [r1, #16]
{
   1010c:	4682      	mov	sl, r0
   1010e:	460c      	mov	r4, r1
   10110:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   10112:	b97b      	cbnz	r3, 10134 <bt_att_recv+0x30>
		LOG_ERR("Too small ATT PDU received");
   10114:	4b4c      	ldr	r3, [pc, #304]	; (10248 <bt_att_recv+0x144>)
   10116:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1011a:	617b      	str	r3, [r7, #20]
   1011c:	2302      	movs	r3, #2
   1011e:	f107 0210 	add.w	r2, r7, #16
   10122:	613b      	str	r3, [r7, #16]
			LOG_WRN("Ignoring unexpected request");
   10124:	4849      	ldr	r0, [pc, #292]	; (1024c <bt_att_recv+0x148>)
   10126:	f008 f99f 	bl	18468 <z_log_msg_static_create.constprop.0>
}
   1012a:	2000      	movs	r0, #0
   1012c:	371c      	adds	r7, #28
   1012e:	46bd      	mov	sp, r7
   10130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   10134:	2101      	movs	r1, #1
   10136:	f104 000c 	add.w	r0, r4, #12
   1013a:	f009 f86c 	bl	19216 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   1013e:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   10142:	4605      	mov	r5, r0
   10144:	2b00      	cmp	r3, #0
   10146:	d0f0      	beq.n	1012a <bt_att_recv+0x26>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   10148:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   1014a:	7801      	ldrb	r1, [r0, #0]
   1014c:	f8df 8100 	ldr.w	r8, [pc, #256]	; 10250 <bt_att_recv+0x14c>
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   10150:	f1aa 0604 	sub.w	r6, sl, #4
		if (hdr->code == handlers[i].op) {
   10154:	f818 0033 	ldrb.w	r0, [r8, r3, lsl #3]
   10158:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   1015c:	4288      	cmp	r0, r1
   1015e:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   10162:	d114      	bne.n	1018e <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   10164:	f892 9002 	ldrb.w	r9, [r2, #2]
   10168:	f1b9 0f01 	cmp.w	r9, #1
   1016c:	d131      	bne.n	101d2 <bt_att_recv+0xce>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   1016e:	2100      	movs	r1, #0
   10170:	f10a 0030 	add.w	r0, sl, #48	; 0x30
   10174:	f008 fa6b 	bl	1864e <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   10178:	2800      	cmp	r0, #0
   1017a:	d035      	beq.n	101e8 <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected request");
   1017c:	4b35      	ldr	r3, [pc, #212]	; (10254 <bt_att_recv+0x150>)
   1017e:	617b      	str	r3, [r7, #20]
   10180:	2302      	movs	r3, #2
   10182:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   10186:	613b      	str	r3, [r7, #16]
   10188:	f107 0210 	add.w	r2, r7, #16
   1018c:	e7ca      	b.n	10124 <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1018e:	3301      	adds	r3, #1
   10190:	2b0e      	cmp	r3, #14
   10192:	d1df      	bne.n	10154 <bt_att_recv+0x50>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   10194:	466c      	mov	r4, sp
   10196:	b088      	sub	sp, #32
   10198:	466a      	mov	r2, sp
   1019a:	4b2f      	ldr	r3, [pc, #188]	; (10258 <bt_att_recv+0x154>)
   1019c:	482b      	ldr	r0, [pc, #172]	; (1024c <bt_att_recv+0x148>)
   1019e:	e9c2 3105 	strd	r3, r1, [r2, #20]
   101a2:	2303      	movs	r3, #3
   101a4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   101a8:	f842 3f10 	str.w	r3, [r2, #16]!
   101ac:	f008 f95c 	bl	18468 <z_log_msg_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   101b0:	7829      	ldrb	r1, [r5, #0]
   101b2:	46a5      	mov	sp, r4
   101b4:	4608      	mov	r0, r1
   101b6:	f7ff fc25 	bl	fa04 <att_op_get_type>
   101ba:	2800      	cmp	r0, #0
   101bc:	d0b5      	beq.n	1012a <bt_att_recv+0x26>
   101be:	2805      	cmp	r0, #5
   101c0:	d0b3      	beq.n	1012a <bt_att_recv+0x26>
	if (!req) {
   101c2:	2900      	cmp	r1, #0
   101c4:	d0b1      	beq.n	1012a <bt_att_recv+0x26>
   101c6:	2306      	movs	r3, #6
   101c8:	2200      	movs	r2, #0
   101ca:	4630      	mov	r0, r6
   101cc:	f008 fb99 	bl	18902 <send_err_rsp.part.0>
   101d0:	e7ab      	b.n	1012a <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
   101d2:	f1b9 0f05 	cmp.w	r9, #5
   101d6:	d107      	bne.n	101e8 <bt_att_recv+0xe4>
			   atomic_test_and_set_bit(att_chan->flags,
   101d8:	2101      	movs	r1, #1
   101da:	f10a 0030 	add.w	r0, sl, #48	; 0x30
   101de:	f008 fa36 	bl	1864e <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   101e2:	b108      	cbz	r0, 101e8 <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected indication");
   101e4:	4b1d      	ldr	r3, [pc, #116]	; (1025c <bt_att_recv+0x158>)
   101e6:	e7ca      	b.n	1017e <bt_att_recv+0x7a>
	if (buf->len < handler->expect_len) {
   101e8:	44d8      	add	r8, fp
   101ea:	8a23      	ldrh	r3, [r4, #16]
   101ec:	f898 2001 	ldrb.w	r2, [r8, #1]
   101f0:	429a      	cmp	r2, r3
   101f2:	d916      	bls.n	10222 <bt_att_recv+0x11e>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   101f4:	46e9      	mov	r9, sp
   101f6:	b088      	sub	sp, #32
   101f8:	466a      	mov	r2, sp
   101fa:	7829      	ldrb	r1, [r5, #0]
   101fc:	2404      	movs	r4, #4
   101fe:	4818      	ldr	r0, [pc, #96]	; (10260 <bt_att_recv+0x15c>)
   10200:	61d1      	str	r1, [r2, #28]
   10202:	e9c2 0305 	strd	r0, r3, [r2, #20]
   10206:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1020a:	4810      	ldr	r0, [pc, #64]	; (1024c <bt_att_recv+0x148>)
   1020c:	f842 4f10 	str.w	r4, [r2, #16]!
   10210:	f008 f92a 	bl	18468 <z_log_msg_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   10214:	f898 3002 	ldrb.w	r3, [r8, #2]
   10218:	46cd      	mov	sp, r9
   1021a:	2b01      	cmp	r3, #1
   1021c:	d185      	bne.n	1012a <bt_att_recv+0x26>
		err = BT_ATT_ERR_INVALID_PDU;
   1021e:	4623      	mov	r3, r4
   10220:	e00c      	b.n	1023c <bt_att_recv+0x138>
		err = handler->func(att_chan, buf);
   10222:	f8d8 3004 	ldr.w	r3, [r8, #4]
   10226:	4621      	mov	r1, r4
   10228:	4630      	mov	r0, r6
   1022a:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   1022c:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   10230:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   10232:	f47f af7a 	bne.w	1012a <bt_att_recv+0x26>
   10236:	2800      	cmp	r0, #0
   10238:	f43f af77 	beq.w	1012a <bt_att_recv+0x26>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1023c:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   1023e:	2900      	cmp	r1, #0
   10240:	f43f af73 	beq.w	1012a <bt_att_recv+0x26>
   10244:	e7c0      	b.n	101c8 <bt_att_recv+0xc4>
   10246:	bf00      	nop
   10248:	0001d442 	.word	0x0001d442
   1024c:	0001b1c8 	.word	0x0001b1c8
   10250:	0001b794 	.word	0x0001b794
   10254:	0001d477 	.word	0x0001d477
   10258:	0001d45d 	.word	0x0001d45d
   1025c:	0001d493 	.word	0x0001d493
   10260:	0001d4b2 	.word	0x0001d4b2

00010264 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   10264:	b5f0      	push	{r4, r5, r6, r7, lr}
   10266:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   10268:	6803      	ldr	r3, [r0, #0]
   1026a:	460d      	mov	r5, r1
   1026c:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1026e:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   10270:	bf18      	it	ne
   10272:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   10274:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   10276:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   10278:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1027a:	f008 fed4 	bl	19026 <bt_gatt_change_aware>
   1027e:	b948      	cbnz	r0, 10294 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   10280:	2105      	movs	r1, #5
   10282:	f104 0034 	add.w	r0, r4, #52	; 0x34
   10286:	f008 f9e2 	bl	1864e <atomic_test_and_set_bit>
   1028a:	2800      	cmp	r0, #0
   1028c:	d048      	beq.n	10320 <att_write_rsp.constprop.0+0xbc>
			return 0;
   1028e:	2000      	movs	r0, #0
}
   10290:	b007      	add	sp, #28
   10292:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   10294:	2e00      	cmp	r6, #0
   10296:	d045      	beq.n	10324 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   10298:	2218      	movs	r2, #24
   1029a:	2100      	movs	r1, #0
   1029c:	4668      	mov	r0, sp
   1029e:	f007 fc63 	bl	17b68 <memset>
	if (rsp) {
   102a2:	bb67      	cbnz	r7, 102fe <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   102a4:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   102a6:	4631      	mov	r1, r6
	data.conn = chan->att->conn;
   102a8:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   102aa:	4630      	mov	r0, r6
	data.conn = chan->att->conn;
   102ac:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   102ae:	2300      	movs	r3, #0
   102b0:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   102b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   102b6:	4a1c      	ldr	r2, [pc, #112]	; (10328 <att_write_rsp.constprop.0+0xc4>)
	data.value = value;
   102b8:	9303      	str	r3, [sp, #12]
	data.len = len;
   102ba:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
	data.req = req;
   102be:	f88d 5008 	strb.w	r5, [sp, #8]
	data.len = len;
   102c2:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   102c6:	2301      	movs	r3, #1
   102c8:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   102cc:	466b      	mov	r3, sp
   102ce:	f008 f831 	bl	18334 <bt_gatt_foreach_attr>
	if (data.err) {
   102d2:	f89d 3014 	ldrb.w	r3, [sp, #20]
   102d6:	b1e3      	cbz	r3, 10312 <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   102d8:	2f00      	cmp	r7, #0
   102da:	d0d8      	beq.n	1028e <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   102dc:	9b01      	ldr	r3, [sp, #4]
   102de:	6998      	ldr	r0, [r3, #24]
   102e0:	f7ff fbd6 	bl	fa90 <tx_meta_data_free>
			net_buf_unref(data.buf);
   102e4:	9801      	ldr	r0, [sp, #4]
   102e6:	f001 fb59 	bl	1199c <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   102ea:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   102ee:	2d00      	cmp	r5, #0
   102f0:	d0cd      	beq.n	1028e <att_write_rsp.constprop.0+0x2a>
   102f2:	4632      	mov	r2, r6
   102f4:	4629      	mov	r1, r5
   102f6:	4620      	mov	r0, r4
   102f8:	f008 fb03 	bl	18902 <send_err_rsp.part.0>
   102fc:	e7c7      	b.n	1028e <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   102fe:	2200      	movs	r2, #0
   10300:	4639      	mov	r1, r7
   10302:	4620      	mov	r0, r4
   10304:	f7ff fe8a 	bl	1001c <bt_att_chan_create_pdu>
   10308:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1030a:	2800      	cmp	r0, #0
   1030c:	d1ca      	bne.n	102a4 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   1030e:	200e      	movs	r0, #14
   10310:	e7be      	b.n	10290 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   10312:	9901      	ldr	r1, [sp, #4]
   10314:	2900      	cmp	r1, #0
   10316:	d0ba      	beq.n	1028e <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   10318:	4620      	mov	r0, r4
   1031a:	f008 f8d9 	bl	184d0 <bt_att_chan_send_rsp>
   1031e:	e7b6      	b.n	1028e <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   10320:	2012      	movs	r0, #18
   10322:	e7b5      	b.n	10290 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   10324:	2001      	movs	r0, #1
   10326:	e7b3      	b.n	10290 <att_write_rsp.constprop.0+0x2c>
   10328:	000182d3 	.word	0x000182d3

0001032c <bt_att_create_pdu>:
{
   1032c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1032e:	af00      	add	r7, sp, #0
   10330:	460e      	mov	r6, r1
   10332:	4615      	mov	r5, r2
	att = att_get(conn);
   10334:	f7ff fcf2 	bl	fd1c <att_get>
	if (!att) {
   10338:	b1e0      	cbz	r0, 10374 <bt_att_create_pdu+0x48>
	return list->head;
   1033a:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1033c:	4618      	mov	r0, r3
   1033e:	b11b      	cbz	r3, 10348 <bt_att_create_pdu+0x1c>
	return node->next;
   10340:	f850 3988 	ldr.w	r3, [r0], #-136
   10344:	b103      	cbz	r3, 10348 <bt_att_create_pdu+0x1c>
   10346:	3b88      	subs	r3, #136	; 0x88
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   10348:	1c6c      	adds	r4, r5, #1
   1034a:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1034c:	b118      	cbz	r0, 10356 <bt_att_create_pdu+0x2a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1034e:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   10350:	42a1      	cmp	r1, r4
   10352:	d219      	bcs.n	10388 <bt_att_create_pdu+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   10354:	b983      	cbnz	r3, 10378 <bt_att_create_pdu+0x4c>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   10356:	466d      	mov	r5, sp
   10358:	b088      	sub	sp, #32
   1035a:	466a      	mov	r2, sp
   1035c:	4b0e      	ldr	r3, [pc, #56]	; (10398 <bt_att_create_pdu+0x6c>)
   1035e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   10362:	e9c2 3405 	strd	r3, r4, [r2, #20]
   10366:	2303      	movs	r3, #3
   10368:	480c      	ldr	r0, [pc, #48]	; (1039c <bt_att_create_pdu+0x70>)
   1036a:	f842 3f10 	str.w	r3, [r2, #16]!
   1036e:	f008 f87b 	bl	18468 <z_log_msg_static_create.constprop.0>
   10372:	46ad      	mov	sp, r5
		return NULL;
   10374:	2000      	movs	r0, #0
   10376:	e00b      	b.n	10390 <bt_att_create_pdu+0x64>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   10378:	4618      	mov	r0, r3
   1037a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   1037e:	b14b      	cbz	r3, 10394 <bt_att_create_pdu+0x68>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   10380:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   10382:	3b88      	subs	r3, #136	; 0x88
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   10384:	428a      	cmp	r2, r1
   10386:	d8f7      	bhi.n	10378 <bt_att_create_pdu+0x4c>
		return bt_att_chan_create_pdu(chan, op, len);
   10388:	462a      	mov	r2, r5
   1038a:	4631      	mov	r1, r6
   1038c:	f7ff fe46 	bl	1001c <bt_att_chan_create_pdu>
}
   10390:	46bd      	mov	sp, r7
   10392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   10394:	4614      	mov	r4, r2
   10396:	e7da      	b.n	1034e <bt_att_create_pdu+0x22>
   10398:	0001d4d1 	.word	0x0001d4d1
   1039c:	0001b1c8 	.word	0x0001b1c8

000103a0 <att_read_group_req>:
{
   103a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   103a4:	8a0e      	ldrh	r6, [r1, #16]
{
   103a6:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   103a8:	3e04      	subs	r6, #4
   103aa:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   103ac:	2e02      	cmp	r6, #2
{
   103ae:	4608      	mov	r0, r1
   103b0:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   103b2:	d001      	beq.n	103b8 <att_read_group_req+0x18>
   103b4:	2e10      	cmp	r6, #16
   103b6:	d16a      	bne.n	1048e <att_read_group_req+0xee>
   103b8:	2104      	movs	r1, #4
   103ba:	300c      	adds	r0, #12
   103bc:	f008 ff2b 	bl	19216 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   103c0:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   103c4:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   103c6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   103c8:	1d01      	adds	r1, r0, #4
   103ca:	4632      	mov	r2, r6
   103cc:	4640      	mov	r0, r8
   103ce:	f007 fc05 	bl	17bdc <bt_uuid_create>
   103d2:	2800      	cmp	r0, #0
   103d4:	d05d      	beq.n	10492 <att_read_group_req+0xf2>
	if (!start || !end) {
   103d6:	2d00      	cmp	r5, #0
   103d8:	d03a      	beq.n	10450 <att_read_group_req+0xb0>
   103da:	2600      	movs	r6, #0
   103dc:	2f00      	cmp	r7, #0
   103de:	d036      	beq.n	1044e <att_read_group_req+0xae>
	if (start > end) {
   103e0:	42bd      	cmp	r5, r7
   103e2:	d835      	bhi.n	10450 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   103e4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   103e8:	4640      	mov	r0, r8
   103ea:	a901      	add	r1, sp, #4
   103ec:	f88d 6004 	strb.w	r6, [sp, #4]
   103f0:	f8ad 3006 	strh.w	r3, [sp, #6]
   103f4:	f007 fbc4 	bl	17b80 <bt_uuid_cmp>
   103f8:	bb70      	cbnz	r0, 10458 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   103fa:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   103fc:	2214      	movs	r2, #20
   103fe:	2100      	movs	r1, #0
   10400:	a807      	add	r0, sp, #28
   10402:	f007 fbb1 	bl	17b68 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   10406:	2201      	movs	r2, #1
   10408:	2111      	movs	r1, #17
   1040a:	4630      	mov	r0, r6
   1040c:	f7ff ff8e 	bl	1032c <bt_att_create_pdu>
   10410:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   10412:	2800      	cmp	r0, #0
   10414:	d03d      	beq.n	10492 <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   10416:	2101      	movs	r1, #1
   10418:	300c      	adds	r0, #12
	data.uuid = uuid;
   1041a:	e9cd 4807 	strd	r4, r8, [sp, #28]
   1041e:	f008 feca 	bl	191b6 <net_buf_simple_add>
	data.rsp->len = 0U;
   10422:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   10424:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   10426:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   10428:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1042a:	4a1b      	ldr	r2, [pc, #108]	; (10498 <att_read_group_req+0xf8>)
	data.group = NULL;
   1042c:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1042e:	4628      	mov	r0, r5
   10430:	ab07      	add	r3, sp, #28
   10432:	f007 ff7f 	bl	18334 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   10436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10438:	781b      	ldrb	r3, [r3, #0]
   1043a:	bb1b      	cbnz	r3, 10484 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1043c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1043e:	6998      	ldr	r0, [r3, #24]
   10440:	f7ff fb26 	bl	fa90 <tx_meta_data_free>
		net_buf_unref(data.buf);
   10444:	9809      	ldr	r0, [sp, #36]	; 0x24
   10446:	f001 faa9 	bl	1199c <net_buf_unref>
	if (!req) {
   1044a:	230a      	movs	r3, #10
   1044c:	e001      	b.n	10452 <att_read_group_req+0xb2>
			*err = 0U;
   1044e:	463d      	mov	r5, r7
	if (!req) {
   10450:	2301      	movs	r3, #1
   10452:	462a      	mov	r2, r5
   10454:	2110      	movs	r1, #16
   10456:	e00e      	b.n	10476 <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   10458:	f642 0301 	movw	r3, #10241	; 0x2801
   1045c:	4640      	mov	r0, r8
   1045e:	a907      	add	r1, sp, #28
   10460:	f88d 601c 	strb.w	r6, [sp, #28]
   10464:	f8ad 301e 	strh.w	r3, [sp, #30]
   10468:	f007 fb8a 	bl	17b80 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1046c:	2800      	cmp	r0, #0
   1046e:	d0c4      	beq.n	103fa <att_read_group_req+0x5a>
	if (!req) {
   10470:	2310      	movs	r3, #16
   10472:	462a      	mov	r2, r5
   10474:	4619      	mov	r1, r3
   10476:	4620      	mov	r0, r4
   10478:	f008 fa43 	bl	18902 <send_err_rsp.part.0>
		return 0;
   1047c:	2000      	movs	r0, #0
}
   1047e:	b00c      	add	sp, #48	; 0x30
   10480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   10484:	4620      	mov	r0, r4
   10486:	9909      	ldr	r1, [sp, #36]	; 0x24
   10488:	f008 f822 	bl	184d0 <bt_att_chan_send_rsp>
	return 0;
   1048c:	e7f6      	b.n	1047c <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   1048e:	2004      	movs	r0, #4
   10490:	e7f5      	b.n	1047e <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   10492:	200e      	movs	r0, #14
   10494:	e7f3      	b.n	1047e <att_read_group_req+0xde>
   10496:	bf00      	nop
   10498:	0000fdc1 	.word	0x0000fdc1

0001049c <att_read_mult_vl_req>:
{
   1049c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   104a0:	6846      	ldr	r6, [r0, #4]
{
   104a2:	4604      	mov	r4, r0
   104a4:	460d      	mov	r5, r1
   104a6:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   104a8:	2101      	movs	r1, #1
   104aa:	4630      	mov	r0, r6
   104ac:	f008 fdbb 	bl	19026 <bt_gatt_change_aware>
   104b0:	b950      	cbnz	r0, 104c8 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   104b2:	2105      	movs	r1, #5
   104b4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   104b8:	f008 f8c9 	bl	1864e <atomic_test_and_set_bit>
   104bc:	2800      	cmp	r0, #0
   104be:	d13b      	bne.n	10538 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   104c0:	2012      	movs	r0, #18
}
   104c2:	b005      	add	sp, #20
   104c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   104c8:	2210      	movs	r2, #16
   104ca:	2100      	movs	r1, #0
   104cc:	4668      	mov	r0, sp
   104ce:	f007 fb4b 	bl	17b68 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   104d2:	2200      	movs	r2, #0
   104d4:	2121      	movs	r1, #33	; 0x21
   104d6:	4630      	mov	r0, r6
   104d8:	f7ff ff28 	bl	1032c <bt_att_create_pdu>
   104dc:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   104de:	b368      	cbz	r0, 1053c <att_read_mult_vl_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   104e0:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   104e4:	f8df 9058 	ldr.w	r9, [pc, #88]	; 10540 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   104e8:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   104ea:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   104ee:	8a2b      	ldrh	r3, [r5, #16]
   104f0:	2b01      	cmp	r3, #1
   104f2:	d804      	bhi.n	104fe <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   104f4:	4620      	mov	r0, r4
   104f6:	9902      	ldr	r1, [sp, #8]
   104f8:	f007 ffea 	bl	184d0 <bt_att_chan_send_rsp>
	return 0;
   104fc:	e01c      	b.n	10538 <att_read_mult_vl_req+0x9c>
   104fe:	4638      	mov	r0, r7
   10500:	f008 fe91 	bl	19226 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   10504:	466b      	mov	r3, sp
   10506:	464a      	mov	r2, r9
   10508:	4601      	mov	r1, r0
   1050a:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1050c:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   10510:	f007 ff10 	bl	18334 <bt_gatt_foreach_attr>
		if (data.err) {
   10514:	f89d 300c 	ldrb.w	r3, [sp, #12]
   10518:	2b00      	cmp	r3, #0
   1051a:	d0e8      	beq.n	104ee <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1051c:	9b02      	ldr	r3, [sp, #8]
   1051e:	6998      	ldr	r0, [r3, #24]
   10520:	f7ff fab6 	bl	fa90 <tx_meta_data_free>
			net_buf_unref(data.buf);
   10524:	9802      	ldr	r0, [sp, #8]
   10526:	f001 fa39 	bl	1199c <net_buf_unref>
	if (!req) {
   1052a:	4632      	mov	r2, r6
   1052c:	2120      	movs	r1, #32
   1052e:	4620      	mov	r0, r4
   10530:	f89d 300c 	ldrb.w	r3, [sp, #12]
   10534:	f008 f9e5 	bl	18902 <send_err_rsp.part.0>
			return 0;
   10538:	2000      	movs	r0, #0
   1053a:	e7c2      	b.n	104c2 <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   1053c:	200e      	movs	r0, #14
   1053e:	e7c0      	b.n	104c2 <att_read_mult_vl_req+0x26>
   10540:	000186b7 	.word	0x000186b7

00010544 <att_read_mult_req>:
{
   10544:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   10548:	6846      	ldr	r6, [r0, #4]
{
   1054a:	4604      	mov	r4, r0
   1054c:	460d      	mov	r5, r1
   1054e:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   10550:	2101      	movs	r1, #1
   10552:	4630      	mov	r0, r6
   10554:	f008 fd67 	bl	19026 <bt_gatt_change_aware>
   10558:	b950      	cbnz	r0, 10570 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1055a:	2105      	movs	r1, #5
   1055c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   10560:	f008 f875 	bl	1864e <atomic_test_and_set_bit>
   10564:	2800      	cmp	r0, #0
   10566:	d13b      	bne.n	105e0 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   10568:	2012      	movs	r0, #18
}
   1056a:	b005      	add	sp, #20
   1056c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   10570:	2210      	movs	r2, #16
   10572:	2100      	movs	r1, #0
   10574:	4668      	mov	r0, sp
   10576:	f007 faf7 	bl	17b68 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1057a:	2200      	movs	r2, #0
   1057c:	210f      	movs	r1, #15
   1057e:	4630      	mov	r0, r6
   10580:	f7ff fed4 	bl	1032c <bt_att_create_pdu>
   10584:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   10586:	b368      	cbz	r0, 105e4 <att_read_mult_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   10588:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1058c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 105e8 <att_read_mult_req+0xa4>
	data.chan = chan;
   10590:	9400      	str	r4, [sp, #0]
   10592:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   10596:	8a2b      	ldrh	r3, [r5, #16]
   10598:	2b01      	cmp	r3, #1
   1059a:	d804      	bhi.n	105a6 <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   1059c:	4620      	mov	r0, r4
   1059e:	9902      	ldr	r1, [sp, #8]
   105a0:	f007 ff96 	bl	184d0 <bt_att_chan_send_rsp>
	return 0;
   105a4:	e01c      	b.n	105e0 <att_read_mult_req+0x9c>
   105a6:	4638      	mov	r0, r7
   105a8:	f008 fe3d 	bl	19226 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   105ac:	466b      	mov	r3, sp
   105ae:	464a      	mov	r2, r9
   105b0:	4601      	mov	r1, r0
   105b2:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   105b4:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   105b8:	f007 febc 	bl	18334 <bt_gatt_foreach_attr>
		if (data.err) {
   105bc:	f89d 300c 	ldrb.w	r3, [sp, #12]
   105c0:	2b00      	cmp	r3, #0
   105c2:	d0e8      	beq.n	10596 <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   105c4:	9b02      	ldr	r3, [sp, #8]
   105c6:	6998      	ldr	r0, [r3, #24]
   105c8:	f7ff fa62 	bl	fa90 <tx_meta_data_free>
			net_buf_unref(data.buf);
   105cc:	9802      	ldr	r0, [sp, #8]
   105ce:	f001 f9e5 	bl	1199c <net_buf_unref>
	if (!req) {
   105d2:	4632      	mov	r2, r6
   105d4:	210e      	movs	r1, #14
   105d6:	4620      	mov	r0, r4
   105d8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   105dc:	f008 f991 	bl	18902 <send_err_rsp.part.0>
			return 0;
   105e0:	2000      	movs	r0, #0
   105e2:	e7c2      	b.n	1056a <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   105e4:	200e      	movs	r0, #14
   105e6:	e7c0      	b.n	1056a <att_read_mult_req+0x26>
   105e8:	00018671 	.word	0x00018671

000105ec <att_read_rsp>:
{
   105ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   105f0:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   105f4:	4604      	mov	r4, r0
   105f6:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   105f8:	4640      	mov	r0, r8
   105fa:	2101      	movs	r1, #1
{
   105fc:	4617      	mov	r7, r2
   105fe:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   10600:	f008 fd11 	bl	19026 <bt_gatt_change_aware>
   10604:	b948      	cbnz	r0, 1061a <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   10606:	2105      	movs	r1, #5
   10608:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1060c:	f008 f81f 	bl	1864e <atomic_test_and_set_bit>
   10610:	bb78      	cbnz	r0, 10672 <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   10612:	2012      	movs	r0, #18
}
   10614:	b004      	add	sp, #16
   10616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   1061a:	b38d      	cbz	r5, 10680 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   1061c:	2210      	movs	r2, #16
   1061e:	2100      	movs	r1, #0
   10620:	4668      	mov	r0, sp
   10622:	f007 faa1 	bl	17b68 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   10626:	2200      	movs	r2, #0
   10628:	4639      	mov	r1, r7
   1062a:	4640      	mov	r0, r8
   1062c:	f7ff fe7e 	bl	1032c <bt_att_create_pdu>
   10630:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   10632:	b338      	cbz	r0, 10684 <att_read_rsp+0x98>
	data.offset = offset;
   10634:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   10638:	4629      	mov	r1, r5
	data.offset = offset;
   1063a:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1063e:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   10640:	4628      	mov	r0, r5
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   10642:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   10646:	4a10      	ldr	r2, [pc, #64]	; (10688 <att_read_rsp+0x9c>)
   10648:	466b      	mov	r3, sp
	data.chan = chan;
   1064a:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1064c:	f007 fe72 	bl	18334 <bt_gatt_foreach_attr>
	if (data.err) {
   10650:	f89d 300c 	ldrb.w	r3, [sp, #12]
   10654:	b17b      	cbz	r3, 10676 <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   10656:	9b02      	ldr	r3, [sp, #8]
   10658:	6998      	ldr	r0, [r3, #24]
   1065a:	f7ff fa19 	bl	fa90 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1065e:	9802      	ldr	r0, [sp, #8]
   10660:	f001 f99c 	bl	1199c <net_buf_unref>
	if (!req) {
   10664:	462a      	mov	r2, r5
   10666:	4631      	mov	r1, r6
   10668:	4620      	mov	r0, r4
   1066a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1066e:	f008 f948 	bl	18902 <send_err_rsp.part.0>
			return 0;
   10672:	2000      	movs	r0, #0
   10674:	e7ce      	b.n	10614 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   10676:	4620      	mov	r0, r4
   10678:	9902      	ldr	r1, [sp, #8]
   1067a:	f007 ff29 	bl	184d0 <bt_att_chan_send_rsp>
	return 0;
   1067e:	e7f8      	b.n	10672 <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   10680:	2001      	movs	r0, #1
   10682:	e7c7      	b.n	10614 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   10684:	200e      	movs	r0, #14
   10686:	e7c5      	b.n	10614 <att_read_rsp+0x28>
   10688:	00018671 	.word	0x00018671

0001068c <att_read_type_req>:
{
   1068c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   10690:	8a0d      	ldrh	r5, [r1, #16]
{
   10692:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   10694:	3d04      	subs	r5, #4
   10696:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   10698:	2d02      	cmp	r5, #2
{
   1069a:	4608      	mov	r0, r1
   1069c:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   1069e:	d001      	beq.n	106a4 <att_read_type_req+0x18>
   106a0:	2d10      	cmp	r5, #16
   106a2:	d150      	bne.n	10746 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   106a4:	2104      	movs	r1, #4
   106a6:	300c      	adds	r0, #12
   106a8:	f008 fdb5 	bl	19216 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   106ac:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   106b0:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   106b2:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   106b4:	1d01      	adds	r1, r0, #4
   106b6:	462a      	mov	r2, r5
   106b8:	4640      	mov	r0, r8
   106ba:	f007 fa8f 	bl	17bdc <bt_uuid_create>
   106be:	b188      	cbz	r0, 106e4 <att_read_type_req+0x58>
	if (!start || !end) {
   106c0:	b19e      	cbz	r6, 106ea <att_read_type_req+0x5e>
   106c2:	b18f      	cbz	r7, 106e8 <att_read_type_req+0x5c>
	if (start > end) {
   106c4:	42b7      	cmp	r7, r6
   106c6:	d310      	bcc.n	106ea <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   106c8:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   106ca:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   106cc:	2100      	movs	r1, #0
   106ce:	eb0d 0002 	add.w	r0, sp, r2
   106d2:	f007 fa49 	bl	17b68 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   106d6:	2201      	movs	r2, #1
   106d8:	2109      	movs	r1, #9
   106da:	4628      	mov	r0, r5
   106dc:	f7ff fe26 	bl	1032c <bt_att_create_pdu>
   106e0:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   106e2:	b960      	cbnz	r0, 106fe <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   106e4:	200e      	movs	r0, #14
   106e6:	e007      	b.n	106f8 <att_read_type_req+0x6c>
			*err = 0U;
   106e8:	463e      	mov	r6, r7
	if (!req) {
   106ea:	2301      	movs	r3, #1
   106ec:	4632      	mov	r2, r6
   106ee:	2108      	movs	r1, #8
   106f0:	4620      	mov	r0, r4
   106f2:	f008 f906 	bl	18902 <send_err_rsp.part.0>
		return 0;
   106f6:	2000      	movs	r0, #0
}
   106f8:	b00c      	add	sp, #48	; 0x30
   106fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   106fe:	2101      	movs	r1, #1
   10700:	300c      	adds	r0, #12
	data.uuid = uuid;
   10702:	e9cd 4806 	strd	r4, r8, [sp, #24]
   10706:	f008 fd56 	bl	191b6 <net_buf_simple_add>
	data.rsp->len = 0U;
   1070a:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1070c:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   1070e:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   10710:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   10712:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   10714:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   10718:	4630      	mov	r0, r6
   1071a:	ab06      	add	r3, sp, #24
   1071c:	4a0b      	ldr	r2, [pc, #44]	; (1074c <att_read_type_req+0xc0>)
   1071e:	f007 fe09 	bl	18334 <bt_gatt_foreach_attr>
	if (data.err) {
   10722:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   10726:	b14b      	cbz	r3, 1073c <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   10728:	9b08      	ldr	r3, [sp, #32]
   1072a:	6998      	ldr	r0, [r3, #24]
   1072c:	f7ff f9b0 	bl	fa90 <tx_meta_data_free>
		net_buf_unref(data.buf);
   10730:	9808      	ldr	r0, [sp, #32]
   10732:	f001 f933 	bl	1199c <net_buf_unref>
	if (!req) {
   10736:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1073a:	e7d7      	b.n	106ec <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   1073c:	4620      	mov	r0, r4
   1073e:	9908      	ldr	r1, [sp, #32]
   10740:	f007 fec6 	bl	184d0 <bt_att_chan_send_rsp>
	return 0;
   10744:	e7d7      	b.n	106f6 <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   10746:	2004      	movs	r0, #4
   10748:	e7d6      	b.n	106f8 <att_read_type_req+0x6c>
   1074a:	bf00      	nop
   1074c:	0000fe6d 	.word	0x0000fe6d

00010750 <att_find_type_req>:
{
   10750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10754:	460f      	mov	r7, r1
   10756:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   10758:	2106      	movs	r1, #6
   1075a:	b086      	sub	sp, #24
   1075c:	f107 000c 	add.w	r0, r7, #12
   10760:	f008 fd59 	bl	19216 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   10764:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   10766:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   1076a:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   1076c:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   10770:	b1c5      	cbz	r5, 107a4 <att_find_type_req+0x54>
   10772:	2300      	movs	r3, #0
   10774:	f1b8 0f00 	cmp.w	r8, #0
   10778:	d013      	beq.n	107a2 <att_find_type_req+0x52>
	if (start > end) {
   1077a:	4545      	cmp	r5, r8
   1077c:	d812      	bhi.n	107a4 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1077e:	f88d 3000 	strb.w	r3, [sp]
   10782:	f88d 3004 	strb.w	r3, [sp, #4]
   10786:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1078a:	4668      	mov	r0, sp
   1078c:	a901      	add	r1, sp, #4
   1078e:	f8ad 2002 	strh.w	r2, [sp, #2]
   10792:	f8ad 3006 	strh.w	r3, [sp, #6]
   10796:	f007 f9f3 	bl	17b80 <bt_uuid_cmp>
   1079a:	4606      	mov	r6, r0
   1079c:	b160      	cbz	r0, 107b8 <att_find_type_req+0x68>
	if (!req) {
   1079e:	230a      	movs	r3, #10
   107a0:	e001      	b.n	107a6 <att_find_type_req+0x56>
			*err = 0U;
   107a2:	4645      	mov	r5, r8
	if (!req) {
   107a4:	2301      	movs	r3, #1
   107a6:	462a      	mov	r2, r5
   107a8:	2106      	movs	r1, #6
   107aa:	4620      	mov	r0, r4
   107ac:	f008 f8a9 	bl	18902 <send_err_rsp.part.0>
		return 0;
   107b0:	2000      	movs	r0, #0
}
   107b2:	b006      	add	sp, #24
   107b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   107b8:	f8d4 a004 	ldr.w	sl, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   107bc:	4601      	mov	r1, r0
   107be:	2214      	movs	r2, #20
   107c0:	a801      	add	r0, sp, #4
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   107c2:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   107c4:	f007 f9d0 	bl	17b68 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   107c8:	4632      	mov	r2, r6
   107ca:	2107      	movs	r1, #7
   107cc:	4650      	mov	r0, sl
   107ce:	f7ff fdad 	bl	1032c <bt_att_create_pdu>
   107d2:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   107d4:	b1f8      	cbz	r0, 10816 <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   107d6:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   107d8:	4641      	mov	r1, r8
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   107da:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   107de:	4628      	mov	r0, r5
   107e0:	ab01      	add	r3, sp, #4
   107e2:	4a0e      	ldr	r2, [pc, #56]	; (1081c <att_find_type_req+0xcc>)
	data.value = value;
   107e4:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.chan = chan;
   107e8:	9401      	str	r4, [sp, #4]
	data.value_len = value_len;
   107ea:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   107ee:	f007 fda1 	bl	18334 <bt_gatt_foreach_attr>
	if (data.err) {
   107f2:	f89d 3015 	ldrb.w	r3, [sp, #21]
   107f6:	b14b      	cbz	r3, 1080c <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   107f8:	9b02      	ldr	r3, [sp, #8]
   107fa:	6998      	ldr	r0, [r3, #24]
   107fc:	f7ff f948 	bl	fa90 <tx_meta_data_free>
		net_buf_unref(data.buf);
   10800:	9802      	ldr	r0, [sp, #8]
   10802:	f001 f8cb 	bl	1199c <net_buf_unref>
	if (!req) {
   10806:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1080a:	e7cc      	b.n	107a6 <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   1080c:	4620      	mov	r0, r4
   1080e:	9902      	ldr	r1, [sp, #8]
   10810:	f007 fe5e 	bl	184d0 <bt_att_chan_send_rsp>
	return 0;
   10814:	e7cc      	b.n	107b0 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   10816:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   10818:	e7cb      	b.n	107b2 <att_find_type_req+0x62>
   1081a:	bf00      	nop
   1081c:	0000faad 	.word	0x0000faad

00010820 <att_find_info_req>:
{
   10820:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   10822:	68cb      	ldr	r3, [r1, #12]
{
   10824:	4604      	mov	r4, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   10826:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   10828:	885e      	ldrh	r6, [r3, #2]
{
   1082a:	b085      	sub	sp, #20
	if (!start || !end) {
   1082c:	b195      	cbz	r5, 10854 <att_find_info_req+0x34>
   1082e:	b186      	cbz	r6, 10852 <att_find_info_req+0x32>
	if (start > end) {
   10830:	42b5      	cmp	r5, r6
   10832:	d80f      	bhi.n	10854 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   10834:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   10836:	2210      	movs	r2, #16
   10838:	2100      	movs	r1, #0
   1083a:	4668      	mov	r0, sp
   1083c:	f007 f994 	bl	17b68 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   10840:	2200      	movs	r2, #0
   10842:	2105      	movs	r1, #5
   10844:	4638      	mov	r0, r7
   10846:	f7ff fd71 	bl	1032c <bt_att_create_pdu>
   1084a:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   1084c:	b958      	cbnz	r0, 10866 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   1084e:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   10850:	e007      	b.n	10862 <att_find_info_req+0x42>
			*err = 0U;
   10852:	4635      	mov	r5, r6
	if (!req) {
   10854:	2301      	movs	r3, #1
   10856:	462a      	mov	r2, r5
   10858:	2104      	movs	r1, #4
   1085a:	4620      	mov	r0, r4
   1085c:	f008 f851 	bl	18902 <send_err_rsp.part.0>
		return 0;
   10860:	2000      	movs	r0, #0
}
   10862:	b005      	add	sp, #20
   10864:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   10866:	466b      	mov	r3, sp
   10868:	4631      	mov	r1, r6
   1086a:	4628      	mov	r0, r5
   1086c:	4a09      	ldr	r2, [pc, #36]	; (10894 <att_find_info_req+0x74>)
	data.chan = chan;
   1086e:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   10870:	f007 fd60 	bl	18334 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   10874:	9b02      	ldr	r3, [sp, #8]
   10876:	b943      	cbnz	r3, 1088a <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   10878:	9b01      	ldr	r3, [sp, #4]
   1087a:	6998      	ldr	r0, [r3, #24]
   1087c:	f7ff f908 	bl	fa90 <tx_meta_data_free>
		net_buf_unref(data.buf);
   10880:	9801      	ldr	r0, [sp, #4]
   10882:	f001 f88b 	bl	1199c <net_buf_unref>
	if (!req) {
   10886:	230a      	movs	r3, #10
   10888:	e7e5      	b.n	10856 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   1088a:	4620      	mov	r0, r4
   1088c:	9901      	ldr	r1, [sp, #4]
   1088e:	f007 fe1f 	bl	184d0 <bt_att_chan_send_rsp>
	return 0;
   10892:	e7e5      	b.n	10860 <att_find_info_req+0x40>
   10894:	0001834b 	.word	0x0001834b

00010898 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   10898:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   1089a:	4c0b      	ldr	r4, [pc, #44]	; (108c8 <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   1089c:	4d0b      	ldr	r5, [pc, #44]	; (108cc <bt_att_init+0x34>)
   1089e:	4620      	mov	r0, r4
   108a0:	f009 fe14 	bl	1a4cc <z_impl_k_queue_init>
   108a4:	4629      	mov	r1, r5
   108a6:	4620      	mov	r0, r4
   108a8:	f009 fe1c 	bl	1a4e4 <k_queue_append>
   108ac:	4620      	mov	r0, r4
   108ae:	f105 0114 	add.w	r1, r5, #20
   108b2:	f009 fe17 	bl	1a4e4 <k_queue_append>
   108b6:	4620      	mov	r0, r4
   108b8:	f105 0128 	add.w	r1, r5, #40	; 0x28
   108bc:	f009 fe12 	bl	1a4e4 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   108c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   108c4:	f000 bad6 	b.w	10e74 <bt_gatt_init>
   108c8:	200085e0 	.word	0x200085e0
   108cc:	20009858 	.word	0x20009858

000108d0 <bt_att_req_alloc>:
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
	struct bt_att_req *req = NULL;
   108d0:	2300      	movs	r3, #0
{
   108d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   108d4:	4605      	mov	r5, r0
   108d6:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   108d8:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   108da:	f005 f89d 	bl	15a18 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   108de:	4b0b      	ldr	r3, [pc, #44]	; (1090c <bt_att_req_alloc+0x3c>)
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   108e0:	a901      	add	r1, sp, #4
	if (k_current_get() == att_handle_rsp_thread) {
   108e2:	681b      	ldr	r3, [r3, #0]
   108e4:	4283      	cmp	r3, r0
		timeout = K_NO_WAIT;
   108e6:	bf04      	itt	eq
   108e8:	2500      	moveq	r5, #0
   108ea:	462c      	moveq	r4, r5
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   108ec:	462a      	mov	r2, r5
   108ee:	4623      	mov	r3, r4
   108f0:	4807      	ldr	r0, [pc, #28]	; (10910 <bt_att_req_alloc+0x40>)
   108f2:	f004 f96d 	bl	14bd0 <k_mem_slab_alloc>
   108f6:	4601      	mov	r1, r0
   108f8:	b930      	cbnz	r0, 10908 <bt_att_req_alloc+0x38>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   108fa:	2210      	movs	r2, #16
   108fc:	9801      	ldr	r0, [sp, #4]
   108fe:	f007 f933 	bl	17b68 <memset>

	return req;
   10902:	9801      	ldr	r0, [sp, #4]
}
   10904:	b003      	add	sp, #12
   10906:	bd30      	pop	{r4, r5, pc}
		return NULL;
   10908:	2000      	movs	r0, #0
   1090a:	e7fb      	b.n	10904 <bt_att_req_alloc+0x34>
   1090c:	20009894 	.word	0x20009894
   10910:	2000856c 	.word	0x2000856c

00010914 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   10914:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   10916:	6883      	ldr	r3, [r0, #8]
{
   10918:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   1091a:	b14b      	cbz	r3, 10930 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   1091c:	6998      	ldr	r0, [r3, #24]
   1091e:	f7ff f8b7 	bl	fa90 <tx_meta_data_free>
		net_buf_unref(req->buf);
   10922:	9b01      	ldr	r3, [sp, #4]
   10924:	6898      	ldr	r0, [r3, #8]
   10926:	f001 f839 	bl	1199c <net_buf_unref>
		req->buf = NULL;
   1092a:	2200      	movs	r2, #0
   1092c:	9b01      	ldr	r3, [sp, #4]
   1092e:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   10930:	4803      	ldr	r0, [pc, #12]	; (10940 <bt_att_req_free+0x2c>)
   10932:	a901      	add	r1, sp, #4
   10934:	f009 fd0c 	bl	1a350 <k_mem_slab_free>
}
   10938:	b003      	add	sp, #12
   1093a:	f85d fb04 	ldr.w	pc, [sp], #4
   1093e:	bf00      	nop
   10940:	2000856c 	.word	0x2000856c

00010944 <att_handle_rsp>:
{
   10944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10948:	4604      	mov	r4, r0
   1094a:	b088      	sub	sp, #32
	k_work_cancel_delayable(&chan->timeout_work);
   1094c:	3058      	adds	r0, #88	; 0x58
{
   1094e:	460e      	mov	r6, r1
   10950:	4617      	mov	r7, r2
   10952:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   10954:	f009 feb4 	bl	1a6c0 <k_work_cancel_delayable>
	if (!chan->req) {
   10958:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1095a:	b980      	cbnz	r0, 1097e <att_handle_rsp+0x3a>
		LOG_WRN("No pending ATT request");
   1095c:	4b19      	ldr	r3, [pc, #100]	; (109c4 <att_handle_rsp+0x80>)
   1095e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   10962:	9307      	str	r3, [sp, #28]
   10964:	2302      	movs	r3, #2
   10966:	4818      	ldr	r0, [pc, #96]	; (109c8 <att_handle_rsp+0x84>)
   10968:	aa06      	add	r2, sp, #24
   1096a:	9306      	str	r3, [sp, #24]
   1096c:	f007 fd7c 	bl	18468 <z_log_msg_static_create.constprop.0>
	att_req_send_process(chan->att);
   10970:	6820      	ldr	r0, [r4, #0]
   10972:	f007 ff01 	bl	18778 <att_req_send_process>
}
   10976:	2000      	movs	r0, #0
   10978:	b008      	add	sp, #32
   1097a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   1097e:	4b13      	ldr	r3, [pc, #76]	; (109cc <att_handle_rsp+0x88>)
   10980:	f04f 0800 	mov.w	r8, #0
   10984:	4298      	cmp	r0, r3
   10986:	d102      	bne.n	1098e <att_handle_rsp+0x4a>
		chan->req = NULL;
   10988:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
   1098c:	e7f0      	b.n	10970 <att_handle_rsp+0x2c>
	func = chan->req->func;
   1098e:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   10992:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   10996:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   10998:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
   1099c:	f7ff ffba 	bl	10914 <bt_att_req_free>
	att_req_send_process(chan->att);
   109a0:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   109a2:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
	att_req_send_process(chan->att);
   109a6:	f007 fee7 	bl	18778 <att_req_send_process>
	if (func) {
   109aa:	f1b9 0f00 	cmp.w	r9, #0
   109ae:	d0e2      	beq.n	10976 <att_handle_rsp+0x32>
		func(chan->att->conn, err, pdu, len, params);
   109b0:	6820      	ldr	r0, [r4, #0]
   109b2:	f8cd a000 	str.w	sl, [sp]
   109b6:	463b      	mov	r3, r7
   109b8:	4632      	mov	r2, r6
   109ba:	4629      	mov	r1, r5
   109bc:	6800      	ldr	r0, [r0, #0]
   109be:	47c8      	blx	r9
   109c0:	e7d9      	b.n	10976 <att_handle_rsp+0x32>
   109c2:	bf00      	nop
   109c4:	0001d4ec 	.word	0x0001d4ec
   109c8:	0001b1c8 	.word	0x0001b1c8
   109cc:	20009898 	.word	0x20009898

000109d0 <bt_att_disconnected>:
{
   109d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   109d4:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   109d8:	4604      	mov	r4, r0
	if (!att_chan->att) {
   109da:	2e00      	cmp	r6, #0
   109dc:	d05a      	beq.n	10a94 <bt_att_disconnected+0xc4>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   109de:	f100 0184 	add.w	r1, r0, #132	; 0x84
   109e2:	f106 0024 	add.w	r0, r6, #36	; 0x24
   109e6:	f007 fe0c 	bl	18602 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   109ea:	1f27      	subs	r7, r4, #4
   109ec:	f104 0838 	add.w	r8, r4, #56	; 0x38
   109f0:	2200      	movs	r2, #0
   109f2:	2300      	movs	r3, #0
   109f4:	4640      	mov	r0, r8
   109f6:	f008 fb83 	bl	19100 <net_buf_get>
   109fa:	4605      	mov	r5, r0
   109fc:	bb48      	cbnz	r0, 10a52 <bt_att_disconnected+0x82>
	if (chan->req) {
   109fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10a00:	b12b      	cbz	r3, 10a0e <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   10a02:	4602      	mov	r2, r0
   10a04:	4601      	mov	r1, r0
   10a06:	230e      	movs	r3, #14
   10a08:	4638      	mov	r0, r7
   10a0a:	f7ff ff9b 	bl	10944 <att_handle_rsp>
	chan->att = NULL;
   10a0e:	2300      	movs	r3, #0
	atomic_clear_bit(chan->flags, ATT_CONNECTED);
   10a10:	2102      	movs	r1, #2
	chan->att = NULL;
   10a12:	f844 3c04 	str.w	r3, [r4, #-4]
	atomic_clear_bit(chan->flags, ATT_CONNECTED);
   10a16:	f104 0030 	add.w	r0, r4, #48	; 0x30
   10a1a:	f007 fe0b 	bl	18634 <atomic_clear_bit>
	if (!sys_slist_is_empty(&att->chans)) {
   10a1e:	6a73      	ldr	r3, [r6, #36]	; 0x24
   10a20:	2b00      	cmp	r3, #0
   10a22:	d137      	bne.n	10a94 <bt_att_disconnected+0xc4>
	att_reset(att);
   10a24:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   10a26:	9803      	ldr	r0, [sp, #12]
   10a28:	2200      	movs	r2, #0
   10a2a:	2300      	movs	r3, #0
   10a2c:	300c      	adds	r0, #12
   10a2e:	f008 fb67 	bl	19100 <net_buf_get>
   10a32:	4605      	mov	r5, r0
   10a34:	b9a0      	cbnz	r0, 10a60 <bt_att_disconnected+0x90>
	while (!sys_slist_is_empty(&att->reqs)) {
   10a36:	9803      	ldr	r0, [sp, #12]
	return list->head;
   10a38:	6845      	ldr	r5, [r0, #4]
   10a3a:	b9c5      	cbnz	r5, 10a6e <bt_att_disconnected+0x9e>
	att->conn = NULL;
   10a3c:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   10a3e:	a903      	add	r1, sp, #12
   10a40:	4816      	ldr	r0, [pc, #88]	; (10a9c <bt_att_disconnected+0xcc>)
   10a42:	f009 fc85 	bl	1a350 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   10a46:	6820      	ldr	r0, [r4, #0]
}
   10a48:	b004      	add	sp, #16
   10a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   10a4e:	f000 be99 	b.w	11784 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   10a52:	69a8      	ldr	r0, [r5, #24]
   10a54:	f7ff f81c 	bl	fa90 <tx_meta_data_free>
		net_buf_unref(buf);
   10a58:	4628      	mov	r0, r5
   10a5a:	f000 ff9f 	bl	1199c <net_buf_unref>
   10a5e:	e7c7      	b.n	109f0 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   10a60:	69a8      	ldr	r0, [r5, #24]
   10a62:	f7ff f815 	bl	fa90 <tx_meta_data_free>
		net_buf_unref(buf);
   10a66:	4628      	mov	r0, r5
   10a68:	f000 ff98 	bl	1199c <net_buf_unref>
   10a6c:	e7db      	b.n	10a26 <bt_att_disconnected+0x56>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10a6e:	6882      	ldr	r2, [r0, #8]
	return node->next;
   10a70:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10a72:	4295      	cmp	r5, r2
	list->head = node;
   10a74:	6043      	str	r3, [r0, #4]
	list->tail = node;
   10a76:	bf08      	it	eq
   10a78:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   10a7a:	686e      	ldr	r6, [r5, #4]
   10a7c:	b136      	cbz	r6, 10a8c <bt_att_disconnected+0xbc>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   10a7e:	68eb      	ldr	r3, [r5, #12]
   10a80:	210e      	movs	r1, #14
   10a82:	9300      	str	r3, [sp, #0]
   10a84:	2300      	movs	r3, #0
   10a86:	6800      	ldr	r0, [r0, #0]
   10a88:	461a      	mov	r2, r3
   10a8a:	47b0      	blx	r6
		bt_att_req_free(req);
   10a8c:	4628      	mov	r0, r5
   10a8e:	f7ff ff41 	bl	10914 <bt_att_req_free>
   10a92:	e7d0      	b.n	10a36 <bt_att_disconnected+0x66>
}
   10a94:	b004      	add	sp, #16
   10a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10a9a:	bf00      	nop
   10a9c:	20008534 	.word	0x20008534

00010aa0 <att_timeout>:
{
   10aa0:	b510      	push	{r4, lr}
   10aa2:	4604      	mov	r4, r0
   10aa4:	b086      	sub	sp, #24
	LOG_ERR("ATT Timeout");
   10aa6:	4b08      	ldr	r3, [pc, #32]	; (10ac8 <att_timeout+0x28>)
   10aa8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10aac:	9305      	str	r3, [sp, #20]
   10aae:	2302      	movs	r3, #2
   10ab0:	4806      	ldr	r0, [pc, #24]	; (10acc <att_timeout+0x2c>)
   10ab2:	aa04      	add	r2, sp, #16
   10ab4:	9304      	str	r3, [sp, #16]
   10ab6:	f007 fcd7 	bl	18468 <z_log_msg_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   10aba:	f1a4 0054 	sub.w	r0, r4, #84	; 0x54
}
   10abe:	b006      	add	sp, #24
   10ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   10ac4:	f7ff bf84 	b.w	109d0 <bt_att_disconnected>
   10ac8:	0001d503 	.word	0x0001d503
   10acc:	0001b1c8 	.word	0x0001b1c8

00010ad0 <find_cf_cfg>:
	}
#endif	/* CONFIG_BT_SETTINGS */
}

static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   10ad0:	b508      	push	{r3, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   10ad2:	b930      	cbnz	r0, 10ae2 <find_cf_cfg+0x12>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   10ad4:	4907      	ldr	r1, [pc, #28]	; (10af4 <find_cf_cfg+0x24>)
   10ad6:	4808      	ldr	r0, [pc, #32]	; (10af8 <find_cf_cfg+0x28>)
   10ad8:	f008 f88f 	bl	18bfa <bt_addr_le_eq>
   10adc:	b138      	cbz	r0, 10aee <find_cf_cfg+0x1e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   10ade:	4807      	ldr	r0, [pc, #28]	; (10afc <find_cf_cfg+0x2c>)
			return cfg;
		}
	}

	return NULL;
}
   10ae0:	bd08      	pop	{r3, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   10ae2:	4a05      	ldr	r2, [pc, #20]	; (10af8 <find_cf_cfg+0x28>)
   10ae4:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   10ae8:	f007 fb0e 	bl	18108 <bt_conn_is_peer_addr_le>
   10aec:	e7f6      	b.n	10adc <find_cf_cfg+0xc>
	return NULL;
   10aee:	2000      	movs	r0, #0
   10af0:	e7f6      	b.n	10ae0 <find_cf_cfg+0x10>
   10af2:	bf00      	nop
   10af4:	0001c4c9 	.word	0x0001c4c9
   10af8:	200098c1 	.word	0x200098c1
   10afc:	200098c0 	.word	0x200098c0

00010b00 <find_sc_cfg>:
{
   10b00:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
   10b02:	4c06      	ldr	r4, [pc, #24]	; (10b1c <find_sc_cfg+0x1c>)
   10b04:	7823      	ldrb	r3, [r4, #0]
   10b06:	4283      	cmp	r3, r0
   10b08:	d103      	bne.n	10b12 <find_sc_cfg+0x12>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   10b0a:	1c60      	adds	r0, r4, #1
   10b0c:	f008 f875 	bl	18bfa <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   10b10:	b908      	cbnz	r0, 10b16 <find_sc_cfg+0x16>
	return NULL;
   10b12:	2000      	movs	r0, #0
}
   10b14:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   10b16:	4620      	mov	r0, r4
   10b18:	e7fc      	b.n	10b14 <find_sc_cfg+0x14>
   10b1a:	bf00      	nop
   10b1c:	20009b26 	.word	0x20009b26

00010b20 <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   10b20:	b510      	push	{r4, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   10b22:	1c4a      	adds	r2, r1, #1
{
   10b24:	460c      	mov	r4, r1
		if (conn) {
   10b26:	b138      	cbz	r0, 10b38 <find_ccc_cfg+0x18>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   10b28:	7809      	ldrb	r1, [r1, #0]
   10b2a:	f007 faed 	bl	18108 <bt_conn_is_peer_addr_le>
   10b2e:	b108      	cbz	r0, 10b34 <find_ccc_cfg+0x14>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   10b30:	4620      	mov	r0, r4
			return cfg;
		}
	}

	return NULL;
}
   10b32:	bd10      	pop	{r4, pc}
	return NULL;
   10b34:	2000      	movs	r0, #0
   10b36:	e7fc      	b.n	10b32 <find_ccc_cfg+0x12>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   10b38:	4610      	mov	r0, r2
   10b3a:	4902      	ldr	r1, [pc, #8]	; (10b44 <find_ccc_cfg+0x24>)
   10b3c:	f008 f85d 	bl	18bfa <bt_addr_le_eq>
   10b40:	e7f5      	b.n	10b2e <find_ccc_cfg+0xe>
   10b42:	bf00      	nop
   10b44:	0001c4c9 	.word	0x0001c4c9

00010b48 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   10b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10b4c:	b087      	sub	sp, #28
   10b4e:	461e      	mov	r6, r3
   10b50:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   10b54:	4681      	mov	r9, r0
   10b56:	460f      	mov	r7, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   10b58:	f8d1 800c 	ldr.w	r8, [r1, #12]
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   10b5c:	2b00      	cmp	r3, #0
   10b5e:	d14b      	bne.n	10bf8 <bt_gatt_attr_write_ccc+0xb0>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   10b60:	1e73      	subs	r3, r6, #1
   10b62:	2b01      	cmp	r3, #1
   10b64:	d84b      	bhi.n	10bfe <bt_gatt_attr_write_ccc+0xb6>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   10b66:	2e01      	cmp	r6, #1
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   10b68:	4641      	mov	r1, r8
		value = *(uint8_t *)buf;
   10b6a:	7815      	ldrb	r5, [r2, #0]
   10b6c:	bf18      	it	ne
   10b6e:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   10b70:	f7ff ffd6 	bl	10b20 <find_ccc_cfg>
	if (!cfg) {
   10b74:	4604      	mov	r4, r0
   10b76:	b9f0      	cbnz	r0, 10bb6 <bt_gatt_attr_write_ccc+0x6e>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behaviorally the same as no written CCC.
		 */
		if (!value) {
   10b78:	b91d      	cbnz	r5, 10b82 <bt_gatt_attr_write_ccc+0x3a>
			return len;
   10b7a:	4630      	mov	r0, r6
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   10b7c:	b007      	add	sp, #28
   10b7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   10b82:	4641      	mov	r1, r8
   10b84:	f7ff ffcc 	bl	10b20 <find_ccc_cfg>
		if (!cfg) {
   10b88:	4604      	mov	r4, r0
   10b8a:	b960      	cbnz	r0, 10ba6 <bt_gatt_attr_write_ccc+0x5e>
			LOG_WRN("No space to store CCC cfg");
   10b8c:	4b1d      	ldr	r3, [pc, #116]	; (10c04 <bt_gatt_attr_write_ccc+0xbc>)
   10b8e:	481e      	ldr	r0, [pc, #120]	; (10c08 <bt_gatt_attr_write_ccc+0xc0>)
   10b90:	9305      	str	r3, [sp, #20]
   10b92:	2302      	movs	r3, #2
   10b94:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   10b98:	aa04      	add	r2, sp, #16
   10b9a:	9304      	str	r3, [sp, #16]
   10b9c:	f008 f843 	bl	18c26 <z_log_msg_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   10ba0:	f06f 0010 	mvn.w	r0, #16
   10ba4:	e7ea      	b.n	10b7c <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   10ba6:	f109 0188 	add.w	r1, r9, #136	; 0x88
   10baa:	3001      	adds	r0, #1
   10bac:	f008 f838 	bl	18c20 <bt_addr_le_copy>
		cfg->id = conn->id;
   10bb0:	f899 3008 	ldrb.w	r3, [r9, #8]
   10bb4:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   10bb6:	f8d8 3010 	ldr.w	r3, [r8, #16]
   10bba:	b98b      	cbnz	r3, 10be0 <bt_gatt_attr_write_ccc+0x98>
	cfg->value = value;
   10bbc:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   10bbe:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   10bc2:	42ab      	cmp	r3, r5
   10bc4:	d003      	beq.n	10bce <bt_gatt_attr_write_ccc+0x86>
		gatt_ccc_changed(attr, ccc);
   10bc6:	4641      	mov	r1, r8
   10bc8:	4638      	mov	r0, r7
   10bca:	f007 ffa2 	bl	18b12 <gatt_ccc_changed>
	if (!value) {
   10bce:	2d00      	cmp	r5, #0
   10bd0:	d1d3      	bne.n	10b7a <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   10bd2:	490e      	ldr	r1, [pc, #56]	; (10c0c <bt_gatt_attr_write_ccc+0xc4>)
   10bd4:	1c60      	adds	r0, r4, #1
   10bd6:	f008 f823 	bl	18c20 <bt_addr_le_copy>
	cfg->id = 0U;
   10bda:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   10bdc:	8125      	strh	r5, [r4, #8]
}
   10bde:	e7cc      	b.n	10b7a <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   10be0:	462a      	mov	r2, r5
   10be2:	4639      	mov	r1, r7
   10be4:	4648      	mov	r0, r9
   10be6:	4798      	blx	r3
		if (write < 0) {
   10be8:	2800      	cmp	r0, #0
   10bea:	dbc7      	blt.n	10b7c <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   10bec:	3801      	subs	r0, #1
   10bee:	2801      	cmp	r0, #1
   10bf0:	d9e4      	bls.n	10bbc <bt_gatt_attr_write_ccc+0x74>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   10bf2:	f06f 000d 	mvn.w	r0, #13
   10bf6:	e7c1      	b.n	10b7c <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   10bf8:	f06f 0006 	mvn.w	r0, #6
   10bfc:	e7be      	b.n	10b7c <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   10bfe:	f06f 000c 	mvn.w	r0, #12
   10c02:	e7bb      	b.n	10b7c <bt_gatt_attr_write_ccc+0x34>
   10c04:	0001d516 	.word	0x0001d516
   10c08:	0001b1e0 	.word	0x0001b1e0
   10c0c:	0001c4c9 	.word	0x0001c4c9

00010c10 <clear_cf_cfg>:
{
   10c10:	b510      	push	{r4, lr}
   10c12:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   10c14:	4909      	ldr	r1, [pc, #36]	; (10c3c <clear_cf_cfg+0x2c>)
   10c16:	3001      	adds	r0, #1
   10c18:	f008 f802 	bl	18c20 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   10c1c:	f104 0008 	add.w	r0, r4, #8
   10c20:	2201      	movs	r2, #1
   10c22:	2100      	movs	r1, #0
   10c24:	f006 ffa0 	bl	17b68 <memset>
   10c28:	2300      	movs	r3, #0
   10c2a:	340c      	adds	r4, #12
   10c2c:	e8d4 2fef 	ldaex	r2, [r4]
   10c30:	e8c4 3fe1 	stlex	r1, r3, [r4]
   10c34:	2900      	cmp	r1, #0
   10c36:	d1f9      	bne.n	10c2c <clear_cf_cfg+0x1c>
}
   10c38:	bd10      	pop	{r4, pc}
   10c3a:	bf00      	nop
   10c3c:	0001c4c9 	.word	0x0001c4c9

00010c40 <sc_save>:
{
   10c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10c44:	b086      	sub	sp, #24
   10c46:	4680      	mov	r8, r0
   10c48:	460f      	mov	r7, r1
   10c4a:	4616      	mov	r6, r2
   10c4c:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   10c4e:	f7ff ff57 	bl	10b00 <find_sc_cfg>
	if (!cfg) {
   10c52:	4604      	mov	r4, r0
   10c54:	b9b0      	cbnz	r0, 10c84 <sc_save+0x44>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   10c56:	4912      	ldr	r1, [pc, #72]	; (10ca0 <sc_save+0x60>)
   10c58:	f7ff ff52 	bl	10b00 <find_sc_cfg>
		if (!cfg) {
   10c5c:	4604      	mov	r4, r0
   10c5e:	b960      	cbnz	r0, 10c7a <sc_save+0x3a>
			LOG_ERR("unable to save SC: no cfg left");
   10c60:	4b10      	ldr	r3, [pc, #64]	; (10ca4 <sc_save+0x64>)
   10c62:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10c66:	9305      	str	r3, [sp, #20]
   10c68:	2302      	movs	r3, #2
   10c6a:	480f      	ldr	r0, [pc, #60]	; (10ca8 <sc_save+0x68>)
   10c6c:	aa04      	add	r2, sp, #16
   10c6e:	9304      	str	r3, [sp, #16]
   10c70:	f007 ffd9 	bl	18c26 <z_log_msg_static_create.constprop.0>
}
   10c74:	b006      	add	sp, #24
   10c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   10c7a:	4639      	mov	r1, r7
		cfg->id = id;
   10c7c:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   10c80:	f007 ffce 	bl	18c20 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   10c84:	8922      	ldrh	r2, [r4, #8]
   10c86:	8963      	ldrh	r3, [r4, #10]
   10c88:	b91a      	cbnz	r2, 10c92 <sc_save+0x52>
   10c8a:	b92b      	cbnz	r3, 10c98 <sc_save+0x58>
		cfg->data.start = start;
   10c8c:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   10c8e:	8165      	strh	r5, [r4, #10]
   10c90:	e7f0      	b.n	10c74 <sc_save+0x34>
	if (new_start >= *start && new_end <= *end) {
   10c92:	4296      	cmp	r6, r2
		*start = new_start;
   10c94:	bf38      	it	cc
   10c96:	8126      	strhcc	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
   10c98:	429d      	cmp	r5, r3
   10c9a:	d9eb      	bls.n	10c74 <sc_save+0x34>
   10c9c:	e7f7      	b.n	10c8e <sc_save+0x4e>
   10c9e:	bf00      	nop
   10ca0:	0001c4c9 	.word	0x0001c4c9
   10ca4:	0001d530 	.word	0x0001d530
   10ca8:	0001b1e0 	.word	0x0001b1e0

00010cac <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   10cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   10cb0:	4b23      	ldr	r3, [pc, #140]	; (10d40 <disconnected_cb+0x94>)
{
   10cb2:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   10cb4:	6882      	ldr	r2, [r0, #8]
{
   10cb6:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   10cb8:	429a      	cmp	r2, r3
   10cba:	d102      	bne.n	10cc2 <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   10cbc:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   10cbe:	8963      	ldrh	r3, [r4, #10]
   10cc0:	bb33      	cbnz	r3, 10d10 <disconnected_cb+0x64>

		LOG_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   10cc2:	2001      	movs	r0, #1
   10cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
   10cc8:	f007 f9df 	bl	1808a <bt_conn_unref>
		ccc->value = 0U;
   10ccc:	2100      	movs	r1, #0
		if (ccc->cfg_changed) {
   10cce:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   10cd0:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   10cd2:	2b00      	cmp	r3, #0
   10cd4:	d0f5      	beq.n	10cc2 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   10cd6:	4638      	mov	r0, r7
   10cd8:	4798      	blx	r3
   10cda:	e7f2      	b.n	10cc2 <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   10cdc:	f105 0888 	add.w	r8, r5, #136	; 0x88
   10ce0:	4641      	mov	r1, r8
   10ce2:	7a28      	ldrb	r0, [r5, #8]
   10ce4:	f007 f87c 	bl	17de0 <bt_addr_le_is_bonded>
   10ce8:	b968      	cbnz	r0, 10d06 <disconnected_cb+0x5a>
				if (ccc == &sc_ccc) {
   10cea:	4b16      	ldr	r3, [pc, #88]	; (10d44 <disconnected_cb+0x98>)
   10cec:	429c      	cmp	r4, r3
   10cee:	d102      	bne.n	10cf6 <disconnected_cb+0x4a>
					sc_clear(conn);
   10cf0:	4628      	mov	r0, r5
   10cf2:	f007 ff9b 	bl	18c2c <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   10cf6:	4630      	mov	r0, r6
   10cf8:	4913      	ldr	r1, [pc, #76]	; (10d48 <disconnected_cb+0x9c>)
   10cfa:	f007 ff91 	bl	18c20 <bt_addr_le_copy>
	cfg->id = 0U;
   10cfe:	2300      	movs	r3, #0
   10d00:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   10d02:	8123      	strh	r3, [r4, #8]
}
   10d04:	e7e2      	b.n	10ccc <disconnected_cb+0x20>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   10d06:	4641      	mov	r1, r8
   10d08:	4630      	mov	r0, r6
   10d0a:	f007 ff89 	bl	18c20 <bt_addr_le_copy>
   10d0e:	e7dd      	b.n	10ccc <disconnected_cb+0x20>
		if (!cfg->value) {
   10d10:	8923      	ldrh	r3, [r4, #8]
   10d12:	2b00      	cmp	r3, #0
   10d14:	d0da      	beq.n	10ccc <disconnected_cb+0x20>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   10d16:	4626      	mov	r6, r4
   10d18:	f816 1b01 	ldrb.w	r1, [r6], #1
   10d1c:	4628      	mov	r0, r5
   10d1e:	4632      	mov	r2, r6
   10d20:	f007 f9f2 	bl	18108 <bt_conn_is_peer_addr_le>
   10d24:	2800      	cmp	r0, #0
   10d26:	d1d9      	bne.n	10cdc <disconnected_cb+0x30>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   10d28:	4631      	mov	r1, r6
   10d2a:	7820      	ldrb	r0, [r4, #0]
   10d2c:	f7fe fb1c 	bl	f368 <bt_conn_lookup_addr_le>
			if (tmp) {
   10d30:	2800      	cmp	r0, #0
   10d32:	d0cb      	beq.n	10ccc <disconnected_cb+0x20>
				if (tmp->state == BT_CONN_CONNECTED) {
   10d34:	7a83      	ldrb	r3, [r0, #10]
   10d36:	2b07      	cmp	r3, #7
   10d38:	d1c6      	bne.n	10cc8 <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
   10d3a:	f007 f9a6 	bl	1808a <bt_conn_unref>
	if (!value_used) {
   10d3e:	e7c0      	b.n	10cc2 <disconnected_cb+0x16>
   10d40:	00010b49 	.word	0x00010b49
   10d44:	200082b4 	.word	0x200082b4
   10d48:	0001c4c9 	.word	0x0001c4c9

00010d4c <read_ppcp>:
{
   10d4c:	b513      	push	{r0, r1, r4, lr}
   10d4e:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   10d50:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
{
   10d54:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   10d58:	4c09      	ldr	r4, [pc, #36]	; (10d80 <read_ppcp+0x34>)
	if (offset > value_len) {
   10d5a:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   10d5c:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   10d60:	d80b      	bhi.n	10d7a <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
   10d62:	f1c1 0408 	rsb	r4, r1, #8
   10d66:	429c      	cmp	r4, r3
   10d68:	bfa8      	it	ge
   10d6a:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   10d6c:	4469      	add	r1, sp
   10d6e:	4622      	mov	r2, r4
   10d70:	f006 feef 	bl	17b52 <memcpy>
}
   10d74:	4620      	mov	r0, r4
   10d76:	b002      	add	sp, #8
   10d78:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   10d7a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   10d7e:	e7f9      	b.n	10d74 <read_ppcp+0x28>
   10d80:	00280018 	.word	0x00280018

00010d84 <cf_write>:
{
   10d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10d88:	b086      	sub	sp, #24
   10d8a:	461f      	mov	r7, r3
   10d8c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   10d90:	4606      	mov	r6, r0
	if (offset > sizeof(cfg->data)) {
   10d92:	2b01      	cmp	r3, #1
{
   10d94:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   10d96:	d83a      	bhi.n	10e0e <cf_write+0x8a>
	if (offset + len > sizeof(cfg->data)) {
   10d98:	443b      	add	r3, r7
   10d9a:	2b01      	cmp	r3, #1
   10d9c:	463d      	mov	r5, r7
   10d9e:	dc39      	bgt.n	10e14 <cf_write+0x90>
	cfg = find_cf_cfg(conn);
   10da0:	f7ff fe96 	bl	10ad0 <find_cf_cfg>
	if (!cfg) {
   10da4:	4604      	mov	r4, r0
   10da6:	b998      	cbnz	r0, 10dd0 <cf_write+0x4c>
		cfg = find_cf_cfg(NULL);
   10da8:	f7ff fe92 	bl	10ad0 <find_cf_cfg>
	if (!cfg) {
   10dac:	4604      	mov	r4, r0
   10dae:	b978      	cbnz	r0, 10dd0 <cf_write+0x4c>
		LOG_WRN("No space to store Client Supported Features");
   10db0:	4b1b      	ldr	r3, [pc, #108]	; (10e20 <cf_write+0x9c>)
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   10db2:	f06f 0510 	mvn.w	r5, #16
		LOG_WRN("No space to store Client Supported Features");
   10db6:	9305      	str	r3, [sp, #20]
   10db8:	2302      	movs	r3, #2
   10dba:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   10dbe:	4819      	ldr	r0, [pc, #100]	; (10e24 <cf_write+0xa0>)
   10dc0:	aa04      	add	r2, sp, #16
   10dc2:	9304      	str	r3, [sp, #16]
   10dc4:	f007 ff2f 	bl	18c26 <z_log_msg_static_create.constprop.0>
}
   10dc8:	4628      	mov	r0, r5
   10dca:	b006      	add	sp, #24
   10dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   10dd0:	b197      	cbz	r7, 10df8 <cf_write+0x74>
		    !(value[i / 8] & BIT(i % 8))) {
   10dd2:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   10dd4:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   10dd6:	f898 2000 	ldrb.w	r2, [r8]
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   10dda:	fa21 f003 	lsr.w	r0, r1, r3
   10dde:	07c7      	lsls	r7, r0, #31
   10de0:	d503      	bpl.n	10dea <cf_write+0x66>
		    !(value[i / 8] & BIT(i % 8))) {
   10de2:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   10de6:	07c0      	lsls	r0, r0, #31
   10de8:	d517      	bpl.n	10e1a <cf_write+0x96>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   10dea:	3301      	adds	r3, #1
   10dec:	2b03      	cmp	r3, #3
   10dee:	d1f4      	bne.n	10dda <cf_write+0x56>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   10df0:	f002 0207 	and.w	r2, r2, #7
   10df4:	4311      	orrs	r1, r2
   10df6:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   10df8:	1c60      	adds	r0, r4, #1
   10dfa:	f106 0188 	add.w	r1, r6, #136	; 0x88
   10dfe:	f007 ff0f 	bl	18c20 <bt_addr_le_copy>
	cfg->id = conn->id;
   10e02:	7a33      	ldrb	r3, [r6, #8]
	bool changed = set_change_aware_no_store(cfg, aware);
   10e04:	4620      	mov	r0, r4
	cfg->id = conn->id;
   10e06:	7023      	strb	r3, [r4, #0]
	bool changed = set_change_aware_no_store(cfg, aware);
   10e08:	f007 ffdb 	bl	18dc2 <set_change_aware_no_store.constprop.0.isra.0>
	return len;
   10e0c:	e7dc      	b.n	10dc8 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   10e0e:	f06f 0506 	mvn.w	r5, #6
   10e12:	e7d9      	b.n	10dc8 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   10e14:	f06f 050c 	mvn.w	r5, #12
   10e18:	e7d6      	b.n	10dc8 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   10e1a:	f06f 0512 	mvn.w	r5, #18
   10e1e:	e7d3      	b.n	10dc8 <cf_write+0x44>
   10e20:	0001d54f 	.word	0x0001d54f
   10e24:	0001b1e0 	.word	0x0001b1e0

00010e28 <sc_indicate_rsp>:
{
   10e28:	b510      	push	{r4, lr}
   10e2a:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10e2c:	4810      	ldr	r0, [pc, #64]	; (10e70 <sc_indicate_rsp+0x48>)
   10e2e:	e8d0 3fef 	ldaex	r3, [r0]
   10e32:	f023 0302 	bic.w	r3, r3, #2
   10e36:	e8c0 3fe2 	stlex	r2, r3, [r0]
   10e3a:	2a00      	cmp	r2, #0
   10e3c:	d1f7      	bne.n	10e2e <sc_indicate_rsp+0x6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10e3e:	e8d0 3faf 	lda	r3, [r0]
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   10e42:	07da      	lsls	r2, r3, #31
   10e44:	d504      	bpl.n	10e50 <sc_indicate_rsp+0x28>
	k_work_reschedule(&gatt_sc.work, timeout);
   10e46:	2200      	movs	r2, #0
   10e48:	2300      	movs	r3, #0
   10e4a:	3830      	subs	r0, #48	; 0x30
   10e4c:	f004 fb02 	bl	15454 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   10e50:	4620      	mov	r0, r4
   10e52:	f007 fe36 	bl	18ac2 <bt_att_fixed_chan_only>
   10e56:	b150      	cbz	r0, 10e6e <sc_indicate_rsp+0x46>
		cfg = find_cf_cfg(conn);
   10e58:	4620      	mov	r0, r4
   10e5a:	f7ff fe39 	bl	10ad0 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   10e5e:	b130      	cbz	r0, 10e6e <sc_indicate_rsp+0x46>
   10e60:	7a03      	ldrb	r3, [r0, #8]
   10e62:	07db      	lsls	r3, r3, #31
   10e64:	d503      	bpl.n	10e6e <sc_indicate_rsp+0x46>
}
   10e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bool changed = set_change_aware_no_store(cfg, aware);
   10e6a:	f007 bfaa 	b.w	18dc2 <set_change_aware_no_store.constprop.0.isra.0>
}
   10e6e:	bd10      	pop	{r4, pc}
   10e70:	20009498 	.word	0x20009498

00010e74 <bt_gatt_init>:
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   10e74:	2101      	movs	r1, #1
{
   10e76:	b510      	push	{r4, lr}
   10e78:	4816      	ldr	r0, [pc, #88]	; (10ed4 <bt_gatt_init+0x60>)
   10e7a:	f007 fec6 	bl	18c0a <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_INITIALIZED)) {
   10e7e:	07c3      	lsls	r3, r0, #31
   10e80:	d427      	bmi.n	10ed2 <bt_gatt_init+0x5e>
   10e82:	2102      	movs	r1, #2
   10e84:	4813      	ldr	r0, [pc, #76]	; (10ed4 <bt_gatt_init+0x60>)
   10e86:	f007 fec0 	bl	18c0a <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_SERVICE_INITIALIZED)) {
   10e8a:	4008      	ands	r0, r1
   10e8c:	d107      	bne.n	10e9e <bt_gatt_init+0x2a>
   10e8e:	4912      	ldr	r1, [pc, #72]	; (10ed8 <bt_gatt_init+0x64>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   10e90:	4a12      	ldr	r2, [pc, #72]	; (10edc <bt_gatt_init+0x68>)
   10e92:	880b      	ldrh	r3, [r1, #0]
   10e94:	4c12      	ldr	r4, [pc, #72]	; (10ee0 <bt_gatt_init+0x6c>)
   10e96:	42a2      	cmp	r2, r4
   10e98:	d315      	bcc.n	10ec6 <bt_gatt_init+0x52>
   10e9a:	b100      	cbz	r0, 10e9e <bt_gatt_init+0x2a>
   10e9c:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   10e9e:	2200      	movs	r2, #0
   10ea0:	4b10      	ldr	r3, [pc, #64]	; (10ee4 <bt_gatt_init+0x70>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   10ea2:	4911      	ldr	r1, [pc, #68]	; (10ee8 <bt_gatt_init+0x74>)
   10ea4:	4811      	ldr	r0, [pc, #68]	; (10eec <bt_gatt_init+0x78>)
	list->tail = NULL;
   10ea6:	e9c3 2200 	strd	r2, r2, [r3]
   10eaa:	f009 fbfb 	bl	1a6a4 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   10eae:	f44f 72a4 	mov.w	r2, #328	; 0x148
   10eb2:	2300      	movs	r3, #0
   10eb4:	480d      	ldr	r0, [pc, #52]	; (10eec <bt_gatt_init+0x78>)
   10eb6:	f7fb f973 	bl	c1a0 <bt_long_wq_schedule>
}
   10eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   10ebe:	490c      	ldr	r1, [pc, #48]	; (10ef0 <bt_gatt_init+0x7c>)
   10ec0:	480c      	ldr	r0, [pc, #48]	; (10ef4 <bt_gatt_init+0x80>)
   10ec2:	f009 bbef 	b.w	1a6a4 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   10ec6:	6850      	ldr	r0, [r2, #4]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   10ec8:	3208      	adds	r2, #8
		last_static_handle += svc->attr_count;
   10eca:	4403      	add	r3, r0
   10ecc:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   10ece:	2001      	movs	r0, #1
   10ed0:	e7e1      	b.n	10e96 <bt_gatt_init+0x22>
}
   10ed2:	bd10      	pop	{r4, pc}
   10ed4:	200098d0 	.word	0x200098d0
   10ed8:	20009b32 	.word	0x20009b32
   10edc:	0001b188 	.word	0x0001b188
   10ee0:	0001b1a0 	.word	0x0001b1a0
   10ee4:	200098d4 	.word	0x200098d4
   10ee8:	00011109 	.word	0x00011109
   10eec:	200093f0 	.word	0x200093f0
   10ef0:	00011329 	.word	0x00011329
   10ef4:	20009468 	.word	0x20009468

00010ef8 <bt_gatt_attr_get_handle>:
	if (!attr) {
   10ef8:	4603      	mov	r3, r0
{
   10efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   10efe:	b148      	cbz	r0, 10f14 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   10f00:	8a00      	ldrh	r0, [r0, #16]
   10f02:	b938      	cbnz	r0, 10f14 <bt_gatt_attr_get_handle+0x1c>
	uint16_t handle = 1;
   10f04:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   10f06:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   10f0a:	4911      	ldr	r1, [pc, #68]	; (10f50 <bt_gatt_attr_get_handle+0x58>)
   10f0c:	f8df e044 	ldr.w	lr, [pc, #68]	; 10f54 <bt_gatt_attr_get_handle+0x5c>
   10f10:	4571      	cmp	r1, lr
   10f12:	d301      	bcc.n	10f18 <bt_gatt_attr_get_handle+0x20>
}
   10f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   10f18:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   10f1c:	42bb      	cmp	r3, r7
   10f1e:	d304      	bcc.n	10f2a <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   10f20:	fb0c 7206 	mla	r2, ip, r6, r7
   10f24:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   10f26:	4293      	cmp	r3, r2
   10f28:	d90e      	bls.n	10f48 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   10f2a:	4434      	add	r4, r6
   10f2c:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   10f2e:	4614      	mov	r4, r2
   10f30:	3108      	adds	r1, #8
   10f32:	e7ed      	b.n	10f10 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   10f34:	fb0c 7805 	mla	r8, ip, r5, r7
   10f38:	4543      	cmp	r3, r8
   10f3a:	d007      	beq.n	10f4c <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   10f3c:	3501      	adds	r5, #1
   10f3e:	1962      	adds	r2, r4, r5
   10f40:	42b5      	cmp	r5, r6
   10f42:	b292      	uxth	r2, r2
   10f44:	d1f6      	bne.n	10f34 <bt_gatt_attr_get_handle+0x3c>
   10f46:	e7f2      	b.n	10f2e <bt_gatt_attr_get_handle+0x36>
   10f48:	2500      	movs	r5, #0
   10f4a:	e7f8      	b.n	10f3e <bt_gatt_attr_get_handle+0x46>
   10f4c:	4610      	mov	r0, r2
   10f4e:	e7e1      	b.n	10f14 <bt_gatt_attr_get_handle+0x1c>
   10f50:	0001b188 	.word	0x0001b188
   10f54:	0001b1a0 	.word	0x0001b1a0

00010f58 <bt_gatt_foreach_attr_type>:
{
   10f58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f5c:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   10f5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   10f62:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   10f66:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   10f68:	2d00      	cmp	r5, #0
   10f6a:	bf08      	it	eq
   10f6c:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   10f6e:	4b24      	ldr	r3, [pc, #144]	; (11000 <bt_gatt_foreach_attr_type+0xa8>)
{
   10f70:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   10f72:	881b      	ldrh	r3, [r3, #0]
{
   10f74:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   10f76:	4283      	cmp	r3, r0
   10f78:	d23c      	bcs.n	10ff4 <bt_gatt_foreach_attr_type+0x9c>
}
   10f7a:	b003      	add	sp, #12
   10f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   10f80:	6873      	ldr	r3, [r6, #4]
   10f82:	4423      	add	r3, r4
   10f84:	42bb      	cmp	r3, r7
   10f86:	d232      	bcs.n	10fee <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   10f88:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   10f8a:	3608      	adds	r6, #8
   10f8c:	4b1d      	ldr	r3, [pc, #116]	; (11004 <bt_gatt_foreach_attr_type+0xac>)
   10f8e:	429e      	cmp	r6, r3
   10f90:	d3f6      	bcc.n	10f80 <bt_gatt_foreach_attr_type+0x28>
   10f92:	e7f2      	b.n	10f7a <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   10f94:	4640      	mov	r0, r8
   10f96:	5889      	ldr	r1, [r1, r2]
   10f98:	9301      	str	r3, [sp, #4]
   10f9a:	f006 fdf1 	bl	17b80 <bt_uuid_cmp>
   10f9e:	9b01      	ldr	r3, [sp, #4]
   10fa0:	b190      	cbz	r0, 10fc8 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   10fa2:	3401      	adds	r4, #1
   10fa4:	f10a 0a01 	add.w	sl, sl, #1
   10fa8:	b2a4      	uxth	r4, r4
   10faa:	6873      	ldr	r3, [r6, #4]
   10fac:	4553      	cmp	r3, sl
   10fae:	d9ec      	bls.n	10f8a <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   10fb0:	9b00      	ldr	r3, [sp, #0]
   10fb2:	429c      	cmp	r4, r3
   10fb4:	d8e1      	bhi.n	10f7a <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   10fb6:	42bc      	cmp	r4, r7
				if (gatt_foreach_iter(&static_svc->attrs[i],
   10fb8:	6831      	ldr	r1, [r6, #0]
	if (handle < start_handle) {
   10fba:	d3f2      	bcc.n	10fa2 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   10fbc:	fb0b f20a 	mul.w	r2, fp, sl
   10fc0:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   10fc2:	f1b8 0f00 	cmp.w	r8, #0
   10fc6:	d1e5      	bne.n	10f94 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   10fc8:	f1b9 0f00 	cmp.w	r9, #0
   10fcc:	d10b      	bne.n	10fe6 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   10fce:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   10fd0:	4618      	mov	r0, r3
	*num_matches -= 1;
   10fd2:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   10fd4:	4621      	mov	r1, r4
   10fd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10fd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10fda:	4798      	blx	r3
	if (!*num_matches) {
   10fdc:	2d00      	cmp	r5, #0
   10fde:	d0cc      	beq.n	10f7a <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   10fe0:	2800      	cmp	r0, #0
   10fe2:	d1de      	bne.n	10fa2 <bt_gatt_foreach_attr_type+0x4a>
   10fe4:	e7c9      	b.n	10f7a <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   10fe6:	68da      	ldr	r2, [r3, #12]
   10fe8:	4591      	cmp	r9, r2
   10fea:	d1da      	bne.n	10fa2 <bt_gatt_foreach_attr_type+0x4a>
   10fec:	e7ef      	b.n	10fce <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   10fee:	f04f 0a00 	mov.w	sl, #0
   10ff2:	e7da      	b.n	10faa <bt_gatt_foreach_attr_type+0x52>
		uint16_t handle = 1;
   10ff4:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   10ff6:	f04f 0b14 	mov.w	fp, #20
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   10ffa:	4e03      	ldr	r6, [pc, #12]	; (11008 <bt_gatt_foreach_attr_type+0xb0>)
   10ffc:	e7c6      	b.n	10f8c <bt_gatt_foreach_attr_type+0x34>
   10ffe:	bf00      	nop
   11000:	20009b32 	.word	0x20009b32
   11004:	0001b1a0 	.word	0x0001b1a0
   11008:	0001b188 	.word	0x0001b188

0001100c <db_hash_gen>:
{
   1100c:	b510      	push	{r4, lr}
	uint8_t key[16] = {};
   1100e:	2400      	movs	r4, #0
{
   11010:	b0ce      	sub	sp, #312	; 0x138
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   11012:	4669      	mov	r1, sp
   11014:	aa22      	add	r2, sp, #136	; 0x88
   11016:	a80a      	add	r0, sp, #40	; 0x28
	uint8_t key[16] = {};
   11018:	e9cd 4400 	strd	r4, r4, [sp]
   1101c:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   11020:	f006 fa0e 	bl	17440 <tc_cmac_setup>
   11024:	b958      	cbnz	r0, 1103e <db_hash_gen+0x32>
		LOG_ERR("Unable to setup AES CMAC");
   11026:	4b15      	ldr	r3, [pc, #84]	; (1107c <db_hash_gen+0x70>)
		LOG_ERR("Unable to calculate hash");
   11028:	9309      	str	r3, [sp, #36]	; 0x24
   1102a:	2302      	movs	r3, #2
   1102c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11030:	4813      	ldr	r0, [pc, #76]	; (11080 <db_hash_gen+0x74>)
   11032:	aa08      	add	r2, sp, #32
   11034:	9308      	str	r3, [sp, #32]
   11036:	f007 fdf6 	bl	18c26 <z_log_msg_static_create.constprop.0>
}
   1103a:	b04e      	add	sp, #312	; 0x138
   1103c:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1103e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11042:	2001      	movs	r0, #1
   11044:	4a0f      	ldr	r2, [pc, #60]	; (11084 <db_hash_gen+0x78>)
   11046:	ab0a      	add	r3, sp, #40	; 0x28
   11048:	f007 ff42 	bl	18ed0 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1104c:	480e      	ldr	r0, [pc, #56]	; (11088 <db_hash_gen+0x7c>)
   1104e:	a90a      	add	r1, sp, #40	; 0x28
   11050:	f006 fa8b 	bl	1756a <tc_cmac_final>
   11054:	b908      	cbnz	r0, 1105a <db_hash_gen+0x4e>
		LOG_ERR("Unable to calculate hash");
   11056:	4b0d      	ldr	r3, [pc, #52]	; (1108c <db_hash_gen+0x80>)
   11058:	e7e6      	b.n	11028 <db_hash_gen+0x1c>
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   1105a:	4621      	mov	r1, r4
   1105c:	4b0a      	ldr	r3, [pc, #40]	; (11088 <db_hash_gen+0x7c>)
   1105e:	f103 0210 	add.w	r2, r3, #16
		uint8_t tmp = ((uint8_t *)buf)[i];
   11062:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   11064:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   11068:	3101      	adds	r1, #1
   1106a:	2908      	cmp	r1, #8
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1106c:	f803 4b01 	strb.w	r4, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   11070:	7010      	strb	r0, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   11072:	d1f6      	bne.n	11062 <db_hash_gen+0x56>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   11074:	4806      	ldr	r0, [pc, #24]	; (11090 <db_hash_gen+0x84>)
   11076:	f007 fdc8 	bl	18c0a <atomic_or>
   1107a:	e7de      	b.n	1103a <db_hash_gen+0x2e>
   1107c:	0001d57b 	.word	0x0001d57b
   11080:	0001b1e0 	.word	0x0001b1e0
   11084:	00018b55 	.word	0x00018b55
   11088:	200093e0 	.word	0x200093e0
   1108c:	0001d594 	.word	0x0001d594
   11090:	20009498 	.word	0x20009498

00011094 <db_hash_read>:
{
   11094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   11096:	4919      	ldr	r1, [pc, #100]	; (110fc <db_hash_read+0x68>)
{
   11098:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1109a:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1109e:	4615      	mov	r5, r2
   110a0:	461f      	mov	r7, r3
   110a2:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   110a6:	f009 fb1f 	bl	1a6e8 <k_work_cancel_delayable_sync>
   110aa:	4b15      	ldr	r3, [pc, #84]	; (11100 <db_hash_read+0x6c>)
   110ac:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   110b0:	0719      	lsls	r1, r3, #28
   110b2:	d401      	bmi.n	110b8 <db_hash_read+0x24>
		db_hash_gen();
   110b4:	f7ff ffaa 	bl	1100c <db_hash_gen>
	cfg = find_cf_cfg(conn);
   110b8:	4620      	mov	r0, r4
   110ba:	f7ff fd09 	bl	10ad0 <find_cf_cfg>
	if (cfg &&
   110be:	b150      	cbz	r0, 110d6 <db_hash_read+0x42>
   110c0:	7a03      	ldrb	r3, [r0, #8]
   110c2:	07da      	lsls	r2, r3, #31
   110c4:	d507      	bpl.n	110d6 <db_hash_read+0x42>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   110c6:	300c      	adds	r0, #12
   110c8:	e8d0 3faf 	lda	r3, [r0]
	    CF_ROBUST_CACHING(cfg) &&
   110cc:	07db      	lsls	r3, r3, #31
   110ce:	d402      	bmi.n	110d6 <db_hash_read+0x42>
   110d0:	2102      	movs	r1, #2
   110d2:	f007 fd9a 	bl	18c0a <atomic_or>
	if (offset > value_len) {
   110d6:	2e10      	cmp	r6, #16
   110d8:	d80c      	bhi.n	110f4 <db_hash_read+0x60>
	len = MIN(buf_len, value_len - offset);
   110da:	f1c6 0410 	rsb	r4, r6, #16
   110de:	42bc      	cmp	r4, r7
   110e0:	bfa8      	it	ge
   110e2:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   110e4:	4907      	ldr	r1, [pc, #28]	; (11104 <db_hash_read+0x70>)
   110e6:	4622      	mov	r2, r4
   110e8:	4628      	mov	r0, r5
   110ea:	4431      	add	r1, r6
   110ec:	f006 fd31 	bl	17b52 <memcpy>
}
   110f0:	4620      	mov	r0, r4
   110f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   110f4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   110f8:	e7fa      	b.n	110f0 <db_hash_read+0x5c>
   110fa:	bf00      	nop
   110fc:	20009420 	.word	0x20009420
   11100:	20009498 	.word	0x20009498
   11104:	200093e0 	.word	0x200093e0

00011108 <db_hash_process>:
   11108:	4b03      	ldr	r3, [pc, #12]	; (11118 <db_hash_process+0x10>)
   1110a:	e8d3 3faf 	lda	r3, [r3]
	if (new_hash) {
   1110e:	071b      	lsls	r3, r3, #28
   11110:	d401      	bmi.n	11116 <db_hash_process+0xe>
		db_hash_gen();
   11112:	f7ff bf7b 	b.w	1100c <db_hash_gen>
}
   11116:	4770      	bx	lr
   11118:	20009498 	.word	0x20009498

0001111c <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   1111c:	2300      	movs	r3, #0
{
   1111e:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   11120:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   11122:	f7ff fee9 	bl	10ef8 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   11126:	1c41      	adds	r1, r0, #1
   11128:	b289      	uxth	r1, r1
   1112a:	4608      	mov	r0, r1
   1112c:	4a03      	ldr	r2, [pc, #12]	; (1113c <bt_gatt_attr_next+0x20>)
   1112e:	ab01      	add	r3, sp, #4
   11130:	f007 fece 	bl	18ed0 <bt_gatt_foreach_attr>
}
   11134:	9801      	ldr	r0, [sp, #4]
   11136:	b003      	add	sp, #12
   11138:	f85d fb04 	ldr.w	pc, [sp], #4
   1113c:	00018b0d 	.word	0x00018b0d

00011140 <gatt_indicate>:
{
   11140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11144:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   11146:	6851      	ldr	r1, [r2, #4]
{
   11148:	4680      	mov	r8, r0
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   1114a:	8a4f      	ldrh	r7, [r1, #18]
{
   1114c:	4615      	mov	r5, r2
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   1114e:	f017 0714 	ands.w	r7, r7, #20
{
   11152:	b086      	sub	sp, #24
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   11154:	d00f      	beq.n	11176 <gatt_indicate+0x36>
		LOG_WRN("Link is not encrypted");
   11156:	4b33      	ldr	r3, [pc, #204]	; (11224 <gatt_indicate+0xe4>)
		return -EPERM;
   11158:	f04f 35ff 	mov.w	r5, #4294967295
		LOG_WRN("Link is not encrypted");
   1115c:	9305      	str	r3, [sp, #20]
   1115e:	2302      	movs	r3, #2
   11160:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11164:	4830      	ldr	r0, [pc, #192]	; (11228 <gatt_indicate+0xe8>)
   11166:	aa04      	add	r2, sp, #16
   11168:	9304      	str	r3, [sp, #16]
   1116a:	f007 fd5c 	bl	18c26 <z_log_msg_static_create.constprop.0>
}
   1116e:	4628      	mov	r0, r5
   11170:	b006      	add	sp, #24
   11172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   11176:	2202      	movs	r2, #2
   11178:	f007 fed1 	bl	18f1e <bt_gatt_is_subscribed>
   1117c:	b960      	cbnz	r0, 11198 <gatt_indicate+0x58>
			LOG_WRN("Device is not subscribed to characteristic");
   1117e:	4b2b      	ldr	r3, [pc, #172]	; (1122c <gatt_indicate+0xec>)
   11180:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11184:	9305      	str	r3, [sp, #20]
   11186:	2302      	movs	r3, #2
   11188:	4827      	ldr	r0, [pc, #156]	; (11228 <gatt_indicate+0xe8>)
   1118a:	aa04      	add	r2, sp, #16
   1118c:	9304      	str	r3, [sp, #16]
			return -EINVAL;
   1118e:	f06f 0515 	mvn.w	r5, #21
			LOG_WRN("Device is not subscribed to characteristic");
   11192:	f007 fd48 	bl	18c26 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   11196:	e7ea      	b.n	1116e <gatt_indicate+0x2e>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   11198:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1119c:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1119e:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   111a0:	f7ff fb96 	bl	108d0 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   111a4:	3602      	adds	r6, #2
	if (!req) {
   111a6:	4604      	mov	r4, r0
   111a8:	b1b0      	cbz	r0, 111d8 <gatt_indicate+0x98>
	req->func = func;
   111aa:	4b21      	ldr	r3, [pc, #132]	; (11230 <gatt_indicate+0xf0>)
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   111ac:	4632      	mov	r2, r6
	req->func = func;
   111ae:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   111b0:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   111b2:	211d      	movs	r1, #29
   111b4:	4640      	mov	r0, r8
   111b6:	f7ff f8b9 	bl	1032c <bt_att_create_pdu>
	if (!buf) {
   111ba:	4606      	mov	r6, r0
   111bc:	b978      	cbnz	r0, 111de <gatt_indicate+0x9e>
		LOG_WRN("No buffer available to send indication");
   111be:	4b1d      	ldr	r3, [pc, #116]	; (11234 <gatt_indicate+0xf4>)
   111c0:	4819      	ldr	r0, [pc, #100]	; (11228 <gatt_indicate+0xe8>)
   111c2:	9305      	str	r3, [sp, #20]
   111c4:	2302      	movs	r3, #2
   111c6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   111ca:	aa04      	add	r2, sp, #16
   111cc:	9304      	str	r3, [sp, #16]
   111ce:	f007 fd2a 	bl	18c26 <z_log_msg_static_create.constprop.0>
		bt_att_req_free(req);
   111d2:	4620      	mov	r0, r4
   111d4:	f7ff fb9e 	bl	10914 <bt_att_req_free>
		return -ENOMEM;
   111d8:	f06f 050b 	mvn.w	r5, #11
   111dc:	e7c7      	b.n	1116e <gatt_indicate+0x2e>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   111de:	2301      	movs	r3, #1
   111e0:	463a      	mov	r2, r7
   111e2:	4639      	mov	r1, r7
	return net_buf_simple_add(&buf->b, len);
   111e4:	f106 0a0c 	add.w	sl, r6, #12
   111e8:	f007 fc89 	bl	18afe <bt_att_set_tx_meta_data>
   111ec:	2102      	movs	r1, #2
   111ee:	4650      	mov	r0, sl
   111f0:	f007 ffe1 	bl	191b6 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   111f4:	4607      	mov	r7, r0
   111f6:	f827 9b02 	strh.w	r9, [r7], #2
   111fa:	8aa9      	ldrh	r1, [r5, #20]
   111fc:	4650      	mov	r0, sl
   111fe:	f007 ffda 	bl	191b6 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   11202:	8aaa      	ldrh	r2, [r5, #20]
   11204:	6929      	ldr	r1, [r5, #16]
   11206:	4638      	mov	r0, r7
   11208:	f006 fca3 	bl	17b52 <memcpy>
	err = bt_att_req_send(conn, req);
   1120c:	4621      	mov	r1, r4
   1120e:	4640      	mov	r0, r8
	req->buf = buf;
   11210:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   11212:	f007 fc41 	bl	18a98 <bt_att_req_send>
	if (err) {
   11216:	4605      	mov	r5, r0
   11218:	2800      	cmp	r0, #0
   1121a:	d0a8      	beq.n	1116e <gatt_indicate+0x2e>
		bt_att_req_free(req);
   1121c:	4620      	mov	r0, r4
   1121e:	f7ff fb79 	bl	10914 <bt_att_req_free>
   11222:	e7a4      	b.n	1116e <gatt_indicate+0x2e>
   11224:	0001d5ad 	.word	0x0001d5ad
   11228:	0001b1e0 	.word	0x0001b1e0
   1122c:	0001d5c3 	.word	0x0001d5c3
   11230:	00018b27 	.word	0x00018b27
   11234:	0001d5ee 	.word	0x0001d5ee

00011238 <bt_gatt_indicate>:
{
   11238:	b530      	push	{r4, r5, lr}
   1123a:	4604      	mov	r4, r0
   1123c:	460d      	mov	r5, r1
   1123e:	b08b      	sub	sp, #44	; 0x2c
   11240:	4b36      	ldr	r3, [pc, #216]	; (1131c <bt_gatt_indicate+0xe4>)
   11242:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   11246:	075a      	lsls	r2, r3, #29
   11248:	d561      	bpl.n	1130e <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1124a:	b110      	cbz	r0, 11252 <bt_gatt_indicate+0x1a>
   1124c:	7a83      	ldrb	r3, [r0, #10]
   1124e:	2b07      	cmp	r3, #7
   11250:	d160      	bne.n	11314 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   11252:	6868      	ldr	r0, [r5, #4]
   11254:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   11256:	f7ff fe4f 	bl	10ef8 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1125a:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1125c:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   11260:	b33a      	cbz	r2, 112b2 <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   11262:	a905      	add	r1, sp, #20
   11264:	9102      	str	r1, [sp, #8]
   11266:	492e      	ldr	r1, [pc, #184]	; (11320 <bt_gatt_indicate+0xe8>)
	found->attr = NULL;
   11268:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1126a:	9101      	str	r1, [sp, #4]
   1126c:	2101      	movs	r1, #1
   1126e:	9100      	str	r1, [sp, #0]
   11270:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   11274:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   11276:	f7ff fe6f 	bl	10f58 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1127a:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1127c:	b91b      	cbnz	r3, 11286 <bt_gatt_indicate+0x4e>
			return -ENOENT;
   1127e:	f06f 0001 	mvn.w	r0, #1
}
   11282:	b00b      	add	sp, #44	; 0x2c
   11284:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   11286:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   11288:	9b05      	ldr	r3, [sp, #20]
   1128a:	a904      	add	r1, sp, #16
   1128c:	6818      	ldr	r0, [r3, #0]
   1128e:	2300      	movs	r3, #0
   11290:	f88d 3010 	strb.w	r3, [sp, #16]
   11294:	f642 0303 	movw	r3, #10243	; 0x2803
   11298:	f8ad 3012 	strh.w	r3, [sp, #18]
   1129c:	f006 fc70 	bl	17b80 <bt_uuid_cmp>
   112a0:	b970      	cbnz	r0, 112c0 <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   112a2:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   112a4:	68c3      	ldr	r3, [r0, #12]
   112a6:	799b      	ldrb	r3, [r3, #6]
   112a8:	069b      	lsls	r3, r3, #26
   112aa:	d405      	bmi.n	112b8 <bt_gatt_indicate+0x80>
			return -EINVAL;
   112ac:	f06f 0015 	mvn.w	r0, #21
   112b0:	e7e7      	b.n	11282 <bt_gatt_indicate+0x4a>
		if (!data.handle) {
   112b2:	2800      	cmp	r0, #0
   112b4:	d1e8      	bne.n	11288 <bt_gatt_indicate+0x50>
   112b6:	e7e2      	b.n	1127e <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   112b8:	f007 fdbc 	bl	18e34 <bt_gatt_attr_value_handle>
   112bc:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   112c0:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   112c4:	b13c      	cbz	r4, 112d6 <bt_gatt_indicate+0x9e>
		params->_ref = 1;
   112c6:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   112c8:	4601      	mov	r1, r0
   112ca:	462a      	mov	r2, r5
   112cc:	4620      	mov	r0, r4
		params->_ref = 1;
   112ce:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   112d0:	f7ff ff36 	bl	11140 <gatt_indicate>
   112d4:	e7d5      	b.n	11282 <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
   112d6:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   112da:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   112dc:	2302      	movs	r3, #2
   112de:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   112e2:	f642 1302 	movw	r3, #10498	; 0x2902
   112e6:	f8ad 3012 	strh.w	r3, [sp, #18]
   112ea:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   112ec:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   112ee:	9302      	str	r3, [sp, #8]
   112f0:	4b0c      	ldr	r3, [pc, #48]	; (11324 <bt_gatt_indicate+0xec>)
   112f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   112f6:	9301      	str	r3, [sp, #4]
   112f8:	2301      	movs	r3, #1
   112fa:	aa04      	add	r2, sp, #16
   112fc:	9300      	str	r3, [sp, #0]
   112fe:	4623      	mov	r3, r4
	data.ind_params = params;
   11300:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   11302:	f88d 4010 	strb.w	r4, [sp, #16]
   11306:	f7ff fe27 	bl	10f58 <bt_gatt_foreach_attr_type>
	return data.err;
   1130a:	9807      	ldr	r0, [sp, #28]
   1130c:	e7b9      	b.n	11282 <bt_gatt_indicate+0x4a>
		return -EAGAIN;
   1130e:	f06f 000a 	mvn.w	r0, #10
   11312:	e7b6      	b.n	11282 <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
   11314:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   11318:	e7b3      	b.n	11282 <bt_gatt_indicate+0x4a>
   1131a:	bf00      	nop
   1131c:	200080d4 	.word	0x200080d4
   11320:	00018b4d 	.word	0x00018b4d
   11324:	0001162d 	.word	0x0001162d

00011328 <sc_process>:
{
   11328:	4603      	mov	r3, r0
   1132a:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1132c:	f850 2c08 	ldr.w	r2, [r0, #-8]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   11330:	f1a0 0120 	sub.w	r1, r0, #32
	sc_range[0] = sys_cpu_to_le16(sc->start);
   11334:	9201      	str	r2, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   11336:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1133a:	e8d4 2fef 	ldaex	r2, [r4]
   1133e:	f022 0201 	bic.w	r2, r2, #1
   11342:	e8c4 2fe0 	stlex	r0, r2, [r4]
   11346:	2800      	cmp	r0, #0
   11348:	d1f7      	bne.n	1133a <sc_process+0x12>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1134a:	4a0d      	ldr	r2, [pc, #52]	; (11380 <sc_process+0x58>)
	sc->start = 0U;
   1134c:	2000      	movs	r0, #0
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1134e:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   11352:	4a0c      	ldr	r2, [pc, #48]	; (11384 <sc_process+0x5c>)
	sc->start = 0U;
   11354:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->params.func = sc_indicate_rsp;
   11358:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   1135c:	aa01      	add	r2, sp, #4
   1135e:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   11362:	2204      	movs	r2, #4
	sc->end = 0U;
   11364:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   11368:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1136c:	f7ff ff64 	bl	11238 <bt_gatt_indicate>
   11370:	b918      	cbnz	r0, 1137a <sc_process+0x52>
   11372:	2102      	movs	r1, #2
   11374:	4620      	mov	r0, r4
   11376:	f007 fc48 	bl	18c0a <atomic_or>
}
   1137a:	b002      	add	sp, #8
   1137c:	bd10      	pop	{r4, pc}
   1137e:	bf00      	nop
   11380:	0001b82c 	.word	0x0001b82c
   11384:	00010e29 	.word	0x00010e29

00011388 <update_ccc>:
{
   11388:	b5f0      	push	{r4, r5, r6, r7, lr}
   1138a:	b089      	sub	sp, #36	; 0x24
	if (attr->write != bt_gatt_attr_write_ccc) {
   1138c:	4b31      	ldr	r3, [pc, #196]	; (11454 <update_ccc+0xcc>)
	struct bt_conn *conn = data->conn;
   1138e:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   11390:	6882      	ldr	r2, [r0, #8]
{
   11392:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   11394:	429a      	cmp	r2, r3
{
   11396:	af00      	add	r7, sp, #0
	if (attr->write != bt_gatt_attr_write_ccc) {
   11398:	d11e      	bne.n	113d8 <update_ccc+0x50>
	ccc = attr->user_data;
   1139a:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   1139c:	8933      	ldrh	r3, [r6, #8]
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1139e:	1c72      	adds	r2, r6, #1
		if (!cfg->value ||
   113a0:	b1d3      	cbz	r3, 113d8 <update_ccc+0x50>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   113a2:	4628      	mov	r0, r5
   113a4:	7831      	ldrb	r1, [r6, #0]
   113a6:	f006 feaf 	bl	18108 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   113aa:	b1a8      	cbz	r0, 113d8 <update_ccc+0x50>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   113ac:	f44f 7295 	mov.w	r2, #298	; 0x12a
   113b0:	4621      	mov	r1, r4
   113b2:	4628      	mov	r0, r5
   113b4:	f007 fd97 	bl	18ee6 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   113b8:	2803      	cmp	r0, #3
   113ba:	d111      	bne.n	113e0 <update_ccc+0x58>
				LOG_WRN("CCC %p not writable", attr);
   113bc:	466d      	mov	r5, sp
   113be:	b088      	sub	sp, #32
   113c0:	466a      	mov	r2, sp
   113c2:	4b25      	ldr	r3, [pc, #148]	; (11458 <update_ccc+0xd0>)
   113c4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   113c8:	e9c2 3405 	strd	r3, r4, [r2, #20]
   113cc:	f842 0f10 	str.w	r0, [r2, #16]!
   113d0:	4822      	ldr	r0, [pc, #136]	; (1145c <update_ccc+0xd4>)
   113d2:	f007 fc28 	bl	18c26 <z_log_msg_static_create.constprop.0>
   113d6:	46ad      	mov	sp, r5
}
   113d8:	2001      	movs	r0, #1
   113da:	3724      	adds	r7, #36	; 0x24
   113dc:	46bd      	mov	sp, r7
   113de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gatt_ccc_changed(attr, ccc);
   113e0:	4631      	mov	r1, r6
   113e2:	4620      	mov	r0, r4
   113e4:	f007 fb95 	bl	18b12 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   113e8:	4b1d      	ldr	r3, [pc, #116]	; (11460 <update_ccc+0xd8>)
   113ea:	429e      	cmp	r6, r3
   113ec:	d1f4      	bne.n	113d8 <update_ccc+0x50>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   113ee:	7a28      	ldrb	r0, [r5, #8]
   113f0:	f105 0188 	add.w	r1, r5, #136	; 0x88
   113f4:	f7ff fb84 	bl	10b00 <find_sc_cfg>
	if (!cfg) {
   113f8:	2800      	cmp	r0, #0
   113fa:	d0ed      	beq.n	113d8 <update_ccc+0x50>
	if (!(cfg->data.start || cfg->data.end)) {
   113fc:	8902      	ldrh	r2, [r0, #8]
   113fe:	8943      	ldrh	r3, [r0, #10]
   11400:	ea52 0103 	orrs.w	r1, r2, r3
   11404:	d0e8      	beq.n	113d8 <update_ccc+0x50>
	index = bt_conn_index(conn);
   11406:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   11408:	80ba      	strh	r2, [r7, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1140a:	80fb      	strh	r3, [r7, #6]
	index = bt_conn_index(conn);
   1140c:	f7fd feea 	bl	f1e4 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   11410:	2318      	movs	r3, #24
   11412:	4914      	ldr	r1, [pc, #80]	; (11464 <update_ccc+0xdc>)
   11414:	4a14      	ldr	r2, [pc, #80]	; (11468 <update_ccc+0xe0>)
   11416:	fb03 1300 	mla	r3, r3, r0, r1
   1141a:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1141c:	4a13      	ldr	r2, [pc, #76]	; (1146c <update_ccc+0xe4>)
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1141e:	b200      	sxth	r0, r0
	sc_restore_params[index].func = sc_restore_rsp;
   11420:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   11422:	1d3a      	adds	r2, r7, #4
   11424:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   11426:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   11428:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1142c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   11430:	4628      	mov	r0, r5
	sc_restore_params[index].len = sizeof(sc_range);
   11432:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   11434:	f7ff ff00 	bl	11238 <bt_gatt_indicate>
   11438:	2800      	cmp	r0, #0
   1143a:	d0cd      	beq.n	113d8 <update_ccc+0x50>
		LOG_ERR("SC restore indication failed");
   1143c:	4b0c      	ldr	r3, [pc, #48]	; (11470 <update_ccc+0xe8>)
   1143e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11442:	61fb      	str	r3, [r7, #28]
   11444:	2302      	movs	r3, #2
   11446:	4805      	ldr	r0, [pc, #20]	; (1145c <update_ccc+0xd4>)
   11448:	f107 0218 	add.w	r2, r7, #24
   1144c:	61bb      	str	r3, [r7, #24]
   1144e:	f007 fbea 	bl	18c26 <z_log_msg_static_create.constprop.0>
   11452:	e7c1      	b.n	113d8 <update_ccc+0x50>
   11454:	00010b49 	.word	0x00010b49
   11458:	0001d615 	.word	0x0001d615
   1145c:	0001b1e0 	.word	0x0001b1e0
   11460:	200082b4 	.word	0x200082b4
   11464:	200098a8 	.word	0x200098a8
   11468:	0001b82c 	.word	0x0001b82c
   1146c:	00018dcb 	.word	0x00018dcb
   11470:	0001d629 	.word	0x0001d629

00011474 <gatt_notify>:
{
   11474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11478:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1147a:	6851      	ldr	r1, [r2, #4]
{
   1147c:	4607      	mov	r7, r0
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   1147e:	8a4b      	ldrh	r3, [r1, #18]
{
   11480:	4614      	mov	r4, r2
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   11482:	f003 0314 	and.w	r3, r3, #20
{
   11486:	b087      	sub	sp, #28
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   11488:	b173      	cbz	r3, 114a8 <gatt_notify+0x34>
		LOG_WRN("Link is not encrypted");
   1148a:	4b2a      	ldr	r3, [pc, #168]	; (11534 <gatt_notify+0xc0>)
   1148c:	482a      	ldr	r0, [pc, #168]	; (11538 <gatt_notify+0xc4>)
   1148e:	9305      	str	r3, [sp, #20]
   11490:	2302      	movs	r3, #2
   11492:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11496:	aa04      	add	r2, sp, #16
   11498:	9304      	str	r3, [sp, #16]
   1149a:	f007 fbc4 	bl	18c26 <z_log_msg_static_create.constprop.0>
		return -EPERM;
   1149e:	f04f 30ff 	mov.w	r0, #4294967295
}
   114a2:	b007      	add	sp, #28
   114a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   114a8:	2201      	movs	r2, #1
   114aa:	f007 fd38 	bl	18f1e <bt_gatt_is_subscribed>
   114ae:	b960      	cbnz	r0, 114ca <gatt_notify+0x56>
			LOG_WRN("Device is not subscribed to characteristic");
   114b0:	4b22      	ldr	r3, [pc, #136]	; (1153c <gatt_notify+0xc8>)
   114b2:	4821      	ldr	r0, [pc, #132]	; (11538 <gatt_notify+0xc4>)
   114b4:	9305      	str	r3, [sp, #20]
   114b6:	2302      	movs	r3, #2
   114b8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   114bc:	aa04      	add	r2, sp, #16
   114be:	9304      	str	r3, [sp, #16]
   114c0:	f007 fbb1 	bl	18c26 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   114c4:	f06f 0015 	mvn.w	r0, #21
   114c8:	e7eb      	b.n	114a2 <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   114ca:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   114cc:	211b      	movs	r1, #27
   114ce:	4638      	mov	r0, r7
   114d0:	3202      	adds	r2, #2
   114d2:	f7fe ff2b 	bl	1032c <bt_att_create_pdu>
	if (!buf) {
   114d6:	4605      	mov	r5, r0
   114d8:	b960      	cbnz	r0, 114f4 <gatt_notify+0x80>
		LOG_WRN("No buffer available to send notification");
   114da:	4b19      	ldr	r3, [pc, #100]	; (11540 <gatt_notify+0xcc>)
   114dc:	4816      	ldr	r0, [pc, #88]	; (11538 <gatt_notify+0xc4>)
   114de:	9305      	str	r3, [sp, #20]
   114e0:	2302      	movs	r3, #2
   114e2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   114e6:	aa04      	add	r2, sp, #16
   114e8:	9304      	str	r3, [sp, #16]
   114ea:	f007 fb9c 	bl	18c26 <z_log_msg_static_create.constprop.0>
		return -ENOMEM;
   114ee:	f06f 000b 	mvn.w	r0, #11
   114f2:	e7d6      	b.n	114a2 <gatt_notify+0x2e>
   114f4:	f100 090c 	add.w	r9, r0, #12
   114f8:	2102      	movs	r1, #2
   114fa:	4648      	mov	r0, r9
   114fc:	f007 fe5b 	bl	191b6 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   11500:	4606      	mov	r6, r0
   11502:	f826 8b02 	strh.w	r8, [r6], #2
   11506:	89a1      	ldrh	r1, [r4, #12]
   11508:	4648      	mov	r0, r9
   1150a:	f007 fe54 	bl	191b6 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1150e:	89a2      	ldrh	r2, [r4, #12]
   11510:	68a1      	ldr	r1, [r4, #8]
   11512:	4630      	mov	r0, r6
   11514:	f006 fb1d 	bl	17b52 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   11518:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1151c:	4628      	mov	r0, r5
   1151e:	2301      	movs	r3, #1
   11520:	f007 faed 	bl	18afe <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   11524:	4629      	mov	r1, r5
   11526:	4638      	mov	r0, r7
}
   11528:	b007      	add	sp, #28
   1152a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   1152e:	f007 ba75 	b.w	18a1c <bt_att_send>
   11532:	bf00      	nop
   11534:	0001d5ad 	.word	0x0001d5ad
   11538:	0001b1e0 	.word	0x0001b1e0
   1153c:	0001d5c3 	.word	0x0001d5c3
   11540:	0001d646 	.word	0x0001d646

00011544 <bt_gatt_notify_cb>:
{
   11544:	b530      	push	{r4, r5, lr}
   11546:	4604      	mov	r4, r0
   11548:	460d      	mov	r5, r1
   1154a:	b08b      	sub	sp, #44	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1154c:	4b34      	ldr	r3, [pc, #208]	; (11620 <bt_gatt_notify_cb+0xdc>)
   1154e:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   11552:	075a      	lsls	r2, r3, #29
   11554:	d55d      	bpl.n	11612 <bt_gatt_notify_cb+0xce>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   11556:	b110      	cbz	r0, 1155e <bt_gatt_notify_cb+0x1a>
   11558:	7a83      	ldrb	r3, [r0, #10]
   1155a:	2b07      	cmp	r3, #7
   1155c:	d15c      	bne.n	11618 <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
   1155e:	6868      	ldr	r0, [r5, #4]
   11560:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   11562:	f7ff fcc9 	bl	10ef8 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   11566:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   11568:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1156c:	b33a      	cbz	r2, 115be <bt_gatt_notify_cb+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1156e:	a905      	add	r1, sp, #20
   11570:	9102      	str	r1, [sp, #8]
   11572:	492c      	ldr	r1, [pc, #176]	; (11624 <bt_gatt_notify_cb+0xe0>)
	found->attr = NULL;
   11574:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   11576:	9101      	str	r1, [sp, #4]
   11578:	2101      	movs	r1, #1
   1157a:	9100      	str	r1, [sp, #0]
   1157c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   11580:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   11582:	f7ff fce9 	bl	10f58 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   11586:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   11588:	b91b      	cbnz	r3, 11592 <bt_gatt_notify_cb+0x4e>
			return -ENOENT;
   1158a:	f06f 0001 	mvn.w	r0, #1
}
   1158e:	b00b      	add	sp, #44	; 0x2c
   11590:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   11592:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   11594:	9b05      	ldr	r3, [sp, #20]
   11596:	a904      	add	r1, sp, #16
   11598:	6818      	ldr	r0, [r3, #0]
   1159a:	2300      	movs	r3, #0
   1159c:	f88d 3010 	strb.w	r3, [sp, #16]
   115a0:	f642 0303 	movw	r3, #10243	; 0x2803
   115a4:	f8ad 3012 	strh.w	r3, [sp, #18]
   115a8:	f006 faea 	bl	17b80 <bt_uuid_cmp>
   115ac:	b970      	cbnz	r0, 115cc <bt_gatt_notify_cb+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   115ae:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   115b0:	68c3      	ldr	r3, [r0, #12]
   115b2:	799b      	ldrb	r3, [r3, #6]
   115b4:	06db      	lsls	r3, r3, #27
   115b6:	d405      	bmi.n	115c4 <bt_gatt_notify_cb+0x80>
			return -EINVAL;
   115b8:	f06f 0015 	mvn.w	r0, #21
   115bc:	e7e7      	b.n	1158e <bt_gatt_notify_cb+0x4a>
		if (!data.handle) {
   115be:	2800      	cmp	r0, #0
   115c0:	d1e8      	bne.n	11594 <bt_gatt_notify_cb+0x50>
   115c2:	e7e2      	b.n	1158a <bt_gatt_notify_cb+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   115c4:	f007 fc36 	bl	18e34 <bt_gatt_attr_value_handle>
   115c8:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   115cc:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   115d0:	b12c      	cbz	r4, 115de <bt_gatt_notify_cb+0x9a>
		return gatt_notify(conn, data.handle, params);
   115d2:	4601      	mov	r1, r0
   115d4:	462a      	mov	r2, r5
   115d6:	4620      	mov	r0, r4
   115d8:	f7ff ff4c 	bl	11474 <gatt_notify>
   115dc:	e7d7      	b.n	1158e <bt_gatt_notify_cb+0x4a>
	data.err = -ENOTCONN;
   115de:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   115e2:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
   115e6:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   115e8:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   115ea:	f8ad 2012 	strh.w	r2, [sp, #18]
   115ee:	aa05      	add	r2, sp, #20
   115f0:	9202      	str	r2, [sp, #8]
   115f2:	4a0d      	ldr	r2, [pc, #52]	; (11628 <bt_gatt_notify_cb+0xe4>)
	data.type = BT_GATT_CCC_NOTIFY;
   115f4:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   115f8:	e9cd 3200 	strd	r3, r2, [sp]
   115fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11600:	4623      	mov	r3, r4
   11602:	aa04      	add	r2, sp, #16
	data.nfy_params = params;
   11604:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   11606:	f88d 4010 	strb.w	r4, [sp, #16]
   1160a:	f7ff fca5 	bl	10f58 <bt_gatt_foreach_attr_type>
	return data.err;
   1160e:	9807      	ldr	r0, [sp, #28]
   11610:	e7bd      	b.n	1158e <bt_gatt_notify_cb+0x4a>
		return -EAGAIN;
   11612:	f06f 000a 	mvn.w	r0, #10
   11616:	e7ba      	b.n	1158e <bt_gatt_notify_cb+0x4a>
		return -ENOTCONN;
   11618:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1161c:	e7b7      	b.n	1158e <bt_gatt_notify_cb+0x4a>
   1161e:	bf00      	nop
   11620:	200080d4 	.word	0x200080d4
   11624:	00018b4d 	.word	0x00018b4d
   11628:	0001162d 	.word	0x0001162d

0001162c <notify_cb>:
{
   1162c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1162e:	4b3d      	ldr	r3, [pc, #244]	; (11724 <notify_cb+0xf8>)
{
   11630:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   11632:	6882      	ldr	r2, [r0, #8]
{
   11634:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   11636:	429a      	cmp	r2, r3
{
   11638:	b087      	sub	sp, #28
	if (attr->write != bt_gatt_attr_write_ccc) {
   1163a:	d002      	beq.n	11642 <notify_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
   1163c:	2001      	movs	r0, #1
}
   1163e:	b007      	add	sp, #28
   11640:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ccc = attr->user_data;
   11642:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   11644:	4b38      	ldr	r3, [pc, #224]	; (11728 <notify_cb+0xfc>)
   11646:	429e      	cmp	r6, r3
   11648:	d053      	beq.n	116f2 <notify_cb+0xc6>
		if (cfg->value != data->type) {
   1164a:	8932      	ldrh	r2, [r6, #8]
   1164c:	89ab      	ldrh	r3, [r5, #12]
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1164e:	1c71      	adds	r1, r6, #1
		if (cfg->value != data->type) {
   11650:	429a      	cmp	r2, r3
   11652:	d1f3      	bne.n	1163c <notify_cb+0x10>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   11654:	7830      	ldrb	r0, [r6, #0]
   11656:	f7fd fe87 	bl	f368 <bt_conn_lookup_addr_le>
		if (!conn) {
   1165a:	4604      	mov	r4, r0
   1165c:	2800      	cmp	r0, #0
   1165e:	d0ed      	beq.n	1163c <notify_cb+0x10>
		if (conn->state != BT_CONN_CONNECTED) {
   11660:	7a83      	ldrb	r3, [r0, #10]
   11662:	2b07      	cmp	r3, #7
   11664:	d005      	beq.n	11672 <notify_cb+0x46>
			bt_conn_unref(conn);
   11666:	f006 fd10 	bl	1808a <bt_conn_unref>
			continue;
   1166a:	e7e7      	b.n	1163c <notify_cb+0x10>
			bt_conn_unref(conn);
   1166c:	f006 fd0d 	bl	1808a <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   11670:	e7eb      	b.n	1164a <notify_cb+0x1e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   11672:	6973      	ldr	r3, [r6, #20]
   11674:	b123      	cbz	r3, 11680 <notify_cb+0x54>
   11676:	4639      	mov	r1, r7
   11678:	4798      	blx	r3
   1167a:	b908      	cbnz	r0, 11680 <notify_cb+0x54>
			bt_conn_unref(conn);
   1167c:	4620      	mov	r0, r4
   1167e:	e7f2      	b.n	11666 <notify_cb+0x3a>
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   11680:	8a7b      	ldrh	r3, [r7, #18]
   11682:	f003 0314 	and.w	r3, r3, #20
   11686:	b153      	cbz	r3, 1169e <notify_cb+0x72>
			LOG_WRN("Link is not encrypted");
   11688:	4b28      	ldr	r3, [pc, #160]	; (1172c <notify_cb+0x100>)
   1168a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1168e:	9305      	str	r3, [sp, #20]
   11690:	2302      	movs	r3, #2
   11692:	4827      	ldr	r0, [pc, #156]	; (11730 <notify_cb+0x104>)
   11694:	aa04      	add	r2, sp, #16
   11696:	9304      	str	r3, [sp, #16]
   11698:	f007 fac5 	bl	18c26 <z_log_msg_static_create.constprop.0>
   1169c:	e7ee      	b.n	1167c <notify_cb+0x50>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1169e:	89ab      	ldrh	r3, [r5, #12]
   116a0:	2b02      	cmp	r3, #2
   116a2:	d114      	bne.n	116ce <notify_cb+0xa2>
   116a4:	8933      	ldrh	r3, [r6, #8]
   116a6:	079a      	lsls	r2, r3, #30
   116a8:	d405      	bmi.n	116b6 <notify_cb+0x8a>
		bt_conn_unref(conn);
   116aa:	4620      	mov	r0, r4
   116ac:	f006 fced 	bl	1808a <bt_conn_unref>
		data->err = 0;
   116b0:	2300      	movs	r3, #0
   116b2:	60ab      	str	r3, [r5, #8]
   116b4:	e7c2      	b.n	1163c <notify_cb+0x10>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   116b6:	4620      	mov	r0, r4
   116b8:	692a      	ldr	r2, [r5, #16]
   116ba:	88a9      	ldrh	r1, [r5, #4]
   116bc:	f7ff fd40 	bl	11140 <gatt_indicate>
			if (err == 0) {
   116c0:	4606      	mov	r6, r0
   116c2:	b978      	cbnz	r0, 116e4 <notify_cb+0xb8>
				data->ind_params->_ref++;
   116c4:	692a      	ldr	r2, [r5, #16]
   116c6:	7d93      	ldrb	r3, [r2, #22]
   116c8:	3301      	adds	r3, #1
   116ca:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   116cc:	e7ed      	b.n	116aa <notify_cb+0x7e>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   116ce:	2b01      	cmp	r3, #1
   116d0:	d1eb      	bne.n	116aa <notify_cb+0x7e>
   116d2:	8933      	ldrh	r3, [r6, #8]
   116d4:	07db      	lsls	r3, r3, #31
   116d6:	d5e8      	bpl.n	116aa <notify_cb+0x7e>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   116d8:	4620      	mov	r0, r4
   116da:	692a      	ldr	r2, [r5, #16]
   116dc:	88a9      	ldrh	r1, [r5, #4]
   116de:	f7ff fec9 	bl	11474 <gatt_notify>
   116e2:	4606      	mov	r6, r0
		bt_conn_unref(conn);
   116e4:	4620      	mov	r0, r4
   116e6:	f006 fcd0 	bl	1808a <bt_conn_unref>
		if (err < 0) {
   116ea:	2e00      	cmp	r6, #0
   116ec:	dae0      	bge.n	116b0 <notify_cb+0x84>
			return BT_GATT_ITER_STOP;
   116ee:	2000      	movs	r0, #0
   116f0:	e7a5      	b.n	1163e <notify_cb+0x12>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   116f2:	4c10      	ldr	r4, [pc, #64]	; (11734 <notify_cb+0x108>)
   116f4:	4910      	ldr	r1, [pc, #64]	; (11738 <notify_cb+0x10c>)
   116f6:	4620      	mov	r0, r4
   116f8:	f007 fa7f 	bl	18bfa <bt_addr_le_eq>
   116fc:	2800      	cmp	r0, #0
   116fe:	d1a4      	bne.n	1164a <notify_cb+0x1e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   11700:	2207      	movs	r2, #7
   11702:	4621      	mov	r1, r4
   11704:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   11708:	f7fd fe78 	bl	f3fc <bt_conn_lookup_state_le>
			if (!conn) {
   1170c:	2800      	cmp	r0, #0
   1170e:	d1ad      	bne.n	1166c <notify_cb+0x40>
				sc = (struct sc_data *)data->ind_params->data;
   11710:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   11712:	4621      	mov	r1, r4
				sc = (struct sc_data *)data->ind_params->data;
   11714:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   11716:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1171a:	8853      	ldrh	r3, [r2, #2]
   1171c:	8812      	ldrh	r2, [r2, #0]
   1171e:	f7ff fa8f 	bl	10c40 <sc_save>
				continue;
   11722:	e792      	b.n	1164a <notify_cb+0x1e>
   11724:	00010b49 	.word	0x00010b49
   11728:	200082b4 	.word	0x200082b4
   1172c:	0001d5ad 	.word	0x0001d5ad
   11730:	0001b1e0 	.word	0x0001b1e0
   11734:	20009b27 	.word	0x20009b27
   11738:	0001c4c9 	.word	0x0001c4c9

0001173c <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   1173c:	b507      	push	{r0, r1, r2, lr}
	struct conn_data data;

	LOG_DBG("conn %p", conn);

	data.conn = conn;
   1173e:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
   11740:	2001      	movs	r0, #1
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   11742:	466b      	mov	r3, sp
   11744:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11748:	4a03      	ldr	r2, [pc, #12]	; (11758 <bt_gatt_connected+0x1c>)
	data.sec = BT_SECURITY_L1;
   1174a:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1174e:	f007 fbbf 	bl	18ed0 <bt_gatt_foreach_attr>
	err = bt_gatt_exchange_mtu(conn, &gatt_exchange_params);
	if (err) {
		LOG_WRN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
}
   11752:	b003      	add	sp, #12
   11754:	f85d fb04 	ldr.w	pc, [sp], #4
   11758:	00011389 	.word	0x00011389

0001175c <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   1175c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1175e:	4605      	mov	r5, r0
   11760:	460e      	mov	r6, r1
   11762:	4617      	mov	r7, r2
	return list->head;
   11764:	4b06      	ldr	r3, [pc, #24]	; (11780 <bt_gatt_att_max_mtu_changed+0x24>)
   11766:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   11768:	b14c      	cbz	r4, 1177e <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   1176a:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1176e:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   11770:	b11b      	cbz	r3, 1177a <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   11772:	463a      	mov	r2, r7
   11774:	4631      	mov	r1, r6
   11776:	4628      	mov	r0, r5
   11778:	4798      	blx	r3
	return node->next;
   1177a:	6864      	ldr	r4, [r4, #4]
   1177c:	e7f4      	b.n	11768 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   1177e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11780:	200098d4 	.word	0x200098d4

00011784 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   11784:	b570      	push	{r4, r5, r6, lr}
   11786:	4604      	mov	r4, r0
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   11788:	4603      	mov	r3, r0
   1178a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1178e:	2001      	movs	r0, #1
   11790:	4a0d      	ldr	r2, [pc, #52]	; (117c8 <bt_gatt_disconnected+0x44>)
   11792:	f007 fb9d 	bl	18ed0 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   11796:	4620      	mov	r0, r4
   11798:	f7ff f99a 	bl	10ad0 <find_cf_cfg>
	if (!cfg) {
   1179c:	4605      	mov	r5, r0
   1179e:	b188      	cbz	r0, 117c4 <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   117a0:	f104 0688 	add.w	r6, r4, #136	; 0x88
   117a4:	4631      	mov	r1, r6
   117a6:	7a20      	ldrb	r0, [r4, #8]
   117a8:	f006 fb1a 	bl	17de0 <bt_addr_le_is_bonded>
   117ac:	b920      	cbnz	r0, 117b8 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   117ae:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   117b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   117b4:	f7ff ba2c 	b.w	10c10 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   117b8:	4631      	mov	r1, r6
   117ba:	1c68      	adds	r0, r5, #1
}
   117bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   117c0:	f007 ba2e 	b.w	18c20 <bt_addr_le_copy>
}
   117c4:	bd70      	pop	{r4, r5, r6, pc}
   117c6:	bf00      	nop
   117c8:	00010cad 	.word	0x00010cad

000117cc <bt_smp_accept.part.0>:
	}

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   117cc:	b580      	push	{r7, lr}
   117ce:	af00      	add	r7, sp, #0
		*chan = &smp->chan;

		return 0;
	}

	LOG_ERR("No available SMP context for conn %p", conn);
   117d0:	b088      	sub	sp, #32
   117d2:	466a      	mov	r2, sp
   117d4:	4b07      	ldr	r3, [pc, #28]	; (117f4 <bt_smp_accept.part.0+0x28>)
   117d6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   117da:	2303      	movs	r3, #3
   117dc:	f842 3f10 	str.w	r3, [r2, #16]!
   117e0:	2300      	movs	r3, #0
   117e2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   117e6:	4804      	ldr	r0, [pc, #16]	; (117f8 <bt_smp_accept.part.0+0x2c>)
   117e8:	f7f8 ff9c 	bl	a724 <z_impl_z_log_msg_static_create>

	return -ENOMEM;
}
   117ec:	f06f 000b 	mvn.w	r0, #11
   117f0:	46bd      	mov	sp, r7
   117f2:	bd80      	pop	{r7, pc}
   117f4:	0001d67e 	.word	0x0001d67e
   117f8:	0001b210 	.word	0x0001b210

000117fc <bt_smp_accept>:
		if (smp->chan.conn) {
   117fc:	4b04      	ldr	r3, [pc, #16]	; (11810 <bt_smp_accept+0x14>)
   117fe:	681a      	ldr	r2, [r3, #0]
   11800:	b10a      	cbz	r2, 11806 <bt_smp_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   11802:	f7ff bfe3 	b.w	117cc <bt_smp_accept.part.0>
		smp->chan.ops = &ops;
   11806:	4803      	ldr	r0, [pc, #12]	; (11814 <bt_smp_accept+0x18>)
   11808:	6058      	str	r0, [r3, #4]
}
   1180a:	4610      	mov	r0, r2
		*chan = &smp->chan;
   1180c:	600b      	str	r3, [r1, #0]
}
   1180e:	4770      	bx	lr
   11810:	200098dc 	.word	0x200098dc
   11814:	0001b930 	.word	0x0001b930

00011818 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   11818:	222c      	movs	r2, #44	; 0x2c
   1181a:	4b02      	ldr	r3, [pc, #8]	; (11824 <net_buf_pool_get+0xc>)
   1181c:	fb02 3000 	mla	r0, r2, r0, r3
   11820:	4770      	bx	lr
   11822:	bf00      	nop
   11824:	20008610 	.word	0x20008610

00011828 <net_buf_id>:
int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   11828:	212c      	movs	r1, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1182a:	7a82      	ldrb	r2, [r0, #10]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1182c:	4b05      	ldr	r3, [pc, #20]	; (11844 <net_buf_id+0x1c>)
   1182e:	fb01 3302 	mla	r3, r1, r2, r3
   11832:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   11834:	7f1b      	ldrb	r3, [r3, #28]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   11836:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   11838:	331b      	adds	r3, #27
   1183a:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1183e:	fbb0 f0f3 	udiv	r0, r0, r3
   11842:	4770      	bx	lr
   11844:	20008610 	.word	0x20008610

00011848 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   11848:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1184a:	242c      	movs	r4, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1184c:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1184e:	4b09      	ldr	r3, [pc, #36]	; (11874 <fixed_data_alloc+0x2c>)
   11850:	fb04 3302 	mla	r3, r4, r2, r3
   11854:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	*size = MIN(fixed->data_size, *size);
   11856:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   11858:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1185a:	681a      	ldr	r2, [r3, #0]
   1185c:	4294      	cmp	r4, r2
   1185e:	bf94      	ite	ls
   11860:	600c      	strls	r4, [r1, #0]
   11862:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   11864:	e9d3 5400 	ldrd	r5, r4, [r3]
   11868:	f7ff ffde 	bl	11828 <net_buf_id>
}
   1186c:	fb05 4000 	mla	r0, r5, r0, r4
   11870:	bd38      	pop	{r3, r4, r5, pc}
   11872:	bf00      	nop
   11874:	20008610 	.word	0x20008610

00011878 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   11878:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1187c:	4605      	mov	r5, r0
   1187e:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   11880:	4610      	mov	r0, r2
   11882:	4619      	mov	r1, r3
{
   11884:	4691      	mov	r9, r2
   11886:	4698      	mov	r8, r3
   11888:	4617      	mov	r7, r2
   1188a:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1188c:	f009 f8ac 	bl	1a9e8 <sys_clock_timeout_end_calc>
   11890:	4682      	mov	sl, r0
   11892:	468b      	mov	fp, r1
	__asm__ volatile(
   11894:	f04f 0320 	mov.w	r3, #32
   11898:	f3ef 8111 	mrs	r1, BASEPRI
   1189c:	f383 8812 	msr	BASEPRI_MAX, r3
   118a0:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   118a4:	8b6b      	ldrh	r3, [r5, #26]
   118a6:	2b00      	cmp	r3, #0
   118a8:	d058      	beq.n	1195c <net_buf_alloc_len+0xe4>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   118aa:	8b2a      	ldrh	r2, [r5, #24]
   118ac:	429a      	cmp	r2, r3
   118ae:	d93c      	bls.n	1192a <net_buf_alloc_len+0xb2>
   118b0:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   118b2:	2200      	movs	r2, #0
   118b4:	2300      	movs	r3, #0
   118b6:	4628      	mov	r0, r5
   118b8:	f003 fb42 	bl	14f40 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   118bc:	9900      	ldr	r1, [sp, #0]
   118be:	4604      	mov	r4, r0
   118c0:	2800      	cmp	r0, #0
   118c2:	d032      	beq.n	1192a <net_buf_alloc_len+0xb2>
	__asm__ volatile(
   118c4:	f381 8811 	msr	BASEPRI, r1
   118c8:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   118cc:	9b01      	ldr	r3, [sp, #4]
   118ce:	2b00      	cmp	r3, #0
   118d0:	d055      	beq.n	1197e <net_buf_alloc_len+0x106>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   118d2:	ea58 0309 	orrs.w	r3, r8, r9
   118d6:	d00f      	beq.n	118f8 <net_buf_alloc_len+0x80>
   118d8:	f1b8 3fff 	cmp.w	r8, #4294967295
   118dc:	bf08      	it	eq
   118de:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   118e2:	d009      	beq.n	118f8 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   118e4:	f004 fa50 	bl	15d88 <sys_clock_tick_get>
   118e8:	ebba 0700 	subs.w	r7, sl, r0
   118ec:	eb6b 0601 	sbc.w	r6, fp, r1

			if (remaining <= 0) {
   118f0:	2e00      	cmp	r6, #0
   118f2:	bfbc      	itt	lt
   118f4:	2700      	movlt	r7, #0
   118f6:	463e      	movlt	r6, r7
	return pool->alloc->cb->alloc(buf, size, timeout);
   118f8:	f04f 082c 	mov.w	r8, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   118fc:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   118fe:	4d25      	ldr	r5, [pc, #148]	; (11994 <net_buf_alloc_len+0x11c>)
   11900:	463a      	mov	r2, r7
   11902:	fb08 5303 	mla	r3, r8, r3, r5
   11906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11908:	4620      	mov	r0, r4
   1190a:	681b      	ldr	r3, [r3, #0]
   1190c:	a901      	add	r1, sp, #4
   1190e:	f8d3 9000 	ldr.w	r9, [r3]
   11912:	4633      	mov	r3, r6
   11914:	47c8      	blx	r9
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   11916:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   11918:	2800      	cmp	r0, #0
   1191a:	d131      	bne.n	11980 <net_buf_alloc_len+0x108>
	k_lifo_put(&pool->free, buf);
   1191c:	7aa0      	ldrb	r0, [r4, #10]
   1191e:	4621      	mov	r1, r4
   11920:	fb00 5008 	mla	r0, r0, r8, r5
   11924:	f008 fde9 	bl	1a4fa <k_queue_prepend>
}
   11928:	e024      	b.n	11974 <net_buf_alloc_len+0xfc>
		uninit_count = pool->uninit_count--;
   1192a:	8b68      	ldrh	r0, [r5, #26]
   1192c:	1e43      	subs	r3, r0, #1
   1192e:	836b      	strh	r3, [r5, #26]
   11930:	f381 8811 	msr	BASEPRI, r1
   11934:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   11938:	7f2b      	ldrb	r3, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1193a:	8b2a      	ldrh	r2, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1193c:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1193e:	331b      	adds	r3, #27
   11940:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   11944:	1a12      	subs	r2, r2, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   11946:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   1194a:	4b12      	ldr	r3, [pc, #72]	; (11994 <net_buf_alloc_len+0x11c>)
   1194c:	4a12      	ldr	r2, [pc, #72]	; (11998 <net_buf_alloc_len+0x120>)
   1194e:	1aeb      	subs	r3, r5, r3
   11950:	109b      	asrs	r3, r3, #2
   11952:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   11954:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   11956:	7f2b      	ldrb	r3, [r5, #28]
   11958:	72e3      	strb	r3, [r4, #11]
		goto success;
   1195a:	e7b7      	b.n	118cc <net_buf_alloc_len+0x54>
   1195c:	f381 8811 	msr	BASEPRI, r1
   11960:	f3bf 8f6f 	isb	sy
   11964:	464a      	mov	r2, r9
   11966:	4643      	mov	r3, r8
   11968:	4628      	mov	r0, r5
   1196a:	f003 fae9 	bl	14f40 <z_impl_k_queue_get>
	if (!buf) {
   1196e:	4604      	mov	r4, r0
   11970:	2800      	cmp	r0, #0
   11972:	d1ab      	bne.n	118cc <net_buf_alloc_len+0x54>
		return NULL;
   11974:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   11976:	4620      	mov	r0, r4
   11978:	b003      	add	sp, #12
   1197a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   1197e:	6163      	str	r3, [r4, #20]
	buf->frags = NULL;
   11980:	2300      	movs	r3, #0
	buf->ref   = 1U;
   11982:	2201      	movs	r2, #1
	buf->frags = NULL;
   11984:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   11986:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   11988:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   1198a:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1198c:	6963      	ldr	r3, [r4, #20]
   1198e:	8262      	strh	r2, [r4, #18]
   11990:	60e3      	str	r3, [r4, #12]
	return buf;
   11992:	e7f0      	b.n	11976 <net_buf_alloc_len+0xfe>
   11994:	20008610 	.word	0x20008610
   11998:	ba2e8ba3 	.word	0xba2e8ba3

0001199c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1199c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   119a0:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   119a2:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   119a4:	272c      	movs	r7, #44	; 0x2c
   119a6:	4d15      	ldr	r5, [pc, #84]	; (119fc <net_buf_unref+0x60>)
	while (buf) {
   119a8:	b90c      	cbnz	r4, 119ae <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   119aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   119ae:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   119b0:	f8d4 8004 	ldr.w	r8, [r4, #4]
		if (--buf->ref > 0) {
   119b4:	3b01      	subs	r3, #1
   119b6:	b2db      	uxtb	r3, r3
   119b8:	7223      	strb	r3, [r4, #8]
   119ba:	2b00      	cmp	r3, #0
   119bc:	d1f5      	bne.n	119aa <net_buf_unref+0xe>
		if (buf->__buf) {
   119be:	6961      	ldr	r1, [r4, #20]
   119c0:	b159      	cbz	r1, 119da <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   119c2:	7a63      	ldrb	r3, [r4, #9]
   119c4:	07db      	lsls	r3, r3, #31
   119c6:	d407      	bmi.n	119d8 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   119c8:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   119ca:	4620      	mov	r0, r4
   119cc:	fb07 5303 	mla	r3, r7, r3, r5
   119d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   119d2:	681b      	ldr	r3, [r3, #0]
   119d4:	689b      	ldr	r3, [r3, #8]
   119d6:	4798      	blx	r3
			buf->__buf = NULL;
   119d8:	6166      	str	r6, [r4, #20]
		pool = net_buf_pool_get(buf->pool_id);
   119da:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   119dc:	60e6      	str	r6, [r4, #12]
		if (pool->destroy) {
   119de:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   119e2:	6066      	str	r6, [r4, #4]
		if (pool->destroy) {
   119e4:	6a1b      	ldr	r3, [r3, #32]
   119e6:	b11b      	cbz	r3, 119f0 <net_buf_unref+0x54>
			pool->destroy(buf);
   119e8:	4620      	mov	r0, r4
   119ea:	4798      	blx	r3
{
   119ec:	4644      	mov	r4, r8
   119ee:	e7db      	b.n	119a8 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   119f0:	4621      	mov	r1, r4
   119f2:	fb00 5007 	mla	r0, r0, r7, r5
   119f6:	f008 fd80 	bl	1a4fa <k_queue_prepend>
}
   119fa:	e7f7      	b.n	119ec <net_buf_unref+0x50>
   119fc:	20008610 	.word	0x20008610

00011a00 <bt_rpmsg_send>:
		LOG_HEXDUMP_DBG(buf->data, buf->len, "RX buf payload:");
	}
}

static int bt_rpmsg_send(struct net_buf *buf)
{
   11a00:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   11a02:	7e01      	ldrb	r1, [r0, #24]
   11a04:	4604      	mov	r4, r0
	int err;
	uint8_t pkt_indicator;

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   11a06:	2902      	cmp	r1, #2
{
   11a08:	af00      	add	r7, sp, #0
	switch (bt_buf_get_type(buf)) {
   11a0a:	d018      	beq.n	11a3e <bt_rpmsg_send+0x3e>
   11a0c:	2904      	cmp	r1, #4
   11a0e:	d015      	beq.n	11a3c <bt_rpmsg_send+0x3c>
   11a10:	b339      	cbz	r1, 11a62 <bt_rpmsg_send+0x62>
		break;
	case BT_BUF_ISO_OUT:
		pkt_indicator = RPMSG_ISO;
		break;
	default:
		LOG_ERR("Unknown type %u", bt_buf_get_type(buf));
   11a12:	466d      	mov	r5, sp
   11a14:	b088      	sub	sp, #32
   11a16:	466a      	mov	r2, sp
   11a18:	4b13      	ldr	r3, [pc, #76]	; (11a68 <bt_rpmsg_send+0x68>)
	switch (bt_buf_get_type(buf)) {
   11a1a:	e9c2 3105 	strd	r3, r1, [r2, #20]
	net_buf_push_u8(buf, pkt_indicator);

	LOG_HEXDUMP_DBG(buf->data, buf->len, "Final HCI buffer:");
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
	if (err < 0) {
		LOG_ERR("Failed to send (err %d)", err);
   11a1e:	2303      	movs	r3, #3
   11a20:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11a24:	4811      	ldr	r0, [pc, #68]	; (11a6c <bt_rpmsg_send+0x6c>)
   11a26:	f842 3f10 	str.w	r3, [r2, #16]!
   11a2a:	f007 fc10 	bl	1924e <z_log_msg_static_create.constprop.0>
   11a2e:	46ad      	mov	sp, r5
	}

done:
	net_buf_unref(buf);
   11a30:	4620      	mov	r0, r4
   11a32:	f7ff ffb3 	bl	1199c <net_buf_unref>
	return 0;
}
   11a36:	2000      	movs	r0, #0
   11a38:	46bd      	mov	sp, r7
   11a3a:	bdb0      	pop	{r4, r5, r7, pc}
		pkt_indicator = RPMSG_ISO;
   11a3c:	2105      	movs	r1, #5
	net_buf_simple_push_u8(&buf->b, val);
   11a3e:	f104 000c 	add.w	r0, r4, #12
   11a42:	f007 fbd7 	bl	191f4 <net_buf_simple_push_u8>
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
   11a46:	8a22      	ldrh	r2, [r4, #16]
   11a48:	68e1      	ldr	r1, [r4, #12]
   11a4a:	4809      	ldr	r0, [pc, #36]	; (11a70 <bt_rpmsg_send+0x70>)
   11a4c:	f7f8 f864 	bl	9b18 <ipc_service_send>
	if (err < 0) {
   11a50:	2800      	cmp	r0, #0
   11a52:	daed      	bge.n	11a30 <bt_rpmsg_send+0x30>
		LOG_ERR("Failed to send (err %d)", err);
   11a54:	466d      	mov	r5, sp
   11a56:	b088      	sub	sp, #32
   11a58:	466a      	mov	r2, sp
   11a5a:	4b06      	ldr	r3, [pc, #24]	; (11a74 <bt_rpmsg_send+0x74>)
   11a5c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   11a60:	e7dd      	b.n	11a1e <bt_rpmsg_send+0x1e>
	switch (bt_buf_get_type(buf)) {
   11a62:	2101      	movs	r1, #1
   11a64:	e7eb      	b.n	11a3e <bt_rpmsg_send+0x3e>
   11a66:	bf00      	nop
   11a68:	0001d6c1 	.word	0x0001d6c1
   11a6c:	0001b1f0 	.word	0x0001b1f0
   11a70:	2000990c 	.word	0x2000990c
   11a74:	0001d6d1 	.word	0x0001d6d1

00011a78 <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(void)
{
   11a78:	b5b0      	push	{r4, r5, r7, lr}

	int err;

	err = bt_hci_driver_register(&drv);
   11a7a:	480c      	ldr	r0, [pc, #48]	; (11aac <bt_rpmsg_init+0x34>)
{
   11a7c:	af00      	add	r7, sp, #0
	err = bt_hci_driver_register(&drv);
   11a7e:	f7fb fdbb 	bl	d5f8 <bt_hci_driver_register>
	if (err < 0) {
   11a82:	1e04      	subs	r4, r0, #0
   11a84:	da0e      	bge.n	11aa4 <bt_rpmsg_init+0x2c>
		LOG_ERR("Failed to register BT HIC driver (err %d)", err);
   11a86:	466d      	mov	r5, sp
   11a88:	b088      	sub	sp, #32
   11a8a:	466a      	mov	r2, sp
   11a8c:	4b08      	ldr	r3, [pc, #32]	; (11ab0 <bt_rpmsg_init+0x38>)
   11a8e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11a92:	e9c2 3405 	strd	r3, r4, [r2, #20]
   11a96:	2303      	movs	r3, #3
   11a98:	4806      	ldr	r0, [pc, #24]	; (11ab4 <bt_rpmsg_init+0x3c>)
   11a9a:	f842 3f10 	str.w	r3, [r2, #16]!
   11a9e:	f007 fbd6 	bl	1924e <z_log_msg_static_create.constprop.0>
   11aa2:	46ad      	mov	sp, r5
	}

	return err;
}
   11aa4:	4620      	mov	r0, r4
   11aa6:	46bd      	mov	sp, r7
   11aa8:	bdb0      	pop	{r4, r5, r7, pc}
   11aaa:	bf00      	nop
   11aac:	0001b964 	.word	0x0001b964
   11ab0:	0001d6e9 	.word	0x0001d6e9
   11ab4:	0001b1f0 	.word	0x0001b1f0

00011ab8 <hci_ept_bound>:
	z_impl_k_sem_give(sem);
   11ab8:	4801      	ldr	r0, [pc, #4]	; (11ac0 <hci_ept_bound+0x8>)
   11aba:	f003 ba75 	b.w	14fa8 <z_impl_k_sem_give>
   11abe:	bf00      	nop
   11ac0:	200085b0 	.word	0x200085b0

00011ac4 <bt_rpmsg_open>:
{
   11ac4:	b5b0      	push	{r4, r5, r7, lr}
	err = ipc_service_open_instance(hci_ipc_instance);
   11ac6:	481a      	ldr	r0, [pc, #104]	; (11b30 <bt_rpmsg_open+0x6c>)
{
   11ac8:	af00      	add	r7, sp, #0
	err = ipc_service_open_instance(hci_ipc_instance);
   11aca:	f7f7 ffc5 	bl	9a58 <ipc_service_open_instance>
	if (err && (err != -EALREADY)) {
   11ace:	4604      	mov	r4, r0
   11ad0:	b1a0      	cbz	r0, 11afc <bt_rpmsg_open+0x38>
   11ad2:	f110 0f78 	cmn.w	r0, #120	; 0x78
   11ad6:	d011      	beq.n	11afc <bt_rpmsg_open+0x38>
		LOG_ERR("IPC service instance initialization failed: %d\n", err);
   11ad8:	466d      	mov	r5, sp
   11ada:	b088      	sub	sp, #32
   11adc:	466a      	mov	r2, sp
   11ade:	4b15      	ldr	r3, [pc, #84]	; (11b34 <bt_rpmsg_open+0x70>)
		LOG_ERR("Endpoint binding failed with %d", err);
   11ae0:	e9c2 3405 	strd	r3, r4, [r2, #20]
   11ae4:	2303      	movs	r3, #3
   11ae6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11aea:	4813      	ldr	r0, [pc, #76]	; (11b38 <bt_rpmsg_open+0x74>)
   11aec:	f842 3f10 	str.w	r3, [r2, #16]!
   11af0:	f007 fbad 	bl	1924e <z_log_msg_static_create.constprop.0>
   11af4:	46ad      	mov	sp, r5
}
   11af6:	4620      	mov	r0, r4
   11af8:	46bd      	mov	sp, r7
   11afa:	bdb0      	pop	{r4, r5, r7, pc}
	err = ipc_service_register_endpoint(hci_ipc_instance, &hci_ept, &hci_ept_cfg);
   11afc:	4a0f      	ldr	r2, [pc, #60]	; (11b3c <bt_rpmsg_open+0x78>)
   11afe:	4910      	ldr	r1, [pc, #64]	; (11b40 <bt_rpmsg_open+0x7c>)
   11b00:	480b      	ldr	r0, [pc, #44]	; (11b30 <bt_rpmsg_open+0x6c>)
   11b02:	f7f7 ffd7 	bl	9ab4 <ipc_service_register_endpoint>
	if (err) {
   11b06:	4604      	mov	r4, r0
   11b08:	b120      	cbz	r0, 11b14 <bt_rpmsg_open+0x50>
		LOG_ERR("Registering endpoint failed with %d", err);
   11b0a:	466d      	mov	r5, sp
   11b0c:	b088      	sub	sp, #32
   11b0e:	466a      	mov	r2, sp
   11b10:	4b0c      	ldr	r3, [pc, #48]	; (11b44 <bt_rpmsg_open+0x80>)
   11b12:	e7e5      	b.n	11ae0 <bt_rpmsg_open+0x1c>
	return z_impl_k_sem_take(sem, timeout);
   11b14:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   11b18:	2300      	movs	r3, #0
   11b1a:	480b      	ldr	r0, [pc, #44]	; (11b48 <bt_rpmsg_open+0x84>)
   11b1c:	f003 fa6a 	bl	14ff4 <z_impl_k_sem_take>
	if (err) {
   11b20:	4604      	mov	r4, r0
   11b22:	2800      	cmp	r0, #0
   11b24:	d0e7      	beq.n	11af6 <bt_rpmsg_open+0x32>
		LOG_ERR("Endpoint binding failed with %d", err);
   11b26:	466d      	mov	r5, sp
   11b28:	b088      	sub	sp, #32
   11b2a:	466a      	mov	r2, sp
   11b2c:	4b07      	ldr	r3, [pc, #28]	; (11b4c <bt_rpmsg_open+0x88>)
   11b2e:	e7d7      	b.n	11ae0 <bt_rpmsg_open+0x1c>
   11b30:	0001aeac 	.word	0x0001aeac
   11b34:	0001d713 	.word	0x0001d713
   11b38:	0001b1f0 	.word	0x0001b1f0
   11b3c:	200082e4 	.word	0x200082e4
   11b40:	2000990c 	.word	0x2000990c
   11b44:	0001d743 	.word	0x0001d743
   11b48:	200085b0 	.word	0x200085b0
   11b4c:	0001d767 	.word	0x0001d767

00011b50 <hci_ept_recv>:
{
   11b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b54:	b089      	sub	sp, #36	; 0x24
	pkt_indicator = *data++;
   11b56:	4680      	mov	r8, r0
   11b58:	f818 9b01 	ldrb.w	r9, [r8], #1
{
   11b5c:	4606      	mov	r6, r0
	switch (pkt_indicator) {
   11b5e:	f1b9 0f04 	cmp.w	r9, #4
{
   11b62:	460c      	mov	r4, r1
   11b64:	af00      	add	r7, sp, #0
	remaining -= sizeof(pkt_indicator);
   11b66:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
   11b6a:	d00d      	beq.n	11b88 <hci_ept_recv+0x38>
   11b6c:	f1b9 0f05 	cmp.w	r9, #5
   11b70:	f000 80a3 	beq.w	11cba <hci_ept_recv+0x16a>
   11b74:	f1b9 0f02 	cmp.w	r9, #2
   11b78:	f040 80cc 	bne.w	11d14 <hci_ept_recv+0x1c4>
	if (remaining < sizeof(hdr)) {
   11b7c:	2b03      	cmp	r3, #3
   11b7e:	d875      	bhi.n	11c6c <hci_ept_recv+0x11c>
		LOG_ERR("Not enough data for ACL header");
   11b80:	4b6c      	ldr	r3, [pc, #432]	; (11d34 <hci_ept_recv+0x1e4>)
		LOG_ERR("No available ACL buffers!");
   11b82:	e9c7 9306 	strd	r9, r3, [r7, #24]
   11b86:	e005      	b.n	11b94 <hci_ept_recv+0x44>
	if (remaining < sizeof(hdr)) {
   11b88:	2b01      	cmp	r3, #1
   11b8a:	d80e      	bhi.n	11baa <hci_ept_recv+0x5a>
		LOG_ERR("Not enough data for event header");
   11b8c:	4b6a      	ldr	r3, [pc, #424]	; (11d38 <hci_ept_recv+0x1e8>)
		LOG_ERR("Event payload length is not correct");
   11b8e:	61fb      	str	r3, [r7, #28]
   11b90:	2302      	movs	r3, #2
   11b92:	61bb      	str	r3, [r7, #24]
   11b94:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11b98:	4868      	ldr	r0, [pc, #416]	; (11d3c <hci_ept_recv+0x1ec>)
   11b9a:	f107 0218 	add.w	r2, r7, #24
   11b9e:	f007 fb56 	bl	1924e <z_log_msg_static_create.constprop.0>
}
   11ba2:	3724      	adds	r7, #36	; 0x24
   11ba4:	46bd      	mov	sp, r7
   11ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (evt_type) {
   11baa:	7843      	ldrb	r3, [r0, #1]
   11bac:	2b3e      	cmp	r3, #62	; 0x3e
   11bae:	d13e      	bne.n	11c2e <hci_ept_recv+0xde>
		switch (subevt_type) {
   11bb0:	f890 a003 	ldrb.w	sl, [r0, #3]
   11bb4:	f1aa 0302 	sub.w	r3, sl, #2
   11bb8:	f1d3 0a00 	rsbs	sl, r3, #0
   11bbc:	eb4a 0a03 	adc.w	sl, sl, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
   11bc0:	2202      	movs	r2, #2
   11bc2:	4641      	mov	r1, r8
   11bc4:	1d38      	adds	r0, r7, #4
   11bc6:	f005 ffc4 	bl	17b52 <memcpy>
	if (remaining != hdr.len) {
   11bca:	797b      	ldrb	r3, [r7, #5]
	remaining -= sizeof(hdr);
   11bcc:	3c03      	subs	r4, #3
	if (remaining != hdr.len) {
   11bce:	429c      	cmp	r4, r3
   11bd0:	d133      	bne.n	11c3a <hci_ept_recv+0xea>
   11bd2:	f1ba 0f00 	cmp.w	sl, #0
   11bd6:	d02d      	beq.n	11c34 <hci_ept_recv+0xe4>
   11bd8:	f04f 0800 	mov.w	r8, #0
   11bdc:	f04f 0900 	mov.w	r9, #0
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   11be0:	f04f 0b02 	mov.w	fp, #2
		buf = bt_buf_get_evt(hdr.evt, discardable, discardable ? K_NO_WAIT : K_SECONDS(10));
   11be4:	4642      	mov	r2, r8
   11be6:	464b      	mov	r3, r9
   11be8:	4651      	mov	r1, sl
   11bea:	7938      	ldrb	r0, [r7, #4]
   11bec:	f7fa fb46 	bl	c27c <bt_buf_get_evt>
		if (!buf) {
   11bf0:	4605      	mov	r5, r0
   11bf2:	b320      	cbz	r0, 11c3e <hci_ept_recv+0xee>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   11bf4:	f100 080c 	add.w	r8, r0, #12
   11bf8:	2202      	movs	r2, #2
   11bfa:	1d39      	adds	r1, r7, #4
   11bfc:	4640      	mov	r0, r8
   11bfe:	f007 fae0 	bl	191c2 <net_buf_simple_add_mem>
	return net_buf_simple_tailroom(&buf->b);
   11c02:	4640      	mov	r0, r8
   11c04:	f007 fb1b 	bl	1923e <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   11c08:	4284      	cmp	r4, r0
   11c0a:	d926      	bls.n	11c5a <hci_ept_recv+0x10a>
		LOG_ERR("Not enough space in buffer %zu/%zu", remaining, buf_tailroom);
   11c0c:	466e      	mov	r6, sp
   11c0e:	b088      	sub	sp, #32
   11c10:	466a      	mov	r2, sp
   11c12:	4b4b      	ldr	r3, [pc, #300]	; (11d40 <hci_ept_recv+0x1f0>)
   11c14:	61d0      	str	r0, [r2, #28]
   11c16:	e9c2 3405 	strd	r3, r4, [r2, #20]
   11c1a:	2304      	movs	r3, #4
   11c1c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   11c20:	4846      	ldr	r0, [pc, #280]	; (11d3c <hci_ept_recv+0x1ec>)
   11c22:	f842 3f10 	str.w	r3, [r2, #16]!
   11c26:	f007 fb12 	bl	1924e <z_log_msg_static_create.constprop.0>
   11c2a:	46b5      	mov	sp, r6
   11c2c:	e03f      	b.n	11cae <hci_ept_recv+0x15e>
			return false;
   11c2e:	f04f 0a00 	mov.w	sl, #0
   11c32:	e7c5      	b.n	11bc0 <hci_ept_recv+0x70>
   11c34:	f44f 28a0 	mov.w	r8, #327680	; 0x50000
   11c38:	e7d0      	b.n	11bdc <hci_ept_recv+0x8c>
		LOG_ERR("Event payload length is not correct");
   11c3a:	4b42      	ldr	r3, [pc, #264]	; (11d44 <hci_ept_recv+0x1f4>)
   11c3c:	e7a7      	b.n	11b8e <hci_ept_recv+0x3e>
			if (discardable) {
   11c3e:	f1ba 0f00 	cmp.w	sl, #0
   11c42:	d1ae      	bne.n	11ba2 <hci_ept_recv+0x52>
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   11c44:	4b40      	ldr	r3, [pc, #256]	; (11d48 <hci_ept_recv+0x1f8>)
   11c46:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11c4a:	e9c7 b306 	strd	fp, r3, [r7, #24]
   11c4e:	483b      	ldr	r0, [pc, #236]	; (11d3c <hci_ept_recv+0x1ec>)
   11c50:	f107 0218 	add.w	r2, r7, #24
   11c54:	f007 fafb 	bl	1924e <z_log_msg_static_create.constprop.0>
	} while (!buf);
   11c58:	e7c4      	b.n	11be4 <hci_ept_recv+0x94>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   11c5a:	4622      	mov	r2, r4
   11c5c:	1cf1      	adds	r1, r6, #3
   11c5e:	4640      	mov	r0, r8
   11c60:	f007 faaf 	bl	191c2 <net_buf_simple_add_mem>
		bt_recv(buf);
   11c64:	4628      	mov	r0, r5
   11c66:	f7fb fc93 	bl	d590 <bt_recv>
}
   11c6a:	e79a      	b.n	11ba2 <hci_ept_recv+0x52>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
   11c6c:	2200      	movs	r2, #0
   11c6e:	2300      	movs	r3, #0
   11c70:	2003      	movs	r0, #3
   11c72:	f7fa fad1 	bl	c218 <bt_buf_get_rx>
	if (buf) {
   11c76:	4605      	mov	r5, r0
   11c78:	b1e8      	cbz	r0, 11cb6 <hci_ept_recv+0x166>
		memcpy((void *)&hdr, data, sizeof(hdr));
   11c7a:	2204      	movs	r2, #4
   11c7c:	4641      	mov	r1, r8
   11c7e:	18b8      	adds	r0, r7, r2
   11c80:	f005 ff67 	bl	17b52 <memcpy>
   11c84:	2204      	movs	r2, #4
   11c86:	f105 080c 	add.w	r8, r5, #12
   11c8a:	4640      	mov	r0, r8
   11c8c:	18b9      	adds	r1, r7, r2
   11c8e:	f007 fa98 	bl	191c2 <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   11c92:	88fb      	ldrh	r3, [r7, #6]
		remaining -= sizeof(hdr);
   11c94:	3c05      	subs	r4, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   11c96:	429c      	cmp	r4, r3
   11c98:	d033      	beq.n	11d02 <hci_ept_recv+0x1b2>
		LOG_ERR("ACL payload length is not correct");
   11c9a:	4b2c      	ldr	r3, [pc, #176]	; (11d4c <hci_ept_recv+0x1fc>)
   11c9c:	e9c7 9306 	strd	r9, r3, [r7, #24]
		LOG_ERR("ISO payload length is not correct");
   11ca0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11ca4:	4825      	ldr	r0, [pc, #148]	; (11d3c <hci_ept_recv+0x1ec>)
   11ca6:	f107 0218 	add.w	r2, r7, #24
   11caa:	f007 fad0 	bl	1924e <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   11cae:	4628      	mov	r0, r5
   11cb0:	f7ff fe74 	bl	1199c <net_buf_unref>
	if (buf) {
   11cb4:	e775      	b.n	11ba2 <hci_ept_recv+0x52>
		LOG_ERR("No available ACL buffers!");
   11cb6:	4b26      	ldr	r3, [pc, #152]	; (11d50 <hci_ept_recv+0x200>)
   11cb8:	e763      	b.n	11b82 <hci_ept_recv+0x32>
	if (remaining < sizeof(hdr)) {
   11cba:	2b03      	cmp	r3, #3
   11cbc:	d801      	bhi.n	11cc2 <hci_ept_recv+0x172>
		LOG_ERR("Not enough data for ISO header");
   11cbe:	4b25      	ldr	r3, [pc, #148]	; (11d54 <hci_ept_recv+0x204>)
   11cc0:	e765      	b.n	11b8e <hci_ept_recv+0x3e>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
   11cc2:	2200      	movs	r2, #0
   11cc4:	2300      	movs	r3, #0
   11cc6:	4648      	mov	r0, r9
   11cc8:	f7fa faa6 	bl	c218 <bt_buf_get_rx>
	if (buf) {
   11ccc:	4605      	mov	r5, r0
   11cce:	b1b0      	cbz	r0, 11cfe <hci_ept_recv+0x1ae>
		memcpy((void *)&hdr, data, sizeof(hdr));
   11cd0:	2204      	movs	r2, #4
   11cd2:	4641      	mov	r1, r8
   11cd4:	18b8      	adds	r0, r7, r2
   11cd6:	f005 ff3c 	bl	17b52 <memcpy>
   11cda:	2204      	movs	r2, #4
   11cdc:	f105 080c 	add.w	r8, r5, #12
   11ce0:	4640      	mov	r0, r8
   11ce2:	18b9      	adds	r1, r7, r2
   11ce4:	f007 fa6d 	bl	191c2 <net_buf_simple_add_mem>
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   11ce8:	88fb      	ldrh	r3, [r7, #6]
		remaining -= sizeof(hdr);
   11cea:	3c05      	subs	r4, #5
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   11cec:	f3c3 030d 	ubfx	r3, r3, #0, #14
   11cf0:	429c      	cmp	r4, r3
   11cf2:	d006      	beq.n	11d02 <hci_ept_recv+0x1b2>
		LOG_ERR("ISO payload length is not correct");
   11cf4:	4b18      	ldr	r3, [pc, #96]	; (11d58 <hci_ept_recv+0x208>)
   11cf6:	61fb      	str	r3, [r7, #28]
   11cf8:	2302      	movs	r3, #2
   11cfa:	61bb      	str	r3, [r7, #24]
   11cfc:	e7d0      	b.n	11ca0 <hci_ept_recv+0x150>
		LOG_ERR("No available ISO buffers!");
   11cfe:	4b17      	ldr	r3, [pc, #92]	; (11d5c <hci_ept_recv+0x20c>)
   11d00:	e745      	b.n	11b8e <hci_ept_recv+0x3e>
	return net_buf_simple_tailroom(&buf->b);
   11d02:	4640      	mov	r0, r8
   11d04:	f007 fa9b 	bl	1923e <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   11d08:	4284      	cmp	r4, r0
   11d0a:	f63f af7f 	bhi.w	11c0c <hci_ept_recv+0xbc>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   11d0e:	4622      	mov	r2, r4
   11d10:	1d71      	adds	r1, r6, #5
   11d12:	e7a4      	b.n	11c5e <hci_ept_recv+0x10e>
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   11d14:	466c      	mov	r4, sp
   11d16:	b088      	sub	sp, #32
   11d18:	466a      	mov	r2, sp
   11d1a:	4b11      	ldr	r3, [pc, #68]	; (11d60 <hci_ept_recv+0x210>)
   11d1c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (pkt_indicator) {
   11d20:	e9c2 3905 	strd	r3, r9, [r2, #20]
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   11d24:	2303      	movs	r3, #3
   11d26:	4805      	ldr	r0, [pc, #20]	; (11d3c <hci_ept_recv+0x1ec>)
   11d28:	f842 3f10 	str.w	r3, [r2, #16]!
   11d2c:	f007 fa8f 	bl	1924e <z_log_msg_static_create.constprop.0>
   11d30:	46a5      	mov	sp, r4
   11d32:	e736      	b.n	11ba2 <hci_ept_recv+0x52>
   11d34:	0001d824 	.word	0x0001d824
   11d38:	0001d787 	.word	0x0001d787
   11d3c:	0001b1f0 	.word	0x0001b1f0
   11d40:	0001d801 	.word	0x0001d801
   11d44:	0001d7a8 	.word	0x0001d7a8
   11d48:	0001d7cc 	.word	0x0001d7cc
   11d4c:	0001d85d 	.word	0x0001d85d
   11d50:	0001d843 	.word	0x0001d843
   11d54:	0001d87f 	.word	0x0001d87f
   11d58:	0001d8b8 	.word	0x0001d8b8
   11d5c:	0001d89e 	.word	0x0001d89e
   11d60:	0001d8da 	.word	0x0001d8da

00011d64 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   11d64:	4b08      	ldr	r3, [pc, #32]	; (11d88 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   11d66:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   11d68:	1ac3      	subs	r3, r0, r3
{
   11d6a:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   11d6c:	4907      	ldr	r1, [pc, #28]	; (11d8c <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   11d6e:	109b      	asrs	r3, r3, #2
{
   11d70:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   11d72:	4359      	muls	r1, r3
   11d74:	2240      	movs	r2, #64	; 0x40
   11d76:	4806      	ldr	r0, [pc, #24]	; (11d90 <onoff_stop+0x2c>)
   11d78:	f007 fa88 	bl	1928c <stop>
	notify(mgr, res);
   11d7c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   11d7e:	4601      	mov	r1, r0
	notify(mgr, res);
   11d80:	4620      	mov	r0, r4
}
   11d82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   11d86:	4718      	bx	r3
   11d88:	20009928 	.word	0x20009928
   11d8c:	b6db6db7 	.word	0xb6db6db7
   11d90:	0001ae1c 	.word	0x0001ae1c

00011d94 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   11d94:	2340      	movs	r3, #64	; 0x40
{
   11d96:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   11d98:	4c0b      	ldr	r4, [pc, #44]	; (11dc8 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   11d9a:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   11d9c:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   11d9e:	460b      	mov	r3, r1
{
   11da0:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   11da2:	490a      	ldr	r1, [pc, #40]	; (11dcc <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
   11da4:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   11da6:	4361      	muls	r1, r4
{
   11da8:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   11daa:	4a09      	ldr	r2, [pc, #36]	; (11dd0 <onoff_start+0x3c>)
   11dac:	4809      	ldr	r0, [pc, #36]	; (11dd4 <onoff_start+0x40>)
   11dae:	f007 fa99 	bl	192e4 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   11db2:	1e01      	subs	r1, r0, #0
   11db4:	da05      	bge.n	11dc2 <onoff_start+0x2e>
		notify(mgr, err);
   11db6:	4630      	mov	r0, r6
   11db8:	462b      	mov	r3, r5
	}
}
   11dba:	b002      	add	sp, #8
   11dbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   11dc0:	4718      	bx	r3
}
   11dc2:	b002      	add	sp, #8
   11dc4:	bd70      	pop	{r4, r5, r6, pc}
   11dc6:	bf00      	nop
   11dc8:	20009928 	.word	0x20009928
   11dcc:	b6db6db7 	.word	0xb6db6db7
   11dd0:	0001934f 	.word	0x0001934f
   11dd4:	0001ae1c 	.word	0x0001ae1c

00011dd8 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   11dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   11ddc:	2200      	movs	r2, #0
   11dde:	2101      	movs	r1, #1
{
   11de0:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   11de2:	2005      	movs	r0, #5
   11de4:	f7f9 faf2 	bl	b3cc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   11de8:	4811      	ldr	r0, [pc, #68]	; (11e30 <clk_init+0x58>)
   11dea:	f001 fcb3 	bl	13754 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   11dee:	4b11      	ldr	r3, [pc, #68]	; (11e34 <clk_init+0x5c>)
   11df0:	4298      	cmp	r0, r3
   11df2:	d119      	bne.n	11e28 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   11df4:	f001 fcbe 	bl	13774 <nrfx_clock_enable>
   11df8:	2400      	movs	r4, #0
	return &data->mgr[type];
   11dfa:	f04f 091c 	mov.w	r9, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   11dfe:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
   11e00:	f8df 8034 	ldr.w	r8, [pc, #52]	; 11e38 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
   11e04:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   11e06:	4641      	mov	r1, r8
   11e08:	fb09 5004 	mla	r0, r9, r4, r5
   11e0c:	f004 fbd3 	bl	165b6 <onoff_manager_init>
		if (err < 0) {
   11e10:	2800      	cmp	r0, #0
   11e12:	db07      	blt.n	11e24 <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   11e14:	2301      	movs	r3, #1
   11e16:	fb07 5504 	mla	r5, r7, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   11e1a:	441c      	add	r4, r3
   11e1c:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   11e1e:	67ab      	str	r3, [r5, #120]	; 0x78
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   11e20:	d1f0      	bne.n	11e04 <clk_init+0x2c>
	}

	return 0;
   11e22:	2000      	movs	r0, #0
}
   11e24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   11e28:	f06f 0004 	mvn.w	r0, #4
   11e2c:	e7fa      	b.n	11e24 <clk_init+0x4c>
   11e2e:	bf00      	nop
   11e30:	00011e71 	.word	0x00011e71
   11e34:	0bad0000 	.word	0x0bad0000
   11e38:	0001b97c 	.word	0x0001b97c

00011e3c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   11e3c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   11e3e:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   11e40:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
   11e42:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   11e44:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   11e46:	4808      	ldr	r0, [pc, #32]	; (11e68 <clkstarted_handle.constprop.0+0x2c>)
   11e48:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   11e4a:	3378      	adds	r3, #120	; 0x78
   11e4c:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
   11e4e:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	sub_data->cb = NULL;
   11e52:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
   11e54:	f007 fa07 	bl	19266 <set_on_state>
	if (callback) {
   11e58:	b12d      	cbz	r5, 11e66 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   11e5a:	4632      	mov	r2, r6
   11e5c:	462b      	mov	r3, r5
}
   11e5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   11e62:	4802      	ldr	r0, [pc, #8]	; (11e6c <clkstarted_handle.constprop.0+0x30>)
   11e64:	4718      	bx	r3
}
   11e66:	bd70      	pop	{r4, r5, r6, pc}
   11e68:	20009928 	.word	0x20009928
   11e6c:	0001ae1c 	.word	0x0001ae1c

00011e70 <clock_event_handler>:
	switch (event) {
   11e70:	2805      	cmp	r0, #5
   11e72:	d811      	bhi.n	11e98 <clock_event_handler+0x28>
   11e74:	e8df f000 	tbb	[pc, r0]
   11e78:	10100e03 	.word	0x10100e03
   11e7c:	0a0c      	.short	0x0a0c
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   11e7e:	4b07      	ldr	r3, [pc, #28]	; (11e9c <clock_event_handler+0x2c>)
   11e80:	6f98      	ldr	r0, [r3, #120]	; 0x78
   11e82:	f010 0007 	ands.w	r0, r0, #7
   11e86:	d107      	bne.n	11e98 <clock_event_handler+0x28>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   11e88:	f7ff bfd8 	b.w	11e3c <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
   11e8c:	2002      	movs	r0, #2
   11e8e:	e7fb      	b.n	11e88 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
   11e90:	2003      	movs	r0, #3
   11e92:	e7f9      	b.n	11e88 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   11e94:	2001      	movs	r0, #1
   11e96:	e7f7      	b.n	11e88 <clock_event_handler+0x18>
}
   11e98:	4770      	bx	lr
   11e9a:	bf00      	nop
   11e9c:	20009928 	.word	0x20009928

00011ea0 <generic_hfclk_start>:
{
   11ea0:	b508      	push	{r3, lr}
	__asm__ volatile(
   11ea2:	f04f 0320 	mov.w	r3, #32
   11ea6:	f3ef 8111 	mrs	r1, BASEPRI
   11eaa:	f383 8812 	msr	BASEPRI_MAX, r3
   11eae:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   11eb2:	4a11      	ldr	r2, [pc, #68]	; (11ef8 <generic_hfclk_start+0x58>)
   11eb4:	6813      	ldr	r3, [r2, #0]
   11eb6:	f043 0002 	orr.w	r0, r3, #2
   11eba:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   11ebc:	07da      	lsls	r2, r3, #31
   11ebe:	d408      	bmi.n	11ed2 <generic_hfclk_start+0x32>
	__asm__ volatile(
   11ec0:	f381 8811 	msr	BASEPRI, r1
   11ec4:	f3bf 8f6f 	isb	sy
}
   11ec8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   11ecc:	2001      	movs	r0, #1
   11ece:	f001 bc65 	b.w	1379c <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   11ed2:	4b0a      	ldr	r3, [pc, #40]	; (11efc <generic_hfclk_start+0x5c>)
   11ed4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   11ed8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   11edc:	07d3      	lsls	r3, r2, #31
   11ede:	d5ef      	bpl.n	11ec0 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   11ee0:	4807      	ldr	r0, [pc, #28]	; (11f00 <generic_hfclk_start+0x60>)
   11ee2:	f007 f9c0 	bl	19266 <set_on_state>
   11ee6:	f381 8811 	msr	BASEPRI, r1
   11eea:	f3bf 8f6f 	isb	sy
}
   11eee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   11ef2:	2000      	movs	r0, #0
   11ef4:	f7ff bfa2 	b.w	11e3c <clkstarted_handle.constprop.0>
   11ef8:	200099c8 	.word	0x200099c8
   11efc:	40005000 	.word	0x40005000
   11f00:	200099a0 	.word	0x200099a0

00011f04 <api_blocking_start>:
{
   11f04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   11f06:	2200      	movs	r2, #0
   11f08:	2301      	movs	r3, #1
   11f0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   11f0e:	ab04      	add	r3, sp, #16
   11f10:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   11f14:	4a09      	ldr	r2, [pc, #36]	; (11f3c <api_blocking_start+0x38>)
   11f16:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   11f18:	f8cd d000 	str.w	sp, [sp]
   11f1c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   11f20:	f007 fa0e 	bl	19340 <api_start>
	if (err < 0) {
   11f24:	2800      	cmp	r0, #0
   11f26:	db05      	blt.n	11f34 <api_blocking_start+0x30>
   11f28:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   11f2c:	2300      	movs	r3, #0
   11f2e:	4668      	mov	r0, sp
   11f30:	f003 f860 	bl	14ff4 <z_impl_k_sem_take>
}
   11f34:	b007      	add	sp, #28
   11f36:	f85d fb04 	ldr.w	pc, [sp], #4
   11f3a:	bf00      	nop
   11f3c:	00019385 	.word	0x00019385

00011f40 <generic_hfclk_stop>:
{
   11f40:	b510      	push	{r4, lr}
	__asm__ volatile(
   11f42:	f04f 0320 	mov.w	r3, #32
   11f46:	f3ef 8411 	mrs	r4, BASEPRI
   11f4a:	f383 8812 	msr	BASEPRI_MAX, r3
   11f4e:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   11f52:	4a07      	ldr	r2, [pc, #28]	; (11f70 <generic_hfclk_stop+0x30>)
   11f54:	6813      	ldr	r3, [r2, #0]
   11f56:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   11f5a:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   11f5c:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   11f5e:	d402      	bmi.n	11f66 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   11f60:	2001      	movs	r0, #1
   11f62:	f007 fb7e 	bl	19662 <nrfx_clock_stop>
	__asm__ volatile(
   11f66:	f384 8811 	msr	BASEPRI, r4
   11f6a:	f3bf 8f6f 	isb	sy
}
   11f6e:	bd10      	pop	{r4, pc}
   11f70:	200099c8 	.word	0x200099c8

00011f74 <z_nrf_clock_control_lf_on>:
{
   11f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11f78:	2201      	movs	r2, #1
   11f7a:	4607      	mov	r7, r0
   11f7c:	4935      	ldr	r1, [pc, #212]	; (12054 <z_nrf_clock_control_lf_on+0xe0>)
   11f7e:	e8d1 3fef 	ldaex	r3, [r1]
   11f82:	e8c1 2fe0 	stlex	r0, r2, [r1]
   11f86:	2800      	cmp	r0, #0
   11f88:	d1f9      	bne.n	11f7e <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   11f8a:	b933      	cbnz	r3, 11f9a <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   11f8c:	4932      	ldr	r1, [pc, #200]	; (12058 <z_nrf_clock_control_lf_on+0xe4>)
		err = onoff_request(mgr, &cli);
   11f8e:	4833      	ldr	r0, [pc, #204]	; (1205c <z_nrf_clock_control_lf_on+0xe8>)
   11f90:	604b      	str	r3, [r1, #4]
   11f92:	60cb      	str	r3, [r1, #12]
   11f94:	608a      	str	r2, [r1, #8]
   11f96:	f004 fb21 	bl	165dc <onoff_request>
	switch (start_mode) {
   11f9a:	1e7b      	subs	r3, r7, #1
   11f9c:	2b01      	cmp	r3, #1
   11f9e:	d828      	bhi.n	11ff2 <z_nrf_clock_control_lf_on+0x7e>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   11fa0:	2f01      	cmp	r7, #1
   11fa2:	d106      	bne.n	11fb2 <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   11fa4:	4b2e      	ldr	r3, [pc, #184]	; (12060 <z_nrf_clock_control_lf_on+0xec>)
   11fa6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   11faa:	f003 0303 	and.w	r3, r3, #3
   11fae:	2b02      	cmp	r3, #2
   11fb0:	d01f      	beq.n	11ff2 <z_nrf_clock_control_lf_on+0x7e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   11fb2:	f008 f9f6 	bl	1a3a2 <k_is_in_isr>
   11fb6:	4605      	mov	r5, r0
   11fb8:	b9e8      	cbnz	r0, 11ff6 <z_nrf_clock_control_lf_on+0x82>
	return !z_sys_post_kernel;
   11fba:	4b2a      	ldr	r3, [pc, #168]	; (12064 <z_nrf_clock_control_lf_on+0xf0>)
   11fbc:	781b      	ldrb	r3, [r3, #0]
   11fbe:	b1d3      	cbz	r3, 11ff6 <z_nrf_clock_control_lf_on+0x82>
    p_reg->INTENCLR = mask;
   11fc0:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   11fc2:	4606      	mov	r6, r0
   11fc4:	4b26      	ldr	r3, [pc, #152]	; (12060 <z_nrf_clock_control_lf_on+0xec>)
   11fc6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   11fca:	4c25      	ldr	r4, [pc, #148]	; (12060 <z_nrf_clock_control_lf_on+0xec>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11fcc:	f8df 8098 	ldr.w	r8, [pc, #152]	; 12068 <z_nrf_clock_control_lf_on+0xf4>
   11fd0:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   11fd4:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   11fd8:	03d2      	lsls	r2, r2, #15
   11fda:	d516      	bpl.n	1200a <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   11fdc:	f003 0303 	and.w	r3, r3, #3
   11fe0:	2b02      	cmp	r3, #2
   11fe2:	d001      	beq.n	11fe8 <z_nrf_clock_control_lf_on+0x74>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   11fe4:	2f01      	cmp	r7, #1
   11fe6:	d110      	bne.n	1200a <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
   11fe8:	b375      	cbz	r5, 12048 <z_nrf_clock_control_lf_on+0xd4>
   11fea:	f386 8811 	msr	BASEPRI, r6
   11fee:	f3bf 8f6f 	isb	sy
}
   11ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   11ff6:	f04f 0320 	mov.w	r3, #32
   11ffa:	f3ef 8611 	mrs	r6, BASEPRI
   11ffe:	f383 8812 	msr	BASEPRI_MAX, r3
   12002:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   12006:	2501      	movs	r5, #1
   12008:	e7df      	b.n	11fca <z_nrf_clock_control_lf_on+0x56>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1200a:	b1c5      	cbz	r5, 1203e <z_nrf_clock_control_lf_on+0xca>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1200c:	4630      	mov	r0, r6
   1200e:	f7f9 f935 	bl	b27c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   12012:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   12016:	b2db      	uxtb	r3, r3
   12018:	2b01      	cmp	r3, #1
   1201a:	d1d9      	bne.n	11fd0 <z_nrf_clock_control_lf_on+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1201c:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   12020:	2a00      	cmp	r2, #0
   12022:	d0d5      	beq.n	11fd0 <z_nrf_clock_control_lf_on+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12024:	2200      	movs	r2, #0
   12026:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1202a:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1202e:	2202      	movs	r2, #2
   12030:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   12034:	2220      	movs	r2, #32
   12036:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1203a:	60a3      	str	r3, [r4, #8]
}
   1203c:	e7c8      	b.n	11fd0 <z_nrf_clock_control_lf_on+0x5c>
	return z_impl_k_sleep(timeout);
   1203e:	2100      	movs	r1, #0
   12040:	2021      	movs	r0, #33	; 0x21
   12042:	f003 fccf 	bl	159e4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   12046:	e7e4      	b.n	12012 <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
   12048:	2202      	movs	r2, #2
   1204a:	4b05      	ldr	r3, [pc, #20]	; (12060 <z_nrf_clock_control_lf_on+0xec>)
   1204c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   12050:	e7cf      	b.n	11ff2 <z_nrf_clock_control_lf_on+0x7e>
   12052:	bf00      	nop
   12054:	20009924 	.word	0x20009924
   12058:	20009914 	.word	0x20009914
   1205c:	20009944 	.word	0x20009944
   12060:	40005000 	.word	0x40005000
   12064:	20009be3 	.word	0x20009be3
   12068:	e000e100 	.word	0xe000e100

0001206c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
   1206c:	b508      	push	{r3, lr}
   1206e:	4807      	ldr	r0, [pc, #28]	; (1208c <uart_console_init+0x20>)
   12070:	f008 f8d7 	bl	1a222 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   12074:	b138      	cbz	r0, 12086 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   12076:	4806      	ldr	r0, [pc, #24]	; (12090 <uart_console_init+0x24>)
   12078:	f7f9 fffc 	bl	c074 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1207c:	4804      	ldr	r0, [pc, #16]	; (12090 <uart_console_init+0x24>)
   1207e:	f7f6 ff09 	bl	8e94 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   12082:	2000      	movs	r0, #0
}
   12084:	bd08      	pop	{r3, pc}
		return -ENODEV;
   12086:	f06f 0012 	mvn.w	r0, #18
   1208a:	e7fb      	b.n	12084 <uart_console_init+0x18>
   1208c:	0001ae94 	.word	0x0001ae94
   12090:	00012095 	.word	0x00012095

00012094 <console_out>:
	if ('\n' == c) {
   12094:	280a      	cmp	r0, #10
{
   12096:	b538      	push	{r3, r4, r5, lr}
   12098:	4604      	mov	r4, r0
   1209a:	4d07      	ldr	r5, [pc, #28]	; (120b8 <console_out+0x24>)
	if ('\n' == c) {
   1209c:	d104      	bne.n	120a8 <console_out+0x14>
   1209e:	68ab      	ldr	r3, [r5, #8]
   120a0:	210d      	movs	r1, #13
   120a2:	4628      	mov	r0, r5
   120a4:	685b      	ldr	r3, [r3, #4]
   120a6:	4798      	blx	r3
   120a8:	68ab      	ldr	r3, [r5, #8]
   120aa:	4803      	ldr	r0, [pc, #12]	; (120b8 <console_out+0x24>)
   120ac:	685b      	ldr	r3, [r3, #4]
   120ae:	b2e1      	uxtb	r1, r4
   120b0:	4798      	blx	r3
}
   120b2:	4620      	mov	r0, r4
   120b4:	bd38      	pop	{r3, r4, r5, pc}
   120b6:	bf00      	nop
   120b8:	0001ae94 	.word	0x0001ae94

000120bc <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   120bc:	b530      	push	{r4, r5, lr}
	return port->config;
   120be:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   120c0:	f001 041f 	and.w	r4, r1, #31
   120c4:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   120c6:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   120ca:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   120cc:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   120d0:	d105      	bne.n	120de <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   120d2:	4620      	mov	r0, r4
   120d4:	f001 fe6a 	bl	13dac <nrfx_gpiote_trigger_disable>

		return 0;
   120d8:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   120da:	b005      	add	sp, #20
   120dc:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   120de:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   120e0:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   120e4:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   120e8:	d114      	bne.n	12114 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   120ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   120ee:	bf0c      	ite	eq
   120f0:	2304      	moveq	r3, #4
   120f2:	2305      	movne	r3, #5
   120f4:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   120f8:	2300      	movs	r3, #0
   120fa:	4620      	mov	r0, r4
   120fc:	4619      	mov	r1, r3
   120fe:	aa02      	add	r2, sp, #8
   12100:	f001 fc92 	bl	13a28 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   12104:	4b1f      	ldr	r3, [pc, #124]	; (12184 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   12106:	4298      	cmp	r0, r3
   12108:	d138      	bne.n	1217c <gpio_nrfx_pin_interrupt_configure+0xc0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1210a:	2101      	movs	r1, #1
   1210c:	4620      	mov	r0, r4
   1210e:	f001 fe07 	bl	13d20 <nrfx_gpiote_trigger_enable>
	return 0;
   12112:	e7e1      	b.n	120d8 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   12114:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   12118:	d025      	beq.n	12166 <gpio_nrfx_pin_interrupt_configure+0xaa>
   1211a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1211e:	bf14      	ite	ne
   12120:	2301      	movne	r3, #1
   12122:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   12124:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   12128:	6883      	ldr	r3, [r0, #8]
   1212a:	40cb      	lsrs	r3, r1
   1212c:	07d9      	lsls	r1, r3, #31
   1212e:	d4e3      	bmi.n	120f8 <gpio_nrfx_pin_interrupt_configure+0x3c>
   12130:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   12134:	d1e0      	bne.n	120f8 <gpio_nrfx_pin_interrupt_configure+0x3c>
        /* FALLTHROUGH */
        case 0: return NRF_P0;
#endif
#if defined(P1_FEATURE_PINS_PRESENT)
        /* FALLTHROUGH */
        case 1: return NRF_P1;
   12136:	4a14      	ldr	r2, [pc, #80]	; (12188 <gpio_nrfx_pin_interrupt_configure+0xcc>)
   12138:	4814      	ldr	r0, [pc, #80]	; (1218c <gpio_nrfx_pin_interrupt_configure+0xd0>)
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   1213a:	0961      	lsrs	r1, r4, #5
        case 1: return NRF_P1;
   1213c:	2901      	cmp	r1, #1
   1213e:	bf08      	it	eq
   12140:	4602      	moveq	r2, r0
    *p_pin = pin_number & 0x1F;
   12142:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   12146:	3380      	adds	r3, #128	; 0x80
   12148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1214c:	07db      	lsls	r3, r3, #31
   1214e:	d4d3      	bmi.n	120f8 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   12150:	f10d 0507 	add.w	r5, sp, #7
   12154:	4629      	mov	r1, r5
   12156:	4620      	mov	r0, r4
   12158:	f001 fd8e 	bl	13c78 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1215c:	4b0c      	ldr	r3, [pc, #48]	; (12190 <gpio_nrfx_pin_interrupt_configure+0xd4>)
   1215e:	4298      	cmp	r0, r3
   12160:	d003      	beq.n	1216a <gpio_nrfx_pin_interrupt_configure+0xae>
		trigger_config.p_in_channel = &ch;
   12162:	9503      	str	r5, [sp, #12]
   12164:	e7c8      	b.n	120f8 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   12166:	2303      	movs	r3, #3
   12168:	e7dc      	b.n	12124 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   1216a:	4628      	mov	r0, r5
   1216c:	f001 fdd2 	bl	13d14 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   12170:	4b04      	ldr	r3, [pc, #16]	; (12184 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   12172:	4298      	cmp	r0, r3
   12174:	d0f5      	beq.n	12162 <gpio_nrfx_pin_interrupt_configure+0xa6>
				return -ENOMEM;
   12176:	f06f 000b 	mvn.w	r0, #11
   1217a:	e7ae      	b.n	120da <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   1217c:	f06f 0015 	mvn.w	r0, #21
   12180:	e7ab      	b.n	120da <gpio_nrfx_pin_interrupt_configure+0x1e>
   12182:	bf00      	nop
   12184:	0bad0000 	.word	0x0bad0000
   12188:	40842500 	.word	0x40842500
   1218c:	40842800 	.word	0x40842800
   12190:	0bad0004 	.word	0x0bad0004

00012194 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   12194:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   12196:	f001 fdad 	bl	13cf4 <nrfx_gpiote_is_init>
   1219a:	4604      	mov	r4, r0
   1219c:	b968      	cbnz	r0, 121ba <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1219e:	f001 fd81 	bl	13ca4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   121a2:	4b08      	ldr	r3, [pc, #32]	; (121c4 <gpio_nrfx_init+0x30>)
   121a4:	4298      	cmp	r0, r3
   121a6:	d10a      	bne.n	121be <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   121a8:	4621      	mov	r1, r4
   121aa:	4807      	ldr	r0, [pc, #28]	; (121c8 <gpio_nrfx_init+0x34>)
   121ac:	f001 fd5e 	bl	13c6c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   121b0:	4622      	mov	r2, r4
   121b2:	2105      	movs	r1, #5
   121b4:	202f      	movs	r0, #47	; 0x2f
   121b6:	f7f9 f909 	bl	b3cc <z_arm_irq_priority_set>
		return 0;
   121ba:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   121bc:	bd10      	pop	{r4, pc}
		return -EIO;
   121be:	f06f 0004 	mvn.w	r0, #4
   121c2:	e7fb      	b.n	121bc <gpio_nrfx_init+0x28>
   121c4:	0bad0000 	.word	0x0bad0000
   121c8:	000121cd 	.word	0x000121cd

000121cc <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   121cc:	0942      	lsrs	r2, r0, #5
{
   121ce:	4603      	mov	r3, r0
   121d0:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   121d2:	d002      	beq.n	121da <nrfx_gpio_handler+0xe>
   121d4:	2a01      	cmp	r2, #1
   121d6:	d017      	beq.n	12208 <nrfx_gpio_handler+0x3c>
}
   121d8:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   121da:	4e0d      	ldr	r6, [pc, #52]	; (12210 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
   121dc:	6932      	ldr	r2, [r6, #16]
   121de:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   121e0:	2900      	cmp	r1, #0
   121e2:	d0f9      	beq.n	121d8 <nrfx_gpio_handler+0xc>
   121e4:	2501      	movs	r5, #1
    *p_pin = pin_number & 0x1F;
   121e6:	f003 031f 	and.w	r3, r3, #31
   121ea:	680c      	ldr	r4, [r1, #0]
   121ec:	409d      	lsls	r5, r3
   121ee:	2900      	cmp	r1, #0
   121f0:	d0f2      	beq.n	121d8 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   121f2:	688a      	ldr	r2, [r1, #8]
   121f4:	402a      	ands	r2, r5
   121f6:	d002      	beq.n	121fe <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   121f8:	4630      	mov	r0, r6
   121fa:	684b      	ldr	r3, [r1, #4]
   121fc:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   121fe:	b12c      	cbz	r4, 1220c <nrfx_gpio_handler+0x40>
   12200:	6823      	ldr	r3, [r4, #0]
   12202:	4621      	mov	r1, r4
   12204:	461c      	mov	r4, r3
   12206:	e7f2      	b.n	121ee <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   12208:	4e02      	ldr	r6, [pc, #8]	; (12214 <nrfx_gpio_handler+0x48>)
   1220a:	e7e7      	b.n	121dc <nrfx_gpio_handler+0x10>
   1220c:	4623      	mov	r3, r4
   1220e:	e7f8      	b.n	12202 <nrfx_gpio_handler+0x36>
   12210:	0001ae4c 	.word	0x0001ae4c
   12214:	0001ae34 	.word	0x0001ae34

00012218 <gpio_nrfx_pin_configure>:
{
   12218:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   1221c:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1221e:	f001 051f 	and.w	r5, r1, #31
   12222:	7b3b      	ldrb	r3, [r7, #12]
{
   12224:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   12226:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   1222a:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1222c:	4628      	mov	r0, r5
   1222e:	f10d 0103 	add.w	r1, sp, #3
   12232:	f001 fd21 	bl	13c78 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   12236:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1223a:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1223c:	d10b      	bne.n	12256 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1223e:	4628      	mov	r0, r5
   12240:	f001 fddc 	bl	13dfc <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   12244:	4b3c      	ldr	r3, [pc, #240]	; (12338 <gpio_nrfx_pin_configure+0x120>)
   12246:	4598      	cmp	r8, r3
   12248:	d103      	bne.n	12252 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   1224a:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1224e:	f001 fd5b 	bl	13d08 <nrfx_gpiote_channel_free>
		return 0;
   12252:	2000      	movs	r0, #0
   12254:	e00c      	b.n	12270 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   12256:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   12258:	4628      	mov	r0, r5
   1225a:	4619      	mov	r1, r3
   1225c:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   1225e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   12262:	f001 fbe1 	bl	13a28 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   12266:	4b34      	ldr	r3, [pc, #208]	; (12338 <gpio_nrfx_pin_configure+0x120>)
   12268:	4298      	cmp	r0, r3
   1226a:	d004      	beq.n	12276 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   1226c:	f06f 0015 	mvn.w	r0, #21
}
   12270:	b004      	add	sp, #16
   12272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   12276:	4580      	cmp	r8, r0
   12278:	d103      	bne.n	12282 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   1227a:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1227e:	f001 fd43 	bl	13d08 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   12282:	03a3      	lsls	r3, r4, #14
   12284:	d549      	bpl.n	1231a <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   12286:	f240 3306 	movw	r3, #774	; 0x306
   1228a:	4023      	ands	r3, r4
   1228c:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   12290:	d019      	beq.n	122c6 <gpio_nrfx_pin_configure+0xae>
   12292:	d80c      	bhi.n	122ae <gpio_nrfx_pin_configure+0x96>
   12294:	2b06      	cmp	r3, #6
   12296:	d017      	beq.n	122c8 <gpio_nrfx_pin_configure+0xb0>
   12298:	d804      	bhi.n	122a4 <gpio_nrfx_pin_configure+0x8c>
   1229a:	b1ab      	cbz	r3, 122c8 <gpio_nrfx_pin_configure+0xb0>
   1229c:	2b02      	cmp	r3, #2
   1229e:	d1e5      	bne.n	1226c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   122a0:	2304      	movs	r3, #4
   122a2:	e011      	b.n	122c8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   122a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   122a8:	d1e0      	bne.n	1226c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   122aa:	2301      	movs	r3, #1
   122ac:	e00c      	b.n	122c8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   122ae:	f240 2202 	movw	r2, #514	; 0x202
   122b2:	4293      	cmp	r3, r2
   122b4:	d026      	beq.n	12304 <gpio_nrfx_pin_configure+0xec>
   122b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   122ba:	d025      	beq.n	12308 <gpio_nrfx_pin_configure+0xf0>
   122bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   122c0:	d1d4      	bne.n	1226c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   122c2:	2302      	movs	r3, #2
   122c4:	e000      	b.n	122c8 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   122c6:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   122c8:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   122cc:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   122d0:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   122d4:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   122d6:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   122da:	bf4c      	ite	mi
   122dc:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
   122de:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   122e2:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   122e4:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   122e8:	d510      	bpl.n	1230c <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   122ea:	2301      	movs	r3, #1
   122ec:	687a      	ldr	r2, [r7, #4]
   122ee:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   122f0:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   122f2:	2200      	movs	r2, #0
   122f4:	4628      	mov	r0, r5
   122f6:	a901      	add	r1, sp, #4
   122f8:	f001 fc44 	bl	13b84 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   122fc:	4b0e      	ldr	r3, [pc, #56]	; (12338 <gpio_nrfx_pin_configure+0x120>)
   122fe:	4298      	cmp	r0, r3
   12300:	d0a7      	beq.n	12252 <gpio_nrfx_pin_configure+0x3a>
   12302:	e7b3      	b.n	1226c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   12304:	2305      	movs	r3, #5
   12306:	e7df      	b.n	122c8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   12308:	2303      	movs	r3, #3
   1230a:	e7dd      	b.n	122c8 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1230c:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1230e:	bf41      	itttt	mi
   12310:	2301      	movmi	r3, #1
   12312:	687a      	ldrmi	r2, [r7, #4]
   12314:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   12316:	60d3      	strmi	r3, [r2, #12]
}
   12318:	e7eb      	b.n	122f2 <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
   1231a:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1231c:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   12320:	bf4c      	ite	mi
   12322:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
   12324:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   12328:	461a      	mov	r2, r3
   1232a:	4628      	mov	r0, r5
   1232c:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   1232e:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   12332:	f001 fb79 	bl	13a28 <nrfx_gpiote_input_configure>
   12336:	e7e1      	b.n	122fc <gpio_nrfx_pin_configure+0xe4>
   12338:	0bad0000 	.word	0x0bad0000

0001233c <mbox_nrf_init>:

	nrfx_ipc_config_load(&ch_config);
}

static int mbox_nrf_init(const struct device *dev)
{
   1233c:	b510      	push	{r4, lr}
   1233e:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
   12340:	6902      	ldr	r2, [r0, #16]
{
   12342:	b0a8      	sub	sp, #160	; 0xa0

	data->dev = dev;
   12344:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
   12348:	4925      	ldr	r1, [pc, #148]	; (123e0 <mbox_nrf_init+0xa4>)
   1234a:	2000      	movs	r0, #0
   1234c:	f001 fe56 	bl	13ffc <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   12350:	2200      	movs	r2, #0
   12352:	2101      	movs	r1, #1
   12354:	202a      	movs	r0, #42	; 0x2a
   12356:	f7f9 f839 	bl	b3cc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);
   1235a:	6864      	ldr	r4, [r4, #4]
	nrfx_ipc_config_t ch_config = { 0 };
   1235c:	2284      	movs	r2, #132	; 0x84
   1235e:	2100      	movs	r1, #0
   12360:	a807      	add	r0, sp, #28
   12362:	f005 fc01 	bl	17b68 <memset>
	if (conf->tx_mask >= BIT(IPC_CONF_NUM)) {
   12366:	6863      	ldr	r3, [r4, #4]
   12368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1236c:	d30a      	bcc.n	12384 <mbox_nrf_init+0x48>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
   1236e:	4b1d      	ldr	r3, [pc, #116]	; (123e4 <mbox_nrf_init+0xa8>)
   12370:	9305      	str	r3, [sp, #20]
   12372:	2302      	movs	r3, #2
   12374:	9304      	str	r3, [sp, #16]
   12376:	2300      	movs	r3, #0
   12378:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1237c:	481a      	ldr	r0, [pc, #104]	; (123e8 <mbox_nrf_init+0xac>)
   1237e:	aa04      	add	r2, sp, #16
   12380:	f7f8 f9d0 	bl	a724 <z_impl_z_log_msg_static_create>
	if (conf->rx_mask >= BIT(IPC_CONF_NUM)) {
   12384:	6823      	ldr	r3, [r4, #0]
   12386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1238a:	d30a      	bcc.n	123a2 <mbox_nrf_init+0x66>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
   1238c:	4b17      	ldr	r3, [pc, #92]	; (123ec <mbox_nrf_init+0xb0>)
   1238e:	9305      	str	r3, [sp, #20]
   12390:	2302      	movs	r3, #2
   12392:	9304      	str	r3, [sp, #16]
   12394:	2300      	movs	r3, #0
   12396:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1239a:	4813      	ldr	r0, [pc, #76]	; (123e8 <mbox_nrf_init+0xac>)
   1239c:	aa04      	add	r2, sp, #16
   1239e:	f7f8 f9c1 	bl	a724 <z_impl_z_log_msg_static_create>
	ch_config.receive_events_enabled = 0;
   123a2:	2300      	movs	r3, #0
			ch_config.send_task_config[ch] = BIT(ch);
   123a4:	2001      	movs	r0, #1
	ch_config.receive_events_enabled = 0;
   123a6:	9327      	str	r3, [sp, #156]	; 0x9c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   123a8:	aa07      	add	r2, sp, #28
		if (conf->tx_mask & BIT(ch)) {
   123aa:	6861      	ldr	r1, [r4, #4]
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   123ac:	3204      	adds	r2, #4
		if (conf->tx_mask & BIT(ch)) {
   123ae:	40d9      	lsrs	r1, r3
   123b0:	07c9      	lsls	r1, r1, #31
			ch_config.send_task_config[ch] = BIT(ch);
   123b2:	bf44      	itt	mi
   123b4:	fa00 f103 	lslmi.w	r1, r0, r3
   123b8:	f842 1c04 	strmi.w	r1, [r2, #-4]
		if (conf->rx_mask & BIT(ch)) {
   123bc:	6821      	ldr	r1, [r4, #0]
   123be:	40d9      	lsrs	r1, r3
   123c0:	07c9      	lsls	r1, r1, #31
			ch_config.receive_event_config[ch] = BIT(ch);
   123c2:	bf48      	it	mi
   123c4:	fa00 f103 	lslmi.w	r1, r0, r3
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   123c8:	f103 0301 	add.w	r3, r3, #1
			ch_config.receive_event_config[ch] = BIT(ch);
   123cc:	bf48      	it	mi
   123ce:	63d1      	strmi	r1, [r2, #60]	; 0x3c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   123d0:	2b10      	cmp	r3, #16
   123d2:	d1ea      	bne.n	123aa <mbox_nrf_init+0x6e>
	nrfx_ipc_config_load(&ch_config);
   123d4:	a807      	add	r0, sp, #28
   123d6:	f001 fe29 	bl	1402c <nrfx_ipc_config_load>

	return 0;
}
   123da:	2000      	movs	r0, #0
   123dc:	b028      	add	sp, #160	; 0xa0
   123de:	bd10      	pop	{r4, pc}
   123e0:	000124e5 	.word	0x000124e5
   123e4:	0001d976 	.word	0x0001d976
   123e8:	0001b258 	.word	0x0001b258
   123ec:	0001d9a2 	.word	0x0001d9a2

000123f0 <mbox_nrf_set_enabled>:
{
   123f0:	b530      	push	{r4, r5, lr}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   123f2:	290f      	cmp	r1, #15
{
   123f4:	460c      	mov	r4, r1
	struct mbox_nrf_data *data = dev->data;
   123f6:	6905      	ldr	r5, [r0, #16]
{
   123f8:	b087      	sub	sp, #28
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   123fa:	d842      	bhi.n	12482 <mbox_nrf_set_enabled+0x92>
   123fc:	6843      	ldr	r3, [r0, #4]
   123fe:	681b      	ldr	r3, [r3, #0]
   12400:	40cb      	lsrs	r3, r1
   12402:	07db      	lsls	r3, r3, #31
   12404:	d53d      	bpl.n	12482 <mbox_nrf_set_enabled+0x92>
	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
   12406:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1240a:	40cb      	lsrs	r3, r1
   1240c:	f003 0301 	and.w	r3, r3, #1
   12410:	b91a      	cbnz	r2, 1241a <mbox_nrf_set_enabled+0x2a>
   12412:	bb13      	cbnz	r3, 1245a <mbox_nrf_set_enabled+0x6a>
		return -EALREADY;
   12414:	f06f 0077 	mvn.w	r0, #119	; 0x77
   12418:	e031      	b.n	1247e <mbox_nrf_set_enabled+0x8e>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
   1241a:	2b00      	cmp	r3, #0
   1241c:	d1fa      	bne.n	12414 <mbox_nrf_set_enabled+0x24>
	if (enable && (data->cb[channel] == NULL)) {
   1241e:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   12422:	b94b      	cbnz	r3, 12438 <mbox_nrf_set_enabled+0x48>
		LOG_WRN("Enabling channel without a registered callback\n");
   12424:	4a18      	ldr	r2, [pc, #96]	; (12488 <mbox_nrf_set_enabled+0x98>)
   12426:	9205      	str	r2, [sp, #20]
   12428:	2202      	movs	r2, #2
   1242a:	9204      	str	r2, [sp, #16]
   1242c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   12430:	4816      	ldr	r0, [pc, #88]	; (1248c <mbox_nrf_set_enabled+0x9c>)
   12432:	aa04      	add	r2, sp, #16
   12434:	f7f8 f976 	bl	a724 <z_impl_z_log_msg_static_create>
	if (enable && data->enabled_mask == 0) {
   12438:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1243c:	b913      	cbnz	r3, 12444 <mbox_nrf_set_enabled+0x54>
		irq_enable(DT_INST_IRQN(0));
   1243e:	202a      	movs	r0, #42	; 0x2a
   12440:	f7f8 ff94 	bl	b36c <arch_irq_enable>
		data->enabled_mask |= BIT(channel);
   12444:	2201      	movs	r2, #1
   12446:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1244a:	40a2      	lsls	r2, r4
   1244c:	4313      	orrs	r3, r2
   1244e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		nrfx_ipc_receive_event_enable(channel);
   12452:	b2e0      	uxtb	r0, r4
   12454:	f001 fe0a 	bl	1406c <nrfx_ipc_receive_event_enable>
   12458:	e00a      	b.n	12470 <mbox_nrf_set_enabled+0x80>
		nrfx_ipc_receive_event_disable(channel);
   1245a:	b2c8      	uxtb	r0, r1
   1245c:	f001 fe0e 	bl	1407c <nrfx_ipc_receive_event_disable>
		data->enabled_mask &= ~BIT(channel);
   12460:	2201      	movs	r2, #1
   12462:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   12466:	40a2      	lsls	r2, r4
   12468:	ea23 0302 	bic.w	r3, r3, r2
   1246c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	if (data->enabled_mask == 0) {
   12470:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   12474:	b913      	cbnz	r3, 1247c <mbox_nrf_set_enabled+0x8c>
		irq_disable(DT_INST_IRQN(0));
   12476:	202a      	movs	r0, #42	; 0x2a
   12478:	f7f8 ff86 	bl	b388 <arch_irq_disable>
	return 0;
   1247c:	2000      	movs	r0, #0
}
   1247e:	b007      	add	sp, #28
   12480:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   12482:	f06f 0015 	mvn.w	r0, #21
   12486:	e7fa      	b.n	1247e <mbox_nrf_set_enabled+0x8e>
   12488:	0001d9ce 	.word	0x0001d9ce
   1248c:	0001b258 	.word	0x0001b258

00012490 <mbox_nrf_send>:
{
   12490:	b530      	push	{r4, r5, lr}
   12492:	4605      	mov	r5, r0
   12494:	460c      	mov	r4, r1
   12496:	b087      	sub	sp, #28
	if (msg) {
   12498:	b152      	cbz	r2, 124b0 <mbox_nrf_send+0x20>
		LOG_WRN("Sending data not supported");
   1249a:	4b10      	ldr	r3, [pc, #64]	; (124dc <mbox_nrf_send+0x4c>)
   1249c:	9305      	str	r3, [sp, #20]
   1249e:	2302      	movs	r3, #2
   124a0:	9304      	str	r3, [sp, #16]
   124a2:	2300      	movs	r3, #0
   124a4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   124a8:	480d      	ldr	r0, [pc, #52]	; (124e0 <mbox_nrf_send+0x50>)
   124aa:	aa04      	add	r2, sp, #16
   124ac:	f7f8 f93a 	bl	a724 <z_impl_z_log_msg_static_create>
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
   124b0:	2c0f      	cmp	r4, #15
   124b2:	d80f      	bhi.n	124d4 <mbox_nrf_send+0x44>
   124b4:	686b      	ldr	r3, [r5, #4]
   124b6:	685b      	ldr	r3, [r3, #4]
   124b8:	40e3      	lsrs	r3, r4
   124ba:	07db      	lsls	r3, r3, #31
   124bc:	d50a      	bpl.n	124d4 <mbox_nrf_send+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   124be:	2301      	movs	r3, #1
	return 0;
   124c0:	2000      	movs	r0, #0
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
   124c2:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   124c4:	b2e4      	uxtb	r4, r4
   124c6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   124ca:	f504 3428 	add.w	r4, r4, #172032	; 0x2a000
   124ce:	6023      	str	r3, [r4, #0]
}
   124d0:	b007      	add	sp, #28
   124d2:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   124d4:	f06f 0015 	mvn.w	r0, #21
   124d8:	e7fa      	b.n	124d0 <mbox_nrf_send+0x40>
   124da:	bf00      	nop
   124dc:	0001d9fe 	.word	0x0001d9fe
   124e0:	0001b258 	.word	0x0001b258

000124e4 <mbox_dispatcher>:
{
   124e4:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev = data->dev;
   124e6:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   124ea:	280f      	cmp	r0, #15
{
   124ec:	4604      	mov	r4, r0
   124ee:	460d      	mov	r5, r1
   124f0:	6873      	ldr	r3, [r6, #4]
   124f2:	b086      	sub	sp, #24
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   124f4:	d803      	bhi.n	124fe <mbox_dispatcher+0x1a>
   124f6:	681b      	ldr	r3, [r3, #0]
   124f8:	40c3      	lsrs	r3, r0
   124fa:	07db      	lsls	r3, r3, #31
   124fc:	d40a      	bmi.n	12514 <mbox_dispatcher+0x30>
		LOG_WRN("RX event on illegal channel");
   124fe:	4b15      	ldr	r3, [pc, #84]	; (12554 <mbox_dispatcher+0x70>)
   12500:	9305      	str	r3, [sp, #20]
   12502:	2302      	movs	r3, #2
   12504:	9304      	str	r3, [sp, #16]
   12506:	2300      	movs	r3, #0
   12508:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1250c:	4812      	ldr	r0, [pc, #72]	; (12558 <mbox_dispatcher+0x74>)
   1250e:	aa04      	add	r2, sp, #16
   12510:	f7f8 f908 	bl	a724 <z_impl_z_log_msg_static_create>
	if (!(data->enabled_mask & BIT(channel))) {
   12514:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   12518:	40e3      	lsrs	r3, r4
   1251a:	f013 0301 	ands.w	r3, r3, #1
   1251e:	d109      	bne.n	12534 <mbox_dispatcher+0x50>
		LOG_WRN("RX event on disabled channel");
   12520:	4a0e      	ldr	r2, [pc, #56]	; (1255c <mbox_dispatcher+0x78>)
   12522:	9205      	str	r2, [sp, #20]
   12524:	2202      	movs	r2, #2
   12526:	9204      	str	r2, [sp, #16]
   12528:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1252c:	480a      	ldr	r0, [pc, #40]	; (12558 <mbox_dispatcher+0x74>)
   1252e:	aa04      	add	r2, sp, #16
   12530:	f7f8 f8f8 	bl	a724 <z_impl_z_log_msg_static_create>
	if (data->cb[channel] != NULL) {
   12534:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   12538:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
   1253c:	b145      	cbz	r5, 12550 <mbox_dispatcher+0x6c>
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   1253e:	2300      	movs	r3, #0
   12540:	4621      	mov	r1, r4
   12542:	4630      	mov	r0, r6
   12544:	46ac      	mov	ip, r5
   12546:	6c12      	ldr	r2, [r2, #64]	; 0x40
}
   12548:	b006      	add	sp, #24
   1254a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   1254e:	4760      	bx	ip
}
   12550:	b006      	add	sp, #24
   12552:	bd70      	pop	{r4, r5, r6, pc}
   12554:	0001da19 	.word	0x0001da19
   12558:	0001b258 	.word	0x0001b258
   1255c:	0001da35 	.word	0x0001da35

00012560 <pinctrl_configure_pins>:
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   12560:	f04f 0c01 	mov.w	ip, #1
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   12564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case 1: return NRF_P1;
   12568:	4e5b      	ldr	r6, [pc, #364]	; (126d8 <pinctrl_configure_pins+0x178>)
   1256a:	4f5c      	ldr	r7, [pc, #368]	; (126dc <pinctrl_configure_pins+0x17c>)
   1256c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   12570:	4281      	cmp	r1, r0
   12572:	d102      	bne.n	1257a <pinctrl_configure_pins+0x1a>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   12574:	2000      	movs	r0, #0
}
   12576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1257a:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   1257c:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   12580:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
   12584:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   12586:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
   1258a:	bf08      	it	eq
   1258c:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   12590:	2c22      	cmp	r4, #34	; 0x22
   12592:	f200 809d 	bhi.w	126d0 <pinctrl_configure_pins+0x170>
   12596:	e8df f004 	tbb	[pc, r4]
   1259a:	2312      	.short	0x2312
   1259c:	3e2b4228 	.word	0x3e2b4228
   125a0:	9b9b9b42 	.word	0x9b9b9b42
   125a4:	9b72459b 	.word	0x9b72459b
   125a8:	9b9b9b9b 	.word	0x9b9b9b9b
   125ac:	9b9b9b9b 	.word	0x9b9b9b9b
   125b0:	83807d75 	.word	0x83807d75
   125b4:	869b9b9b 	.word	0x869b9b9b
   125b8:	95928f8c 	.word	0x95928f8c
   125bc:	98          	.byte	0x98
   125bd:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   125be:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
   125c2:	ea4f 1853 	mov.w	r8, r3, lsr #5
        case 1: return NRF_P1;
   125c6:	f1b8 0f01 	cmp.w	r8, #1
   125ca:	bf14      	ite	ne
   125cc:	46b6      	movne	lr, r6
   125ce:	46be      	moveq	lr, r7
    *p_pin = pin_number & 0x1F;
   125d0:	f003 041f 	and.w	r4, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   125d4:	fa0c f404 	lsl.w	r4, ip, r4
    p_reg->OUTSET = set_mask;
   125d8:	f8ce 4008 	str.w	r4, [lr, #8]
   125dc:	2401      	movs	r4, #1
   125de:	e002      	b.n	125e6 <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = pin;
   125e0:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   125e4:	2400      	movs	r4, #0
   125e6:	46a6      	mov	lr, r4
   125e8:	e023      	b.n	12632 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = pin;
   125ea:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
   125ee:	e7e8      	b.n	125c2 <pinctrl_configure_pins+0x62>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   125f0:	2400      	movs	r4, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
   125f2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return pin_number >> 5;
   125f6:	ea4f 1953 	mov.w	r9, r3, lsr #5
        case 1: return NRF_P1;
   125fa:	f1b9 0f01 	cmp.w	r9, #1
   125fe:	bf14      	ite	ne
   12600:	46b0      	movne	r8, r6
   12602:	46b8      	moveq	r8, r7
    *p_pin = pin_number & 0x1F;
   12604:	f003 0e1f 	and.w	lr, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   12608:	fa0c fe0e 	lsl.w	lr, ip, lr
    p_reg->OUTCLR = clr_mask;
   1260c:	f8c8 e00c 	str.w	lr, [r8, #12]
   12610:	f04f 0e01 	mov.w	lr, #1
   12614:	e00d      	b.n	12632 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   12616:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   1261a:	2401      	movs	r4, #1
   1261c:	e7eb      	b.n	125f6 <pinctrl_configure_pins+0x96>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   1261e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
   12622:	e7df      	b.n	125e4 <pinctrl_configure_pins+0x84>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   12624:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   12628:	2d00      	cmp	r5, #0
   1262a:	d1db      	bne.n	125e4 <pinctrl_configure_pins+0x84>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1262c:	2400      	movs	r4, #0
				drive = NRF_DRIVE_S0D1;
   1262e:	2506      	movs	r5, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   12630:	46a6      	mov	lr, r4
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   12632:	f850 ab04 	ldr.w	sl, [r0], #4
    *p_pin = pin_number & 0x1F;
   12636:	f003 091f 	and.w	r9, r3, #31
   1263a:	f40a 5800 	and.w	r8, sl, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1263e:	f1b8 0f00 	cmp.w	r8, #0
    return pin_number >> 5;
   12642:	ea4f 1353 	mov.w	r3, r3, lsr #5
   12646:	bf1c      	itt	ne
   12648:	2401      	movne	r4, #1
   1264a:	f04f 0e00 	movne.w	lr, #0
        case 0: return NRF_P0;
   1264e:	2b01      	cmp	r3, #1
   12650:	bf0c      	ite	eq
   12652:	46b8      	moveq	r8, r7
   12654:	46b0      	movne	r8, r6
   12656:	eb08 0889 	add.w	r8, r8, r9, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1265a:	f8d8 3200 	ldr.w	r3, [r8, #512]	; 0x200
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   1265e:	f3ca 1ac1 	ubfx	sl, sl, #7, #2
   12662:	f003 49e0 	and.w	r9, r3, #1879048192	; 0x70000000
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   12666:	022b      	lsls	r3, r5, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   12668:	ea43 038a 	orr.w	r3, r3, sl, lsl #2
   1266c:	ea43 030e 	orr.w	r3, r3, lr
   12670:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   12674:	ea43 0309 	orr.w	r3, r3, r9
    reg->PIN_CNF[pin_number] = cnf;
   12678:	f8c8 3200 	str.w	r3, [r8, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1267c:	e778      	b.n	12570 <pinctrl_configure_pins+0x10>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   1267e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   12682:	e7d1      	b.n	12628 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   12684:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   12688:	6804      	ldr	r4, [r0, #0]
   1268a:	f3c4 3480 	ubfx	r4, r4, #14, #1
    if (value == 0)
   1268e:	2c00      	cmp	r4, #0
   12690:	d0c3      	beq.n	1261a <pinctrl_configure_pins+0xba>
   12692:	e796      	b.n	125c2 <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   12694:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   12698:	e7f6      	b.n	12688 <pinctrl_configure_pins+0x128>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   1269a:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   1269e:	e7f3      	b.n	12688 <pinctrl_configure_pins+0x128>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   126a0:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
   126a4:	e7f0      	b.n	12688 <pinctrl_configure_pins+0x128>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   126a6:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   126aa:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   126ac:	f04f 0e00 	mov.w	lr, #0
   126b0:	e7bf      	b.n	12632 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   126b2:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
   126b6:	e784      	b.n	125c2 <pinctrl_configure_pins+0x62>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   126b8:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
   126bc:	e7f5      	b.n	126aa <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   126be:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
   126c2:	e7f2      	b.n	126aa <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   126c4:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
   126c8:	e7ef      	b.n	126aa <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   126ca:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
   126ce:	e7ec      	b.n	126aa <pinctrl_configure_pins+0x14a>
		switch (NRF_GET_FUN(pins[i])) {
   126d0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   126d4:	e74f      	b.n	12576 <pinctrl_configure_pins+0x16>
   126d6:	bf00      	nop
   126d8:	40842500 	.word	0x40842500
   126dc:	40842800 	.word	0x40842800

000126e0 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   126e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   126e2:	794b      	ldrb	r3, [r1, #5]
   126e4:	2b01      	cmp	r3, #1
   126e6:	d029      	beq.n	1273c <uarte_nrfx_configure+0x5c>
   126e8:	2b03      	cmp	r3, #3
   126ea:	d124      	bne.n	12736 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   126ec:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   126ee:	798b      	ldrb	r3, [r1, #6]
   126f0:	2b03      	cmp	r3, #3
   126f2:	d120      	bne.n	12736 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   126f4:	79ce      	ldrb	r6, [r1, #7]
   126f6:	b10e      	cbz	r6, 126fc <uarte_nrfx_configure+0x1c>
   126f8:	2e01      	cmp	r6, #1
   126fa:	d11c      	bne.n	12736 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   126fc:	790a      	ldrb	r2, [r1, #4]
   126fe:	2a01      	cmp	r2, #1
   12700:	d01e      	beq.n	12740 <uarte_nrfx_configure+0x60>
   12702:	2a02      	cmp	r2, #2
   12704:	d020      	beq.n	12748 <uarte_nrfx_configure+0x68>
   12706:	b9b2      	cbnz	r2, 12736 <uarte_nrfx_configure+0x56>
   12708:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1270a:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1270c:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1270e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   12712:	f8d5 c000 	ldr.w	ip, [r5]
	switch (baudrate) {
   12716:	d06e      	beq.n	127f6 <uarte_nrfx_configure+0x116>
   12718:	d833      	bhi.n	12782 <uarte_nrfx_configure+0xa2>
   1271a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1271e:	d06d      	beq.n	127fc <uarte_nrfx_configure+0x11c>
   12720:	d81c      	bhi.n	1275c <uarte_nrfx_configure+0x7c>
   12722:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   12726:	d06b      	beq.n	12800 <uarte_nrfx_configure+0x120>
   12728:	d810      	bhi.n	1274c <uarte_nrfx_configure+0x6c>
   1272a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1272e:	d06a      	beq.n	12806 <uarte_nrfx_configure+0x126>
   12730:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   12734:	d06a      	beq.n	1280c <uarte_nrfx_configure+0x12c>
		return -ENOTSUP;
   12736:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1273a:	e05b      	b.n	127f4 <uarte_nrfx_configure+0x114>
	switch (cfg->stop_bits) {
   1273c:	2700      	movs	r7, #0
   1273e:	e7d6      	b.n	126ee <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   12740:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   12744:	220e      	movs	r2, #14
   12746:	e7e0      	b.n	1270a <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   12748:	2400      	movs	r4, #0
   1274a:	e7fb      	b.n	12744 <uarte_nrfx_configure+0x64>
	switch (baudrate) {
   1274c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   12750:	d05f      	beq.n	12812 <uarte_nrfx_configure+0x132>
   12752:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   12756:	d1ee      	bne.n	12736 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   12758:	4b38      	ldr	r3, [pc, #224]	; (1283c <uarte_nrfx_configure+0x15c>)
   1275a:	e03c      	b.n	127d6 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1275c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   12760:	d05a      	beq.n	12818 <uarte_nrfx_configure+0x138>
   12762:	d807      	bhi.n	12774 <uarte_nrfx_configure+0x94>
   12764:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   12768:	d058      	beq.n	1281c <uarte_nrfx_configure+0x13c>
   1276a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1276e:	d1e2      	bne.n	12736 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   12770:	4b33      	ldr	r3, [pc, #204]	; (12840 <uarte_nrfx_configure+0x160>)
   12772:	e030      	b.n	127d6 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   12774:	f647 2512 	movw	r5, #31250	; 0x7a12
   12778:	42ab      	cmp	r3, r5
   1277a:	d1dc      	bne.n	12736 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1277c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   12780:	e029      	b.n	127d6 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   12782:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   12786:	d04b      	beq.n	12820 <uarte_nrfx_configure+0x140>
   12788:	d813      	bhi.n	127b2 <uarte_nrfx_configure+0xd2>
   1278a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1278e:	d04a      	beq.n	12826 <uarte_nrfx_configure+0x146>
   12790:	d809      	bhi.n	127a6 <uarte_nrfx_configure+0xc6>
   12792:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   12796:	42ab      	cmp	r3, r5
   12798:	d047      	beq.n	1282a <uarte_nrfx_configure+0x14a>
   1279a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1279e:	d1ca      	bne.n	12736 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   127a0:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   127a4:	e017      	b.n	127d6 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   127a6:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   127aa:	d1c4      	bne.n	12736 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   127ac:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   127b0:	e011      	b.n	127d6 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   127b2:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   127b6:	d03b      	beq.n	12830 <uarte_nrfx_configure+0x150>
   127b8:	d808      	bhi.n	127cc <uarte_nrfx_configure+0xec>
   127ba:	4d22      	ldr	r5, [pc, #136]	; (12844 <uarte_nrfx_configure+0x164>)
   127bc:	42ab      	cmp	r3, r5
   127be:	d03a      	beq.n	12836 <uarte_nrfx_configure+0x156>
   127c0:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   127c4:	d1b7      	bne.n	12736 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   127c6:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   127ca:	e004      	b.n	127d6 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   127cc:	4d1e      	ldr	r5, [pc, #120]	; (12848 <uarte_nrfx_configure+0x168>)
   127ce:	42ab      	cmp	r3, r5
   127d0:	d1b1      	bne.n	12736 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   127d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   127d6:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   127d8:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
	return config->uarte_regs;
   127dc:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->stop
   127de:	433a      	orrs	r2, r7
   127e0:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
   127e2:	4334      	orrs	r4, r6
   127e4:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   127e6:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   127ea:	1d2b      	adds	r3, r5, #4
   127ec:	c903      	ldmia	r1, {r0, r1}
   127ee:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   127f2:	2000      	movs	r0, #0
}
   127f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   127f6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   127fa:	e7ec      	b.n	127d6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   127fc:	4b13      	ldr	r3, [pc, #76]	; (1284c <uarte_nrfx_configure+0x16c>)
   127fe:	e7ea      	b.n	127d6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   12800:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   12804:	e7e7      	b.n	127d6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = 0x00014000;
   12806:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1280a:	e7e4      	b.n	127d6 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1280c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   12810:	e7e1      	b.n	127d6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   12812:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   12816:	e7de      	b.n	127d6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   12818:	4b0d      	ldr	r3, [pc, #52]	; (12850 <uarte_nrfx_configure+0x170>)
   1281a:	e7dc      	b.n	127d6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1281c:	4b0d      	ldr	r3, [pc, #52]	; (12854 <uarte_nrfx_configure+0x174>)
   1281e:	e7da      	b.n	127d6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   12820:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   12824:	e7d7      	b.n	127d6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   12826:	4b0c      	ldr	r3, [pc, #48]	; (12858 <uarte_nrfx_configure+0x178>)
   12828:	e7d5      	b.n	127d6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1282a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1282e:	e7d2      	b.n	127d6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   12830:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   12834:	e7cf      	b.n	127d6 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   12836:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1283a:	e7cc      	b.n	127d6 <uarte_nrfx_configure+0xf6>
   1283c:	0013b000 	.word	0x0013b000
   12840:	004ea000 	.word	0x004ea000
   12844:	0003d090 	.word	0x0003d090
   12848:	000f4240 	.word	0x000f4240
   1284c:	00275000 	.word	0x00275000
   12850:	0075c000 	.word	0x0075c000
   12854:	003af000 	.word	0x003af000
   12858:	013a9000 	.word	0x013a9000

0001285c <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1285c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12860:	4680      	mov	r8, r0
   12862:	b087      	sub	sp, #28
   12864:	2200      	movs	r2, #0
   12866:	2101      	movs	r1, #1
   12868:	2008      	movs	r0, #8
   1286a:	f7f8 fdaf 	bl	b3cc <z_arm_irq_priority_set>
   1286e:	2008      	movs	r0, #8
   12870:	f7f8 fd7c 	bl	b36c <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   12874:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
   12876:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
   1287a:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
   1287e:	683c      	ldr	r4, [r7, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   12880:	466a      	mov	r2, sp
   12882:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   12886:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1288a:	f8d7 900c 	ldr.w	r9, [r7, #12]
   1288e:	4648      	mov	r0, r9
   12890:	f006 fdfd 	bl	1948e <pinctrl_lookup_state>
	if (ret < 0) {
   12894:	1e05      	subs	r5, r0, #0
   12896:	db25      	blt.n	128e4 <uarte_0_init+0x88>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   12898:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1289a:	f8d9 2000 	ldr.w	r2, [r9]
   1289e:	7919      	ldrb	r1, [r3, #4]
   128a0:	6818      	ldr	r0, [r3, #0]
   128a2:	f7ff fe5d 	bl	12560 <pinctrl_configure_pins>
	if (err < 0) {
   128a6:	1e05      	subs	r5, r0, #0
   128a8:	db1c      	blt.n	128e4 <uarte_0_init+0x88>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   128aa:	4640      	mov	r0, r8
   128ac:	1d31      	adds	r1, r6, #4
   128ae:	f7ff ff17 	bl	126e0 <uarte_nrfx_configure>
	if (err) {
   128b2:	4605      	mov	r5, r0
   128b4:	b9b0      	cbnz	r0, 128e4 <uarte_0_init+0x88>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   128b6:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   128b8:	0799      	lsls	r1, r3, #30
   128ba:	d524      	bpl.n	12906 <uarte_0_init+0xaa>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   128bc:	f106 0018 	add.w	r0, r6, #24
   128c0:	f001 f81e 	bl	13900 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   128c4:	4b24      	ldr	r3, [pc, #144]	; (12958 <uarte_0_init+0xfc>)
   128c6:	4298      	cmp	r0, r3
   128c8:	d010      	beq.n	128ec <uarte_0_init+0x90>
		LOG_ERR("Failed to allocate PPI Channel");
   128ca:	4b24      	ldr	r3, [pc, #144]	; (1295c <uarte_0_init+0x100>)
   128cc:	9305      	str	r3, [sp, #20]
   128ce:	2302      	movs	r3, #2
   128d0:	9304      	str	r3, [sp, #16]
   128d2:	462b      	mov	r3, r5
		return -EIO;
   128d4:	f06f 0504 	mvn.w	r5, #4
   128d8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   128dc:	4820      	ldr	r0, [pc, #128]	; (12960 <uarte_0_init+0x104>)
   128de:	aa04      	add	r2, sp, #16
   128e0:	f7f7 ff20 	bl	a724 <z_impl_z_log_msg_static_create>
UART_NRF_UARTE_DEVICE(0);
   128e4:	4628      	mov	r0, r5
   128e6:	b007      	add	sp, #28
   128e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   128ec:	7e33      	ldrb	r3, [r6, #24]
   128ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   128f2:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   128f6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   128fa:	2301      	movs	r3, #1
   128fc:	7e32      	ldrb	r2, [r6, #24]
   128fe:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   12900:	4a18      	ldr	r2, [pc, #96]	; (12964 <uarte_0_init+0x108>)
   12902:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   12906:	2308      	movs	r3, #8
   12908:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1290c:	7a3b      	ldrb	r3, [r7, #8]
   1290e:	b953      	cbnz	r3, 12926 <uarte_0_init+0xca>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12910:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   12914:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   12918:	6973      	ldr	r3, [r6, #20]
   1291a:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1291e:	2301      	movs	r3, #1
   12920:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12924:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   12926:	687b      	ldr	r3, [r7, #4]
   12928:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1292a:	bf5c      	itt	pl
   1292c:	f44f 7380 	movpl.w	r3, #256	; 0x100
   12930:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   12934:	687b      	ldr	r3, [r7, #4]
   12936:	06db      	lsls	r3, r3, #27
   12938:	bf44      	itt	mi
   1293a:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1293e:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   12942:	6933      	ldr	r3, [r6, #16]
   12944:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   12948:	2300      	movs	r3, #0
   1294a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1294e:	2301      	movs	r3, #1
   12950:	60a3      	str	r3, [r4, #8]
   12952:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   12954:	e7c6      	b.n	128e4 <uarte_0_init+0x88>
   12956:	bf00      	nop
   12958:	0bad0000 	.word	0x0bad0000
   1295c:	0001da6b 	.word	0x0001da6b
   12960:	0001b2a0 	.word	0x0001b2a0
   12964:	40017000 	.word	0x40017000

00012968 <uarte_nrfx_poll_out>:
{
   12968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1296a:	4604      	mov	r4, r0
   1296c:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
   1296e:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   12970:	f007 fd17 	bl	1a3a2 <k_is_in_isr>
   12974:	b9b0      	cbnz	r0, 129a4 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   12976:	4b2e      	ldr	r3, [pc, #184]	; (12a30 <uarte_nrfx_poll_out+0xc8>)
   12978:	781b      	ldrb	r3, [r3, #0]
   1297a:	b19b      	cbz	r3, 129a4 <uarte_nrfx_poll_out+0x3c>
{
   1297c:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1297e:	6860      	ldr	r0, [r4, #4]
   12980:	f006 fdbb 	bl	194fa <is_tx_ready.isra.0>
   12984:	bb00      	cbnz	r0, 129c8 <uarte_nrfx_poll_out+0x60>
   12986:	2001      	movs	r0, #1
   12988:	f006 fe69 	bl	1965e <nrfx_busy_wait>
   1298c:	3e01      	subs	r6, #1
   1298e:	d1f6      	bne.n	1297e <uarte_nrfx_poll_out+0x16>
   12990:	2100      	movs	r1, #0
   12992:	2021      	movs	r0, #33	; 0x21
   12994:	f003 f826 	bl	159e4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   12998:	e7f0      	b.n	1297c <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
   1299a:	f386 8811 	msr	BASEPRI, r6
   1299e:	f3bf 8f6f 	isb	sy
}
   129a2:	e7f5      	b.n	12990 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   129a4:	f04f 0320 	mov.w	r3, #32
   129a8:	f3ef 8611 	mrs	r6, BASEPRI
   129ac:	f383 8812 	msr	BASEPRI_MAX, r3
   129b0:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   129b4:	6860      	ldr	r0, [r4, #4]
   129b6:	4631      	mov	r1, r6
   129b8:	f006 fd9f 	bl	194fa <is_tx_ready.isra.0>
   129bc:	b990      	cbnz	r0, 129e4 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   129be:	f386 8811 	msr	BASEPRI, r6
   129c2:	f3bf 8f6f 	isb	sy
}
   129c6:	e7ed      	b.n	129a4 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   129c8:	f04f 0320 	mov.w	r3, #32
   129cc:	f3ef 8611 	mrs	r6, BASEPRI
   129d0:	f383 8812 	msr	BASEPRI_MAX, r3
   129d4:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   129d8:	6860      	ldr	r0, [r4, #4]
   129da:	4631      	mov	r1, r6
   129dc:	f006 fd8d 	bl	194fa <is_tx_ready.isra.0>
   129e0:	2800      	cmp	r0, #0
   129e2:	d0da      	beq.n	1299a <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
   129e4:	693b      	ldr	r3, [r7, #16]
   129e6:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
   129e8:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   129ea:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
   129ec:	6813      	ldr	r3, [r2, #0]
   129ee:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   129f2:	2001      	movs	r0, #1
   129f4:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   129f8:	2000      	movs	r0, #0
   129fa:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   129fe:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
   12a02:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   12a06:	6852      	ldr	r2, [r2, #4]
   12a08:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
   12a0c:	06d2      	lsls	r2, r2, #27
   12a0e:	d508      	bpl.n	12a22 <uarte_nrfx_poll_out+0xba>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   12a10:	2008      	movs	r0, #8
	return config->uarte_regs;
   12a12:	6862      	ldr	r2, [r4, #4]
   12a14:	6812      	ldr	r2, [r2, #0]
   12a16:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   12a1a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   12a1e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12a22:	2201      	movs	r2, #1
   12a24:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   12a26:	f381 8811 	msr	BASEPRI, r1
   12a2a:	f3bf 8f6f 	isb	sy
}
   12a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12a30:	20009be3 	.word	0x20009be3

00012a34 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   12a34:	2301      	movs	r3, #1
   12a36:	4083      	lsls	r3, r0
{
   12a38:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   12a3a:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12a3c:	4a0b      	ldr	r2, [pc, #44]	; (12a6c <compare_int_lock+0x38>)
   12a3e:	e8d2 1fef 	ldaex	r1, [r2]
   12a42:	ea01 0504 	and.w	r5, r1, r4
   12a46:	e8c2 5fe6 	stlex	r6, r5, [r2]
   12a4a:	2e00      	cmp	r6, #0
   12a4c:	d1f7      	bne.n	12a3e <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   12a4e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   12a52:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   12a54:	4806      	ldr	r0, [pc, #24]	; (12a70 <compare_int_lock+0x3c>)
   12a56:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   12a5a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12a5e:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   12a62:	420b      	tst	r3, r1
}
   12a64:	bf14      	ite	ne
   12a66:	2001      	movne	r0, #1
   12a68:	2000      	moveq	r0, #0
   12a6a:	bd70      	pop	{r4, r5, r6, pc}
   12a6c:	20009a74 	.word	0x20009a74
   12a70:	40015000 	.word	0x40015000

00012a74 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   12a74:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   12a76:	490e      	ldr	r1, [pc, #56]	; (12ab0 <sys_clock_timeout_handler+0x3c>)
	return absolute_time & COUNTER_MAX;
   12a78:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   12a7c:	e9d1 3400 	ldrd	r3, r4, [r1]
   12a80:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   12a82:	18c3      	adds	r3, r0, r3
   12a84:	f144 0400 	adc.w	r4, r4, #0
   12a88:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   12a8c:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   12a90:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   12a94:	d209      	bcs.n	12aaa <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   12a96:	4b07      	ldr	r3, [pc, #28]	; (12ab4 <sys_clock_timeout_handler+0x40>)
   12a98:	681b      	ldr	r3, [r3, #0]
   12a9a:	0a1a      	lsrs	r2, r3, #8
   12a9c:	061b      	lsls	r3, r3, #24
   12a9e:	199c      	adds	r4, r3, r6
   12aa0:	4b05      	ldr	r3, [pc, #20]	; (12ab8 <sys_clock_timeout_handler+0x44>)
   12aa2:	f142 0500 	adc.w	r5, r2, #0
   12aa6:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   12aaa:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   12aac:	f003 b902 	b.w	15cb4 <sys_clock_announce>
   12ab0:	200094c0 	.word	0x200094c0
   12ab4:	20009a78 	.word	0x20009a78
   12ab8:	200094c8 	.word	0x200094c8

00012abc <compare_int_unlock>:
	if (key) {
   12abc:	b1d9      	cbz	r1, 12af6 <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
   12abe:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12ac0:	4a0d      	ldr	r2, [pc, #52]	; (12af8 <compare_int_unlock+0x3c>)
   12ac2:	4083      	lsls	r3, r0
   12ac4:	e8d2 cfef 	ldaex	ip, [r2]
   12ac8:	ea4c 0c03 	orr.w	ip, ip, r3
   12acc:	e8c2 cfe1 	stlex	r1, ip, [r2]
   12ad0:	2900      	cmp	r1, #0
   12ad2:	d1f7      	bne.n	12ac4 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   12ad4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   12ad8:	4a08      	ldr	r2, [pc, #32]	; (12afc <compare_int_unlock+0x40>)
   12ada:	4083      	lsls	r3, r0
   12adc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12ae0:	4b07      	ldr	r3, [pc, #28]	; (12b00 <compare_int_unlock+0x44>)
   12ae2:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   12ae6:	40c3      	lsrs	r3, r0
   12ae8:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12aea:	bf42      	ittt	mi
   12aec:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   12af0:	4b04      	ldrmi	r3, [pc, #16]	; (12b04 <compare_int_unlock+0x48>)
   12af2:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   12af6:	4770      	bx	lr
   12af8:	20009a74 	.word	0x20009a74
   12afc:	40015000 	.word	0x40015000
   12b00:	20009a6c 	.word	0x20009a6c
   12b04:	e000e100 	.word	0xe000e100

00012b08 <z_nrf_rtc_timer_compare_evt_address_get>:
    p_reg->EVTENCLR = mask;
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
   12b08:	b2c3      	uxtb	r3, r0
}
   12b0a:	4802      	ldr	r0, [pc, #8]	; (12b14 <z_nrf_rtc_timer_compare_evt_address_get+0xc>)
   12b0c:	009b      	lsls	r3, r3, #2
   12b0e:	4418      	add	r0, r3
   12b10:	4770      	bx	lr
   12b12:	bf00      	nop
   12b14:	40015140 	.word	0x40015140

00012b18 <z_nrf_rtc_timer_compare_read>:
    return p_reg->CC[ch];
   12b18:	4b02      	ldr	r3, [pc, #8]	; (12b24 <z_nrf_rtc_timer_compare_read+0xc>)
   12b1a:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   12b1e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   12b22:	4770      	bx	lr
   12b24:	40015000 	.word	0x40015000

00012b28 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   12b28:	4b0d      	ldr	r3, [pc, #52]	; (12b60 <z_nrf_rtc_timer_read+0x38>)
   12b2a:	6818      	ldr	r0, [r3, #0]
   12b2c:	0a01      	lsrs	r1, r0, #8
   12b2e:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   12b30:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   12b34:	4b0b      	ldr	r3, [pc, #44]	; (12b64 <z_nrf_rtc_timer_read+0x3c>)
   12b36:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   12b3a:	1818      	adds	r0, r3, r0
   12b3c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   12b40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   12b44:	d20a      	bcs.n	12b5c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   12b46:	4b08      	ldr	r3, [pc, #32]	; (12b68 <z_nrf_rtc_timer_read+0x40>)
   12b48:	e9d3 2300 	ldrd	r2, r3, [r3]
   12b4c:	4290      	cmp	r0, r2
   12b4e:	eb71 0303 	sbcs.w	r3, r1, r3
   12b52:	d203      	bcs.n	12b5c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   12b54:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   12b58:	f141 0100 	adc.w	r1, r1, #0
}
   12b5c:	4770      	bx	lr
   12b5e:	bf00      	nop
   12b60:	20009a78 	.word	0x20009a78
   12b64:	40015000 	.word	0x40015000
   12b68:	200094c8 	.word	0x200094c8

00012b6c <compare_set>:
{
   12b6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b70:	4616      	mov	r6, r2
   12b72:	461f      	mov	r7, r3
   12b74:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
   12b76:	f7ff ff5d 	bl	12a34 <compare_int_lock>
   12b7a:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   12b7c:	f7ff ffd4 	bl	12b28 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   12b80:	42b0      	cmp	r0, r6
   12b82:	eb71 0307 	sbcs.w	r3, r1, r7
   12b86:	d250      	bcs.n	12c2a <compare_set+0xbe>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   12b88:	4b38      	ldr	r3, [pc, #224]	; (12c6c <compare_set+0x100>)
   12b8a:	1a30      	subs	r0, r6, r0
   12b8c:	eb67 0101 	sbc.w	r1, r7, r1
   12b90:	4298      	cmp	r0, r3
   12b92:	f171 0100 	sbcs.w	r1, r1, #0
   12b96:	d265      	bcs.n	12c64 <compare_set+0xf8>
		if (target_time != cc_data[chan].target_time) {
   12b98:	4b35      	ldr	r3, [pc, #212]	; (12c70 <compare_set+0x104>)
   12b9a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   12b9e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   12ba2:	429f      	cmp	r7, r3
   12ba4:	bf08      	it	eq
   12ba6:	4296      	cmpeq	r6, r2
   12ba8:	d049      	beq.n	12c3e <compare_set+0xd2>
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   12baa:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    p_reg->EVTENCLR = mask;
   12bae:	4931      	ldr	r1, [pc, #196]	; (12c74 <compare_set+0x108>)
   12bb0:	fa09 f904 	lsl.w	r9, r9, r4
	event_clear(chan);
   12bb4:	4620      	mov	r0, r4
	return absolute_time & COUNTER_MAX;
   12bb6:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
   12bba:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
   12bbe:	f006 fce6 	bl	1958e <event_clear>
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   12bc2:	f04f 0a03 	mov.w	sl, #3
	uint32_t cc_val = req_cc;
   12bc6:	4658      	mov	r0, fp
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   12bc8:	f104 0550 	add.w	r5, r4, #80	; 0x50
   12bcc:	00ad      	lsls	r5, r5, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12bce:	b2ad      	uxth	r5, r5
   12bd0:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
   12bd4:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   12bd8:	4a27      	ldr	r2, [pc, #156]	; (12c78 <compare_set+0x10c>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12bda:	f505 35a8 	add.w	r5, r5, #86016	; 0x15000
    p_reg->CC[ch] = cc_val;
   12bde:	9301      	str	r3, [sp, #4]
   12be0:	f8dd c004 	ldr.w	ip, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   12be4:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
   12be8:	f841 302c 	str.w	r3, [r1, ip, lsl #2]
    p_reg->EVTENSET = mask;
   12bec:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
   12bf0:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   12bf4:	eba0 0008 	sub.w	r0, r0, r8
   12bf8:	3803      	subs	r0, #3
   12bfa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   12bfe:	4290      	cmp	r0, r2
   12c00:	d91d      	bls.n	12c3e <compare_set+0xd2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12c02:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
   12c04:	b160      	cbz	r0, 12c20 <compare_set+0xb4>
     return p_reg->COUNTER;
   12c06:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   12c0a:	eba8 000b 	sub.w	r0, r8, fp
   12c0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   12c12:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   12c16:	d912      	bls.n	12c3e <compare_set+0xd2>
					event_clear(chan);
   12c18:	4620      	mov	r0, r4
   12c1a:	f006 fcb8 	bl	1958e <event_clear>
   12c1e:	4a16      	ldr	r2, [pc, #88]	; (12c78 <compare_set+0x10c>)
			cc_val = now + cc_inc;
   12c20:	eb0a 0008 	add.w	r0, sl, r8
			cc_inc++;
   12c24:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
   12c28:	e7da      	b.n	12be0 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   12c2a:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12c2c:	4a13      	ldr	r2, [pc, #76]	; (12c7c <compare_set+0x110>)
   12c2e:	40a3      	lsls	r3, r4
   12c30:	e8d2 0fef 	ldaex	r0, [r2]
   12c34:	4318      	orrs	r0, r3
   12c36:	e8c2 0fe1 	stlex	r1, r0, [r2]
   12c3a:	2900      	cmp	r1, #0
   12c3c:	d1f8      	bne.n	12c30 <compare_set+0xc4>
	return ret;
   12c3e:	2500      	movs	r5, #0
	cc_data[chan].target_time = target_time;
   12c40:	490b      	ldr	r1, [pc, #44]	; (12c70 <compare_set+0x104>)
	cc_data[chan].callback = handler;
   12c42:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   12c44:	0123      	lsls	r3, r4, #4
   12c46:	eb01 1204 	add.w	r2, r1, r4, lsl #4
	cc_data[chan].callback = handler;
   12c4a:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
   12c4c:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].user_context = user_data;
   12c50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12c52:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   12c54:	4620      	mov	r0, r4
   12c56:	9900      	ldr	r1, [sp, #0]
   12c58:	f7ff ff30 	bl	12abc <compare_int_unlock>
}
   12c5c:	4628      	mov	r0, r5
   12c5e:	b003      	add	sp, #12
   12c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
   12c64:	f06f 0515 	mvn.w	r5, #21
   12c68:	e7f4      	b.n	12c54 <compare_set+0xe8>
   12c6a:	bf00      	nop
   12c6c:	00800001 	.word	0x00800001
   12c70:	200094a0 	.word	0x200094a0
   12c74:	40015000 	.word	0x40015000
   12c78:	007ffffd 	.word	0x007ffffd
   12c7c:	20009a6c 	.word	0x20009a6c

00012c80 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
   12c80:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENSET = mask;
   12c82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    p_reg->PRESCALER = val;
   12c86:	2500      	movs	r5, #0
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   12c88:	f04f 30ff 	mov.w	r0, #4294967295
   12c8c:	f04f 31ff 	mov.w	r1, #4294967295
    p_reg->INTENCLR = mask;
   12c90:	4c1c      	ldr	r4, [pc, #112]	; (12d04 <sys_clock_driver_init+0x84>)
   12c92:	4b1d      	ldr	r3, [pc, #116]	; (12d08 <sys_clock_driver_init+0x88>)
    p_reg->INTENSET = mask;
   12c94:	2602      	movs	r6, #2
    p_reg->INTENCLR = mask;
   12c96:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   12c9a:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
   12c9e:	4b1b      	ldr	r3, [pc, #108]	; (12d0c <sys_clock_driver_init+0x8c>)
    p_reg->PRESCALER = val;
   12ca0:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   12ca4:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   12ca8:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
   12cac:	e9c3 0106 	strd	r0, r1, [r3, #24]
   12cb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12cb4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   12cb8:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   12cbc:	4b14      	ldr	r3, [pc, #80]	; (12d10 <sys_clock_driver_init+0x90>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   12cbe:	2101      	movs	r1, #1
   12cc0:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   12cc4:	2015      	movs	r0, #21
   12cc6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   12cca:	462a      	mov	r2, r5
   12ccc:	f7f8 fb7e 	bl	b3cc <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   12cd0:	2015      	movs	r0, #21
   12cd2:	f7f8 fb4b 	bl	b36c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   12cd6:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   12cd8:	2203      	movs	r2, #3
   12cda:	60a3      	str	r3, [r4, #8]
   12cdc:	6023      	str	r3, [r4, #0]
   12cde:	4b0d      	ldr	r3, [pc, #52]	; (12d14 <sys_clock_driver_init+0x94>)
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   12ce0:	4628      	mov	r0, r5
	int_mask = BIT_MASK(CHAN_COUNT);
   12ce2:	601a      	str	r2, [r3, #0]
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   12ce4:	4b0c      	ldr	r3, [pc, #48]	; (12d18 <sys_clock_driver_init+0x98>)
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   12ce6:	4a0d      	ldr	r2, [pc, #52]	; (12d1c <sys_clock_driver_init+0x9c>)
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   12ce8:	601e      	str	r6, [r3, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   12cea:	4b0d      	ldr	r3, [pc, #52]	; (12d20 <sys_clock_driver_init+0xa0>)
   12cec:	9501      	str	r5, [sp, #4]
   12cee:	9300      	str	r3, [sp, #0]
   12cf0:	2300      	movs	r3, #0
   12cf2:	f7ff ff3b 	bl	12b6c <compare_set>

	z_nrf_clock_control_lf_on(mode);
   12cf6:	4630      	mov	r0, r6
   12cf8:	f7ff f93c 	bl	11f74 <z_nrf_clock_control_lf_on>

	return 0;
}
   12cfc:	4628      	mov	r0, r5
   12cfe:	b002      	add	sp, #8
   12d00:	bd70      	pop	{r4, r5, r6, pc}
   12d02:	bf00      	nop
   12d04:	40015000 	.word	0x40015000
   12d08:	000f0003 	.word	0x000f0003
   12d0c:	200094a0 	.word	0x200094a0
   12d10:	e000e100 	.word	0xe000e100
   12d14:	20009a74 	.word	0x20009a74
   12d18:	20009a70 	.word	0x20009a70
   12d1c:	007fffff 	.word	0x007fffff
   12d20:	00012a75 	.word	0x00012a75

00012d24 <rtc_nrf_isr>:
{
   12d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return p_reg->INTENSET & mask;
   12d28:	4b39      	ldr	r3, [pc, #228]	; (12e10 <rtc_nrf_isr+0xec>)
   12d2a:	b085      	sub	sp, #20
   12d2c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   12d30:	0792      	lsls	r2, r2, #30
   12d32:	d50b      	bpl.n	12d4c <rtc_nrf_isr+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12d34:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   12d38:	b142      	cbz	r2, 12d4c <rtc_nrf_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   12d3a:	2200      	movs	r2, #0
   12d3c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   12d40:	4a34      	ldr	r2, [pc, #208]	; (12e14 <rtc_nrf_isr+0xf0>)
   12d42:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   12d46:	6813      	ldr	r3, [r2, #0]
   12d48:	3301      	adds	r3, #1
   12d4a:	6013      	str	r3, [r2, #0]
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   12d4c:	4d32      	ldr	r5, [pc, #200]	; (12e18 <rtc_nrf_isr+0xf4>)
   12d4e:	2400      	movs	r4, #0
   12d50:	46a8      	mov	r8, r5
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   12d52:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    return p_reg->INTENSET & mask;
   12d56:	4f2e      	ldr	r7, [pc, #184]	; (12e10 <rtc_nrf_isr+0xec>)
   12d58:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
   12d5c:	fa06 f904 	lsl.w	r9, r6, r4
   12d60:	ea19 0f03 	tst.w	r9, r3
   12d64:	d02e      	beq.n	12dc4 <rtc_nrf_isr+0xa0>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   12d66:	2301      	movs	r3, #1
   12d68:	40a3      	lsls	r3, r4
   12d6a:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12d6c:	492b      	ldr	r1, [pc, #172]	; (12e1c <rtc_nrf_isr+0xf8>)
   12d6e:	e8d1 2fef 	ldaex	r2, [r1]
   12d72:	ea02 0003 	and.w	r0, r2, r3
   12d76:	e8c1 0fec 	stlex	ip, r0, [r1]
   12d7a:	f1bc 0f00 	cmp.w	ip, #0
   12d7e:	d1f6      	bne.n	12d6e <rtc_nrf_isr+0x4a>
   12d80:	fa22 f304 	lsr.w	r3, r2, r4
   12d84:	07db      	lsls	r3, r3, #31
   12d86:	d403      	bmi.n	12d90 <rtc_nrf_isr+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12d88:	4b25      	ldr	r3, [pc, #148]	; (12e20 <rtc_nrf_isr+0xfc>)
   12d8a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   12d8e:	b1cb      	cbz	r3, 12dc4 <rtc_nrf_isr+0xa0>
			event_clear(chan);
   12d90:	4620      	mov	r0, r4
   12d92:	f006 fbfc 	bl	1958e <event_clear>
		curr_time = z_nrf_rtc_timer_read();
   12d96:	f7ff fec7 	bl	12b28 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   12d9a:	f04f 0220 	mov.w	r2, #32
   12d9e:	f3ef 8311 	mrs	r3, BASEPRI
   12da2:	f382 8812 	msr	BASEPRI_MAX, r2
   12da6:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   12daa:	eb08 1c04 	add.w	ip, r8, r4, lsl #4
   12dae:	e9dc ab02 	ldrd	sl, fp, [ip, #8]
		if (curr_time >= expire_time) {
   12db2:	4550      	cmp	r0, sl
   12db4:	eb71 010b 	sbcs.w	r1, r1, fp
   12db8:	9302      	str	r3, [sp, #8]
   12dba:	d20a      	bcs.n	12dd2 <rtc_nrf_isr+0xae>
	__asm__ volatile(
   12dbc:	f383 8811 	msr	BASEPRI, r3
   12dc0:	f3bf 8f6f 	isb	sy
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   12dc4:	3510      	adds	r5, #16
   12dc6:	b114      	cbz	r4, 12dce <rtc_nrf_isr+0xaa>
}
   12dc8:	b005      	add	sp, #20
   12dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   12dce:	2401      	movs	r4, #1
   12dd0:	e7c2      	b.n	12d58 <rtc_nrf_isr+0x34>
			cc_data[chan].callback = NULL;
   12dd2:	2000      	movs	r0, #0
			user_context = cc_data[chan].user_context;
   12dd4:	e9d5 1300 	ldrd	r1, r3, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   12dd8:	f04f 32ff 	mov.w	r2, #4294967295
			user_context = cc_data[chan].user_context;
   12ddc:	9303      	str	r3, [sp, #12]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   12dde:	f04f 33ff 	mov.w	r3, #4294967295
			cc_data[chan].callback = NULL;
   12de2:	6028      	str	r0, [r5, #0]
    p_reg->EVTENCLR = mask;
   12de4:	480a      	ldr	r0, [pc, #40]	; (12e10 <rtc_nrf_isr+0xec>)
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   12de6:	e9cc 2302 	strd	r2, r3, [ip, #8]
   12dea:	f8c0 9348 	str.w	r9, [r0, #840]	; 0x348
			event_clear(chan);
   12dee:	4620      	mov	r0, r4
   12df0:	f006 fbcd 	bl	1958e <event_clear>
   12df4:	9b02      	ldr	r3, [sp, #8]
   12df6:	f383 8811 	msr	BASEPRI, r3
   12dfa:	f3bf 8f6f 	isb	sy
		if (handler) {
   12dfe:	2900      	cmp	r1, #0
   12e00:	d0e0      	beq.n	12dc4 <rtc_nrf_isr+0xa0>
			handler(chan, expire_time, user_context);
   12e02:	9b03      	ldr	r3, [sp, #12]
   12e04:	4652      	mov	r2, sl
   12e06:	9300      	str	r3, [sp, #0]
   12e08:	465b      	mov	r3, fp
   12e0a:	4788      	blx	r1
   12e0c:	e7da      	b.n	12dc4 <rtc_nrf_isr+0xa0>
   12e0e:	bf00      	nop
   12e10:	40015000 	.word	0x40015000
   12e14:	20009a78 	.word	0x20009a78
   12e18:	200094a0 	.word	0x200094a0
   12e1c:	20009a6c 	.word	0x20009a6c
   12e20:	40015140 	.word	0x40015140

00012e24 <z_nrf_rtc_timer_chan_alloc>:
{
   12e24:	b570      	push	{r4, r5, r6, lr}
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   12e26:	2401      	movs	r4, #1
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
   12e28:	4b0c      	ldr	r3, [pc, #48]	; (12e5c <z_nrf_rtc_timer_chan_alloc+0x38>)
   12e2a:	6818      	ldr	r0, [r3, #0]
   12e2c:	b190      	cbz	r0, 12e54 <z_nrf_rtc_timer_chan_alloc+0x30>
   12e2e:	fab0 f080 	clz	r0, r0
   12e32:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   12e36:	fa04 f100 	lsl.w	r1, r4, r0
   12e3a:	43c9      	mvns	r1, r1
   12e3c:	e8d3 2fef 	ldaex	r2, [r3]
   12e40:	ea02 0501 	and.w	r5, r2, r1
   12e44:	e8c3 5fe6 	stlex	r6, r5, [r3]
   12e48:	2e00      	cmp	r6, #0
   12e4a:	d1f7      	bne.n	12e3c <z_nrf_rtc_timer_chan_alloc+0x18>
	} while (!(prev & BIT(chan)));
   12e4c:	40c2      	lsrs	r2, r0
   12e4e:	07d2      	lsls	r2, r2, #31
   12e50:	d5eb      	bpl.n	12e2a <z_nrf_rtc_timer_chan_alloc+0x6>
}
   12e52:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   12e54:	f06f 000b 	mvn.w	r0, #11
   12e58:	e7fb      	b.n	12e52 <z_nrf_rtc_timer_chan_alloc+0x2e>
   12e5a:	bf00      	nop
   12e5c:	20009a70 	.word	0x20009a70

00012e60 <z_nrf_rtc_timer_chan_free>:
	atomic_or(&alloc_mask, BIT(chan));
   12e60:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12e62:	4a05      	ldr	r2, [pc, #20]	; (12e78 <z_nrf_rtc_timer_chan_free+0x18>)
   12e64:	4083      	lsls	r3, r0
   12e66:	e8d2 0fef 	ldaex	r0, [r2]
   12e6a:	4318      	orrs	r0, r3
   12e6c:	e8c2 0fe1 	stlex	r1, r0, [r2]
   12e70:	2900      	cmp	r1, #0
   12e72:	d1f8      	bne.n	12e66 <z_nrf_rtc_timer_chan_free+0x6>
}
   12e74:	4770      	bx	lr
   12e76:	bf00      	nop
   12e78:	20009a70 	.word	0x20009a70

00012e7c <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   12e7c:	1c43      	adds	r3, r0, #1
{
   12e7e:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   12e80:	d021      	beq.n	12ec6 <sys_clock_set_timeout+0x4a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   12e82:	2801      	cmp	r0, #1
   12e84:	dd21      	ble.n	12eca <sys_clock_set_timeout+0x4e>
   12e86:	4a12      	ldr	r2, [pc, #72]	; (12ed0 <sys_clock_set_timeout+0x54>)
   12e88:	4b12      	ldr	r3, [pc, #72]	; (12ed4 <sys_clock_set_timeout+0x58>)
   12e8a:	4290      	cmp	r0, r2
   12e8c:	bfd4      	ite	le
   12e8e:	4604      	movle	r4, r0
   12e90:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   12e92:	f7ff fe49 	bl	12b28 <z_nrf_rtc_timer_read>
   12e96:	4b10      	ldr	r3, [pc, #64]	; (12ed8 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
   12e98:	490e      	ldr	r1, [pc, #56]	; (12ed4 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   12e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   12e9e:	1a80      	subs	r0, r0, r2
		cyc = 0;
   12ea0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   12ea4:	bf28      	it	cs
   12ea6:	2400      	movcs	r4, #0
	cyc += unannounced;
   12ea8:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   12eaa:	428c      	cmp	r4, r1
   12eac:	bf28      	it	cs
   12eae:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
   12eb0:	2000      	movs	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   12eb2:	490a      	ldr	r1, [pc, #40]	; (12edc <sys_clock_set_timeout+0x60>)
	uint64_t target_time = cyc + last_count;
   12eb4:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   12eb6:	9001      	str	r0, [sp, #4]
   12eb8:	9100      	str	r1, [sp, #0]
   12eba:	f143 0300 	adc.w	r3, r3, #0
   12ebe:	f7ff fe55 	bl	12b6c <compare_set>
}
   12ec2:	b002      	add	sp, #8
   12ec4:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
   12ec6:	4c03      	ldr	r4, [pc, #12]	; (12ed4 <sys_clock_set_timeout+0x58>)
   12ec8:	e7e3      	b.n	12e92 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   12eca:	2401      	movs	r4, #1
   12ecc:	e7e1      	b.n	12e92 <sys_clock_set_timeout+0x16>
   12ece:	bf00      	nop
   12ed0:	007ffffe 	.word	0x007ffffe
   12ed4:	007fffff 	.word	0x007fffff
   12ed8:	200094c0 	.word	0x200094c0
   12edc:	00012a75 	.word	0x00012a75

00012ee0 <sys_clock_elapsed>:
{
   12ee0:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   12ee2:	f7ff fe21 	bl	12b28 <z_nrf_rtc_timer_read>
   12ee6:	4b02      	ldr	r3, [pc, #8]	; (12ef0 <sys_clock_elapsed+0x10>)
   12ee8:	681b      	ldr	r3, [r3, #0]
}
   12eea:	1ac0      	subs	r0, r0, r3
   12eec:	bd08      	pop	{r3, pc}
   12eee:	bf00      	nop
   12ef0:	200094c0 	.word	0x200094c0

00012ef4 <get_buttons.part.0>:
	}

	return err;
}

static uint32_t get_buttons(void)
   12ef4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
		int val;

		val = gpio_pin_get_dt(&buttons[i]);
		if (val < 0) {
			LOG_ERR("Cannot read gpio pin");
   12ef6:	4b07      	ldr	r3, [pc, #28]	; (12f14 <get_buttons.part.0+0x20>)
   12ef8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12efc:	9305      	str	r3, [sp, #20]
   12efe:	2302      	movs	r3, #2
   12f00:	4805      	ldr	r0, [pc, #20]	; (12f18 <get_buttons.part.0+0x24>)
   12f02:	aa04      	add	r2, sp, #16
   12f04:	9304      	str	r3, [sp, #16]
   12f06:	f006 fb82 	bl	1960e <z_log_msg_static_create.constprop.0>
			ret |= 1U << i;
		}
	}

	return ret;
}
   12f0a:	2000      	movs	r0, #0
   12f0c:	b007      	add	sp, #28
   12f0e:	f85d fb04 	ldr.w	pc, [sp], #4
   12f12:	bf00      	nop
   12f14:	0001daa4 	.word	0x0001daa4
   12f18:	0001b228 	.word	0x0001b228

00012f1c <get_buttons>:
{
   12f1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	uint32_t ret = 0;
   12f20:	2400      	movs	r4, #0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_port_get(port, &value);
	if (ret == 0) {
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   12f22:	f04f 0801 	mov.w	r8, #1
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   12f26:	4625      	mov	r5, r4
   12f28:	4e12      	ldr	r6, [pc, #72]	; (12f74 <get_buttons+0x58>)
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
	return gpio_pin_get(spec->port, spec->pin);
   12f2a:	6830      	ldr	r0, [r6, #0]
   12f2c:	7937      	ldrb	r7, [r6, #4]
	const struct gpio_driver_data *const data =
   12f2e:	f8d0 9010 	ldr.w	r9, [r0, #16]
	return api->port_get_raw(port, value);
   12f32:	6883      	ldr	r3, [r0, #8]
   12f34:	a901      	add	r1, sp, #4
   12f36:	685b      	ldr	r3, [r3, #4]
   12f38:	4798      	blx	r3
	if (ret == 0) {
   12f3a:	2800      	cmp	r0, #0
   12f3c:	d00c      	beq.n	12f58 <get_buttons+0x3c>
		if (val < 0) {
   12f3e:	db14      	blt.n	12f6a <get_buttons+0x4e>
			ret |= 1U << i;
   12f40:	fa08 f305 	lsl.w	r3, r8, r5
   12f44:	431c      	orrs	r4, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   12f46:	3501      	adds	r5, #1
   12f48:	2d04      	cmp	r5, #4
   12f4a:	f106 0608 	add.w	r6, r6, #8
   12f4e:	d1ec      	bne.n	12f2a <get_buttons+0xe>
}
   12f50:	4620      	mov	r0, r4
   12f52:	b003      	add	sp, #12
   12f54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*value ^= data->invert;
   12f58:	f8d9 2000 	ldr.w	r2, [r9]
   12f5c:	9b01      	ldr	r3, [sp, #4]
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   12f5e:	fa08 f707 	lsl.w	r7, r8, r7
		*value ^= data->invert;
   12f62:	4053      	eors	r3, r2
		if (val) {
   12f64:	423b      	tst	r3, r7
   12f66:	d0ee      	beq.n	12f46 <get_buttons+0x2a>
   12f68:	e7ea      	b.n	12f40 <get_buttons+0x24>
}
   12f6a:	b003      	add	sp, #12
   12f6c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12f70:	f7ff bfc0 	b.w	12ef4 <get_buttons.part.0>
   12f74:	0001baa4 	.word	0x0001baa4

00012f78 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   12f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12f7c:	4607      	mov	r7, r0
   12f7e:	4688      	mov	r8, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   12f80:	2500      	movs	r5, #0
   12f82:	4e14      	ldr	r6, [pc, #80]	; (12fd4 <dk_set_leds_state.part.0+0x5c>)
int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   12f84:	b086      	sub	sp, #24
		int val, err;

		if (BIT(i) & leds_on_mask) {
   12f86:	fa27 f205 	lsr.w	r2, r7, r5
   12f8a:	f012 0201 	ands.w	r2, r2, #1
   12f8e:	d117      	bne.n	12fc0 <dk_set_leds_state.part.0+0x48>
			val = 1;
		} else if (BIT(i) & leds_off_mask) {
   12f90:	fa28 f305 	lsr.w	r3, r8, r5
   12f94:	07db      	lsls	r3, r3, #31
   12f96:	d515      	bpl.n	12fc4 <dk_set_leds_state.part.0+0x4c>
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
   12f98:	7931      	ldrb	r1, [r6, #4]
   12f9a:	6830      	ldr	r0, [r6, #0]
   12f9c:	f006 fb27 	bl	195ee <gpio_pin_set>
		} else {
			continue;
		}

		err = gpio_pin_set_dt(&leds[i], val);
		if (err) {
   12fa0:	4604      	mov	r4, r0
   12fa2:	b178      	cbz	r0, 12fc4 <dk_set_leds_state.part.0+0x4c>
			LOG_ERR("Cannot write LED gpio");
   12fa4:	4b0c      	ldr	r3, [pc, #48]	; (12fd8 <dk_set_leds_state.part.0+0x60>)
   12fa6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12faa:	9305      	str	r3, [sp, #20]
   12fac:	2302      	movs	r3, #2
   12fae:	480b      	ldr	r0, [pc, #44]	; (12fdc <dk_set_leds_state.part.0+0x64>)
   12fb0:	aa04      	add	r2, sp, #16
   12fb2:	9304      	str	r3, [sp, #16]
   12fb4:	f006 fb2b 	bl	1960e <z_log_msg_static_create.constprop.0>
			return err;
		}
	}

	return 0;
}
   12fb8:	4620      	mov	r0, r4
   12fba:	b006      	add	sp, #24
   12fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			val = 1;
   12fc0:	2201      	movs	r2, #1
   12fc2:	e7e9      	b.n	12f98 <dk_set_leds_state.part.0+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   12fc4:	3501      	adds	r5, #1
   12fc6:	2d04      	cmp	r5, #4
   12fc8:	f106 0608 	add.w	r6, r6, #8
   12fcc:	d1db      	bne.n	12f86 <dk_set_leds_state.part.0+0xe>
	return 0;
   12fce:	2400      	movs	r4, #0
   12fd0:	e7f2      	b.n	12fb8 <dk_set_leds_state.part.0+0x40>
   12fd2:	bf00      	nop
   12fd4:	0001ba84 	.word	0x0001ba84
   12fd8:	0001dab9 	.word	0x0001dab9
   12fdc:	0001b228 	.word	0x0001b228

00012fe0 <callback_ctrl>:
{
   12fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12fe4:	4680      	mov	r8, r0
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
   12fe6:	2600      	movs	r6, #0
   12fe8:	4d21      	ldr	r5, [pc, #132]	; (13070 <callback_ctrl+0x90>)
					 FLAGS_GPIO_0_1_ACTIVE :
   12fea:	f8df 9088 	ldr.w	r9, [pc, #136]	; 13074 <callback_ctrl+0x94>
			flags = ((buttons[i].port == GPIO0_DEV || buttons[i].port == GPIO1_DEV) ?
   12fee:	f8df a088 	ldr.w	sl, [pc, #136]	; 13078 <callback_ctrl+0x98>
{
   12ff2:	af00      	add	r7, sp, #0
			flags = ((buttons[i].port == GPIO0_DEV || buttons[i].port == GPIO1_DEV) ?
   12ff4:	6828      	ldr	r0, [r5, #0]
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   12ff6:	7929      	ldrb	r1, [r5, #4]
		if (enable) {
   12ff8:	f1b8 0f00 	cmp.w	r8, #0
   12ffc:	d02d      	beq.n	1305a <callback_ctrl+0x7a>
					 FLAGS_GPIO_0_1_ACTIVE :
   12ffe:	4548      	cmp	r0, r9
   13000:	d01f      	beq.n	13042 <callback_ctrl+0x62>
			flags = ((buttons[i].port == GPIO0_DEV || buttons[i].port == GPIO1_DEV) ?
   13002:	4550      	cmp	r0, sl
   13004:	d01d      	beq.n	13042 <callback_ctrl+0x62>
					 FLAGS_GPIO_0_1_ACTIVE :
   13006:	f04f 62e8 	mov.w	r2, #121634816	; 0x7400000
	const struct gpio_driver_api *api =
   1300a:	6883      	ldr	r3, [r0, #8]
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1300c:	699c      	ldr	r4, [r3, #24]
   1300e:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
   13012:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
   13016:	47a0      	blx	r4
		if (err) {
   13018:	4604      	mov	r4, r0
   1301a:	b310      	cbz	r0, 13062 <callback_ctrl+0x82>
			LOG_ERR("GPIO IRQ config failed, err: %d", err);
   1301c:	466d      	mov	r5, sp
   1301e:	b088      	sub	sp, #32
   13020:	466a      	mov	r2, sp
   13022:	4b16      	ldr	r3, [pc, #88]	; (1307c <callback_ctrl+0x9c>)
   13024:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13028:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1302c:	2303      	movs	r3, #3
   1302e:	4814      	ldr	r0, [pc, #80]	; (13080 <callback_ctrl+0xa0>)
   13030:	f842 3f10 	str.w	r3, [r2, #16]!
   13034:	f006 faeb 	bl	1960e <z_log_msg_static_create.constprop.0>
   13038:	46ad      	mov	sp, r5
}
   1303a:	4620      	mov	r0, r4
   1303c:	46bd      	mov	sp, r7
   1303e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   13042:	2401      	movs	r4, #1
   13044:	6902      	ldr	r2, [r0, #16]
   13046:	408c      	lsls	r4, r1
   13048:	6812      	ldr	r2, [r2, #0]
	const struct gpio_driver_api *api =
   1304a:	6883      	ldr	r3, [r0, #8]
					 FLAGS_GPIO_0_1_ACTIVE :
   1304c:	4214      	tst	r4, r2
   1304e:	bf14      	ite	ne
   13050:	f04f 7230 	movne.w	r2, #46137344	; 0x2c00000
   13054:	f04f 6298 	moveq.w	r2, #79691776	; 0x4c00000
   13058:	e7d8      	b.n	1300c <callback_ctrl+0x2c>
			flags = GPIO_INT_DISABLE;
   1305a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1305e:	6883      	ldr	r3, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   13060:	e7d4      	b.n	1300c <callback_ctrl+0x2c>
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
   13062:	3601      	adds	r6, #1
   13064:	2e04      	cmp	r6, #4
   13066:	f105 0508 	add.w	r5, r5, #8
   1306a:	d1c3      	bne.n	12ff4 <callback_ctrl+0x14>
   1306c:	e7e5      	b.n	1303a <callback_ctrl+0x5a>
   1306e:	bf00      	nop
   13070:	0001baa4 	.word	0x0001baa4
   13074:	0001ae4c 	.word	0x0001ae4c
   13078:	0001ae34 	.word	0x0001ae34
   1307c:	0001dacf 	.word	0x0001dacf
   13080:	0001b228 	.word	0x0001b228

00013084 <button_pressed>:
{
   13084:	b530      	push	{r4, r5, lr}
   13086:	b087      	sub	sp, #28
	__asm__ volatile(
   13088:	f04f 0320 	mov.w	r3, #32
   1308c:	f3ef 8511 	mrs	r5, BASEPRI
   13090:	f383 8812 	msr	BASEPRI_MAX, r3
   13094:	f3bf 8f6f 	isb	sy
	switch (state) {
   13098:	4c13      	ldr	r4, [pc, #76]	; (130e8 <button_pressed+0x64>)
   1309a:	7823      	ldrb	r3, [r4, #0]
   1309c:	b9eb      	cbnz	r3, 130da <button_pressed+0x56>
		if (gpio_dev == GPIO0_DEV || gpio_dev == GPIO1_DEV) {
   1309e:	4b13      	ldr	r3, [pc, #76]	; (130ec <button_pressed+0x68>)
   130a0:	4298      	cmp	r0, r3
   130a2:	d002      	beq.n	130aa <button_pressed+0x26>
   130a4:	4b12      	ldr	r3, [pc, #72]	; (130f0 <button_pressed+0x6c>)
   130a6:	4298      	cmp	r0, r3
   130a8:	d110      	bne.n	130cc <button_pressed+0x48>
			err = callback_ctrl(false);
   130aa:	2000      	movs	r0, #0
   130ac:	f7ff ff98 	bl	12fe0 <callback_ctrl>
			if (err) {
   130b0:	b148      	cbz	r0, 130c6 <button_pressed+0x42>
				LOG_ERR("Failed disabling interrupts");
   130b2:	4b10      	ldr	r3, [pc, #64]	; (130f4 <button_pressed+0x70>)
   130b4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   130b8:	9305      	str	r3, [sp, #20]
   130ba:	2302      	movs	r3, #2
   130bc:	480e      	ldr	r0, [pc, #56]	; (130f8 <button_pressed+0x74>)
   130be:	aa04      	add	r2, sp, #16
   130c0:	9304      	str	r3, [sp, #16]
   130c2:	f006 faa4 	bl	1960e <z_log_msg_static_create.constprop.0>
			irq_enabled = false;
   130c6:	2200      	movs	r2, #0
   130c8:	4b0c      	ldr	r3, [pc, #48]	; (130fc <button_pressed+0x78>)
   130ca:	701a      	strb	r2, [r3, #0]
		state = STATE_SCANNING;
   130cc:	2301      	movs	r3, #1
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   130ce:	2221      	movs	r2, #33	; 0x21
		state = STATE_SCANNING;
   130d0:	7023      	strb	r3, [r4, #0]
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   130d2:	480b      	ldr	r0, [pc, #44]	; (13100 <button_pressed+0x7c>)
   130d4:	2300      	movs	r3, #0
   130d6:	f002 f9bd 	bl	15454 <k_work_reschedule>
	__asm__ volatile(
   130da:	f385 8811 	msr	BASEPRI, r5
   130de:	f3bf 8f6f 	isb	sy
}
   130e2:	b007      	add	sp, #28
   130e4:	bd30      	pop	{r4, r5, pc}
   130e6:	bf00      	nop
   130e8:	20009be2 	.word	0x20009be2
   130ec:	0001ae4c 	.word	0x0001ae4c
   130f0:	0001ae34 	.word	0x0001ae34
   130f4:	0001daef 	.word	0x0001daef
   130f8:	0001b228 	.word	0x0001b228
   130fc:	20009be1 	.word	0x20009be1
   13100:	200094d0 	.word	0x200094d0

00013104 <buttons_scan_fn>:
{
   13104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (irq_enabled) {
   13108:	4f37      	ldr	r7, [pc, #220]	; (131e8 <buttons_scan_fn+0xe4>)
{
   1310a:	b086      	sub	sp, #24
	if (irq_enabled) {
   1310c:	783b      	ldrb	r3, [r7, #0]
   1310e:	b17b      	cbz	r3, 13130 <buttons_scan_fn+0x2c>
		err = callback_ctrl(false);
   13110:	2000      	movs	r0, #0
   13112:	f7ff ff65 	bl	12fe0 <callback_ctrl>
		if (err) {
   13116:	b150      	cbz	r0, 1312e <buttons_scan_fn+0x2a>
			LOG_ERR("Cannot disable callbacks");
   13118:	4b34      	ldr	r3, [pc, #208]	; (131ec <buttons_scan_fn+0xe8>)
			LOG_ERR("Cannot enable callbacks");
   1311a:	9305      	str	r3, [sp, #20]
   1311c:	2302      	movs	r3, #2
   1311e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13122:	4833      	ldr	r0, [pc, #204]	; (131f0 <buttons_scan_fn+0xec>)
   13124:	aa04      	add	r2, sp, #16
   13126:	9304      	str	r3, [sp, #16]
   13128:	f006 fa71 	bl	1960e <z_log_msg_static_create.constprop.0>
   1312c:	e04c      	b.n	131c8 <buttons_scan_fn+0xc4>
		irq_enabled = false;
   1312e:	7038      	strb	r0, [r7, #0]
	button_scan = get_buttons();
   13130:	f7ff fef4 	bl	12f1c <get_buttons>
   13134:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13136:	4b2f      	ldr	r3, [pc, #188]	; (131f4 <buttons_scan_fn+0xf0>)
   13138:	e8d3 2fef 	ldaex	r2, [r3]
   1313c:	e8c3 4fe1 	stlex	r1, r4, [r3]
   13140:	2900      	cmp	r1, #0
   13142:	d1f9      	bne.n	13138 <buttons_scan_fn+0x34>
	if (!initial_run) {
   13144:	4b2c      	ldr	r3, [pc, #176]	; (131f8 <buttons_scan_fn+0xf4>)
   13146:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 131fc <buttons_scan_fn+0xf8>
   1314a:	781a      	ldrb	r2, [r3, #0]
   1314c:	bb4a      	cbnz	r2, 131a2 <buttons_scan_fn+0x9e>
		if (button_scan != last_button_scan) {
   1314e:	f8d8 6000 	ldr.w	r6, [r8]
   13152:	42a6      	cmp	r6, r4
   13154:	d019      	beq.n	1318a <buttons_scan_fn+0x86>
	if (button_handler_cb != NULL) {
   13156:	4b2a      	ldr	r3, [pc, #168]	; (13200 <buttons_scan_fn+0xfc>)
			uint32_t has_changed = (button_scan ^ last_button_scan);
   13158:	4066      	eors	r6, r4
	if (button_handler_cb != NULL) {
   1315a:	681b      	ldr	r3, [r3, #0]
   1315c:	b10b      	cbz	r3, 13162 <buttons_scan_fn+0x5e>
		button_handler_cb(button_state, has_changed);
   1315e:	4631      	mov	r1, r6
   13160:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   13162:	f04f 33ff 	mov.w	r3, #4294967295
   13166:	f04f 32ff 	mov.w	r2, #4294967295
   1316a:	4826      	ldr	r0, [pc, #152]	; (13204 <buttons_scan_fn+0x100>)
   1316c:	f001 fe32 	bl	14dd4 <z_impl_k_mutex_lock>
	return list->head;
   13170:	4b25      	ldr	r3, [pc, #148]	; (13208 <buttons_scan_fn+0x104>)
   13172:	681d      	ldr	r5, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   13174:	b135      	cbz	r5, 13184 <buttons_scan_fn+0x80>
   13176:	3d04      	subs	r5, #4
			handler->cb(button_state, has_changed);
   13178:	682b      	ldr	r3, [r5, #0]
   1317a:	4631      	mov	r1, r6
   1317c:	4620      	mov	r0, r4
   1317e:	4798      	blx	r3
	return node->next;
   13180:	686d      	ldr	r5, [r5, #4]
   13182:	e7f7      	b.n	13174 <buttons_scan_fn+0x70>
	return z_impl_k_mutex_unlock(mutex);
   13184:	481f      	ldr	r0, [pc, #124]	; (13204 <buttons_scan_fn+0x100>)
   13186:	f001 fe9f 	bl	14ec8 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   1318a:	f8c8 4000 	str.w	r4, [r8]
	if (button_scan != 0) {
   1318e:	b15c      	cbz	r4, 131a8 <buttons_scan_fn+0xa4>
		k_work_reschedule(&buttons_scan,
   13190:	f44f 72a4 	mov.w	r2, #328	; 0x148
   13194:	2300      	movs	r3, #0
   13196:	481d      	ldr	r0, [pc, #116]	; (1320c <buttons_scan_fn+0x108>)
}
   13198:	b006      	add	sp, #24
   1319a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_reschedule(&buttons_scan,
   1319e:	f002 b959 	b.w	15454 <k_work_reschedule>
		initial_run = false;
   131a2:	2200      	movs	r2, #0
   131a4:	701a      	strb	r2, [r3, #0]
   131a6:	e7f0      	b.n	1318a <buttons_scan_fn+0x86>
	__asm__ volatile(
   131a8:	f04f 0320 	mov.w	r3, #32
   131ac:	f3ef 8611 	mrs	r6, BASEPRI
   131b0:	f383 8812 	msr	BASEPRI_MAX, r3
   131b4:	f3bf 8f6f 	isb	sy
		switch (state) {
   131b8:	4b15      	ldr	r3, [pc, #84]	; (13210 <buttons_scan_fn+0x10c>)
   131ba:	781d      	ldrb	r5, [r3, #0]
   131bc:	2d01      	cmp	r5, #1
   131be:	d006      	beq.n	131ce <buttons_scan_fn+0xca>
	__asm__ volatile(
   131c0:	f386 8811 	msr	BASEPRI, r6
   131c4:	f3bf 8f6f 	isb	sy
}
   131c8:	b006      	add	sp, #24
   131ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = callback_ctrl(true);
   131ce:	4628      	mov	r0, r5
			state = STATE_WAITING;
   131d0:	701c      	strb	r4, [r3, #0]
			err = callback_ctrl(true);
   131d2:	f7ff ff05 	bl	12fe0 <callback_ctrl>
			irq_enabled = true;
   131d6:	703d      	strb	r5, [r7, #0]
   131d8:	f386 8811 	msr	BASEPRI, r6
   131dc:	f3bf 8f6f 	isb	sy
		if (err) {
   131e0:	2800      	cmp	r0, #0
   131e2:	d0f1      	beq.n	131c8 <buttons_scan_fn+0xc4>
			LOG_ERR("Cannot enable callbacks");
   131e4:	4b0b      	ldr	r3, [pc, #44]	; (13214 <buttons_scan_fn+0x110>)
   131e6:	e798      	b.n	1311a <buttons_scan_fn+0x16>
   131e8:	20009be1 	.word	0x20009be1
   131ec:	0001db0b 	.word	0x0001db0b
   131f0:	0001b228 	.word	0x0001b228
   131f4:	20009aac 	.word	0x20009aac
   131f8:	200084dc 	.word	0x200084dc
   131fc:	20009a80 	.word	0x20009a80
   13200:	20009ab0 	.word	0x20009ab0
   13204:	20009a84 	.word	0x20009a84
   13208:	20009a98 	.word	0x20009a98
   1320c:	200094d0 	.word	0x200094d0
   13210:	20009be2 	.word	0x20009be2
   13214:	0001db24 	.word	0x0001db24

00013218 <dk_leds_init>:
{
   13218:	b570      	push	{r4, r5, r6, lr}
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1321a:	2500      	movs	r5, #0
   1321c:	4e10      	ldr	r6, [pc, #64]	; (13260 <dk_leds_init+0x48>)
{
   1321e:	b086      	sub	sp, #24
		err = gpio_pin_configure_dt(&leds[i], GPIO_OUTPUT);
   13220:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   13224:	4630      	mov	r0, r6
   13226:	f006 f9cd 	bl	195c4 <gpio_pin_configure_dt>
		if (err) {
   1322a:	4604      	mov	r4, r0
   1322c:	b950      	cbnz	r0, 13244 <dk_leds_init+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1322e:	3501      	adds	r5, #1
   13230:	2d04      	cmp	r5, #4
   13232:	f106 0608 	add.w	r6, r6, #8
   13236:	d1f3      	bne.n	13220 <dk_leds_init+0x8>
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   13238:	210f      	movs	r1, #15
}
   1323a:	b006      	add	sp, #24
   1323c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13240:	f7ff be9a 	b.w	12f78 <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   13244:	4b07      	ldr	r3, [pc, #28]	; (13264 <dk_leds_init+0x4c>)
   13246:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1324a:	9305      	str	r3, [sp, #20]
   1324c:	2302      	movs	r3, #2
   1324e:	4806      	ldr	r0, [pc, #24]	; (13268 <dk_leds_init+0x50>)
   13250:	aa04      	add	r2, sp, #16
   13252:	9304      	str	r3, [sp, #16]
   13254:	f006 f9db 	bl	1960e <z_log_msg_static_create.constprop.0>
}
   13258:	4620      	mov	r0, r4
   1325a:	b006      	add	sp, #24
   1325c:	bd70      	pop	{r4, r5, r6, pc}
   1325e:	bf00      	nop
   13260:	0001ba84 	.word	0x0001ba84
   13264:	0001db3c 	.word	0x0001db3c
   13268:	0001b228 	.word	0x0001b228

0001326c <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1326c:	4b05      	ldr	r3, [pc, #20]	; (13284 <dk_read_buttons+0x18>)
   1326e:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   13272:	b100      	cbz	r0, 13276 <dk_read_buttons+0xa>
		*button_state = current_state;
   13274:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   13276:	4804      	ldr	r0, [pc, #16]	; (13288 <dk_read_buttons+0x1c>)
   13278:	b111      	cbz	r1, 13280 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   1327a:	6802      	ldr	r2, [r0, #0]
   1327c:	405a      	eors	r2, r3
   1327e:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   13280:	6003      	str	r3, [r0, #0]
}
   13282:	4770      	bx	lr
   13284:	20009aac 	.word	0x20009aac
   13288:	20009a7c 	.word	0x20009a7c

0001328c <dk_buttons_init>:
{
   1328c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	button_handler_cb = button_handler;
   13290:	4b3a      	ldr	r3, [pc, #232]	; (1337c <dk_buttons_init+0xf0>)
{
   13292:	b087      	sub	sp, #28
	button_handler_cb = button_handler;
   13294:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   13296:	4d3a      	ldr	r5, [pc, #232]	; (13380 <dk_buttons_init+0xf4>)
   13298:	483a      	ldr	r0, [pc, #232]	; (13384 <dk_buttons_init+0xf8>)
   1329a:	f007 f89e 	bl	1a3da <z_impl_k_mutex_init>
   1329e:	462e      	mov	r6, r5
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   132a0:	2700      	movs	r7, #0
   132a2:	46a8      	mov	r8, r5
			GPIO_PULL_UP : GPIO_PULL_DOWN;
   132a4:	88f3      	ldrh	r3, [r6, #6]
		err = gpio_pin_configure_dt(&buttons[i], GPIO_INPUT | flags);
   132a6:	4630      	mov	r0, r6
			GPIO_PULL_UP : GPIO_PULL_DOWN;
   132a8:	f013 0f01 	tst.w	r3, #1
   132ac:	bf0c      	ite	eq
   132ae:	2120      	moveq	r1, #32
   132b0:	2110      	movne	r1, #16
		err = gpio_pin_configure_dt(&buttons[i], GPIO_INPUT | flags);
   132b2:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
   132b6:	f006 f985 	bl	195c4 <gpio_pin_configure_dt>
		if (err) {
   132ba:	4604      	mov	r4, r0
   132bc:	b168      	cbz	r0, 132da <dk_buttons_init+0x4e>
			LOG_ERR("Cannot configure button gpio");
   132be:	4b32      	ldr	r3, [pc, #200]	; (13388 <dk_buttons_init+0xfc>)
			LOG_ERR("Cannot disable callbacks()");
   132c0:	9305      	str	r3, [sp, #20]
   132c2:	2302      	movs	r3, #2
   132c4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   132c8:	4830      	ldr	r0, [pc, #192]	; (1338c <dk_buttons_init+0x100>)
   132ca:	aa04      	add	r2, sp, #16
   132cc:	9304      	str	r3, [sp, #16]
   132ce:	f006 f99e 	bl	1960e <z_log_msg_static_create.constprop.0>
}
   132d2:	4620      	mov	r0, r4
   132d4:	b007      	add	sp, #28
   132d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   132da:	3701      	adds	r7, #1
   132dc:	2f04      	cmp	r7, #4
   132de:	f106 0608 	add.w	r6, r6, #8
   132e2:	d1df      	bne.n	132a4 <dk_buttons_init+0x18>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   132e4:	4606      	mov	r6, r0
	uint32_t pin_mask = 0;
   132e6:	4607      	mov	r7, r0
		pin_mask |= BIT(buttons[i].pin);
   132e8:	f04f 0901 	mov.w	r9, #1
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   132ec:	6828      	ldr	r0, [r5, #0]
   132ee:	7929      	ldrb	r1, [r5, #4]
	return api->pin_interrupt_configure(port, pin, mode, trig);
   132f0:	6883      	ldr	r3, [r0, #8]
   132f2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   132f6:	699c      	ldr	r4, [r3, #24]
   132f8:	2300      	movs	r3, #0
   132fa:	47a0      	blx	r4
		if (err) {
   132fc:	4604      	mov	r4, r0
   132fe:	b108      	cbz	r0, 13304 <dk_buttons_init+0x78>
			LOG_ERR("Cannot disable callbacks()");
   13300:	4b23      	ldr	r3, [pc, #140]	; (13390 <dk_buttons_init+0x104>)
   13302:	e7dd      	b.n	132c0 <dk_buttons_init+0x34>
		pin_mask |= BIT(buttons[i].pin);
   13304:	792b      	ldrb	r3, [r5, #4]
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   13306:	3601      	adds	r6, #1
		pin_mask |= BIT(buttons[i].pin);
   13308:	fa09 f303 	lsl.w	r3, r9, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1330c:	2e04      	cmp	r6, #4
		pin_mask |= BIT(buttons[i].pin);
   1330e:	ea47 0703 	orr.w	r7, r7, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   13312:	f105 0508 	add.w	r5, r5, #8
   13316:	d1e9      	bne.n	132ec <dk_buttons_init+0x60>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   13318:	4605      	mov	r5, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   1331a:	4e1e      	ldr	r6, [pc, #120]	; (13394 <dk_buttons_init+0x108>)
   1331c:	4b1e      	ldr	r3, [pc, #120]	; (13398 <dk_buttons_init+0x10c>)
	callback->pin_mask = pin_mask;
   1331e:	e9c6 3701 	strd	r3, r7, [r6, #4]
		err = gpio_add_callback(buttons[i].port, &gpio_cb);
   13322:	f858 0035 	ldr.w	r0, [r8, r5, lsl #3]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   13326:	6883      	ldr	r3, [r0, #8]
   13328:	69db      	ldr	r3, [r3, #28]
   1332a:	b133      	cbz	r3, 1333a <dk_buttons_init+0xae>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   1332c:	2201      	movs	r2, #1
   1332e:	4631      	mov	r1, r6
   13330:	4798      	blx	r3
		if (err) {
   13332:	4604      	mov	r4, r0
   13334:	b120      	cbz	r0, 13340 <dk_buttons_init+0xb4>
			LOG_ERR("Cannot add callback");
   13336:	4b19      	ldr	r3, [pc, #100]	; (1339c <dk_buttons_init+0x110>)
   13338:	e7c2      	b.n	132c0 <dk_buttons_init+0x34>
		return -ENOTSUP;
   1333a:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1333e:	e7fa      	b.n	13336 <dk_buttons_init+0xaa>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   13340:	3501      	adds	r5, #1
   13342:	2d04      	cmp	r5, #4
   13344:	d1ed      	bne.n	13322 <dk_buttons_init+0x96>
	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
   13346:	4916      	ldr	r1, [pc, #88]	; (133a0 <dk_buttons_init+0x114>)
   13348:	4816      	ldr	r0, [pc, #88]	; (133a4 <dk_buttons_init+0x118>)
   1334a:	f007 f9ab 	bl	1a6a4 <k_work_init_delayable>
	state = STATE_SCANNING;
   1334e:	2201      	movs	r2, #1
   13350:	4b15      	ldr	r3, [pc, #84]	; (133a8 <dk_buttons_init+0x11c>)
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   13352:	4814      	ldr	r0, [pc, #80]	; (133a4 <dk_buttons_init+0x118>)
	state = STATE_SCANNING;
   13354:	701a      	strb	r2, [r3, #0]
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   13356:	2300      	movs	r3, #0
   13358:	2200      	movs	r2, #0
   1335a:	f002 f847 	bl	153ec <k_work_schedule>
	dk_read_buttons(NULL, NULL);
   1335e:	4621      	mov	r1, r4
   13360:	4620      	mov	r0, r4
   13362:	f7ff ff83 	bl	1326c <dk_read_buttons>
	atomic_set(&my_buttons, (atomic_val_t)get_buttons());
   13366:	f7ff fdd9 	bl	12f1c <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1336a:	4b10      	ldr	r3, [pc, #64]	; (133ac <dk_buttons_init+0x120>)
   1336c:	e8d3 2fef 	ldaex	r2, [r3]
   13370:	e8c3 0fe1 	stlex	r1, r0, [r3]
   13374:	2900      	cmp	r1, #0
   13376:	d0ac      	beq.n	132d2 <dk_buttons_init+0x46>
   13378:	e7f8      	b.n	1336c <dk_buttons_init+0xe0>
   1337a:	bf00      	nop
   1337c:	20009ab0 	.word	0x20009ab0
   13380:	0001baa4 	.word	0x0001baa4
   13384:	20009a84 	.word	0x20009a84
   13388:	0001db56 	.word	0x0001db56
   1338c:	0001b228 	.word	0x0001b228
   13390:	0001db73 	.word	0x0001db73
   13394:	20009aa0 	.word	0x20009aa0
   13398:	00013085 	.word	0x00013085
   1339c:	0001db8e 	.word	0x0001db8e
   133a0:	00013105 	.word	0x00013105
   133a4:	200094d0 	.word	0x200094d0
   133a8:	20009be2 	.word	0x20009be2
   133ac:	20009aac 	.word	0x20009aac

000133b0 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
   133b0:	b510      	push	{r4, lr}
	int err;

	if (led_idx >= ARRAY_SIZE(leds)) {
   133b2:	2803      	cmp	r0, #3
{
   133b4:	460a      	mov	r2, r1
   133b6:	b086      	sub	sp, #24
	if (led_idx >= ARRAY_SIZE(leds)) {
   133b8:	d90e      	bls.n	133d8 <dk_set_led+0x28>
		LOG_ERR("LED index out of the range");
   133ba:	4b12      	ldr	r3, [pc, #72]	; (13404 <dk_set_led+0x54>)
		return -EINVAL;
   133bc:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("LED index out of the range");
   133c0:	9305      	str	r3, [sp, #20]
   133c2:	2302      	movs	r3, #2
   133c4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   133c8:	480f      	ldr	r0, [pc, #60]	; (13408 <dk_set_led+0x58>)
   133ca:	aa04      	add	r2, sp, #16
   133cc:	9304      	str	r3, [sp, #16]
   133ce:	f006 f91e 	bl	1960e <z_log_msg_static_create.constprop.0>
	err = gpio_pin_set_dt(&leds[led_idx], val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   133d2:	4620      	mov	r0, r4
   133d4:	b006      	add	sp, #24
   133d6:	bd10      	pop	{r4, pc}
	return gpio_pin_set(spec->port, spec->pin, value);
   133d8:	4b0c      	ldr	r3, [pc, #48]	; (1340c <dk_set_led+0x5c>)
   133da:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   133de:	7909      	ldrb	r1, [r1, #4]
   133e0:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
   133e4:	f006 f903 	bl	195ee <gpio_pin_set>
	if (err) {
   133e8:	4604      	mov	r4, r0
   133ea:	2800      	cmp	r0, #0
   133ec:	d0f1      	beq.n	133d2 <dk_set_led+0x22>
		LOG_ERR("Cannot write LED gpio");
   133ee:	4b08      	ldr	r3, [pc, #32]	; (13410 <dk_set_led+0x60>)
   133f0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   133f4:	9305      	str	r3, [sp, #20]
   133f6:	2302      	movs	r3, #2
   133f8:	4803      	ldr	r0, [pc, #12]	; (13408 <dk_set_led+0x58>)
   133fa:	aa04      	add	r2, sp, #16
   133fc:	9304      	str	r3, [sp, #16]
   133fe:	f006 f906 	bl	1960e <z_log_msg_static_create.constprop.0>
   13402:	e7e6      	b.n	133d2 <dk_set_led+0x22>
   13404:	0001dba2 	.word	0x0001dba2
   13408:	0001b228 	.word	0x0001b228
   1340c:	0001ba84 	.word	0x0001ba84
   13410:	0001dab9 	.word	0x0001dab9

00013414 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   13414:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
   13416:	f7f7 f8a5 	bl	a564 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1341a:	4b07      	ldr	r3, [pc, #28]	; (13438 <k_sys_fatal_error_handler+0x24>)
   1341c:	9305      	str	r3, [sp, #20]
   1341e:	2302      	movs	r3, #2
   13420:	9304      	str	r3, [sp, #16]
   13422:	4806      	ldr	r0, [pc, #24]	; (1343c <k_sys_fatal_error_handler+0x28>)
   13424:	2300      	movs	r3, #0
   13426:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1342a:	aa04      	add	r2, sp, #16
   1342c:	f7f7 f97a 	bl	a724 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   13430:	2000      	movs	r0, #0
   13432:	f7f8 fc01 	bl	bc38 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   13436:	bf00      	nop
   13438:	0001dbd1 	.word	0x0001dbd1
   1343c:	0001b230 	.word	0x0001b230

00013440 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   13440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13444:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   13446:	4b15      	ldr	r3, [pc, #84]	; (1349c <tfm_ns_interface_dispatch+0x5c>)
   13448:	4604      	mov	r4, r0
   1344a:	f893 8000 	ldrb.w	r8, [r3]
   1344e:	460d      	mov	r5, r1
   13450:	4616      	mov	r6, r2
   13452:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();
	int tfm_ns_saved_prio;

	if (!is_pre_kernel) {
   13454:	f1b8 0f00 	cmp.w	r8, #0
   13458:	d115      	bne.n	13486 <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   1345a:	4668      	mov	r0, sp
   1345c:	f004 faf1 	bl	17a42 <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   13460:	463a      	mov	r2, r7
   13462:	4631      	mov	r1, r6
   13464:	4628      	mov	r0, r5
   13466:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   13468:	47a0      	blx	r4
   1346a:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   1346c:	4668      	mov	r0, sp
   1346e:	f004 fae9 	bl	17a44 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   13472:	f1b8 0f00 	cmp.w	r8, #0
   13476:	d002      	beq.n	1347e <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   13478:	4809      	ldr	r0, [pc, #36]	; (134a0 <tfm_ns_interface_dispatch+0x60>)
   1347a:	f001 fd25 	bl	14ec8 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   1347e:	4620      	mov	r0, r4
   13480:	b022      	add	sp, #136	; 0x88
   13482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   13486:	f04f 32ff 	mov.w	r2, #4294967295
   1348a:	f04f 33ff 	mov.w	r3, #4294967295
   1348e:	4804      	ldr	r0, [pc, #16]	; (134a0 <tfm_ns_interface_dispatch+0x60>)
   13490:	f001 fca0 	bl	14dd4 <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   13494:	2800      	cmp	r0, #0
   13496:	d0e0      	beq.n	1345a <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   13498:	241f      	movs	r4, #31
   1349a:	e7f0      	b.n	1347e <tfm_ns_interface_dispatch+0x3e>
   1349c:	20009be3 	.word	0x20009be3
   134a0:	2000859c 	.word	0x2000859c

000134a4 <tfm_platform_ioctl>:
enum tfm_platform_err_t
tfm_platform_ioctl(tfm_platform_ioctl_req_t request,
                   psa_invec *input, psa_outvec *output)
{
    tfm_platform_ioctl_req_t req = request;
    struct psa_invec in_vec[2] = { {0} };
   134a4:	2300      	movs	r3, #0
{
   134a6:	b500      	push	{lr}
   134a8:	b089      	sub	sp, #36	; 0x24
    struct psa_invec in_vec[2] = { {0} };
   134aa:	e9cd 3306 	strd	r3, r3, [sp, #24]
    size_t inlen, outlen;
    psa_status_t status = PSA_ERROR_CONNECTION_REFUSED;

    in_vec[0].base = &req;
   134ae:	ab03      	add	r3, sp, #12
   134b0:	9304      	str	r3, [sp, #16]
    in_vec[0].len = sizeof(req);
   134b2:	2304      	movs	r3, #4
    tfm_platform_ioctl_req_t req = request;
   134b4:	9003      	str	r0, [sp, #12]
    in_vec[0].len = sizeof(req);
   134b6:	9305      	str	r3, [sp, #20]
    if (input != NULL) {
   134b8:	b1a9      	cbz	r1, 134e6 <tfm_platform_ioctl+0x42>
        in_vec[1].base = input->base;
   134ba:	680b      	ldr	r3, [r1, #0]
   134bc:	9306      	str	r3, [sp, #24]
        in_vec[1].len = input->len;
   134be:	684b      	ldr	r3, [r1, #4]
   134c0:	9307      	str	r3, [sp, #28]
        inlen = 2;
   134c2:	2302      	movs	r3, #2
    } else {
        inlen = 1;
    }

    if (output != NULL) {
   134c4:	1e11      	subs	r1, r2, #0
   134c6:	bf18      	it	ne
   134c8:	2101      	movne	r1, #1
        outlen = 1;
    } else {
        outlen = 0;
    }

    status = psa_call(TFM_PLATFORM_SERVICE_HANDLE,
   134ca:	4808      	ldr	r0, [pc, #32]	; (134ec <tfm_platform_ioctl+0x48>)
   134cc:	e9cd 2100 	strd	r2, r1, [sp]
   134d0:	f240 31f5 	movw	r1, #1013	; 0x3f5
   134d4:	aa04      	add	r2, sp, #16
   134d6:	f000 f82b 	bl	13530 <psa_call>
                      TFM_PLATFORM_API_ID_IOCTL,
                      in_vec, inlen,
                      output, outlen);

    if (status < PSA_SUCCESS) {
   134da:	2800      	cmp	r0, #0
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
    } else {
        return (enum tfm_platform_err_t)status;
    }
}
   134dc:	bfb8      	it	lt
   134de:	2001      	movlt	r0, #1
   134e0:	b009      	add	sp, #36	; 0x24
   134e2:	f85d fb04 	ldr.w	pc, [sp], #4
        inlen = 1;
   134e6:	2301      	movs	r3, #1
   134e8:	e7ec      	b.n	134c4 <tfm_platform_ioctl+0x20>
   134ea:	bf00      	nop
   134ec:	40000105 	.word	0x40000105

000134f0 <psa_generate_random>:
    return API_DISPATCH_NO_OUTVEC(in_vec);
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   134f0:	b570      	push	{r4, r5, r6, lr}
    struct tfm_crypto_pack_iovec iov = {
   134f2:	2630      	movs	r6, #48	; 0x30
{
   134f4:	b092      	sub	sp, #72	; 0x48
    struct tfm_crypto_pack_iovec iov = {
   134f6:	ab06      	add	r3, sp, #24
{
   134f8:	4605      	mov	r5, r0
   134fa:	460c      	mov	r4, r1
    struct tfm_crypto_pack_iovec iov = {
   134fc:	4632      	mov	r2, r6
   134fe:	2100      	movs	r1, #0
   13500:	4618      	mov	r0, r3
   13502:	f004 fb31 	bl	17b68 <memset>

    psa_invec in_vec[] = {
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   13506:	e9cd 5404 	strd	r5, r4, [sp, #16]
    psa_invec in_vec[] = {
   1350a:	e9cd 0602 	strd	r0, r6, [sp, #8]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   1350e:	b154      	cbz	r4, 13526 <psa_generate_random+0x36>
        return PSA_SUCCESS;
    }

    return API_DISPATCH(in_vec, out_vec);
   13510:	2301      	movs	r3, #1
   13512:	aa04      	add	r2, sp, #16
   13514:	9200      	str	r2, [sp, #0]
   13516:	2100      	movs	r1, #0
   13518:	4804      	ldr	r0, [pc, #16]	; (1352c <psa_generate_random+0x3c>)
   1351a:	9301      	str	r3, [sp, #4]
   1351c:	aa02      	add	r2, sp, #8
   1351e:	f000 f807 	bl	13530 <psa_call>
}
   13522:	b012      	add	sp, #72	; 0x48
   13524:	bd70      	pop	{r4, r5, r6, pc}
        return PSA_SUCCESS;
   13526:	4620      	mov	r0, r4
   13528:	e7fb      	b.n	13522 <psa_generate_random+0x32>
   1352a:	bf00      	nop
   1352c:	40000100 	.word	0x40000100

00013530 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   13530:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
   13532:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
   13536:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
   1353a:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
   1353c:	d20d      	bcs.n	1355a <psa_call+0x2a>
        (type < INT16_MIN) ||
   1353e:	ea43 0504 	orr.w	r5, r3, r4
   13542:	2dff      	cmp	r5, #255	; 0xff
   13544:	d809      	bhi.n	1355a <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   13546:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
   1354a:	4613      	mov	r3, r2
   1354c:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   13550:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   13552:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
   13554:	4803      	ldr	r0, [pc, #12]	; (13564 <psa_call+0x34>)
   13556:	f7ff bf73 	b.w	13440 <tfm_ns_interface_dispatch>
}
   1355a:	f06f 0080 	mvn.w	r0, #128	; 0x80
   1355e:	bc30      	pop	{r4, r5}
   13560:	4770      	bx	lr
   13562:	bf00      	nop
   13564:	00007c11 	.word	0x00007c11

00013568 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   13568:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1356a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1356c:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   1356e:	fab2 f382 	clz	r3, r2
   13572:	f1c3 031f 	rsb	r3, r3, #31
   13576:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   13578:	fa05 f403 	lsl.w	r4, r5, r3
   1357c:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   13580:	e8d0 6fef 	ldaex	r6, [r0]
   13584:	4296      	cmp	r6, r2
   13586:	d104      	bne.n	13592 <nrfx_flag32_alloc+0x2a>
   13588:	e8c0 4fec 	stlex	ip, r4, [r0]
   1358c:	f1bc 0f00 	cmp.w	ip, #0
   13590:	d1f6      	bne.n	13580 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   13592:	d1eb      	bne.n	1356c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   13594:	4801      	ldr	r0, [pc, #4]	; (1359c <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   13596:	700b      	strb	r3, [r1, #0]
}
   13598:	bd70      	pop	{r4, r5, r6, pc}
   1359a:	bf00      	nop
   1359c:	0bad0000 	.word	0x0bad0000

000135a0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   135a0:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   135a2:	6803      	ldr	r3, [r0, #0]
   135a4:	40cb      	lsrs	r3, r1
   135a6:	07db      	lsls	r3, r3, #31
   135a8:	d410      	bmi.n	135cc <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   135aa:	2301      	movs	r3, #1
   135ac:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   135ae:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   135b0:	ea43 0102 	orr.w	r1, r3, r2
   135b4:	e8d0 4fef 	ldaex	r4, [r0]
   135b8:	4294      	cmp	r4, r2
   135ba:	d104      	bne.n	135c6 <nrfx_flag32_free+0x26>
   135bc:	e8c0 1fec 	stlex	ip, r1, [r0]
   135c0:	f1bc 0f00 	cmp.w	ip, #0
   135c4:	d1f6      	bne.n	135b4 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   135c6:	d1f2      	bne.n	135ae <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   135c8:	4801      	ldr	r0, [pc, #4]	; (135d0 <nrfx_flag32_free+0x30>)
}
   135ca:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   135cc:	4801      	ldr	r0, [pc, #4]	; (135d4 <nrfx_flag32_free+0x34>)
   135ce:	e7fc      	b.n	135ca <nrfx_flag32_free+0x2a>
   135d0:	0bad0000 	.word	0x0bad0000
   135d4:	0bad0004 	.word	0x0bad0004

000135d8 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   135d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch (domain)
   135da:	2803      	cmp	r0, #3
   135dc:	f200 80a0 	bhi.w	13720 <clock_stop+0x148>
   135e0:	e8df f000 	tbb	[pc, r0]
   135e4:	32251802 	.word	0x32251802
    p_reg->INTENCLR = mask;
   135e8:	2202      	movs	r2, #2
   135ea:	4b59      	ldr	r3, [pc, #356]	; (13750 <clock_stop+0x178>)
   135ec:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   135f0:	2200      	movs	r2, #0
   135f2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   135f6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   135fa:	2201      	movs	r2, #1
   135fc:	60da      	str	r2, [r3, #12]
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   135fe:	2400      	movs	r4, #0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   13600:	2301      	movs	r3, #1
   13602:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   13606:	2803      	cmp	r0, #3
   13608:	f200 808a 	bhi.w	13720 <clock_stop+0x148>
   1360c:	e8df f000 	tbb	[pc, r0]
   13610:	94736529 	.word	0x94736529
    p_reg->INTENCLR = mask;
   13614:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13616:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
   13618:	4b4d      	ldr	r3, [pc, #308]	; (13750 <clock_stop+0x178>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1361a:	f10d 0407 	add.w	r4, sp, #7
   1361e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13622:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   13626:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1362a:	605a      	str	r2, [r3, #4]
   1362c:	e7e8      	b.n	13600 <clock_stop+0x28>
    p_reg->INTENCLR = mask;
   1362e:	f44f 7200 	mov.w	r2, #512	; 0x200
   13632:	4b47      	ldr	r3, [pc, #284]	; (13750 <clock_stop+0x178>)
   13634:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13638:	2200      	movs	r2, #0
   1363a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1363e:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13642:	2201      	movs	r2, #1
   13644:	625a      	str	r2, [r3, #36]	; 0x24
   13646:	e7da      	b.n	135fe <clock_stop+0x26>
    p_reg->INTENCLR = mask;
   13648:	f44f 7280 	mov.w	r2, #256	; 0x100
   1364c:	4b40      	ldr	r3, [pc, #256]	; (13750 <clock_stop+0x178>)
   1364e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13652:	2200      	movs	r2, #0
   13654:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   13658:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1365c:	2201      	movs	r2, #1
   1365e:	61da      	str	r2, [r3, #28]
   13660:	e7cd      	b.n	135fe <clock_stop+0x26>
    switch (domain)
   13662:	f242 7510 	movw	r5, #10000	; 0x2710
   13666:	4e3a      	ldr	r6, [pc, #232]	; (13750 <clock_stop+0x178>)
            if (p_clk_src != NULL)
   13668:	b36c      	cbz	r4, 136c6 <clock_stop+0xee>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1366a:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1366e:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   13672:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   13674:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   13678:	03d9      	lsls	r1, r3, #15
   1367a:	d551      	bpl.n	13720 <clock_stop+0x148>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   1367c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   13680:	2801      	cmp	r0, #1
   13682:	d14d      	bne.n	13720 <clock_stop+0x148>
   13684:	f005 ffeb 	bl	1965e <nrfx_busy_wait>
   13688:	3d01      	subs	r5, #1
   1368a:	d1ed      	bne.n	13668 <clock_stop+0x90>
   1368c:	e048      	b.n	13720 <clock_stop+0x148>
   1368e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   13692:	2801      	cmp	r0, #1
   13694:	d144      	bne.n	13720 <clock_stop+0x148>
   13696:	f005 ffe2 	bl	1965e <nrfx_busy_wait>
   1369a:	3d01      	subs	r5, #1
   1369c:	d14f      	bne.n	1373e <clock_stop+0x166>
   1369e:	e03f      	b.n	13720 <clock_stop+0x148>
   136a0:	f89d 0007 	ldrb.w	r0, [sp, #7]
   136a4:	2801      	cmp	r0, #1
   136a6:	d13b      	bne.n	13720 <clock_stop+0x148>
   136a8:	f005 ffd9 	bl	1965e <nrfx_busy_wait>
   136ac:	3d01      	subs	r5, #1
   136ae:	d037      	beq.n	13720 <clock_stop+0x148>
            if (p_clk_src != NULL)
   136b0:	b1bc      	cbz	r4, 136e2 <clock_stop+0x10a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   136b2:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   136b6:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   136ba:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   136bc:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   136c0:	03db      	lsls	r3, r3, #15
   136c2:	d52d      	bpl.n	13720 <clock_stop+0x148>
   136c4:	e7ec      	b.n	136a0 <clock_stop+0xc8>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   136c6:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   136ca:	03da      	lsls	r2, r3, #15
   136cc:	d528      	bpl.n	13720 <clock_stop+0x148>
   136ce:	2001      	movs	r0, #1
   136d0:	f005 ffc5 	bl	1965e <nrfx_busy_wait>
   136d4:	3d01      	subs	r5, #1
   136d6:	d1f6      	bne.n	136c6 <clock_stop+0xee>
   136d8:	e022      	b.n	13720 <clock_stop+0x148>
    switch (domain)
   136da:	f242 7510 	movw	r5, #10000	; 0x2710
   136de:	4e1c      	ldr	r6, [pc, #112]	; (13750 <clock_stop+0x178>)
   136e0:	e7e6      	b.n	136b0 <clock_stop+0xd8>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   136e2:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   136e6:	03d8      	lsls	r0, r3, #15
   136e8:	d51a      	bpl.n	13720 <clock_stop+0x148>
   136ea:	2001      	movs	r0, #1
   136ec:	f005 ffb7 	bl	1965e <nrfx_busy_wait>
   136f0:	3d01      	subs	r5, #1
   136f2:	d1f6      	bne.n	136e2 <clock_stop+0x10a>
   136f4:	e014      	b.n	13720 <clock_stop+0x148>
    switch (domain)
   136f6:	f242 7510 	movw	r5, #10000	; 0x2710
   136fa:	4e15      	ldr	r6, [pc, #84]	; (13750 <clock_stop+0x178>)
            if (p_clk_src != NULL)
   136fc:	b194      	cbz	r4, 13724 <clock_stop+0x14c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   136fe:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   13702:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   13706:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   13708:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1370c:	03d9      	lsls	r1, r3, #15
   1370e:	d507      	bpl.n	13720 <clock_stop+0x148>
   13710:	f89d 0007 	ldrb.w	r0, [sp, #7]
   13714:	2801      	cmp	r0, #1
   13716:	d103      	bne.n	13720 <clock_stop+0x148>
   13718:	f005 ffa1 	bl	1965e <nrfx_busy_wait>
   1371c:	3d01      	subs	r5, #1
   1371e:	d1ed      	bne.n	136fc <clock_stop+0x124>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   13720:	b002      	add	sp, #8
   13722:	bd70      	pop	{r4, r5, r6, pc}
   13724:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   13728:	03da      	lsls	r2, r3, #15
   1372a:	d5f9      	bpl.n	13720 <clock_stop+0x148>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   1372c:	2001      	movs	r0, #1
   1372e:	f005 ff96 	bl	1965e <nrfx_busy_wait>
   13732:	3d01      	subs	r5, #1
   13734:	d1f6      	bne.n	13724 <clock_stop+0x14c>
   13736:	e7f3      	b.n	13720 <clock_stop+0x148>
    switch (domain)
   13738:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   1373c:	4e04      	ldr	r6, [pc, #16]	; (13750 <clock_stop+0x178>)
   1373e:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   13742:	03db      	lsls	r3, r3, #15
   13744:	d5ec      	bpl.n	13720 <clock_stop+0x148>
   13746:	2c00      	cmp	r4, #0
   13748:	d1a1      	bne.n	1368e <clock_stop+0xb6>
   1374a:	2001      	movs	r0, #1
   1374c:	e7a3      	b.n	13696 <clock_stop+0xbe>
   1374e:	bf00      	nop
   13750:	40005000 	.word	0x40005000

00013754 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   13754:	4b04      	ldr	r3, [pc, #16]	; (13768 <nrfx_clock_init+0x14>)
   13756:	791a      	ldrb	r2, [r3, #4]
   13758:	b922      	cbnz	r2, 13764 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1375a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1375c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   1375e:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   13760:	4802      	ldr	r0, [pc, #8]	; (1376c <nrfx_clock_init+0x18>)
   13762:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   13764:	4802      	ldr	r0, [pc, #8]	; (13770 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   13766:	4770      	bx	lr
   13768:	20009ab4 	.word	0x20009ab4
   1376c:	0bad0000 	.word	0x0bad0000
   13770:	0bad000c 	.word	0x0bad000c

00013774 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   13774:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   13776:	2005      	movs	r0, #5
   13778:	f7f7 fe1a 	bl	b3b0 <arch_irq_is_enabled>
   1377c:	b910      	cbnz	r0, 13784 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1377e:	2005      	movs	r0, #5
   13780:	f7f7 fdf4 	bl	b36c <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   13784:	2201      	movs	r2, #1
   13786:	4b04      	ldr	r3, [pc, #16]	; (13798 <nrfx_clock_enable+0x24>)
   13788:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
   1378c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   13790:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   13794:	bd08      	pop	{r3, pc}
   13796:	bf00      	nop
   13798:	40005000 	.word	0x40005000

0001379c <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1379c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1379e:	2803      	cmp	r0, #3
   137a0:	d818      	bhi.n	137d4 <nrfx_clock_start+0x38>
   137a2:	e8df f000 	tbb	[pc, r0]
   137a6:	3002      	.short	0x3002
   137a8:	483b      	.short	0x483b
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   137aa:	4a29      	ldr	r2, [pc, #164]	; (13850 <nrfx_clock_start+0xb4>)
   137ac:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   137b0:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   137b4:	03c9      	lsls	r1, r1, #15
   137b6:	d40e      	bmi.n	137d6 <nrfx_clock_start+0x3a>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   137b8:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                    // LF clock is already running. Inspect its source.
                    // If LF clock source is inappropriate then it will be stopped and modified.
                    // Ignore return value as LF clock will be started again regardless of the result.
                    (void)clock_lfclksrc_tweak(&lfclksrc);
                }
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   137bc:	07db      	lsls	r3, r3, #31
   137be:	d513      	bpl.n	137e8 <nrfx_clock_start+0x4c>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   137c0:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
   137c4:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   137c8:	3b01      	subs	r3, #1
   137ca:	2b01      	cmp	r3, #1
   137cc:	d809      	bhi.n	137e2 <nrfx_clock_start+0x46>
    p_reg->INTENSET = mask;
   137ce:	2302      	movs	r3, #2
   137d0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   137d4:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   137d6:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   137da:	2b02      	cmp	r3, #2
   137dc:	d005      	beq.n	137ea <nrfx_clock_start+0x4e>
   137de:	2b01      	cmp	r3, #1
   137e0:	d002      	beq.n	137e8 <nrfx_clock_start+0x4c>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   137e2:	2000      	movs	r0, #0
   137e4:	f7ff fef8 	bl	135d8 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   137e8:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
   137ea:	4a19      	ldr	r2, [pc, #100]	; (13850 <nrfx_clock_start+0xb4>)
   137ec:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   137f0:	2300      	movs	r3, #0
   137f2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   137f6:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   137fa:	2302      	movs	r3, #2
   137fc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13800:	2301      	movs	r3, #1
   13802:	6093      	str	r3, [r2, #8]
}
   13804:	e7e6      	b.n	137d4 <nrfx_clock_start+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13806:	2200      	movs	r2, #0
   13808:	4b11      	ldr	r3, [pc, #68]	; (13850 <nrfx_clock_start+0xb4>)
   1380a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1380e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   13812:	2201      	movs	r2, #1
   13814:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13818:	601a      	str	r2, [r3, #0]
}
   1381a:	e7db      	b.n	137d4 <nrfx_clock_start+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1381c:	2200      	movs	r2, #0
   1381e:	4b0c      	ldr	r3, [pc, #48]	; (13850 <nrfx_clock_start+0xb4>)
   13820:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   13824:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   13828:	f44f 7200 	mov.w	r2, #512	; 0x200
   1382c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13830:	2201      	movs	r2, #1
   13832:	621a      	str	r2, [r3, #32]
}
   13834:	e7ce      	b.n	137d4 <nrfx_clock_start+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13836:	2200      	movs	r2, #0
   13838:	4b05      	ldr	r3, [pc, #20]	; (13850 <nrfx_clock_start+0xb4>)
   1383a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1383e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   13842:	f44f 7280 	mov.w	r2, #256	; 0x100
   13846:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1384a:	2201      	movs	r2, #1
   1384c:	619a      	str	r2, [r3, #24]
}
   1384e:	e7c1      	b.n	137d4 <nrfx_clock_start+0x38>
   13850:	40005000 	.word	0x40005000

00013854 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   13854:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   13856:	4b28      	ldr	r3, [pc, #160]	; (138f8 <nrfx_power_clock_irq_handler+0xa4>)
   13858:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1385c:	b152      	cbz	r2, 13874 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1385e:	2000      	movs	r0, #0
   13860:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   13864:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   13868:	2201      	movs	r2, #1
   1386a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1386e:	4b23      	ldr	r3, [pc, #140]	; (138fc <nrfx_power_clock_irq_handler+0xa8>)
   13870:	681b      	ldr	r3, [r3, #0]
   13872:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   13874:	4b20      	ldr	r3, [pc, #128]	; (138f8 <nrfx_power_clock_irq_handler+0xa4>)
   13876:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1387a:	b18a      	cbz	r2, 138a0 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1387c:	2200      	movs	r2, #0
   1387e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   13882:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   13886:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1388a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1388e:	f002 0203 	and.w	r2, r2, #3
   13892:	2a01      	cmp	r2, #1
   13894:	f04f 0102 	mov.w	r1, #2
   13898:	d126      	bne.n	138e8 <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1389a:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1389e:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   138a0:	4b15      	ldr	r3, [pc, #84]	; (138f8 <nrfx_power_clock_irq_handler+0xa4>)
   138a2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   138a6:	b162      	cbz	r2, 138c2 <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   138a8:	2200      	movs	r2, #0
   138aa:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   138ae:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   138b2:	f44f 7280 	mov.w	r2, #256	; 0x100
   138b6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   138ba:	4b10      	ldr	r3, [pc, #64]	; (138fc <nrfx_power_clock_irq_handler+0xa8>)
   138bc:	2004      	movs	r0, #4
   138be:	681b      	ldr	r3, [r3, #0]
   138c0:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   138c2:	4b0d      	ldr	r3, [pc, #52]	; (138f8 <nrfx_power_clock_irq_handler+0xa4>)
   138c4:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   138c8:	b1aa      	cbz	r2, 138f6 <nrfx_power_clock_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   138ca:	2200      	movs	r2, #0
   138cc:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   138d0:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   138d4:	f44f 7200 	mov.w	r2, #512	; 0x200
   138d8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   138dc:	4b07      	ldr	r3, [pc, #28]	; (138fc <nrfx_power_clock_irq_handler+0xa8>)
   138de:	2005      	movs	r0, #5
    }
#endif
}
   138e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   138e4:	681b      	ldr	r3, [r3, #0]
   138e6:	4718      	bx	r3
   138e8:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   138ec:	4b03      	ldr	r3, [pc, #12]	; (138fc <nrfx_power_clock_irq_handler+0xa8>)
   138ee:	2001      	movs	r0, #1
   138f0:	681b      	ldr	r3, [r3, #0]
   138f2:	4798      	blx	r3
   138f4:	e7d4      	b.n	138a0 <nrfx_power_clock_irq_handler+0x4c>
}
   138f6:	bd10      	pop	{r4, pc}
   138f8:	40005000 	.word	0x40005000
   138fc:	20009ab4 	.word	0x20009ab4

00013900 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   13900:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   13902:	4801      	ldr	r0, [pc, #4]	; (13908 <nrfx_dppi_channel_alloc+0x8>)
   13904:	f7ff be30 	b.w	13568 <nrfx_flag32_alloc>
   13908:	20008324 	.word	0x20008324

0001390c <nrfx_dppi_channel_free>:
}

nrfx_err_t nrfx_dppi_channel_free(uint8_t channel)
{
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
   1390c:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   1390e:	4a04      	ldr	r2, [pc, #16]	; (13920 <nrfx_dppi_channel_free+0x14>)
   13910:	4083      	lsls	r3, r0
{
   13912:	4601      	mov	r1, r0
   13914:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return nrfx_flag32_free(&m_allocated_channels, channel);
   13918:	4802      	ldr	r0, [pc, #8]	; (13924 <nrfx_dppi_channel_free+0x18>)
   1391a:	f7ff be41 	b.w	135a0 <nrfx_flag32_free>
   1391e:	bf00      	nop
   13920:	40017000 	.word	0x40017000
   13924:	20008324 	.word	0x20008324

00013928 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   13928:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1392a:	f003 021f 	and.w	r2, r3, #31
   1392e:	6002      	str	r2, [r0, #0]
}
   13930:	4a03      	ldr	r2, [pc, #12]	; (13940 <nrf_gpio_pin_port_decode+0x18>)
   13932:	4804      	ldr	r0, [pc, #16]	; (13944 <nrf_gpio_pin_port_decode+0x1c>)
    return pin_number >> 5;
   13934:	095b      	lsrs	r3, r3, #5
}
   13936:	2b01      	cmp	r3, #1
   13938:	bf18      	it	ne
   1393a:	4610      	movne	r0, r2
   1393c:	4770      	bx	lr
   1393e:	bf00      	nop
   13940:	40842500 	.word	0x40842500
   13944:	40842800 	.word	0x40842800

00013948 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   13948:	4b03      	ldr	r3, [pc, #12]	; (13958 <pin_in_use_by_te+0x10>)
   1394a:	3008      	adds	r0, #8
   1394c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   13950:	f3c0 1040 	ubfx	r0, r0, #5, #1
   13954:	4770      	bx	lr
   13956:	bf00      	nop
   13958:	20008328 	.word	0x20008328

0001395c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1395c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1395e:	4c0d      	ldr	r4, [pc, #52]	; (13994 <call_handler+0x38>)
   13960:	f100 0308 	add.w	r3, r0, #8
   13964:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   13968:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1396a:	05da      	lsls	r2, r3, #23
{
   1396c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1396e:	d507      	bpl.n	13980 <call_handler+0x24>
   13970:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   13974:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   13978:	6852      	ldr	r2, [r2, #4]
   1397a:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1397e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   13980:	68a3      	ldr	r3, [r4, #8]
   13982:	b12b      	cbz	r3, 13990 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   13984:	4631      	mov	r1, r6
   13986:	4628      	mov	r0, r5
   13988:	68e2      	ldr	r2, [r4, #12]
    }
}
   1398a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1398e:	4718      	bx	r3
}
   13990:	bd70      	pop	{r4, r5, r6, pc}
   13992:	bf00      	nop
   13994:	20008328 	.word	0x20008328

00013998 <release_handler>:
{
   13998:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1399a:	4a12      	ldr	r2, [pc, #72]	; (139e4 <release_handler+0x4c>)
   1399c:	3008      	adds	r0, #8
   1399e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   139a2:	05d9      	lsls	r1, r3, #23
   139a4:	d51b      	bpl.n	139de <release_handler+0x46>
   139a6:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   139aa:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   139ae:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   139b2:	2000      	movs	r0, #0
   139b4:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   139b8:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   139bc:	f413 7f80 	tst.w	r3, #256	; 0x100
   139c0:	d003      	beq.n	139ca <release_handler+0x32>
   139c2:	f3c3 2343 	ubfx	r3, r3, #9, #4
   139c6:	4299      	cmp	r1, r3
   139c8:	d009      	beq.n	139de <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   139ca:	3001      	adds	r0, #1
   139cc:	2830      	cmp	r0, #48	; 0x30
   139ce:	d1f3      	bne.n	139b8 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   139d0:	2300      	movs	r3, #0
   139d2:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   139d6:	4804      	ldr	r0, [pc, #16]	; (139e8 <release_handler+0x50>)
}
   139d8:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   139da:	f7ff bde1 	b.w	135a0 <nrfx_flag32_free>
}
   139de:	bc10      	pop	{r4}
   139e0:	4770      	bx	lr
   139e2:	bf00      	nop
   139e4:	20008328 	.word	0x20008328
   139e8:	2000839c 	.word	0x2000839c

000139ec <pin_handler_trigger_uninit>:
{
   139ec:	b538      	push	{r3, r4, r5, lr}
   139ee:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   139f0:	f7ff ffaa 	bl	13948 <pin_in_use_by_te>
   139f4:	4c0b      	ldr	r4, [pc, #44]	; (13a24 <pin_handler_trigger_uninit+0x38>)
   139f6:	f102 0508 	add.w	r5, r2, #8
   139fa:	b160      	cbz	r0, 13a16 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   139fc:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   139fe:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   13a02:	0b5b      	lsrs	r3, r3, #13
   13a04:	009b      	lsls	r3, r3, #2
   13a06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13a0a:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   13a0e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
   13a12:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   13a16:	4610      	mov	r0, r2
   13a18:	f7ff ffbe 	bl	13998 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   13a1c:	2300      	movs	r3, #0
   13a1e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   13a22:	bd38      	pop	{r3, r4, r5, pc}
   13a24:	20008328 	.word	0x20008328

00013a28 <nrfx_gpiote_input_configure>:
{
   13a28:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   13a2c:	4604      	mov	r4, r0
   13a2e:	4690      	mov	r8, r2
   13a30:	461d      	mov	r5, r3
    if (p_input_config)
   13a32:	b301      	cbz	r1, 13a76 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   13a34:	4e4f      	ldr	r6, [pc, #316]	; (13b74 <nrfx_gpiote_input_configure+0x14c>)
   13a36:	f100 0708 	add.w	r7, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   13a3a:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   13a3e:	079b      	lsls	r3, r3, #30
   13a40:	d502      	bpl.n	13a48 <nrfx_gpiote_input_configure+0x20>
   13a42:	f7ff ff81 	bl	13948 <pin_in_use_by_te>
   13a46:	bb28      	cbnz	r0, 13a94 <nrfx_gpiote_input_configure+0x6c>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   13a48:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   13a4a:	4620      	mov	r0, r4
   13a4c:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   13a50:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   13a54:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   13a58:	f10d 020f 	add.w	r2, sp, #15
   13a5c:	460b      	mov	r3, r1
   13a5e:	f10d 010e 	add.w	r1, sp, #14
   13a62:	f005 fe00 	bl	19666 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   13a66:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   13a6a:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   13a6e:	f043 0301 	orr.w	r3, r3, #1
   13a72:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_trigger_config)
   13a76:	f1b8 0f00 	cmp.w	r8, #0
   13a7a:	d02d      	beq.n	13ad8 <nrfx_gpiote_input_configure+0xb0>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   13a7c:	4e3d      	ldr	r6, [pc, #244]	; (13b74 <nrfx_gpiote_input_configure+0x14c>)
   13a7e:	f104 0708 	add.w	r7, r4, #8
   13a82:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   13a86:	f898 0000 	ldrb.w	r0, [r8]
        if (pin_is_output(pin))
   13a8a:	078a      	lsls	r2, r1, #30
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   13a8c:	f8d8 3004 	ldr.w	r3, [r8, #4]
        if (pin_is_output(pin))
   13a90:	d502      	bpl.n	13a98 <nrfx_gpiote_input_configure+0x70>
            if (use_evt)
   13a92:	b1cb      	cbz	r3, 13ac8 <nrfx_gpiote_input_configure+0xa0>
            return NRFX_ERROR_INVALID_PARAM;
   13a94:	4838      	ldr	r0, [pc, #224]	; (13b78 <nrfx_gpiote_input_configure+0x150>)
   13a96:	e021      	b.n	13adc <nrfx_gpiote_input_configure+0xb4>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   13a98:	f021 0120 	bic.w	r1, r1, #32
   13a9c:	04c9      	lsls	r1, r1, #19
   13a9e:	0cc9      	lsrs	r1, r1, #19
   13aa0:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
   13aa4:	b183      	cbz	r3, 13ac8 <nrfx_gpiote_input_configure+0xa0>
                if (!edge)
   13aa6:	2803      	cmp	r0, #3
   13aa8:	d8f4      	bhi.n	13a94 <nrfx_gpiote_input_configure+0x6c>
                uint8_t ch = *p_trigger_config->p_in_channel;
   13aaa:	f8d8 3004 	ldr.w	r3, [r8, #4]
   13aae:	f893 c000 	ldrb.w	ip, [r3]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   13ab2:	4662      	mov	r2, ip
   13ab4:	0092      	lsls	r2, r2, #2
   13ab6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   13aba:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   13abe:	b980      	cbnz	r0, 13ae2 <nrfx_gpiote_input_configure+0xba>
    p_reg->CONFIG[idx] = 0;
   13ac0:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   13ac4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   13ac8:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   13acc:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   13ad0:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
   13ad4:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
   13ad8:	bb1d      	cbnz	r5, 13b22 <nrfx_gpiote_input_configure+0xfa>
        err = NRFX_SUCCESS;
   13ada:	4828      	ldr	r0, [pc, #160]	; (13b7c <nrfx_gpiote_input_configure+0x154>)
}
   13adc:	b004      	add	sp, #16
   13ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   13ae2:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   13ae6:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
   13aea:	f023 0303 	bic.w	r3, r3, #3
   13aee:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   13af2:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   13af6:	f041 0120 	orr.w	r1, r1, #32
   13afa:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
   13afe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   13b02:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   13b06:	0223      	lsls	r3, r4, #8
   13b08:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   13b0c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
   13b10:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   13b14:	ea43 030e 	orr.w	r3, r3, lr
   13b18:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   13b1c:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
   13b20:	e7d2      	b.n	13ac8 <nrfx_gpiote_input_configure+0xa0>
    release_handler(pin);
   13b22:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   13b24:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   13b28:	f7ff ff36 	bl	13998 <release_handler>
    if (!handler)
   13b2c:	2e00      	cmp	r6, #0
   13b2e:	d0d4      	beq.n	13ada <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   13b30:	4d10      	ldr	r5, [pc, #64]	; (13b74 <nrfx_gpiote_input_configure+0x14c>)
   13b32:	e9d5 2300 	ldrd	r2, r3, [r5]
   13b36:	4296      	cmp	r6, r2
   13b38:	d101      	bne.n	13b3e <nrfx_gpiote_input_configure+0x116>
   13b3a:	429f      	cmp	r7, r3
   13b3c:	d018      	beq.n	13b70 <nrfx_gpiote_input_configure+0x148>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   13b3e:	4810      	ldr	r0, [pc, #64]	; (13b80 <nrfx_gpiote_input_configure+0x158>)
   13b40:	f10d 010f 	add.w	r1, sp, #15
   13b44:	f7ff fd10 	bl	13568 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   13b48:	4b0c      	ldr	r3, [pc, #48]	; (13b7c <nrfx_gpiote_input_configure+0x154>)
   13b4a:	4298      	cmp	r0, r3
   13b4c:	d1c6      	bne.n	13adc <nrfx_gpiote_input_configure+0xb4>
        handler_id = (int32_t)id;
   13b4e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
   13b52:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   13b56:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   13b58:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   13b5a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   13b5e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   13b62:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   13b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   13b6a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   13b6e:	e7b4      	b.n	13ada <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   13b70:	2200      	movs	r2, #0
   13b72:	e7ee      	b.n	13b52 <nrfx_gpiote_input_configure+0x12a>
   13b74:	20008328 	.word	0x20008328
   13b78:	0bad0004 	.word	0x0bad0004
   13b7c:	0bad0000 	.word	0x0bad0000
   13b80:	2000839c 	.word	0x2000839c

00013b84 <nrfx_gpiote_output_configure>:
{
   13b84:	b5f0      	push	{r4, r5, r6, r7, lr}
   13b86:	4604      	mov	r4, r0
   13b88:	4615      	mov	r5, r2
   13b8a:	b085      	sub	sp, #20
    if (p_config)
   13b8c:	b319      	cbz	r1, 13bd6 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   13b8e:	4e34      	ldr	r6, [pc, #208]	; (13c60 <nrfx_gpiote_output_configure+0xdc>)
   13b90:	f100 0708 	add.w	r7, r0, #8
   13b94:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   13b98:	0793      	lsls	r3, r2, #30
   13b9a:	d403      	bmi.n	13ba4 <nrfx_gpiote_output_configure+0x20>
   13b9c:	f7ff fed4 	bl	13948 <pin_in_use_by_te>
   13ba0:	2800      	cmp	r0, #0
   13ba2:	d15a      	bne.n	13c5a <nrfx_gpiote_output_configure+0xd6>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   13ba4:	f012 0f1c 	tst.w	r2, #28
   13ba8:	d002      	beq.n	13bb0 <nrfx_gpiote_output_configure+0x2c>
   13baa:	784b      	ldrb	r3, [r1, #1]
   13bac:	2b01      	cmp	r3, #1
   13bae:	d054      	beq.n	13c5a <nrfx_gpiote_output_configure+0xd6>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   13bb0:	2301      	movs	r3, #1
   13bb2:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   13bb6:	2300      	movs	r3, #0
   13bb8:	1c4a      	adds	r2, r1, #1
   13bba:	e9cd 1300 	strd	r1, r3, [sp]
   13bbe:	4620      	mov	r0, r4
   13bc0:	1c8b      	adds	r3, r1, #2
   13bc2:	f10d 010f 	add.w	r1, sp, #15
   13bc6:	f005 fd4e 	bl	19666 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   13bca:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   13bce:	f043 0303 	orr.w	r3, r3, #3
   13bd2:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   13bd6:	b915      	cbnz	r5, 13bde <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   13bd8:	4822      	ldr	r0, [pc, #136]	; (13c64 <nrfx_gpiote_output_configure+0xe0>)
}
   13bda:	b005      	add	sp, #20
   13bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   13bde:	4e20      	ldr	r6, [pc, #128]	; (13c60 <nrfx_gpiote_output_configure+0xdc>)
   13be0:	f104 0708 	add.w	r7, r4, #8
   13be4:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   13be8:	0783      	lsls	r3, r0, #30
   13bea:	d536      	bpl.n	13c5a <nrfx_gpiote_output_configure+0xd6>
        uint32_t ch = p_task_config->task_ch;
   13bec:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   13bf0:	2300      	movs	r3, #0
   13bf2:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   13bf4:	f020 0020 	bic.w	r0, r0, #32
   13bf8:	0089      	lsls	r1, r1, #2
   13bfa:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   13bfe:	04c0      	lsls	r0, r0, #19
   13c00:	f501 313c 	add.w	r1, r1, #192512	; 0x2f000
   13c04:	0cc0      	lsrs	r0, r0, #19
   13c06:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   13c0a:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   13c0e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   13c12:	786a      	ldrb	r2, [r5, #1]
   13c14:	2a00      	cmp	r2, #0
   13c16:	d0df      	beq.n	13bd8 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   13c18:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   13c1c:	78ad      	ldrb	r5, [r5, #2]
   13c1e:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   13c22:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   13c26:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   13c2a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   13c2e:	0223      	lsls	r3, r4, #8
   13c30:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   13c34:	0412      	lsls	r2, r2, #16
   13c36:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   13c3a:	ea43 030e 	orr.w	r3, r3, lr
   13c3e:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   13c40:	052a      	lsls	r2, r5, #20
   13c42:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   13c46:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   13c4a:	4313      	orrs	r3, r2
   13c4c:	f040 0020 	orr.w	r0, r0, #32
   13c50:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   13c54:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   13c58:	e7be      	b.n	13bd8 <nrfx_gpiote_output_configure+0x54>
{
   13c5a:	4803      	ldr	r0, [pc, #12]	; (13c68 <nrfx_gpiote_output_configure+0xe4>)
   13c5c:	e7bd      	b.n	13bda <nrfx_gpiote_output_configure+0x56>
   13c5e:	bf00      	nop
   13c60:	20008328 	.word	0x20008328
   13c64:	0bad0000 	.word	0x0bad0000
   13c68:	0bad0004 	.word	0x0bad0004

00013c6c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   13c6c:	4b01      	ldr	r3, [pc, #4]	; (13c74 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   13c6e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   13c72:	4770      	bx	lr
   13c74:	20008328 	.word	0x20008328

00013c78 <nrfx_gpiote_channel_get>:
{
   13c78:	b508      	push	{r3, lr}
   13c7a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   13c7c:	f7ff fe64 	bl	13948 <pin_in_use_by_te>
   13c80:	b138      	cbz	r0, 13c92 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   13c82:	4b05      	ldr	r3, [pc, #20]	; (13c98 <nrfx_gpiote_channel_get+0x20>)
   13c84:	3208      	adds	r2, #8
   13c86:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   13c8a:	4804      	ldr	r0, [pc, #16]	; (13c9c <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   13c8c:	0b5b      	lsrs	r3, r3, #13
   13c8e:	700b      	strb	r3, [r1, #0]
}
   13c90:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   13c92:	4803      	ldr	r0, [pc, #12]	; (13ca0 <nrfx_gpiote_channel_get+0x28>)
   13c94:	e7fc      	b.n	13c90 <nrfx_gpiote_channel_get+0x18>
   13c96:	bf00      	nop
   13c98:	20008328 	.word	0x20008328
   13c9c:	0bad0000 	.word	0x0bad0000
   13ca0:	0bad0004 	.word	0x0bad0004

00013ca4 <nrfx_gpiote_init>:
{
   13ca4:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   13ca6:	4c0f      	ldr	r4, [pc, #60]	; (13ce4 <nrfx_gpiote_init+0x40>)
   13ca8:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   13cac:	b9bd      	cbnz	r5, 13cde <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   13cae:	2260      	movs	r2, #96	; 0x60
   13cb0:	4629      	mov	r1, r5
   13cb2:	f104 0010 	add.w	r0, r4, #16
   13cb6:	f003 ff57 	bl	17b68 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   13cba:	202f      	movs	r0, #47	; 0x2f
   13cbc:	f7f7 fb56 	bl	b36c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   13cc0:	4b09      	ldr	r3, [pc, #36]	; (13ce8 <nrfx_gpiote_init+0x44>)
    return err_code;
   13cc2:	480a      	ldr	r0, [pc, #40]	; (13cec <nrfx_gpiote_init+0x48>)
   13cc4:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   13cc8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   13ccc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   13cd0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   13cd4:	2301      	movs	r3, #1
   13cd6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   13cda:	6763      	str	r3, [r4, #116]	; 0x74
}
   13cdc:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   13cde:	4804      	ldr	r0, [pc, #16]	; (13cf0 <nrfx_gpiote_init+0x4c>)
   13ce0:	e7fc      	b.n	13cdc <nrfx_gpiote_init+0x38>
   13ce2:	bf00      	nop
   13ce4:	20008328 	.word	0x20008328
   13ce8:	4002f000 	.word	0x4002f000
   13cec:	0bad0000 	.word	0x0bad0000
   13cf0:	0bad0005 	.word	0x0bad0005

00013cf4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   13cf4:	4b03      	ldr	r3, [pc, #12]	; (13d04 <nrfx_gpiote_is_init+0x10>)
   13cf6:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   13cfa:	3800      	subs	r0, #0
   13cfc:	bf18      	it	ne
   13cfe:	2001      	movne	r0, #1
   13d00:	4770      	bx	lr
   13d02:	bf00      	nop
   13d04:	20008328 	.word	0x20008328

00013d08 <nrfx_gpiote_channel_free>:
{
   13d08:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   13d0a:	4801      	ldr	r0, [pc, #4]	; (13d10 <nrfx_gpiote_channel_free+0x8>)
   13d0c:	f7ff bc48 	b.w	135a0 <nrfx_flag32_free>
   13d10:	20008398 	.word	0x20008398

00013d14 <nrfx_gpiote_channel_alloc>:
{
   13d14:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   13d16:	4801      	ldr	r0, [pc, #4]	; (13d1c <nrfx_gpiote_channel_alloc+0x8>)
   13d18:	f7ff bc26 	b.w	13568 <nrfx_flag32_alloc>
   13d1c:	20008398 	.word	0x20008398

00013d20 <nrfx_gpiote_trigger_enable>:
{
   13d20:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13d22:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   13d24:	f7ff fe10 	bl	13948 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   13d28:	4b1d      	ldr	r3, [pc, #116]	; (13da0 <nrfx_gpiote_trigger_enable+0x80>)
   13d2a:	f104 0208 	add.w	r2, r4, #8
   13d2e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   13d32:	b1d0      	cbz	r0, 13d6a <nrfx_gpiote_trigger_enable+0x4a>
   13d34:	f013 0502 	ands.w	r5, r3, #2
   13d38:	d117      	bne.n	13d6a <nrfx_gpiote_trigger_enable+0x4a>
    return ((uint32_t)p_reg + event);
   13d3a:	481a      	ldr	r0, [pc, #104]	; (13da4 <nrfx_gpiote_trigger_enable+0x84>)
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   13d3c:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   13d3e:	009a      	lsls	r2, r3, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   13d40:	5085      	str	r5, [r0, r2]
   13d42:	5880      	ldr	r0, [r0, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   13d44:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   13d48:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   13d4c:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   13d50:	f040 0001 	orr.w	r0, r0, #1
   13d54:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   13d58:	b129      	cbz	r1, 13d66 <nrfx_gpiote_trigger_enable+0x46>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   13d5a:	2201      	movs	r2, #1
   13d5c:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   13d60:	4a11      	ldr	r2, [pc, #68]	; (13da8 <nrfx_gpiote_trigger_enable+0x88>)
   13d62:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   13d66:	b003      	add	sp, #12
   13d68:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   13d6a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   13d6e:	2b04      	cmp	r3, #4
   13d70:	d011      	beq.n	13d96 <nrfx_gpiote_trigger_enable+0x76>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   13d72:	2b05      	cmp	r3, #5
   13d74:	d011      	beq.n	13d9a <nrfx_gpiote_trigger_enable+0x7a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   13d76:	a801      	add	r0, sp, #4
   13d78:	9401      	str	r4, [sp, #4]
   13d7a:	f7ff fdd5 	bl	13928 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   13d7e:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   13d80:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   13d82:	40d9      	lsrs	r1, r3
   13d84:	f001 0101 	and.w	r1, r1, #1
   13d88:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   13d8a:	4620      	mov	r0, r4
}
   13d8c:	b003      	add	sp, #12
   13d8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   13d92:	f005 bcb1 	b.w	196f8 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   13d96:	2103      	movs	r1, #3
   13d98:	e7f7      	b.n	13d8a <nrfx_gpiote_trigger_enable+0x6a>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   13d9a:	2102      	movs	r1, #2
   13d9c:	e7f5      	b.n	13d8a <nrfx_gpiote_trigger_enable+0x6a>
   13d9e:	bf00      	nop
   13da0:	20008328 	.word	0x20008328
   13da4:	4002f100 	.word	0x4002f100
   13da8:	4002f000 	.word	0x4002f000

00013dac <nrfx_gpiote_trigger_disable>:
{
   13dac:	b508      	push	{r3, lr}
   13dae:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   13db0:	f7ff fdca 	bl	13948 <pin_in_use_by_te>
   13db4:	b1c0      	cbz	r0, 13de8 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   13db6:	4b0f      	ldr	r3, [pc, #60]	; (13df4 <nrfx_gpiote_trigger_disable+0x48>)
   13db8:	f102 0108 	add.w	r1, r2, #8
   13dbc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   13dc0:	0799      	lsls	r1, r3, #30
   13dc2:	d411      	bmi.n	13de8 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   13dc4:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   13dc6:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   13dc8:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   13dca:	490b      	ldr	r1, [pc, #44]	; (13df8 <nrfx_gpiote_trigger_disable+0x4c>)
   13dcc:	009b      	lsls	r3, r3, #2
   13dce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13dd2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   13dd6:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   13dda:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   13dde:	f022 0203 	bic.w	r2, r2, #3
   13de2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   13de6:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   13de8:	2100      	movs	r1, #0
}
   13dea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   13dee:	4610      	mov	r0, r2
   13df0:	f005 bc82 	b.w	196f8 <nrf_gpio_cfg_sense_set>
   13df4:	20008328 	.word	0x20008328
   13df8:	4002f000 	.word	0x4002f000

00013dfc <nrfx_gpiote_pin_uninit>:
{
   13dfc:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   13dfe:	4b10      	ldr	r3, [pc, #64]	; (13e40 <nrfx_gpiote_pin_uninit+0x44>)
   13e00:	f100 0208 	add.w	r2, r0, #8
   13e04:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   13e08:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   13e0a:	07db      	lsls	r3, r3, #31
   13e0c:	d516      	bpl.n	13e3c <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
   13e0e:	f7ff ffcd 	bl	13dac <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   13e12:	4620      	mov	r0, r4
   13e14:	f7ff fdea 	bl	139ec <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   13e18:	a801      	add	r0, sp, #4
   13e1a:	9401      	str	r4, [sp, #4]
   13e1c:	f7ff fd84 	bl	13928 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   13e20:	9b01      	ldr	r3, [sp, #4]
   13e22:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   13e26:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   13e2a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   13e2e:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   13e32:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
   13e36:	4803      	ldr	r0, [pc, #12]	; (13e44 <nrfx_gpiote_pin_uninit+0x48>)
}
   13e38:	b002      	add	sp, #8
   13e3a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   13e3c:	4802      	ldr	r0, [pc, #8]	; (13e48 <nrfx_gpiote_pin_uninit+0x4c>)
   13e3e:	e7fb      	b.n	13e38 <nrfx_gpiote_pin_uninit+0x3c>
   13e40:	20008328 	.word	0x20008328
   13e44:	0bad0000 	.word	0x0bad0000
   13e48:	0bad0004 	.word	0x0bad0004

00013e4c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   13e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   13e50:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   13e52:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   13e54:	4634      	mov	r4, r6
{
   13e56:	4b63      	ldr	r3, [pc, #396]	; (13fe4 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   13e58:	4863      	ldr	r0, [pc, #396]	; (13fe8 <nrfx_gpiote_irq_handler+0x19c>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   13e5a:	4964      	ldr	r1, [pc, #400]	; (13fec <nrfx_gpiote_irq_handler+0x1a0>)
{
   13e5c:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13e5e:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   13e60:	b135      	cbz	r5, 13e70 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   13e62:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   13e66:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   13e68:	bf1e      	ittt	ne
   13e6a:	601c      	strne	r4, [r3, #0]
   13e6c:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   13e6e:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   13e70:	3304      	adds	r3, #4
   13e72:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   13e74:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   13e78:	d1f1      	bne.n	13e5e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13e7a:	f8df a16c 	ldr.w	sl, [pc, #364]	; 13fe8 <nrfx_gpiote_irq_handler+0x19c>
   13e7e:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   13e82:	2b00      	cmp	r3, #0
   13e84:	f000 8091 	beq.w	13faa <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
   13e88:	f8df 8164 	ldr.w	r8, [pc, #356]	; 13ff0 <nrfx_gpiote_irq_handler+0x1a4>
   13e8c:	f8d8 3020 	ldr.w	r3, [r8, #32]
   13e90:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   13e92:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   13e96:	4b57      	ldr	r3, [pc, #348]	; (13ff4 <nrfx_gpiote_irq_handler+0x1a8>)
   13e98:	6a1a      	ldr	r2, [r3, #32]
   13e9a:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   13e9c:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   13e9e:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
   13ea2:	f10d 0b10 	add.w	fp, sp, #16
   13ea6:	ea4f 1349 	mov.w	r3, r9, lsl #5
   13eaa:	9300      	str	r3, [sp, #0]
   13eac:	e048      	b.n	13f40 <nrfx_gpiote_irq_handler+0xf4>
                uint32_t pin = NRF_CTZ(latch[i]);
   13eae:	fa94 f4a4 	rbit	r4, r4
   13eb2:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   13eb6:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   13eb8:	4a4f      	ldr	r2, [pc, #316]	; (13ff8 <nrfx_gpiote_irq_handler+0x1ac>)
                pin += 32 * i;
   13eba:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   13ebc:	f104 0308 	add.w	r3, r4, #8
   13ec0:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   13ec4:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   13ec6:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
   13ec8:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   13ecc:	fa03 f202 	lsl.w	r2, r3, r2
   13ed0:	f81b 3000 	ldrb.w	r3, [fp, r0]
   13ed4:	9403      	str	r4, [sp, #12]
   13ed6:	ea23 0302 	bic.w	r3, r3, r2
   13eda:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   13ede:	a803      	add	r0, sp, #12
   13ee0:	f7ff fd22 	bl	13928 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   13ee4:	9b03      	ldr	r3, [sp, #12]
   13ee6:	08b9      	lsrs	r1, r7, #2
   13ee8:	3380      	adds	r3, #128	; 0x80
   13eea:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   13eee:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   13ef2:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   13ef4:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   13ef6:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   13efa:	d52b      	bpl.n	13f54 <nrfx_gpiote_irq_handler+0x108>
        call_handler(pin, trigger);
   13efc:	4620      	mov	r0, r4
   13efe:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   13f00:	b2dd      	uxtb	r5, r3
   13f02:	f7ff fd2b 	bl	1395c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   13f06:	a803      	add	r0, sp, #12
   13f08:	9403      	str	r4, [sp, #12]
   13f0a:	f7ff fd0d 	bl	13928 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   13f0e:	9b03      	ldr	r3, [sp, #12]
   13f10:	3380      	adds	r3, #128	; 0x80
   13f12:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   13f16:	f3c3 4301 	ubfx	r3, r3, #16, #2
   13f1a:	429d      	cmp	r5, r3
   13f1c:	d107      	bne.n	13f2e <nrfx_gpiote_irq_handler+0xe2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   13f1e:	2100      	movs	r1, #0
   13f20:	4620      	mov	r0, r4
   13f22:	f005 fbe9 	bl	196f8 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   13f26:	4629      	mov	r1, r5
   13f28:	4620      	mov	r0, r4
   13f2a:	f005 fbe5 	bl	196f8 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   13f2e:	a803      	add	r0, sp, #12
   13f30:	9403      	str	r4, [sp, #12]
   13f32:	f7ff fcf9 	bl	13928 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   13f36:	2201      	movs	r2, #1
   13f38:	9b03      	ldr	r3, [sp, #12]
   13f3a:	fa02 f303 	lsl.w	r3, r2, r3
   13f3e:	6203      	str	r3, [r0, #32]
            while (latch[i])
   13f40:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
   13f44:	2c00      	cmp	r4, #0
   13f46:	d1b2      	bne.n	13eae <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   13f48:	f1b9 0f00 	cmp.w	r9, #0
   13f4c:	d11d      	bne.n	13f8a <nrfx_gpiote_irq_handler+0x13e>
   13f4e:	f04f 0901 	mov.w	r9, #1
   13f52:	e7a8      	b.n	13ea6 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   13f54:	2b02      	cmp	r3, #2
   13f56:	d10c      	bne.n	13f72 <nrfx_gpiote_irq_handler+0x126>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   13f58:	2103      	movs	r1, #3
   13f5a:	4620      	mov	r0, r4
   13f5c:	f005 fbcc 	bl	196f8 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   13f60:	f005 0305 	and.w	r3, r5, #5
   13f64:	2b01      	cmp	r3, #1
   13f66:	d1e2      	bne.n	13f2e <nrfx_gpiote_irq_handler+0xe2>
            call_handler(pin, trigger);
   13f68:	4639      	mov	r1, r7
   13f6a:	4620      	mov	r0, r4
   13f6c:	f7ff fcf6 	bl	1395c <call_handler>
   13f70:	e7dd      	b.n	13f2e <nrfx_gpiote_irq_handler+0xe2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   13f72:	2102      	movs	r1, #2
   13f74:	4620      	mov	r0, r4
   13f76:	9301      	str	r3, [sp, #4]
   13f78:	f005 fbbe 	bl	196f8 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   13f7c:	2d03      	cmp	r5, #3
   13f7e:	d0f3      	beq.n	13f68 <nrfx_gpiote_irq_handler+0x11c>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   13f80:	9b01      	ldr	r3, [sp, #4]
   13f82:	2b03      	cmp	r3, #3
   13f84:	d1d3      	bne.n	13f2e <nrfx_gpiote_irq_handler+0xe2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   13f86:	2d02      	cmp	r5, #2
   13f88:	e7ed      	b.n	13f66 <nrfx_gpiote_irq_handler+0x11a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   13f8a:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
   13f8e:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   13f92:	f8d8 3020 	ldr.w	r3, [r8, #32]
   13f96:	4917      	ldr	r1, [pc, #92]	; (13ff4 <nrfx_gpiote_irq_handler+0x1a8>)
   13f98:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   13f9a:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   13f9e:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
   13fa0:	4313      	orrs	r3, r2
   13fa2:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   13fa4:	620a      	str	r2, [r1, #32]
   13fa6:	f47f af7a 	bne.w	13e9e <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
   13faa:	2401      	movs	r4, #1
    while (mask)
   13fac:	b916      	cbnz	r6, 13fb4 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   13fae:	b007      	add	sp, #28
   13fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   13fb4:	fa96 f3a6 	rbit	r3, r6
   13fb8:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   13fbc:	fa04 f203 	lsl.w	r2, r4, r3
   13fc0:	009b      	lsls	r3, r3, #2
   13fc2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13fc6:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   13fca:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   13fce:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   13fd2:	f3c0 2005 	ubfx	r0, r0, #8, #6
   13fd6:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   13fda:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   13fde:	f7ff fcbd 	bl	1395c <call_handler>
   13fe2:	e7e3      	b.n	13fac <nrfx_gpiote_irq_handler+0x160>
   13fe4:	4002f100 	.word	0x4002f100
   13fe8:	4002f000 	.word	0x4002f000
   13fec:	4002f120 	.word	0x4002f120
   13ff0:	40842500 	.word	0x40842500
   13ff4:	40842800 	.word	0x40842800
   13ff8:	20008328 	.word	0x20008328

00013ffc <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   13ffc:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   13ffe:	4c08      	ldr	r4, [pc, #32]	; (14020 <nrfx_ipc_init+0x24>)
{
   14000:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   14002:	7923      	ldrb	r3, [r4, #4]
{
   14004:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   14006:	b943      	cbnz	r3, 1401a <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   14008:	202a      	movs	r0, #42	; 0x2a
   1400a:	f7f7 f9af 	bl	b36c <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1400e:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   14010:	4804      	ldr	r0, [pc, #16]	; (14024 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   14012:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   14014:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   14016:	60a5      	str	r5, [r4, #8]
}
   14018:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   1401a:	4803      	ldr	r0, [pc, #12]	; (14028 <nrfx_ipc_init+0x2c>)
   1401c:	e7fc      	b.n	14018 <nrfx_ipc_init+0x1c>
   1401e:	bf00      	nop
   14020:	20009abc 	.word	0x20009abc
   14024:	0bad0000 	.word	0x0bad0000
   14028:	0bad000c 	.word	0x0bad000c

0001402c <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1402c:	2300      	movs	r3, #0
{
   1402e:	b530      	push	{r4, r5, lr}
    p_reg->SEND_CNF[index] = channels_mask;
   14030:	4a0d      	ldr	r2, [pc, #52]	; (14068 <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   14032:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   14036:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1403a:	3301      	adds	r3, #1
   1403c:	2b10      	cmp	r3, #16
   1403e:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   14042:	d1f6      	bne.n	14032 <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   14044:	2300      	movs	r3, #0
    p_reg->RECEIVE_CNF[index] = channels_mask;
   14046:	4a08      	ldr	r2, [pc, #32]	; (14068 <nrfx_ipc_config_load+0x3c>)
   14048:	f100 013c 	add.w	r1, r0, #60	; 0x3c
   1404c:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   14050:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   14054:	3301      	adds	r3, #1
   14056:	2b10      	cmp	r3, #16
   14058:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   1405c:	d1f6      	bne.n	1404c <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   1405e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
   14062:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   14066:	bd30      	pop	{r4, r5, pc}
   14068:	4002a000 	.word	0x4002a000

0001406c <nrfx_ipc_receive_event_enable>:
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   1406c:	2301      	movs	r3, #1
   1406e:	4a02      	ldr	r2, [pc, #8]	; (14078 <nrfx_ipc_receive_event_enable+0xc>)
   14070:	4083      	lsls	r3, r0
   14072:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   14076:	4770      	bx	lr
   14078:	4002a000 	.word	0x4002a000

0001407c <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   1407c:	2301      	movs	r3, #1
    p_reg->INTENCLR = mask;
   1407e:	4a02      	ldr	r2, [pc, #8]	; (14088 <nrfx_ipc_receive_event_disable+0xc>)
   14080:	4083      	lsls	r3, r0
   14082:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   14086:	4770      	bx	lr
   14088:	4002a000 	.word	0x4002a000

0001408c <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   1408c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   1408e:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14090:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   14092:	4b0b      	ldr	r3, [pc, #44]	; (140c0 <nrfx_ipc_irq_handler+0x34>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   14094:	4d0b      	ldr	r5, [pc, #44]	; (140c4 <nrfx_ipc_irq_handler+0x38>)
   14096:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   1409a:	b904      	cbnz	r4, 1409e <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   1409c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   1409e:	fa94 f0a4 	rbit	r0, r4
   140a2:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   140a6:	fa06 f300 	lsl.w	r3, r6, r0
   140aa:	ea24 0403 	bic.w	r4, r4, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   140ae:	4b06      	ldr	r3, [pc, #24]	; (140c8 <nrfx_ipc_irq_handler+0x3c>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   140b0:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   140b2:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   140b4:	682b      	ldr	r3, [r5, #0]
   140b6:	2b00      	cmp	r3, #0
   140b8:	d0ef      	beq.n	1409a <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   140ba:	68a9      	ldr	r1, [r5, #8]
   140bc:	4798      	blx	r3
   140be:	e7ec      	b.n	1409a <nrfx_ipc_irq_handler+0xe>
   140c0:	4002a000 	.word	0x4002a000
   140c4:	20009abc 	.word	0x20009abc
   140c8:	4002a100 	.word	0x4002a100

000140cc <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   140cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   140d0:	460e      	mov	r6, r1
   140d2:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   140d4:	4d0c      	ldr	r5, [pc, #48]	; (14108 <metal_generic_dev_open+0x3c>)
   140d6:	f855 4f18 	ldr.w	r4, [r5, #24]!
   140da:	42ac      	cmp	r4, r5
   140dc:	d103      	bne.n	140e6 <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   140de:	f06f 0012 	mvn.w	r0, #18
   140e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   140e6:	4631      	mov	r1, r6
   140e8:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   140ec:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   140f0:	f003 fd00 	bl	17af4 <strcmp>
   140f4:	b930      	cbnz	r0, 14104 <metal_generic_dev_open+0x38>
			*device = dev;
   140f6:	f8c7 8000 	str.w	r8, [r7]
			return metal_generic_dev_sys_open(dev);
   140fa:	4640      	mov	r0, r8
}
   140fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   14100:	f005 bc08 	b.w	19914 <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   14104:	6824      	ldr	r4, [r4, #0]
   14106:	e7e8      	b.n	140da <metal_generic_dev_open+0xe>
   14108:	20009ac8 	.word	0x20009ac8

0001410c <metal_bus_unregister>:
{
   1410c:	b510      	push	{r4, lr}
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   1410e:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   14112:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   14114:	6a41      	ldr	r1, [r0, #36]	; 0x24
	metal_list_del(&bus->node);
   14116:	f100 0324 	add.w	r3, r0, #36	; 0x24
   1411a:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   1411c:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	if (bus->ops.bus_close)
   14120:	6843      	ldr	r3, [r0, #4]
{
   14122:	4604      	mov	r4, r0
	if (bus->ops.bus_close)
   14124:	b103      	cbz	r3, 14128 <metal_bus_unregister+0x1c>
		bus->ops.bus_close(bus);
   14126:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
   14128:	4b05      	ldr	r3, [pc, #20]	; (14140 <metal_bus_unregister+0x34>)
   1412a:	781a      	ldrb	r2, [r3, #0]
   1412c:	2a06      	cmp	r2, #6
   1412e:	d905      	bls.n	1413c <metal_bus_unregister+0x30>
   14130:	685b      	ldr	r3, [r3, #4]
   14132:	b11b      	cbz	r3, 1413c <metal_bus_unregister+0x30>
   14134:	2007      	movs	r0, #7
   14136:	6822      	ldr	r2, [r4, #0]
   14138:	4902      	ldr	r1, [pc, #8]	; (14144 <metal_bus_unregister+0x38>)
   1413a:	4798      	blx	r3
}
   1413c:	2000      	movs	r0, #0
   1413e:	bd10      	pop	{r4, pc}
   14140:	20009ac8 	.word	0x20009ac8
   14144:	0001dc0f 	.word	0x0001dc0f

00014148 <metal_bus_find>:
{
   14148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1414c:	4607      	mov	r7, r0
   1414e:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   14150:	4e0b      	ldr	r6, [pc, #44]	; (14180 <metal_bus_find+0x38>)
   14152:	f856 4f08 	ldr.w	r4, [r6, #8]!
   14156:	42b4      	cmp	r4, r6
   14158:	d102      	bne.n	14160 <metal_bus_find+0x18>
	return -ENOENT;
   1415a:	f06f 0001 	mvn.w	r0, #1
   1415e:	e00a      	b.n	14176 <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   14160:	4639      	mov	r1, r7
   14162:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   14166:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   1416a:	f003 fcc3 	bl	17af4 <strcmp>
   1416e:	b920      	cbnz	r0, 1417a <metal_bus_find+0x32>
   14170:	b11d      	cbz	r5, 1417a <metal_bus_find+0x32>
			*result = bus;
   14172:	f8c5 8000 	str.w	r8, [r5]
}
   14176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   1417a:	6824      	ldr	r4, [r4, #0]
   1417c:	e7eb      	b.n	14156 <metal_bus_find+0xe>
   1417e:	bf00      	nop
   14180:	20009ac8 	.word	0x20009ac8

00014184 <metal_bus_register>:
{
   14184:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   14186:	4604      	mov	r4, r0
   14188:	b910      	cbnz	r0, 14190 <metal_bus_register+0xc>
		return -EINVAL;
   1418a:	f06f 0015 	mvn.w	r0, #21
}
   1418e:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   14190:	6800      	ldr	r0, [r0, #0]
   14192:	2800      	cmp	r0, #0
   14194:	d0f9      	beq.n	1418a <metal_bus_register+0x6>
   14196:	f003 fc9d 	bl	17ad4 <strlen>
   1419a:	2800      	cmp	r0, #0
   1419c:	d0f5      	beq.n	1418a <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   1419e:	2100      	movs	r1, #0
   141a0:	6820      	ldr	r0, [r4, #0]
   141a2:	f7ff ffd1 	bl	14148 <metal_bus_find>
   141a6:	b1c8      	cbz	r0, 141dc <metal_bus_register+0x58>
	metal_list_init(&bus->devices);
   141a8:	f104 031c 	add.w	r3, r4, #28
	list->next = list;
   141ac:	e9c4 3307 	strd	r3, r3, [r4, #28]
	new_node->prev = node->prev;
   141b0:	4b0c      	ldr	r3, [pc, #48]	; (141e4 <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   141b2:	f104 0224 	add.w	r2, r4, #36	; 0x24
   141b6:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   141b8:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   141bc:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   141be:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   141c0:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   141c2:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   141c4:	781a      	ldrb	r2, [r3, #0]
   141c6:	2a06      	cmp	r2, #6
   141c8:	d901      	bls.n	141ce <metal_bus_register+0x4a>
   141ca:	685b      	ldr	r3, [r3, #4]
   141cc:	b90b      	cbnz	r3, 141d2 <metal_bus_register+0x4e>
	return 0;
   141ce:	2000      	movs	r0, #0
   141d0:	e7dd      	b.n	1418e <metal_bus_register+0xa>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   141d2:	2007      	movs	r0, #7
   141d4:	6822      	ldr	r2, [r4, #0]
   141d6:	4904      	ldr	r1, [pc, #16]	; (141e8 <metal_bus_register+0x64>)
   141d8:	4798      	blx	r3
   141da:	e7f8      	b.n	141ce <metal_bus_register+0x4a>
		return -EEXIST;
   141dc:	f06f 0010 	mvn.w	r0, #16
   141e0:	e7d5      	b.n	1418e <metal_bus_register+0xa>
   141e2:	bf00      	nop
   141e4:	20009ac8 	.word	0x20009ac8
   141e8:	0001dc11 	.word	0x0001dc11

000141ec <metal_register_generic_device>:
{
   141ec:	b510      	push	{r4, lr}
   141ee:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   141f0:	6800      	ldr	r0, [r0, #0]
   141f2:	b910      	cbnz	r0, 141fa <metal_register_generic_device+0xe>
		return -EINVAL;
   141f4:	f06f 0015 	mvn.w	r0, #21
}
   141f8:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   141fa:	f003 fc6b 	bl	17ad4 <strlen>
   141fe:	2800      	cmp	r0, #0
   14200:	d0f8      	beq.n	141f4 <metal_register_generic_device+0x8>
   14202:	68a3      	ldr	r3, [r4, #8]
   14204:	2b01      	cmp	r3, #1
   14206:	d8f5      	bhi.n	141f4 <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   14208:	4b06      	ldr	r3, [pc, #24]	; (14224 <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   1420a:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   1420e:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   14210:	4b05      	ldr	r3, [pc, #20]	; (14228 <metal_register_generic_device+0x3c>)
   14212:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   14214:	f103 0018 	add.w	r0, r3, #24
   14218:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   1421a:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   1421c:	61d9      	str	r1, [r3, #28]
	return 0;
   1421e:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   14220:	6011      	str	r1, [r2, #0]
}
   14222:	e7e9      	b.n	141f8 <metal_register_generic_device+0xc>
   14224:	200083a4 	.word	0x200083a4
   14228:	20009ac8 	.word	0x20009ac8

0001422c <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
   1422c:	b538      	push	{r3, r4, r5, lr}
   1422e:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   14230:	4c0d      	ldr	r4, [pc, #52]	; (14268 <metal_init+0x3c>)
   14232:	2220      	movs	r2, #32
   14234:	4620      	mov	r0, r4
   14236:	2100      	movs	r1, #0
   14238:	f003 fc96 	bl	17b68 <memset>

	_metal.common.log_handler   = params->log_handler;
   1423c:	682b      	ldr	r3, [r5, #0]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   1423e:	4628      	mov	r0, r5
	_metal.common.log_handler   = params->log_handler;
   14240:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
   14242:	4623      	mov	r3, r4
   14244:	792a      	ldrb	r2, [r5, #4]
   14246:	f803 2b08 	strb.w	r2, [r3], #8
	list->next = list;
   1424a:	e9c4 3302 	strd	r3, r3, [r4, #8]
	list->prev = list;
   1424e:	f104 0310 	add.w	r3, r4, #16
	list->next = list;
   14252:	e9c4 3304 	strd	r3, r3, [r4, #16]
	list->prev = list;
   14256:	f104 0318 	add.w	r3, r4, #24
	list->next = list;
   1425a:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (error)
		return error;

	return error;
}
   1425e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	error = metal_sys_init(params);
   14262:	f000 b80f 	b.w	14284 <metal_sys_init>
   14266:	bf00      	nop
   14268:	20009ac8 	.word	0x20009ac8

0001426c <metal_finish>:

void metal_finish(void)
{
   1426c:	b508      	push	{r3, lr}
	metal_sys_finish();
   1426e:	f000 f811 	bl	14294 <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
}
   14272:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	memset(&_metal, 0, sizeof(_metal));
   14276:	2220      	movs	r2, #32
   14278:	2100      	movs	r1, #0
   1427a:	4801      	ldr	r0, [pc, #4]	; (14280 <metal_finish+0x14>)
   1427c:	f003 bc74 	b.w	17b68 <memset>
   14280:	20009ac8 	.word	0x20009ac8

00014284 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   14284:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   14286:	4802      	ldr	r0, [pc, #8]	; (14290 <metal_sys_init+0xc>)
   14288:	f7ff ff7c 	bl	14184 <metal_bus_register>
	return 0;
}
   1428c:	2000      	movs	r0, #0
   1428e:	bd08      	pop	{r3, pc}
   14290:	200083a4 	.word	0x200083a4

00014294 <metal_sys_finish>:

void metal_sys_finish(void)
{
	metal_bus_unregister(&metal_generic_bus);
   14294:	4801      	ldr	r0, [pc, #4]	; (1429c <metal_sys_finish+0x8>)
   14296:	f7ff bf39 	b.w	1410c <metal_bus_unregister>
   1429a:	bf00      	nop
   1429c:	200083a4 	.word	0x200083a4

000142a0 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   142a0:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   142a2:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   142a4:	2b06      	cmp	r3, #6
{
   142a6:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   142a8:	bf88      	it	hi
   142aa:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   142ac:	4b09      	ldr	r3, [pc, #36]	; (142d4 <metal_zephyr_log_handler+0x34>)
{
   142ae:	ac05      	add	r4, sp, #20
   142b0:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   142b4:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   142b8:	4807      	ldr	r0, [pc, #28]	; (142d8 <metal_zephyr_log_handler+0x38>)
   142ba:	f001 ff43 	bl	16144 <printk>

	va_start(args, format);
	vprintk(format, args);
   142be:	4621      	mov	r1, r4
   142c0:	4628      	mov	r0, r5
	va_start(args, format);
   142c2:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   142c4:	f001 ff3c 	bl	16140 <vprintk>
	va_end(args);
}
   142c8:	b002      	add	sp, #8
   142ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   142ce:	b003      	add	sp, #12
   142d0:	4770      	bx	lr
   142d2:	bf00      	nop
   142d4:	0001bac4 	.word	0x0001bac4
   142d8:	0001ca61 	.word	0x0001ca61

000142dc <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   142dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142e0:	469a      	mov	sl, r3
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   142e2:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   142e4:	4606      	mov	r6, r0
	if (nvqs > num_vrings)
   142e6:	4293      	cmp	r3, r2
{
   142e8:	4617      	mov	r7, r2
   142ea:	b087      	sub	sp, #28
	if (nvqs > num_vrings)
   142ec:	d341      	bcc.n	14372 <virtio_create_virtqueues+0x96>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   142ee:	2500      	movs	r5, #0
		vring_info = &vdev->vrings_info[i];
   142f0:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   142f4:	42bd      	cmp	r5, r7
   142f6:	d103      	bne.n	14300 <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   142f8:	2000      	movs	r0, #0
}
   142fa:	b007      	add	sp, #28
   142fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   14300:	fb0b f805 	mul.w	r8, fp, r5
   14304:	f8d6 902c 	ldr.w	r9, [r6, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   14308:	69b2      	ldr	r2, [r6, #24]
		vring_info = &vdev->vrings_info[i];
   1430a:	eb09 0408 	add.w	r4, r9, r8
		vring_alloc = &vring_info->info;
   1430e:	1d23      	adds	r3, r4, #4
   14310:	9305      	str	r3, [sp, #20]
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   14312:	b9ca      	cbnz	r2, 14348 <virtio_create_virtqueues+0x6c>
			struct metal_io_region *io = vring_info->io;
   14314:	6960      	ldr	r0, [r4, #20]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   14316:	6861      	ldr	r1, [r4, #4]
   14318:	6803      	ldr	r3, [r0, #0]
			metal_io_block_set(io, offset, 0,
   1431a:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   1431e:	1ac9      	subs	r1, r1, r3
						      vring_alloc->align));
   14320:	68a3      	ldr	r3, [r4, #8]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   14322:	f10c 0e03 	add.w	lr, ip, #3
	size = (size + align - 1) & ~(align - 1);
   14326:	1e5c      	subs	r4, r3, #1
   14328:	eb04 140c 	add.w	r4, r4, ip, lsl #4
   1432c:	425b      	negs	r3, r3
   1432e:	eb04 044e 	add.w	r4, r4, lr, lsl #1
   14332:	401c      	ands	r4, r3
	size += sizeof(struct vring_used) +
   14334:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
			metal_io_block_set(io, offset, 0,
   14338:	6884      	ldr	r4, [r0, #8]
   1433a:	3306      	adds	r3, #6
   1433c:	42a1      	cmp	r1, r4
   1433e:	bf28      	it	cs
   14340:	f04f 31ff 	movcs.w	r1, #4294967295
   14344:	f005 fab2 	bl	198ac <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   14348:	f859 3008 	ldr.w	r3, [r9, r8]
   1434c:	4630      	mov	r0, r6
   1434e:	9302      	str	r3, [sp, #8]
				       callbacks[i], vdev->func->notify,
   14350:	6a33      	ldr	r3, [r6, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   14352:	b2a9      	uxth	r1, r5
   14354:	6a1b      	ldr	r3, [r3, #32]
   14356:	9301      	str	r3, [sp, #4]
   14358:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1435a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   1435e:	9300      	str	r3, [sp, #0]
   14360:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
   14364:	9b05      	ldr	r3, [sp, #20]
   14366:	f005 fb1a 	bl	1999e <virtqueue_create>
		if (ret)
   1436a:	2800      	cmp	r0, #0
   1436c:	d1c5      	bne.n	142fa <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   1436e:	3501      	adds	r5, #1
   14370:	e7c0      	b.n	142f4 <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   14372:	4801      	ldr	r0, [pc, #4]	; (14378 <virtio_create_virtqueues+0x9c>)
   14374:	e7c1      	b.n	142fa <virtio_create_virtqueues+0x1e>
   14376:	bf00      	nop
   14378:	fffff440 	.word	0xfffff440

0001437c <virtqueue_free>:
 *
 * @param vq        - Pointer to VirtIO queue control block
 *
 */
void virtqueue_free(struct virtqueue *vq)
{
   1437c:	b510      	push	{r4, lr}
	if (vq) {
   1437e:	4604      	mov	r4, r0
   14380:	b190      	cbz	r0, 143a8 <virtqueue_free+0x2c>
		if (vq->vq_free_cnt != vq->vq_nentries) {
   14382:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   14384:	8943      	ldrh	r3, [r0, #10]
   14386:	429a      	cmp	r2, r3
   14388:	d009      	beq.n	1439e <virtqueue_free+0x22>
			metal_log(METAL_LOG_WARNING,
   1438a:	4b08      	ldr	r3, [pc, #32]	; (143ac <virtqueue_free+0x30>)
   1438c:	781a      	ldrb	r2, [r3, #0]
   1438e:	2a03      	cmp	r2, #3
   14390:	d905      	bls.n	1439e <virtqueue_free+0x22>
   14392:	685b      	ldr	r3, [r3, #4]
   14394:	b11b      	cbz	r3, 1439e <virtqueue_free+0x22>
   14396:	6842      	ldr	r2, [r0, #4]
   14398:	4905      	ldr	r1, [pc, #20]	; (143b0 <virtqueue_free+0x34>)
   1439a:	2004      	movs	r0, #4
   1439c:	4798      	blx	r3
	return k_malloc(size);
}

static inline void metal_free_memory(void *ptr)
{
	k_free(ptr);
   1439e:	4620      	mov	r0, r4
				  vq->vq_name);
		}

		metal_free_memory(vq);
	}
}
   143a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   143a4:	f006 bcd1 	b.w	1ad4a <k_free>
   143a8:	bd10      	pop	{r4, pc}
   143aa:	bf00      	nop
   143ac:	20009ac8 	.word	0x20009ac8
   143b0:	0001dcbc 	.word	0x0001dcbc

000143b4 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   143b4:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx >= vq->vq_nentries) {
   143b6:	8944      	ldrh	r4, [r0, #10]
   143b8:	428c      	cmp	r4, r1
   143ba:	d912      	bls.n	143e2 <virtqueue_add_consumed_buffer+0x2e>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by driver, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   143bc:	6a03      	ldr	r3, [r0, #32]
   143be:	3c01      	subs	r4, #1
   143c0:	885d      	ldrh	r5, [r3, #2]
   143c2:	402c      	ands	r4, r5
   143c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
   143c8:	6059      	str	r1, [r3, #4]
	used_desc->len = len;
   143ca:	609a      	str	r2, [r3, #8]

	/* We still need to flush it because this is read by driver */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   143cc:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   143d0:	6a02      	ldr	r2, [r0, #32]
   143d2:	8853      	ldrh	r3, [r2, #2]
   143d4:	3301      	adds	r3, #1
   143d6:	8053      	strh	r3, [r2, #2]

	/* Used.idx is read by driver, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   143d8:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   143da:	3301      	adds	r3, #1
   143dc:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   143de:	2000      	movs	r0, #0
}
   143e0:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   143e2:	4801      	ldr	r0, [pc, #4]	; (143e8 <virtqueue_add_consumed_buffer+0x34>)
   143e4:	e7fc      	b.n	143e0 <virtqueue_add_consumed_buffer+0x2c>
   143e6:	bf00      	nop
   143e8:	fffff441 	.word	0xfffff441

000143ec <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
   143ec:	b470      	push	{r4, r5, r6}
   143ee:	9e03      	ldr	r6, [sp, #12]
   143f0:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   143f2:	b158      	cbz	r0, 1440c <rpmsg_send_offchannel_raw+0x20>
   143f4:	6a00      	ldr	r0, [r0, #32]
   143f6:	b148      	cbz	r0, 1440c <rpmsg_send_offchannel_raw+0x20>
   143f8:	b143      	cbz	r3, 1440c <rpmsg_send_offchannel_raw+0x20>
   143fa:	3401      	adds	r4, #1
   143fc:	d006      	beq.n	1440c <rpmsg_send_offchannel_raw+0x20>
   143fe:	2e00      	cmp	r6, #0
   14400:	db04      	blt.n	1440c <rpmsg_send_offchannel_raw+0x20>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   14402:	6f84      	ldr	r4, [r0, #120]	; 0x78
   14404:	b114      	cbz	r4, 1440c <rpmsg_send_offchannel_raw+0x20>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   14406:	46a4      	mov	ip, r4
						     len, wait);

	return RPMSG_ERR_PARAM;
}
   14408:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   1440a:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   1440c:	4801      	ldr	r0, [pc, #4]	; (14414 <rpmsg_send_offchannel_raw+0x28>)
}
   1440e:	bc70      	pop	{r4, r5, r6}
   14410:	4770      	bx	lr
   14412:	bf00      	nop
   14414:	fffff82d 	.word	0xfffff82d

00014418 <rpmsg_send_offchannel_nocopy>:
	return NULL;
}

int rpmsg_send_offchannel_nocopy(struct rpmsg_endpoint *ept, uint32_t src,
				 uint32_t dst, const void *data, int len)
{
   14418:	b470      	push	{r4, r5, r6}
   1441a:	9e03      	ldr	r6, [sp, #12]
   1441c:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   1441e:	b160      	cbz	r0, 1443a <rpmsg_send_offchannel_nocopy+0x22>
   14420:	6a00      	ldr	r0, [r0, #32]
   14422:	b150      	cbz	r0, 1443a <rpmsg_send_offchannel_nocopy+0x22>
   14424:	b14b      	cbz	r3, 1443a <rpmsg_send_offchannel_nocopy+0x22>
   14426:	3401      	adds	r4, #1
   14428:	d007      	beq.n	1443a <rpmsg_send_offchannel_nocopy+0x22>
   1442a:	2e00      	cmp	r6, #0
   1442c:	db05      	blt.n	1443a <rpmsg_send_offchannel_nocopy+0x22>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_nocopy)
   1442e:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
   14432:	b114      	cbz	r4, 1443a <rpmsg_send_offchannel_nocopy+0x22>
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   14434:	46a4      	mov	ip, r4
							data, len);

	return RPMSG_ERR_PARAM;
}
   14436:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   14438:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   1443a:	4801      	ldr	r0, [pc, #4]	; (14440 <rpmsg_send_offchannel_nocopy+0x28>)
}
   1443c:	bc70      	pop	{r4, r5, r6}
   1443e:	4770      	bx	lr
   14440:	fffff82d 	.word	0xfffff82d

00014444 <rpmsg_register_endpoint>:
			     struct rpmsg_endpoint *ept,
			     const char *name,
			     uint32_t src, uint32_t dest,
			     rpmsg_ept_cb cb,
			     rpmsg_ns_unbind_cb ns_unbind_cb)
{
   14444:	b570      	push	{r4, r5, r6, lr}
   14446:	460c      	mov	r4, r1
   14448:	4611      	mov	r1, r2
   1444a:	4605      	mov	r5, r0
   1444c:	461e      	mov	r6, r3
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   1444e:	4b0c      	ldr	r3, [pc, #48]	; (14480 <rpmsg_register_endpoint+0x3c>)
   14450:	2220      	movs	r2, #32
   14452:	2900      	cmp	r1, #0
   14454:	bf08      	it	eq
   14456:	4619      	moveq	r1, r3
   14458:	4620      	mov	r0, r4
   1445a:	f003 fb27 	bl	17aac <strncpy>
	ept->addr = src;
	ept->dest_addr = dest;
   1445e:	9b04      	ldr	r3, [sp, #16]
	ept->addr = src;
   14460:	6266      	str	r6, [r4, #36]	; 0x24
	ept->dest_addr = dest;
   14462:	62a3      	str	r3, [r4, #40]	; 0x28
	ept->cb = cb;
   14464:	9b05      	ldr	r3, [sp, #20]
	ept->ns_unbind_cb = ns_unbind_cb;
	ept->rdev = rdev;
   14466:	6225      	str	r5, [r4, #32]
	ept->cb = cb;
   14468:	62e3      	str	r3, [r4, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   1446a:	9b06      	ldr	r3, [sp, #24]
   1446c:	6323      	str	r3, [r4, #48]	; 0x30
	new_node->prev = node->prev;
   1446e:	686a      	ldr	r2, [r5, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   14470:	f104 0334 	add.w	r3, r4, #52	; 0x34
	new_node->next = node;
   14474:	e9c4 520d 	strd	r5, r2, [r4, #52]	; 0x34
	new_node->next->prev = new_node;
   14478:	606b      	str	r3, [r5, #4]
	new_node->prev->next = new_node;
   1447a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1447c:	6013      	str	r3, [r2, #0]
}
   1447e:	bd70      	pop	{r4, r5, r6, pc}
   14480:	0001dcdd 	.word	0x0001dcdd

00014484 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   14484:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   14488:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   1448c:	460d      	mov	r5, r1
   1448e:	4692      	mov	sl, r2
   14490:	461f      	mov	r7, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept || !rdev || !cb)
   14492:	4606      	mov	r6, r0
   14494:	2800      	cmp	r0, #0
   14496:	d06c      	beq.n	14572 <rpmsg_create_ept+0xee>
   14498:	2900      	cmp	r1, #0
   1449a:	d06a      	beq.n	14572 <rpmsg_create_ept+0xee>
   1449c:	f1b9 0f00 	cmp.w	r9, #0
   144a0:	d067      	beq.n	14572 <rpmsg_create_ept+0xee>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   144a2:	f101 0858 	add.w	r8, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   144a6:	4640      	mov	r0, r8
   144a8:	f005 fbe2 	bl	19c70 <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   144ac:	1c78      	adds	r0, r7, #1
   144ae:	d140      	bne.n	14532 <rpmsg_create_ept+0xae>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   144b0:	6cac      	ldr	r4, [r5, #72]	; 0x48
   144b2:	f105 0348 	add.w	r3, r5, #72	; 0x48
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   144b6:	f014 0401 	ands.w	r4, r4, #1
   144ba:	d00b      	beq.n	144d4 <rpmsg_create_ept+0x50>
	for (bit = start;
   144bc:	2400      	movs	r4, #0
	     bit++)
   144be:	3401      	adds	r4, #1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   144c0:	2c80      	cmp	r4, #128	; 0x80
   144c2:	d054      	beq.n	1456e <rpmsg_create_ept+0xea>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   144c4:	0962      	lsrs	r2, r4, #5
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   144c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   144ca:	f004 011f 	and.w	r1, r4, #31
   144ce:	40ca      	lsrs	r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   144d0:	07d1      	lsls	r1, r2, #31
   144d2:	d4f4      	bmi.n	144be <rpmsg_create_ept+0x3a>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   144d4:	2101      	movs	r1, #1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   144d6:	0960      	lsrs	r0, r4, #5
   144d8:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   144dc:	f504 6780 	add.w	r7, r4, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   144e0:	f004 041f 	and.w	r4, r4, #31
   144e4:	40a1      	lsls	r1, r4
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   144e6:	430a      	orrs	r2, r1
   144e8:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		 * 1.Trust the author of predefined service
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_register_endpoint(rdev, ept, name, addr, dest, cb, unbind_cb);
   144ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   144ee:	4652      	mov	r2, sl
   144f0:	e9cd 9301 	strd	r9, r3, [sp, #4]
   144f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   144f6:	4631      	mov	r1, r6
   144f8:	9300      	str	r3, [sp, #0]
   144fa:	4628      	mov	r0, r5
   144fc:	463b      	mov	r3, r7
   144fe:	f7ff ffa1 	bl	14444 <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   14502:	4640      	mov	r0, r8
   14504:	f000 fd50 	bl	14fa8 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   14508:	7834      	ldrb	r4, [r6, #0]
   1450a:	b174      	cbz	r4, 1452a <rpmsg_create_ept+0xa6>
   1450c:	f895 4090 	ldrb.w	r4, [r5, #144]	; 0x90
   14510:	b15c      	cbz	r4, 1452a <rpmsg_create_ept+0xa6>
   14512:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   14514:	3301      	adds	r3, #1
   14516:	d12e      	bne.n	14576 <rpmsg_create_ept+0xf2>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   14518:	2100      	movs	r1, #0
   1451a:	4630      	mov	r0, r6
   1451c:	f005 fbd7 	bl	19cce <rpmsg_send_ns_message>

	if (status)
   14520:	4604      	mov	r4, r0
   14522:	b110      	cbz	r0, 1452a <rpmsg_create_ept+0xa6>
		rpmsg_unregister_endpoint(ept);
   14524:	4630      	mov	r0, r6
   14526:	f005 fba9 	bl	19c7c <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   1452a:	4620      	mov	r0, r4
   1452c:	b004      	add	sp, #16
   1452e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   14532:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   14536:	d3d9      	bcc.n	144ec <rpmsg_create_ept+0x68>
	addr -= RPMSG_RESERVED_ADDRESSES;
   14538:	f5a7 6380 	sub.w	r3, r7, #1024	; 0x400
	if (addr >= 0 && addr < size)
   1453c:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   1453e:	f105 0148 	add.w	r1, r5, #72	; 0x48
	if (addr >= 0 && addr < size)
   14542:	d80f      	bhi.n	14564 <rpmsg_create_ept+0xe0>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   14544:	0958      	lsrs	r0, r3, #5
   14546:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   1454a:	f003 031f 	and.w	r3, r3, #31
   1454e:	fa24 f203 	lsr.w	r2, r4, r3
		if (!status) {
   14552:	07d2      	lsls	r2, r2, #31
   14554:	d40b      	bmi.n	1456e <rpmsg_create_ept+0xea>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   14556:	2201      	movs	r2, #1
   14558:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   1455c:	4323      	orrs	r3, r4
   1455e:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
   14562:	e7c3      	b.n	144ec <rpmsg_create_ept+0x68>
   14564:	4c05      	ldr	r4, [pc, #20]	; (1457c <rpmsg_create_ept+0xf8>)
   14566:	4640      	mov	r0, r8
   14568:	f000 fd1e 	bl	14fa8 <z_impl_k_sem_give>
}
   1456c:	e7dd      	b.n	1452a <rpmsg_create_ept+0xa6>
			status = RPMSG_ERR_ADDR;
   1456e:	4c04      	ldr	r4, [pc, #16]	; (14580 <rpmsg_create_ept+0xfc>)
   14570:	e7f9      	b.n	14566 <rpmsg_create_ept+0xe2>
		return RPMSG_ERR_PARAM;
   14572:	4c02      	ldr	r4, [pc, #8]	; (1457c <rpmsg_create_ept+0xf8>)
   14574:	e7d9      	b.n	1452a <rpmsg_create_ept+0xa6>
   14576:	2400      	movs	r4, #0
   14578:	e7d7      	b.n	1452a <rpmsg_create_ept+0xa6>
   1457a:	bf00      	nop
   1457c:	fffff82d 	.word	0xfffff82d
   14580:	fffff829 	.word	0xfffff829

00014584 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int len, int wait)
{
   14584:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14588:	b085      	sub	sp, #20
   1458a:	460f      	mov	r7, r1
   1458c:	4690      	mov	r8, r2

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	/* Get the payload buffer. */
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   1458e:	a903      	add	r1, sp, #12
   14590:	9a0d      	ldr	r2, [sp, #52]	; 0x34
{
   14592:	4605      	mov	r5, r0
   14594:	4699      	mov	r9, r3
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   14596:	f005 fdaa 	bl	1a0ee <rpmsg_virtio_get_tx_payload_buffer>
	if (!buffer)
   1459a:	4604      	mov	r4, r0
   1459c:	b1e0      	cbz	r0, 145d8 <rpmsg_virtio_send_offchannel_raw+0x54>
		return RPMSG_ERR_NO_BUFF;

	/* Copy data to rpmsg buffer. */
	if (len > (int)buff_len)
   1459e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   145a0:	9b03      	ldr	r3, [sp, #12]
		len = buff_len;
	io = rvdev->shbuf_io;
   145a2:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
   145a6:	429e      	cmp	r6, r3
   145a8:	bfa8      	it	ge
   145aa:	461e      	movge	r6, r3
   145ac:	6801      	ldr	r1, [r0, #0]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   145ae:	f8d0 c008 	ldr.w	ip, [r0, #8]
   145b2:	1a61      	subs	r1, r4, r1
   145b4:	4633      	mov	r3, r6
   145b6:	464a      	mov	r2, r9
   145b8:	4561      	cmp	r1, ip
   145ba:	bf28      	it	cs
   145bc:	f04f 31ff 	movcs.w	r1, #4294967295
   145c0:	f005 f93a 	bl	19838 <metal_io_block_write>
				      data, len);
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");

	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
   145c4:	4623      	mov	r3, r4
   145c6:	4642      	mov	r2, r8
   145c8:	4639      	mov	r1, r7
   145ca:	4628      	mov	r0, r5
   145cc:	9600      	str	r6, [sp, #0]
   145ce:	f005 fd2e 	bl	1a02e <rpmsg_virtio_send_offchannel_nocopy>
}
   145d2:	b005      	add	sp, #20
   145d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return RPMSG_ERR_NO_BUFF;
   145d8:	4800      	ldr	r0, [pc, #0]	; (145dc <rpmsg_virtio_send_offchannel_raw+0x58>)
   145da:	e7fa      	b.n	145d2 <rpmsg_virtio_send_offchannel_raw+0x4e>
   145dc:	fffff82e 	.word	0xfffff82e

000145e0 <rpmsg_virtio_get_buffer_size>:

	return RPMSG_SUCCESS;
}

int rpmsg_virtio_get_buffer_size(struct rpmsg_device *rdev)
{
   145e0:	b538      	push	{r3, r4, r5, lr}
	int size;
	struct rpmsg_virtio_device *rvdev;

	if (!rdev)
   145e2:	4604      	mov	r4, r0
   145e4:	b1e0      	cbz	r0, 14620 <rpmsg_virtio_get_buffer_size+0x40>
		return RPMSG_ERR_PARAM;
	metal_mutex_acquire(&rdev->lock);
   145e6:	f100 0558 	add.w	r5, r0, #88	; 0x58
   145ea:	4628      	mov	r0, r5
   145ec:	f005 fbff 	bl	19dee <__metal_mutex_acquire>
}

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->role;
   145f0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   145f4:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   145f6:	b953      	cbnz	r3, 1460e <rpmsg_virtio_get_buffer_size+0x2e>
		length = rvdev->config.h2r_buf_size - sizeof(struct rpmsg_hdr);
   145f8:	f8d4 4094 	ldr.w	r4, [r4, #148]	; 0x94
   145fc:	3c10      	subs	r4, #16
	if (length <= 0) {
   145fe:	2c00      	cmp	r4, #0
   14600:	dc00      	bgt.n	14604 <rpmsg_virtio_get_buffer_size+0x24>
		length = RPMSG_ERR_NO_BUFF;
   14602:	4c08      	ldr	r4, [pc, #32]	; (14624 <rpmsg_virtio_get_buffer_size+0x44>)
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   14604:	4628      	mov	r0, r5
   14606:	f005 fbf0 	bl	19dea <k_sem_give>
	rvdev = (struct rpmsg_virtio_device *)rdev;
	size = _rpmsg_virtio_get_buffer_size(rvdev);
	metal_mutex_release(&rdev->lock);
	return size;
}
   1460a:	4620      	mov	r0, r4
   1460c:	bd38      	pop	{r3, r4, r5, pc}
	if (role == RPMSG_REMOTE) {
   1460e:	2b01      	cmp	r3, #1
   14610:	d1f7      	bne.n	14602 <rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   14612:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   14616:	f005 fb13 	bl	19c40 <virtqueue_get_desc_size>
   1461a:	f1a0 0410 	sub.w	r4, r0, #16
   1461e:	e7ee      	b.n	145fe <rpmsg_virtio_get_buffer_size+0x1e>
		return RPMSG_ERR_PARAM;
   14620:	4c01      	ldr	r4, [pc, #4]	; (14628 <rpmsg_virtio_get_buffer_size+0x48>)
   14622:	e7f2      	b.n	1460a <rpmsg_virtio_get_buffer_size+0x2a>
   14624:	fffff82e 	.word	0xfffff82e
   14628:	fffff82d 	.word	0xfffff82d

0001462c <rpmsg_init_vdev_with_config>:
				struct virtio_device *vdev,
				rpmsg_ns_bind_cb ns_bind_cb,
				struct metal_io_region *shm_io,
				struct rpmsg_virtio_shm_pool *shpool,
				const struct rpmsg_virtio_config *config)
{
   1462c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14630:	b08a      	sub	sp, #40	; 0x28
   14632:	460d      	mov	r5, r1
   14634:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	; 0x48
   14638:	4690      	mov	r8, r2
   1463a:	461e      	mov	r6, r3
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	if (!rvdev || !vdev || !shm_io)
   1463c:	4604      	mov	r4, r0
   1463e:	b920      	cbnz	r0, 1464a <rpmsg_init_vdev_with_config+0x1e>
		return RPMSG_ERR_PARAM;
   14640:	4f81      	ldr	r7, [pc, #516]	; (14848 <rpmsg_init_vdev_with_config+0x21c>)
	if (role == RPMSG_HOST)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_DEVICE_ONLY*/

	return status;
}
   14642:	4638      	mov	r0, r7
   14644:	b00a      	add	sp, #40	; 0x28
   14646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!rvdev || !vdev || !shm_io)
   1464a:	2900      	cmp	r1, #0
   1464c:	d0f8      	beq.n	14640 <rpmsg_init_vdev_with_config+0x14>
   1464e:	2b00      	cmp	r3, #0
   14650:	d0f6      	beq.n	14640 <rpmsg_init_vdev_with_config+0x14>
	memset(rdev, 0, sizeof(*rdev));
   14652:	2294      	movs	r2, #148	; 0x94
   14654:	2100      	movs	r1, #0
   14656:	f003 fa87 	bl	17b68 <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1465a:	2201      	movs	r2, #1
   1465c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   14660:	4611      	mov	r1, r2
   14662:	f005 ff58 	bl	1a516 <z_impl_k_sem_init>
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   14666:	4b79      	ldr	r3, [pc, #484]	; (1484c <rpmsg_init_vdev_with_config+0x220>)
	rvdev->vdev = vdev;
   14668:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
	rdev->ns_bind_cb = ns_bind_cb;
   1466c:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   14670:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   14672:	67a3      	str	r3, [r4, #120]	; 0x78
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
   14674:	4b76      	ldr	r3, [pc, #472]	; (14850 <rpmsg_init_vdev_with_config+0x224>)
   14676:	67e3      	str	r3, [r4, #124]	; 0x7c
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
   14678:	4b76      	ldr	r3, [pc, #472]	; (14854 <rpmsg_init_vdev_with_config+0x228>)
   1467a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
   1467e:	4b76      	ldr	r3, [pc, #472]	; (14858 <rpmsg_init_vdev_with_config+0x22c>)
   14680:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
   14684:	4b75      	ldr	r3, [pc, #468]	; (1485c <rpmsg_init_vdev_with_config+0x230>)
   14686:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	rdev->ops.release_tx_buffer = rpmsg_virtio_release_tx_buffer;
   1468a:	4b75      	ldr	r3, [pc, #468]	; (14860 <rpmsg_init_vdev_with_config+0x234>)
   1468c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
   14690:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   14694:	f8d3 8018 	ldr.w	r8, [r3, #24]
	if (role == RPMSG_HOST) {
   14698:	f1b8 0f00 	cmp.w	r8, #0
   1469c:	d16e      	bne.n	1477c <rpmsg_init_vdev_with_config+0x150>
		if (config == NULL) {
   1469e:	2f00      	cmp	r7, #0
   146a0:	d0ce      	beq.n	14640 <rpmsg_init_vdev_with_config+0x14>
		rvdev->config = *config;
   146a2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   146a6:	f104 0394 	add.w	r3, r4, #148	; 0x94
   146aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	vdev->features = rpmsg_virtio_get_features(rvdev);
   146ae:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   146b2:	6a03      	ldr	r3, [r0, #32]
   146b4:	689b      	ldr	r3, [r3, #8]
   146b6:	4798      	blx	r3
   146b8:	2300      	movs	r3, #0
   146ba:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   146bc:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   146c0:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   146c2:	f884 0090 	strb.w	r0, [r4, #144]	; 0x90
	if (role == RPMSG_HOST) {
   146c6:	f1b8 0f00 	cmp.w	r8, #0
   146ca:	d16d      	bne.n	147a8 <rpmsg_init_vdev_with_config+0x17c>
		rvdev->shpool = config->split_shpool ? shpool + 1 : shpool;
   146cc:	7a3b      	ldrb	r3, [r7, #8]
   146ce:	2b00      	cmp	r3, #0
   146d0:	d068      	beq.n	147a4 <rpmsg_init_vdev_with_config+0x178>
   146d2:	f109 030c 	add.w	r3, r9, #12
   146d6:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		if (!shpool)
   146da:	f1b9 0f00 	cmp.w	r9, #0
   146de:	d0af      	beq.n	14640 <rpmsg_init_vdev_with_config+0x14>
		if (!shpool->size || !rvdev->shpool->size)
   146e0:	f8d9 2008 	ldr.w	r2, [r9, #8]
   146e4:	2a00      	cmp	r2, #0
   146e6:	f000 80ad 	beq.w	14844 <rpmsg_init_vdev_with_config+0x218>
   146ea:	689b      	ldr	r3, [r3, #8]
   146ec:	2b00      	cmp	r3, #0
   146ee:	f000 80a9 	beq.w	14844 <rpmsg_init_vdev_with_config+0x218>
		vq_names[0] = "rx_vq";
   146f2:	4b5c      	ldr	r3, [pc, #368]	; (14864 <rpmsg_init_vdev_with_config+0x238>)
   146f4:	9304      	str	r3, [sp, #16]
		vq_names[1] = "tx_vq";
   146f6:	4b5c      	ldr	r3, [pc, #368]	; (14868 <rpmsg_init_vdev_with_config+0x23c>)
   146f8:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_rx_callback;
   146fa:	4b5c      	ldr	r3, [pc, #368]	; (1486c <rpmsg_init_vdev_with_config+0x240>)
   146fc:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_tx_callback;
   146fe:	4b5c      	ldr	r3, [pc, #368]	; (14870 <rpmsg_init_vdev_with_config+0x244>)
   14700:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   14702:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   14704:	681b      	ldr	r3, [r3, #0]
   14706:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[1].vq;
   1470a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1470c:	699b      	ldr	r3, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   1470e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	metal_list_init(&rvdev->reclaimer);
   14712:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
	list->next = list;
   14716:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   1471a:	ab06      	add	r3, sp, #24
	rvdev->shbuf_io = shm_io;
   1471c:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
   14720:	9300      	str	r3, [sp, #0]
   14722:	2202      	movs	r2, #2
   14724:	2100      	movs	r1, #0
   14726:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   1472a:	ab04      	add	r3, sp, #16
   1472c:	f7ff fdd6 	bl	142dc <virtio_create_virtqueues>
	if (status != RPMSG_SUCCESS)
   14730:	4607      	mov	r7, r0
   14732:	2800      	cmp	r0, #0
   14734:	d185      	bne.n	14642 <rpmsg_init_vdev_with_config+0x16>
	virtqueue_disable_cb(rvdev->svq);
   14736:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1473a:	f005 fa1c 	bl	19b76 <virtqueue_disable_cb>
		vq = vdev->vrings_info[i].vq;
   1473e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   14740:	681b      	ldr	r3, [r3, #0]
		vq->shm_io = shm_io;
   14742:	629e      	str	r6, [r3, #40]	; 0x28
		vq = vdev->vrings_info[i].vq;
   14744:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   14746:	699b      	ldr	r3, [r3, #24]
		vq->shm_io = shm_io;
   14748:	629e      	str	r6, [r3, #40]	; 0x28
	if (role == RPMSG_HOST) {
   1474a:	f1b8 0f00 	cmp.w	r8, #0
   1474e:	d161      	bne.n	14814 <rpmsg_init_vdev_with_config+0x1e8>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   14750:	46c2      	mov	sl, r8
		vqbuf.len = rvdev->config.r2h_buf_size;
   14752:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   14756:	9309      	str	r3, [sp, #36]	; 0x24
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   14758:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   1475c:	895b      	ldrh	r3, [r3, #10]
   1475e:	4553      	cmp	r3, sl
   14760:	d834      	bhi.n	147cc <rpmsg_init_vdev_with_config+0x1a0>
	if (rdev->support_ns) {
   14762:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   14766:	e9c4 4400 	strd	r4, r4, [r4]
   1476a:	2b00      	cmp	r3, #0
   1476c:	d159      	bne.n	14822 <rpmsg_init_vdev_with_config+0x1f6>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   1476e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   14772:	2104      	movs	r1, #4
   14774:	6a03      	ldr	r3, [r0, #32]
   14776:	685b      	ldr	r3, [r3, #4]
   14778:	4798      	blx	r3
}
   1477a:	e762      	b.n	14642 <rpmsg_init_vdev_with_config+0x16>
	if (role == RPMSG_REMOTE) {
   1477c:	f1b8 0f01 	cmp.w	r8, #1
   14780:	d195      	bne.n	146ae <rpmsg_init_vdev_with_config+0x82>
		status = rpmsg_virtio_get_status(rvdev);
   14782:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	return rvdev->vdev->func->get_status(rvdev->vdev);
   14786:	6a03      	ldr	r3, [r0, #32]
   14788:	681b      	ldr	r3, [r3, #0]
   1478a:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   1478c:	0642      	lsls	r2, r0, #25
   1478e:	d506      	bpl.n	1479e <rpmsg_init_vdev_with_config+0x172>
			rpmsg_virtio_set_status(rvdev, 0);
   14790:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   14794:	2100      	movs	r1, #0
   14796:	6a03      	ldr	r3, [r0, #32]
   14798:	685b      	ldr	r3, [r3, #4]
   1479a:	4798      	blx	r3
}
   1479c:	e7f1      	b.n	14782 <rpmsg_init_vdev_with_config+0x156>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   1479e:	0743      	lsls	r3, r0, #29
   147a0:	d5ef      	bpl.n	14782 <rpmsg_init_vdev_with_config+0x156>
   147a2:	e784      	b.n	146ae <rpmsg_init_vdev_with_config+0x82>
   147a4:	464b      	mov	r3, r9
   147a6:	e796      	b.n	146d6 <rpmsg_init_vdev_with_config+0xaa>
	if (role == RPMSG_REMOTE) {
   147a8:	f1b8 0f01 	cmp.w	r8, #1
   147ac:	d1b1      	bne.n	14712 <rpmsg_init_vdev_with_config+0xe6>
		vq_names[0] = "tx_vq";
   147ae:	4b2e      	ldr	r3, [pc, #184]	; (14868 <rpmsg_init_vdev_with_config+0x23c>)
   147b0:	9304      	str	r3, [sp, #16]
		vq_names[1] = "rx_vq";
   147b2:	4b2c      	ldr	r3, [pc, #176]	; (14864 <rpmsg_init_vdev_with_config+0x238>)
   147b4:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_tx_callback;
   147b6:	4b2e      	ldr	r3, [pc, #184]	; (14870 <rpmsg_init_vdev_with_config+0x244>)
   147b8:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_rx_callback;
   147ba:	4b2c      	ldr	r3, [pc, #176]	; (1486c <rpmsg_init_vdev_with_config+0x240>)
   147bc:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   147be:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   147c0:	699b      	ldr	r3, [r3, #24]
   147c2:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[0].vq;
   147c6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   147c8:	681b      	ldr	r3, [r3, #0]
   147ca:	e7a0      	b.n	1470e <rpmsg_init_vdev_with_config+0xe2>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   147cc:	4648      	mov	r0, r9
   147ce:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   147d2:	f005 fc7d 	bl	1a0d0 <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   147d6:	4605      	mov	r5, r0
   147d8:	b1c8      	cbz	r0, 1480e <rpmsg_init_vdev_with_config+0x1e2>
   147da:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   147dc:	9008      	str	r0, [sp, #32]
   147de:	1a41      	subs	r1, r0, r1

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   147e0:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   147e2:	2200      	movs	r2, #0
   147e4:	4281      	cmp	r1, r0
   147e6:	bf28      	it	cs
   147e8:	f04f 31ff 	movcs.w	r1, #4294967295
   147ec:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   147f0:	4630      	mov	r0, r6
   147f2:	f005 f85b 	bl	198ac <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   147f6:	9500      	str	r5, [sp, #0]
   147f8:	2301      	movs	r3, #1
   147fa:	2200      	movs	r2, #0
   147fc:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   14800:	a908      	add	r1, sp, #32
   14802:	f005 f8f9 	bl	199f8 <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   14806:	b918      	cbnz	r0, 14810 <rpmsg_init_vdev_with_config+0x1e4>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   14808:	f10a 0a01 	add.w	sl, sl, #1
   1480c:	e7a4      	b.n	14758 <rpmsg_init_vdev_with_config+0x12c>
				return RPMSG_ERR_NO_BUFF;
   1480e:	4819      	ldr	r0, [pc, #100]	; (14874 <rpmsg_init_vdev_with_config+0x248>)
   14810:	4607      	mov	r7, r0
   14812:	e716      	b.n	14642 <rpmsg_init_vdev_with_config+0x16>
	if (rdev->support_ns) {
   14814:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   14818:	e9c4 4400 	strd	r4, r4, [r4]
   1481c:	2b00      	cmp	r3, #0
   1481e:	f43f af10 	beq.w	14642 <rpmsg_init_vdev_with_config+0x16>
		rpmsg_register_endpoint(rdev, &rdev->ns_ept, "NS",
   14822:	2300      	movs	r3, #0
   14824:	9302      	str	r3, [sp, #8]
   14826:	4b14      	ldr	r3, [pc, #80]	; (14878 <rpmsg_init_vdev_with_config+0x24c>)
   14828:	4620      	mov	r0, r4
   1482a:	9301      	str	r3, [sp, #4]
   1482c:	2335      	movs	r3, #53	; 0x35
   1482e:	4a13      	ldr	r2, [pc, #76]	; (1487c <rpmsg_init_vdev_with_config+0x250>)
   14830:	9300      	str	r3, [sp, #0]
   14832:	f104 0108 	add.w	r1, r4, #8
   14836:	f7ff fe05 	bl	14444 <rpmsg_register_endpoint>
	if (role == RPMSG_HOST)
   1483a:	f1b8 0f00 	cmp.w	r8, #0
   1483e:	f47f af00 	bne.w	14642 <rpmsg_init_vdev_with_config+0x16>
   14842:	e794      	b.n	1476e <rpmsg_init_vdev_with_config+0x142>
			return RPMSG_ERR_NO_BUFF;
   14844:	4f0b      	ldr	r7, [pc, #44]	; (14874 <rpmsg_init_vdev_with_config+0x248>)
   14846:	e6fc      	b.n	14642 <rpmsg_init_vdev_with_config+0x16>
   14848:	fffff82d 	.word	0xfffff82d
   1484c:	00014585 	.word	0x00014585
   14850:	00019ddb 	.word	0x00019ddb
   14854:	00019fef 	.word	0x00019fef
   14858:	0001a0ef 	.word	0x0001a0ef
   1485c:	0001a02f 	.word	0x0001a02f
   14860:	00019dfb 	.word	0x00019dfb
   14864:	0001dcde 	.word	0x0001dcde
   14868:	0001dce4 	.word	0x0001dce4
   1486c:	00019f3b 	.word	0x00019f3b
   14870:	00019de9 	.word	0x00019de9
   14874:	fffff82e 	.word	0xfffff82e
   14878:	00019e3d 	.word	0x00019e3d
   1487c:	0001dcea 	.word	0x0001dcea

00014880 <rpmsg_init_vdev>:
{
   14880:	b5f0      	push	{r4, r5, r6, r7, lr}
   14882:	4605      	mov	r5, r0
   14884:	460e      	mov	r6, r1
   14886:	4617      	mov	r7, r2
   14888:	b087      	sub	sp, #28
			   shpool, RPMSG_VIRTIO_DEFAULT_CONFIG);
   1488a:	4a07      	ldr	r2, [pc, #28]	; (148a8 <rpmsg_init_vdev+0x28>)
   1488c:	ac03      	add	r4, sp, #12
   1488e:	ca07      	ldmia	r2, {r0, r1, r2}
   14890:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return rpmsg_init_vdev_with_config(rvdev, vdev, ns_bind_cb, shm_io,
   14894:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14896:	4631      	mov	r1, r6
   14898:	9200      	str	r2, [sp, #0]
   1489a:	4628      	mov	r0, r5
   1489c:	463a      	mov	r2, r7
   1489e:	9401      	str	r4, [sp, #4]
   148a0:	f7ff fec4 	bl	1462c <rpmsg_init_vdev_with_config>
}
   148a4:	b007      	add	sp, #28
   148a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   148a8:	0001b32c 	.word	0x0001b32c

000148ac <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   148ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   148b0:	b086      	sub	sp, #24
   148b2:	4605      	mov	r5, r0
   148b4:	460e      	mov	r6, r1
   148b6:	af00      	add	r7, sp, #0
	__asm__ volatile(
   148b8:	f04f 0320 	mov.w	r3, #32
   148bc:	f3ef 8811 	mrs	r8, BASEPRI
   148c0:	f383 8812 	msr	BASEPRI_MAX, r3
   148c4:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   148c8:	f001 f8a6 	bl	15a18 <z_impl_z_current_get>
   148cc:	2d04      	cmp	r5, #4
   148ce:	bf98      	it	ls
   148d0:	4b2c      	ldrls	r3, [pc, #176]	; (14984 <z_fatal_error+0xd8>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   148d2:	46e9      	mov	r9, sp
   148d4:	b08a      	sub	sp, #40	; 0x28
   148d6:	4604      	mov	r4, r0
   148d8:	466a      	mov	r2, sp
   148da:	bf94      	ite	ls
   148dc:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
   148e0:	4b29      	ldrhi	r3, [pc, #164]	; (14988 <z_fatal_error+0xdc>)
   148e2:	61d3      	str	r3, [r2, #28]
   148e4:	f240 3301 	movw	r3, #769	; 0x301
   148e8:	f04f 0a00 	mov.w	sl, #0
   148ec:	8493      	strh	r3, [r2, #36]	; 0x24
   148ee:	4927      	ldr	r1, [pc, #156]	; (1498c <z_fatal_error+0xe0>)
   148f0:	4b27      	ldr	r3, [pc, #156]	; (14990 <z_fatal_error+0xe4>)
   148f2:	e9c2 1505 	strd	r1, r5, [r2, #20]
   148f6:	f8c2 a020 	str.w	sl, [r2, #32]
   148fa:	f842 3f10 	str.w	r3, [r2, #16]!
   148fe:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   14902:	4653      	mov	r3, sl
   14904:	4823      	ldr	r0, [pc, #140]	; (14994 <z_fatal_error+0xe8>)
   14906:	f7f5 ff0d 	bl	a724 <z_impl_z_log_msg_static_create>
   1490a:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1490c:	b17e      	cbz	r6, 1492e <z_fatal_error+0x82>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1490e:	69f3      	ldr	r3, [r6, #28]
   14910:	f3c3 0308 	ubfx	r3, r3, #0, #9
   14914:	b15b      	cbz	r3, 1492e <z_fatal_error+0x82>
		LOG_ERR("Fault during interrupt handling\n");
   14916:	4b20      	ldr	r3, [pc, #128]	; (14998 <z_fatal_error+0xec>)
   14918:	617b      	str	r3, [r7, #20]
   1491a:	2302      	movs	r3, #2
   1491c:	613b      	str	r3, [r7, #16]
   1491e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14922:	4653      	mov	r3, sl
   14924:	481b      	ldr	r0, [pc, #108]	; (14994 <z_fatal_error+0xe8>)
   14926:	f107 0210 	add.w	r2, r7, #16
   1492a:	f7f5 fefb 	bl	a724 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1492e:	b12c      	cbz	r4, 1493c <z_fatal_error+0x90>
   14930:	4620      	mov	r0, r4
   14932:	f005 fd3f 	bl	1a3b4 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   14936:	b108      	cbz	r0, 1493c <z_fatal_error+0x90>
   14938:	7803      	ldrb	r3, [r0, #0]
   1493a:	b903      	cbnz	r3, 1493e <z_fatal_error+0x92>
		thread_name = "unknown";
   1493c:	4817      	ldr	r0, [pc, #92]	; (1499c <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1493e:	46e9      	mov	r9, sp
   14940:	b08a      	sub	sp, #40	; 0x28
   14942:	466a      	mov	r2, sp
   14944:	4b16      	ldr	r3, [pc, #88]	; (149a0 <z_fatal_error+0xf4>)
   14946:	61d0      	str	r0, [r2, #28]
   14948:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1494c:	f240 3301 	movw	r3, #769	; 0x301
   14950:	8413      	strh	r3, [r2, #32]
   14952:	4b14      	ldr	r3, [pc, #80]	; (149a4 <z_fatal_error+0xf8>)
   14954:	f842 3f10 	str.w	r3, [r2, #16]!
   14958:	2300      	movs	r3, #0
   1495a:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1495e:	480d      	ldr	r0, [pc, #52]	; (14994 <z_fatal_error+0xe8>)
   14960:	f7f5 fee0 	bl	a724 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   14964:	4631      	mov	r1, r6
   14966:	46cd      	mov	sp, r9
   14968:	4628      	mov	r0, r5
   1496a:	f7fe fd53 	bl	13414 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1496e:	f388 8811 	msr	BASEPRI, r8
   14972:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   14976:	4620      	mov	r0, r4
   14978:	f7f7 f9a8 	bl	bccc <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1497c:	3718      	adds	r7, #24
   1497e:	46bd      	mov	sp, r7
   14980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14984:	0001bae8 	.word	0x0001bae8
   14988:	0001dced 	.word	0x0001dced
   1498c:	0001dcfb 	.word	0x0001dcfb
   14990:	01000005 	.word	0x01000005
   14994:	0001b280 	.word	0x0001b280
   14998:	0001dd23 	.word	0x0001dd23
   1499c:	0001c554 	.word	0x0001c554
   149a0:	0001dd44 	.word	0x0001dd44
   149a4:	01000004 	.word	0x01000004

000149a8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   149a8:	4b10      	ldr	r3, [pc, #64]	; (149ec <z_sys_init_run_level+0x44>)
{
   149aa:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   149ac:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   149b0:	3001      	adds	r0, #1
   149b2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   149b6:	42a6      	cmp	r6, r4
   149b8:	d800      	bhi.n	149bc <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
   149ba:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
   149bc:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
   149c0:	b18d      	cbz	r5, 149e6 <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
   149c2:	4628      	mov	r0, r5
   149c4:	4798      	blx	r3
			if (rc != 0) {
   149c6:	b138      	cbz	r0, 149d8 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   149c8:	2800      	cmp	r0, #0
   149ca:	bfb8      	it	lt
   149cc:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   149ce:	28ff      	cmp	r0, #255	; 0xff
   149d0:	bfa8      	it	ge
   149d2:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   149d4:	68eb      	ldr	r3, [r5, #12]
   149d6:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   149d8:	68ea      	ldr	r2, [r5, #12]
   149da:	7853      	ldrb	r3, [r2, #1]
   149dc:	f043 0301 	orr.w	r3, r3, #1
   149e0:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   149e2:	3408      	adds	r4, #8
   149e4:	e7e7      	b.n	149b6 <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
   149e6:	4798      	blx	r3
   149e8:	e7fb      	b.n	149e2 <z_sys_init_run_level+0x3a>
   149ea:	bf00      	nop
   149ec:	0001bafc 	.word	0x0001bafc

000149f0 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   149f0:	2201      	movs	r2, #1
{
   149f2:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   149f4:	4b09      	ldr	r3, [pc, #36]	; (14a1c <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   149f6:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   149f8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   149fa:	f7ff ffd5 	bl	149a8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   149fe:	f001 fb29 	bl	16054 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   14a02:	2004      	movs	r0, #4
   14a04:	f7ff ffd0 	bl	149a8 <z_sys_init_run_level>

	z_init_static_threads();
   14a08:	f000 f96c 	bl	14ce4 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
   14a0c:	f7f3 fd52 	bl	84b4 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   14a10:	4a03      	ldr	r2, [pc, #12]	; (14a20 <bg_thread_main+0x30>)
   14a12:	7b13      	ldrb	r3, [r2, #12]
   14a14:	f023 0301 	bic.w	r3, r3, #1
   14a18:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   14a1a:	bd08      	pop	{r3, pc}
   14a1c:	20009be3 	.word	0x20009be3
   14a20:	20009588 	.word	0x20009588

00014a24 <z_bss_zero>:
{
   14a24:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   14a26:	4803      	ldr	r0, [pc, #12]	; (14a34 <z_bss_zero+0x10>)
   14a28:	4a03      	ldr	r2, [pc, #12]	; (14a38 <z_bss_zero+0x14>)
   14a2a:	2100      	movs	r1, #0
   14a2c:	1a12      	subs	r2, r2, r0
   14a2e:	f005 fc03 	bl	1a238 <z_early_memset>
}
   14a32:	bd08      	pop	{r3, pc}
   14a34:	20008748 	.word	0x20008748
   14a38:	20009be8 	.word	0x20009be8

00014a3c <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   14a3c:	2388      	movs	r3, #136	; 0x88
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   14a3e:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   14a40:	4e13      	ldr	r6, [pc, #76]	; (14a90 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   14a42:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   14a44:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   14a48:	2300      	movs	r3, #0
{
   14a4a:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   14a4c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   14a50:	220f      	movs	r2, #15
   14a52:	9301      	str	r3, [sp, #4]
   14a54:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   14a58:	2314      	movs	r3, #20
	z_setup_new_thread(thread, stack,
   14a5a:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   14a5e:	4d0d      	ldr	r5, [pc, #52]	; (14a94 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   14a60:	490d      	ldr	r1, [pc, #52]	; (14a98 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   14a62:	fb03 5500 	mla	r5, r3, r0, r5
{
   14a66:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   14a68:	fb02 1100 	mla	r1, r2, r0, r1
   14a6c:	4b0b      	ldr	r3, [pc, #44]	; (14a9c <z_init_cpu+0x60>)
   14a6e:	4630      	mov	r0, r6
   14a70:	9500      	str	r5, [sp, #0]
   14a72:	f000 f8db 	bl	14c2c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14a76:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   14a78:	742c      	strb	r4, [r5, #16]
   14a7a:	f023 0304 	bic.w	r3, r3, #4
   14a7e:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   14a80:	4b07      	ldr	r3, [pc, #28]	; (14aa0 <z_init_cpu+0x64>)
   14a82:	3401      	adds	r4, #1
   14a84:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   14a88:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   14a8a:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   14a8c:	b006      	add	sp, #24
   14a8e:	bd70      	pop	{r4, r5, r6, pc}
   14a90:	20009500 	.word	0x20009500
   14a94:	20009ae8 	.word	0x20009ae8
   14a98:	2000bd40 	.word	0x2000bd40
   14a9c:	00014d9d 	.word	0x00014d9d
   14aa0:	2000b540 	.word	0x2000b540

00014aa4 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   14aa4:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   14aa6:	2000      	movs	r0, #0
{
   14aa8:	b0a8      	sub	sp, #160	; 0xa0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   14aaa:	f7ff ff7d 	bl	149a8 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   14aae:	4b2f      	ldr	r3, [pc, #188]	; (14b6c <z_cstart+0xc8>)
	uint32_t msp =
   14ab0:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   14ab4:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   14ab8:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14abc:	2400      	movs	r4, #0
   14abe:	23e0      	movs	r3, #224	; 0xe0
   14ac0:	4d2b      	ldr	r5, [pc, #172]	; (14b70 <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   14ac2:	4e2c      	ldr	r6, [pc, #176]	; (14b74 <z_cstart+0xd0>)
   14ac4:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   14ac8:	77ec      	strb	r4, [r5, #31]
   14aca:	762c      	strb	r4, [r5, #24]
   14acc:	766c      	strb	r4, [r5, #25]
   14ace:	76ac      	strb	r4, [r5, #26]
   14ad0:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   14ad4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   14ad6:	4f28      	ldr	r7, [pc, #160]	; (14b78 <z_cstart+0xd4>)
   14ad8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   14adc:	626b      	str	r3, [r5, #36]	; 0x24
   14ade:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   14ae2:	f7f7 f857 	bl	bb94 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   14ae6:	f7f6 fbaf 	bl	b248 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   14aea:	f04f 33ff 	mov.w	r3, #4294967295
   14aee:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   14af0:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   14af2:	f7f7 fa99 	bl	c028 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   14af6:	f7f7 f8ff 	bl	bcf8 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   14afa:	f7f5 fca3 	bl	a444 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   14afe:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   14b02:	ad06      	add	r5, sp, #24
   14b04:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   14b06:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   14b0a:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   14b0e:	f001 fa83 	bl	16018 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   14b12:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   14b14:	f005 fb84 	bl	1a220 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   14b18:	2001      	movs	r0, #1
   14b1a:	f7ff ff45 	bl	149a8 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   14b1e:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   14b20:	4d16      	ldr	r5, [pc, #88]	; (14b7c <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   14b22:	f7ff ff41 	bl	149a8 <z_sys_init_run_level>
	z_sched_init();
   14b26:	f000 fed3 	bl	158d0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   14b2a:	4b15      	ldr	r3, [pc, #84]	; (14b80 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   14b2c:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   14b2e:	9305      	str	r3, [sp, #20]
   14b30:	2301      	movs	r3, #1
   14b32:	4914      	ldr	r1, [pc, #80]	; (14b84 <z_cstart+0xe0>)
   14b34:	f44f 6200 	mov.w	r2, #2048	; 0x800
   14b38:	e9cd 4303 	strd	r4, r3, [sp, #12]
   14b3c:	4628      	mov	r0, r5
   14b3e:	463b      	mov	r3, r7
   14b40:	e9cd 4401 	strd	r4, r4, [sp, #4]
   14b44:	9400      	str	r4, [sp, #0]
   14b46:	f000 f871 	bl	14c2c <z_setup_new_thread>
   14b4a:	4606      	mov	r6, r0
   14b4c:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   14b4e:	4628      	mov	r0, r5
   14b50:	f022 0204 	bic.w	r2, r2, #4
   14b54:	736a      	strb	r2, [r5, #13]
   14b56:	f005 fe3b 	bl	1a7d0 <z_ready_thread>
	z_init_cpu(0);
   14b5a:	4620      	mov	r0, r4
   14b5c:	f7ff ff6e 	bl	14a3c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   14b60:	463a      	mov	r2, r7
   14b62:	4631      	mov	r1, r6
   14b64:	4628      	mov	r0, r5
   14b66:	f7f6 fce1 	bl	b52c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   14b6a:	bf00      	nop
   14b6c:	2000b540 	.word	0x2000b540
   14b70:	e000ed00 	.word	0xe000ed00
   14b74:	20009ae8 	.word	0x20009ae8
   14b78:	000149f1 	.word	0x000149f1
   14b7c:	20009588 	.word	0x20009588
   14b80:	0001dda6 	.word	0x0001dda6
   14b84:	2000be80 	.word	0x2000be80

00014b88 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
   14b88:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   14b8a:	4c06      	ldr	r4, [pc, #24]	; (14ba4 <statics_init+0x1c>)
   14b8c:	4d06      	ldr	r5, [pc, #24]	; (14ba8 <statics_init+0x20>)
   14b8e:	42ac      	cmp	r4, r5
   14b90:	d301      	bcc.n	14b96 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   14b92:	2000      	movs	r0, #0
   14b94:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   14b96:	4620      	mov	r0, r4
   14b98:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   14b9c:	f005 fb50 	bl	1a240 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   14ba0:	3414      	adds	r4, #20
   14ba2:	e7f4      	b.n	14b8e <statics_init+0x6>
   14ba4:	20008588 	.word	0x20008588
   14ba8:	2000859c 	.word	0x2000859c

00014bac <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
	int rc = 0;
   14bac:	2000      	movs	r0, #0
{
   14bae:	b538      	push	{r3, r4, r5, lr}

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   14bb0:	4c05      	ldr	r4, [pc, #20]	; (14bc8 <init_mem_slab_module+0x1c>)
   14bb2:	4d06      	ldr	r5, [pc, #24]	; (14bcc <init_mem_slab_module+0x20>)
   14bb4:	42ac      	cmp	r4, r5
   14bb6:	d300      	bcc.n	14bba <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   14bb8:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   14bba:	4620      	mov	r0, r4
   14bbc:	f005 fbb2 	bl	1a324 <create_free_list>
		if (rc < 0) {
   14bc0:	2800      	cmp	r0, #0
   14bc2:	dbf9      	blt.n	14bb8 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   14bc4:	341c      	adds	r4, #28
   14bc6:	e7f5      	b.n	14bb4 <init_mem_slab_module+0x8>
   14bc8:	20008534 	.word	0x20008534
   14bcc:	20008588 	.word	0x20008588

00014bd0 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   14bd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14bd2:	460c      	mov	r4, r1
	__asm__ volatile(
   14bd4:	f04f 0520 	mov.w	r5, #32
   14bd8:	f3ef 8111 	mrs	r1, BASEPRI
   14bdc:	f385 8812 	msr	BASEPRI_MAX, r5
   14be0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   14be4:	6945      	ldr	r5, [r0, #20]
   14be6:	b15d      	cbz	r5, 14c00 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   14be8:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   14bea:	682b      	ldr	r3, [r5, #0]
   14bec:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   14bee:	6983      	ldr	r3, [r0, #24]
   14bf0:	3301      	adds	r3, #1
   14bf2:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   14bf4:	2000      	movs	r0, #0
	__asm__ volatile(
   14bf6:	f381 8811 	msr	BASEPRI, r1
   14bfa:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   14bfe:	e011      	b.n	14c24 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   14c00:	ea52 0603 	orrs.w	r6, r2, r3
   14c04:	d103      	bne.n	14c0e <k_mem_slab_alloc+0x3e>
		result = -ENOMEM;
   14c06:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   14c0a:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   14c0c:	e7f3      	b.n	14bf6 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   14c0e:	e9cd 2300 	strd	r2, r3, [sp]
   14c12:	4602      	mov	r2, r0
   14c14:	3008      	adds	r0, #8
   14c16:	f000 fd65 	bl	156e4 <z_pend_curr>
		if (result == 0) {
   14c1a:	b918      	cbnz	r0, 14c24 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   14c1c:	4b02      	ldr	r3, [pc, #8]	; (14c28 <k_mem_slab_alloc+0x58>)
   14c1e:	689b      	ldr	r3, [r3, #8]
   14c20:	695b      	ldr	r3, [r3, #20]
   14c22:	6023      	str	r3, [r4, #0]
}
   14c24:	b002      	add	sp, #8
   14c26:	bd70      	pop	{r4, r5, r6, pc}
   14c28:	20009ae8 	.word	0x20009ae8

00014c2c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   14c2c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   14c30:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   14c32:	f100 0558 	add.w	r5, r0, #88	; 0x58
   14c36:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   14c38:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   14c3a:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
   14c3e:	2500      	movs	r5, #0
{
   14c40:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
   14c42:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   14c44:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   14c46:	e9c0 5506 	strd	r5, r5, [r0, #24]
   14c4a:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   14c4c:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   14c4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   14c50:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
   14c54:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   14c58:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   14c5a:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   14c5c:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   14c5e:	9202      	str	r2, [sp, #8]
   14c60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
   14c62:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   14c66:	9201      	str	r2, [sp, #4]
   14c68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14c6a:	9200      	str	r2, [sp, #0]
   14c6c:	4642      	mov	r2, r8
   14c6e:	f7f6 fc3d 	bl	b4ec <arch_new_thread>
	if (!_current) {
   14c72:	4b05      	ldr	r3, [pc, #20]	; (14c88 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   14c74:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   14c76:	689b      	ldr	r3, [r3, #8]
   14c78:	b103      	cbz	r3, 14c7c <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   14c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   14c7c:	4640      	mov	r0, r8
   14c7e:	6763      	str	r3, [r4, #116]	; 0x74
   14c80:	b004      	add	sp, #16
   14c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14c86:	bf00      	nop
   14c88:	20009ae8 	.word	0x20009ae8

00014c8c <z_impl_k_thread_create>:
{
   14c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   14c8e:	2500      	movs	r5, #0
{
   14c90:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   14c92:	9505      	str	r5, [sp, #20]
   14c94:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   14c96:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   14c9a:	9504      	str	r5, [sp, #16]
   14c9c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   14c9e:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   14ca0:	9503      	str	r5, [sp, #12]
   14ca2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   14ca4:	9502      	str	r5, [sp, #8]
   14ca6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   14ca8:	9501      	str	r5, [sp, #4]
   14caa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   14cac:	9500      	str	r5, [sp, #0]
   14cae:	f7ff ffbd 	bl	14c2c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   14cb2:	f1b6 3fff 	cmp.w	r6, #4294967295
   14cb6:	bf08      	it	eq
   14cb8:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   14cbc:	d005      	beq.n	14cca <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   14cbe:	ea56 0307 	orrs.w	r3, r6, r7
   14cc2:	d105      	bne.n	14cd0 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   14cc4:	4620      	mov	r0, r4
   14cc6:	f000 fd83 	bl	157d0 <z_sched_start>
}
   14cca:	4620      	mov	r0, r4
   14ccc:	b007      	add	sp, #28
   14cce:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   14cd0:	463a      	mov	r2, r7
   14cd2:	4633      	mov	r3, r6
   14cd4:	4902      	ldr	r1, [pc, #8]	; (14ce0 <z_impl_k_thread_create+0x54>)
   14cd6:	f104 0018 	add.w	r0, r4, #24
   14cda:	f000 ff75 	bl	15bc8 <z_add_timeout>
   14cde:	e7f4      	b.n	14cca <z_impl_k_thread_create+0x3e>
   14ce0:	0001a859 	.word	0x0001a859

00014ce4 <z_init_static_threads>:
{
   14ce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14ce8:	4c29      	ldr	r4, [pc, #164]	; (14d90 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   14cea:	4d2a      	ldr	r5, [pc, #168]	; (14d94 <z_init_static_threads+0xb0>)
{
   14cec:	b087      	sub	sp, #28
   14cee:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   14cf0:	42ae      	cmp	r6, r5
   14cf2:	f104 042c 	add.w	r4, r4, #44	; 0x2c
   14cf6:	d30f      	bcc.n	14d18 <z_init_static_threads+0x34>
	k_sched_lock();
   14cf8:	f000 fdba 	bl	15870 <k_sched_lock>
   14cfc:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   14d00:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   14d04:	4c22      	ldr	r4, [pc, #136]	; (14d90 <z_init_static_threads+0xac>)
   14d06:	f8df 9090 	ldr.w	r9, [pc, #144]	; 14d98 <z_init_static_threads+0xb4>
   14d0a:	42ac      	cmp	r4, r5
   14d0c:	d320      	bcc.n	14d50 <z_init_static_threads+0x6c>
}
   14d0e:	b007      	add	sp, #28
   14d10:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   14d14:	f000 bdc0 	b.w	15898 <k_sched_unlock>
		z_setup_new_thread(
   14d18:	f854 3c04 	ldr.w	r3, [r4, #-4]
   14d1c:	9305      	str	r3, [sp, #20]
   14d1e:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   14d22:	9304      	str	r3, [sp, #16]
   14d24:	f854 3c10 	ldr.w	r3, [r4, #-16]
   14d28:	9303      	str	r3, [sp, #12]
   14d2a:	f854 3c14 	ldr.w	r3, [r4, #-20]
   14d2e:	9302      	str	r3, [sp, #8]
   14d30:	f854 3c18 	ldr.w	r3, [r4, #-24]
   14d34:	9301      	str	r3, [sp, #4]
   14d36:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   14d3a:	9300      	str	r3, [sp, #0]
   14d3c:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
   14d40:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
   14d44:	f7ff ff72 	bl	14c2c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   14d48:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   14d4c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   14d4e:	e7ce      	b.n	14cee <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   14d50:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14d52:	1c5a      	adds	r2, r3, #1
   14d54:	d00d      	beq.n	14d72 <z_init_static_threads+0x8e>
   14d56:	2100      	movs	r1, #0
   14d58:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   14d5a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   14d5e:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   14d62:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   14d66:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   14d6a:	d104      	bne.n	14d76 <z_init_static_threads+0x92>
	z_sched_start(thread);
   14d6c:	4640      	mov	r0, r8
   14d6e:	f000 fd2f 	bl	157d0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   14d72:	342c      	adds	r4, #44	; 0x2c
   14d74:	e7c9      	b.n	14d0a <z_init_static_threads+0x26>
   14d76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14d7a:	2300      	movs	r3, #0
   14d7c:	f7f3 f9ea 	bl	8154 <__aeabi_uldivmod>
   14d80:	4602      	mov	r2, r0
   14d82:	460b      	mov	r3, r1
   14d84:	f108 0018 	add.w	r0, r8, #24
   14d88:	4649      	mov	r1, r9
   14d8a:	f000 ff1d 	bl	15bc8 <z_add_timeout>
   14d8e:	e7f0      	b.n	14d72 <z_init_static_threads+0x8e>
   14d90:	0001b104 	.word	0x0001b104
   14d94:	0001b130 	.word	0x0001b130
   14d98:	0001a859 	.word	0x0001a859

00014d9c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   14d9c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   14d9e:	4c0b      	ldr	r4, [pc, #44]	; (14dcc <idle+0x30>)
   14da0:	4d0b      	ldr	r5, [pc, #44]	; (14dd0 <idle+0x34>)
	__asm__ volatile(
   14da2:	f04f 0220 	mov.w	r2, #32
   14da6:	f3ef 8311 	mrs	r3, BASEPRI
   14daa:	f382 8812 	msr	BASEPRI_MAX, r2
   14dae:	f3bf 8f6f 	isb	sy
   14db2:	f005 fdff 	bl	1a9b4 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   14db6:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   14db8:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   14dba:	b913      	cbnz	r3, 14dc2 <idle+0x26>
	arch_cpu_idle();
   14dbc:	f7f6 fa4a 	bl	b254 <arch_cpu_idle>
}
   14dc0:	e7ef      	b.n	14da2 <idle+0x6>
   14dc2:	f7f6 f803 	bl	adcc <pm_system_suspend>
   14dc6:	2800      	cmp	r0, #0
   14dc8:	d1eb      	bne.n	14da2 <idle+0x6>
   14dca:	e7f7      	b.n	14dbc <idle+0x20>
   14dcc:	20009ae8 	.word	0x20009ae8
   14dd0:	20009be3 	.word	0x20009be3

00014dd4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   14dd4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   14dd8:	4604      	mov	r4, r0
   14dda:	4617      	mov	r7, r2
   14ddc:	461e      	mov	r6, r3
   14dde:	f04f 0320 	mov.w	r3, #32
   14de2:	f3ef 8811 	mrs	r8, BASEPRI
   14de6:	f383 8812 	msr	BASEPRI_MAX, r3
   14dea:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   14dee:	68c3      	ldr	r3, [r0, #12]
   14df0:	4a33      	ldr	r2, [pc, #204]	; (14ec0 <z_impl_k_mutex_lock+0xec>)
   14df2:	b17b      	cbz	r3, 14e14 <z_impl_k_mutex_lock+0x40>
   14df4:	6880      	ldr	r0, [r0, #8]
   14df6:	6891      	ldr	r1, [r2, #8]
   14df8:	4288      	cmp	r0, r1
   14dfa:	d019      	beq.n	14e30 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   14dfc:	ea57 0306 	orrs.w	r3, r7, r6
   14e00:	d118      	bne.n	14e34 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   14e02:	f388 8811 	msr	BASEPRI, r8
   14e06:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   14e0a:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   14e0e:	b002      	add	sp, #8
   14e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   14e14:	6891      	ldr	r1, [r2, #8]
   14e16:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   14e1a:	3301      	adds	r3, #1
   14e1c:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   14e1e:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   14e20:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   14e22:	60a3      	str	r3, [r4, #8]
   14e24:	f388 8811 	msr	BASEPRI, r8
   14e28:	f3bf 8f6f 	isb	sy
		return 0;
   14e2c:	2000      	movs	r0, #0
   14e2e:	e7ee      	b.n	14e0e <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   14e30:	6921      	ldr	r1, [r4, #16]
   14e32:	e7f2      	b.n	14e1a <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   14e34:	f991 100e 	ldrsb.w	r1, [r1, #14]
   14e38:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   14e3c:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   14e40:	4299      	cmp	r1, r3
   14e42:	bfa8      	it	ge
   14e44:	4619      	movge	r1, r3
   14e46:	4291      	cmp	r1, r2
   14e48:	bfb8      	it	lt
   14e4a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   14e4c:	428b      	cmp	r3, r1
   14e4e:	dd2e      	ble.n	14eae <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   14e50:	f005 fabb 	bl	1a3ca <adjust_owner_prio.isra.0>
   14e54:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   14e56:	4622      	mov	r2, r4
   14e58:	4641      	mov	r1, r8
   14e5a:	e9cd 7600 	strd	r7, r6, [sp]
   14e5e:	4819      	ldr	r0, [pc, #100]	; (14ec4 <z_impl_k_mutex_lock+0xf0>)
   14e60:	f000 fc40 	bl	156e4 <z_pend_curr>
	if (got_mutex == 0) {
   14e64:	2800      	cmp	r0, #0
   14e66:	d0e1      	beq.n	14e2c <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   14e68:	f04f 0320 	mov.w	r3, #32
   14e6c:	f3ef 8611 	mrs	r6, BASEPRI
   14e70:	f383 8812 	msr	BASEPRI_MAX, r3
   14e74:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   14e78:	68a0      	ldr	r0, [r4, #8]
   14e7a:	b1d0      	cbz	r0, 14eb2 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   14e7c:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   14e7e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14e80:	429c      	cmp	r4, r3
   14e82:	d00a      	beq.n	14e9a <z_impl_k_mutex_lock+0xc6>
   14e84:	b14b      	cbz	r3, 14e9a <z_impl_k_mutex_lock+0xc6>
   14e86:	f993 300e 	ldrsb.w	r3, [r3, #14]
   14e8a:	4299      	cmp	r1, r3
   14e8c:	bfa8      	it	ge
   14e8e:	4619      	movge	r1, r3
   14e90:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   14e94:	4299      	cmp	r1, r3
   14e96:	bfb8      	it	lt
   14e98:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   14e9a:	f005 fa96 	bl	1a3ca <adjust_owner_prio.isra.0>
   14e9e:	b140      	cbz	r0, 14eb2 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   14ea0:	4631      	mov	r1, r6
   14ea2:	4808      	ldr	r0, [pc, #32]	; (14ec4 <z_impl_k_mutex_lock+0xf0>)
   14ea4:	f000 fc82 	bl	157ac <z_reschedule>
	return -EAGAIN;
   14ea8:	f06f 000a 	mvn.w	r0, #10
   14eac:	e7af      	b.n	14e0e <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   14eae:	2500      	movs	r5, #0
   14eb0:	e7d1      	b.n	14e56 <z_impl_k_mutex_lock+0x82>
	if (resched) {
   14eb2:	2d00      	cmp	r5, #0
   14eb4:	d1f4      	bne.n	14ea0 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   14eb6:	f386 8811 	msr	BASEPRI, r6
   14eba:	f3bf 8f6f 	isb	sy
   14ebe:	e7f3      	b.n	14ea8 <z_impl_k_mutex_lock+0xd4>
   14ec0:	20009ae8 	.word	0x20009ae8
   14ec4:	20009be4 	.word	0x20009be4

00014ec8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   14ec8:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   14eca:	6883      	ldr	r3, [r0, #8]
{
   14ecc:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   14ece:	b36b      	cbz	r3, 14f2c <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   14ed0:	4a19      	ldr	r2, [pc, #100]	; (14f38 <z_impl_k_mutex_unlock+0x70>)
   14ed2:	6892      	ldr	r2, [r2, #8]
   14ed4:	4293      	cmp	r3, r2
   14ed6:	d12c      	bne.n	14f32 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   14ed8:	68c3      	ldr	r3, [r0, #12]
   14eda:	2b01      	cmp	r3, #1
   14edc:	d903      	bls.n	14ee6 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   14ede:	3b01      	subs	r3, #1
   14ee0:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   14ee2:	2000      	movs	r0, #0
}
   14ee4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   14ee6:	f04f 0320 	mov.w	r3, #32
   14eea:	f3ef 8511 	mrs	r5, BASEPRI
   14eee:	f383 8812 	msr	BASEPRI_MAX, r3
   14ef2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   14ef6:	6901      	ldr	r1, [r0, #16]
   14ef8:	6880      	ldr	r0, [r0, #8]
   14efa:	f005 fa66 	bl	1a3ca <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   14efe:	4620      	mov	r0, r4
   14f00:	f005 fcc5 	bl	1a88e <z_unpend_first_thread>
	mutex->owner = new_owner;
   14f04:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   14f06:	b158      	cbz	r0, 14f20 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   14f08:	f990 200e 	ldrsb.w	r2, [r0, #14]
   14f0c:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   14f0e:	2200      	movs	r2, #0
   14f10:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   14f12:	f005 fc5d 	bl	1a7d0 <z_ready_thread>
		z_reschedule(&lock, key);
   14f16:	4629      	mov	r1, r5
   14f18:	4808      	ldr	r0, [pc, #32]	; (14f3c <z_impl_k_mutex_unlock+0x74>)
   14f1a:	f000 fc47 	bl	157ac <z_reschedule>
   14f1e:	e7e0      	b.n	14ee2 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   14f20:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   14f22:	f385 8811 	msr	BASEPRI, r5
   14f26:	f3bf 8f6f 	isb	sy
   14f2a:	e7da      	b.n	14ee2 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   14f2c:	f06f 0015 	mvn.w	r0, #21
   14f30:	e7d8      	b.n	14ee4 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   14f32:	f04f 30ff 	mov.w	r0, #4294967295
   14f36:	e7d5      	b.n	14ee4 <z_impl_k_mutex_unlock+0x1c>
   14f38:	20009ae8 	.word	0x20009ae8
   14f3c:	20009be4 	.word	0x20009be4

00014f40 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   14f40:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14f42:	4611      	mov	r1, r2
	__asm__ volatile(
   14f44:	f04f 0220 	mov.w	r2, #32
   14f48:	f3ef 8511 	mrs	r5, BASEPRI
   14f4c:	f382 8812 	msr	BASEPRI_MAX, r2
   14f50:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   14f54:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   14f56:	b19c      	cbz	r4, 14f80 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14f58:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   14f5a:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   14f5c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   14f60:	4294      	cmp	r4, r2
	list->head = node;
   14f62:	6003      	str	r3, [r0, #0]
	list->tail = node;
   14f64:	bf08      	it	eq
   14f66:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   14f68:	2101      	movs	r1, #1
   14f6a:	4620      	mov	r0, r4
   14f6c:	f005 faa2 	bl	1a4b4 <z_queue_node_peek>
   14f70:	4604      	mov	r4, r0
	__asm__ volatile(
   14f72:	f385 8811 	msr	BASEPRI, r5
   14f76:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   14f7a:	4620      	mov	r0, r4
   14f7c:	b003      	add	sp, #12
   14f7e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   14f80:	ea51 0203 	orrs.w	r2, r1, r3
   14f84:	d0f5      	beq.n	14f72 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   14f86:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   14f8a:	e9cd 1300 	strd	r1, r3, [sp]
   14f8e:	4610      	mov	r0, r2
   14f90:	4629      	mov	r1, r5
   14f92:	f000 fba7 	bl	156e4 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   14f96:	2800      	cmp	r0, #0
   14f98:	d1ef      	bne.n	14f7a <z_impl_k_queue_get+0x3a>
   14f9a:	4b02      	ldr	r3, [pc, #8]	; (14fa4 <z_impl_k_queue_get+0x64>)
   14f9c:	689b      	ldr	r3, [r3, #8]
   14f9e:	695c      	ldr	r4, [r3, #20]
   14fa0:	e7eb      	b.n	14f7a <z_impl_k_queue_get+0x3a>
   14fa2:	bf00      	nop
   14fa4:	20009ae8 	.word	0x20009ae8

00014fa8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   14fa8:	b538      	push	{r3, r4, r5, lr}
   14faa:	4604      	mov	r4, r0
	__asm__ volatile(
   14fac:	f04f 0320 	mov.w	r3, #32
   14fb0:	f3ef 8511 	mrs	r5, BASEPRI
   14fb4:	f383 8812 	msr	BASEPRI_MAX, r3
   14fb8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   14fbc:	f005 fc67 	bl	1a88e <z_unpend_first_thread>

	if (thread != NULL) {
   14fc0:	b148      	cbz	r0, 14fd6 <z_impl_k_sem_give+0x2e>
   14fc2:	2200      	movs	r2, #0
   14fc4:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   14fc6:	f005 fc03 	bl	1a7d0 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   14fca:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   14fcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   14fd0:	4807      	ldr	r0, [pc, #28]	; (14ff0 <z_impl_k_sem_give+0x48>)
   14fd2:	f000 bbeb 	b.w	157ac <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   14fd6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   14fda:	429a      	cmp	r2, r3
   14fdc:	bf18      	it	ne
   14fde:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   14fe0:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   14fe2:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   14fe4:	f104 0010 	add.w	r0, r4, #16
   14fe8:	f005 fe89 	bl	1acfe <z_handle_obj_poll_events>
}
   14fec:	e7ed      	b.n	14fca <z_impl_k_sem_give+0x22>
   14fee:	bf00      	nop
   14ff0:	20009be4 	.word	0x20009be4

00014ff4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   14ff4:	b513      	push	{r0, r1, r4, lr}
   14ff6:	f04f 0420 	mov.w	r4, #32
   14ffa:	f3ef 8111 	mrs	r1, BASEPRI
   14ffe:	f384 8812 	msr	BASEPRI_MAX, r4
   15002:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   15006:	6884      	ldr	r4, [r0, #8]
   15008:	b144      	cbz	r4, 1501c <z_impl_k_sem_take+0x28>
		sem->count--;
   1500a:	3c01      	subs	r4, #1
   1500c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   1500e:	f381 8811 	msr	BASEPRI, r1
   15012:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   15016:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   15018:	b002      	add	sp, #8
   1501a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1501c:	ea52 0403 	orrs.w	r4, r2, r3
   15020:	d106      	bne.n	15030 <z_impl_k_sem_take+0x3c>
   15022:	f381 8811 	msr	BASEPRI, r1
   15026:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1502a:	f06f 000f 	mvn.w	r0, #15
   1502e:	e7f3      	b.n	15018 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   15030:	e9cd 2300 	strd	r2, r3, [sp]
   15034:	4602      	mov	r2, r0
   15036:	4802      	ldr	r0, [pc, #8]	; (15040 <z_impl_k_sem_take+0x4c>)
   15038:	f000 fb54 	bl	156e4 <z_pend_curr>
	return ret;
   1503c:	e7ec      	b.n	15018 <z_impl_k_sem_take+0x24>
   1503e:	bf00      	nop
   15040:	20009be4 	.word	0x20009be4

00015044 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
   15044:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
   15046:	2400      	movs	r4, #0
   15048:	4b08      	ldr	r3, [pc, #32]	; (1506c <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1504a:	f44f 6200 	mov.w	r2, #2048	; 0x800
	struct k_work_queue_config cfg = {
   1504e:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   15050:	ab02      	add	r3, sp, #8
   15052:	9300      	str	r3, [sp, #0]
   15054:	4906      	ldr	r1, [pc, #24]	; (15070 <k_sys_work_q_init+0x2c>)
   15056:	f04f 33ff 	mov.w	r3, #4294967295
   1505a:	4806      	ldr	r0, [pc, #24]	; (15074 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1505c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   15060:	f000 f924 	bl	152ac <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   15064:	4620      	mov	r0, r4
   15066:	b004      	add	sp, #16
   15068:	bd10      	pop	{r4, pc}
   1506a:	bf00      	nop
   1506c:	0001ddae 	.word	0x0001ddae
   15070:	2000c680 	.word	0x2000c680
   15074:	20009610 	.word	0x20009610

00015078 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   15078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1507c:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   1507e:	f04f 38ff 	mov.w	r8, #4294967295
   15082:	f04f 39ff 	mov.w	r9, #4294967295
	return list->head;
   15086:	4e48      	ldr	r6, [pc, #288]	; (151a8 <work_queue_main+0x130>)
{
   15088:	b085      	sub	sp, #20
	__asm__ volatile(
   1508a:	f04f 0320 	mov.w	r3, #32
   1508e:	f3ef 8711 	mrs	r7, BASEPRI
   15092:	f383 8812 	msr	BASEPRI_MAX, r3
   15096:	f3bf 8f6f 	isb	sy
   1509a:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
Z_GENLIST_GET(slist, snode)
   1509e:	b98d      	cbnz	r5, 150c4 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   150a0:	2102      	movs	r1, #2
   150a2:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   150a6:	f005 fa46 	bl	1a536 <flag_test_and_clear>
   150aa:	2800      	cmp	r0, #0
   150ac:	d143      	bne.n	15136 <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   150ae:	2300      	movs	r3, #0
   150b0:	4639      	mov	r1, r7
   150b2:	e9cd 8900 	strd	r8, r9, [sp]
   150b6:	9302      	str	r3, [sp, #8]
   150b8:	f104 0290 	add.w	r2, r4, #144	; 0x90
   150bc:	483b      	ldr	r0, [pc, #236]	; (151ac <work_queue_main+0x134>)
   150be:	f000 fd11 	bl	15ae4 <z_sched_wait>
			continue;
   150c2:	e7e2      	b.n	1508a <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   150c4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
	return node->next;
   150c8:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   150ca:	4295      	cmp	r5, r2
	list->head = node;
   150cc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	list->tail = node;
   150d0:	bf08      	it	eq
   150d2:	f8c4 308c 	streq.w	r3, [r4, #140]	; 0x8c
	*flagp |= BIT(bit);
   150d6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   150da:	f043 0302 	orr.w	r3, r3, #2
   150de:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	*flagp &= ~BIT(bit);
   150e2:	68eb      	ldr	r3, [r5, #12]
   150e4:	f023 0304 	bic.w	r3, r3, #4
   150e8:	f043 0301 	orr.w	r3, r3, #1
   150ec:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   150ee:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   150f0:	f387 8811 	msr	BASEPRI, r7
   150f4:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   150f8:	4628      	mov	r0, r5
   150fa:	4798      	blx	r3
	__asm__ volatile(
   150fc:	f04f 0320 	mov.w	r3, #32
   15100:	f3ef 8b11 	mrs	fp, BASEPRI
   15104:	f383 8812 	msr	BASEPRI_MAX, r3
   15108:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1510c:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1510e:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   15110:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   15114:	d419      	bmi.n	1514a <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   15116:	60ea      	str	r2, [r5, #12]
   15118:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   1511c:	f023 0302 	bic.w	r3, r3, #2
   15120:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	__asm__ volatile(
   15124:	f38b 8811 	msr	BASEPRI, fp
   15128:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   1512c:	05db      	lsls	r3, r3, #23
   1512e:	d4ac      	bmi.n	1508a <work_queue_main+0x12>
	z_impl_k_yield();
   15130:	f000 fbd6 	bl	158e0 <z_impl_k_yield>
}
   15134:	e7a9      	b.n	1508a <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   15136:	f104 0598 	add.w	r5, r4, #152	; 0x98
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1513a:	2200      	movs	r2, #0
   1513c:	2101      	movs	r1, #1
   1513e:	4628      	mov	r0, r5
   15140:	f005 fbff 	bl	1a942 <z_sched_wake>
   15144:	2800      	cmp	r0, #0
   15146:	d1f8      	bne.n	1513a <work_queue_main+0xc2>
   15148:	e7b1      	b.n	150ae <work_queue_main+0x36>
	return list->head;
   1514a:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   1514c:	f023 0303 	bic.w	r3, r3, #3
   15150:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   15152:	2800      	cmp	r0, #0
   15154:	d0e0      	beq.n	15118 <work_queue_main+0xa0>
	return node->next;
   15156:	2700      	movs	r7, #0
	parent->next = child;
   15158:	463b      	mov	r3, r7
	return node->next;
   1515a:	f8d0 a000 	ldr.w	sl, [r0]
   1515e:	2800      	cmp	r0, #0
   15160:	d0da      	beq.n	15118 <work_queue_main+0xa0>
		if (wc->work == work) {
   15162:	6842      	ldr	r2, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   15164:	4601      	mov	r1, r0
		if (wc->work == work) {
   15166:	4295      	cmp	r5, r2
   15168:	d10c      	bne.n	15184 <work_queue_main+0x10c>
   1516a:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1516c:	b99f      	cbnz	r7, 15196 <work_queue_main+0x11e>
   1516e:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   15170:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   15172:	4282      	cmp	r2, r0
   15174:	d100      	bne.n	15178 <work_queue_main+0x100>
	list->tail = node;
   15176:	6071      	str	r1, [r6, #4]
	parent->next = child;
   15178:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   1517c:	f7ff ff14 	bl	14fa8 <z_impl_k_sem_give>
}
   15180:	4639      	mov	r1, r7
   15182:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   15184:	f1ba 0f00 	cmp.w	sl, #0
   15188:	d00b      	beq.n	151a2 <work_queue_main+0x12a>
	return node->next;
   1518a:	f8da 2000 	ldr.w	r2, [sl]
   1518e:	4650      	mov	r0, sl
   15190:	460f      	mov	r7, r1
   15192:	4692      	mov	sl, r2
   15194:	e7e3      	b.n	1515e <work_queue_main+0xe6>
	parent->next = child;
   15196:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   15198:	6872      	ldr	r2, [r6, #4]
   1519a:	4282      	cmp	r2, r0
	list->tail = node;
   1519c:	bf08      	it	eq
   1519e:	6077      	streq	r7, [r6, #4]
}
   151a0:	e7ea      	b.n	15178 <work_queue_main+0x100>
   151a2:	4652      	mov	r2, sl
   151a4:	e7f3      	b.n	1518e <work_queue_main+0x116>
   151a6:	bf00      	nop
   151a8:	20009b0c 	.word	0x20009b0c
   151ac:	20009be4 	.word	0x20009be4

000151b0 <cancel_sync_locked>:
{
   151b0:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   151b2:	68c3      	ldr	r3, [r0, #12]
{
   151b4:	4605      	mov	r5, r0
	return (*flagp & BIT(bit)) != 0U;
   151b6:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   151ba:	079b      	lsls	r3, r3, #30
{
   151bc:	460c      	mov	r4, r1
	if (ret) {
   151be:	d50d      	bpl.n	151dc <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   151c0:	2201      	movs	r2, #1
   151c2:	2100      	movs	r1, #0
   151c4:	f104 0008 	add.w	r0, r4, #8
   151c8:	f005 f9a5 	bl	1a516 <z_impl_k_sem_init>
	parent->next = child;
   151cc:	2300      	movs	r3, #0
   151ce:	6023      	str	r3, [r4, #0]
	return list->tail;
   151d0:	4b05      	ldr	r3, [pc, #20]	; (151e8 <cancel_sync_locked+0x38>)
	canceler->work = work;
   151d2:	6065      	str	r5, [r4, #4]
   151d4:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   151d6:	b91a      	cbnz	r2, 151e0 <cancel_sync_locked+0x30>
	list->head = node;
   151d8:	e9c3 4400 	strd	r4, r4, [r3]
}
   151dc:	4630      	mov	r0, r6
   151de:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   151e0:	6014      	str	r4, [r2, #0]
	list->tail = node;
   151e2:	605c      	str	r4, [r3, #4]
}
   151e4:	e7fa      	b.n	151dc <cancel_sync_locked+0x2c>
   151e6:	bf00      	nop
   151e8:	20009b0c 	.word	0x20009b0c

000151ec <submit_to_queue_locked>:
{
   151ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   151ee:	68c3      	ldr	r3, [r0, #12]
{
   151f0:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   151f2:	079a      	lsls	r2, r3, #30
{
   151f4:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   151f6:	f3c3 0640 	ubfx	r6, r3, #1, #1
   151fa:	d42c      	bmi.n	15256 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   151fc:	075b      	lsls	r3, r3, #29
   151fe:	d41a      	bmi.n	15236 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   15200:	680b      	ldr	r3, [r1, #0]
   15202:	b90b      	cbnz	r3, 15208 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   15204:	6883      	ldr	r3, [r0, #8]
   15206:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   15208:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1520a:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   1520c:	bf42      	ittt	mi
   1520e:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
   15210:	2602      	movmi	r6, #2
			*queuep = work->queue;
   15212:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   15214:	683d      	ldr	r5, [r7, #0]
		ret = 1;
   15216:	bf58      	it	pl
   15218:	2601      	movpl	r6, #1
	if (queue == NULL) {
   1521a:	2d00      	cmp	r5, #0
   1521c:	d03a      	beq.n	15294 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1521e:	4b1f      	ldr	r3, [pc, #124]	; (1529c <submit_to_queue_locked+0xb0>)
   15220:	689b      	ldr	r3, [r3, #8]
   15222:	42ab      	cmp	r3, r5
   15224:	d00a      	beq.n	1523c <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   15226:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1522a:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1522c:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   15230:	d414      	bmi.n	1525c <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   15232:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   15236:	2300      	movs	r3, #0
   15238:	603b      	str	r3, [r7, #0]
	return ret;
   1523a:	e025      	b.n	15288 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1523c:	f005 f8b1 	bl	1a3a2 <k_is_in_isr>
   15240:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   15244:	2800      	cmp	r0, #0
   15246:	d1f0      	bne.n	1522a <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   15248:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1524a:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1524e:	d5f0      	bpl.n	15232 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   15250:	b152      	cbz	r2, 15268 <submit_to_queue_locked+0x7c>
   15252:	075b      	lsls	r3, r3, #29
   15254:	d408      	bmi.n	15268 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   15256:	f06f 060f 	mvn.w	r6, #15
   1525a:	e7ec      	b.n	15236 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   1525c:	2a00      	cmp	r2, #0
   1525e:	d1fa      	bne.n	15256 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   15260:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   15264:	2b00      	cmp	r3, #0
   15266:	d1f6      	bne.n	15256 <submit_to_queue_locked+0x6a>
	parent->next = child;
   15268:	2300      	movs	r3, #0
   1526a:	6023      	str	r3, [r4, #0]
	return list->tail;
   1526c:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
Z_GENLIST_APPEND(slist, snode)
   15270:	b963      	cbnz	r3, 1528c <submit_to_queue_locked+0xa0>
	list->head = node;
   15272:	e9c5 4422 	strd	r4, r4, [r5, #136]	; 0x88
		(void)notify_queue_locked(queue);
   15276:	4628      	mov	r0, r5
   15278:	f005 f977 	bl	1a56a <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   1527c:	68e3      	ldr	r3, [r4, #12]
   1527e:	f043 0304 	orr.w	r3, r3, #4
   15282:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   15284:	683b      	ldr	r3, [r7, #0]
   15286:	60a3      	str	r3, [r4, #8]
}
   15288:	4630      	mov	r0, r6
   1528a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1528c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1528e:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c
}
   15292:	e7f0      	b.n	15276 <submit_to_queue_locked+0x8a>
		return -EINVAL;
   15294:	f06f 0615 	mvn.w	r6, #21
   15298:	e7cd      	b.n	15236 <submit_to_queue_locked+0x4a>
   1529a:	bf00      	nop
   1529c:	20009ae8 	.word	0x20009ae8

000152a0 <k_work_submit>:
{
   152a0:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   152a2:	4801      	ldr	r0, [pc, #4]	; (152a8 <k_work_submit+0x8>)
   152a4:	f005 b9e7 	b.w	1a676 <k_work_submit_to_queue>
   152a8:	20009610 	.word	0x20009610

000152ac <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   152ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   152ae:	4604      	mov	r4, r0
	list->head = NULL;
   152b0:	2000      	movs	r0, #0
   152b2:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
   152b4:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   152b8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   152ba:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->tail = (sys_dnode_t *)list;
   152be:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
   152c2:	f104 0098 	add.w	r0, r4, #152	; 0x98
   152c6:	e9c4 0026 	strd	r0, r0, [r4, #152]	; 0x98

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   152ca:	b31d      	cbz	r5, 15314 <k_work_queue_start+0x68>
   152cc:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   152ce:	2800      	cmp	r0, #0
   152d0:	f240 1001 	movw	r0, #257	; 0x101
   152d4:	bf08      	it	eq
   152d6:	2001      	moveq	r0, #1
	*flagp = flags;
   152d8:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   152dc:	2000      	movs	r0, #0
   152de:	f04f 36ff 	mov.w	r6, #4294967295
   152e2:	f04f 37ff 	mov.w	r7, #4294967295
   152e6:	e9cd 3003 	strd	r3, r0, [sp, #12]
   152ea:	e9cd 0001 	strd	r0, r0, [sp, #4]
   152ee:	e9cd 6706 	strd	r6, r7, [sp, #24]
   152f2:	4620      	mov	r0, r4
   152f4:	4b08      	ldr	r3, [pc, #32]	; (15318 <k_work_queue_start+0x6c>)
   152f6:	9400      	str	r4, [sp, #0]
   152f8:	f7ff fcc8 	bl	14c8c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   152fc:	b125      	cbz	r5, 15308 <k_work_queue_start+0x5c>
   152fe:	6829      	ldr	r1, [r5, #0]
   15300:	b111      	cbz	r1, 15308 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   15302:	4620      	mov	r0, r4
   15304:	f005 f853 	bl	1a3ae <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   15308:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   1530a:	b009      	add	sp, #36	; 0x24
   1530c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   15310:	f005 b852 	b.w	1a3b8 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   15314:	2001      	movs	r0, #1
   15316:	e7df      	b.n	152d8 <k_work_queue_start+0x2c>
   15318:	00015079 	.word	0x00015079

0001531c <k_work_queue_drain>:

int k_work_queue_drain(struct k_work_q *queue,
		       bool plug)
{
   1531c:	b530      	push	{r4, r5, lr}
   1531e:	460a      	mov	r2, r1
   15320:	4604      	mov	r4, r0
   15322:	b085      	sub	sp, #20
	__asm__ volatile(
   15324:	f04f 0320 	mov.w	r3, #32
   15328:	f3ef 8511 	mrs	r5, BASEPRI
   1532c:	f383 8812 	msr	BASEPRI_MAX, r3
   15330:	f3bf 8f6f 	isb	sy
	return *flagp;
   15334:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work_queue, drain, queue);

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (((flags_get(&queue->flags)
   15338:	f013 0f06 	tst.w	r3, #6
   1533c:	d11d      	bne.n	1537a <k_work_queue_drain+0x5e>
	      & (K_WORK_QUEUE_BUSY | K_WORK_QUEUE_DRAIN)) != 0U)
	    || plug
   1533e:	b1b1      	cbz	r1, 1536e <k_work_queue_drain+0x52>
	*flagp |= BIT(bit);
   15340:	f043 030c 	orr.w	r3, r3, #12
   15344:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		flag_set(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
		if (plug) {
			flag_set(&queue->flags, K_WORK_QUEUE_PLUGGED_BIT);
		}

		notify_queue_locked(queue);
   15348:	4620      	mov	r0, r4
   1534a:	f005 f90e 	bl	1a56a <notify_queue_locked.isra.0>
		ret = z_sched_wait(&lock, key, &queue->drainq,
   1534e:	2300      	movs	r3, #0
   15350:	f04f 32ff 	mov.w	r2, #4294967295
   15354:	9302      	str	r3, [sp, #8]
   15356:	f04f 33ff 	mov.w	r3, #4294967295
   1535a:	4629      	mov	r1, r5
   1535c:	e9cd 2300 	strd	r2, r3, [sp]
   15360:	480c      	ldr	r0, [pc, #48]	; (15394 <k_work_queue_drain+0x78>)
   15362:	f104 0298 	add.w	r2, r4, #152	; 0x98
   15366:	f000 fbbd 	bl	15ae4 <z_sched_wait>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, drain, queue, ret);

	return ret;
}
   1536a:	b005      	add	sp, #20
   1536c:	bd30      	pop	{r4, r5, pc}
	    || !sys_slist_is_empty(&queue->pending)) {
   1536e:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
   15372:	b148      	cbz	r0, 15388 <k_work_queue_drain+0x6c>
	*flagp |= BIT(bit);
   15374:	f043 0304 	orr.w	r3, r3, #4
   15378:	e7e4      	b.n	15344 <k_work_queue_drain+0x28>
   1537a:	f043 0104 	orr.w	r1, r3, #4
   1537e:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
		if (plug) {
   15382:	2a00      	cmp	r2, #0
   15384:	d0e0      	beq.n	15348 <k_work_queue_drain+0x2c>
   15386:	e7db      	b.n	15340 <k_work_queue_drain+0x24>
	__asm__ volatile(
   15388:	f385 8811 	msr	BASEPRI, r5
   1538c:	f3bf 8f6f 	isb	sy
	return ret;
   15390:	e7eb      	b.n	1536a <k_work_queue_drain+0x4e>
   15392:	bf00      	nop
   15394:	20009be4 	.word	0x20009be4

00015398 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   15398:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1539a:	9001      	str	r0, [sp, #4]
   1539c:	4608      	mov	r0, r1
	__asm__ volatile(
   1539e:	f04f 0120 	mov.w	r1, #32
   153a2:	f3ef 8411 	mrs	r4, BASEPRI
   153a6:	f381 8812 	msr	BASEPRI_MAX, r1
   153aa:	f3bf 8f6f 	isb	sy
	return *flagp;
   153ae:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   153b0:	f011 0f0e 	tst.w	r1, #14
   153b4:	d116      	bne.n	153e4 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   153b6:	ea53 0502 	orrs.w	r5, r3, r2
   153ba:	d108      	bne.n	153ce <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   153bc:	a901      	add	r1, sp, #4
   153be:	f7ff ff15 	bl	151ec <submit_to_queue_locked>
	__asm__ volatile(
   153c2:	f384 8811 	msr	BASEPRI, r4
   153c6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   153ca:	b003      	add	sp, #12
   153cc:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   153ce:	f041 0108 	orr.w	r1, r1, #8
   153d2:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   153d4:	9901      	ldr	r1, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   153d6:	3010      	adds	r0, #16
	dwork->queue = *queuep;
   153d8:	6181      	str	r1, [r0, #24]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   153da:	4903      	ldr	r1, [pc, #12]	; (153e8 <k_work_schedule_for_queue+0x50>)
   153dc:	f000 fbf4 	bl	15bc8 <z_add_timeout>
	return ret;
   153e0:	2001      	movs	r0, #1
   153e2:	e7ee      	b.n	153c2 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   153e4:	2000      	movs	r0, #0
   153e6:	e7ec      	b.n	153c2 <k_work_schedule_for_queue+0x2a>
   153e8:	0001a5df 	.word	0x0001a5df

000153ec <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   153ec:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   153ee:	4801      	ldr	r0, [pc, #4]	; (153f4 <k_work_schedule+0x8>)
   153f0:	f7ff bfd2 	b.w	15398 <k_work_schedule_for_queue>
   153f4:	20009610 	.word	0x20009610

000153f8 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   153f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   153fa:	460c      	mov	r4, r1
   153fc:	4616      	mov	r6, r2
   153fe:	461d      	mov	r5, r3
   15400:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   15402:	f04f 0320 	mov.w	r3, #32
   15406:	f3ef 8711 	mrs	r7, BASEPRI
   1540a:	f383 8812 	msr	BASEPRI_MAX, r3
   1540e:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   15412:	4608      	mov	r0, r1
   15414:	f005 f89a 	bl	1a54c <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   15418:	ea55 0306 	orrs.w	r3, r5, r6
   1541c:	d109      	bne.n	15432 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   1541e:	4620      	mov	r0, r4
   15420:	a901      	add	r1, sp, #4
   15422:	f7ff fee3 	bl	151ec <submit_to_queue_locked>
	__asm__ volatile(
   15426:	f387 8811 	msr	BASEPRI, r7
   1542a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1542e:	b003      	add	sp, #12
   15430:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   15432:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   15434:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   15438:	f043 0308 	orr.w	r3, r3, #8
   1543c:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1543e:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   15440:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   15442:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   15444:	4902      	ldr	r1, [pc, #8]	; (15450 <k_work_reschedule_for_queue+0x58>)
   15446:	462b      	mov	r3, r5
   15448:	f000 fbbe 	bl	15bc8 <z_add_timeout>
	return ret;
   1544c:	2001      	movs	r0, #1
   1544e:	e7ea      	b.n	15426 <k_work_reschedule_for_queue+0x2e>
   15450:	0001a5df 	.word	0x0001a5df

00015454 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   15454:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   15456:	4801      	ldr	r0, [pc, #4]	; (1545c <k_work_reschedule+0x8>)
   15458:	f7ff bfce 	b.w	153f8 <k_work_reschedule_for_queue>
   1545c:	20009610 	.word	0x20009610

00015460 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   15460:	89c3      	ldrh	r3, [r0, #14]
   15462:	2b7f      	cmp	r3, #127	; 0x7f
   15464:	d812      	bhi.n	1548c <sliceable+0x2c>
	int ret = slice_ticks;
   15466:	4b0a      	ldr	r3, [pc, #40]	; (15490 <sliceable+0x30>)
   15468:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   1546a:	b163      	cbz	r3, 15486 <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1546c:	4b09      	ldr	r3, [pc, #36]	; (15494 <sliceable+0x34>)
   1546e:	f990 200e 	ldrsb.w	r2, [r0, #14]
   15472:	681b      	ldr	r3, [r3, #0]
   15474:	429a      	cmp	r2, r3
   15476:	db09      	blt.n	1548c <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
   15478:	7b43      	ldrb	r3, [r0, #13]
   1547a:	06db      	lsls	r3, r3, #27
   1547c:	d106      	bne.n	1548c <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   1547e:	4b06      	ldr	r3, [pc, #24]	; (15498 <sliceable+0x38>)
   15480:	1ac3      	subs	r3, r0, r3
   15482:	bf18      	it	ne
   15484:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   15486:	f003 0001 	and.w	r0, r3, #1
   1548a:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   1548c:	2300      	movs	r3, #0
   1548e:	e7fa      	b.n	15486 <sliceable+0x26>
   15490:	20009b1c 	.word	0x20009b1c
   15494:	20009b18 	.word	0x20009b18
   15498:	20009500 	.word	0x20009500

0001549c <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);

	slice_expired[cpu] = true;
   1549c:	2201      	movs	r2, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   1549e:	4b04      	ldr	r3, [pc, #16]	; (154b0 <slice_timeout+0x14>)
   154a0:	1ac0      	subs	r0, r0, r3
   154a2:	4b04      	ldr	r3, [pc, #16]	; (154b4 <slice_timeout+0x18>)
   154a4:	10c0      	asrs	r0, r0, #3
   154a6:	4358      	muls	r0, r3
	slice_expired[cpu] = true;
   154a8:	4b03      	ldr	r3, [pc, #12]	; (154b8 <slice_timeout+0x1c>)
   154aa:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   154ac:	4770      	bx	lr
   154ae:	bf00      	nop
   154b0:	200096b8 	.word	0x200096b8
   154b4:	aaaaaaab 	.word	0xaaaaaaab
   154b8:	20009be4 	.word	0x20009be4

000154bc <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
   154bc:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
   154be:	4b0e      	ldr	r3, [pc, #56]	; (154f8 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
   154c0:	4c0e      	ldr	r4, [pc, #56]	; (154fc <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
   154c2:	7c1e      	ldrb	r6, [r3, #16]
{
   154c4:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
   154c6:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   154ca:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   154ce:	4620      	mov	r0, r4
   154d0:	f005 fa5a 	bl	1a988 <z_abort_timeout>
	slice_expired[cpu] = false;
   154d4:	2200      	movs	r2, #0
   154d6:	4b0a      	ldr	r3, [pc, #40]	; (15500 <z_reset_time_slice+0x44>)
	if (sliceable(curr)) {
   154d8:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
   154da:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   154dc:	f7ff ffc0 	bl	15460 <sliceable>
   154e0:	b148      	cbz	r0, 154f6 <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
   154e2:	4b08      	ldr	r3, [pc, #32]	; (15504 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   154e4:	4620      	mov	r0, r4
			      K_TICKS(slice_time(curr) - 1));
	}
}
   154e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			      K_TICKS(slice_time(curr) - 1));
   154ea:	681a      	ldr	r2, [r3, #0]
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   154ec:	4906      	ldr	r1, [pc, #24]	; (15508 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
   154ee:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   154f0:	17d3      	asrs	r3, r2, #31
   154f2:	f000 bb69 	b.w	15bc8 <z_add_timeout>
}
   154f6:	bd70      	pop	{r4, r5, r6, pc}
   154f8:	20009ae8 	.word	0x20009ae8
   154fc:	200096b8 	.word	0x200096b8
   15500:	20009be4 	.word	0x20009be4
   15504:	20009b1c 	.word	0x20009b1c
   15508:	0001549d 	.word	0x0001549d

0001550c <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   1550c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1550e:	4d0d      	ldr	r5, [pc, #52]	; (15544 <update_cache+0x38>)
   15510:	462b      	mov	r3, r5
   15512:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15516:	429c      	cmp	r4, r3
   15518:	d000      	beq.n	1551c <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1551a:	b904      	cbnz	r4, 1551e <update_cache+0x12>
   1551c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   1551e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   15520:	b938      	cbnz	r0, 15532 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   15522:	7b5a      	ldrb	r2, [r3, #13]
   15524:	06d2      	lsls	r2, r2, #27
   15526:	d104      	bne.n	15532 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   15528:	69a2      	ldr	r2, [r4, #24]
   1552a:	b912      	cbnz	r2, 15532 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   1552c:	89da      	ldrh	r2, [r3, #14]
   1552e:	2a7f      	cmp	r2, #127	; 0x7f
   15530:	d805      	bhi.n	1553e <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   15532:	429c      	cmp	r4, r3
   15534:	d002      	beq.n	1553c <update_cache+0x30>
			z_reset_time_slice(thread);
   15536:	4620      	mov	r0, r4
   15538:	f7ff ffc0 	bl	154bc <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   1553c:	4623      	mov	r3, r4
   1553e:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   15540:	bd38      	pop	{r3, r4, r5, pc}
   15542:	bf00      	nop
   15544:	20009ae8 	.word	0x20009ae8

00015548 <move_thread_to_end_of_prio_q>:
{
   15548:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1554a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   1554e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   15550:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   15552:	7b43      	ldrb	r3, [r0, #13]
   15554:	da04      	bge.n	15560 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1555a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   1555c:	f005 f8f5 	bl	1a74a <sys_dlist_remove>
	return list->head == list;
   15560:	4a15      	ldr	r2, [pc, #84]	; (155b8 <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
   15562:	7b4b      	ldrb	r3, [r1, #13]
   15564:	4610      	mov	r0, r2
   15566:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1556a:	734b      	strb	r3, [r1, #13]
   1556c:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   15570:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15572:	4283      	cmp	r3, r0
   15574:	bf08      	it	eq
   15576:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15578:	b923      	cbnz	r3, 15584 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   1557a:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   1557e:	6021      	str	r1, [r4, #0]
	list->tail = node;
   15580:	6211      	str	r1, [r2, #32]
}
   15582:	e00c      	b.n	1559e <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   15584:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   15588:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   1558c:	42b5      	cmp	r5, r6
   1558e:	d00e      	beq.n	155ae <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   15590:	42ae      	cmp	r6, r5
   15592:	dd0c      	ble.n	155ae <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   15594:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   15596:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   1559a:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1559c:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   1559e:	6890      	ldr	r0, [r2, #8]
}
   155a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   155a4:	1a43      	subs	r3, r0, r1
   155a6:	4258      	negs	r0, r3
   155a8:	4158      	adcs	r0, r3
   155aa:	f7ff bfaf 	b.w	1550c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   155ae:	429c      	cmp	r4, r3
   155b0:	d0e3      	beq.n	1557a <move_thread_to_end_of_prio_q+0x32>
   155b2:	681b      	ldr	r3, [r3, #0]
   155b4:	e7e0      	b.n	15578 <move_thread_to_end_of_prio_q+0x30>
   155b6:	bf00      	nop
   155b8:	20009ae8 	.word	0x20009ae8

000155bc <ready_thread>:
{
   155bc:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   155be:	f990 300d 	ldrsb.w	r3, [r0, #13]
   155c2:	7b42      	ldrb	r2, [r0, #13]
   155c4:	2b00      	cmp	r3, #0
   155c6:	db29      	blt.n	1561c <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   155c8:	06d3      	lsls	r3, r2, #27
   155ca:	d127      	bne.n	1561c <ready_thread+0x60>
	return node->next != NULL;
   155cc:	6983      	ldr	r3, [r0, #24]
   155ce:	bb2b      	cbnz	r3, 1561c <ready_thread+0x60>
	return list->head == list;
   155d0:	4913      	ldr	r1, [pc, #76]	; (15620 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   155d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
   155d6:	7342      	strb	r2, [r0, #13]
   155d8:	460a      	mov	r2, r1
   155da:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   155de:	4294      	cmp	r4, r2
   155e0:	bf18      	it	ne
   155e2:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   155e4:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   155e6:	b923      	cbnz	r3, 155f2 <ready_thread+0x36>
	node->prev = tail;
   155e8:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   155ec:	6020      	str	r0, [r4, #0]
	list->tail = node;
   155ee:	6208      	str	r0, [r1, #32]
}
   155f0:	e00c      	b.n	1560c <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   155f2:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   155f6:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   155fa:	42b5      	cmp	r5, r6
   155fc:	d00a      	beq.n	15614 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   155fe:	42ae      	cmp	r6, r5
   15600:	dd08      	ble.n	15614 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   15602:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   15604:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   15608:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1560a:	6058      	str	r0, [r3, #4]
		update_cache(0);
   1560c:	2000      	movs	r0, #0
}
   1560e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   15610:	f7ff bf7c 	b.w	1550c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   15614:	42a3      	cmp	r3, r4
   15616:	d0e7      	beq.n	155e8 <ready_thread+0x2c>
   15618:	681b      	ldr	r3, [r3, #0]
   1561a:	e7e4      	b.n	155e6 <ready_thread+0x2a>
}
   1561c:	bc70      	pop	{r4, r5, r6}
   1561e:	4770      	bx	lr
   15620:	20009ae8 	.word	0x20009ae8

00015624 <unready_thread>:
{
   15624:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   15626:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   1562a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1562c:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   1562e:	7b43      	ldrb	r3, [r0, #13]
   15630:	da04      	bge.n	1563c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   15636:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   15638:	f005 f887 	bl	1a74a <sys_dlist_remove>
	update_cache(thread == _current);
   1563c:	4b04      	ldr	r3, [pc, #16]	; (15650 <unready_thread+0x2c>)
   1563e:	6898      	ldr	r0, [r3, #8]
   15640:	1a43      	subs	r3, r0, r1
   15642:	4258      	negs	r0, r3
   15644:	4158      	adcs	r0, r3
}
   15646:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1564a:	f7ff bf5f 	b.w	1550c <update_cache>
   1564e:	bf00      	nop
   15650:	20009ae8 	.word	0x20009ae8

00015654 <pend_locked>:
{
   15654:	b570      	push	{r4, r5, r6, lr}
   15656:	4615      	mov	r5, r2
   15658:	461c      	mov	r4, r3
   1565a:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   1565c:	f005 f890 	bl	1a780 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   15660:	f1b4 3fff 	cmp.w	r4, #4294967295
   15664:	bf08      	it	eq
   15666:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   1566a:	d008      	beq.n	1567e <pend_locked+0x2a>
   1566c:	462a      	mov	r2, r5
   1566e:	4623      	mov	r3, r4
   15670:	f106 0018 	add.w	r0, r6, #24
   15674:	4902      	ldr	r1, [pc, #8]	; (15680 <pend_locked+0x2c>)
}
   15676:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1567a:	f000 baa5 	b.w	15bc8 <z_add_timeout>
   1567e:	bd70      	pop	{r4, r5, r6, pc}
   15680:	0001a859 	.word	0x0001a859

00015684 <z_time_slice>:
{
   15684:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   15686:	f04f 0320 	mov.w	r3, #32
   1568a:	f3ef 8511 	mrs	r5, BASEPRI
   1568e:	f383 8812 	msr	BASEPRI_MAX, r3
   15692:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
   15696:	4b10      	ldr	r3, [pc, #64]	; (156d8 <z_time_slice+0x54>)
	if (pending_current == curr) {
   15698:	4a10      	ldr	r2, [pc, #64]	; (156dc <z_time_slice+0x58>)
	struct k_thread *curr = _current;
   1569a:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   1569c:	6810      	ldr	r0, [r2, #0]
   1569e:	42a0      	cmp	r0, r4
   156a0:	d106      	bne.n	156b0 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
   156a2:	f7ff ff0b 	bl	154bc <z_reset_time_slice>
	__asm__ volatile(
   156a6:	f385 8811 	msr	BASEPRI, r5
   156aa:	f3bf 8f6f 	isb	sy
}
   156ae:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   156b0:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   156b2:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
   156b4:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   156b6:	4a0a      	ldr	r2, [pc, #40]	; (156e0 <z_time_slice+0x5c>)
   156b8:	5cd3      	ldrb	r3, [r2, r3]
   156ba:	2b00      	cmp	r3, #0
   156bc:	d0f3      	beq.n	156a6 <z_time_slice+0x22>
   156be:	4620      	mov	r0, r4
   156c0:	f7ff fece 	bl	15460 <sliceable>
   156c4:	2800      	cmp	r0, #0
   156c6:	d0ee      	beq.n	156a6 <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
   156c8:	7b63      	ldrb	r3, [r4, #13]
   156ca:	06db      	lsls	r3, r3, #27
   156cc:	d102      	bne.n	156d4 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
   156ce:	4620      	mov	r0, r4
   156d0:	f7ff ff3a 	bl	15548 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
   156d4:	4620      	mov	r0, r4
   156d6:	e7e4      	b.n	156a2 <z_time_slice+0x1e>
   156d8:	20009ae8 	.word	0x20009ae8
   156dc:	20009b14 	.word	0x20009b14
   156e0:	20009be4 	.word	0x20009be4

000156e4 <z_pend_curr>:
{
   156e4:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   156e6:	480c      	ldr	r0, [pc, #48]	; (15718 <z_pend_curr+0x34>)
   156e8:	4d0c      	ldr	r5, [pc, #48]	; (1571c <z_pend_curr+0x38>)
   156ea:	6886      	ldr	r6, [r0, #8]
{
   156ec:	460c      	mov	r4, r1
	pending_current = _current;
   156ee:	602e      	str	r6, [r5, #0]
{
   156f0:	4611      	mov	r1, r2
   156f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   156f6:	f04f 0620 	mov.w	r6, #32
   156fa:	f3ef 8511 	mrs	r5, BASEPRI
   156fe:	f386 8812 	msr	BASEPRI_MAX, r6
   15702:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   15706:	6880      	ldr	r0, [r0, #8]
   15708:	f7ff ffa4 	bl	15654 <pend_locked>
	ret = arch_swap(key);
   1570c:	4620      	mov	r0, r4
}
   1570e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15712:	f7f5 be91 	b.w	b438 <arch_swap>
   15716:	bf00      	nop
   15718:	20009ae8 	.word	0x20009ae8
   1571c:	20009b14 	.word	0x20009b14

00015720 <z_set_prio>:
{
   15720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15722:	4604      	mov	r4, r0
   15724:	f04f 0320 	mov.w	r3, #32
   15728:	f3ef 8611 	mrs	r6, BASEPRI
   1572c:	f383 8812 	msr	BASEPRI_MAX, r3
   15730:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   15734:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   15736:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   15738:	06da      	lsls	r2, r3, #27
   1573a:	d119      	bne.n	15770 <z_set_prio+0x50>
	return node->next != NULL;
   1573c:	6985      	ldr	r5, [r0, #24]
   1573e:	b9bd      	cbnz	r5, 15770 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   15744:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   15746:	f005 f800 	bl	1a74a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1574a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   1574c:	4a16      	ldr	r2, [pc, #88]	; (157a8 <z_set_prio+0x88>)
   1574e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   15752:	7343      	strb	r3, [r0, #13]
   15754:	4613      	mov	r3, r2
				thread->base.prio = prio;
   15756:	7381      	strb	r1, [r0, #14]
   15758:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1575c:	4298      	cmp	r0, r3
   1575e:	bf18      	it	ne
   15760:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   15762:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15764:	b95d      	cbnz	r5, 1577e <z_set_prio+0x5e>
	node->prev = tail;
   15766:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   1576a:	6004      	str	r4, [r0, #0]
	list->tail = node;
   1576c:	6214      	str	r4, [r2, #32]
}
   1576e:	e011      	b.n	15794 <z_set_prio+0x74>
   15770:	2000      	movs	r0, #0
			thread->base.prio = prio;
   15772:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
   15774:	f386 8811 	msr	BASEPRI, r6
   15778:	f3bf 8f6f 	isb	sy
}
   1577c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   1577e:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   15782:	42b9      	cmp	r1, r7
   15784:	d00b      	beq.n	1579e <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   15786:	428f      	cmp	r7, r1
   15788:	dd09      	ble.n	1579e <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   1578a:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   1578c:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   15790:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   15792:	606c      	str	r4, [r5, #4]
			update_cache(1);
   15794:	2001      	movs	r0, #1
   15796:	f7ff feb9 	bl	1550c <update_cache>
   1579a:	2001      	movs	r0, #1
   1579c:	e7ea      	b.n	15774 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   1579e:	42a8      	cmp	r0, r5
   157a0:	d0e1      	beq.n	15766 <z_set_prio+0x46>
   157a2:	682d      	ldr	r5, [r5, #0]
   157a4:	e7de      	b.n	15764 <z_set_prio+0x44>
   157a6:	bf00      	nop
   157a8:	20009ae8 	.word	0x20009ae8

000157ac <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   157ac:	b949      	cbnz	r1, 157c2 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   157ae:	f3ef 8005 	mrs	r0, IPSR
   157b2:	b930      	cbnz	r0, 157c2 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   157b4:	4b05      	ldr	r3, [pc, #20]	; (157cc <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   157b6:	699a      	ldr	r2, [r3, #24]
   157b8:	689b      	ldr	r3, [r3, #8]
   157ba:	429a      	cmp	r2, r3
   157bc:	d001      	beq.n	157c2 <z_reschedule+0x16>
   157be:	f7f5 be3b 	b.w	b438 <arch_swap>
   157c2:	f381 8811 	msr	BASEPRI, r1
   157c6:	f3bf 8f6f 	isb	sy
}
   157ca:	4770      	bx	lr
   157cc:	20009ae8 	.word	0x20009ae8

000157d0 <z_sched_start>:
{
   157d0:	b510      	push	{r4, lr}
	__asm__ volatile(
   157d2:	f04f 0220 	mov.w	r2, #32
   157d6:	f3ef 8411 	mrs	r4, BASEPRI
   157da:	f382 8812 	msr	BASEPRI_MAX, r2
   157de:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   157e2:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   157e4:	0751      	lsls	r1, r2, #29
   157e6:	d404      	bmi.n	157f2 <z_sched_start+0x22>
	__asm__ volatile(
   157e8:	f384 8811 	msr	BASEPRI, r4
   157ec:	f3bf 8f6f 	isb	sy
}
   157f0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   157f2:	f022 0204 	bic.w	r2, r2, #4
   157f6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   157f8:	f7ff fee0 	bl	155bc <ready_thread>
	z_reschedule(&sched_spinlock, key);
   157fc:	4621      	mov	r1, r4
}
   157fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   15802:	4801      	ldr	r0, [pc, #4]	; (15808 <z_sched_start+0x38>)
   15804:	f7ff bfd2 	b.w	157ac <z_reschedule>
   15808:	20009be5 	.word	0x20009be5

0001580c <z_impl_k_thread_suspend>:
{
   1580c:	b570      	push	{r4, r5, r6, lr}
   1580e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   15810:	3018      	adds	r0, #24
   15812:	f005 f8b9 	bl	1a988 <z_abort_timeout>
	__asm__ volatile(
   15816:	f04f 0320 	mov.w	r3, #32
   1581a:	f3ef 8611 	mrs	r6, BASEPRI
   1581e:	f383 8812 	msr	BASEPRI_MAX, r3
   15822:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   15826:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   1582a:	7b63      	ldrb	r3, [r4, #13]
   1582c:	2a00      	cmp	r2, #0
   1582e:	da05      	bge.n	1583c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15830:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
   15834:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15836:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   15838:	f004 ff87 	bl	1a74a <sys_dlist_remove>
		update_cache(thread == _current);
   1583c:	4d0b      	ldr	r5, [pc, #44]	; (1586c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1583e:	7b63      	ldrb	r3, [r4, #13]
   15840:	68a8      	ldr	r0, [r5, #8]
   15842:	f043 0310 	orr.w	r3, r3, #16
   15846:	7363      	strb	r3, [r4, #13]
   15848:	1b03      	subs	r3, r0, r4
   1584a:	4258      	negs	r0, r3
   1584c:	4158      	adcs	r0, r3
   1584e:	f7ff fe5d 	bl	1550c <update_cache>
	__asm__ volatile(
   15852:	f386 8811 	msr	BASEPRI, r6
   15856:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1585a:	68ab      	ldr	r3, [r5, #8]
   1585c:	42a3      	cmp	r3, r4
   1585e:	d103      	bne.n	15868 <z_impl_k_thread_suspend+0x5c>
}
   15860:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   15864:	f005 b853 	b.w	1a90e <z_reschedule_unlocked>
}
   15868:	bd70      	pop	{r4, r5, r6, pc}
   1586a:	bf00      	nop
   1586c:	20009ae8 	.word	0x20009ae8

00015870 <k_sched_lock>:
	__asm__ volatile(
   15870:	f04f 0320 	mov.w	r3, #32
   15874:	f3ef 8111 	mrs	r1, BASEPRI
   15878:	f383 8812 	msr	BASEPRI_MAX, r3
   1587c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   15880:	4b04      	ldr	r3, [pc, #16]	; (15894 <k_sched_lock+0x24>)
   15882:	689a      	ldr	r2, [r3, #8]
   15884:	7bd3      	ldrb	r3, [r2, #15]
   15886:	3b01      	subs	r3, #1
   15888:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1588a:	f381 8811 	msr	BASEPRI, r1
   1588e:	f3bf 8f6f 	isb	sy
}
   15892:	4770      	bx	lr
   15894:	20009ae8 	.word	0x20009ae8

00015898 <k_sched_unlock>:
{
   15898:	b510      	push	{r4, lr}
	__asm__ volatile(
   1589a:	f04f 0320 	mov.w	r3, #32
   1589e:	f3ef 8411 	mrs	r4, BASEPRI
   158a2:	f383 8812 	msr	BASEPRI_MAX, r3
   158a6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   158aa:	4b08      	ldr	r3, [pc, #32]	; (158cc <k_sched_unlock+0x34>)
		update_cache(0);
   158ac:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   158ae:	689a      	ldr	r2, [r3, #8]
   158b0:	7bd3      	ldrb	r3, [r2, #15]
   158b2:	3301      	adds	r3, #1
   158b4:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   158b6:	f7ff fe29 	bl	1550c <update_cache>
	__asm__ volatile(
   158ba:	f384 8811 	msr	BASEPRI, r4
   158be:	f3bf 8f6f 	isb	sy
}
   158c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   158c6:	f005 b822 	b.w	1a90e <z_reschedule_unlocked>
   158ca:	bf00      	nop
   158cc:	20009ae8 	.word	0x20009ae8

000158d0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   158d0:	4b02      	ldr	r3, [pc, #8]	; (158dc <z_sched_init+0xc>)
   158d2:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
   158d6:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
   158da:	4770      	bx	lr
   158dc:	20009ae8 	.word	0x20009ae8

000158e0 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   158e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   158e2:	f04f 0320 	mov.w	r3, #32
   158e6:	f3ef 8511 	mrs	r5, BASEPRI
   158ea:	f383 8812 	msr	BASEPRI_MAX, r3
   158ee:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   158f2:	4919      	ldr	r1, [pc, #100]	; (15958 <z_impl_k_yield+0x78>)
   158f4:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   158f6:	7b43      	ldrb	r3, [r0, #13]
   158f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   158fc:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   158fe:	f004 ff24 	bl	1a74a <sys_dlist_remove>
	return list->head == list;
   15902:	4608      	mov	r0, r1
	}
	queue_thread(_current);
   15904:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   15906:	7b5a      	ldrb	r2, [r3, #13]
   15908:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1590c:	735a      	strb	r2, [r3, #13]
   1590e:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
   15912:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15914:	4282      	cmp	r2, r0
   15916:	bf08      	it	eq
   15918:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1591a:	b922      	cbnz	r2, 15926 <z_impl_k_yield+0x46>
	node->prev = tail;
   1591c:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   15920:	6023      	str	r3, [r4, #0]
	list->tail = node;
   15922:	620b      	str	r3, [r1, #32]
}
   15924:	e00c      	b.n	15940 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   15926:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   1592a:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   1592e:	42be      	cmp	r6, r7
   15930:	d00e      	beq.n	15950 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   15932:	42b7      	cmp	r7, r6
   15934:	dd0c      	ble.n	15950 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   15936:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   15938:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   1593c:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1593e:	6053      	str	r3, [r2, #4]
	update_cache(1);
   15940:	2001      	movs	r0, #1
   15942:	f7ff fde3 	bl	1550c <update_cache>
   15946:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   15948:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1594c:	f7f5 bd74 	b.w	b438 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   15950:	42a2      	cmp	r2, r4
   15952:	d0e3      	beq.n	1591c <z_impl_k_yield+0x3c>
   15954:	6812      	ldr	r2, [r2, #0]
   15956:	e7e0      	b.n	1591a <z_impl_k_yield+0x3a>
   15958:	20009ae8 	.word	0x20009ae8

0001595c <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1595c:	ea50 0301 	orrs.w	r3, r0, r1
{
   15960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15964:	4605      	mov	r5, r0
   15966:	460e      	mov	r6, r1
	if (ticks == 0) {
   15968:	d103      	bne.n	15972 <z_tick_sleep+0x16>
	z_impl_k_yield();
   1596a:	f7ff ffb9 	bl	158e0 <z_impl_k_yield>
		k_yield();
		return 0;
   1596e:	2000      	movs	r0, #0
   15970:	e02c      	b.n	159cc <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   15972:	1c83      	adds	r3, r0, #2
   15974:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   15978:	db2a      	blt.n	159d0 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1597a:	f005 f82b 	bl	1a9d4 <sys_clock_tick_get_32>
   1597e:	182c      	adds	r4, r5, r0
   15980:	f04f 0320 	mov.w	r3, #32
   15984:	f3ef 8811 	mrs	r8, BASEPRI
   15988:	f383 8812 	msr	BASEPRI_MAX, r3
   1598c:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   15990:	4f11      	ldr	r7, [pc, #68]	; (159d8 <z_tick_sleep+0x7c>)
   15992:	4b12      	ldr	r3, [pc, #72]	; (159dc <z_tick_sleep+0x80>)
   15994:	68b8      	ldr	r0, [r7, #8]
   15996:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   15998:	f7ff fe44 	bl	15624 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1599c:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1599e:	4910      	ldr	r1, [pc, #64]	; (159e0 <z_tick_sleep+0x84>)
   159a0:	462a      	mov	r2, r5
   159a2:	4633      	mov	r3, r6
   159a4:	3018      	adds	r0, #24
   159a6:	f000 f90f 	bl	15bc8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   159aa:	68ba      	ldr	r2, [r7, #8]
   159ac:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
   159ae:	7b53      	ldrb	r3, [r2, #13]
   159b0:	f043 0310 	orr.w	r3, r3, #16
   159b4:	7353      	strb	r3, [r2, #13]
   159b6:	f7f5 fd3f 	bl	b438 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   159ba:	f005 f80b 	bl	1a9d4 <sys_clock_tick_get_32>
   159be:	1a20      	subs	r0, r4, r0
   159c0:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   159c4:	2801      	cmp	r0, #1
   159c6:	f173 0300 	sbcs.w	r3, r3, #0
   159ca:	dbd0      	blt.n	1596e <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   159cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   159d0:	f06f 0401 	mvn.w	r4, #1
   159d4:	1a24      	subs	r4, r4, r0
   159d6:	e7d3      	b.n	15980 <z_tick_sleep+0x24>
   159d8:	20009ae8 	.word	0x20009ae8
   159dc:	20009b14 	.word	0x20009b14
   159e0:	0001a859 	.word	0x0001a859

000159e4 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   159e4:	f1b1 3fff 	cmp.w	r1, #4294967295
   159e8:	bf08      	it	eq
   159ea:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   159ee:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   159f0:	d106      	bne.n	15a00 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   159f2:	4b08      	ldr	r3, [pc, #32]	; (15a14 <z_impl_k_sleep+0x30>)
   159f4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   159f6:	f7ff ff09 	bl	1580c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   159fa:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   159fe:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   15a00:	f7ff ffac 	bl	1595c <z_tick_sleep>
   15a04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   15a08:	fb80 0303 	smull	r0, r3, r0, r3
   15a0c:	0bc0      	lsrs	r0, r0, #15
   15a0e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   15a12:	e7f4      	b.n	159fe <z_impl_k_sleep+0x1a>
   15a14:	20009ae8 	.word	0x20009ae8

00015a18 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   15a18:	4b01      	ldr	r3, [pc, #4]	; (15a20 <z_impl_z_current_get+0x8>)
   15a1a:	6898      	ldr	r0, [r3, #8]
   15a1c:	4770      	bx	lr
   15a1e:	bf00      	nop
   15a20:	20009ae8 	.word	0x20009ae8

00015a24 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   15a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15a28:	4604      	mov	r4, r0
   15a2a:	f04f 0320 	mov.w	r3, #32
   15a2e:	f3ef 8611 	mrs	r6, BASEPRI
   15a32:	f383 8812 	msr	BASEPRI_MAX, r3
   15a36:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   15a3a:	7b03      	ldrb	r3, [r0, #12]
   15a3c:	07d9      	lsls	r1, r3, #31
   15a3e:	d50b      	bpl.n	15a58 <z_thread_abort+0x34>
	__asm__ volatile(
   15a40:	f386 8811 	msr	BASEPRI, r6
   15a44:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   15a48:	4040      	eors	r0, r0
   15a4a:	f380 8811 	msr	BASEPRI, r0
   15a4e:	f04f 0004 	mov.w	r0, #4
   15a52:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   15a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   15a58:	7b43      	ldrb	r3, [r0, #13]
   15a5a:	071a      	lsls	r2, r3, #28
   15a5c:	d504      	bpl.n	15a68 <z_thread_abort+0x44>
   15a5e:	f386 8811 	msr	BASEPRI, r6
   15a62:	f3bf 8f6f 	isb	sy
   15a66:	e7f5      	b.n	15a54 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   15a68:	f023 0220 	bic.w	r2, r3, #32
   15a6c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   15a70:	09d2      	lsrs	r2, r2, #7
   15a72:	d120      	bne.n	15ab6 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   15a74:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   15a76:	68a3      	ldr	r3, [r4, #8]
   15a78:	b113      	cbz	r3, 15a80 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   15a7a:	4620      	mov	r0, r4
   15a7c:	f004 fe6d 	bl	1a75a <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   15a80:	f104 0018 	add.w	r0, r4, #24
   15a84:	f004 ff80 	bl	1a988 <z_abort_timeout>
   15a88:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   15a8c:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   15a90:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15a92:	42bd      	cmp	r5, r7
   15a94:	d000      	beq.n	15a98 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   15a96:	b9b5      	cbnz	r5, 15ac6 <z_thread_abort+0xa2>
		update_cache(1);
   15a98:	2001      	movs	r0, #1
   15a9a:	f7ff fd37 	bl	1550c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   15a9e:	4b10      	ldr	r3, [pc, #64]	; (15ae0 <z_thread_abort+0xbc>)
   15aa0:	689b      	ldr	r3, [r3, #8]
   15aa2:	42a3      	cmp	r3, r4
   15aa4:	d1db      	bne.n	15a5e <z_thread_abort+0x3a>
   15aa6:	f3ef 8305 	mrs	r3, IPSR
   15aaa:	2b00      	cmp	r3, #0
   15aac:	d1d7      	bne.n	15a5e <z_thread_abort+0x3a>
   15aae:	4630      	mov	r0, r6
   15ab0:	f7f5 fcc2 	bl	b438 <arch_swap>
	return ret;
   15ab4:	e7d3      	b.n	15a5e <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15ab6:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   15aba:	f043 0308 	orr.w	r3, r3, #8
   15abe:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   15ac0:	f004 fe43 	bl	1a74a <sys_dlist_remove>
}
   15ac4:	e7d7      	b.n	15a76 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   15ac6:	4628      	mov	r0, r5
   15ac8:	f004 fe47 	bl	1a75a <unpend_thread_no_timeout>
   15acc:	f105 0018 	add.w	r0, r5, #24
   15ad0:	f004 ff5a 	bl	1a988 <z_abort_timeout>
		ready_thread(thread);
   15ad4:	4628      	mov	r0, r5
   15ad6:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   15ada:	f7ff fd6f 	bl	155bc <ready_thread>
   15ade:	e7d7      	b.n	15a90 <z_thread_abort+0x6c>
   15ae0:	20009ae8 	.word	0x20009ae8

00015ae4 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   15ae4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   15ae6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   15aea:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   15aec:	e9cd 6700 	strd	r6, r7, [sp]
   15af0:	f7ff fdf8 	bl	156e4 <z_pend_curr>

	if (data != NULL) {
   15af4:	b11c      	cbz	r4, 15afe <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   15af6:	4b03      	ldr	r3, [pc, #12]	; (15b04 <z_sched_wait+0x20>)
   15af8:	689b      	ldr	r3, [r3, #8]
   15afa:	695b      	ldr	r3, [r3, #20]
   15afc:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   15afe:	b002      	add	sp, #8
   15b00:	bdd0      	pop	{r4, r6, r7, pc}
   15b02:	bf00      	nop
   15b04:	20009ae8 	.word	0x20009ae8

00015b08 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   15b08:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   15b0a:	4806      	ldr	r0, [pc, #24]	; (15b24 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   15b0c:	4a06      	ldr	r2, [pc, #24]	; (15b28 <z_data_copy+0x20>)
   15b0e:	4907      	ldr	r1, [pc, #28]	; (15b2c <z_data_copy+0x24>)
   15b10:	1a12      	subs	r2, r2, r0
   15b12:	f004 fb93 	bl	1a23c <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   15b16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   15b1a:	4a05      	ldr	r2, [pc, #20]	; (15b30 <z_data_copy+0x28>)
   15b1c:	4905      	ldr	r1, [pc, #20]	; (15b34 <z_data_copy+0x2c>)
   15b1e:	4806      	ldr	r0, [pc, #24]	; (15b38 <z_data_copy+0x30>)
   15b20:	f004 bb8c 	b.w	1a23c <z_early_memcpy>
   15b24:	20008000 	.word	0x20008000
   15b28:	20008744 	.word	0x20008744
   15b2c:	0001dde8 	.word	0x0001dde8
   15b30:	00000000 	.word	0x00000000
   15b34:	0001dde8 	.word	0x0001dde8
   15b38:	20008000 	.word	0x20008000

00015b3c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   15b3c:	4b03      	ldr	r3, [pc, #12]	; (15b4c <elapsed+0x10>)
   15b3e:	681b      	ldr	r3, [r3, #0]
   15b40:	b90b      	cbnz	r3, 15b46 <elapsed+0xa>
   15b42:	f7fd b9cd 	b.w	12ee0 <sys_clock_elapsed>
}
   15b46:	2000      	movs	r0, #0
   15b48:	4770      	bx	lr
   15b4a:	bf00      	nop
   15b4c:	20009b20 	.word	0x20009b20

00015b50 <next_timeout>:

static int32_t next_timeout(void)
{
   15b50:	b510      	push	{r4, lr}
	return list->head == list;
   15b52:	4b0e      	ldr	r3, [pc, #56]	; (15b8c <next_timeout+0x3c>)
   15b54:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15b56:	429c      	cmp	r4, r3
   15b58:	d104      	bne.n	15b64 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   15b5a:	f7ff ffef 	bl	15b3c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   15b5e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
   15b62:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   15b64:	f7ff ffea 	bl	15b3c <elapsed>
	if ((to == NULL) ||
   15b68:	2c00      	cmp	r4, #0
   15b6a:	d0f8      	beq.n	15b5e <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   15b6c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   15b70:	1a1b      	subs	r3, r3, r0
   15b72:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   15b76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   15b7a:	f172 0100 	sbcs.w	r1, r2, #0
   15b7e:	daee      	bge.n	15b5e <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   15b80:	2a00      	cmp	r2, #0
   15b82:	bfac      	ite	ge
   15b84:	4618      	movge	r0, r3
   15b86:	2000      	movlt	r0, #0
	return ret;
   15b88:	e7eb      	b.n	15b62 <next_timeout+0x12>
   15b8a:	bf00      	nop
   15b8c:	200083d0 	.word	0x200083d0

00015b90 <remove_timeout>:
{
   15b90:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   15b92:	b170      	cbz	r0, 15bb2 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   15b94:	4b0b      	ldr	r3, [pc, #44]	; (15bc4 <remove_timeout+0x34>)
   15b96:	685b      	ldr	r3, [r3, #4]
   15b98:	4298      	cmp	r0, r3
   15b9a:	d00a      	beq.n	15bb2 <remove_timeout+0x22>
   15b9c:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   15b9e:	b143      	cbz	r3, 15bb2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   15ba0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   15ba4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   15ba8:	1912      	adds	r2, r2, r4
   15baa:	eb41 0105 	adc.w	r1, r1, r5
   15bae:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   15bb2:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   15bb6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   15bb8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   15bba:	2300      	movs	r3, #0
	node->prev = NULL;
   15bbc:	e9c0 3300 	strd	r3, r3, [r0]
}
   15bc0:	bd30      	pop	{r4, r5, pc}
   15bc2:	bf00      	nop
   15bc4:	200083d0 	.word	0x200083d0

00015bc8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   15bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
   15bcc:	bf08      	it	eq
   15bce:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   15bd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15bd4:	4604      	mov	r4, r0
   15bd6:	461d      	mov	r5, r3
   15bd8:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   15bda:	d05c      	beq.n	15c96 <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   15bdc:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   15bde:	f04f 0320 	mov.w	r3, #32
   15be2:	f3ef 8711 	mrs	r7, BASEPRI
   15be6:	f383 8812 	msr	BASEPRI_MAX, r3
   15bea:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   15bee:	3201      	adds	r2, #1
   15bf0:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   15bf4:	da24      	bge.n	15c40 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   15bf6:	f06f 0301 	mvn.w	r3, #1
   15bfa:	492c      	ldr	r1, [pc, #176]	; (15cac <z_add_timeout+0xe4>)
   15bfc:	e9d1 2000 	ldrd	r2, r0, [r1]
   15c00:	1a9b      	subs	r3, r3, r2
   15c02:	f04f 32ff 	mov.w	r2, #4294967295
   15c06:	eb62 0000 	sbc.w	r0, r2, r0
   15c0a:	1b9e      	subs	r6, r3, r6
   15c0c:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   15c10:	2e01      	cmp	r6, #1
   15c12:	f170 0300 	sbcs.w	r3, r0, #0
   15c16:	da01      	bge.n	15c1c <z_add_timeout+0x54>
   15c18:	2601      	movs	r6, #1
   15c1a:	2000      	movs	r0, #0
   15c1c:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   15c20:	4e23      	ldr	r6, [pc, #140]	; (15cb0 <z_add_timeout+0xe8>)
   15c22:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   15c26:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15c28:	45b4      	cmp	ip, r6
   15c2a:	bf08      	it	eq
   15c2c:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   15c30:	f1bc 0f00 	cmp.w	ip, #0
   15c34:	d10d      	bne.n	15c52 <z_add_timeout+0x8a>
	node->prev = tail;
   15c36:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   15c3a:	602c      	str	r4, [r5, #0]
	list->tail = node;
   15c3c:	6074      	str	r4, [r6, #4]
}
   15c3e:	e01c      	b.n	15c7a <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   15c40:	f7ff ff7c 	bl	15b3c <elapsed>
   15c44:	3601      	adds	r6, #1
   15c46:	f145 0500 	adc.w	r5, r5, #0
   15c4a:	1836      	adds	r6, r6, r0
   15c4c:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   15c50:	e7e4      	b.n	15c1c <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   15c52:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   15c56:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   15c5a:	4293      	cmp	r3, r2
   15c5c:	eb71 0e00 	sbcs.w	lr, r1, r0
   15c60:	da1a      	bge.n	15c98 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
   15c62:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   15c64:	f8dc 3004 	ldr.w	r3, [ip, #4]
   15c68:	eb60 0001 	sbc.w	r0, r0, r1
   15c6c:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   15c70:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   15c74:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   15c76:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   15c7a:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15c7c:	42b3      	cmp	r3, r6
   15c7e:	d006      	beq.n	15c8e <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   15c80:	429c      	cmp	r4, r3
   15c82:	d104      	bne.n	15c8e <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
   15c84:	f7ff ff64 	bl	15b50 <next_timeout>
   15c88:	2100      	movs	r1, #0
   15c8a:	f7fd f8f7 	bl	12e7c <sys_clock_set_timeout>
	__asm__ volatile(
   15c8e:	f387 8811 	msr	BASEPRI, r7
   15c92:	f3bf 8f6f 	isb	sy
		}
	}
}
   15c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   15c98:	1a9b      	subs	r3, r3, r2
   15c9a:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   15c9e:	45ac      	cmp	ip, r5
   15ca0:	e9c4 3104 	strd	r3, r1, [r4, #16]
   15ca4:	d0c7      	beq.n	15c36 <z_add_timeout+0x6e>
   15ca6:	f8dc c000 	ldr.w	ip, [ip]
   15caa:	e7c1      	b.n	15c30 <z_add_timeout+0x68>
   15cac:	200096d0 	.word	0x200096d0
   15cb0:	200083d0 	.word	0x200083d0

00015cb4 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
   15cb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
   15cb8:	f04f 0320 	mov.w	r3, #32
   15cbc:	f3ef 8c11 	mrs	ip, BASEPRI
   15cc0:	f383 8812 	msr	BASEPRI_MAX, r3
   15cc4:	f3bf 8f6f 	isb	sy
	return list->head == list;
   15cc8:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 15d7c <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   15ccc:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 15d80 <sys_clock_announce+0xcc>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
   15cd0:	2400      	movs	r4, #0
	announce_remaining = ticks;
   15cd2:	f8c9 0000 	str.w	r0, [r9]
   15cd6:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
   15cda:	2500      	movs	r5, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15cdc:	4550      	cmp	r0, sl
   15cde:	bf08      	it	eq
   15ce0:	2000      	moveq	r0, #0
		curr_tick += dt;
   15ce2:	4f28      	ldr	r7, [pc, #160]	; (15d84 <sys_clock_announce+0xd0>)
   15ce4:	46e0      	mov	r8, ip
   15ce6:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
   15cea:	f8d9 3000 	ldr.w	r3, [r9]
   15cee:	b380      	cbz	r0, 15d52 <sys_clock_announce+0x9e>
   15cf0:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
   15cf4:	ea4f 7ee3 	mov.w	lr, r3, asr #31
   15cf8:	42b3      	cmp	r3, r6
   15cfa:	eb7e 0b0c 	sbcs.w	fp, lr, ip
   15cfe:	da05      	bge.n	15d0c <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
   15d00:	1af6      	subs	r6, r6, r3
   15d02:	eb6c 040e 	sbc.w	r4, ip, lr
   15d06:	e9c0 6404 	strd	r6, r4, [r0, #16]
   15d0a:	e022      	b.n	15d52 <sys_clock_announce+0x9e>
		curr_tick += dt;
   15d0c:	18b2      	adds	r2, r6, r2
   15d0e:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
   15d12:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
   15d16:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
   15d1a:	f7ff ff39 	bl	15b90 <remove_timeout>
	__asm__ volatile(
   15d1e:	f388 8811 	msr	BASEPRI, r8
   15d22:	f3bf 8f6f 	isb	sy
		t->fn(t);
   15d26:	6883      	ldr	r3, [r0, #8]
   15d28:	4798      	blx	r3
	__asm__ volatile(
   15d2a:	f04f 0320 	mov.w	r3, #32
   15d2e:	f3ef 8811 	mrs	r8, BASEPRI
   15d32:	f383 8812 	msr	BASEPRI_MAX, r3
   15d36:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   15d3a:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
   15d3e:	f8da 0000 	ldr.w	r0, [sl]
   15d42:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15d44:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
   15d46:	46c4      	mov	ip, r8
   15d48:	f8c9 3000 	str.w	r3, [r9]
   15d4c:	d1ca      	bne.n	15ce4 <sys_clock_announce+0x30>
		curr_tick += dt;
   15d4e:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   15d52:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   15d54:	189a      	adds	r2, r3, r2
   15d56:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
   15d5a:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
   15d5e:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
   15d62:	f7ff fef5 	bl	15b50 <next_timeout>
   15d66:	4621      	mov	r1, r4
   15d68:	f7fd f888 	bl	12e7c <sys_clock_set_timeout>
	__asm__ volatile(
   15d6c:	f388 8811 	msr	BASEPRI, r8
   15d70:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
   15d74:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
   15d78:	f7ff bc84 	b.w	15684 <z_time_slice>
   15d7c:	200083d0 	.word	0x200083d0
   15d80:	20009b20 	.word	0x20009b20
   15d84:	200096d0 	.word	0x200096d0

00015d88 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   15d88:	b510      	push	{r4, lr}
	__asm__ volatile(
   15d8a:	f04f 0320 	mov.w	r3, #32
   15d8e:	f3ef 8411 	mrs	r4, BASEPRI
   15d92:	f383 8812 	msr	BASEPRI_MAX, r3
   15d96:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   15d9a:	f7ff fecf 	bl	15b3c <elapsed>
   15d9e:	4603      	mov	r3, r0
   15da0:	4a05      	ldr	r2, [pc, #20]	; (15db8 <sys_clock_tick_get+0x30>)
   15da2:	e9d2 0100 	ldrd	r0, r1, [r2]
   15da6:	1818      	adds	r0, r3, r0
   15da8:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   15dac:	f384 8811 	msr	BASEPRI, r4
   15db0:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   15db4:	bd10      	pop	{r4, pc}
   15db6:	bf00      	nop
   15db8:	200096d0 	.word	0x200096d0

00015dbc <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   15dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15dbe:	4604      	mov	r4, r0
	__asm__ volatile(
   15dc0:	f04f 0320 	mov.w	r3, #32
   15dc4:	f3ef 8711 	mrs	r7, BASEPRI
   15dc8:	f383 8812 	msr	BASEPRI_MAX, r3
   15dcc:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
   15dd0:	6802      	ldr	r2, [r0, #0]
   15dd2:	b122      	cbz	r2, 15dde <z_timer_expiration_handler+0x22>
	__asm__ volatile(
   15dd4:	f387 8811 	msr	BASEPRI, r7
   15dd8:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   15ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   15dde:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
   15de2:	1c58      	adds	r0, r3, #1
   15de4:	f146 0100 	adc.w	r1, r6, #0
   15de8:	2802      	cmp	r0, #2
   15dea:	f171 0100 	sbcs.w	r1, r1, #0
   15dee:	d327      	bcc.n	15e40 <z_timer_expiration_handler+0x84>
		next.ticks = MAX(next.ticks - 1, 0);
   15df0:	2b01      	cmp	r3, #1
   15df2:	f176 0100 	sbcs.w	r1, r6, #0
   15df6:	bfbc      	itt	lt
   15df8:	2301      	movlt	r3, #1
   15dfa:	4616      	movlt	r6, r2
   15dfc:	1e5d      	subs	r5, r3, #1
   15dfe:	f146 36ff 	adc.w	r6, r6, #4294967295
	return z_impl_k_uptime_ticks();
   15e02:	f004 fdeb 	bl	1a9dc <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   15e06:	3001      	adds	r0, #1
   15e08:	f141 0100 	adc.w	r1, r1, #0
   15e0c:	1940      	adds	r0, r0, r5
   15e0e:	eb46 0101 	adc.w	r1, r6, r1
   15e12:	2801      	cmp	r0, #1
   15e14:	f171 0100 	sbcs.w	r1, r1, #0
   15e18:	db3a      	blt.n	15e90 <z_timer_expiration_handler+0xd4>
   15e1a:	f004 fddf 	bl	1a9dc <z_impl_k_uptime_ticks>
   15e1e:	3001      	adds	r0, #1
   15e20:	f141 0100 	adc.w	r1, r1, #0
   15e24:	f06f 0201 	mvn.w	r2, #1
   15e28:	1940      	adds	r0, r0, r5
   15e2a:	eb46 0301 	adc.w	r3, r6, r1
   15e2e:	f04f 31ff 	mov.w	r1, #4294967295
   15e32:	1a12      	subs	r2, r2, r0
   15e34:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   15e38:	4620      	mov	r0, r4
   15e3a:	4918      	ldr	r1, [pc, #96]	; (15e9c <z_timer_expiration_handler+0xe0>)
   15e3c:	f7ff fec4 	bl	15bc8 <z_add_timeout>
	timer->status += 1U;
   15e40:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15e42:	3301      	adds	r3, #1
   15e44:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
   15e46:	6a23      	ldr	r3, [r4, #32]
   15e48:	b173      	cbz	r3, 15e68 <z_timer_expiration_handler+0xac>
   15e4a:	f387 8811 	msr	BASEPRI, r7
   15e4e:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
   15e52:	4620      	mov	r0, r4
   15e54:	6a23      	ldr	r3, [r4, #32]
   15e56:	4798      	blx	r3
	__asm__ volatile(
   15e58:	f04f 0320 	mov.w	r3, #32
   15e5c:	f3ef 8711 	mrs	r7, BASEPRI
   15e60:	f383 8812 	msr	BASEPRI_MAX, r3
   15e64:	f3bf 8f6f 	isb	sy
	return list->head == list;
   15e68:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15e6c:	42a5      	cmp	r5, r4
   15e6e:	d0b1      	beq.n	15dd4 <z_timer_expiration_handler+0x18>
	if (thread == NULL) {
   15e70:	2d00      	cmp	r5, #0
   15e72:	d0af      	beq.n	15dd4 <z_timer_expiration_handler+0x18>
	z_unpend_thread_no_timeout(thread);
   15e74:	4628      	mov	r0, r5
   15e76:	f004 fcbb 	bl	1a7f0 <z_unpend_thread_no_timeout>
   15e7a:	2300      	movs	r3, #0
   15e7c:	67eb      	str	r3, [r5, #124]	; 0x7c
	__asm__ volatile(
   15e7e:	f387 8811 	msr	BASEPRI, r7
   15e82:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   15e86:	4628      	mov	r0, r5
}
   15e88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   15e8c:	f004 bca0 	b.w	1a7d0 <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   15e90:	f06f 0201 	mvn.w	r2, #1
   15e94:	f04f 33ff 	mov.w	r3, #4294967295
   15e98:	e7ce      	b.n	15e38 <z_timer_expiration_handler+0x7c>
   15e9a:	bf00      	nop
   15e9c:	00015dbd 	.word	0x00015dbd

00015ea0 <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   15ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
   15ea4:	bf08      	it	eq
   15ea6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   15eaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15eae:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   15eb2:	4605      	mov	r5, r0
   15eb4:	461c      	mov	r4, r3
   15eb6:	4691      	mov	r9, r2
   15eb8:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   15eba:	d01c      	beq.n	15ef6 <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
   15ebc:	1c53      	adds	r3, r2, #1
   15ebe:	f174 33ff 	sbcs.w	r3, r4, #4294967295
   15ec2:	db09      	blt.n	15ed8 <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
   15ec4:	2a01      	cmp	r2, #1
   15ec6:	f174 0300 	sbcs.w	r3, r4, #0
   15eca:	bfbc      	itt	lt
   15ecc:	2201      	movlt	r2, #1
   15ece:	2400      	movlt	r4, #0
   15ed0:	f112 39ff 	adds.w	r9, r2, #4294967295
   15ed4:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   15ed8:	4628      	mov	r0, r5
   15eda:	f004 fd55 	bl	1a988 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   15ede:	2300      	movs	r3, #0
	timer->period = period;
   15ee0:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
   15ee4:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   15ee6:	464a      	mov	r2, r9
   15ee8:	4643      	mov	r3, r8
   15eea:	4628      	mov	r0, r5
		     duration);
}
   15eec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   15ef0:	4902      	ldr	r1, [pc, #8]	; (15efc <z_impl_k_timer_start+0x5c>)
   15ef2:	f7ff be69 	b.w	15bc8 <z_add_timeout>
}
   15ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15efa:	bf00      	nop
   15efc:	00015dbd 	.word	0x00015dbd

00015f00 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   15f00:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   15f04:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   15f06:	4b29      	ldr	r3, [pc, #164]	; (15fac <z_impl_k_poll+0xac>)
{
   15f08:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   15f0a:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   15f0c:	2301      	movs	r3, #1
   15f0e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   15f12:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   15f16:	ea52 0305 	orrs.w	r3, r2, r5
   15f1a:	bf0c      	ite	eq
   15f1c:	2301      	moveq	r3, #1
   15f1e:	2300      	movne	r3, #0
   15f20:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   15f24:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   15f26:	f004 fddb 	bl	1aae0 <register_events>
   15f2a:	4681      	mov	r9, r0
	__asm__ volatile(
   15f2c:	f04f 0320 	mov.w	r3, #32
   15f30:	f3ef 8a11 	mrs	sl, BASEPRI
   15f34:	f383 8812 	msr	BASEPRI_MAX, r3
   15f38:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   15f3c:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   15f40:	b964      	cbnz	r4, 15f5c <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   15f42:	4601      	mov	r1, r0
   15f44:	4652      	mov	r2, sl
   15f46:	4640      	mov	r0, r8
   15f48:	f004 fe9b 	bl	1ac82 <clear_event_registrations>
	__asm__ volatile(
   15f4c:	f38a 8811 	msr	BASEPRI, sl
   15f50:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   15f54:	4620      	mov	r0, r4
   15f56:	b002      	add	sp, #8
   15f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   15f5c:	2300      	movs	r3, #0
   15f5e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   15f62:	ea56 0305 	orrs.w	r3, r6, r5
   15f66:	d106      	bne.n	15f76 <z_impl_k_poll+0x76>
   15f68:	f38a 8811 	msr	BASEPRI, sl
   15f6c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   15f70:	f06f 040a 	mvn.w	r4, #10
   15f74:	e7ee      	b.n	15f54 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   15f76:	4651      	mov	r1, sl
   15f78:	e9cd 6500 	strd	r6, r5, [sp]
   15f7c:	4a0c      	ldr	r2, [pc, #48]	; (15fb0 <z_impl_k_poll+0xb0>)
   15f7e:	480d      	ldr	r0, [pc, #52]	; (15fb4 <z_impl_k_poll+0xb4>)
   15f80:	f7ff fbb0 	bl	156e4 <z_pend_curr>
   15f84:	4604      	mov	r4, r0
	__asm__ volatile(
   15f86:	f04f 0320 	mov.w	r3, #32
   15f8a:	f3ef 8511 	mrs	r5, BASEPRI
   15f8e:	f383 8812 	msr	BASEPRI_MAX, r3
   15f92:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   15f96:	462a      	mov	r2, r5
   15f98:	4649      	mov	r1, r9
   15f9a:	4640      	mov	r0, r8
   15f9c:	f004 fe71 	bl	1ac82 <clear_event_registrations>
	__asm__ volatile(
   15fa0:	f385 8811 	msr	BASEPRI, r5
   15fa4:	f3bf 8f6f 	isb	sy
	return swap_rc;
   15fa8:	e7d4      	b.n	15f54 <z_impl_k_poll+0x54>
   15faa:	bf00      	nop
   15fac:	20009ae8 	.word	0x20009ae8
   15fb0:	200083d8 	.word	0x200083d8
   15fb4:	20009be5 	.word	0x20009be5

00015fb8 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   15fb8:	b538      	push	{r3, r4, r5, lr}
   15fba:	4603      	mov	r3, r0
	__asm__ volatile(
   15fbc:	f04f 0220 	mov.w	r2, #32
   15fc0:	f3ef 8511 	mrs	r5, BASEPRI
   15fc4:	f382 8812 	msr	BASEPRI_MAX, r2
   15fc8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   15fcc:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   15fce:	2101      	movs	r1, #1
   15fd0:	6081      	str	r1, [r0, #8]
	return list->head == list;
   15fd2:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   15fd4:	4283      	cmp	r3, r0
   15fd6:	d106      	bne.n	15fe6 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   15fd8:	f385 8811 	msr	BASEPRI, r5
   15fdc:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   15fe0:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   15fe2:	4620      	mov	r0, r4
   15fe4:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   15fe6:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   15fea:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   15fec:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   15fee:	2300      	movs	r3, #0
	node->prev = NULL;
   15ff0:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   15ff4:	f004 fdeb 	bl	1abce <signal_poll_event>
	z_reschedule(&lock, key);
   15ff8:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   15ffa:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   15ffc:	4801      	ldr	r0, [pc, #4]	; (16004 <z_impl_k_poll_signal_raise+0x4c>)
   15ffe:	f7ff fbd5 	bl	157ac <z_reschedule>
	return rc;
   16002:	e7ee      	b.n	15fe2 <z_impl_k_poll_signal_raise+0x2a>
   16004:	20009be5 	.word	0x20009be5

00016008 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   16008:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   1600a:	4601      	mov	r1, r0
   1600c:	4801      	ldr	r0, [pc, #4]	; (16014 <k_aligned_alloc+0xc>)
   1600e:	f004 be89 	b.w	1ad24 <z_heap_aligned_alloc>
   16012:	bf00      	nop
   16014:	20008588 	.word	0x20008588

00016018 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   16018:	4b01      	ldr	r3, [pc, #4]	; (16020 <k_thread_system_pool_assign+0x8>)
   1601a:	6743      	str	r3, [r0, #116]	; 0x74
}
   1601c:	4770      	bx	lr
   1601e:	bf00      	nop
   16020:	20008588 	.word	0x20008588

00016024 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   16024:	b538      	push	{r3, r4, r5, lr}
   16026:	4604      	mov	r4, r0
   16028:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1602a:	f004 f9ba 	bl	1a3a2 <k_is_in_isr>
   1602e:	b920      	cbnz	r0, 1603a <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   16030:	4b06      	ldr	r3, [pc, #24]	; (1604c <z_thread_aligned_alloc+0x28>)
   16032:	689b      	ldr	r3, [r3, #8]
   16034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   16036:	b90b      	cbnz	r3, 1603c <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   16038:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   1603a:	4b05      	ldr	r3, [pc, #20]	; (16050 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   1603c:	462a      	mov	r2, r5
   1603e:	4621      	mov	r1, r4
   16040:	4618      	mov	r0, r3
}
   16042:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   16046:	f004 be6d 	b.w	1ad24 <z_heap_aligned_alloc>
   1604a:	bf00      	nop
   1604c:	20009ae8 	.word	0x20009ae8
   16050:	20008588 	.word	0x20008588

00016054 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   16054:	4801      	ldr	r0, [pc, #4]	; (1605c <boot_banner+0x8>)
   16056:	f000 b875 	b.w	16144 <printk>
   1605a:	bf00      	nop
   1605c:	0001ddb7 	.word	0x0001ddb7

00016060 <app_led_cb>:
{
   16060:	4601      	mov	r1, r0
	dk_set_led(USER_LED, led_state);
   16062:	2002      	movs	r0, #2
   16064:	f7fd b9a4 	b.w	133b0 <dk_set_led>

00016068 <indicate_cb>:
}
   16068:	4770      	bx	lr

0001606a <cbpprintf_external>:
{
   1606a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1606e:	4606      	mov	r6, r0
   16070:	460d      	mov	r5, r1
   16072:	4617      	mov	r7, r2
	if (buf == NULL) {
   16074:	4698      	mov	r8, r3
   16076:	b32b      	cbz	r3, 160c4 <cbpprintf_external+0x5a>
	for (i = 0; i < s_nbr; i++) {
   16078:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
   1607c:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   16080:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   16084:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   16086:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   16088:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   1608c:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   16090:	441c      	add	r4, r3
   16092:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   16094:	45ca      	cmp	sl, r9
   16096:	d309      	bcc.n	160ac <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   16098:	4639      	mov	r1, r7
   1609a:	4630      	mov	r0, r6
   1609c:	46ac      	mov	ip, r5
   1609e:	f8d8 2004 	ldr.w	r2, [r8, #4]
   160a2:	f108 0308 	add.w	r3, r8, #8
}
   160a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   160aa:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   160ac:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
   160b0:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
   160b4:	4620      	mov	r0, r4
		*ps = s;
   160b6:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   160ba:	f001 fd0b 	bl	17ad4 <strlen>
   160be:	3001      	adds	r0, #1
   160c0:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   160c2:	e7e7      	b.n	16094 <cbpprintf_external+0x2a>
}
   160c4:	f06f 0015 	mvn.w	r0, #21
   160c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000160cc <is_ptr>:
{
   160cc:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   160ce:	2500      	movs	r5, #0
{
   160d0:	4602      	mov	r2, r0
	bool mod = false;
   160d2:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   160d4:	4614      	mov	r4, r2
   160d6:	f814 3b01 	ldrb.w	r3, [r4], #1
   160da:	b90b      	cbnz	r3, 160e0 <is_ptr+0x14>
					return false;
   160dc:	4618      	mov	r0, r3
   160de:	e009      	b.n	160f4 <is_ptr+0x28>
		if (mod) {
   160e0:	b198      	cbz	r0, 1610a <is_ptr+0x3e>
			if (cnt == n) {
   160e2:	428d      	cmp	r5, r1
   160e4:	d107      	bne.n	160f6 <is_ptr+0x2a>
				if (c == 'p') {
   160e6:	2b70      	cmp	r3, #112	; 0x70
   160e8:	d004      	beq.n	160f4 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   160ea:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   160ee:	2a3a      	cmp	r2, #58	; 0x3a
   160f0:	d80b      	bhi.n	1610a <is_ptr+0x3e>
					return false;
   160f2:	2000      	movs	r0, #0
}
   160f4:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   160f6:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   160fa:	2e3a      	cmp	r6, #58	; 0x3a
   160fc:	d805      	bhi.n	1610a <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   160fe:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   16100:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   16102:	1c94      	adds	r4, r2, #2
   16104:	2b00      	cmp	r3, #0
   16106:	d0e9      	beq.n	160dc <is_ptr+0x10>
   16108:	2000      	movs	r0, #0
		if (c == '%') {
   1610a:	2b25      	cmp	r3, #37	; 0x25
	while ((c = *fmt++) != '\0') {
   1610c:	4622      	mov	r2, r4
			mod = !mod;
   1610e:	bf08      	it	eq
   16110:	f080 0001 	eoreq.w	r0, r0, #1
   16114:	e7de      	b.n	160d4 <is_ptr+0x8>

00016116 <arch_printk_char_out>:
}
   16116:	2000      	movs	r0, #0
   16118:	4770      	bx	lr

0001611a <str_out>:
{
   1611a:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1611c:	688a      	ldr	r2, [r1, #8]
   1611e:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   16120:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   16122:	b114      	cbz	r4, 1612a <str_out+0x10>
   16124:	684b      	ldr	r3, [r1, #4]
   16126:	4293      	cmp	r3, r2
   16128:	dc01      	bgt.n	1612e <str_out+0x14>
		ctx->count++;
   1612a:	608d      	str	r5, [r1, #8]
}
   1612c:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1612e:	3b01      	subs	r3, #1
   16130:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   16132:	bf08      	it	eq
   16134:	2200      	moveq	r2, #0
   16136:	608d      	str	r5, [r1, #8]
   16138:	bf0c      	ite	eq
   1613a:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1613c:	54a0      	strbne	r0, [r4, r2]
   1613e:	e7f5      	b.n	1612c <str_out+0x12>

00016140 <vprintk>:
		z_log_vprintk(fmt, ap);
   16140:	f000 bf95 	b.w	1706e <z_log_vprintk>

00016144 <printk>:
{
   16144:	b40f      	push	{r0, r1, r2, r3}
   16146:	b507      	push	{r0, r1, r2, lr}
   16148:	a904      	add	r1, sp, #16
   1614a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1614e:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   16150:	f000 ff8d 	bl	1706e <z_log_vprintk>
}
   16154:	b003      	add	sp, #12
   16156:	f85d eb04 	ldr.w	lr, [sp], #4
   1615a:	b004      	add	sp, #16
   1615c:	4770      	bx	lr

0001615e <snprintk>:
{
   1615e:	b40c      	push	{r2, r3}
   16160:	b507      	push	{r0, r1, r2, lr}
   16162:	ab04      	add	r3, sp, #16
   16164:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   16168:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1616a:	f7f2 fe99 	bl	8ea0 <vsnprintk>
}
   1616e:	b003      	add	sp, #12
   16170:	f85d eb04 	ldr.w	lr, [sp], #4
   16174:	b002      	add	sp, #8
   16176:	4770      	bx	lr

00016178 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   16178:	4604      	mov	r4, r0
   1617a:	b508      	push	{r3, lr}
   1617c:	4608      	mov	r0, r1
   1617e:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   16180:	461a      	mov	r2, r3
   16182:	47a0      	blx	r4
	return z_impl_z_current_get();
   16184:	f7ff fc48 	bl	15a18 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   16188:	f7f5 fda0 	bl	bccc <z_impl_k_thread_abort>

0001618c <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   1618c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   16190:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   16192:	0840      	lsrs	r0, r0, #1
   16194:	4770      	bx	lr

00016196 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   16196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16198:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   1619a:	f7ff fff7 	bl	1618c <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   1619e:	fab0 f080 	clz	r0, r0
   161a2:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   161a6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   161aa:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   161ae:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   161b0:	1d17      	adds	r7, r2, #4
{
   161b2:	460c      	mov	r4, r1
   161b4:	3206      	adds	r2, #6
   161b6:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   161b8:	b956      	cbnz	r6, 161d0 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   161ba:	2101      	movs	r1, #1
   161bc:	fa01 f000 	lsl.w	r0, r1, r0
   161c0:	68d9      	ldr	r1, [r3, #12]
   161c2:	4301      	orrs	r1, r0
   161c4:	60d9      	str	r1, [r3, #12]
		b->next = c;
   161c6:	f8cc 4010 	str.w	r4, [ip, #16]
   161ca:	53dd      	strh	r5, [r3, r7]
   161cc:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   161ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   161d0:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   161d2:	3104      	adds	r1, #4
   161d4:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   161d6:	53d8      	strh	r0, [r3, r7]
   161d8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   161dc:	529e      	strh	r6, [r3, r2]
   161de:	80c5      	strh	r5, [r0, #6]
   161e0:	525d      	strh	r5, [r3, r1]
   161e2:	e7f4      	b.n	161ce <free_list_add+0x38>

000161e4 <free_list_remove_bidx>:
{
   161e4:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   161e6:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   161ea:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   161ec:	4299      	cmp	r1, r3
   161ee:	f102 0104 	add.w	r1, r2, #4
   161f2:	d10a      	bne.n	1620a <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   161f4:	2301      	movs	r3, #1
   161f6:	fa03 f202 	lsl.w	r2, r3, r2
   161fa:	68c3      	ldr	r3, [r0, #12]
   161fc:	ea23 0302 	bic.w	r3, r3, r2
   16200:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   16202:	2300      	movs	r3, #0
   16204:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   16208:	bd10      	pop	{r4, pc}
   1620a:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   1620c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   16210:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   16214:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   16218:	80cb      	strh	r3, [r1, #6]
   1621a:	8082      	strh	r2, [r0, #4]
}
   1621c:	e7f4      	b.n	16208 <free_list_remove_bidx+0x24>

0001621e <free_list_remove>:
{
   1621e:	b508      	push	{r3, lr}
   16220:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   16222:	f7ff ffb3 	bl	1618c <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   16226:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1622a:	4618      	mov	r0, r3
}
   1622c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   16230:	f1c2 021f 	rsb	r2, r2, #31
   16234:	f7ff bfd6 	b.w	161e4 <free_list_remove_bidx>

00016238 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   16238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1623c:	fab1 f581 	clz	r5, r1
   16240:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   16244:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   16248:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   1624c:	4603      	mov	r3, r0
   1624e:	460e      	mov	r6, r1
	if (b->next) {
   16250:	b1c2      	cbz	r2, 16284 <alloc_chunk+0x4c>
   16252:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   16254:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   16258:	4618      	mov	r0, r3
   1625a:	4621      	mov	r1, r4
   1625c:	f7ff ff96 	bl	1618c <chunk_size>
   16260:	42b0      	cmp	r0, r6
   16262:	d306      	bcc.n	16272 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   16264:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   16266:	4618      	mov	r0, r3
   16268:	f7ff ffbc 	bl	161e4 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1626c:	4620      	mov	r0, r4
   1626e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   16272:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   16276:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   16278:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1627a:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   1627e:	d001      	beq.n	16284 <alloc_chunk+0x4c>
   16280:	4282      	cmp	r2, r0
   16282:	d1e7      	bne.n	16254 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   16284:	f04f 34ff 	mov.w	r4, #4294967295
   16288:	f1c5 0220 	rsb	r2, r5, #32
   1628c:	4094      	lsls	r4, r2
   1628e:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   16290:	4014      	ands	r4, r2
   16292:	d0eb      	beq.n	1626c <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   16294:	fa94 f2a4 	rbit	r2, r4
   16298:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1629c:	1d11      	adds	r1, r2, #4
   1629e:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   162a2:	4621      	mov	r1, r4
   162a4:	e7df      	b.n	16266 <alloc_chunk+0x2e>

000162a6 <merge_chunks>:
{
   162a6:	b538      	push	{r3, r4, r5, lr}
   162a8:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   162aa:	f7ff ff6f 	bl	1618c <chunk_size>
{
   162ae:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   162b0:	4604      	mov	r4, r0
   162b2:	4611      	mov	r1, r2
   162b4:	4618      	mov	r0, r3
   162b6:	f7ff ff69 	bl	1618c <chunk_size>
   162ba:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   162bc:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   162be:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   162c2:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   162c4:	4618      	mov	r0, r3
   162c6:	f7ff ff61 	bl	1618c <chunk_size>
	void *cmem = &buf[c];
   162ca:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   162cc:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   162d0:	bd38      	pop	{r3, r4, r5, pc}

000162d2 <split_chunks>:
{
   162d2:	b538      	push	{r3, r4, r5, lr}
   162d4:	460c      	mov	r4, r1
   162d6:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   162d8:	f7ff ff58 	bl	1618c <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   162dc:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   162de:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   162e0:	4405      	add	r5, r0
   162e2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   162e6:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   162e8:	8060      	strh	r0, [r4, #2]
   162ea:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   162ee:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   162f0:	8044      	strh	r4, [r0, #2]
   162f2:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   162f6:	4618      	mov	r0, r3
   162f8:	4611      	mov	r1, r2
   162fa:	f7ff ff47 	bl	1618c <chunk_size>
	void *cmem = &buf[c];
   162fe:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   16300:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   16304:	bd38      	pop	{r3, r4, r5, pc}

00016306 <free_chunk>:
{
   16306:	b538      	push	{r3, r4, r5, lr}
   16308:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1630a:	f7ff ff3f 	bl	1618c <chunk_size>
   1630e:	460c      	mov	r4, r1
   16310:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   16312:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   16316:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   16318:	07da      	lsls	r2, r3, #31
   1631a:	d40a      	bmi.n	16332 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   1631c:	4628      	mov	r0, r5
   1631e:	f7ff ff7e 	bl	1621e <free_list_remove>
	return c + chunk_size(h, c);
   16322:	4621      	mov	r1, r4
   16324:	4628      	mov	r0, r5
   16326:	f7ff ff31 	bl	1618c <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1632a:	1822      	adds	r2, r4, r0
   1632c:	4628      	mov	r0, r5
   1632e:	f7ff ffba 	bl	162a6 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   16332:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   16336:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   16338:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1633c:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   1633e:	07db      	lsls	r3, r3, #31
   16340:	d40c      	bmi.n	1635c <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   16342:	4628      	mov	r0, r5
   16344:	f7ff ff6b 	bl	1621e <free_list_remove>
		return ((uint16_t *)cmem)[f];
   16348:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   1634c:	4622      	mov	r2, r4
   1634e:	1a61      	subs	r1, r4, r1
   16350:	4628      	mov	r0, r5
   16352:	f7ff ffa8 	bl	162a6 <merge_chunks>
   16356:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1635a:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   1635c:	4621      	mov	r1, r4
   1635e:	4628      	mov	r0, r5
}
   16360:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   16364:	f7ff bf17 	b.w	16196 <free_list_add>

00016368 <sys_heap_free>:
	if (mem == NULL) {
   16368:	b161      	cbz	r1, 16384 <sys_heap_free+0x1c>
   1636a:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1636c:	3904      	subs	r1, #4
   1636e:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   16370:	f021 0307 	bic.w	r3, r1, #7
   16374:	4403      	add	r3, r0
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   16376:	885a      	ldrh	r2, [r3, #2]
	free_chunk(h, c);
   16378:	08c9      	lsrs	r1, r1, #3
   1637a:	f022 0201 	bic.w	r2, r2, #1
   1637e:	805a      	strh	r2, [r3, #2]
   16380:	f7ff bfc1 	b.w	16306 <free_chunk>
}
   16384:	4770      	bx	lr

00016386 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   16386:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   16388:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   1638a:	b909      	cbnz	r1, 16390 <sys_heap_alloc+0xa>
		return NULL;
   1638c:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   1638e:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   16390:	68ab      	ldr	r3, [r5, #8]
   16392:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   16396:	d9f9      	bls.n	1638c <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   16398:	310b      	adds	r1, #11
   1639a:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1639c:	4621      	mov	r1, r4
   1639e:	4628      	mov	r0, r5
   163a0:	f7ff ff4a 	bl	16238 <alloc_chunk>
	if (c == 0U) {
   163a4:	4606      	mov	r6, r0
   163a6:	2800      	cmp	r0, #0
   163a8:	d0f0      	beq.n	1638c <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   163aa:	4601      	mov	r1, r0
   163ac:	4628      	mov	r0, r5
   163ae:	f7ff feed 	bl	1618c <chunk_size>
   163b2:	42a0      	cmp	r0, r4
   163b4:	d907      	bls.n	163c6 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   163b6:	4628      	mov	r0, r5
   163b8:	1932      	adds	r2, r6, r4
   163ba:	f7ff ff8a 	bl	162d2 <split_chunks>
		free_list_add(h, c + chunk_sz);
   163be:	4611      	mov	r1, r2
   163c0:	4628      	mov	r0, r5
   163c2:	f7ff fee8 	bl	16196 <free_list_add>
	void *cmem = &buf[c];
   163c6:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   163ca:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   163cc:	8853      	ldrh	r3, [r2, #2]
   163ce:	3004      	adds	r0, #4
   163d0:	f043 0301 	orr.w	r3, r3, #1
   163d4:	8053      	strh	r3, [r2, #2]
	return mem;
   163d6:	e7da      	b.n	1638e <sys_heap_alloc+0x8>

000163d8 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   163d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   163dc:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   163e0:	ea19 0901 	ands.w	r9, r9, r1
{
   163e4:	460f      	mov	r7, r1
   163e6:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   163e8:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
   163ea:	d00c      	beq.n	16406 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   163ec:	424b      	negs	r3, r1
   163ee:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   163f0:	2b04      	cmp	r3, #4
   163f2:	461a      	mov	r2, r3
   163f4:	464f      	mov	r7, r9
   163f6:	bf28      	it	cs
   163f8:	2204      	movcs	r2, #4
	rew = align & -align;
   163fa:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   163fc:	b964      	cbnz	r4, 16418 <sys_heap_aligned_alloc+0x40>
		return NULL;
   163fe:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   16400:	4628      	mov	r0, r5
   16402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   16406:	2904      	cmp	r1, #4
   16408:	d804      	bhi.n	16414 <sys_heap_aligned_alloc+0x3c>
}
   1640a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   1640e:	4611      	mov	r1, r2
   16410:	f7ff bfb9 	b.w	16386 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   16414:	2204      	movs	r2, #4
   16416:	e7f1      	b.n	163fc <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   16418:	68b3      	ldr	r3, [r6, #8]
   1641a:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   1641e:	d9ee      	bls.n	163fe <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   16420:	f104 010b 	add.w	r1, r4, #11
   16424:	4439      	add	r1, r7
   16426:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   16428:	4630      	mov	r0, r6
   1642a:	08c9      	lsrs	r1, r1, #3
   1642c:	f7ff ff04 	bl	16238 <alloc_chunk>
	if (c0 == 0) {
   16430:	4680      	mov	r8, r0
   16432:	2800      	cmp	r0, #0
   16434:	d0e3      	beq.n	163fe <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   16436:	f109 0504 	add.w	r5, r9, #4
   1643a:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   1643e:	1e7b      	subs	r3, r7, #1
   16440:	4435      	add	r5, r6
   16442:	441d      	add	r5, r3
   16444:	427f      	negs	r7, r7
   16446:	403d      	ands	r5, r7
   16448:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1644c:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1644e:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   16450:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   16452:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   16454:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   16458:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1645a:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1645e:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   16462:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   16466:	d208      	bcs.n	1647a <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   16468:	4601      	mov	r1, r0
   1646a:	463a      	mov	r2, r7
   1646c:	4630      	mov	r0, r6
   1646e:	f7ff ff30 	bl	162d2 <split_chunks>
		free_list_add(h, c0);
   16472:	4641      	mov	r1, r8
   16474:	4630      	mov	r0, r6
   16476:	f7ff fe8e 	bl	16196 <free_list_add>
	return c + chunk_size(h, c);
   1647a:	4639      	mov	r1, r7
   1647c:	4630      	mov	r0, r6
   1647e:	f7ff fe85 	bl	1618c <chunk_size>
   16482:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   16484:	4284      	cmp	r4, r0
   16486:	d207      	bcs.n	16498 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   16488:	4630      	mov	r0, r6
   1648a:	4622      	mov	r2, r4
   1648c:	f7ff ff21 	bl	162d2 <split_chunks>
		free_list_add(h, c_end);
   16490:	4621      	mov	r1, r4
   16492:	4630      	mov	r0, r6
   16494:	f7ff fe7f 	bl	16196 <free_list_add>
	void *cmem = &buf[c];
   16498:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1649c:	8873      	ldrh	r3, [r6, #2]
   1649e:	f043 0301 	orr.w	r3, r3, #1
   164a2:	8073      	strh	r3, [r6, #2]
   164a4:	e7ac      	b.n	16400 <sys_heap_aligned_alloc+0x28>

000164a6 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   164a6:	b4f0      	push	{r4, r5, r6, r7}
   164a8:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   164aa:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   164ac:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   164ae:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   164b0:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   164b4:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   164b8:	1a0e      	subs	r6, r1, r0
   164ba:	08f3      	lsrs	r3, r6, #3
	return 31 - __builtin_clz(usable_sz);
   164bc:	fab3 f283 	clz	r2, r3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   164c0:	6020      	str	r0, [r4, #0]
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   164c2:	2700      	movs	r7, #0
   164c4:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   164c6:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
   164ca:	00ad      	lsls	r5, r5, #2
	h->end_chunk = heap_sz;
   164cc:	6083      	str	r3, [r0, #8]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   164ce:	3507      	adds	r5, #7
	h->avail_buckets = 0;
   164d0:	f844 7f0c 	str.w	r7, [r4, #12]!
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   164d4:	f1c2 0220 	rsb	r2, r2, #32
   164d8:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   164da:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   164de:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   164e2:	4294      	cmp	r4, r2
   164e4:	d1fb      	bne.n	164de <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   164e6:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   164e8:	f042 0201 	orr.w	r2, r2, #1
   164ec:	8042      	strh	r2, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   164ee:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   164f0:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   164f2:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   164f6:	8007      	strh	r7, [r0, #0]
   164f8:	8065      	strh	r5, [r4, #2]
   164fa:	1984      	adds	r4, r0, r6
   164fc:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   16500:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   16504:	8067      	strh	r7, [r4, #2]
   16506:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   16508:	885a      	ldrh	r2, [r3, #2]
   1650a:	f042 0201 	orr.w	r2, r2, #1
   1650e:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   16510:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   16512:	f7ff be40 	b.w	16196 <free_list_add>

00016516 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   16516:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   16518:	f013 0307 	ands.w	r3, r3, #7
   1651c:	d105      	bne.n	1652a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1651e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   16520:	2b00      	cmp	r3, #0
   16522:	bf0c      	ite	eq
   16524:	2000      	moveq	r0, #0
   16526:	2003      	movne	r0, #3
   16528:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1652a:	2b02      	cmp	r3, #2
   1652c:	d105      	bne.n	1653a <_flash_used+0xa>
		   && (mgr->refs == 0U)) {
   1652e:	8b40      	ldrh	r0, [r0, #26]
   16530:	fab0 f080 	clz	r0, r0
   16534:	0940      	lsrs	r0, r0, #5
   16536:	0080      	lsls	r0, r0, #2
   16538:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1653a:	2b01      	cmp	r3, #1
   1653c:	d105      	bne.n	1654a <_flash_used+0x1a>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1653e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   16540:	2b00      	cmp	r3, #0
   16542:	bf0c      	ite	eq
   16544:	2000      	moveq	r0, #0
   16546:	2005      	movne	r0, #5
   16548:	4770      	bx	lr
	int evt = EVT_NOP;
   1654a:	2000      	movs	r0, #0
}
   1654c:	4770      	bx	lr

0001654e <validate_args>:
{
   1654e:	b510      	push	{r4, lr}
   16550:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   16552:	b100      	cbz	r0, 16556 <validate_args+0x8>
   16554:	b911      	cbnz	r1, 1655c <validate_args+0xe>
		return -EINVAL;
   16556:	f06f 0015 	mvn.w	r0, #21
}
   1655a:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   1655c:	1d08      	adds	r0, r1, #4
   1655e:	f000 f895 	bl	1668c <sys_notify_validate>
	if ((rv == 0)
   16562:	2800      	cmp	r0, #0
   16564:	d1f9      	bne.n	1655a <validate_args+0xc>
	    && ((cli->notify.flags
   16566:	68a3      	ldr	r3, [r4, #8]
   16568:	2b03      	cmp	r3, #3
   1656a:	d9f6      	bls.n	1655a <validate_args+0xc>
   1656c:	e7f3      	b.n	16556 <validate_args+0x8>

0001656e <notify_one>:
{
   1656e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16572:	460d      	mov	r5, r1
   16574:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   16576:	4619      	mov	r1, r3
   16578:	1d28      	adds	r0, r5, #4
{
   1657a:	4690      	mov	r8, r2
   1657c:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1657e:	f000 f899 	bl	166b4 <sys_notify_finalize>
	if (cb) {
   16582:	4604      	mov	r4, r0
   16584:	b138      	cbz	r0, 16596 <notify_one+0x28>
		cb(mgr, cli, state, res);
   16586:	4633      	mov	r3, r6
   16588:	4642      	mov	r2, r8
   1658a:	4629      	mov	r1, r5
   1658c:	4638      	mov	r0, r7
   1658e:	46a4      	mov	ip, r4
}
   16590:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   16594:	4760      	bx	ip
}
   16596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001659a <transition_complete>:
{
   1659a:	b410      	push	{r4}
	__asm__ volatile(
   1659c:	f04f 0420 	mov.w	r4, #32
   165a0:	f3ef 8211 	mrs	r2, BASEPRI
   165a4:	f384 8812 	msr	BASEPRI_MAX, r4
   165a8:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   165ac:	6141      	str	r1, [r0, #20]
}
   165ae:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   165b0:	2101      	movs	r1, #1
   165b2:	f7f2 bc8b 	b.w	8ecc <process_event>

000165b6 <onoff_manager_init>:
{
   165b6:	b538      	push	{r3, r4, r5, lr}
   165b8:	460c      	mov	r4, r1
	if ((mgr == NULL)
   165ba:	4605      	mov	r5, r0
   165bc:	b158      	cbz	r0, 165d6 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   165be:	b151      	cbz	r1, 165d6 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   165c0:	680b      	ldr	r3, [r1, #0]
   165c2:	b143      	cbz	r3, 165d6 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   165c4:	684b      	ldr	r3, [r1, #4]
   165c6:	b133      	cbz	r3, 165d6 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   165c8:	221c      	movs	r2, #28
   165ca:	2100      	movs	r1, #0
   165cc:	f001 facc 	bl	17b68 <memset>
	return 0;
   165d0:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   165d2:	612c      	str	r4, [r5, #16]
}
   165d4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   165d6:	f06f 0015 	mvn.w	r0, #21
   165da:	e7fb      	b.n	165d4 <onoff_manager_init+0x1e>

000165dc <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   165dc:	b570      	push	{r4, r5, r6, lr}
   165de:	4605      	mov	r5, r0
   165e0:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   165e2:	f7ff ffb4 	bl	1654e <validate_args>

	if (rv < 0) {
   165e6:	1e04      	subs	r4, r0, #0
   165e8:	db15      	blt.n	16616 <onoff_request+0x3a>
   165ea:	f04f 0320 	mov.w	r3, #32
   165ee:	f3ef 8211 	mrs	r2, BASEPRI
   165f2:	f383 8812 	msr	BASEPRI_MAX, r3
   165f6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   165fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
   165fe:	8b6b      	ldrh	r3, [r5, #26]
   16600:	8b2c      	ldrh	r4, [r5, #24]
   16602:	428b      	cmp	r3, r1
   16604:	f004 0407 	and.w	r4, r4, #7
   16608:	d107      	bne.n	1661a <onoff_request+0x3e>
	__asm__ volatile(
   1660a:	f382 8811 	msr	BASEPRI, r2
   1660e:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   16612:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   16616:	4620      	mov	r0, r4
   16618:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   1661a:	2c02      	cmp	r4, #2
   1661c:	d10c      	bne.n	16638 <onoff_request+0x5c>
		mgr->refs += 1U;
   1661e:	3301      	adds	r3, #1
   16620:	836b      	strh	r3, [r5, #26]
   16622:	f382 8811 	msr	BASEPRI, r2
   16626:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   1662a:	2300      	movs	r3, #0
   1662c:	4622      	mov	r2, r4
   1662e:	4631      	mov	r1, r6
   16630:	4628      	mov	r0, r5
   16632:	f7ff ff9c 	bl	1656e <notify_one>
   16636:	e7ee      	b.n	16616 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   16638:	2c06      	cmp	r4, #6
   1663a:	d814      	bhi.n	16666 <onoff_request+0x8a>
   1663c:	e8df f004 	tbb	[pc, r4]
   16640:	13131304 	.word	0x13131304
   16644:	1a04      	.short	0x1a04
   16646:	04          	.byte	0x04
   16647:	00          	.byte	0x00
	parent->next = child;
   16648:	2300      	movs	r3, #0
   1664a:	6033      	str	r3, [r6, #0]
	return list->tail;
   1664c:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   1664e:	b93b      	cbnz	r3, 16660 <onoff_request+0x84>
	list->head = node;
   16650:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   16654:	b9ac      	cbnz	r4, 16682 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   16656:	2102      	movs	r1, #2
   16658:	4628      	mov	r0, r5
   1665a:	f7f2 fc37 	bl	8ecc <process_event>
   1665e:	e7da      	b.n	16616 <onoff_request+0x3a>
	parent->next = child;
   16660:	601e      	str	r6, [r3, #0]
	list->tail = node;
   16662:	606e      	str	r6, [r5, #4]
}
   16664:	e7f6      	b.n	16654 <onoff_request+0x78>
   16666:	f382 8811 	msr	BASEPRI, r2
   1666a:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   1666e:	f06f 0404 	mvn.w	r4, #4
   16672:	e7d0      	b.n	16616 <onoff_request+0x3a>
   16674:	f382 8811 	msr	BASEPRI, r2
   16678:	f3bf 8f6f 	isb	sy
   1667c:	f06f 0485 	mvn.w	r4, #133	; 0x85
   16680:	e7c9      	b.n	16616 <onoff_request+0x3a>
   16682:	f382 8811 	msr	BASEPRI, r2
   16686:	f3bf 8f6f 	isb	sy
		if (notify) {
   1668a:	e7c4      	b.n	16616 <onoff_request+0x3a>

0001668c <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1668c:	4603      	mov	r3, r0
   1668e:	b140      	cbz	r0, 166a2 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   16690:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   16692:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   16696:	2a02      	cmp	r2, #2
   16698:	d006      	beq.n	166a8 <sys_notify_validate+0x1c>
   1669a:	2a03      	cmp	r2, #3
   1669c:	d004      	beq.n	166a8 <sys_notify_validate+0x1c>
   1669e:	2a01      	cmp	r2, #1
   166a0:	d005      	beq.n	166ae <sys_notify_validate+0x22>
   166a2:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   166a6:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   166a8:	681a      	ldr	r2, [r3, #0]
   166aa:	2a00      	cmp	r2, #0
   166ac:	d0f9      	beq.n	166a2 <sys_notify_validate+0x16>
		notify->result = 0;
   166ae:	2000      	movs	r0, #0
   166b0:	6098      	str	r0, [r3, #8]
   166b2:	4770      	bx	lr

000166b4 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   166b4:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   166b6:	6842      	ldr	r2, [r0, #4]
   166b8:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
   166ba:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   166be:	2a02      	cmp	r2, #2
   166c0:	f04f 0400 	mov.w	r4, #0
	notify->result = res;
   166c4:	6081      	str	r1, [r0, #8]
	switch (method) {
   166c6:	d007      	beq.n	166d8 <sys_notify_finalize+0x24>
   166c8:	2a03      	cmp	r2, #3
   166ca:	d002      	beq.n	166d2 <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   166cc:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   166ce:	2000      	movs	r0, #0
   166d0:	e001      	b.n	166d6 <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   166d2:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   166d4:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   166d6:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   166d8:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   166da:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   166dc:	2800      	cmp	r0, #0
   166de:	d0f6      	beq.n	166ce <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   166e0:	f7ff fc6a 	bl	15fb8 <z_impl_k_poll_signal_raise>
   166e4:	e7f3      	b.n	166ce <sys_notify_finalize+0x1a>

000166e6 <encode_uint>:
{
   166e6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166ea:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
   166ec:	78d3      	ldrb	r3, [r2, #3]
{
   166ee:	4680      	mov	r8, r0
	switch (specifier) {
   166f0:	2b6f      	cmp	r3, #111	; 0x6f
{
   166f2:	460f      	mov	r7, r1
   166f4:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   166f6:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   166fa:	d029      	beq.n	16750 <encode_uint+0x6a>
   166fc:	d824      	bhi.n	16748 <encode_uint+0x62>
		return 10;
   166fe:	2b58      	cmp	r3, #88	; 0x58
   16700:	bf0c      	ite	eq
   16702:	2610      	moveq	r6, #16
   16704:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   16706:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   1670a:	4632      	mov	r2, r6
   1670c:	2300      	movs	r3, #0
   1670e:	4640      	mov	r0, r8
   16710:	4639      	mov	r1, r7
   16712:	f7f1 fd1f 	bl	8154 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   16716:	2a09      	cmp	r2, #9
   16718:	b2d4      	uxtb	r4, r2
   1671a:	d81e      	bhi.n	1675a <encode_uint+0x74>
   1671c:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1671e:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   16720:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   16722:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   16726:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1672a:	d301      	bcc.n	16730 <encode_uint+0x4a>
   1672c:	45d1      	cmp	r9, sl
   1672e:	d811      	bhi.n	16754 <encode_uint+0x6e>
	if (conv->flag_hash) {
   16730:	782b      	ldrb	r3, [r5, #0]
   16732:	069b      	lsls	r3, r3, #26
   16734:	d505      	bpl.n	16742 <encode_uint+0x5c>
		if (radix == 8) {
   16736:	2e08      	cmp	r6, #8
   16738:	d115      	bne.n	16766 <encode_uint+0x80>
			conv->altform_0 = true;
   1673a:	78ab      	ldrb	r3, [r5, #2]
   1673c:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   16740:	70ab      	strb	r3, [r5, #2]
}
   16742:	4648      	mov	r0, r9
   16744:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   16748:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   1674c:	2b70      	cmp	r3, #112	; 0x70
   1674e:	e7d7      	b.n	16700 <encode_uint+0x1a>
	switch (specifier) {
   16750:	2608      	movs	r6, #8
   16752:	e7d8      	b.n	16706 <encode_uint+0x20>
		value /= radix;
   16754:	4680      	mov	r8, r0
   16756:	460f      	mov	r7, r1
   16758:	e7d7      	b.n	1670a <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1675a:	f1bb 0f19 	cmp.w	fp, #25
   1675e:	bf94      	ite	ls
   16760:	3437      	addls	r4, #55	; 0x37
   16762:	3457      	addhi	r4, #87	; 0x57
   16764:	e7db      	b.n	1671e <encode_uint+0x38>
		} else if (radix == 16) {
   16766:	2e10      	cmp	r6, #16
   16768:	d1eb      	bne.n	16742 <encode_uint+0x5c>
			conv->altform_0c = true;
   1676a:	78ab      	ldrb	r3, [r5, #2]
   1676c:	f043 0310 	orr.w	r3, r3, #16
   16770:	e7e6      	b.n	16740 <encode_uint+0x5a>

00016772 <outs>:
{
   16772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16776:	4607      	mov	r7, r0
   16778:	4688      	mov	r8, r1
   1677a:	4615      	mov	r5, r2
   1677c:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1677e:	4614      	mov	r4, r2
   16780:	42b4      	cmp	r4, r6
   16782:	d305      	bcc.n	16790 <outs+0x1e>
   16784:	b10e      	cbz	r6, 1678a <outs+0x18>
	return (int)count;
   16786:	1b60      	subs	r0, r4, r5
   16788:	e008      	b.n	1679c <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1678a:	7823      	ldrb	r3, [r4, #0]
   1678c:	2b00      	cmp	r3, #0
   1678e:	d0fa      	beq.n	16786 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   16790:	4641      	mov	r1, r8
   16792:	f814 0b01 	ldrb.w	r0, [r4], #1
   16796:	47b8      	blx	r7
		if (rc < 0) {
   16798:	2800      	cmp	r0, #0
   1679a:	daf1      	bge.n	16780 <outs+0xe>
}
   1679c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000167a0 <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   167a0:	b40f      	push	{r0, r1, r2, r3}
   167a2:	b507      	push	{r0, r1, r2, lr}
   167a4:	a904      	add	r1, sp, #16
   167a6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   167aa:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   167ac:	f7ff fcc8 	bl	16140 <vprintk>

	va_end(ap);
}
   167b0:	b003      	add	sp, #12
   167b2:	f85d eb04 	ldr.w	lr, [sp], #4
   167b6:	b004      	add	sp, #16
   167b8:	4770      	bx	lr

000167ba <free_space>:
 * @retval true when space was calculated until end of buffer (and there might
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
   167ba:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
   167bc:	6903      	ldr	r3, [r0, #16]
{
   167be:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
   167c0:	f013 0008 	ands.w	r0, r3, #8
   167c4:	d109      	bne.n	167da <free_space+0x20>
		*res = 0;
		return false;
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   167c6:	6813      	ldr	r3, [r2, #0]
   167c8:	68d4      	ldr	r4, [r2, #12]
   167ca:	429c      	cmp	r4, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
   167cc:	bf9b      	ittet	ls
   167ce:	2001      	movls	r0, #1
	*res = buffer->size - buffer->tmp_wr_idx;
   167d0:	6a12      	ldrls	r2, [r2, #32]
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   167d2:	1ae3      	subhi	r3, r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
   167d4:	1ad3      	subls	r3, r2, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   167d6:	600b      	str	r3, [r1, #0]
}
   167d8:	bd10      	pop	{r4, pc}
   167da:	2300      	movs	r3, #0
		return false;
   167dc:	4618      	mov	r0, r3
   167de:	e7fa      	b.n	167d6 <free_space+0x1c>

000167e0 <get_usage>:

	return false;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   167e0:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
   167e2:	a901      	add	r1, sp, #4
{
   167e4:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   167e6:	f7ff ffe8 	bl	167ba <free_space>
   167ea:	b120      	cbz	r0, 167f6 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   167ec:	9b01      	ldr	r3, [sp, #4]
   167ee:	68e2      	ldr	r2, [r4, #12]
   167f0:	3b01      	subs	r3, #1
   167f2:	4413      	add	r3, r2
   167f4:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   167f6:	6a20      	ldr	r0, [r4, #32]
   167f8:	9b01      	ldr	r3, [sp, #4]
   167fa:	1ac0      	subs	r0, r0, r3
}
   167fc:	3801      	subs	r0, #1
   167fe:	b002      	add	sp, #8
   16800:	bd10      	pop	{r4, pc}

00016802 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, int32_t val)
{
   16802:	b510      	push	{r4, lr}
   16804:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   16806:	1850      	adds	r0, r2, r1

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   16808:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   1680a:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   1680c:	07d2      	lsls	r2, r2, #31
   1680e:	d502      	bpl.n	16816 <idx_inc+0x14>
		return i & (buffer->size - 1);
   16810:	3b01      	subs	r3, #1
   16812:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   16814:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   16816:	4298      	cmp	r0, r3
   16818:	bf28      	it	cs
   1681a:	1ac0      	subcs	r0, r0, r3
   1681c:	e7fa      	b.n	16814 <idx_inc+0x12>

0001681e <rd_idx_inc>:
		buffer->flags |= MPSC_PBUF_FULL;
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
   1681e:	b510      	push	{r4, lr}
   16820:	4604      	mov	r4, r0
   16822:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   16824:	68c1      	ldr	r1, [r0, #12]
   16826:	f7ff ffec 	bl	16802 <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
   1682a:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   1682c:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
   1682e:	f023 0308 	bic.w	r3, r3, #8
   16832:	6123      	str	r3, [r4, #16]
}
   16834:	bd10      	pop	{r4, pc}

00016836 <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   16836:	b538      	push	{r3, r4, r5, lr}
   16838:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   1683a:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
   1683c:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   1683e:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   16840:	f043 0302 	orr.w	r3, r3, #2
{
   16844:	4604      	mov	r4, r0
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   16846:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   1684a:	6801      	ldr	r1, [r0, #0]
   1684c:	462a      	mov	r2, r5
   1684e:	f7ff ffd8 	bl	16802 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   16852:	68e3      	ldr	r3, [r4, #12]
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   16854:	6861      	ldr	r1, [r4, #4]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   16856:	4298      	cmp	r0, r3
		buffer->flags |= MPSC_PBUF_FULL;
   16858:	bf08      	it	eq
   1685a:	6923      	ldreq	r3, [r4, #16]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   1685c:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
   1685e:	bf08      	it	eq
   16860:	f043 0308 	orreq.w	r3, r3, #8
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   16864:	462a      	mov	r2, r5
   16866:	4620      	mov	r0, r4
		buffer->flags |= MPSC_PBUF_FULL;
   16868:	bf08      	it	eq
   1686a:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   1686c:	f7ff ffc9 	bl	16802 <idx_inc>
   16870:	6060      	str	r0, [r4, #4]
}
   16872:	bd38      	pop	{r3, r4, r5, pc}

00016874 <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
   16874:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   16878:	68c7      	ldr	r7, [r0, #12]
   1687a:	69c6      	ldr	r6, [r0, #28]
{
   1687c:	469b      	mov	fp, r3
	if (item->hdr.busy && !item->hdr.valid) {
   1687e:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
{
   16882:	4604      	mov	r4, r0
	if (item->hdr.busy && !item->hdr.valid) {
   16884:	f003 0303 	and.w	r3, r3, #3
   16888:	2b02      	cmp	r3, #2
{
   1688a:	4688      	mov	r8, r1
   1688c:	4691      	mov	r9, r2
   1688e:	f04f 0300 	mov.w	r3, #0
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   16892:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   16896:	d009      	beq.n	168ac <drop_item_locked+0x38>
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
   16898:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
   1689a:	f8cb 3000 	str.w	r3, [fp]
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
   1689e:	6923      	ldr	r3, [r4, #16]
   168a0:	0799      	lsls	r1, r3, #30
   168a2:	d410      	bmi.n	168c6 <drop_item_locked+0x52>
		return false;
   168a4:	2000      	movs	r0, #0
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
			       item, rd_wlen);
	}

	return true;
}
   168a6:	b003      	add	sp, #12
   168a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
   168ac:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
   168b0:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
   168b2:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
   168b4:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
   168b8:	d0f1      	beq.n	1689e <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
   168ba:	f7ff ffb0 	bl	1681e <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   168be:	68e3      	ldr	r3, [r4, #12]
   168c0:	60a3      	str	r3, [r4, #8]
		return true;
   168c2:	2001      	movs	r0, #1
   168c4:	e7ef      	b.n	168a6 <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
   168c6:	69a3      	ldr	r3, [r4, #24]
   168c8:	4650      	mov	r0, sl
   168ca:	4798      	blx	r3
	return item->hdr.valid;
   168cc:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	uint32_t rd_wlen = buffer->get_wlen(item);
   168d0:	4605      	mov	r5, r0
	if (!is_valid(item)) {
   168d2:	07da      	lsls	r2, r3, #31
   168d4:	d5e6      	bpl.n	168a4 <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
   168d6:	f013 0302 	ands.w	r3, r3, #2
   168da:	d01d      	beq.n	16918 <drop_item_locked+0xa4>
		if (free_wlen) {
   168dc:	f1b8 0f00 	cmp.w	r8, #0
   168e0:	d003      	beq.n	168ea <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
   168e2:	4641      	mov	r1, r8
   168e4:	4620      	mov	r0, r4
   168e6:	f7ff ffa6 	bl	16836 <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   168ea:	6861      	ldr	r1, [r4, #4]
   168ec:	462a      	mov	r2, r5
   168ee:	4620      	mov	r0, r4
   168f0:	f7ff ff87 	bl	16802 <idx_inc>
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   168f4:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   168f8:	4299      	cmp	r1, r3
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   168fa:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   168fc:	d104      	bne.n	16908 <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
   168fe:	462a      	mov	r2, r5
   16900:	4620      	mov	r0, r4
   16902:	f7ff ff7e 	bl	16802 <idx_inc>
   16906:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
   16908:	68a3      	ldr	r3, [r4, #8]
   1690a:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
   1690c:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
   1690e:	6923      	ldr	r3, [r4, #16]
   16910:	f043 0308 	orr.w	r3, r3, #8
   16914:	6123      	str	r3, [r4, #16]
   16916:	e7d4      	b.n	168c2 <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
   16918:	4601      	mov	r1, r0
   1691a:	4620      	mov	r0, r4
   1691c:	9301      	str	r3, [sp, #4]
   1691e:	f7ff ff7e 	bl	1681e <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   16922:	68e2      	ldr	r2, [r4, #12]
   16924:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
   16926:	f1b8 0f00 	cmp.w	r8, #0
   1692a:	d004      	beq.n	16936 <drop_item_locked+0xc2>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
   1692c:	6821      	ldr	r1, [r4, #0]
   1692e:	69e2      	ldr	r2, [r4, #28]
   16930:	9b01      	ldr	r3, [sp, #4]
   16932:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
   16936:	eb05 0208 	add.w	r2, r5, r8
   1693a:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   1693e:	6821      	ldr	r1, [r4, #0]
   16940:	4620      	mov	r0, r4
   16942:	f7ff ff5e 	bl	16802 <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
   16946:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   16948:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
   1694a:	f043 0308 	orr.w	r3, r3, #8
   1694e:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
   16950:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
   16954:	f36f 0300 	bfc	r3, #0, #1
   16958:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
   1695c:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
   16960:	e7af      	b.n	168c2 <drop_item_locked+0x4e>

00016962 <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
   16962:	b570      	push	{r4, r5, r6, lr}
   16964:	4604      	mov	r4, r0
   16966:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
   16968:	f7ff ff4b 	bl	16802 <idx_inc>

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
   1696c:	6823      	ldr	r3, [r4, #0]
   1696e:	4283      	cmp	r3, r0
   16970:	d105      	bne.n	1697e <post_drop_action+0x1c>
		/* Operation not interrupted by another alloc. */
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
		buffer->flags &= ~MPSC_PBUF_FULL;
   16972:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
   16974:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
   16976:	f023 0308 	bic.w	r3, r3, #8
   1697a:	6123      	str	r3, [r4, #16]
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
	buffer->wr_idx = idx_inc(buffer,
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
   1697c:	bd70      	pop	{r4, r5, r6, pc}
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   1697e:	69e2      	ldr	r2, [r4, #28]
	union mpsc_pbuf_generic skip = {
   16980:	00ab      	lsls	r3, r5, #2
   16982:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   16986:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
   1698a:	6861      	ldr	r1, [r4, #4]
   1698c:	462a      	mov	r2, r5
   1698e:	4620      	mov	r0, r4
   16990:	f7ff ff37 	bl	16802 <idx_inc>
   16994:	6060      	str	r0, [r4, #4]
   16996:	e7f1      	b.n	1697c <post_drop_action+0x1a>

00016998 <max_utilization_update>:
{
   16998:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   1699a:	6903      	ldr	r3, [r0, #16]
{
   1699c:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   1699e:	075b      	lsls	r3, r3, #29
   169a0:	d506      	bpl.n	169b0 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   169a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
   169a4:	f7ff ff1c 	bl	167e0 <get_usage>
   169a8:	4285      	cmp	r5, r0
   169aa:	bf2c      	ite	cs
   169ac:	6265      	strcs	r5, [r4, #36]	; 0x24
   169ae:	6260      	strcc	r0, [r4, #36]	; 0x24
}
   169b0:	bd38      	pop	{r3, r4, r5, pc}

000169b2 <mpsc_pbuf_init>:
{
   169b2:	b538      	push	{r3, r4, r5, lr}
   169b4:	460d      	mov	r5, r1
   169b6:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   169b8:	221c      	movs	r2, #28
   169ba:	2100      	movs	r1, #0
   169bc:	f001 f8d4 	bl	17b68 <memset>
	buffer->max_usage = 0;
   169c0:	2200      	movs	r2, #0
	buffer->get_wlen = cfg->get_wlen;
   169c2:	68eb      	ldr	r3, [r5, #12]
   169c4:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   169c6:	68ab      	ldr	r3, [r5, #8]
   169c8:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   169ca:	682b      	ldr	r3, [r5, #0]
   169cc:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   169ce:	686b      	ldr	r3, [r5, #4]
	buffer->max_usage = 0;
   169d0:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->size = cfg->size;
   169d2:	6223      	str	r3, [r4, #32]
	buffer->flags = cfg->flags;
   169d4:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
   169d6:	b123      	cbz	r3, 169e2 <mpsc_pbuf_init+0x30>
   169d8:	1e59      	subs	r1, r3, #1
   169da:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   169dc:	bf08      	it	eq
   169de:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
   169e2:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   169e4:	2201      	movs	r2, #1
   169e6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   169ea:	2100      	movs	r1, #0
}
   169ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   169f0:	f003 bd91 	b.w	1a516 <z_impl_k_sem_init>

000169f4 <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   169f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
   169f8:	2500      	movs	r5, #0
{
   169fa:	b087      	sub	sp, #28
   169fc:	9300      	str	r3, [sp, #0]
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
   169fe:	6a03      	ldr	r3, [r0, #32]
{
   16a00:	4604      	mov	r4, r0
	if (wlen > (buffer->size)) {
   16a02:	428b      	cmp	r3, r1
{
   16a04:	460e      	mov	r6, r1
   16a06:	4692      	mov	sl, r2
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
   16a08:	46a9      	mov	r9, r5
	union mpsc_pbuf_generic *dropped_item = NULL;
   16a0a:	9503      	str	r5, [sp, #12]
	uint32_t tmp_wr_idx_shift = 0;
   16a0c:	9505      	str	r5, [sp, #20]
	if (wlen > (buffer->size)) {
   16a0e:	d33a      	bcc.n	16a86 <mpsc_pbuf_alloc+0x92>
	__asm__ volatile(
   16a10:	f04f 0320 	mov.w	r3, #32
   16a14:	f3ef 8b11 	mrs	fp, BASEPRI
   16a18:	f383 8812 	msr	BASEPRI_MAX, r3
   16a1c:	f3bf 8f6f 	isb	sy
	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
   16a20:	9a05      	ldr	r2, [sp, #20]
   16a22:	46d8      	mov	r8, fp
   16a24:	b12a      	cbz	r2, 16a32 <mpsc_pbuf_alloc+0x3e>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
   16a26:	4629      	mov	r1, r5
   16a28:	4620      	mov	r0, r4
   16a2a:	f7ff ff9a 	bl	16962 <post_drop_action>
			tmp_wr_idx_shift = 0;
   16a2e:	2300      	movs	r3, #0
   16a30:	9305      	str	r3, [sp, #20]
		}

		wrap = free_space(buffer, &free_wlen);
   16a32:	a904      	add	r1, sp, #16
   16a34:	4620      	mov	r0, r4
   16a36:	f7ff fec0 	bl	167ba <free_space>

		if (free_wlen >= wlen) {
   16a3a:	9904      	ldr	r1, [sp, #16]
		wrap = free_space(buffer, &free_wlen);
   16a3c:	4607      	mov	r7, r0
		if (free_wlen >= wlen) {
   16a3e:	42b1      	cmp	r1, r6
   16a40:	d32a      	bcc.n	16a98 <mpsc_pbuf_alloc+0xa4>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   16a42:	6822      	ldr	r2, [r4, #0]
			item =
   16a44:	69e3      	ldr	r3, [r4, #28]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   16a46:	4620      	mov	r0, r4
			item->hdr.valid = 0;
   16a48:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			item =
   16a4c:	eb03 0982 	add.w	r9, r3, r2, lsl #2
			item->hdr.valid = 0;
   16a50:	f021 0103 	bic.w	r1, r1, #3
   16a54:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   16a58:	6821      	ldr	r1, [r4, #0]
   16a5a:	4632      	mov	r2, r6
   16a5c:	f7ff fed1 	bl	16802 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   16a60:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   16a62:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   16a64:	4298      	cmp	r0, r3
   16a66:	d012      	beq.n	16a8e <mpsc_pbuf_alloc+0x9a>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
   16a68:	2700      	movs	r7, #0
	__asm__ volatile(
   16a6a:	f388 8811 	msr	BASEPRI, r8
   16a6e:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
   16a72:	9903      	ldr	r1, [sp, #12]
   16a74:	b129      	cbz	r1, 16a82 <mpsc_pbuf_alloc+0x8e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
   16a76:	6962      	ldr	r2, [r4, #20]
   16a78:	b10a      	cbz	r2, 16a7e <mpsc_pbuf_alloc+0x8a>
				buffer->notify_drop(buffer, dropped_item);
   16a7a:	4620      	mov	r0, r4
   16a7c:	4790      	blx	r2
			}
			dropped_item = NULL;
   16a7e:	2300      	movs	r3, #0
   16a80:	9303      	str	r3, [sp, #12]
		}
	} while (cont);
   16a82:	2f00      	cmp	r7, #0
   16a84:	d1c4      	bne.n	16a10 <mpsc_pbuf_alloc+0x1c>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   16a86:	4648      	mov	r0, r9
   16a88:	b007      	add	sp, #28
   16a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
   16a8e:	6923      	ldr	r3, [r4, #16]
   16a90:	f043 0308 	orr.w	r3, r3, #8
   16a94:	6123      	str	r3, [r4, #16]
   16a96:	e7e7      	b.n	16a68 <mpsc_pbuf_alloc+0x74>
		} else if (wrap) {
   16a98:	b118      	cbz	r0, 16aa2 <mpsc_pbuf_alloc+0xae>
			add_skip_item(buffer, free_wlen);
   16a9a:	4620      	mov	r0, r4
   16a9c:	f7ff fecb 	bl	16836 <add_skip_item>
			cont = true;
   16aa0:	e7e3      	b.n	16a6a <mpsc_pbuf_alloc+0x76>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   16aa2:	9b00      	ldr	r3, [sp, #0]
   16aa4:	ea5a 0303 	orrs.w	r3, sl, r3
   16aa8:	d01a      	beq.n	16ae0 <mpsc_pbuf_alloc+0xec>
   16aaa:	9101      	str	r1, [sp, #4]
   16aac:	f003 fc79 	bl	1a3a2 <k_is_in_isr>
   16ab0:	9901      	ldr	r1, [sp, #4]
   16ab2:	b9a8      	cbnz	r0, 16ae0 <mpsc_pbuf_alloc+0xec>
   16ab4:	f38b 8811 	msr	BASEPRI, fp
   16ab8:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   16abc:	4652      	mov	r2, sl
   16abe:	9b00      	ldr	r3, [sp, #0]
   16ac0:	f104 0028 	add.w	r0, r4, #40	; 0x28
   16ac4:	f7fe fa96 	bl	14ff4 <z_impl_k_sem_take>
	__asm__ volatile(
   16ac8:	f04f 0320 	mov.w	r3, #32
   16acc:	f3ef 8811 	mrs	r8, BASEPRI
   16ad0:	f383 8812 	msr	BASEPRI_MAX, r3
   16ad4:	f3bf 8f6f 	isb	sy
			cont = (err == 0) ? true : false;
   16ad8:	fab0 f780 	clz	r7, r0
   16adc:	097f      	lsrs	r7, r7, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   16ade:	e7c4      	b.n	16a6a <mpsc_pbuf_alloc+0x76>
			cont = drop_item_locked(buffer, free_wlen,
   16ae0:	4620      	mov	r0, r4
   16ae2:	ab05      	add	r3, sp, #20
   16ae4:	aa03      	add	r2, sp, #12
			tmp_wr_idx_val = buffer->tmp_wr_idx;
   16ae6:	6825      	ldr	r5, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
   16ae8:	f7ff fec4 	bl	16874 <drop_item_locked>
   16aec:	4607      	mov	r7, r0
   16aee:	e7bc      	b.n	16a6a <mpsc_pbuf_alloc+0x76>

00016af0 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   16af0:	b570      	push	{r4, r5, r6, lr}
   16af2:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   16af4:	6983      	ldr	r3, [r0, #24]
   16af6:	4608      	mov	r0, r1
{
   16af8:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   16afa:	4798      	blx	r3
   16afc:	4602      	mov	r2, r0
   16afe:	f04f 0320 	mov.w	r3, #32
   16b02:	f3ef 8611 	mrs	r6, BASEPRI
   16b06:	f383 8812 	msr	BASEPRI_MAX, r3
   16b0a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   16b0e:	782b      	ldrb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   16b10:	4620      	mov	r0, r4
	item->hdr.valid = 1;
   16b12:	f043 0301 	orr.w	r3, r3, #1
   16b16:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   16b18:	6861      	ldr	r1, [r4, #4]
   16b1a:	f7ff fe72 	bl	16802 <idx_inc>
   16b1e:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   16b20:	4620      	mov	r0, r4
   16b22:	f7ff ff39 	bl	16998 <max_utilization_update>
	__asm__ volatile(
   16b26:	f386 8811 	msr	BASEPRI, r6
   16b2a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
   16b2e:	bd70      	pop	{r4, r5, r6, pc}

00016b30 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   16b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16b32:	4604      	mov	r4, r0
	__asm__ volatile(
   16b34:	f04f 0320 	mov.w	r3, #32
   16b38:	f3ef 8611 	mrs	r6, BASEPRI
   16b3c:	f383 8812 	msr	BASEPRI_MAX, r3
   16b40:	f3bf 8f6f 	isb	sy
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   16b44:	6923      	ldr	r3, [r4, #16]
   16b46:	f013 0f08 	tst.w	r3, #8
   16b4a:	68a3      	ldr	r3, [r4, #8]
   16b4c:	d102      	bne.n	16b54 <mpsc_pbuf_claim+0x24>
   16b4e:	6862      	ldr	r2, [r4, #4]
   16b50:	4293      	cmp	r3, r2
   16b52:	d900      	bls.n	16b56 <mpsc_pbuf_claim+0x26>
		*res = buffer->size - buffer->tmp_rd_idx;
   16b54:	6a22      	ldr	r2, [r4, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   16b56:	1ad2      	subs	r2, r2, r3

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
   16b58:	69e1      	ldr	r1, [r4, #28]

		if (!a || is_invalid(item)) {
   16b5a:	b92a      	cbnz	r2, 16b68 <mpsc_pbuf_claim+0x38>
	__asm__ volatile(
   16b5c:	f386 8811 	msr	BASEPRI, r6
   16b60:	f3bf 8f6f 	isb	sy
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
   16b64:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
   16b66:	e033      	b.n	16bd0 <mpsc_pbuf_claim+0xa0>
	return !item->hdr.valid && !item->hdr.busy;
   16b68:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		item = (union mpsc_pbuf_generic *)
   16b6c:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
   16b70:	f012 0003 	ands.w	r0, r2, #3
   16b74:	d0f2      	beq.n	16b5c <mpsc_pbuf_claim+0x2c>
	if (item->hdr.busy && !item->hdr.valid) {
   16b76:	2802      	cmp	r0, #2
   16b78:	d103      	bne.n	16b82 <mpsc_pbuf_claim+0x52>
		return item->skip.len;
   16b7a:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
   16b7e:	08ad      	lsrs	r5, r5, #2
   16b80:	d105      	bne.n	16b8e <mpsc_pbuf_claim+0x5e>
   16b82:	07d0      	lsls	r0, r2, #31
   16b84:	d412      	bmi.n	16bac <mpsc_pbuf_claim+0x7c>
					skip ? skip : buffer->get_wlen(item);
   16b86:	4638      	mov	r0, r7
   16b88:	69a3      	ldr	r3, [r4, #24]
   16b8a:	4798      	blx	r3
   16b8c:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   16b8e:	68a1      	ldr	r1, [r4, #8]
   16b90:	462a      	mov	r2, r5
   16b92:	4620      	mov	r0, r4
   16b94:	f7ff fe35 	bl	16802 <idx_inc>
				rd_idx_inc(buffer, inc);
   16b98:	4629      	mov	r1, r5
				buffer->tmp_rd_idx =
   16b9a:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
   16b9c:	4620      	mov	r0, r4
   16b9e:	f7ff fe3e 	bl	1681e <rd_idx_inc>
   16ba2:	f386 8811 	msr	BASEPRI, r6
   16ba6:	f3bf 8f6f 	isb	sy
	} while (cont);
   16baa:	e7c3      	b.n	16b34 <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
   16bac:	f042 0202 	orr.w	r2, r2, #2
   16bb0:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
						buffer->get_wlen(item));
   16bb4:	69a3      	ldr	r3, [r4, #24]
   16bb6:	4638      	mov	r0, r7
					idx_inc(buffer, buffer->tmp_rd_idx,
   16bb8:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
   16bba:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
   16bbc:	4629      	mov	r1, r5
						buffer->get_wlen(item));
   16bbe:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
   16bc0:	4620      	mov	r0, r4
   16bc2:	f7ff fe1e 	bl	16802 <idx_inc>
				buffer->tmp_rd_idx =
   16bc6:	60a0      	str	r0, [r4, #8]
   16bc8:	f386 8811 	msr	BASEPRI, r6
   16bcc:	f3bf 8f6f 	isb	sy
}
   16bd0:	4638      	mov	r0, r7
   16bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00016bd4 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   16bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16bd6:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   16bd8:	6983      	ldr	r3, [r0, #24]
   16bda:	4608      	mov	r0, r1
{
   16bdc:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   16bde:	4798      	blx	r3
   16be0:	4606      	mov	r6, r0
	__asm__ volatile(
   16be2:	f04f 0320 	mov.w	r3, #32
   16be6:	f3ef 8711 	mrs	r7, BASEPRI
   16bea:	f383 8812 	msr	BASEPRI_MAX, r3
   16bee:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   16bf2:	782b      	ldrb	r3, [r5, #0]
   16bf4:	f36f 0300 	bfc	r3, #0, #1
   16bf8:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   16bfa:	6923      	ldr	r3, [r4, #16]
   16bfc:	079b      	lsls	r3, r3, #30
   16bfe:	d505      	bpl.n	16c0c <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   16c00:	68e2      	ldr	r2, [r4, #12]
   16c02:	69e3      	ldr	r3, [r4, #28]
   16c04:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   16c08:	429d      	cmp	r5, r3
   16c0a:	d11a      	bne.n	16c42 <mpsc_pbuf_free+0x6e>
		witem->hdr.busy = 0;
   16c0c:	782b      	ldrb	r3, [r5, #0]
   16c0e:	f36f 0341 	bfc	r3, #1, #1
   16c12:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   16c14:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   16c18:	4299      	cmp	r1, r3
   16c1a:	d104      	bne.n	16c26 <mpsc_pbuf_free+0x52>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
   16c1c:	4632      	mov	r2, r6
   16c1e:	4620      	mov	r0, r4
   16c20:	f7ff fdef 	bl	16802 <idx_inc>
   16c24:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
   16c26:	4631      	mov	r1, r6
   16c28:	4620      	mov	r0, r4
   16c2a:	f7ff fdf8 	bl	1681e <rd_idx_inc>
	__asm__ volatile(
   16c2e:	f387 8811 	msr	BASEPRI, r7
   16c32:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   16c36:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   16c3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   16c3e:	f7fe b9b3 	b.w	14fa8 <z_impl_k_sem_give>
		witem->skip.len = wlen;
   16c42:	682b      	ldr	r3, [r5, #0]
   16c44:	f360 039f 	bfi	r3, r0, #2, #30
   16c48:	602b      	str	r3, [r5, #0]
   16c4a:	e7f0      	b.n	16c2e <mpsc_pbuf_free+0x5a>

00016c4c <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   16c4c:	6902      	ldr	r2, [r0, #16]
   16c4e:	6883      	ldr	r3, [r0, #8]
   16c50:	0712      	lsls	r2, r2, #28
   16c52:	d402      	bmi.n	16c5a <mpsc_pbuf_is_pending+0xe>
   16c54:	6842      	ldr	r2, [r0, #4]
   16c56:	429a      	cmp	r2, r3
   16c58:	d200      	bcs.n	16c5c <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
   16c5a:	6a02      	ldr	r2, [r0, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   16c5c:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   16c5e:	1e18      	subs	r0, r3, #0
   16c60:	bf18      	it	ne
   16c62:	2001      	movne	r0, #1
   16c64:	4770      	bx	lr

00016c66 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   16c66:	4770      	bx	lr

00016c68 <nordicsemi_nrf53_init>:
{
   16c68:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   16c6a:	f04f 0320 	mov.w	r3, #32
   16c6e:	f3ef 8511 	mrs	r5, BASEPRI
   16c72:	f383 8812 	msr	BASEPRI_MAX, r3
   16c76:	f3bf 8f6f 	isb	sy
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
   16c7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   16c7e:	2401      	movs	r4, #1
   16c80:	2202      	movs	r2, #2
		soc_secure_gpio_pin_mcu_select(forwarded_psels[i], NRF_GPIO_PIN_SEL_NETWORK);
   16c82:	4621      	mov	r1, r4
   16c84:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
   16c88:	2021      	movs	r0, #33	; 0x21
   16c8a:	f8c3 4704 	str.w	r4, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   16c8e:	f8c3 4904 	str.w	r4, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   16c92:	f8c3 4b00 	str.w	r4, [r3, #2816]	; 0xb00
   16c96:	f000 f824 	bl	16ce2 <soc_secure_gpio_pin_mcu_select>
   16c9a:	4621      	mov	r1, r4
   16c9c:	2020      	movs	r0, #32
   16c9e:	f000 f820 	bl	16ce2 <soc_secure_gpio_pin_mcu_select>
   16ca2:	4621      	mov	r1, r4
   16ca4:	200b      	movs	r0, #11
   16ca6:	f000 f81c 	bl	16ce2 <soc_secure_gpio_pin_mcu_select>
   16caa:	4621      	mov	r1, r4
   16cac:	200a      	movs	r0, #10
   16cae:	f000 f818 	bl	16ce2 <soc_secure_gpio_pin_mcu_select>
	__asm__ volatile(
   16cb2:	f385 8811 	msr	BASEPRI, r5
   16cb6:	f3bf 8f6f 	isb	sy
}
   16cba:	2000      	movs	r0, #0
   16cbc:	bd38      	pop	{r3, r4, r5, pc}

00016cbe <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   16cbe:	2806      	cmp	r0, #6
   16cc0:	d108      	bne.n	16cd4 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   16cc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   16cc6:	2201      	movs	r2, #1
   16cc8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   16ccc:	f3bf 8f4f 	dsb	sy
        __WFE();
   16cd0:	bf20      	wfe
    while (true)
   16cd2:	e7fd      	b.n	16cd0 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   16cd4:	4770      	bx	lr

00016cd6 <pm_state_exit_post_ops>:
   16cd6:	2300      	movs	r3, #0
   16cd8:	f383 8811 	msr	BASEPRI, r3
   16cdc:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   16ce0:	4770      	bx	lr

00016ce2 <soc_secure_gpio_pin_mcu_select>:
#include "tfm_platform_api.h"
#include "tfm_ioctl_api.h"

#if NRF_GPIO_HAS_SEL
void soc_secure_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_sel_t mcu)
{
   16ce2:	b507      	push	{r0, r1, r2, lr}
	uint32_t result;
	enum tfm_platform_err_t err;

	err = tfm_platform_gpio_pin_mcu_select(pin_number, mcu, &result);
   16ce4:	aa01      	add	r2, sp, #4
   16ce6:	f002 fc9f 	bl	19628 <tfm_platform_gpio_pin_mcu_select>
	__ASSERT(err == TFM_PLATFORM_ERR_SUCCESS, "TFM platform error (%d)", err);
	__ASSERT(result == 0, "GPIO service error (%d)", result);
}
   16cea:	b003      	add	sp, #12
   16cec:	f85d fb04 	ldr.w	pc, [sp], #4

00016cf0 <z_log_msg_static_create.constprop.0>:
   16cf0:	2300      	movs	r3, #0
   16cf2:	f7f3 bd17 	b.w	a724 <z_impl_z_log_msg_static_create>

00016cf6 <get_tx_buffer_size>:
	return data->tx_buffer_size;
   16cf6:	6903      	ldr	r3, [r0, #16]
}
   16cf8:	f8d3 0370 	ldr.w	r0, [r3, #880]	; 0x370
   16cfc:	4770      	bx	lr

00016cfe <drop_tx_buffer>:
}
   16cfe:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16d02:	4770      	bx	lr

00016d04 <release_rx_buffer>:
{
   16d04:	4608      	mov	r0, r1
   16d06:	b508      	push	{r3, lr}
   16d08:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   16d0a:	b118      	cbz	r0, 16d14 <release_rx_buffer+0x10>
	rpmsg_release_rx_buffer(&rpmsg_ept->ep, data);
   16d0c:	f003 f800 	bl	19d10 <rpmsg_release_rx_buffer>
	return 0;
   16d10:	2000      	movs	r0, #0
}
   16d12:	bd08      	pop	{r3, pc}
		return -ENOENT;
   16d14:	f06f 0001 	mvn.w	r0, #1
   16d18:	e7fb      	b.n	16d12 <release_rx_buffer+0xe>

00016d1a <hold_rx_buffer>:
{
   16d1a:	4608      	mov	r0, r1
   16d1c:	b508      	push	{r3, lr}
   16d1e:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   16d20:	b118      	cbz	r0, 16d2a <hold_rx_buffer+0x10>
	rpmsg_hold_rx_buffer(&rpmsg_ept->ep, data);
   16d22:	f002 ffed 	bl	19d00 <rpmsg_hold_rx_buffer>
	return 0;
   16d26:	2000      	movs	r0, #0
}
   16d28:	bd08      	pop	{r3, pc}
		return -ENOENT;
   16d2a:	f06f 0001 	mvn.w	r0, #1
   16d2e:	e7fb      	b.n	16d28 <hold_rx_buffer+0xe>

00016d30 <send_nocopy>:
{
   16d30:	b513      	push	{r0, r1, r4, lr}
   16d32:	4604      	mov	r4, r0
   16d34:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16d36:	6921      	ldr	r1, [r4, #16]
   16d38:	f501 715b 	add.w	r1, r1, #876	; 0x36c
   16d3c:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
   16d40:	2902      	cmp	r1, #2
   16d42:	d109      	bne.n	16d58 <send_nocopy+0x28>
	if (len == 0) {
   16d44:	b15b      	cbz	r3, 16d5e <send_nocopy+0x2e>
	if (!rpmsg_ept) {
   16d46:	b168      	cbz	r0, 16d64 <send_nocopy+0x34>
				    const void *data, int len)
{
	if (!ept)
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_nocopy(ept, ept->addr,
   16d48:	9300      	str	r3, [sp, #0]
   16d4a:	4613      	mov	r3, r2
   16d4c:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   16d50:	f7fd fb62 	bl	14418 <rpmsg_send_offchannel_nocopy>
}
   16d54:	b002      	add	sp, #8
   16d56:	bd10      	pop	{r4, pc}
		return -EBUSY;
   16d58:	f06f 000f 	mvn.w	r0, #15
   16d5c:	e7fa      	b.n	16d54 <send_nocopy+0x24>
		return -EBADMSG;
   16d5e:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   16d62:	e7f7      	b.n	16d54 <send_nocopy+0x24>
		return -ENOENT;
   16d64:	f06f 0001 	mvn.w	r0, #1
   16d68:	e7f4      	b.n	16d54 <send_nocopy+0x24>

00016d6a <get_tx_buffer>:
{
   16d6a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16d6e:	461c      	mov	r4, r3
   16d70:	e9dd 5308 	ldrd	r5, r3, [sp, #32]
   16d74:	4616      	mov	r6, r2
   16d76:	4698      	mov	r8, r3
	if (!rpmsg_ept) {
   16d78:	460f      	mov	r7, r1
	struct backend_data_t *data = instance->data;
   16d7a:	6900      	ldr	r0, [r0, #16]
	if (!rpmsg_ept) {
   16d7c:	b339      	cbz	r1, 16dce <get_tx_buffer+0x64>
	if (!r_data || !size) {
   16d7e:	b34a      	cbz	r2, 16dd4 <get_tx_buffer+0x6a>
   16d80:	b344      	cbz	r4, 16dd4 <get_tx_buffer+0x6a>
	if (!K_TIMEOUT_EQ(wait, K_FOREVER) && !K_TIMEOUT_EQ(wait, K_NO_WAIT)) {
   16d82:	1c6a      	adds	r2, r5, #1
   16d84:	f143 0300 	adc.w	r3, r3, #0
   16d88:	2a02      	cmp	r2, #2
   16d8a:	f173 0300 	sbcs.w	r3, r3, #0
   16d8e:	d224      	bcs.n	16dda <get_tx_buffer+0x70>
	if ((*size) && (*size > data->tx_buffer_size)) {
   16d90:	6822      	ldr	r2, [r4, #0]
   16d92:	b142      	cbz	r2, 16da6 <get_tx_buffer+0x3c>
   16d94:	f8d0 3370 	ldr.w	r3, [r0, #880]	; 0x370
   16d98:	429a      	cmp	r2, r3
   16d9a:	d904      	bls.n	16da6 <get_tx_buffer+0x3c>
		return -ENOMEM;
   16d9c:	f06f 000b 	mvn.w	r0, #11
		*size = data->tx_buffer_size;
   16da0:	6023      	str	r3, [r4, #0]
}
   16da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		payload = rpmsg_get_tx_payload_buffer(&rpmsg_ept->ep, size,
   16da6:	ea05 0908 	and.w	r9, r5, r8
   16daa:	f109 0301 	add.w	r3, r9, #1
   16dae:	425a      	negs	r2, r3
   16db0:	415a      	adcs	r2, r3
   16db2:	4621      	mov	r1, r4
   16db4:	4638      	mov	r0, r7
   16db6:	f002 ffb4 	bl	19d22 <rpmsg_get_tx_payload_buffer>
	} while ((!payload) && K_TIMEOUT_EQ(wait, K_FOREVER));
   16dba:	b988      	cbnz	r0, 16de0 <get_tx_buffer+0x76>
   16dbc:	f1b8 3fff 	cmp.w	r8, #4294967295
   16dc0:	bf08      	it	eq
   16dc2:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   16dc6:	d0f0      	beq.n	16daa <get_tx_buffer+0x40>
		return -ENOBUFS;
   16dc8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16dcc:	e7e9      	b.n	16da2 <get_tx_buffer+0x38>
		return -ENOENT;
   16dce:	f06f 0001 	mvn.w	r0, #1
   16dd2:	e7e6      	b.n	16da2 <get_tx_buffer+0x38>
		return -EINVAL;
   16dd4:	f06f 0015 	mvn.w	r0, #21
   16dd8:	e7e3      	b.n	16da2 <get_tx_buffer+0x38>
		return -ENOTSUP;
   16dda:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16dde:	e7e0      	b.n	16da2 <get_tx_buffer+0x38>
	(*r_data) = payload;
   16de0:	6030      	str	r0, [r6, #0]
	return 0;
   16de2:	2000      	movs	r0, #0
   16de4:	e7dd      	b.n	16da2 <get_tx_buffer+0x38>

00016de6 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   16de6:	f002 bfe1 	b.w	19dac <rpmsg_destroy_ept>

00016dea <get_ept_slot_with_name>:
{
   16dea:	b538      	push	{r3, r4, r5, lr}
   16dec:	460d      	mov	r5, r1
   16dee:	4604      	mov	r4, r0
		if (strcmp(name, rpmsg_ept->name) == 0) {
   16df0:	f100 0140 	add.w	r1, r0, #64	; 0x40
   16df4:	4628      	mov	r0, r5
   16df6:	f000 fe7d 	bl	17af4 <strcmp>
   16dfa:	b130      	cbz	r0, 16e0a <get_ept_slot_with_name+0x20>
   16dfc:	4628      	mov	r0, r5
   16dfe:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   16e02:	f000 fe77 	bl	17af4 <strcmp>
   16e06:	b920      	cbnz	r0, 16e12 <get_ept_slot_with_name+0x28>
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   16e08:	2001      	movs	r0, #1
			return &rpmsg_inst->endpoint[i];
   16e0a:	2370      	movs	r3, #112	; 0x70
   16e0c:	fb03 4000 	mla	r0, r3, r0, r4
}
   16e10:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   16e12:	2000      	movs	r0, #0
   16e14:	e7fc      	b.n	16e10 <get_ept_slot_with_name+0x26>

00016e16 <mbox_callback>:
	k_work_submit_to_queue(&data->mbox_wq, &data->mbox_work);
   16e16:	f502 712c 	add.w	r1, r2, #688	; 0x2b0
   16e1a:	f502 7030 	add.w	r0, r2, #704	; 0x2c0
   16e1e:	f003 bc2a 	b.w	1a676 <k_work_submit_to_queue>

00016e22 <mbox_callback_process>:
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   16e22:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
	virtqueue_notification(data->vr.vq[vq_id]);
   16e26:	f5a0 702c 	sub.w	r0, r0, #688	; 0x2b0
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   16e2a:	3b00      	subs	r3, #0
   16e2c:	bf18      	it	ne
   16e2e:	2301      	movne	r3, #1
	virtqueue_notification(data->vr.vq[vq_id]);
   16e30:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   16e34:	f8d0 029c 	ldr.w	r0, [r0, #668]	; 0x29c
   16e38:	f002 bf14 	b.w	19c64 <virtqueue_notification>

00016e3c <virtio_notify_cb>:
	if (conf->mbox_tx.dev) {
   16e3c:	68cb      	ldr	r3, [r1, #12]
   16e3e:	b133      	cbz	r3, 16e4e <virtio_notify_cb+0x12>
		(const struct mbox_driver_api *)channel->dev->api;
   16e40:	68c8      	ldr	r0, [r1, #12]
	if (api->send == NULL) {
   16e42:	6883      	ldr	r3, [r0, #8]
   16e44:	681b      	ldr	r3, [r3, #0]
   16e46:	b113      	cbz	r3, 16e4e <virtio_notify_cb+0x12>
	return api->send(channel->dev, channel->id, msg);
   16e48:	2200      	movs	r2, #0
   16e4a:	6909      	ldr	r1, [r1, #16]
   16e4c:	4718      	bx	r3
}
   16e4e:	4770      	bx	lr

00016e50 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   16e50:	f7fe b83a 	b.w	14ec8 <z_impl_k_mutex_unlock>

00016e54 <atomic_set.isra.0>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16e54:	e8d0 3fef 	ldaex	r3, [r0]
   16e58:	e8c0 1fe2 	stlex	r2, r1, [r0]
   16e5c:	2a00      	cmp	r2, #0
   16e5e:	d1f9      	bne.n	16e54 <atomic_set.isra.0>
}
   16e60:	4770      	bx	lr

00016e62 <backend_init>:
{
   16e62:	b510      	push	{r4, lr}
	data->role = conf->role;
   16e64:	6843      	ldr	r3, [r0, #4]
	struct backend_data_t *data = instance->data;
   16e66:	6904      	ldr	r4, [r0, #16]
	data->role = conf->role;
   16e68:	681b      	ldr	r3, [r3, #0]
   16e6a:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
	return z_impl_k_mutex_init(mutex);
   16e6e:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
   16e72:	f003 fab2 	bl	1a3da <z_impl_k_mutex_init>
	atomic_set(&data->state, STATE_READY);
   16e76:	2100      	movs	r1, #0
   16e78:	f504 705b 	add.w	r0, r4, #876	; 0x36c
   16e7c:	f7ff ffea 	bl	16e54 <atomic_set.isra.0>
}
   16e80:	4608      	mov	r0, r1
   16e82:	bd10      	pop	{r4, pc}

00016e84 <ns_bind_cb>:
{
   16e84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   16e88:	4617      	mov	r7, r2
	if (name == NULL || name[0] == '\0') {
   16e8a:	460d      	mov	r5, r1
   16e8c:	b379      	cbz	r1, 16eee <ns_bind_cb+0x6a>
   16e8e:	780b      	ldrb	r3, [r1, #0]
   16e90:	b36b      	cbz	r3, 16eee <ns_bind_cb+0x6a>
	rpmsg_inst = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
   16e92:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
   16e96:	f5a4 78ce 	sub.w	r8, r4, #412	; 0x19c
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   16e9a:	3414      	adds	r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   16e9c:	f04f 32ff 	mov.w	r2, #4294967295
   16ea0:	f04f 33ff 	mov.w	r3, #4294967295
   16ea4:	4620      	mov	r0, r4
   16ea6:	f7fd ff95 	bl	14dd4 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, name);
   16eaa:	462a      	mov	r2, r5
   16eac:	4640      	mov	r0, r8
   16eae:	a901      	add	r1, sp, #4
   16eb0:	f7f2 fea0 	bl	9bf4 <get_ept>
	if (rpmsg_ept == NULL) {
   16eb4:	9e01      	ldr	r6, [sp, #4]
   16eb6:	b92e      	cbnz	r6, 16ec4 <ns_bind_cb+0x40>
		k_mutex_unlock(&rpmsg_inst->mtx);
   16eb8:	4620      	mov	r0, r4
}
   16eba:	b002      	add	sp, #8
   16ebc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_mutex_unlock(&rpmsg_inst->mtx);
   16ec0:	f7ff bfc6 	b.w	16e50 <k_mutex_unlock.isra.0>
	if (ept_cached) {
   16ec4:	b158      	cbz	r0, 16ede <ns_bind_cb+0x5a>
		k_mutex_unlock(&rpmsg_inst->mtx);
   16ec6:	4620      	mov	r0, r4
   16ec8:	f7ff ffc2 	bl	16e50 <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   16ecc:	463b      	mov	r3, r7
   16ece:	462a      	mov	r2, r5
   16ed0:	4631      	mov	r1, r6
   16ed2:	4640      	mov	r0, r8
}
   16ed4:	b002      	add	sp, #8
   16ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   16eda:	f7f2 be69 	b.w	9bb0 <advertise_ept>
		strncpy(rpmsg_ept->name, name, sizeof(rpmsg_ept->name));
   16ede:	2220      	movs	r2, #32
   16ee0:	4629      	mov	r1, r5
   16ee2:	f106 0040 	add.w	r0, r6, #64	; 0x40
   16ee6:	f000 fde1 	bl	17aac <strncpy>
		rpmsg_ept->dest = dest;
   16eea:	6637      	str	r7, [r6, #96]	; 0x60
   16eec:	e7e4      	b.n	16eb8 <ns_bind_cb+0x34>
}
   16eee:	b002      	add	sp, #8
   16ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00016ef4 <ept_cb>:
{
   16ef4:	b510      	push	{r4, lr}
   16ef6:	4608      	mov	r0, r1
   16ef8:	9b02      	ldr	r3, [sp, #8]
	if (len == 0) {
   16efa:	4611      	mov	r1, r2
   16efc:	b952      	cbnz	r2, 16f14 <ept_cb+0x20>
		if (!ept->bound) {
   16efe:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   16f02:	b92a      	cbnz	r2, 16f10 <ept_cb+0x1c>
			ept->bound = true;
   16f04:	2201      	movs	r2, #1
			bound_cb(ept);
   16f06:	4618      	mov	r0, r3
			ept->bound = true;
   16f08:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			bound_cb(ept);
   16f0c:	f7f2 ffc4 	bl	9e98 <bound_cb>
}
   16f10:	2000      	movs	r0, #0
   16f12:	bd10      	pop	{r4, pc}
	if (ept->cb->received) {
   16f14:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   16f16:	6854      	ldr	r4, [r2, #4]
   16f18:	2c00      	cmp	r4, #0
   16f1a:	d0f9      	beq.n	16f10 <ept_cb+0x1c>
		ept->cb->received(data, len, ept->priv);
   16f1c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   16f1e:	47a0      	blx	r4
   16f20:	e7f6      	b.n	16f10 <ept_cb+0x1c>

00016f22 <deregister_ept>:
{
   16f22:	b510      	push	{r4, lr}
   16f24:	460c      	mov	r4, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16f26:	6903      	ldr	r3, [r0, #16]
   16f28:	f503 735b 	add.w	r3, r3, #876	; 0x36c
   16f2c:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
   16f30:	2b02      	cmp	r3, #2
   16f32:	d10a      	bne.n	16f4a <deregister_ept+0x28>
	if (!rpmsg_ept) {
   16f34:	b161      	cbz	r1, 16f50 <deregister_ept+0x2e>
	rpmsg_destroy_ept(&rpmsg_ept->ep);
   16f36:	4608      	mov	r0, r1
   16f38:	f002 ff38 	bl	19dac <rpmsg_destroy_ept>
	memset(rpmsg_ept, 0, sizeof(struct ipc_rpmsg_ept));
   16f3c:	2270      	movs	r2, #112	; 0x70
   16f3e:	2100      	movs	r1, #0
   16f40:	4620      	mov	r0, r4
   16f42:	f000 fe11 	bl	17b68 <memset>
	return 0;
   16f46:	2000      	movs	r0, #0
}
   16f48:	bd10      	pop	{r4, pc}
		return -EBUSY;
   16f4a:	f06f 000f 	mvn.w	r0, #15
   16f4e:	e7fb      	b.n	16f48 <deregister_ept+0x26>
		return -ENOENT;
   16f50:	f06f 0001 	mvn.w	r0, #1
   16f54:	e7f8      	b.n	16f48 <deregister_ept+0x26>

00016f56 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   16f56:	f002 bf29 	b.w	19dac <rpmsg_destroy_ept>

00016f5a <ipc_rpmsg_deinit>:

int ipc_rpmsg_deinit(struct ipc_rpmsg_instance *instance,
		   unsigned int role)
{
   16f5a:	b538      	push	{r3, r4, r5, lr}
   16f5c:	460d      	mov	r5, r1
	if (!instance) {
   16f5e:	4604      	mov	r4, r0
   16f60:	b160      	cbz	r0, 16f7c <ipc_rpmsg_deinit+0x22>
		return -EINVAL;
	}

	rpmsg_deinit_vdev(&instance->rvdev);
   16f62:	30e0      	adds	r0, #224	; 0xe0
   16f64:	f003 f94e 	bl	1a204 <rpmsg_deinit_vdev>

	if (role == RPMSG_HOST) {
   16f68:	b10d      	cbz	r5, 16f6e <ipc_rpmsg_deinit+0x14>
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
	}

	return 0;
   16f6a:	2000      	movs	r0, #0
}
   16f6c:	bd38      	pop	{r3, r4, r5, pc}
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
   16f6e:	220c      	movs	r2, #12
   16f70:	4629      	mov	r1, r5
   16f72:	f504 70ce 	add.w	r0, r4, #412	; 0x19c
   16f76:	f000 fdf7 	bl	17b68 <memset>
   16f7a:	e7f6      	b.n	16f6a <ipc_rpmsg_deinit+0x10>
		return -EINVAL;
   16f7c:	f06f 0015 	mvn.w	r0, #21
   16f80:	e7f4      	b.n	16f6c <ipc_rpmsg_deinit+0x12>

00016f82 <virtio_notify>:
	vr = CONTAINER_OF(vq->vq_dev, struct ipc_static_vrings, vdev);
   16f82:	6802      	ldr	r2, [r0, #0]
	if (vr->notify_cb) {
   16f84:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   16f88:	b113      	cbz	r3, 16f90 <virtio_notify+0xe>
		vr->notify_cb(vq, vr->priv);
   16f8a:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
   16f8e:	4718      	bx	r3
}
   16f90:	4770      	bx	lr

00016f92 <virtio_set_features>:
}
   16f92:	4770      	bx	lr

00016f94 <virtio_set_status>:
	if (p_vdev->role != VIRTIO_DEV_DRIVER) {
   16f94:	6983      	ldr	r3, [r0, #24]
   16f96:	b913      	cbnz	r3, 16f9e <virtio_set_status+0xa>
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
   16f98:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   16f9c:	7019      	strb	r1, [r3, #0]
}
   16f9e:	4770      	bx	lr

00016fa0 <virtio_get_features>:
}
   16fa0:	2001      	movs	r0, #1
   16fa2:	4770      	bx	lr

00016fa4 <virtio_get_status>:
	if (p_vdev->role == VIRTIO_DEV_DEVICE) {
   16fa4:	6983      	ldr	r3, [r0, #24]
   16fa6:	2b01      	cmp	r3, #1
   16fa8:	d104      	bne.n	16fb4 <virtio_get_status+0x10>
	return *(volatile uint8_t *)addr;
   16faa:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   16fae:	7818      	ldrb	r0, [r3, #0]
   16fb0:	b2c0      	uxtb	r0, r0
   16fb2:	4770      	bx	lr
	ret = VIRTIO_CONFIG_STATUS_DRIVER_OK;
   16fb4:	2004      	movs	r0, #4
}
   16fb6:	4770      	bx	lr

00016fb8 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
   16fb8:	b538      	push	{r3, r4, r5, lr}
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
   16fba:	00c4      	lsls	r4, r0, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
   16fbc:	3434      	adds	r4, #52	; 0x34
	return k_malloc(size);
   16fbe:	4620      	mov	r0, r4
   16fc0:	f003 feca 	bl	1ad58 <k_malloc>

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   16fc4:	4605      	mov	r5, r0
   16fc6:	b118      	cbz	r0, 16fd0 <virtqueue_allocate+0x18>
		memset(vqs, 0x00, vq_size);
   16fc8:	4622      	mov	r2, r4
   16fca:	2100      	movs	r1, #0
   16fcc:	f000 fdcc 	bl	17b68 <memset>
	}

	return vqs;
}
   16fd0:	4628      	mov	r0, r5
   16fd2:	bd38      	pop	{r3, r4, r5, pc}

00016fd4 <ipc_static_vrings_deinit>:

int ipc_static_vrings_deinit(struct ipc_static_vrings *vr, unsigned int role)
{
   16fd4:	b538      	push	{r3, r4, r5, lr}
   16fd6:	4604      	mov	r4, r0
	memset(&vr->vdev, 0, sizeof(struct virtio_device));
   16fd8:	2230      	movs	r2, #48	; 0x30
   16fda:	2100      	movs	r1, #0
   16fdc:	f000 fdc4 	bl	17b68 <memset>
	memset(&(vr->rvrings[RPMSG_VQ_1]), 0, sizeof(struct virtio_vring_info));
   16fe0:	2218      	movs	r2, #24
   16fe2:	2100      	movs	r1, #0
   16fe4:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   16fe8:	f000 fdbe 	bl	17b68 <memset>
	memset(&(vr->rvrings[RPMSG_VQ_0]), 0, sizeof(struct virtio_vring_info));
   16fec:	2218      	movs	r2, #24
   16fee:	2100      	movs	r1, #0
   16ff0:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
   16ff4:	f000 fdb8 	bl	17b68 <memset>
	virtqueue_free(vr->vq[RPMSG_VQ_1]);
   16ff8:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
   16ffc:	f7fd f9be 	bl	1437c <virtqueue_free>
	virtqueue_free(vr->vq[RPMSG_VQ_0]);
   17000:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   17004:	f7fd f9ba 	bl	1437c <virtqueue_free>
	vr->shm_io = 0;
   17008:	2300      	movs	r3, #0
	metal_device_close(&vr->shm_device);
   1700a:	f104 0034 	add.w	r0, r4, #52	; 0x34
	vr->shm_io = 0;
   1700e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	metal_device_close(&vr->shm_device);
   17012:	f002 fba8 	bl	19766 <metal_device_close>
	metal_finish();
   17016:	f7fd f929 	bl	1426c <metal_finish>
	if (io->ops.close)
   1701a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	err = libmetal_teardown(vr);
	if (err != 0) {
		return err;
	}

	metal_io_finish(vr->shm_device.regions);
   1701c:	f104 0540 	add.w	r5, r4, #64	; 0x40
   17020:	b10b      	cbz	r3, 17026 <ipc_static_vrings_deinit+0x52>
		(*io->ops.close)(io);
   17022:	4628      	mov	r0, r5
   17024:	4798      	blx	r3
	memset(io, 0, sizeof(*io));
   17026:	2238      	movs	r2, #56	; 0x38
   17028:	2100      	movs	r1, #0
   1702a:	4628      	mov	r0, r5
   1702c:	f000 fd9c 	bl	17b68 <memset>

	return 0;
}
   17030:	2000      	movs	r0, #0
   17032:	bd38      	pop	{r3, r4, r5, pc}

00017034 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
   17034:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   17036:	075b      	lsls	r3, r3, #29
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
   17038:	bf5f      	itttt	pl
   1703a:	6803      	ldrpl	r3, [r0, #0]
   1703c:	8842      	ldrhpl	r2, [r0, #2]
   1703e:	f3c3 234a 	ubfxpl	r3, r3, #9, #11
   17042:	eb03 1012 	addpl.w	r0, r3, r2, lsr #4
   17046:	bf5d      	ittte	pl
   17048:	3017      	addpl	r0, #23
   1704a:	f020 0007 	bicpl.w	r0, r0, #7
   1704e:	0880      	lsrpl	r0, r0, #2
	return 0;
   17050:	2000      	movmi	r0, #0
}
   17052:	4770      	bx	lr

00017054 <dummy_timestamp>:
}
   17054:	2000      	movs	r0, #0
   17056:	4770      	bx	lr

00017058 <default_get_timestamp>:
   17058:	f002 bab0 	b.w	195bc <sys_clock_cycle_get_32>

0001705c <atomic_inc>:
{
   1705c:	4603      	mov	r3, r0
}
   1705e:	e8d3 0fef 	ldaex	r0, [r3]
   17062:	1c42      	adds	r2, r0, #1
   17064:	e8c3 2fe1 	stlex	r1, r2, [r3]
   17068:	2900      	cmp	r1, #0
   1706a:	d1f8      	bne.n	1705e <atomic_inc+0x2>
   1706c:	4770      	bx	lr

0001706e <z_log_vprintk>:
{
   1706e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   17070:	2300      	movs	r3, #0
   17072:	e9cd 0102 	strd	r0, r1, [sp, #8]
   17076:	461a      	mov	r2, r3
   17078:	4619      	mov	r1, r3
   1707a:	4618      	mov	r0, r3
   1707c:	e9cd 3300 	strd	r3, r3, [sp]
   17080:	f7f3 fbd4 	bl	a82c <z_impl_z_log_msg_runtime_vcreate>
}
   17084:	b005      	add	sp, #20
   17086:	f85d fb04 	ldr.w	pc, [sp], #4

0001708a <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   1708a:	2001      	movs	r0, #1
   1708c:	f7f3 b992 	b.w	a3b4 <z_log_dropped>

00017090 <z_log_get_tag>:
}
   17090:	2000      	movs	r0, #0
   17092:	4770      	bx	lr

00017094 <z_cbprintf_cpy>:
{
   17094:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   17096:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   1709a:	1b9b      	subs	r3, r3, r6
   1709c:	428b      	cmp	r3, r1
{
   1709e:	460c      	mov	r4, r1
   170a0:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   170a2:	d30a      	bcc.n	170ba <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   170a4:	6813      	ldr	r3, [r2, #0]
   170a6:	460a      	mov	r2, r1
   170a8:	4601      	mov	r1, r0
   170aa:	1998      	adds	r0, r3, r6
   170ac:	f000 fd51 	bl	17b52 <memcpy>
	return len;
   170b0:	4620      	mov	r0, r4
	desc->off += len;
   170b2:	68ab      	ldr	r3, [r5, #8]
   170b4:	4423      	add	r3, r4
   170b6:	60ab      	str	r3, [r5, #8]
}
   170b8:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   170ba:	f06f 001b 	mvn.w	r0, #27
   170be:	e7fb      	b.n	170b8 <z_cbprintf_cpy+0x24>

000170c0 <z_log_msg_finalize>:
{
   170c0:	b570      	push	{r4, r5, r6, lr}
   170c2:	460e      	mov	r6, r1
   170c4:	4615      	mov	r5, r2
   170c6:	4619      	mov	r1, r3
	if (!msg) {
   170c8:	4604      	mov	r4, r0
   170ca:	b918      	cbnz	r0, 170d4 <z_log_msg_finalize+0x14>
}
   170cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   170d0:	f7f3 b970 	b.w	a3b4 <z_log_dropped>
	if (data) {
   170d4:	b133      	cbz	r3, 170e4 <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
   170d6:	f3c2 234a 	ubfx	r3, r2, #9, #11
   170da:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
   170dc:	0d12      	lsrs	r2, r2, #20
   170de:	4418      	add	r0, r3
   170e0:	f000 fd37 	bl	17b52 <memcpy>
	msg->hdr.source = source;
   170e4:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   170e8:	4620      	mov	r0, r4
}
   170ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   170ee:	f7f3 bae5 	b.w	a6bc <z_log_msg_commit>

000170f2 <buffer_write>:
{
   170f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   170f4:	4606      	mov	r6, r0
   170f6:	460d      	mov	r5, r1
   170f8:	4614      	mov	r4, r2
   170fa:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   170fc:	4621      	mov	r1, r4
   170fe:	4628      	mov	r0, r5
   17100:	463a      	mov	r2, r7
   17102:	47b0      	blx	r6
	} while (len != 0);
   17104:	1a24      	subs	r4, r4, r0
		buf += processed;
   17106:	4405      	add	r5, r0
	} while (len != 0);
   17108:	d1f8      	bne.n	170fc <buffer_write+0xa>
}
   1710a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001710c <cbvprintf>:
{
   1710c:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   1710e:	2400      	movs	r4, #0
   17110:	9400      	str	r4, [sp, #0]
   17112:	f7f1 ffe9 	bl	90e8 <z_cbvprintf_impl>
}
   17116:	b002      	add	sp, #8
   17118:	bd10      	pop	{r4, pc}

0001711a <log_output_flush>:
{
   1711a:	b510      	push	{r4, lr}
		     output->control_block->offset,
   1711c:	6842      	ldr	r2, [r0, #4]
{
   1711e:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   17120:	e9d2 2300 	ldrd	r2, r3, [r2]
   17124:	6881      	ldr	r1, [r0, #8]
   17126:	6800      	ldr	r0, [r0, #0]
   17128:	f7ff ffe3 	bl	170f2 <buffer_write>
	output->control_block->offset = 0;
   1712c:	2200      	movs	r2, #0
   1712e:	6863      	ldr	r3, [r4, #4]
   17130:	601a      	str	r2, [r3, #0]
}
   17132:	bd10      	pop	{r4, pc}

00017134 <out_func>:
{
   17134:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   17136:	684b      	ldr	r3, [r1, #4]
{
   17138:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   1713a:	681a      	ldr	r2, [r3, #0]
   1713c:	68cb      	ldr	r3, [r1, #12]
{
   1713e:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   17140:	429a      	cmp	r2, r3
   17142:	d102      	bne.n	1714a <out_func+0x16>
		log_output_flush(out_ctx);
   17144:	4608      	mov	r0, r1
   17146:	f7ff ffe8 	bl	1711a <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1714a:	6863      	ldr	r3, [r4, #4]
   1714c:	e8d3 2fef 	ldaex	r2, [r3]
   17150:	1c51      	adds	r1, r2, #1
   17152:	e8c3 1fe0 	stlex	r0, r1, [r3]
   17156:	2800      	cmp	r0, #0
   17158:	d1f8      	bne.n	1714c <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
   1715a:	68a3      	ldr	r3, [r4, #8]
}
   1715c:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
   1715e:	549d      	strb	r5, [r3, r2]
}
   17160:	bd38      	pop	{r3, r4, r5, pc}

00017162 <cr_out_func>:
	if (c == '\n') {
   17162:	280a      	cmp	r0, #10
{
   17164:	b538      	push	{r3, r4, r5, lr}
   17166:	4604      	mov	r4, r0
   17168:	460d      	mov	r5, r1
	if (c == '\n') {
   1716a:	d102      	bne.n	17172 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   1716c:	200d      	movs	r0, #13
   1716e:	f7ff ffe1 	bl	17134 <out_func>
	out_func(c, ctx);
   17172:	4629      	mov	r1, r5
   17174:	4620      	mov	r0, r4
   17176:	f7ff ffdd 	bl	17134 <out_func>
}
   1717a:	2000      	movs	r0, #0
   1717c:	bd38      	pop	{r3, r4, r5, pc}

0001717e <log_backend_uart_init>:
}
   1717e:	4770      	bx	lr

00017180 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   17180:	b538      	push	{r3, r4, r5, lr}
   17182:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   17184:	42ab      	cmp	r3, r5
{
   17186:	4611      	mov	r1, r2
   17188:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1718a:	d804      	bhi.n	17196 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1718c:	461a      	mov	r2, r3
   1718e:	f000 fce0 	bl	17b52 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   17192:	4620      	mov	r0, r4
   17194:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   17196:	2400      	movs	r4, #0
   17198:	e7fb      	b.n	17192 <_copy+0x12>

0001719a <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1719a:	f000 bce5 	b.w	17b68 <memset>

0001719e <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1719e:	09c3      	lsrs	r3, r0, #7
   171a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   171a4:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   171a8:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   171ac:	b2c0      	uxtb	r0, r0
   171ae:	4770      	bx	lr

000171b0 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   171b0:	78cb      	ldrb	r3, [r1, #3]
   171b2:	7802      	ldrb	r2, [r0, #0]
   171b4:	4053      	eors	r3, r2
   171b6:	7003      	strb	r3, [r0, #0]
   171b8:	884b      	ldrh	r3, [r1, #2]
   171ba:	7842      	ldrb	r2, [r0, #1]
   171bc:	4053      	eors	r3, r2
   171be:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   171c0:	680a      	ldr	r2, [r1, #0]
   171c2:	7883      	ldrb	r3, [r0, #2]
   171c4:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   171c8:	7083      	strb	r3, [r0, #2]
   171ca:	680a      	ldr	r2, [r1, #0]
   171cc:	78c3      	ldrb	r3, [r0, #3]
   171ce:	4053      	eors	r3, r2
   171d0:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   171d2:	79cb      	ldrb	r3, [r1, #7]
   171d4:	7902      	ldrb	r2, [r0, #4]
   171d6:	4053      	eors	r3, r2
   171d8:	7103      	strb	r3, [r0, #4]
   171da:	88cb      	ldrh	r3, [r1, #6]
   171dc:	7942      	ldrb	r2, [r0, #5]
   171de:	4053      	eors	r3, r2
   171e0:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   171e2:	684a      	ldr	r2, [r1, #4]
   171e4:	7983      	ldrb	r3, [r0, #6]
   171e6:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   171ea:	7183      	strb	r3, [r0, #6]
   171ec:	684a      	ldr	r2, [r1, #4]
   171ee:	79c3      	ldrb	r3, [r0, #7]
   171f0:	4053      	eors	r3, r2
   171f2:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   171f4:	7acb      	ldrb	r3, [r1, #11]
   171f6:	7a02      	ldrb	r2, [r0, #8]
   171f8:	4053      	eors	r3, r2
   171fa:	7203      	strb	r3, [r0, #8]
   171fc:	7a42      	ldrb	r2, [r0, #9]
   171fe:	894b      	ldrh	r3, [r1, #10]
   17200:	4053      	eors	r3, r2
   17202:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   17204:	688a      	ldr	r2, [r1, #8]
   17206:	7a83      	ldrb	r3, [r0, #10]
   17208:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1720c:	7283      	strb	r3, [r0, #10]
   1720e:	688a      	ldr	r2, [r1, #8]
   17210:	7ac3      	ldrb	r3, [r0, #11]
   17212:	4053      	eors	r3, r2
   17214:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   17216:	7bcb      	ldrb	r3, [r1, #15]
   17218:	7b02      	ldrb	r2, [r0, #12]
   1721a:	4053      	eors	r3, r2
   1721c:	7303      	strb	r3, [r0, #12]
   1721e:	89cb      	ldrh	r3, [r1, #14]
   17220:	7b42      	ldrb	r2, [r0, #13]
   17222:	4053      	eors	r3, r2
   17224:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   17226:	68ca      	ldr	r2, [r1, #12]
   17228:	7b83      	ldrb	r3, [r0, #14]
   1722a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1722e:	7383      	strb	r3, [r0, #14]
   17230:	68ca      	ldr	r2, [r1, #12]
   17232:	7bc3      	ldrb	r3, [r0, #15]
   17234:	4053      	eors	r3, r2
   17236:	73c3      	strb	r3, [r0, #15]
}
   17238:	4770      	bx	lr

0001723a <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   1723a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1723c:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1723e:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   17240:	f88d 2000 	strb.w	r2, [sp]
   17244:	7942      	ldrb	r2, [r0, #5]
   17246:	f88d 2001 	strb.w	r2, [sp, #1]
   1724a:	7a82      	ldrb	r2, [r0, #10]
   1724c:	f88d 2002 	strb.w	r2, [sp, #2]
   17250:	7bc2      	ldrb	r2, [r0, #15]
   17252:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   17256:	7902      	ldrb	r2, [r0, #4]
   17258:	f88d 2004 	strb.w	r2, [sp, #4]
   1725c:	7a42      	ldrb	r2, [r0, #9]
   1725e:	f88d 2005 	strb.w	r2, [sp, #5]
   17262:	7b82      	ldrb	r2, [r0, #14]
   17264:	f88d 2006 	strb.w	r2, [sp, #6]
   17268:	78c2      	ldrb	r2, [r0, #3]
   1726a:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1726e:	7a02      	ldrb	r2, [r0, #8]
   17270:	f88d 2008 	strb.w	r2, [sp, #8]
   17274:	7b42      	ldrb	r2, [r0, #13]
   17276:	f88d 2009 	strb.w	r2, [sp, #9]
   1727a:	7882      	ldrb	r2, [r0, #2]
   1727c:	f88d 200a 	strb.w	r2, [sp, #10]
   17280:	79c2      	ldrb	r2, [r0, #7]
   17282:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   17286:	7b02      	ldrb	r2, [r0, #12]
   17288:	f88d 200c 	strb.w	r2, [sp, #12]
   1728c:	7842      	ldrb	r2, [r0, #1]
   1728e:	f88d 200d 	strb.w	r2, [sp, #13]
   17292:	7982      	ldrb	r2, [r0, #6]
   17294:	f88d 200e 	strb.w	r2, [sp, #14]
   17298:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1729c:	2310      	movs	r3, #16
   1729e:	466a      	mov	r2, sp
   172a0:	4619      	mov	r1, r3
   172a2:	f7ff ff6d 	bl	17180 <_copy>
}
   172a6:	b005      	add	sp, #20
   172a8:	f85d fb04 	ldr.w	pc, [sp], #4

000172ac <mult_row_column>:
{
   172ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   172ae:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   172b0:	7808      	ldrb	r0, [r1, #0]
{
   172b2:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   172b4:	f7ff ff73 	bl	1719e <_double_byte>
   172b8:	4605      	mov	r5, r0
   172ba:	7860      	ldrb	r0, [r4, #1]
   172bc:	f7ff ff6f 	bl	1719e <_double_byte>
   172c0:	78a2      	ldrb	r2, [r4, #2]
   172c2:	7863      	ldrb	r3, [r4, #1]
   172c4:	4053      	eors	r3, r2
   172c6:	78e2      	ldrb	r2, [r4, #3]
   172c8:	4053      	eors	r3, r2
   172ca:	405d      	eors	r5, r3
   172cc:	4068      	eors	r0, r5
   172ce:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   172d0:	7860      	ldrb	r0, [r4, #1]
   172d2:	7827      	ldrb	r7, [r4, #0]
   172d4:	f7ff ff63 	bl	1719e <_double_byte>
   172d8:	4605      	mov	r5, r0
   172da:	78a0      	ldrb	r0, [r4, #2]
   172dc:	f7ff ff5f 	bl	1719e <_double_byte>
   172e0:	78a3      	ldrb	r3, [r4, #2]
   172e2:	405f      	eors	r7, r3
   172e4:	78e3      	ldrb	r3, [r4, #3]
   172e6:	405f      	eors	r7, r3
   172e8:	407d      	eors	r5, r7
   172ea:	4068      	eors	r0, r5
   172ec:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   172ee:	7863      	ldrb	r3, [r4, #1]
   172f0:	7827      	ldrb	r7, [r4, #0]
   172f2:	78a0      	ldrb	r0, [r4, #2]
   172f4:	405f      	eors	r7, r3
   172f6:	f7ff ff52 	bl	1719e <_double_byte>
   172fa:	4605      	mov	r5, r0
   172fc:	78e0      	ldrb	r0, [r4, #3]
   172fe:	f7ff ff4e 	bl	1719e <_double_byte>
   17302:	78e3      	ldrb	r3, [r4, #3]
   17304:	405f      	eors	r7, r3
   17306:	407d      	eors	r5, r7
   17308:	4068      	eors	r0, r5
   1730a:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1730c:	7820      	ldrb	r0, [r4, #0]
   1730e:	f7ff ff46 	bl	1719e <_double_byte>
   17312:	7862      	ldrb	r2, [r4, #1]
   17314:	7823      	ldrb	r3, [r4, #0]
   17316:	4053      	eors	r3, r2
   17318:	78a2      	ldrb	r2, [r4, #2]
   1731a:	4053      	eors	r3, r2
   1731c:	ea80 0503 	eor.w	r5, r0, r3
   17320:	78e0      	ldrb	r0, [r4, #3]
   17322:	f7ff ff3c 	bl	1719e <_double_byte>
   17326:	b2ed      	uxtb	r5, r5
   17328:	4045      	eors	r5, r0
   1732a:	70f5      	strb	r5, [r6, #3]
}
   1732c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001732e <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1732e:	b570      	push	{r4, r5, r6, lr}
   17330:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   17332:	4605      	mov	r5, r0
{
   17334:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   17336:	2800      	cmp	r0, #0
   17338:	d049      	beq.n	173ce <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1733a:	2900      	cmp	r1, #0
   1733c:	d049      	beq.n	173d2 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1733e:	2a00      	cmp	r2, #0
   17340:	d049      	beq.n	173d6 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   17342:	2310      	movs	r3, #16
   17344:	460a      	mov	r2, r1
   17346:	4668      	mov	r0, sp
   17348:	4619      	mov	r1, r3
   1734a:	f7ff ff19 	bl	17180 <_copy>
	add_round_key(state, s->words);
   1734e:	4621      	mov	r1, r4
   17350:	4668      	mov	r0, sp
   17352:	f7ff ff2d 	bl	171b0 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   17356:	3410      	adds	r4, #16
   17358:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   1735c:	4668      	mov	r0, sp
   1735e:	f7f3 fdfd 	bl	af5c <sub_bytes>
		shift_rows(state);
   17362:	4668      	mov	r0, sp
   17364:	f7ff ff69 	bl	1723a <shift_rows>
	mult_row_column(t, s);
   17368:	4669      	mov	r1, sp
   1736a:	a804      	add	r0, sp, #16
   1736c:	f7ff ff9e 	bl	172ac <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   17370:	a901      	add	r1, sp, #4
   17372:	a805      	add	r0, sp, #20
   17374:	f7ff ff9a 	bl	172ac <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   17378:	a902      	add	r1, sp, #8
   1737a:	a806      	add	r0, sp, #24
   1737c:	f7ff ff96 	bl	172ac <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   17380:	a903      	add	r1, sp, #12
   17382:	a807      	add	r0, sp, #28
   17384:	f7ff ff92 	bl	172ac <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   17388:	2310      	movs	r3, #16
   1738a:	4668      	mov	r0, sp
   1738c:	4619      	mov	r1, r3
   1738e:	eb0d 0203 	add.w	r2, sp, r3
   17392:	f7ff fef5 	bl	17180 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   17396:	4621      	mov	r1, r4
   17398:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   1739a:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   1739c:	f7ff ff08 	bl	171b0 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   173a0:	42b4      	cmp	r4, r6
   173a2:	d1db      	bne.n	1735c <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   173a4:	f7f3 fdda 	bl	af5c <sub_bytes>
	shift_rows(state);
   173a8:	4668      	mov	r0, sp
   173aa:	f7ff ff46 	bl	1723a <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   173ae:	4621      	mov	r1, r4
   173b0:	4668      	mov	r0, sp
   173b2:	f7ff fefd 	bl	171b0 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   173b6:	2310      	movs	r3, #16
   173b8:	466a      	mov	r2, sp
   173ba:	4619      	mov	r1, r3
   173bc:	4628      	mov	r0, r5
   173be:	f7ff fedf 	bl	17180 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   173c2:	4668      	mov	r0, sp
   173c4:	2210      	movs	r2, #16
   173c6:	2100      	movs	r1, #0
   173c8:	f7ff fee7 	bl	1719a <_set>

	return TC_CRYPTO_SUCCESS;
   173cc:	2001      	movs	r0, #1
}
   173ce:	b008      	add	sp, #32
   173d0:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   173d2:	4608      	mov	r0, r1
   173d4:	e7fb      	b.n	173ce <tc_aes_encrypt+0xa0>
   173d6:	4610      	mov	r0, r2
   173d8:	e7f9      	b.n	173ce <tc_aes_encrypt+0xa0>

000173da <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   173da:	460a      	mov	r2, r1
{
   173dc:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   173de:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   173e2:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   173e4:	2b00      	cmp	r3, #0
   173e6:	bfac      	ite	ge
   173e8:	2300      	movge	r3, #0
   173ea:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   173ec:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   173f0:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   173f4:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   173f6:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   173fa:	d002      	beq.n	17402 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   173fc:	7813      	ldrb	r3, [r2, #0]
   173fe:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   17400:	e7f4      	b.n	173ec <gf_double+0x12>
	}
}
   17402:	bd10      	pop	{r4, pc}

00017404 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   17404:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   17406:	b120      	cbz	r0, 17412 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   17408:	2258      	movs	r2, #88	; 0x58
   1740a:	2100      	movs	r1, #0
   1740c:	f7ff fec5 	bl	1719a <_set>
   17410:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   17412:	bd08      	pop	{r3, pc}

00017414 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   17414:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   17416:	4604      	mov	r4, r0
   17418:	b188      	cbz	r0, 1743e <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1741a:	2210      	movs	r2, #16
   1741c:	2100      	movs	r1, #0
   1741e:	f7ff febc 	bl	1719a <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   17422:	2210      	movs	r2, #16
   17424:	f104 0030 	add.w	r0, r4, #48	; 0x30
   17428:	2100      	movs	r1, #0
   1742a:	f7ff feb6 	bl	1719a <_set>
	s->leftover_offset = 0;
   1742e:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   17430:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   17432:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   17434:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   17438:	2001      	movs	r0, #1
   1743a:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   1743e:	bd10      	pop	{r4, pc}

00017440 <tc_cmac_setup>:
{
   17440:	b570      	push	{r4, r5, r6, lr}
   17442:	4604      	mov	r4, r0
   17444:	460d      	mov	r5, r1
   17446:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   17448:	b310      	cbz	r0, 17490 <tc_cmac_setup+0x50>
   1744a:	b311      	cbz	r1, 17492 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1744c:	2258      	movs	r2, #88	; 0x58
   1744e:	2100      	movs	r1, #0
   17450:	f7ff fea3 	bl	1719a <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   17454:	4629      	mov	r1, r5
   17456:	4630      	mov	r0, r6
	s->sched = sched;
   17458:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1745a:	f7f3 fd8b 	bl	af74 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1745e:	2210      	movs	r2, #16
   17460:	2100      	movs	r1, #0
   17462:	4620      	mov	r0, r4
   17464:	f7ff fe99 	bl	1719a <_set>
	gf_double (s->K1, s->iv);
   17468:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1746c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1746e:	4621      	mov	r1, r4
   17470:	4620      	mov	r0, r4
   17472:	f7ff ff5c 	bl	1732e <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   17476:	4621      	mov	r1, r4
   17478:	4628      	mov	r0, r5
   1747a:	f7ff ffae 	bl	173da <gf_double>
	gf_double (s->K2, s->K1);
   1747e:	4629      	mov	r1, r5
   17480:	f104 0020 	add.w	r0, r4, #32
   17484:	f7ff ffa9 	bl	173da <gf_double>
	tc_cmac_init(s);
   17488:	4620      	mov	r0, r4
   1748a:	f7ff ffc3 	bl	17414 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1748e:	2001      	movs	r0, #1
}
   17490:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   17492:	4608      	mov	r0, r1
   17494:	e7fc      	b.n	17490 <tc_cmac_setup+0x50>

00017496 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   17496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1749a:	460e      	mov	r6, r1
   1749c:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1749e:	4604      	mov	r4, r0
   174a0:	2800      	cmp	r0, #0
   174a2:	d060      	beq.n	17566 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   174a4:	b1fa      	cbz	r2, 174e6 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   174a6:	2900      	cmp	r1, #0
   174a8:	d05d      	beq.n	17566 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   174aa:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   174ae:	ea53 0102 	orrs.w	r1, r3, r2
   174b2:	d058      	beq.n	17566 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   174b4:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   174b6:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   174ba:	f142 32ff 	adc.w	r2, r2, #4294967295
   174be:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   174c2:	f1b8 0f00 	cmp.w	r8, #0
   174c6:	d02c      	beq.n	17522 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   174c8:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   174cc:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   174d0:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   174d2:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   174d4:	d20a      	bcs.n	174ec <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   174d6:	462b      	mov	r3, r5
   174d8:	4632      	mov	r2, r6
   174da:	4629      	mov	r1, r5
   174dc:	f7ff fe50 	bl	17180 <_copy>
			s->leftover_offset += data_length;
   174e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   174e2:	442b      	add	r3, r5
   174e4:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   174e6:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   174e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   174ec:	463b      	mov	r3, r7
   174ee:	4632      	mov	r2, r6
   174f0:	4639      	mov	r1, r7
   174f2:	f7ff fe45 	bl	17180 <_copy>
		s->leftover_offset = 0;
   174f6:	2300      	movs	r3, #0
   174f8:	3d10      	subs	r5, #16
   174fa:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   174fc:	4445      	add	r5, r8
		data += remaining_space;
   174fe:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   17500:	1e63      	subs	r3, r4, #1
   17502:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   17506:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1750a:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1750e:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   17510:	ea82 0200 	eor.w	r2, r2, r0
   17514:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   17516:	d1f6      	bne.n	17506 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   17518:	4621      	mov	r1, r4
   1751a:	4620      	mov	r0, r4
   1751c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1751e:	f7ff ff06 	bl	1732e <tc_aes_encrypt>
   17522:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   17526:	2d10      	cmp	r5, #16
   17528:	d80a      	bhi.n	17540 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   1752a:	2d00      	cmp	r5, #0
   1752c:	d0db      	beq.n	174e6 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   1752e:	462b      	mov	r3, r5
   17530:	4632      	mov	r2, r6
   17532:	4629      	mov	r1, r5
   17534:	f104 0030 	add.w	r0, r4, #48	; 0x30
   17538:	f7ff fe22 	bl	17180 <_copy>
		s->leftover_offset = data_length;
   1753c:	6465      	str	r5, [r4, #68]	; 0x44
   1753e:	e7d2      	b.n	174e6 <tc_cmac_update+0x50>
   17540:	1e63      	subs	r3, r4, #1
   17542:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   17544:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   17548:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1754c:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1754e:	ea82 0200 	eor.w	r2, r2, r0
   17552:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   17554:	d1f6      	bne.n	17544 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   17556:	4621      	mov	r1, r4
   17558:	4620      	mov	r0, r4
   1755a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1755c:	f7ff fee7 	bl	1732e <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   17560:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   17562:	3d10      	subs	r5, #16
   17564:	e7df      	b.n	17526 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   17566:	2000      	movs	r0, #0
   17568:	e7be      	b.n	174e8 <tc_cmac_update+0x52>

0001756a <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1756a:	b570      	push	{r4, r5, r6, lr}
   1756c:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1756e:	4605      	mov	r5, r0
   17570:	b1f0      	cbz	r0, 175b0 <tc_cmac_final+0x46>
   17572:	b371      	cbz	r1, 175d2 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   17574:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   17576:	2a10      	cmp	r2, #16
   17578:	d11b      	bne.n	175b2 <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1757a:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1757c:	1e63      	subs	r3, r4, #1
   1757e:	3901      	subs	r1, #1
   17580:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   17584:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   17588:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1758c:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1758e:	ea82 0206 	eor.w	r2, r2, r6
   17592:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   17596:	ea82 0206 	eor.w	r2, r2, r6
   1759a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1759c:	d1f2      	bne.n	17584 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1759e:	4621      	mov	r1, r4
   175a0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   175a2:	4628      	mov	r0, r5
   175a4:	f7ff fec3 	bl	1732e <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   175a8:	4620      	mov	r0, r4
   175aa:	f7ff ff2b 	bl	17404 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   175ae:	2001      	movs	r0, #1
}
   175b0:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   175b2:	f102 0030 	add.w	r0, r2, #48	; 0x30
   175b6:	2100      	movs	r1, #0
   175b8:	f1c2 0210 	rsb	r2, r2, #16
   175bc:	4420      	add	r0, r4
   175be:	f7ff fdec 	bl	1719a <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   175c2:	2280      	movs	r2, #128	; 0x80
   175c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   175c6:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   175ca:	4423      	add	r3, r4
   175cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   175d0:	e7d4      	b.n	1757c <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   175d2:	4608      	mov	r0, r1
   175d4:	e7ec      	b.n	175b0 <tc_cmac_final+0x46>

000175d6 <tc_sha256_update>:
{
   175d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   175d8:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   175da:	b110      	cbz	r0, 175e2 <tc_sha256_update+0xc>
   175dc:	b1f9      	cbz	r1, 1761e <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   175de:	b90a      	cbnz	r2, 175e4 <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   175e0:	2001      	movs	r0, #1
}
   175e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   175e4:	2700      	movs	r7, #0
   175e6:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   175e8:	f100 0628 	add.w	r6, r0, #40	; 0x28
		s->leftover[s->leftover_offset++] = *(data++);
   175ec:	6e83      	ldr	r3, [r0, #104]	; 0x68
   175ee:	1c5a      	adds	r2, r3, #1
   175f0:	6682      	str	r2, [r0, #104]	; 0x68
   175f2:	f814 1b01 	ldrb.w	r1, [r4], #1
   175f6:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   175f8:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   175fa:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   175fe:	d90b      	bls.n	17618 <tc_sha256_update+0x42>
			compress(s->iv, s->leftover);
   17600:	4631      	mov	r1, r6
   17602:	f7f3 fd0b 	bl	b01c <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   17606:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   1760a:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   1760e:	f142 0200 	adc.w	r2, r2, #0
   17612:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   17616:	6687      	str	r7, [r0, #104]	; 0x68
	while (datalen-- > 0) {
   17618:	42a5      	cmp	r5, r4
   1761a:	d1e7      	bne.n	175ec <tc_sha256_update+0x16>
   1761c:	e7e0      	b.n	175e0 <tc_sha256_update+0xa>
		return TC_CRYPTO_FAIL;
   1761e:	4608      	mov	r0, r1
   17620:	e7df      	b.n	175e2 <tc_sha256_update+0xc>

00017622 <tc_sha256_final>:
{
   17622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17624:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   17626:	4605      	mov	r5, r0
   17628:	2800      	cmp	r0, #0
   1762a:	d054      	beq.n	176d6 <tc_sha256_final+0xb4>
   1762c:	2900      	cmp	r1, #0
   1762e:	d053      	beq.n	176d8 <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   17630:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   17632:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   17636:	00d8      	lsls	r0, r3, #3
   17638:	1812      	adds	r2, r2, r0
   1763a:	f141 0100 	adc.w	r1, r1, #0
   1763e:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   17642:	2280      	movs	r2, #128	; 0x80
   17644:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   17646:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   17648:	4423      	add	r3, r4
   1764a:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   1764c:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   17650:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   17654:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   17658:	d90a      	bls.n	17670 <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   1765a:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   1765e:	4639      	mov	r1, r7
   17660:	4430      	add	r0, r6
   17662:	f7ff fd9a 	bl	1719a <_set>
		compress(s->iv, s->leftover);
   17666:	4631      	mov	r1, r6
   17668:	4620      	mov	r0, r4
   1766a:	f7f3 fcd7 	bl	b01c <compress>
		s->leftover_offset = 0;
   1766e:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   17670:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   17672:	2100      	movs	r1, #0
   17674:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   17678:	4430      	add	r0, r6
   1767a:	f7ff fd8e 	bl	1719a <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1767e:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   17680:	4631      	mov	r1, r6
   17682:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   17684:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   17686:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   17688:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   1768a:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1768e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   17692:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   17694:	0e1b      	lsrs	r3, r3, #24
   17696:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
   1769a:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1769c:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   176a0:	f7f3 fcbc 	bl	b01c <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   176a4:	1d2b      	adds	r3, r5, #4
   176a6:	1f21      	subs	r1, r4, #4
   176a8:	3524      	adds	r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   176aa:	f851 2f04 	ldr.w	r2, [r1, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   176ae:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   176b0:	0e10      	lsrs	r0, r2, #24
   176b2:	f803 0c08 	strb.w	r0, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   176b6:	0c10      	lsrs	r0, r2, #16
   176b8:	f803 0c07 	strb.w	r0, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   176bc:	0a10      	lsrs	r0, r2, #8
   176be:	f803 0c06 	strb.w	r0, [r3, #-6]
		*digest++ = (uint8_t)(t);
   176c2:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   176c6:	42ab      	cmp	r3, r5
   176c8:	d1ef      	bne.n	176aa <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   176ca:	4620      	mov	r0, r4
   176cc:	2270      	movs	r2, #112	; 0x70
   176ce:	2100      	movs	r1, #0
   176d0:	f7ff fd63 	bl	1719a <_set>
	return TC_CRYPTO_SUCCESS;
   176d4:	2001      	movs	r0, #1
}
   176d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   176d8:	4608      	mov	r0, r1
   176da:	e7fc      	b.n	176d6 <tc_sha256_final+0xb4>

000176dc <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   176dc:	b530      	push	{r4, r5, lr}
   176de:	1e43      	subs	r3, r0, #1
   176e0:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   176e2:	42a9      	cmp	r1, r5
   176e4:	d106      	bne.n	176f4 <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   176e6:	2136      	movs	r1, #54	; 0x36
   176e8:	245c      	movs	r4, #92	; 0x5c
   176ea:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   176ec:	1a13      	subs	r3, r2, r0
   176ee:	2b3f      	cmp	r3, #63	; 0x3f
   176f0:	d90c      	bls.n	1770c <rekey+0x30>
	}
}
   176f2:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   176f4:	780c      	ldrb	r4, [r1, #0]
   176f6:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   176fa:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   176fe:	f811 4b01 	ldrb.w	r4, [r1], #1
   17702:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   17706:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   1770a:	e7ea      	b.n	176e2 <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1770c:	f802 1b01 	strb.w	r1, [r2], #1
   17710:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   17714:	e7ea      	b.n	176ec <rekey+0x10>

00017716 <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   17716:	b5f0      	push	{r4, r5, r6, r7, lr}
   17718:	460e      	mov	r6, r1
   1771a:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   1771c:	4605      	mov	r5, r0
{
   1771e:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   17720:	b1b8      	cbz	r0, 17752 <tc_hmac_set_key+0x3c>
   17722:	b341      	cbz	r1, 17776 <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   17724:	b34a      	cbz	r2, 1777a <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   17726:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   17728:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1772c:	d813      	bhi.n	17756 <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   1772e:	a810      	add	r0, sp, #64	; 0x40
   17730:	f7f3 fd5e 	bl	b1f0 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   17734:	4622      	mov	r2, r4
   17736:	4669      	mov	r1, sp
   17738:	a810      	add	r0, sp, #64	; 0x40
   1773a:	f7ff ff4c 	bl	175d6 <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   1773e:	a910      	add	r1, sp, #64	; 0x40
   17740:	a834      	add	r0, sp, #208	; 0xd0
   17742:	f7ff ff6e 	bl	17622 <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   17746:	4622      	mov	r2, r4
   17748:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   1774a:	4638      	mov	r0, r7
   1774c:	f7ff ffc6 	bl	176dc <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   17750:	2001      	movs	r0, #1
}
   17752:	b04d      	add	sp, #308	; 0x134
   17754:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   17756:	f7f3 fd4b 	bl	b1f0 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1775a:	4622      	mov	r2, r4
   1775c:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1775e:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   17762:	4628      	mov	r0, r5
   17764:	f7ff ff37 	bl	175d6 <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   17768:	4629      	mov	r1, r5
   1776a:	4620      	mov	r0, r4
   1776c:	f7ff ff59 	bl	17622 <tc_sha256_final>
		rekey(ctx->key,
   17770:	2220      	movs	r2, #32
   17772:	4621      	mov	r1, r4
   17774:	e7e9      	b.n	1774a <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   17776:	4608      	mov	r0, r1
   17778:	e7eb      	b.n	17752 <tc_hmac_set_key+0x3c>
   1777a:	4610      	mov	r0, r2
   1777c:	e7e9      	b.n	17752 <tc_hmac_set_key+0x3c>

0001777e <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   1777e:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   17780:	4604      	mov	r4, r0
   17782:	b140      	cbz	r0, 17796 <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   17784:	f7f3 fd34 	bl	b1f0 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   17788:	2240      	movs	r2, #64	; 0x40
   1778a:	4620      	mov	r0, r4
   1778c:	f104 0170 	add.w	r1, r4, #112	; 0x70
   17790:	f7ff ff21 	bl	175d6 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   17794:	2001      	movs	r0, #1
}
   17796:	bd10      	pop	{r4, pc}

00017798 <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   17798:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1779a:	b110      	cbz	r0, 177a2 <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   1779c:	f7ff ff1b 	bl	175d6 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   177a0:	2001      	movs	r0, #1
}
   177a2:	bd08      	pop	{r3, pc}

000177a4 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   177a4:	b570      	push	{r4, r5, r6, lr}
   177a6:	460e      	mov	r6, r1
   177a8:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   177aa:	4605      	mov	r5, r0
   177ac:	b1f0      	cbz	r0, 177ec <tc_hmac_final+0x48>
   177ae:	2920      	cmp	r1, #32
   177b0:	d11c      	bne.n	177ec <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   177b2:	b1ea      	cbz	r2, 177f0 <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   177b4:	4611      	mov	r1, r2
   177b6:	f7ff ff34 	bl	17622 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   177ba:	4620      	mov	r0, r4
   177bc:	f7f3 fd18 	bl	b1f0 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   177c0:	2240      	movs	r2, #64	; 0x40
   177c2:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   177c6:	4620      	mov	r0, r4
   177c8:	f7ff ff05 	bl	175d6 <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   177cc:	4632      	mov	r2, r6
   177ce:	4629      	mov	r1, r5
   177d0:	4620      	mov	r0, r4
   177d2:	f7ff ff00 	bl	175d6 <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   177d6:	4621      	mov	r1, r4
   177d8:	4628      	mov	r0, r5
   177da:	f7ff ff22 	bl	17622 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   177de:	4620      	mov	r0, r4
   177e0:	22f0      	movs	r2, #240	; 0xf0
   177e2:	2100      	movs	r1, #0
   177e4:	f7ff fcd9 	bl	1719a <_set>

	return TC_CRYPTO_SUCCESS;
   177e8:	2001      	movs	r0, #1
}
   177ea:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   177ec:	2000      	movs	r0, #0
   177ee:	e7fc      	b.n	177ea <tc_hmac_final+0x46>
   177f0:	4610      	mov	r0, r2
   177f2:	e7fa      	b.n	177ea <tc_hmac_final+0x46>

000177f4 <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   177f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   177f8:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   177fa:	f04f 0b01 	mov.w	fp, #1
{
   177fe:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   17800:	2300      	movs	r3, #0
{
   17802:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   17804:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   17808:	4631      	mov	r1, r6
{
   1780a:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1780c:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   1780e:	f88d 3006 	strb.w	r3, [sp, #6]
{
   17812:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   17816:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1781a:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1781e:	f7ff ff7a 	bl	17716 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   17822:	4620      	mov	r0, r4
   17824:	f7ff ffab 	bl	1777e <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   17828:	2220      	movs	r2, #32
   1782a:	4629      	mov	r1, r5
   1782c:	4620      	mov	r0, r4
   1782e:	f7ff ffb3 	bl	17798 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   17832:	465a      	mov	r2, fp
   17834:	4620      	mov	r0, r4
   17836:	f10d 0106 	add.w	r1, sp, #6
   1783a:	f7ff ffad 	bl	17798 <tc_hmac_update>

	if (data && datalen)
   1783e:	f1b8 0f00 	cmp.w	r8, #0
   17842:	d007      	beq.n	17854 <update+0x60>
   17844:	f1b9 0f00 	cmp.w	r9, #0
   17848:	d004      	beq.n	17854 <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   1784a:	464a      	mov	r2, r9
   1784c:	4641      	mov	r1, r8
   1784e:	4620      	mov	r0, r4
   17850:	f7ff ffa2 	bl	17798 <tc_hmac_update>
	if (additional_data && additional_datalen)
   17854:	b13f      	cbz	r7, 17866 <update+0x72>
   17856:	f1ba 0f00 	cmp.w	sl, #0
   1785a:	d004      	beq.n	17866 <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1785c:	4652      	mov	r2, sl
   1785e:	4639      	mov	r1, r7
   17860:	4620      	mov	r0, r4
   17862:	f7ff ff99 	bl	17798 <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   17866:	4622      	mov	r2, r4
   17868:	2120      	movs	r1, #32
   1786a:	4630      	mov	r0, r6
   1786c:	f7ff ff9a 	bl	177a4 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   17870:	2220      	movs	r2, #32
   17872:	4631      	mov	r1, r6
   17874:	4620      	mov	r0, r4
   17876:	f7ff ff4e 	bl	17716 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1787a:	4620      	mov	r0, r4
   1787c:	f7ff ff7f 	bl	1777e <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   17880:	2220      	movs	r2, #32
   17882:	4629      	mov	r1, r5
   17884:	4620      	mov	r0, r4
   17886:	f7ff ff87 	bl	17798 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1788a:	4622      	mov	r2, r4
   1788c:	2120      	movs	r1, #32
   1788e:	4628      	mov	r0, r5
   17890:	f7ff ff88 	bl	177a4 <tc_hmac_final>

	if (data == 0 || datalen == 0)
   17894:	f1b8 0f00 	cmp.w	r8, #0
   17898:	d03a      	beq.n	17910 <update+0x11c>
   1789a:	f1b9 0f00 	cmp.w	r9, #0
   1789e:	d037      	beq.n	17910 <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   178a0:	2220      	movs	r2, #32
   178a2:	4631      	mov	r1, r6
   178a4:	4620      	mov	r0, r4
   178a6:	f7ff ff36 	bl	17716 <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   178aa:	4620      	mov	r0, r4
   178ac:	f7ff ff67 	bl	1777e <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   178b0:	2220      	movs	r2, #32
   178b2:	4629      	mov	r1, r5
   178b4:	4620      	mov	r0, r4
   178b6:	f7ff ff6f 	bl	17798 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   178ba:	2201      	movs	r2, #1
   178bc:	f10d 0107 	add.w	r1, sp, #7
   178c0:	4620      	mov	r0, r4
   178c2:	f7ff ff69 	bl	17798 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   178c6:	464a      	mov	r2, r9
   178c8:	4641      	mov	r1, r8
   178ca:	4620      	mov	r0, r4
   178cc:	f7ff ff64 	bl	17798 <tc_hmac_update>
	if (additional_data && additional_datalen)
   178d0:	b13f      	cbz	r7, 178e2 <update+0xee>
   178d2:	f1ba 0f00 	cmp.w	sl, #0
   178d6:	d004      	beq.n	178e2 <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   178d8:	4652      	mov	r2, sl
   178da:	4639      	mov	r1, r7
   178dc:	4620      	mov	r0, r4
   178de:	f7ff ff5b 	bl	17798 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   178e2:	4622      	mov	r2, r4
   178e4:	2120      	movs	r1, #32
   178e6:	4630      	mov	r0, r6
   178e8:	f7ff ff5c 	bl	177a4 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   178ec:	2220      	movs	r2, #32
   178ee:	4631      	mov	r1, r6
   178f0:	4620      	mov	r0, r4
   178f2:	f7ff ff10 	bl	17716 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   178f6:	4620      	mov	r0, r4
   178f8:	f7ff ff41 	bl	1777e <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   178fc:	2220      	movs	r2, #32
   178fe:	4629      	mov	r1, r5
   17900:	4620      	mov	r0, r4
   17902:	f7ff ff49 	bl	17798 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   17906:	4622      	mov	r2, r4
   17908:	2120      	movs	r1, #32
   1790a:	4628      	mov	r0, r5
   1790c:	f7ff ff4a 	bl	177a4 <tc_hmac_final>
}
   17910:	b003      	add	sp, #12
   17912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017916 <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   17916:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17918:	460c      	mov	r4, r1
   1791a:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1791c:	4605      	mov	r5, r0
   1791e:	b1b0      	cbz	r0, 1794e <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   17920:	b1b9      	cbz	r1, 17952 <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   17922:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   17924:	2220      	movs	r2, #32
   17926:	2100      	movs	r1, #0
   17928:	30f0      	adds	r0, #240	; 0xf0
   1792a:	f7ff fc36 	bl	1719a <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   1792e:	2220      	movs	r2, #32
   17930:	2101      	movs	r1, #1
   17932:	f505 7088 	add.w	r0, r5, #272	; 0x110
   17936:	f7ff fc30 	bl	1719a <_set>
	update(prng, personalization, plen, 0, 0);
   1793a:	4628      	mov	r0, r5
   1793c:	4633      	mov	r3, r6
   1793e:	463a      	mov	r2, r7
   17940:	4621      	mov	r1, r4
   17942:	9600      	str	r6, [sp, #0]
   17944:	f7ff ff56 	bl	177f4 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   17948:	2001      	movs	r0, #1
	prng->countdown = 0;
   1794a:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   1794e:	b003      	add	sp, #12
   17950:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   17952:	4608      	mov	r0, r1
   17954:	e7fb      	b.n	1794e <tc_hmac_prng_init+0x38>

00017956 <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   17956:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17958:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1795a:	4605      	mov	r5, r0
   1795c:	b180      	cbz	r0, 17980 <tc_hmac_prng_reseed+0x2a>
   1795e:	b179      	cbz	r1, 17980 <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   17960:	2a1f      	cmp	r2, #31
   17962:	d90d      	bls.n	17980 <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   17964:	b153      	cbz	r3, 1797c <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   17966:	b16c      	cbz	r4, 17984 <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   17968:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   1796a:	f7ff ff43 	bl	177f4 <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   1796e:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   17972:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   17974:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   17978:	b003      	add	sp, #12
   1797a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   1797c:	9300      	str	r3, [sp, #0]
   1797e:	e7f4      	b.n	1796a <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   17980:	2000      	movs	r0, #0
   17982:	e7f9      	b.n	17978 <tc_hmac_prng_reseed+0x22>
   17984:	4620      	mov	r0, r4
   17986:	e7f7      	b.n	17978 <tc_hmac_prng_reseed+0x22>

00017988 <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   17988:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1798c:	460d      	mov	r5, r1
   1798e:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   17990:	4680      	mov	r8, r0
   17992:	b3d8      	cbz	r0, 17a0c <tc_hmac_prng_generate+0x84>
   17994:	b3d2      	cbz	r2, 17a0c <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   17996:	1e4b      	subs	r3, r1, #1
   17998:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   1799c:	d236      	bcs.n	17a0c <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   1799e:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   179a2:	b3ab      	cbz	r3, 17a10 <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   179a4:	3b01      	subs	r3, #1
   179a6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   179aa:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   179ae:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   179b2:	2220      	movs	r2, #32
   179b4:	4649      	mov	r1, r9
   179b6:	4620      	mov	r0, r4
   179b8:	f7ff fead 	bl	17716 <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   179bc:	4620      	mov	r0, r4
   179be:	f7ff fede 	bl	1777e <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   179c2:	2220      	movs	r2, #32
   179c4:	4639      	mov	r1, r7
   179c6:	4620      	mov	r0, r4
   179c8:	f7ff fee6 	bl	17798 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   179cc:	4622      	mov	r2, r4
   179ce:	2120      	movs	r1, #32
   179d0:	4638      	mov	r0, r7
   179d2:	f7ff fee7 	bl	177a4 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   179d6:	2d20      	cmp	r5, #32
   179d8:	462e      	mov	r6, r5
   179da:	bf28      	it	cs
   179dc:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   179de:	4640      	mov	r0, r8
   179e0:	4633      	mov	r3, r6
   179e2:	463a      	mov	r2, r7
   179e4:	4631      	mov	r1, r6
   179e6:	f7ff fbcb 	bl	17180 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   179ea:	2d20      	cmp	r5, #32
   179ec:	bf38      	it	cc
   179ee:	2520      	movcc	r5, #32
	while (outlen != 0) {
   179f0:	3d20      	subs	r5, #32
		out += bufferlen;
   179f2:	44b0      	add	r8, r6
	while (outlen != 0) {
   179f4:	d1dd      	bne.n	179b2 <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   179f6:	4620      	mov	r0, r4
   179f8:	462b      	mov	r3, r5
   179fa:	462a      	mov	r2, r5
   179fc:	4629      	mov	r1, r5
   179fe:	9500      	str	r5, [sp, #0]
   17a00:	f7ff fef8 	bl	177f4 <update>

	return TC_CRYPTO_SUCCESS;
   17a04:	2001      	movs	r0, #1
}
   17a06:	b003      	add	sp, #12
   17a08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   17a0c:	2000      	movs	r0, #0
   17a0e:	e7fa      	b.n	17a06 <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   17a10:	f04f 30ff 	mov.w	r0, #4294967295
   17a14:	e7f7      	b.n	17a06 <tc_hmac_prng_generate+0x7e>

00017a16 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   17a16:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   17a18:	6800      	ldr	r0, [r0, #0]
   17a1a:	f7f3 bc41 	b.w	b2a0 <z_arm_fatal_error>

00017a1e <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   17a1e:	2100      	movs	r1, #0
   17a20:	2001      	movs	r0, #1
   17a22:	f7f3 bc3d 	b.w	b2a0 <z_arm_fatal_error>

00017a26 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   17a26:	b508      	push	{r3, lr}
	handler();
   17a28:	f7f3 fce6 	bl	b3f8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   17a2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   17a30:	f7f3 bdb0 	b.w	b594 <z_arm_exc_exit>

00017a34 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   17a34:	6e83      	ldr	r3, [r0, #104]	; 0x68
   17a36:	f383 880b 	msr	PSPLIM, r3
}
   17a3a:	4770      	bx	lr

00017a3c <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
   17a3c:	2300      	movs	r3, #0
   17a3e:	f7f2 be71 	b.w	a724 <z_impl_z_log_msg_static_create>

00017a42 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   17a42:	4770      	bx	lr

00017a44 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
   17a44:	4770      	bx	lr

00017a46 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   17a46:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   17a4a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   17a4e:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   17a50:	bf08      	it	eq
   17a52:	f06f 0015 	mvneq.w	r0, #21
   17a56:	4770      	bx	lr

00017a58 <mpu_configure_region>:
{
   17a58:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
   17a5a:	890a      	ldrh	r2, [r1, #8]
   17a5c:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   17a5e:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   17a60:	684c      	ldr	r4, [r1, #4]
   17a62:	f002 021f 	and.w	r2, r2, #31
{
   17a66:	b085      	sub	sp, #20
   17a68:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
   17a6c:	9300      	str	r3, [sp, #0]
   17a6e:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   17a72:	f023 031f 	bic.w	r3, r3, #31
   17a76:	1e62      	subs	r2, r4, #1
   17a78:	4413      	add	r3, r2
   17a7a:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   17a7e:	2807      	cmp	r0, #7
   17a80:	9303      	str	r3, [sp, #12]
   17a82:	d904      	bls.n	17a8e <mpu_configure_region+0x36>
}
   17a84:	b005      	add	sp, #20
   17a86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   17a8a:	f7f4 b96b 	b.w	bd64 <region_allocate_and_init.part.0>
	region_init(index, region_conf);
   17a8e:	4669      	mov	r1, sp
   17a90:	f7f4 f94e 	bl	bd30 <region_init>
}
   17a94:	b005      	add	sp, #20
   17a96:	bd30      	pop	{r4, r5, pc}

00017a98 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   17a98:	4603      	mov	r3, r0
   17a9a:	3901      	subs	r1, #1
   17a9c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   17aa0:	b90a      	cbnz	r2, 17aa6 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   17aa2:	701a      	strb	r2, [r3, #0]

	return dest;
}
   17aa4:	4770      	bx	lr
		*d = *s;
   17aa6:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   17aaa:	e7f7      	b.n	17a9c <strcpy+0x4>

00017aac <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   17aac:	4603      	mov	r3, r0
{
   17aae:	b510      	push	{r4, lr}
   17ab0:	3901      	subs	r1, #1
	while ((n > 0) && *s != '\0') {
   17ab2:	b922      	cbnz	r2, 17abe <strncpy+0x12>
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   17ab4:	2100      	movs	r1, #0
   17ab6:	441a      	add	r2, r3
	while (n > 0) {
   17ab8:	4293      	cmp	r3, r2
   17aba:	d108      	bne.n	17ace <strncpy+0x22>
		d++;
		n--;
	}

	return dest;
}
   17abc:	bd10      	pop	{r4, pc}
	while ((n > 0) && *s != '\0') {
   17abe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   17ac2:	2c00      	cmp	r4, #0
   17ac4:	d0f6      	beq.n	17ab4 <strncpy+0x8>
		*d = *s;
   17ac6:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   17aca:	3a01      	subs	r2, #1
   17acc:	e7f1      	b.n	17ab2 <strncpy+0x6>
		*d = '\0';
   17ace:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   17ad2:	e7f1      	b.n	17ab8 <strncpy+0xc>

00017ad4 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   17ad4:	4603      	mov	r3, r0
	size_t n = 0;
   17ad6:	2000      	movs	r0, #0

	while (*s != '\0') {
   17ad8:	5c1a      	ldrb	r2, [r3, r0]
   17ada:	b902      	cbnz	r2, 17ade <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   17adc:	4770      	bx	lr
		n++;
   17ade:	3001      	adds	r0, #1
   17ae0:	e7fa      	b.n	17ad8 <strlen+0x4>

00017ae2 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   17ae2:	4603      	mov	r3, r0
	size_t n = 0;
   17ae4:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   17ae6:	5c1a      	ldrb	r2, [r3, r0]
   17ae8:	b10a      	cbz	r2, 17aee <strnlen+0xc>
   17aea:	4288      	cmp	r0, r1
   17aec:	d100      	bne.n	17af0 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   17aee:	4770      	bx	lr
		n++;
   17af0:	3001      	adds	r0, #1
   17af2:	e7f8      	b.n	17ae6 <strnlen+0x4>

00017af4 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   17af4:	1e43      	subs	r3, r0, #1
   17af6:	3901      	subs	r1, #1
   17af8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   17afc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   17b00:	4282      	cmp	r2, r0
   17b02:	d101      	bne.n	17b08 <strcmp+0x14>
   17b04:	2a00      	cmp	r2, #0
   17b06:	d1f7      	bne.n	17af8 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   17b08:	1a10      	subs	r0, r2, r0
   17b0a:	4770      	bx	lr

00017b0c <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   17b0c:	b570      	push	{r4, r5, r6, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   17b0e:	460b      	mov	r3, r1
   17b10:	4605      	mov	r5, r0
   17b12:	b162      	cbz	r2, 17b2e <strncmp+0x22>
   17b14:	f810 6b01 	ldrb.w	r6, [r0], #1
   17b18:	781c      	ldrb	r4, [r3, #0]
   17b1a:	3101      	adds	r1, #1
   17b1c:	42b4      	cmp	r4, r6
   17b1e:	d100      	bne.n	17b22 <strncmp+0x16>
   17b20:	b91c      	cbnz	r4, 17b2a <strncmp+0x1e>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   17b22:	782a      	ldrb	r2, [r5, #0]
   17b24:	781b      	ldrb	r3, [r3, #0]
   17b26:	1ad0      	subs	r0, r2, r3
   17b28:	e002      	b.n	17b30 <strncmp+0x24>
		n--;
   17b2a:	3a01      	subs	r2, #1
   17b2c:	e7ef      	b.n	17b0e <strncmp+0x2>
	return (n == 0) ? 0 : (*s1 - *s2);
   17b2e:	4610      	mov	r0, r2
}
   17b30:	bd70      	pop	{r4, r5, r6, pc}

00017b32 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   17b32:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   17b34:	b15a      	cbz	r2, 17b4e <memcmp+0x1c>
   17b36:	3901      	subs	r1, #1
   17b38:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   17b3a:	f810 2b01 	ldrb.w	r2, [r0], #1
   17b3e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   17b42:	42a0      	cmp	r0, r4
   17b44:	d001      	beq.n	17b4a <memcmp+0x18>
   17b46:	429a      	cmp	r2, r3
   17b48:	d0f7      	beq.n	17b3a <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   17b4a:	1ad0      	subs	r0, r2, r3
}
   17b4c:	bd10      	pop	{r4, pc}
		return 0;
   17b4e:	4610      	mov	r0, r2
   17b50:	e7fc      	b.n	17b4c <memcmp+0x1a>

00017b52 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   17b52:	b510      	push	{r4, lr}
   17b54:	1e43      	subs	r3, r0, #1
   17b56:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   17b58:	4291      	cmp	r1, r2
   17b5a:	d100      	bne.n	17b5e <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   17b5c:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   17b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
   17b62:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   17b66:	e7f7      	b.n	17b58 <memcpy+0x6>

00017b68 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   17b68:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
   17b6a:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   17b6c:	4402      	add	r2, r0
   17b6e:	4293      	cmp	r3, r2
   17b70:	d100      	bne.n	17b74 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   17b72:	4770      	bx	lr
		*(d_byte++) = c_byte;
   17b74:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   17b78:	e7f9      	b.n	17b6e <memset+0x6>

00017b7a <_stdout_hook_default>:
}
   17b7a:	f04f 30ff 	mov.w	r0, #4294967295
   17b7e:	4770      	bx	lr

00017b80 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   17b80:	b510      	push	{r4, lr}
   17b82:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   17b84:	7801      	ldrb	r1, [r0, #0]
   17b86:	7822      	ldrb	r2, [r4, #0]
{
   17b88:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   17b8a:	428a      	cmp	r2, r1
   17b8c:	d00f      	beq.n	17bae <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   17b8e:	4669      	mov	r1, sp
   17b90:	f7f4 fb0c 	bl	c1ac <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   17b94:	4620      	mov	r0, r4
   17b96:	a905      	add	r1, sp, #20
   17b98:	f7f4 fb08 	bl	c1ac <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   17b9c:	2210      	movs	r2, #16
   17b9e:	f10d 0115 	add.w	r1, sp, #21
   17ba2:	f10d 0001 	add.w	r0, sp, #1
   17ba6:	f7ff ffc4 	bl	17b32 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   17baa:	b00a      	add	sp, #40	; 0x28
   17bac:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   17bae:	2a01      	cmp	r2, #1
   17bb0:	d006      	beq.n	17bc0 <bt_uuid_cmp+0x40>
   17bb2:	2a02      	cmp	r2, #2
   17bb4:	d007      	beq.n	17bc6 <bt_uuid_cmp+0x46>
   17bb6:	b972      	cbnz	r2, 17bd6 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   17bb8:	8840      	ldrh	r0, [r0, #2]
   17bba:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   17bbc:	1ac0      	subs	r0, r0, r3
   17bbe:	e7f4      	b.n	17baa <bt_uuid_cmp+0x2a>
   17bc0:	6840      	ldr	r0, [r0, #4]
   17bc2:	6863      	ldr	r3, [r4, #4]
   17bc4:	e7fa      	b.n	17bbc <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   17bc6:	2210      	movs	r2, #16
   17bc8:	1c61      	adds	r1, r4, #1
   17bca:	3001      	adds	r0, #1
}
   17bcc:	b00a      	add	sp, #40	; 0x28
   17bce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   17bd2:	f7ff bfae 	b.w	17b32 <memcmp>
	switch (u1->type) {
   17bd6:	f06f 0015 	mvn.w	r0, #21
   17bda:	e7e6      	b.n	17baa <bt_uuid_cmp+0x2a>

00017bdc <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   17bdc:	2a04      	cmp	r2, #4
{
   17bde:	b510      	push	{r4, lr}
	switch (data_len) {
   17be0:	d00a      	beq.n	17bf8 <bt_uuid_create+0x1c>
   17be2:	2a10      	cmp	r2, #16
   17be4:	d00d      	beq.n	17c02 <bt_uuid_create+0x26>
   17be6:	2a02      	cmp	r2, #2
   17be8:	f04f 0300 	mov.w	r3, #0
   17bec:	d10f      	bne.n	17c0e <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   17bee:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   17bf0:	880b      	ldrh	r3, [r1, #0]
   17bf2:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   17bf4:	2001      	movs	r0, #1
}
   17bf6:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   17bf8:	2301      	movs	r3, #1
   17bfa:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   17bfc:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   17bfe:	6043      	str	r3, [r0, #4]
		break;
   17c00:	e7f8      	b.n	17bf4 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   17c02:	2302      	movs	r3, #2
   17c04:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   17c08:	f7ff ffa3 	bl	17b52 <memcpy>
		break;
   17c0c:	e7f2      	b.n	17bf4 <bt_uuid_create+0x18>
	switch (data_len) {
   17c0e:	4618      	mov	r0, r3
   17c10:	e7f1      	b.n	17bf6 <bt_uuid_create+0x1a>

00017c12 <bt_addr_le_create_static>:

#define ADDR_RESOLVED_BITMASK (0x02)

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   17c12:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   17c14:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   17c16:	2106      	movs	r1, #6
{
   17c18:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   17c1a:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   17c1e:	f7f6 fed5 	bl	e9cc <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   17c22:	b918      	cbnz	r0, 17c2c <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   17c24:	79a3      	ldrb	r3, [r4, #6]
   17c26:	f063 033f 	orn	r3, r3, #63	; 0x3f
   17c2a:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   17c2c:	bd10      	pop	{r4, pc}

00017c2e <bt_addr_le_copy_resolved>:

	return 0;
}

void bt_addr_le_copy_resolved(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
   17c2e:	b510      	push	{r4, lr}
   17c30:	4604      	mov	r4, r0
   17c32:	2207      	movs	r2, #7
   17c34:	f7ff ff8d 	bl	17b52 <memcpy>
	bt_addr_le_copy(dst, src);
	/* translate to "regular" address type */
	dst->type &= ~ADDR_RESOLVED_BITMASK;
   17c38:	7823      	ldrb	r3, [r4, #0]
   17c3a:	f023 0302 	bic.w	r3, r3, #2
   17c3e:	7023      	strb	r3, [r4, #0]
}
   17c40:	bd10      	pop	{r4, pc}

00017c42 <bt_addr_le_is_resolved>:

bool bt_addr_le_is_resolved(const bt_addr_le_t *addr)
{
	return (addr->type & ADDR_RESOLVED_BITMASK) != 0;
   17c42:	7800      	ldrb	r0, [r0, #0]
}
   17c44:	f3c0 0040 	ubfx	r0, r0, #1, #1
   17c48:	4770      	bx	lr

00017c4a <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   17c4a:	280f      	cmp	r0, #15
   17c4c:	d807      	bhi.n	17c5e <bt_hci_evt_get_flags+0x14>
   17c4e:	280d      	cmp	r0, #13
   17c50:	d80b      	bhi.n	17c6a <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   17c52:	2805      	cmp	r0, #5
   17c54:	bf08      	it	eq
   17c56:	2003      	moveq	r0, #3
   17c58:	bf18      	it	ne
   17c5a:	2002      	movne	r0, #2
   17c5c:	4770      	bx	lr
	switch (evt) {
   17c5e:	2813      	cmp	r0, #19
   17c60:	d003      	beq.n	17c6a <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   17c62:	281a      	cmp	r0, #26
   17c64:	bf08      	it	eq
   17c66:	2001      	moveq	r0, #1
   17c68:	e7f6      	b.n	17c58 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   17c6a:	2001      	movs	r0, #1
	}
}
   17c6c:	4770      	bx	lr

00017c6e <hci_vendor_event>:
}
   17c6e:	4770      	bx	lr

00017c70 <atomic_or>:
{
   17c70:	4603      	mov	r3, r0
   17c72:	b510      	push	{r4, lr}
}
   17c74:	e8d3 0fef 	ldaex	r0, [r3]
   17c78:	ea40 0201 	orr.w	r2, r0, r1
   17c7c:	e8c3 2fe4 	stlex	r4, r2, [r3]
   17c80:	2c00      	cmp	r4, #0
   17c82:	d1f7      	bne.n	17c74 <atomic_or+0x4>
   17c84:	bd10      	pop	{r4, pc}

00017c86 <z_log_msg_static_create.constprop.0>:
   17c86:	2300      	movs	r3, #0
   17c88:	f7f2 bd4c 	b.w	a724 <z_impl_z_log_msg_static_create>

00017c8c <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17c8c:	e8d0 3fef 	ldaex	r3, [r0]
   17c90:	400b      	ands	r3, r1
   17c92:	e8c0 3fe2 	stlex	r2, r3, [r0]
   17c96:	2a00      	cmp	r2, #0
   17c98:	d1f8      	bne.n	17c8c <atomic_and.isra.0>
}
   17c9a:	4770      	bx	lr

00017c9c <bt_hci_disconnect>:
{
   17c9c:	b570      	push	{r4, r5, r6, lr}
   17c9e:	4606      	mov	r6, r0
   17ca0:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   17ca2:	f240 4006 	movw	r0, #1030	; 0x406
   17ca6:	2103      	movs	r1, #3
   17ca8:	f7f4 ff86 	bl	cbb8 <bt_hci_cmd_create>
	if (!buf) {
   17cac:	4604      	mov	r4, r0
   17cae:	b168      	cbz	r0, 17ccc <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   17cb0:	2103      	movs	r1, #3
   17cb2:	300c      	adds	r0, #12
   17cb4:	f001 fa7f 	bl	191b6 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   17cb8:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   17cba:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   17cbc:	4621      	mov	r1, r4
}
   17cbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   17cc2:	2200      	movs	r2, #0
   17cc4:	f240 4006 	movw	r0, #1030	; 0x406
   17cc8:	f7f4 bfb0 	b.w	cc2c <bt_hci_cmd_send_sync>
}
   17ccc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17cd0:	bd70      	pop	{r4, r5, r6, pc}

00017cd2 <bt_le_set_data_len>:
{
   17cd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17cd4:	4607      	mov	r7, r0
   17cd6:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   17cd8:	f242 0022 	movw	r0, #8226	; 0x2022
   17cdc:	2106      	movs	r1, #6
{
   17cde:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   17ce0:	f7f4 ff6a 	bl	cbb8 <bt_hci_cmd_create>
	if (!buf) {
   17ce4:	4604      	mov	r4, r0
   17ce6:	b178      	cbz	r0, 17d08 <bt_le_set_data_len+0x36>
   17ce8:	2106      	movs	r1, #6
   17cea:	300c      	adds	r0, #12
   17cec:	f001 fa63 	bl	191b6 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   17cf0:	883b      	ldrh	r3, [r7, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   17cf2:	8046      	strh	r6, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   17cf4:	8003      	strh	r3, [r0, #0]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   17cf6:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   17cf8:	4621      	mov	r1, r4
}
   17cfa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   17cfe:	2200      	movs	r2, #0
   17d00:	f242 0022 	movw	r0, #8226	; 0x2022
   17d04:	f7f4 bf92 	b.w	cc2c <bt_hci_cmd_send_sync>
}
   17d08:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00017d0e <bt_le_set_phy>:
{
   17d0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17d12:	4681      	mov	r9, r0
   17d14:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   17d16:	f242 0032 	movw	r0, #8242	; 0x2032
   17d1a:	2107      	movs	r1, #7
{
   17d1c:	4617      	mov	r7, r2
   17d1e:	461e      	mov	r6, r3
   17d20:	f89d a020 	ldrb.w	sl, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   17d24:	f7f4 ff48 	bl	cbb8 <bt_hci_cmd_create>
	if (!buf) {
   17d28:	4605      	mov	r5, r0
   17d2a:	b1a0      	cbz	r0, 17d56 <bt_le_set_phy+0x48>
   17d2c:	2107      	movs	r1, #7
   17d2e:	300c      	adds	r0, #12
   17d30:	f001 fa41 	bl	191b6 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   17d34:	f8b9 3000 	ldrh.w	r3, [r9]
	cp->all_phys = all_phys;
   17d38:	f880 8002 	strb.w	r8, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   17d3c:	8003      	strh	r3, [r0, #0]
	cp->tx_phys = pref_tx_phy;
   17d3e:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   17d40:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   17d42:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   17d46:	4629      	mov	r1, r5
}
   17d48:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   17d4c:	2200      	movs	r2, #0
   17d4e:	f242 0032 	movw	r0, #8242	; 0x2032
   17d52:	f7f4 bf6b 	b.w	cc2c <bt_hci_cmd_send_sync>
}
   17d56:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00017d5e <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   17d5e:	68c0      	ldr	r0, [r0, #12]
   17d60:	f7f5 b838 	b.w	cdd4 <bt_hci_le_enh_conn_complete>

00017d64 <bt_le_conn_params_valid>:
{
   17d64:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   17d66:	8803      	ldrh	r3, [r0, #0]
   17d68:	8842      	ldrh	r2, [r0, #2]
   17d6a:	4293      	cmp	r3, r2
   17d6c:	d819      	bhi.n	17da2 <bt_le_conn_params_valid+0x3e>
   17d6e:	2b05      	cmp	r3, #5
   17d70:	d917      	bls.n	17da2 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   17d72:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   17d76:	d814      	bhi.n	17da2 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   17d78:	8883      	ldrh	r3, [r0, #4]
   17d7a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   17d7e:	d210      	bcs.n	17da2 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   17d80:	f640 4476 	movw	r4, #3190	; 0xc76
   17d84:	88c0      	ldrh	r0, [r0, #6]
   17d86:	f1a0 010a 	sub.w	r1, r0, #10
   17d8a:	b289      	uxth	r1, r1
   17d8c:	42a1      	cmp	r1, r4
   17d8e:	d808      	bhi.n	17da2 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   17d90:	3301      	adds	r3, #1
   17d92:	b29b      	uxth	r3, r3
   17d94:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   17d96:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   17d9a:	bf34      	ite	cc
   17d9c:	2001      	movcc	r0, #1
   17d9e:	2000      	movcs	r0, #0
}
   17da0:	bd10      	pop	{r4, pc}
		return false;
   17da2:	2000      	movs	r0, #0
   17da4:	e7fc      	b.n	17da0 <bt_le_conn_params_valid+0x3c>

00017da6 <le_conn_param_neg_reply>:
{
   17da6:	b570      	push	{r4, r5, r6, lr}
   17da8:	4606      	mov	r6, r0
   17daa:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   17dac:	f242 0021 	movw	r0, #8225	; 0x2021
   17db0:	2103      	movs	r1, #3
   17db2:	f7f4 ff01 	bl	cbb8 <bt_hci_cmd_create>
	if (!buf) {
   17db6:	4604      	mov	r4, r0
   17db8:	b918      	cbnz	r0, 17dc2 <le_conn_param_neg_reply+0x1c>
}
   17dba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17dbe:	f7f4 baf3 	b.w	c3a8 <le_conn_param_neg_reply.part.0>
   17dc2:	2103      	movs	r1, #3
   17dc4:	300c      	adds	r0, #12
   17dc6:	f001 f9f6 	bl	191b6 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   17dca:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   17dcc:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   17dce:	4621      	mov	r1, r4
}
   17dd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   17dd4:	f242 0021 	movw	r0, #8225	; 0x2021
   17dd8:	f7f5 b9ac 	b.w	d134 <bt_hci_cmd_send>

00017ddc <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   17ddc:	2000      	movs	r0, #0
   17dde:	4770      	bx	lr

00017de0 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   17de0:	2000      	movs	r0, #0
   17de2:	4770      	bx	lr

00017de4 <bt_addr_le_eq>:
	return memcmp(a, b, sizeof(*a));
   17de4:	2207      	movs	r2, #7
{
   17de6:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   17de8:	f7ff fea3 	bl	17b32 <memcmp>
}
   17dec:	fab0 f080 	clz	r0, r0
   17df0:	0940      	lsrs	r0, r0, #5
   17df2:	bd08      	pop	{r3, pc}

00017df4 <z_log_msg_static_create.constprop.0>:
   17df4:	2300      	movs	r3, #0
   17df6:	f7f2 bc95 	b.w	a724 <z_impl_z_log_msg_static_create>

00017dfa <bt_lookup_id_addr>:
	return addr;
   17dfa:	2800      	cmp	r0, #0
}
   17dfc:	bf0c      	ite	eq
   17dfe:	4608      	moveq	r0, r1
   17e00:	2000      	movne	r0, #0
   17e02:	4770      	bx	lr

00017e04 <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   17e04:	b118      	cbz	r0, 17e0e <bt_id_set_adv_random_addr+0xa>
   17e06:	b111      	cbz	r1, 17e0e <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   17e08:	4608      	mov	r0, r1
   17e0a:	f7f6 b841 	b.w	de90 <set_random_address>
}
   17e0e:	f06f 0015 	mvn.w	r0, #21
   17e12:	4770      	bx	lr

00017e14 <bt_id_set_adv_private_addr>:
{
   17e14:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   17e16:	4604      	mov	r4, r0
   17e18:	b180      	cbz	r0, 17e3c <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   17e1a:	2106      	movs	r1, #6
   17e1c:	4668      	mov	r0, sp
   17e1e:	f7f6 fdd5 	bl	e9cc <bt_rand>
	if (err) {
   17e22:	b948      	cbnz	r0, 17e38 <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   17e24:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   17e28:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   17e2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   17e2e:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   17e30:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   17e34:	f7ff ffe6 	bl	17e04 <bt_id_set_adv_random_addr>
}
   17e38:	b002      	add	sp, #8
   17e3a:	bd10      	pop	{r4, pc}
		return -EINVAL;
   17e3c:	f06f 0015 	mvn.w	r0, #21
   17e40:	e7fa      	b.n	17e38 <bt_id_set_adv_private_addr+0x24>

00017e42 <bt_id_adv_random_addr_check>:
}
   17e42:	3800      	subs	r0, #0
   17e44:	bf18      	it	ne
   17e46:	2001      	movne	r0, #1
   17e48:	4770      	bx	lr

00017e4a <get_adv_channel_map>:
{
   17e4a:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   17e4c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   17e50:	bf0c      	ite	eq
   17e52:	2007      	moveq	r0, #7
   17e54:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   17e56:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   17e58:	bf48      	it	mi
   17e5a:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   17e5e:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   17e60:	bf48      	it	mi
   17e62:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   17e66:	4770      	bx	lr

00017e68 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17e68:	e8d0 0faf 	lda	r0, [r0]
}
   17e6c:	4770      	bx	lr

00017e6e <atomic_and>:
{
   17e6e:	4603      	mov	r3, r0
   17e70:	b510      	push	{r4, lr}
}
   17e72:	e8d3 0fef 	ldaex	r0, [r3]
   17e76:	ea00 0201 	and.w	r2, r0, r1
   17e7a:	e8c3 2fe4 	stlex	r4, r2, [r3]
   17e7e:	2c00      	cmp	r4, #0
   17e80:	d1f7      	bne.n	17e72 <atomic_and+0x4>
   17e82:	bd10      	pop	{r4, pc}

00017e84 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   17e84:	2301      	movs	r3, #1
{
   17e86:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   17e88:	fa03 f101 	lsl.w	r1, r3, r1
{
   17e8c:	4604      	mov	r4, r0
	if (val) {
   17e8e:	b142      	cbz	r2, 17ea2 <atomic_set_bit_to+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17e90:	e8d4 3fef 	ldaex	r3, [r4]
   17e94:	430b      	orrs	r3, r1
   17e96:	e8c4 3fe2 	stlex	r2, r3, [r4]
   17e9a:	2a00      	cmp	r2, #0
   17e9c:	d1f8      	bne.n	17e90 <atomic_set_bit_to+0xc>
	}
}
   17e9e:	bc10      	pop	{r4}
   17ea0:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17ea2:	43c9      	mvns	r1, r1
}
   17ea4:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17ea6:	f7ff bfe2 	b.w	17e6e <atomic_and>

00017eaa <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   17eaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17eae:	b087      	sub	sp, #28
   17eb0:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   17eb4:	4605      	mov	r5, r0
   17eb6:	460c      	mov	r4, r1
   17eb8:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   17eba:	2100      	movs	r1, #0
   17ebc:	2210      	movs	r2, #16
   17ebe:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   17ec0:	461f      	mov	r7, r3
   17ec2:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   17ec6:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
   17eca:	f7ff fe4d 	bl	17b68 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   17ece:	b9ce      	cbnz	r6, 17f04 <le_adv_update.constprop.0+0x5a>
		d[0].len = ad_len;
   17ed0:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   17ed4:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   17ed6:	f242 0008 	movw	r0, #8200	; 0x2008
   17eda:	a902      	add	r1, sp, #8
   17edc:	f7f6 f9e8 	bl	e2b0 <hci_set_ad>
		if (err) {
   17ee0:	4604      	mov	r4, r0
   17ee2:	b958      	cbnz	r0, 17efc <le_adv_update.constprop.0+0x52>
	if (scannable) {
   17ee4:	f1ba 0f00 	cmp.w	sl, #0
   17ee8:	d13a      	bne.n	17f60 <le_adv_update.constprop.0+0xb6>
   17eea:	3510      	adds	r5, #16
   17eec:	e8d5 3fef 	ldaex	r3, [r5]
   17ef0:	f043 0304 	orr.w	r3, r3, #4
   17ef4:	e8c5 3fe2 	stlex	r2, r3, [r5]
   17ef8:	2a00      	cmp	r2, #0
   17efa:	d1f7      	bne.n	17eec <le_adv_update.constprop.0+0x42>
}
   17efc:	4620      	mov	r0, r4
   17efe:	b007      	add	sp, #28
   17f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   17f04:	f7f5 ffa8 	bl	de58 <bt_get_name>
   17f08:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   17f0a:	b9e4      	cbnz	r4, 17f46 <le_adv_update.constprop.0+0x9c>
   17f0c:	bb37      	cbnz	r7, 17f5c <le_adv_update.constprop.0+0xb2>
		data = (struct bt_data)BT_DATA(
   17f0e:	4658      	mov	r0, fp
   17f10:	f7ff fde0 	bl	17ad4 <strlen>
   17f14:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   17f16:	2e01      	cmp	r6, #1
		d[0].data = ad;
   17f18:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   17f1c:	f88d 3000 	strb.w	r3, [sp]
   17f20:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   17f24:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   17f28:	d1d4      	bne.n	17ed4 <le_adv_update.constprop.0+0x2a>
			d_len = 2;
   17f2a:	2202      	movs	r2, #2
			d[1].data = &data;
   17f2c:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   17f30:	9605      	str	r6, [sp, #20]
			d_len = 2;
   17f32:	e7d0      	b.n	17ed6 <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   17f34:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   17f38:	3a08      	subs	r2, #8
   17f3a:	2a01      	cmp	r2, #1
   17f3c:	d924      	bls.n	17f88 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   17f3e:	3301      	adds	r3, #1
   17f40:	4598      	cmp	r8, r3
   17f42:	d1f7      	bne.n	17f34 <le_adv_update.constprop.0+0x8a>
   17f44:	e7e2      	b.n	17f0c <le_adv_update.constprop.0+0x62>
   17f46:	2300      	movs	r3, #0
   17f48:	e7fa      	b.n	17f40 <le_adv_update.constprop.0+0x96>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   17f4a:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   17f4e:	3a08      	subs	r2, #8
   17f50:	2a01      	cmp	r2, #1
   17f52:	d919      	bls.n	17f88 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   17f54:	3301      	adds	r3, #1
   17f56:	4599      	cmp	r9, r3
   17f58:	d1f7      	bne.n	17f4a <le_adv_update.constprop.0+0xa0>
   17f5a:	e7d8      	b.n	17f0e <le_adv_update.constprop.0+0x64>
   17f5c:	2300      	movs	r3, #0
   17f5e:	e7fa      	b.n	17f56 <le_adv_update.constprop.0+0xac>
		d[0].data = sd;
   17f60:	2201      	movs	r2, #1
		if (name_type == ADV_NAME_TYPE_SD) {
   17f62:	2e02      	cmp	r6, #2
			d[1].len = 1;
   17f64:	bf08      	it	eq
   17f66:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   17f68:	f242 0009 	movw	r0, #8201	; 0x2009
			d_len = 2;
   17f6c:	bf08      	it	eq
   17f6e:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   17f70:	a902      	add	r1, sp, #8
			d[1].data = &data;
   17f72:	bf08      	it	eq
   17f74:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   17f78:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   17f7c:	f7f6 f998 	bl	e2b0 <hci_set_ad>
		if (err) {
   17f80:	2800      	cmp	r0, #0
   17f82:	d0b2      	beq.n	17eea <le_adv_update.constprop.0+0x40>
   17f84:	4604      	mov	r4, r0
   17f86:	e7b9      	b.n	17efc <le_adv_update.constprop.0+0x52>
			return -EINVAL;
   17f88:	f06f 0415 	mvn.w	r4, #21
   17f8c:	e7b6      	b.n	17efc <le_adv_update.constprop.0+0x52>

00017f8e <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   17f8e:	6843      	ldr	r3, [r0, #4]
   17f90:	f013 0008 	ands.w	r0, r3, #8
   17f94:	d00a      	beq.n	17fac <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   17f96:	035a      	lsls	r2, r3, #13
   17f98:	d407      	bmi.n	17faa <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   17f9a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   17f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   17fa2:	bf14      	ite	ne
   17fa4:	2002      	movne	r0, #2
   17fa6:	2001      	moveq	r0, #1
   17fa8:	4770      	bx	lr
   17faa:	2001      	movs	r0, #1
}
   17fac:	4770      	bx	lr

00017fae <bt_le_adv_set_enable_legacy>:
{
   17fae:	b570      	push	{r4, r5, r6, lr}
   17fb0:	4606      	mov	r6, r0
   17fb2:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   17fb4:	f242 000a 	movw	r0, #8202	; 0x200a
   17fb8:	2101      	movs	r1, #1
{
   17fba:	b086      	sub	sp, #24
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   17fbc:	f7f4 fdfc 	bl	cbb8 <bt_hci_cmd_create>
	if (!buf) {
   17fc0:	4604      	mov	r4, r0
   17fc2:	b1b0      	cbz	r0, 17ff2 <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   17fc4:	300c      	adds	r0, #12
	if (enable) {
   17fc6:	b195      	cbz	r5, 17fee <bt_le_adv_set_enable_legacy+0x40>
   17fc8:	2101      	movs	r1, #1
   17fca:	f001 f903 	bl	191d4 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   17fce:	4620      	mov	r0, r4
   17fd0:	f106 0210 	add.w	r2, r6, #16
   17fd4:	a903      	add	r1, sp, #12
   17fd6:	2307      	movs	r3, #7
   17fd8:	9500      	str	r5, [sp, #0]
   17fda:	f7f4 fddb 	bl	cb94 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   17fde:	2200      	movs	r2, #0
   17fe0:	4621      	mov	r1, r4
   17fe2:	f242 000a 	movw	r0, #8202	; 0x200a
   17fe6:	f7f4 fe21 	bl	cc2c <bt_hci_cmd_send_sync>
}
   17fea:	b006      	add	sp, #24
   17fec:	bd70      	pop	{r4, r5, r6, pc}
   17fee:	4629      	mov	r1, r5
   17ff0:	e7eb      	b.n	17fca <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   17ff2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17ff6:	e7f8      	b.n	17fea <bt_le_adv_set_enable_legacy+0x3c>

00017ff8 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   17ff8:	3018      	adds	r0, #24
   17ffa:	f002 bb61 	b.w	1a6c0 <k_work_cancel_delayable>

00017ffe <z_log_msg_static_create.constprop.0>:
   17ffe:	2300      	movs	r3, #0
   18000:	f7f2 bb90 	b.w	a724 <z_impl_z_log_msg_static_create>

00018004 <tx_complete_work>:
	tx_notify(conn);
   18004:	3828      	subs	r0, #40	; 0x28
   18006:	f7f6 bd31 	b.w	ea6c <tx_notify>

0001800a <bt_conn_reset_rx_state>:
{
   1800a:	b510      	push	{r4, lr}
   1800c:	4604      	mov	r4, r0
	if (!conn->rx) {
   1800e:	6900      	ldr	r0, [r0, #16]
   18010:	b118      	cbz	r0, 1801a <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   18012:	f7f9 fcc3 	bl	1199c <net_buf_unref>
	conn->rx = NULL;
   18016:	2300      	movs	r3, #0
   18018:	6123      	str	r3, [r4, #16]
}
   1801a:	bd10      	pop	{r4, pc}

0001801c <conn_cleanup>:
{
   1801c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18020:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   18022:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   18024:	f104 0638 	add.w	r6, r4, #56	; 0x38
   18028:	2300      	movs	r3, #0
   1802a:	2200      	movs	r2, #0
   1802c:	4630      	mov	r0, r6
   1802e:	f001 f867 	bl	19100 <net_buf_get>
   18032:	4603      	mov	r3, r0
   18034:	b950      	cbnz	r0, 1804c <conn_cleanup+0x30>
	bt_conn_reset_rx_state(conn);
   18036:	4620      	mov	r0, r4
   18038:	f7ff ffe7 	bl	1800a <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1803c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   18040:	2200      	movs	r2, #0
}
   18042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   18046:	2300      	movs	r3, #0
   18048:	f7fd ba04 	b.w	15454 <k_work_reschedule>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   1804c:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   1804e:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   18050:	f7f9 fca4 	bl	1199c <net_buf_unref>
		if (tx) {
   18054:	2d00      	cmp	r5, #0
   18056:	d0e7      	beq.n	18028 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   18058:	4629      	mov	r1, r5
   1805a:	4620      	mov	r0, r4
   1805c:	f7f6 fd36 	bl	eacc <conn_tx_destroy>
   18060:	e7e0      	b.n	18024 <conn_cleanup+0x8>

00018062 <bt_conn_ref>:
{
   18062:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   18064:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18068:	e8d2 3faf 	lda	r3, [r2]
		if (!old) {
   1806c:	b15b      	cbz	r3, 18086 <bt_conn_ref+0x24>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1806e:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   18070:	e8d2 4fef 	ldaex	r4, [r2]
   18074:	429c      	cmp	r4, r3
   18076:	d104      	bne.n	18082 <bt_conn_ref+0x20>
   18078:	e8c2 1fec 	stlex	ip, r1, [r2]
   1807c:	f1bc 0f00 	cmp.w	ip, #0
   18080:	d1f6      	bne.n	18070 <bt_conn_ref+0xe>
   18082:	d1f1      	bne.n	18068 <bt_conn_ref+0x6>
}
   18084:	bd10      	pop	{r4, pc}
			return NULL;
   18086:	4618      	mov	r0, r3
   18088:	e7fc      	b.n	18084 <bt_conn_ref+0x22>

0001808a <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   1808a:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1808e:	e8d3 2fef 	ldaex	r2, [r3]
   18092:	3a01      	subs	r2, #1
   18094:	e8c3 2fe1 	stlex	r1, r2, [r3]
   18098:	2900      	cmp	r1, #0
   1809a:	d1f8      	bne.n	1808e <bt_conn_unref+0x4>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   1809c:	f240 1201 	movw	r2, #257	; 0x101
   180a0:	8841      	ldrh	r1, [r0, #2]
   180a2:	4291      	cmp	r1, r2
   180a4:	d104      	bne.n	180b0 <bt_conn_unref+0x26>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   180a6:	e8d3 3faf 	lda	r3, [r3]
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   180aa:	b90b      	cbnz	r3, 180b0 <bt_conn_unref+0x26>
		bt_le_adv_resume();
   180ac:	f7f6 bbb6 	b.w	e81c <bt_le_adv_resume>
}
   180b0:	4770      	bx	lr

000180b2 <conn_lookup_handle>:
{
   180b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   180b6:	4607      	mov	r7, r0
   180b8:	460e      	mov	r6, r1
   180ba:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   180bc:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   180be:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   180c2:	42b4      	cmp	r4, r6
   180c4:	d103      	bne.n	180ce <conn_lookup_handle+0x1c>
	return NULL;
   180c6:	2300      	movs	r3, #0
}
   180c8:	4618      	mov	r0, r3
   180ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   180ce:	fb09 7004 	mla	r0, r9, r4, r7
   180d2:	f7ff ffc6 	bl	18062 <bt_conn_ref>
   180d6:	4603      	mov	r3, r0
		if (!conn) {
   180d8:	b158      	cbz	r0, 180f2 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   180da:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   180dc:	2d01      	cmp	r5, #1
   180de:	d002      	beq.n	180e6 <conn_lookup_handle+0x34>
   180e0:	3d07      	subs	r5, #7
   180e2:	2d01      	cmp	r5, #1
   180e4:	d803      	bhi.n	180ee <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   180e6:	881a      	ldrh	r2, [r3, #0]
   180e8:	4542      	cmp	r2, r8
   180ea:	d0ed      	beq.n	180c8 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   180ec:	4618      	mov	r0, r3
   180ee:	f7ff ffcc 	bl	1808a <bt_conn_unref>
	for (i = 0; i < size; i++) {
   180f2:	3401      	adds	r4, #1
   180f4:	e7e5      	b.n	180c2 <conn_lookup_handle+0x10>

000180f6 <bt_conn_connected>:
{
   180f6:	b510      	push	{r4, lr}
   180f8:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   180fa:	f7f7 fb57 	bl	f7ac <bt_l2cap_connected>
	notify_connected(conn);
   180fe:	4620      	mov	r0, r4
}
   18100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   18104:	f7f6 bc80 	b.w	ea08 <notify_connected>

00018108 <bt_conn_is_peer_addr_le>:
{
   18108:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1810a:	7a03      	ldrb	r3, [r0, #8]
{
   1810c:	4604      	mov	r4, r0
	if (id != conn->id) {
   1810e:	428b      	cmp	r3, r1
{
   18110:	4615      	mov	r5, r2
	if (id != conn->id) {
   18112:	d115      	bne.n	18140 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   18114:	f100 0188 	add.w	r1, r0, #136	; 0x88
   18118:	2207      	movs	r2, #7
   1811a:	4628      	mov	r0, r5
   1811c:	f7ff fd09 	bl	17b32 <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   18120:	b180      	cbz	r0, 18144 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   18122:	78e3      	ldrb	r3, [r4, #3]
   18124:	2207      	movs	r2, #7
   18126:	b943      	cbnz	r3, 1813a <bt_conn_is_peer_addr_le+0x32>
   18128:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1812c:	4628      	mov	r0, r5
   1812e:	f7ff fd00 	bl	17b32 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   18132:	fab0 f080 	clz	r0, r0
   18136:	0940      	lsrs	r0, r0, #5
}
   18138:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   1813a:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1813e:	e7f5      	b.n	1812c <bt_conn_is_peer_addr_le+0x24>
		return false;
   18140:	2000      	movs	r0, #0
   18142:	e7f9      	b.n	18138 <bt_conn_is_peer_addr_le+0x30>
		return true;
   18144:	2001      	movs	r0, #1
   18146:	e7f7      	b.n	18138 <bt_conn_is_peer_addr_le+0x30>

00018148 <bt_conn_le_conn_update>:
{
   18148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1814a:	4607      	mov	r7, r0
   1814c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1814e:	f242 0013 	movw	r0, #8211	; 0x2013
   18152:	210e      	movs	r1, #14
   18154:	f7f4 fd30 	bl	cbb8 <bt_hci_cmd_create>
	if (!buf) {
   18158:	4606      	mov	r6, r0
   1815a:	b1d0      	cbz	r0, 18192 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1815c:	210e      	movs	r1, #14
   1815e:	300c      	adds	r0, #12
   18160:	f001 f829 	bl	191b6 <net_buf_simple_add>
   18164:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   18166:	220e      	movs	r2, #14
   18168:	2100      	movs	r1, #0
   1816a:	f7ff fcfd 	bl	17b68 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1816e:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   18170:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   18172:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   18174:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   18176:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   18178:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1817a:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1817c:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   18180:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   18182:	88ab      	ldrh	r3, [r5, #4]
   18184:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   18186:	88eb      	ldrh	r3, [r5, #6]
   18188:	8123      	strh	r3, [r4, #8]
}
   1818a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1818e:	f7f4 bd4d 	b.w	cc2c <bt_hci_cmd_send_sync>
}
   18192:	f06f 0068 	mvn.w	r0, #104	; 0x68
   18196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00018198 <l2cap_connected>:
}
   18198:	4770      	bx	lr

0001819a <z_log_msg_static_create.constprop.0>:
   1819a:	2300      	movs	r3, #0
   1819c:	f7f2 bac2 	b.w	a724 <z_impl_z_log_msg_static_create>

000181a0 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   181a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   181a2:	4605      	mov	r5, r0
   181a4:	460f      	mov	r7, r1
   181a6:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   181a8:	2300      	movs	r3, #0
   181aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   181ae:	2104      	movs	r1, #4
   181b0:	2000      	movs	r0, #0
   181b2:	f7f7 f823 	bl	f1fc <bt_conn_create_pdu_timeout>
	if (!buf) {
   181b6:	4604      	mov	r4, r0
   181b8:	b920      	cbnz	r0, 181c4 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   181ba:	4628      	mov	r0, r5
}
   181bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   181c0:	f7f7 bab8 	b.w	f734 <l2cap_create_le_sig_pdu.part.0>
   181c4:	2104      	movs	r1, #4
   181c6:	300c      	adds	r0, #12
   181c8:	f000 fff5 	bl	191b6 <net_buf_simple_add>
	hdr->code = code;
   181cc:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   181ce:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   181d0:	8046      	strh	r6, [r0, #2]
}
   181d2:	4620      	mov	r0, r4
   181d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000181d6 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   181d6:	4770      	bx	lr

000181d8 <bt_l2cap_chan_del>:
{
   181d8:	b570      	push	{r4, r5, r6, lr}
   181da:	4604      	mov	r4, r0
	if (!chan->conn) {
   181dc:	e9d0 3500 	ldrd	r3, r5, [r0]
   181e0:	b123      	cbz	r3, 181ec <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   181e2:	686b      	ldr	r3, [r5, #4]
   181e4:	b103      	cbz	r3, 181e8 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   181e6:	4798      	blx	r3
	chan->conn = NULL;
   181e8:	2300      	movs	r3, #0
   181ea:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   181ec:	68e3      	ldr	r3, [r4, #12]
   181ee:	b10b      	cbz	r3, 181f4 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   181f0:	4620      	mov	r0, r4
   181f2:	4798      	blx	r3
	if (ops->released) {
   181f4:	6a2b      	ldr	r3, [r5, #32]
   181f6:	b11b      	cbz	r3, 18200 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   181f8:	4620      	mov	r0, r4
}
   181fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   181fe:	4718      	bx	r3
}
   18200:	bd70      	pop	{r4, r5, r6, pc}

00018202 <bt_l2cap_disconnected>:
{
   18202:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   18204:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   18206:	b130      	cbz	r0, 18216 <bt_l2cap_disconnected+0x14>
	return node->next;
   18208:	f850 4908 	ldr.w	r4, [r0], #-8
   1820c:	b104      	cbz	r4, 18210 <bt_l2cap_disconnected+0xe>
   1820e:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   18210:	f7ff ffe2 	bl	181d8 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   18214:	b904      	cbnz	r4, 18218 <bt_l2cap_disconnected+0x16>
}
   18216:	bd38      	pop	{r3, r4, r5, pc}
   18218:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1821a:	b12d      	cbz	r5, 18228 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   1821c:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1821e:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   18220:	f7ff ffda 	bl	181d8 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   18224:	462c      	mov	r4, r5
   18226:	e7f7      	b.n	18218 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   18228:	4620      	mov	r0, r4
}
   1822a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   1822e:	f7ff bfd3 	b.w	181d8 <bt_l2cap_chan_del>

00018232 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   18232:	3104      	adds	r1, #4
   18234:	f7f6 bfe2 	b.w	f1fc <bt_conn_create_pdu_timeout>

00018238 <bt_l2cap_send_cb>:
{
   18238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1823c:	4614      	mov	r4, r2
   1823e:	4605      	mov	r5, r0
   18240:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   18242:	f102 000c 	add.w	r0, r2, #12
   18246:	2104      	movs	r1, #4
   18248:	461e      	mov	r6, r3
   1824a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1824e:	f000 ffc9 	bl	191e4 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   18252:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   18254:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   18256:	3a04      	subs	r2, #4
   18258:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1825a:	4643      	mov	r3, r8
   1825c:	4632      	mov	r2, r6
   1825e:	4621      	mov	r1, r4
   18260:	4628      	mov	r0, r5
}
   18262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   18266:	f7f6 bdfd 	b.w	ee64 <bt_conn_send_cb>

0001826a <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   1826a:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1826c:	b128      	cbz	r0, 1827a <bt_l2cap_le_lookup_rx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1826e:	8983      	ldrh	r3, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   18270:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   18272:	428b      	cmp	r3, r1
   18274:	d001      	beq.n	1827a <bt_l2cap_le_lookup_rx_cid+0x10>
	return node->next;
   18276:	6880      	ldr	r0, [r0, #8]
   18278:	e7f8      	b.n	1826c <bt_l2cap_le_lookup_rx_cid+0x2>
}
   1827a:	4770      	bx	lr

0001827c <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   1827c:	4770      	bx	lr

0001827e <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1827e:	4603      	mov	r3, r0
	return list->head;
   18280:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   18282:	b128      	cbz	r0, 18290 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18284:	6859      	ldr	r1, [r3, #4]
	return node->next;
   18286:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18288:	4288      	cmp	r0, r1
	list->head = node;
   1828a:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1828c:	bf08      	it	eq
   1828e:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   18290:	4770      	bx	lr

00018292 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   18292:	4603      	mov	r3, r0
	size_t bytes = 0;
   18294:	2000      	movs	r0, #0

	while (buf) {
   18296:	b903      	cbnz	r3, 1829a <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   18298:	4770      	bx	lr
		bytes += buf->len;
   1829a:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   1829c:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   1829e:	4410      	add	r0, r2
		buf = buf->frags;
   182a0:	e7f9      	b.n	18296 <net_buf_frags_len+0x4>

000182a2 <attr_read_type_cb>:
{
   182a2:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   182a4:	68d4      	ldr	r4, [r2, #12]
   182a6:	3102      	adds	r1, #2
   182a8:	7823      	ldrb	r3, [r4, #0]
   182aa:	b913      	cbnz	r3, 182b2 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   182ac:	7021      	strb	r1, [r4, #0]
	return true;
   182ae:	2001      	movs	r0, #1
}
   182b0:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   182b2:	428b      	cmp	r3, r1
   182b4:	d0fb      	beq.n	182ae <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   182b6:	8a03      	ldrh	r3, [r0, #16]
   182b8:	3b02      	subs	r3, #2
   182ba:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   182bc:	2000      	movs	r0, #0
   182be:	6110      	str	r0, [r2, #16]
		return false;
   182c0:	e7f6      	b.n	182b0 <attr_read_type_cb+0xe>

000182c2 <att_prepare_write_req>:
}
   182c2:	2006      	movs	r0, #6
   182c4:	4770      	bx	lr

000182c6 <atomic_test_bit>:
   182c6:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   182ca:	4108      	asrs	r0, r1
}
   182cc:	f000 0001 	and.w	r0, r0, #1
   182d0:	4770      	bx	lr

000182d2 <write_cb>:
{
   182d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   182d4:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   182d6:	4601      	mov	r1, r0
{
   182d8:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   182da:	f44f 7295 	mov.w	r2, #298	; 0x12a
   182de:	6820      	ldr	r0, [r4, #0]
   182e0:	f000 fe01 	bl	18ee6 <bt_gatt_check_perm>
   182e4:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   182e6:	bb00      	cbnz	r0, 1832a <write_cb+0x58>
	if (!data->req) {
   182e8:	7a23      	ldrb	r3, [r4, #8]
   182ea:	b1b3      	cbz	r3, 1831a <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   182ec:	f1a3 0218 	sub.w	r2, r3, #24
   182f0:	4253      	negs	r3, r2
   182f2:	4153      	adcs	r3, r2
   182f4:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   182f6:	9301      	str	r3, [sp, #4]
   182f8:	8a63      	ldrh	r3, [r4, #18]
   182fa:	4629      	mov	r1, r5
   182fc:	9300      	str	r3, [sp, #0]
   182fe:	68ae      	ldr	r6, [r5, #8]
   18300:	8a23      	ldrh	r3, [r4, #16]
   18302:	68e2      	ldr	r2, [r4, #12]
   18304:	6820      	ldr	r0, [r4, #0]
   18306:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   18308:	2800      	cmp	r0, #0
   1830a:	db08      	blt.n	1831e <write_cb+0x4c>
   1830c:	8a23      	ldrh	r3, [r4, #16]
   1830e:	4298      	cmp	r0, r3
   18310:	d10e      	bne.n	18330 <write_cb+0x5e>
	data->err = 0U;
   18312:	2300      	movs	r3, #0
	return BT_GATT_ITER_CONTINUE;
   18314:	2001      	movs	r0, #1
	data->err = 0U;
   18316:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   18318:	e008      	b.n	1832c <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1831a:	2302      	movs	r3, #2
   1831c:	e7eb      	b.n	182f6 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   1831e:	f110 0fff 	cmn.w	r0, #255	; 0xff
   18322:	d305      	bcc.n	18330 <write_cb+0x5e>
		return -err;
   18324:	4240      	negs	r0, r0
   18326:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   18328:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1832a:	2000      	movs	r0, #0
}
   1832c:	b002      	add	sp, #8
   1832e:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   18330:	200e      	movs	r0, #14
   18332:	e7f9      	b.n	18328 <write_cb+0x56>

00018334 <bt_gatt_foreach_attr>:
{
   18334:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   18336:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1833a:	2300      	movs	r3, #0
   1833c:	461a      	mov	r2, r3
   1833e:	9300      	str	r3, [sp, #0]
   18340:	f7f8 fe0a 	bl	10f58 <bt_gatt_foreach_attr_type>
}
   18344:	b005      	add	sp, #20
   18346:	f85d fb04 	ldr.w	pc, [sp], #4

0001834a <find_info_cb>:
{
   1834a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1834c:	6893      	ldr	r3, [r2, #8]
{
   1834e:	4605      	mov	r5, r0
   18350:	460e      	mov	r6, r1
   18352:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   18354:	6817      	ldr	r7, [r2, #0]
	if (!data->rsp) {
   18356:	b963      	cbnz	r3, 18372 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   18358:	6850      	ldr	r0, [r2, #4]
   1835a:	2101      	movs	r1, #1
   1835c:	300c      	adds	r0, #12
   1835e:	f000 ff2a 	bl	191b6 <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   18362:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   18364:	682b      	ldr	r3, [r5, #0]
   18366:	781b      	ldrb	r3, [r3, #0]
   18368:	2b00      	cmp	r3, #0
   1836a:	bf14      	ite	ne
   1836c:	2302      	movne	r3, #2
   1836e:	2301      	moveq	r3, #1
   18370:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   18372:	68a3      	ldr	r3, [r4, #8]
   18374:	781b      	ldrb	r3, [r3, #0]
   18376:	2b01      	cmp	r3, #1
   18378:	d003      	beq.n	18382 <find_info_cb+0x38>
   1837a:	2b02      	cmp	r3, #2
   1837c:	d019      	beq.n	183b2 <find_info_cb+0x68>
   1837e:	2000      	movs	r0, #0
   18380:	e016      	b.n	183b0 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   18382:	682b      	ldr	r3, [r5, #0]
   18384:	781b      	ldrb	r3, [r3, #0]
   18386:	2b00      	cmp	r3, #0
   18388:	d1f9      	bne.n	1837e <find_info_cb+0x34>
   1838a:	6860      	ldr	r0, [r4, #4]
   1838c:	2104      	movs	r1, #4
   1838e:	300c      	adds	r0, #12
   18390:	f000 ff11 	bl	191b6 <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   18394:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   18396:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   18398:	682a      	ldr	r2, [r5, #0]
   1839a:	68e3      	ldr	r3, [r4, #12]
   1839c:	8852      	ldrh	r2, [r2, #2]
   1839e:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   183a0:	6863      	ldr	r3, [r4, #4]
   183a2:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   183a4:	8a1b      	ldrh	r3, [r3, #16]
   183a6:	1ac0      	subs	r0, r0, r3
   183a8:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   183aa:	bf94      	ite	ls
   183ac:	2000      	movls	r0, #0
   183ae:	2001      	movhi	r0, #1
}
   183b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   183b2:	682b      	ldr	r3, [r5, #0]
   183b4:	781b      	ldrb	r3, [r3, #0]
   183b6:	2b02      	cmp	r3, #2
   183b8:	d1e1      	bne.n	1837e <find_info_cb+0x34>
   183ba:	6860      	ldr	r0, [r4, #4]
   183bc:	2112      	movs	r1, #18
   183be:	300c      	adds	r0, #12
   183c0:	f000 fef9 	bl	191b6 <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   183c4:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   183c6:	8006      	strh	r6, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   183c8:	6829      	ldr	r1, [r5, #0]
   183ca:	68e0      	ldr	r0, [r4, #12]
   183cc:	2210      	movs	r2, #16
   183ce:	3101      	adds	r1, #1
   183d0:	3002      	adds	r0, #2
   183d2:	f7ff fbbe 	bl	17b52 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   183d6:	6863      	ldr	r3, [r4, #4]
   183d8:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   183da:	8a1b      	ldrh	r3, [r3, #16]
   183dc:	1ac0      	subs	r0, r0, r3
   183de:	2812      	cmp	r0, #18
   183e0:	e7e3      	b.n	183aa <find_info_cb+0x60>

000183e2 <att_chan_mtu_updated>:
{
   183e2:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   183e4:	6805      	ldr	r5, [r0, #0]
	return list->head;
   183e6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   183e8:	b352      	cbz	r2, 18440 <att_chan_mtu_updated+0x5e>
	return node->next;
   183ea:	6813      	ldr	r3, [r2, #0]
   183ec:	b103      	cbz	r3, 183f0 <att_chan_mtu_updated+0xe>
   183ee:	3b88      	subs	r3, #136	; 0x88
   183f0:	f1a2 0488 	sub.w	r4, r2, #136	; 0x88
   183f4:	2200      	movs	r2, #0
   183f6:	4611      	mov	r1, r2
   183f8:	e000      	b.n	183fc <att_chan_mtu_updated+0x1a>
   183fa:	3b88      	subs	r3, #136	; 0x88
		if (chan == updated_chan) {
   183fc:	4284      	cmp	r4, r0
   183fe:	d007      	beq.n	18410 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   18400:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   18402:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   18404:	42b1      	cmp	r1, r6
   18406:	bf38      	it	cc
   18408:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1840a:	42a2      	cmp	r2, r4
   1840c:	bf38      	it	cc
   1840e:	4622      	movcc	r2, r4
   18410:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18412:	b12b      	cbz	r3, 18420 <att_chan_mtu_updated+0x3e>
   18414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   18418:	2b00      	cmp	r3, #0
   1841a:	d1ee      	bne.n	183fa <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   1841c:	4284      	cmp	r4, r0
   1841e:	d1ef      	bne.n	18400 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   18420:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   18422:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   18424:	428b      	cmp	r3, r1
   18426:	d801      	bhi.n	1842c <att_chan_mtu_updated+0x4a>
   18428:	4290      	cmp	r0, r2
   1842a:	d90b      	bls.n	18444 <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1842c:	4282      	cmp	r2, r0
   1842e:	bf38      	it	cc
   18430:	4602      	movcc	r2, r0
   18432:	4299      	cmp	r1, r3
   18434:	6828      	ldr	r0, [r5, #0]
   18436:	bf38      	it	cc
   18438:	4619      	movcc	r1, r3
}
   1843a:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1843c:	f7f9 b98e 	b.w	1175c <bt_gatt_att_max_mtu_changed>
   18440:	4611      	mov	r1, r2
   18442:	e7ed      	b.n	18420 <att_chan_mtu_updated+0x3e>
}
   18444:	bc70      	pop	{r4, r5, r6}
   18446:	4770      	bx	lr

00018448 <attr_read_group_cb>:
	if (!data->rsp->len) {
   18448:	68d0      	ldr	r0, [r2, #12]
   1844a:	3104      	adds	r1, #4
   1844c:	7803      	ldrb	r3, [r0, #0]
   1844e:	b913      	cbnz	r3, 18456 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   18450:	7001      	strb	r1, [r0, #0]
	return true;
   18452:	2001      	movs	r0, #1
   18454:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   18456:	428b      	cmp	r3, r1
   18458:	d0fb      	beq.n	18452 <attr_read_group_cb+0xa>
		data->group = NULL;
   1845a:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1845c:	6891      	ldr	r1, [r2, #8]
   1845e:	8a0b      	ldrh	r3, [r1, #16]
   18460:	3b04      	subs	r3, #4
   18462:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   18464:	6110      	str	r0, [r2, #16]
}
   18466:	4770      	bx	lr

00018468 <z_log_msg_static_create.constprop.0>:
   18468:	2300      	movs	r3, #0
   1846a:	f7f2 b95b 	b.w	a724 <z_impl_z_log_msg_static_create>

0001846e <chan_req_send>:
{
   1846e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18470:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   18472:	6888      	ldr	r0, [r1, #8]
   18474:	f7ff ff0d 	bl	18292 <net_buf_frags_len>
   18478:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
{
   1847a:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1847c:	4283      	cmp	r3, r0
   1847e:	d30b      	bcc.n	18498 <chan_req_send+0x2a>
	req->buf = NULL;
   18480:	2600      	movs	r6, #0
	chan->req = req;
   18482:	63a9      	str	r1, [r5, #56]	; 0x38
	buf = req->buf;
   18484:	688f      	ldr	r7, [r1, #8]
	return chan_send(chan, buf);
   18486:	4628      	mov	r0, r5
	req->buf = NULL;
   18488:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   1848a:	4639      	mov	r1, r7
   1848c:	f7f7 fbce 	bl	fc2c <chan_send>
	if (err) {
   18490:	b108      	cbz	r0, 18496 <chan_req_send+0x28>
		req->buf = buf;
   18492:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   18494:	63ae      	str	r6, [r5, #56]	; 0x38
}
   18496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   18498:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1849c:	e7fb      	b.n	18496 <chan_req_send+0x28>

0001849e <process_queue>:
{
   1849e:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   184a0:	2200      	movs	r2, #0
{
   184a2:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   184a4:	2300      	movs	r3, #0
   184a6:	4608      	mov	r0, r1
{
   184a8:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   184aa:	f000 fe29 	bl	19100 <net_buf_get>
	if (buf) {
   184ae:	4605      	mov	r5, r0
   184b0:	b158      	cbz	r0, 184ca <process_queue+0x2c>
	return chan_send(chan, buf);
   184b2:	4601      	mov	r1, r0
   184b4:	4620      	mov	r0, r4
   184b6:	f7f7 fbb9 	bl	fc2c <chan_send>
		if (err) {
   184ba:	4604      	mov	r4, r0
   184bc:	b118      	cbz	r0, 184c6 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   184be:	4629      	mov	r1, r5
   184c0:	4630      	mov	r0, r6
   184c2:	f002 f81a 	bl	1a4fa <k_queue_prepend>
}
   184c6:	4620      	mov	r0, r4
   184c8:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   184ca:	f06f 0401 	mvn.w	r4, #1
   184ce:	e7fa      	b.n	184c6 <process_queue+0x28>

000184d0 <bt_att_chan_send_rsp>:
{
   184d0:	b538      	push	{r3, r4, r5, lr}
   184d2:	4604      	mov	r4, r0
   184d4:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   184d6:	f7f7 fba9 	bl	fc2c <chan_send>
	if (err) {
   184da:	b130      	cbz	r0, 184ea <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   184dc:	4629      	mov	r1, r5
   184de:	f104 003c 	add.w	r0, r4, #60	; 0x3c
}
   184e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   184e6:	f000 be3a 	b.w	1915e <net_buf_put>
}
   184ea:	bd38      	pop	{r3, r4, r5, pc}

000184ec <att_chan_read>:
{
   184ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184f0:	4680      	mov	r8, r0
   184f2:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   184f4:	4610      	mov	r0, r2
{
   184f6:	4699      	mov	r9, r3
   184f8:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   184fa:	f7ff feca 	bl	18292 <net_buf_frags_len>
   184fe:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
{
   18502:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   18504:	4283      	cmp	r3, r0
   18506:	d97a      	bls.n	185fe <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   18508:	f8d8 3004 	ldr.w	r3, [r8, #4]
	frag = net_buf_frag_last(buf);
   1850c:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   1850e:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   18510:	f000 fe2b 	bl	1916a <net_buf_frag_last>
	size_t len, total = 0;
   18514:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   18518:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1851a:	4630      	mov	r0, r6
   1851c:	f7ff feb9 	bl	18292 <net_buf_frags_len>
   18520:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   18524:	f105 070c 	add.w	r7, r5, #12
   18528:	1a24      	subs	r4, r4, r0
   1852a:	4638      	mov	r0, r7
   1852c:	f000 fe87 	bl	1923e <net_buf_simple_tailroom>
   18530:	4284      	cmp	r4, r0
   18532:	d211      	bcs.n	18558 <att_chan_read+0x6c>
   18534:	4630      	mov	r0, r6
   18536:	f7ff feac 	bl	18292 <net_buf_frags_len>
   1853a:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   1853e:	1a24      	subs	r4, r4, r0
		if (!len) {
   18540:	bb34      	cbnz	r4, 18590 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   18542:	7ab0      	ldrb	r0, [r6, #10]
   18544:	f7f9 f968 	bl	11818 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   18548:	2200      	movs	r2, #0
   1854a:	2300      	movs	r3, #0
   1854c:	f000 fdd3 	bl	190f6 <net_buf_alloc_fixed>
			if (!frag) {
   18550:	4605      	mov	r5, r0
   18552:	b930      	cbnz	r0, 18562 <att_chan_read+0x76>
	return total;
   18554:	4657      	mov	r7, sl
   18556:	e02c      	b.n	185b2 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   18558:	4638      	mov	r0, r7
   1855a:	f000 fe70 	bl	1923e <net_buf_simple_tailroom>
   1855e:	4604      	mov	r4, r0
   18560:	e7ee      	b.n	18540 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   18562:	4601      	mov	r1, r0
   18564:	4630      	mov	r0, r6
   18566:	f000 fe11 	bl	1918c <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1856a:	4630      	mov	r0, r6
   1856c:	f7ff fe91 	bl	18292 <net_buf_frags_len>
   18570:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   18574:	f105 070c 	add.w	r7, r5, #12
   18578:	1a24      	subs	r4, r4, r0
   1857a:	4638      	mov	r0, r7
   1857c:	f000 fe5f 	bl	1923e <net_buf_simple_tailroom>
   18580:	4284      	cmp	r4, r0
   18582:	d21a      	bcs.n	185ba <att_chan_read+0xce>
   18584:	4630      	mov	r0, r6
   18586:	f7ff fe84 	bl	18292 <net_buf_frags_len>
   1858a:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   1858e:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   18590:	68e9      	ldr	r1, [r5, #12]
   18592:	8a2a      	ldrh	r2, [r5, #16]
   18594:	f8cd 9000 	str.w	r9, [sp]
   18598:	f8db 7004 	ldr.w	r7, [fp, #4]
   1859c:	440a      	add	r2, r1
   1859e:	9803      	ldr	r0, [sp, #12]
   185a0:	4659      	mov	r1, fp
   185a2:	b2a3      	uxth	r3, r4
   185a4:	47b8      	blx	r7
		if (read < 0) {
   185a6:	1e07      	subs	r7, r0, #0
   185a8:	da0c      	bge.n	185c4 <att_chan_read+0xd8>
				return total;
   185aa:	f1ba 0f00 	cmp.w	sl, #0
   185ae:	bf18      	it	ne
   185b0:	4657      	movne	r7, sl
}
   185b2:	4638      	mov	r0, r7
   185b4:	b005      	add	sp, #20
   185b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185ba:	4638      	mov	r0, r7
   185bc:	f000 fe3f 	bl	1923e <net_buf_simple_tailroom>
   185c0:	4604      	mov	r4, r0
   185c2:	e7e5      	b.n	18590 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   185c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   185c6:	b993      	cbnz	r3, 185ee <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   185c8:	4639      	mov	r1, r7
   185ca:	f105 000c 	add.w	r0, r5, #12
   185ce:	f000 fdf2 	bl	191b6 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   185d2:	4630      	mov	r0, r6
   185d4:	f7ff fe5d 	bl	18292 <net_buf_frags_len>
   185d8:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   185dc:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   185de:	4283      	cmp	r3, r0
		total += read;
   185e0:	44ba      	add	sl, r7
		offset += read;
   185e2:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   185e6:	d9b5      	bls.n	18554 <att_chan_read+0x68>
   185e8:	42a7      	cmp	r7, r4
   185ea:	d096      	beq.n	1851a <att_chan_read+0x2e>
   185ec:	e7b2      	b.n	18554 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   185ee:	4639      	mov	r1, r7
   185f0:	4628      	mov	r0, r5
   185f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   185f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   185f6:	4798      	blx	r3
   185f8:	2800      	cmp	r0, #0
   185fa:	d1e5      	bne.n	185c8 <att_chan_read+0xdc>
   185fc:	e7aa      	b.n	18554 <att_chan_read+0x68>
		return 0;
   185fe:	2700      	movs	r7, #0
   18600:	e7d7      	b.n	185b2 <att_chan_read+0xc6>

00018602 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18602:	2200      	movs	r2, #0
	return list->head;
   18604:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18606:	b903      	cbnz	r3, 1860a <sys_slist_find_and_remove.isra.0+0x8>
   18608:	4770      	bx	lr
   1860a:	428b      	cmp	r3, r1
   1860c:	d10f      	bne.n	1862e <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   1860e:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   18610:	b93a      	cbnz	r2, 18622 <sys_slist_find_and_remove.isra.0+0x20>
   18612:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   18614:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   18616:	4291      	cmp	r1, r2
   18618:	d100      	bne.n	1861c <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   1861a:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1861c:	2300      	movs	r3, #0
   1861e:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   18620:	4770      	bx	lr
	parent->next = child;
   18622:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   18624:	6843      	ldr	r3, [r0, #4]
   18626:	4299      	cmp	r1, r3
	list->tail = node;
   18628:	bf08      	it	eq
   1862a:	6042      	streq	r2, [r0, #4]
}
   1862c:	e7f6      	b.n	1861c <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   1862e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18630:	681b      	ldr	r3, [r3, #0]
   18632:	e7e8      	b.n	18606 <sys_slist_find_and_remove.isra.0+0x4>

00018634 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   18634:	2301      	movs	r3, #1
   18636:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18638:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1863a:	e8d0 2fef 	ldaex	r2, [r0]
   1863e:	401a      	ands	r2, r3
   18640:	e8c0 2fe1 	stlex	r1, r2, [r0]
   18644:	2900      	cmp	r1, #0
   18646:	d1f8      	bne.n	1863a <atomic_clear_bit+0x6>
}
   18648:	4770      	bx	lr

0001864a <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   1864a:	2006      	movs	r0, #6
   1864c:	4770      	bx	lr

0001864e <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1864e:	2301      	movs	r3, #1
{
   18650:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   18652:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18656:	e8d0 3fef 	ldaex	r3, [r0]
   1865a:	ea43 0201 	orr.w	r2, r3, r1
   1865e:	e8c0 2fe4 	stlex	r4, r2, [r0]
   18662:	2c00      	cmp	r4, #0
   18664:	d1f7      	bne.n	18656 <atomic_test_and_set_bit+0x8>
	return (old & mask) != 0;
   18666:	4219      	tst	r1, r3
}
   18668:	bf14      	ite	ne
   1866a:	2001      	movne	r0, #1
   1866c:	2000      	moveq	r0, #0
   1866e:	bd10      	pop	{r4, pc}

00018670 <read_cb>:
{
   18670:	b573      	push	{r0, r1, r4, r5, r6, lr}
	data->err = 0x00;
   18672:	2300      	movs	r3, #0
{
   18674:	4605      	mov	r5, r0
	struct bt_att_chan *chan = data->chan;
   18676:	6816      	ldr	r6, [r2, #0]
{
   18678:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1867a:	6870      	ldr	r0, [r6, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1867c:	4629      	mov	r1, r5
	data->err = 0x00;
   1867e:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   18680:	2295      	movs	r2, #149	; 0x95
   18682:	f000 fc30 	bl	18ee6 <bt_gatt_check_perm>
   18686:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   18688:	b980      	cbnz	r0, 186ac <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1868a:	e9cd 0000 	strd	r0, r0, [sp]
   1868e:	4629      	mov	r1, r5
   18690:	4630      	mov	r0, r6
   18692:	88a3      	ldrh	r3, [r4, #4]
   18694:	68a2      	ldr	r2, [r4, #8]
   18696:	f7ff ff29 	bl	184ec <att_chan_read>
	if (ret < 0) {
   1869a:	2800      	cmp	r0, #0
   1869c:	da09      	bge.n	186b2 <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   1869e:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   186a2:	bf32      	itee	cc
   186a4:	200e      	movcc	r0, #14
		return -err;
   186a6:	4240      	negcs	r0, r0
   186a8:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(ret);
   186aa:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   186ac:	2000      	movs	r0, #0
}
   186ae:	b002      	add	sp, #8
   186b0:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   186b2:	2001      	movs	r0, #1
   186b4:	e7fb      	b.n	186ae <read_cb+0x3e>

000186b6 <read_vl_cb>:
{
   186b6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	data->err = 0x00;
   186ba:	2300      	movs	r3, #0
{
   186bc:	4606      	mov	r6, r0
	struct bt_att_chan *chan = data->chan;
   186be:	f8d2 8000 	ldr.w	r8, [r2]
{
   186c2:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   186c4:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   186c8:	4631      	mov	r1, r6
	data->err = 0x00;
   186ca:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   186cc:	2295      	movs	r2, #149	; 0x95
   186ce:	f000 fc0a 	bl	18ee6 <bt_gatt_check_perm>
   186d2:	4605      	mov	r5, r0
   186d4:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   186d6:	b9e0      	cbnz	r0, 18712 <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   186d8:	68a0      	ldr	r0, [r4, #8]
   186da:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   186de:	8a02      	ldrh	r2, [r0, #16]
   186e0:	1a9b      	subs	r3, r3, r2
   186e2:	2b01      	cmp	r3, #1
   186e4:	dd15      	ble.n	18712 <read_vl_cb+0x5c>
   186e6:	2102      	movs	r1, #2
   186e8:	300c      	adds	r0, #12
   186ea:	f000 fd64 	bl	191b6 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   186ee:	e9cd 5500 	strd	r5, r5, [sp]
   186f2:	4607      	mov	r7, r0
   186f4:	88a3      	ldrh	r3, [r4, #4]
   186f6:	4631      	mov	r1, r6
   186f8:	4640      	mov	r0, r8
   186fa:	68a2      	ldr	r2, [r4, #8]
   186fc:	f7ff fef6 	bl	184ec <att_chan_read>
	if (read < 0) {
   18700:	1e03      	subs	r3, r0, #0
   18702:	da0a      	bge.n	1871a <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   18704:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   18708:	bf32      	itee	cc
   1870a:	230e      	movcc	r3, #14
		return -err;
   1870c:	425b      	negcs	r3, r3
   1870e:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(read);
   18710:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   18712:	2000      	movs	r0, #0
}
   18714:	b002      	add	sp, #8
   18716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return BT_GATT_ITER_CONTINUE;
   1871a:	2001      	movs	r0, #1
	rsp->len = read;
   1871c:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   1871e:	e7f9      	b.n	18714 <read_vl_cb+0x5e>

00018720 <bt_att_sent>:
{
   18720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att *att = chan->att;
   18722:	f850 4c04 	ldr.w	r4, [r0, #-4]
{
   18726:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   18728:	1f07      	subs	r7, r0, #4
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   1872a:	2104      	movs	r1, #4
   1872c:	3030      	adds	r0, #48	; 0x30
   1872e:	f7ff ff81 	bl	18634 <atomic_clear_bit>
	if (!att) {
   18732:	b304      	cbz	r4, 18776 <bt_att_sent+0x56>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   18734:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   18736:	b98b      	cbnz	r3, 1875c <bt_att_sent+0x3c>
   18738:	6863      	ldr	r3, [r4, #4]
   1873a:	b17b      	cbz	r3, 1875c <bt_att_sent+0x3c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1873c:	1d20      	adds	r0, r4, #4
   1873e:	f7ff fd9e 	bl	1827e <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   18742:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   18744:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   18746:	4638      	mov	r0, r7
   18748:	f7ff fe91 	bl	1846e <chan_req_send>
   1874c:	2800      	cmp	r0, #0
   1874e:	da12      	bge.n	18776 <bt_att_sent+0x56>
	return list->head;
   18750:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   18752:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   18754:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   18756:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   18758:	b903      	cbnz	r3, 1875c <bt_att_sent+0x3c>
	list->tail = node;
   1875a:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   1875c:	4638      	mov	r0, r7
   1875e:	f105 0138 	add.w	r1, r5, #56	; 0x38
   18762:	f7ff fe9c 	bl	1849e <process_queue>
	if (!err) {
   18766:	b130      	cbz	r0, 18776 <bt_att_sent+0x56>
	(void)process_queue(chan, &att->tx_queue);
   18768:	4638      	mov	r0, r7
   1876a:	f104 010c 	add.w	r1, r4, #12
}
   1876e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   18772:	f7ff be94 	b.w	1849e <process_queue>
}
   18776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00018778 <att_req_send_process>:
{
   18778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   1877c:	6a44      	ldr	r4, [r0, #36]	; 0x24
   1877e:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18780:	2c00      	cmp	r4, #0
   18782:	d03a      	beq.n	187fa <att_req_send_process+0x82>
	return node->next;
   18784:	f854 6988 	ldr.w	r6, [r4], #-136
   18788:	b106      	cbz	r6, 1878c <att_req_send_process+0x14>
   1878a:	3e88      	subs	r6, #136	; 0x88
{
   1878c:	2300      	movs	r3, #0
		req = get_first_req_matching_chan(&att->reqs, chan);
   1878e:	f108 0704 	add.w	r7, r8, #4
{
   18792:	461d      	mov	r5, r3
   18794:	e013      	b.n	187be <att_req_send_process+0x46>
		if (!req && prev &&
   18796:	b1bb      	cbz	r3, 187c8 <att_req_send_process+0x50>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   18798:	2103      	movs	r1, #3
   1879a:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1879e:	f7ff fd92 	bl	182c6 <atomic_test_bit>
   187a2:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   187a4:	f103 0034 	add.w	r0, r3, #52	; 0x34
   187a8:	f7ff fd8d 	bl	182c6 <atomic_test_bit>
		if (!req && prev &&
   187ac:	4282      	cmp	r2, r0
   187ae:	d10b      	bne.n	187c8 <att_req_send_process+0x50>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   187b0:	b31e      	cbz	r6, 187fa <att_req_send_process+0x82>
   187b2:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
   187b6:	b102      	cbz	r2, 187ba <att_req_send_process+0x42>
   187b8:	3a88      	subs	r2, #136	; 0x88
{
   187ba:	4634      	mov	r4, r6
   187bc:	4616      	mov	r6, r2
		if (chan->req) {
   187be:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   187c0:	2a00      	cmp	r2, #0
   187c2:	d1f5      	bne.n	187b0 <att_req_send_process+0x38>
		if (!req && prev &&
   187c4:	2d00      	cmp	r5, #0
   187c6:	d0e6      	beq.n	18796 <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   187c8:	4638      	mov	r0, r7
   187ca:	f7ff fd58 	bl	1827e <sys_slist_get>
	if (node) {
   187ce:	4605      	mov	r5, r0
   187d0:	b908      	cbnz	r0, 187d6 <att_req_send_process+0x5e>
   187d2:	4623      	mov	r3, r4
   187d4:	e7ec      	b.n	187b0 <att_req_send_process+0x38>
	return chan_req_send(chan, req);
   187d6:	4601      	mov	r1, r0
   187d8:	4620      	mov	r0, r4
   187da:	f7ff fe48 	bl	1846e <chan_req_send>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   187de:	2800      	cmp	r0, #0
   187e0:	da0b      	bge.n	187fa <att_req_send_process+0x82>
	return list->head;
   187e2:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   187e6:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   187e8:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   187ec:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   187f0:	2b00      	cmp	r3, #0
   187f2:	d1ee      	bne.n	187d2 <att_req_send_process+0x5a>
	list->tail = node;
   187f4:	f8c8 5008 	str.w	r5, [r8, #8]
}
   187f8:	e7eb      	b.n	187d2 <att_req_send_process+0x5a>
}
   187fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000187fe <bt_att_status>:
{
   187fe:	b538      	push	{r3, r4, r5, lr}
   18800:	4605      	mov	r5, r0
   18802:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   18804:	2100      	movs	r1, #0
   18806:	f7ff fd5e 	bl	182c6 <atomic_test_bit>
   1880a:	b1b8      	cbz	r0, 1883c <bt_att_status+0x3e>
	if (!chan->att) {
   1880c:	f855 0c04 	ldr.w	r0, [r5, #-4]
   18810:	b1a0      	cbz	r0, 1883c <bt_att_status+0x3e>
	if (chan->req) {
   18812:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   18814:	b993      	cbnz	r3, 1883c <bt_att_status+0x3e>
	node = sys_slist_get(&chan->att->reqs);
   18816:	3004      	adds	r0, #4
   18818:	f7ff fd31 	bl	1827e <sys_slist_get>
	if (!node) {
   1881c:	4604      	mov	r4, r0
   1881e:	b168      	cbz	r0, 1883c <bt_att_status+0x3e>
	return chan_req_send(chan, req);
   18820:	4601      	mov	r1, r0
   18822:	1f28      	subs	r0, r5, #4
   18824:	f7ff fe23 	bl	1846e <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   18828:	2800      	cmp	r0, #0
   1882a:	da07      	bge.n	1883c <bt_att_status+0x3e>
	sys_slist_prepend(&chan->att->reqs, node);
   1882c:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   18830:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   18832:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   18834:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   18836:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   18838:	b902      	cbnz	r2, 1883c <bt_att_status+0x3e>
	list->tail = node;
   1883a:	609c      	str	r4, [r3, #8]
}
   1883c:	bd38      	pop	{r3, r4, r5, pc}

0001883e <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   1883e:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   18840:	6883      	ldr	r3, [r0, #8]
   18842:	699b      	ldr	r3, [r3, #24]
   18844:	b10b      	cbz	r3, 1884a <att_sent+0xc>
		chan->ops->sent(chan);
   18846:	3004      	adds	r0, #4
   18848:	4718      	bx	r3
}
   1884a:	4770      	bx	lr

0001884c <att_unknown>:
{
   1884c:	b510      	push	{r4, lr}
   1884e:	460c      	mov	r4, r1
	if (!err) {
   18850:	b90a      	cbnz	r2, 18856 <att_unknown+0xa>
		att_sent(conn, user_data);
   18852:	f7ff fff4 	bl	1883e <att_sent>
	tx_meta_data_free(user_data);
   18856:	4620      	mov	r0, r4
}
   18858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   1885c:	f7f7 b918 	b.w	fa90 <tx_meta_data_free>

00018860 <att_tx_complete>:
{
   18860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18864:	4606      	mov	r6, r0
   18866:	460d      	mov	r5, r1
	if (!err) {
   18868:	4614      	mov	r4, r2
   1886a:	b122      	cbz	r2, 18876 <att_tx_complete+0x16>
}
   1886c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   18870:	4608      	mov	r0, r1
   18872:	f7f7 b90d 	b.w	fa90 <tx_meta_data_free>
		att_sent(conn, user_data);
   18876:	f7ff ffe2 	bl	1883e <att_sent>
	bt_gatt_complete_func_t func = data->func;
   1887a:	68af      	ldr	r7, [r5, #8]
	tx_meta_data_free(data);
   1887c:	4628      	mov	r0, r5
	uint16_t attr_count = data->attr_count;
   1887e:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   18882:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   18886:	f7f7 f903 	bl	fa90 <tx_meta_data_free>
	if (!err && func) {
   1888a:	b92f      	cbnz	r7, 18898 <att_tx_complete+0x38>
}
   1888c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   18890:	4649      	mov	r1, r9
   18892:	4630      	mov	r0, r6
   18894:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   18896:	3401      	adds	r4, #1
   18898:	b2a3      	uxth	r3, r4
   1889a:	4543      	cmp	r3, r8
   1889c:	d3f8      	bcc.n	18890 <att_tx_complete+0x30>
   1889e:	e7f5      	b.n	1888c <att_tx_complete+0x2c>

000188a0 <att_req_sent>:
{
   188a0:	b510      	push	{r4, lr}
   188a2:	460c      	mov	r4, r1
	if (!err) {
   188a4:	b90a      	cbnz	r2, 188aa <att_req_sent+0xa>
		att_sent(conn, user_data);
   188a6:	f7ff ffca 	bl	1883e <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   188aa:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   188ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
   188ae:	b12b      	cbz	r3, 188bc <att_req_sent+0x1c>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   188b0:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   188b4:	2300      	movs	r3, #0
   188b6:	3058      	adds	r0, #88	; 0x58
   188b8:	f7fc fdcc 	bl	15454 <k_work_reschedule>
	tx_meta_data_free(user_data);
   188bc:	4620      	mov	r0, r4
}
   188be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   188c2:	f7f7 b8e5 	b.w	fa90 <tx_meta_data_free>

000188c6 <att_cfm_sent>:
{
   188c6:	b510      	push	{r4, lr}
   188c8:	460c      	mov	r4, r1
	if (!err) {
   188ca:	b90a      	cbnz	r2, 188d0 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   188cc:	f7ff ffb7 	bl	1883e <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   188d0:	6820      	ldr	r0, [r4, #0]
   188d2:	2101      	movs	r1, #1
   188d4:	3034      	adds	r0, #52	; 0x34
   188d6:	f7ff fead 	bl	18634 <atomic_clear_bit>
	tx_meta_data_free(data);
   188da:	4620      	mov	r0, r4
}
   188dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   188e0:	f7f7 b8d6 	b.w	fa90 <tx_meta_data_free>

000188e4 <att_rsp_sent>:
{
   188e4:	b510      	push	{r4, lr}
   188e6:	460c      	mov	r4, r1
	if (!err) {
   188e8:	b90a      	cbnz	r2, 188ee <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   188ea:	f7ff ffa8 	bl	1883e <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   188ee:	6820      	ldr	r0, [r4, #0]
   188f0:	2100      	movs	r1, #0
   188f2:	3034      	adds	r0, #52	; 0x34
   188f4:	f7ff fe9e 	bl	18634 <atomic_clear_bit>
	tx_meta_data_free(data);
   188f8:	4620      	mov	r0, r4
}
   188fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   188fe:	f7f7 b8c7 	b.w	fa90 <tx_meta_data_free>

00018902 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   18902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18906:	4688      	mov	r8, r1
   18908:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1890a:	2101      	movs	r1, #1
   1890c:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1890e:	4605      	mov	r5, r0
   18910:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   18912:	f7f7 fb83 	bl	1001c <bt_att_chan_create_pdu>
	if (!buf) {
   18916:	4604      	mov	r4, r0
   18918:	b170      	cbz	r0, 18938 <send_err_rsp.part.0+0x36>
   1891a:	2104      	movs	r1, #4
   1891c:	300c      	adds	r0, #12
   1891e:	f000 fc4a 	bl	191b6 <net_buf_simple_add>
	rsp->request = req;
   18922:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   18926:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   1892a:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   1892c:	4621      	mov	r1, r4
   1892e:	4628      	mov	r0, r5
}
   18930:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   18934:	f7ff bdcc 	b.w	184d0 <bt_att_chan_send_rsp>
}
   18938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001893c <att_write_req>:
{
   1893c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1893e:	460c      	mov	r4, r1
   18940:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   18942:	f101 000c 	add.w	r0, r1, #12
   18946:	f000 fc6e 	bl	19226 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1894a:	8a22      	ldrh	r2, [r4, #16]
   1894c:	4603      	mov	r3, r0
   1894e:	9201      	str	r2, [sp, #4]
   18950:	68e2      	ldr	r2, [r4, #12]
   18952:	2112      	movs	r1, #18
   18954:	9200      	str	r2, [sp, #0]
   18956:	4628      	mov	r0, r5
   18958:	2213      	movs	r2, #19
   1895a:	f7f7 fc83 	bl	10264 <att_write_rsp.constprop.0>
}
   1895e:	b003      	add	sp, #12
   18960:	bd30      	pop	{r4, r5, pc}

00018962 <att_write_cmd>:
{
   18962:	b537      	push	{r0, r1, r2, r4, r5, lr}
   18964:	460c      	mov	r4, r1
   18966:	4605      	mov	r5, r0
   18968:	f101 000c 	add.w	r0, r1, #12
   1896c:	f000 fc5b 	bl	19226 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   18970:	8a22      	ldrh	r2, [r4, #16]
   18972:	4603      	mov	r3, r0
   18974:	9201      	str	r2, [sp, #4]
   18976:	68e2      	ldr	r2, [r4, #12]
   18978:	4628      	mov	r0, r5
   1897a:	9200      	str	r2, [sp, #0]
   1897c:	2200      	movs	r2, #0
   1897e:	4611      	mov	r1, r2
   18980:	f7f7 fc70 	bl	10264 <att_write_rsp.constprop.0>
}
   18984:	b003      	add	sp, #12
   18986:	bd30      	pop	{r4, r5, pc}

00018988 <att_read_blob_req>:
{
   18988:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1898a:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1898c:	210c      	movs	r1, #12
   1898e:	8813      	ldrh	r3, [r2, #0]
   18990:	8852      	ldrh	r2, [r2, #2]
   18992:	9200      	str	r2, [sp, #0]
   18994:	220d      	movs	r2, #13
   18996:	f7f7 fe29 	bl	105ec <att_read_rsp>
}
   1899a:	b003      	add	sp, #12
   1899c:	f85d fb04 	ldr.w	pc, [sp], #4

000189a0 <att_read_req>:
{
   189a0:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   189a2:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   189a4:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   189a6:	210a      	movs	r1, #10
   189a8:	881b      	ldrh	r3, [r3, #0]
   189aa:	9200      	str	r2, [sp, #0]
   189ac:	220b      	movs	r2, #11
   189ae:	f7f7 fe1d 	bl	105ec <att_read_rsp>
}
   189b2:	b003      	add	sp, #12
   189b4:	f85d fb04 	ldr.w	pc, [sp], #4

000189b8 <att_mtu_req>:
{
   189b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   189ba:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   189bc:	f850 2b34 	ldr.w	r2, [r0], #52
{
   189c0:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   189c2:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   189c4:	6816      	ldr	r6, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   189c6:	f7ff fc7e 	bl	182c6 <atomic_test_bit>
   189ca:	4604      	mov	r4, r0
   189cc:	b9d8      	cbnz	r0, 18a06 <att_mtu_req+0x4e>
	mtu_client = sys_le16_to_cpu(req->mtu);
   189ce:	68db      	ldr	r3, [r3, #12]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   189d0:	881b      	ldrh	r3, [r3, #0]
   189d2:	2b16      	cmp	r3, #22
   189d4:	d919      	bls.n	18a0a <att_mtu_req+0x52>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   189d6:	4630      	mov	r0, r6
   189d8:	2202      	movs	r2, #2
   189da:	f7f7 fca7 	bl	1032c <bt_att_create_pdu>
	if (!pdu) {
   189de:	4606      	mov	r6, r0
   189e0:	b1a8      	cbz	r0, 18a0e <att_mtu_req+0x56>
	return net_buf_simple_add(&buf->b, len);
   189e2:	2102      	movs	r1, #2
   189e4:	300c      	adds	r0, #12
   189e6:	f000 fbe6 	bl	191b6 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   189ea:	2717      	movs	r7, #23
	bt_att_chan_send_rsp(chan, pdu);
   189ec:	4631      	mov	r1, r6
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   189ee:	7007      	strb	r7, [r0, #0]
   189f0:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   189f2:	4628      	mov	r0, r5
   189f4:	f7ff fd6c 	bl	184d0 <bt_att_chan_send_rsp>
	att_chan_mtu_updated(chan);
   189f8:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   189fa:	836f      	strh	r7, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   189fc:	856f      	strh	r7, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   189fe:	f7ff fcf0 	bl	183e2 <att_chan_mtu_updated>
	return 0;
   18a02:	4620      	mov	r0, r4
}
   18a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   18a06:	2006      	movs	r0, #6
   18a08:	e7fc      	b.n	18a04 <att_mtu_req+0x4c>
		return BT_ATT_ERR_INVALID_PDU;
   18a0a:	2004      	movs	r0, #4
   18a0c:	e7fa      	b.n	18a04 <att_mtu_req+0x4c>
		return BT_ATT_ERR_UNLIKELY;
   18a0e:	200e      	movs	r0, #14
   18a10:	e7f8      	b.n	18a04 <att_mtu_req+0x4c>

00018a12 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   18a12:	8a0a      	ldrh	r2, [r1, #16]
   18a14:	2300      	movs	r3, #0
   18a16:	68c9      	ldr	r1, [r1, #12]
   18a18:	f7f7 bf94 	b.w	10944 <att_handle_rsp>

00018a1c <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   18a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18a1e:	460d      	mov	r5, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   18a20:	f7f7 f97c 	bl	fd1c <att_get>
	if (!att) {
   18a24:	4604      	mov	r4, r0
   18a26:	b940      	cbnz	r0, 18a3a <bt_att_send+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   18a28:	69a8      	ldr	r0, [r5, #24]
   18a2a:	f7f7 f831 	bl	fa90 <tx_meta_data_free>
		net_buf_unref(buf);
   18a2e:	4628      	mov	r0, r5
   18a30:	f7f8 ffb4 	bl	1199c <net_buf_unref>
		return -ENOTCONN;
   18a34:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   18a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   18a3a:	f100 060c 	add.w	r6, r0, #12
   18a3e:	4629      	mov	r1, r5
   18a40:	4630      	mov	r0, r6
   18a42:	f000 fb8c 	bl	1915e <net_buf_put>
	return list->head;
   18a46:	6a65      	ldr	r5, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18a48:	b14d      	cbz	r5, 18a5e <bt_att_send+0x42>
	return node->next;
   18a4a:	f855 4988 	ldr.w	r4, [r5], #-136
   18a4e:	b104      	cbz	r4, 18a52 <bt_att_send+0x36>
   18a50:	3c88      	subs	r4, #136	; 0x88
		err = process_queue(chan, &att->tx_queue);
   18a52:	4631      	mov	r1, r6
   18a54:	4628      	mov	r0, r5
   18a56:	f7ff fd22 	bl	1849e <process_queue>
		if (!err) {
   18a5a:	4603      	mov	r3, r0
   18a5c:	b980      	cbnz	r0, 18a80 <bt_att_send+0x64>
	return 0;
   18a5e:	2000      	movs	r0, #0
   18a60:	e7ea      	b.n	18a38 <bt_att_send+0x1c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   18a62:	2103      	movs	r1, #3
   18a64:	f104 0034 	add.w	r0, r4, #52	; 0x34
   18a68:	f7ff fc2d 	bl	182c6 <atomic_test_bit>
   18a6c:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   18a6e:	f105 0034 	add.w	r0, r5, #52	; 0x34
   18a72:	f7ff fc28 	bl	182c6 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   18a76:	4287      	cmp	r7, r0
   18a78:	f06f 0301 	mvn.w	r3, #1
   18a7c:	d107      	bne.n	18a8e <bt_att_send+0x72>
   18a7e:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18a80:	2c00      	cmp	r4, #0
   18a82:	d0ec      	beq.n	18a5e <bt_att_send+0x42>
   18a84:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   18a88:	b922      	cbnz	r2, 18a94 <bt_att_send+0x78>
		if (err == -ENOENT && prev &&
   18a8a:	3302      	adds	r3, #2
   18a8c:	d0e9      	beq.n	18a62 <bt_att_send+0x46>
{
   18a8e:	4625      	mov	r5, r4
   18a90:	4614      	mov	r4, r2
   18a92:	e7de      	b.n	18a52 <bt_att_send+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18a94:	3a88      	subs	r2, #136	; 0x88
   18a96:	e7f8      	b.n	18a8a <bt_att_send+0x6e>

00018a98 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   18a98:	b510      	push	{r4, lr}
   18a9a:	460c      	mov	r4, r1
	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   18a9c:	f7f7 f93e 	bl	fd1c <att_get>
	if (!att) {
   18aa0:	b160      	cbz	r0, 18abc <bt_att_req_send+0x24>
	parent->next = child;
   18aa2:	2300      	movs	r3, #0
   18aa4:	6023      	str	r3, [r4, #0]
	return list->tail;
   18aa6:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   18aa8:	b92b      	cbnz	r3, 18ab6 <bt_att_req_send+0x1e>
	list->head = node;
   18aaa:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   18aae:	f7ff fe63 	bl	18778 <att_req_send_process>

	return 0;
   18ab2:	2000      	movs	r0, #0
}
   18ab4:	bd10      	pop	{r4, pc}
	parent->next = child;
   18ab6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18ab8:	6084      	str	r4, [r0, #8]
}
   18aba:	e7f8      	b.n	18aae <bt_att_req_send+0x16>
		return -ENOTCONN;
   18abc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   18ac0:	e7f8      	b.n	18ab4 <bt_att_req_send+0x1c>

00018ac2 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   18ac2:	2001      	movs	r0, #1
   18ac4:	4770      	bx	lr

00018ac6 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   18ac6:	b510      	push	{r4, lr}
	struct bt_att *att = att_get(conn);
   18ac8:	f7f7 f928 	bl	fd1c <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   18acc:	b150      	cbz	r0, 18ae4 <bt_att_clear_out_of_sync_sent+0x1e>
	return list->head;
   18ace:	6a44      	ldr	r4, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   18ad0:	b144      	cbz	r4, 18ae4 <bt_att_clear_out_of_sync_sent+0x1e>
   18ad2:	3c88      	subs	r4, #136	; 0x88
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
   18ad4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   18ad8:	2105      	movs	r1, #5
   18ada:	f7ff fdab 	bl	18634 <atomic_clear_bit>
	return node->next;
   18ade:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
   18ae2:	e7f5      	b.n	18ad0 <bt_att_clear_out_of_sync_sent+0xa>
	}
}
   18ae4:	bd10      	pop	{r4, pc}

00018ae6 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   18ae6:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   18ae8:	2104      	movs	r1, #4
   18aea:	f7ff fbbe 	bl	1826a <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   18aee:	b128      	cbz	r0, 18afc <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   18af0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   18af4:	2105      	movs	r1, #5
   18af6:	3030      	adds	r0, #48	; 0x30
   18af8:	f7ff bbe5 	b.w	182c6 <atomic_test_bit>
}
   18afc:	bd08      	pop	{r3, pc}

00018afe <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   18afe:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   18b00:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   18b04:	2201      	movs	r2, #1
	data->chan_opt = chan_opt;
   18b06:	7403      	strb	r3, [r0, #16]
	data->attr_count = 1;
   18b08:	8082      	strh	r2, [r0, #4]
}
   18b0a:	4770      	bx	lr

00018b0c <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   18b0c:	6010      	str	r0, [r2, #0]
}
   18b0e:	2000      	movs	r0, #0
   18b10:	4770      	bx	lr

00018b12 <gatt_ccc_changed>:
{
   18b12:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   18b14:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   18b16:	895a      	ldrh	r2, [r3, #10]
   18b18:	428a      	cmp	r2, r1
   18b1a:	d003      	beq.n	18b24 <gatt_ccc_changed+0x12>
		ccc->value = value;
   18b1c:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   18b1e:	68db      	ldr	r3, [r3, #12]
   18b20:	b103      	cbz	r3, 18b24 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   18b22:	4718      	bx	r3
}
   18b24:	4770      	bx	lr

00018b26 <gatt_indicate_rsp>:
{
   18b26:	b510      	push	{r4, lr}
   18b28:	9c02      	ldr	r4, [sp, #8]
   18b2a:	460a      	mov	r2, r1
	if (params->func) {
   18b2c:	68a3      	ldr	r3, [r4, #8]
   18b2e:	b10b      	cbz	r3, 18b34 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   18b30:	4621      	mov	r1, r4
   18b32:	4798      	blx	r3
	params->_ref--;
   18b34:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   18b36:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   18b38:	3b01      	subs	r3, #1
   18b3a:	b2db      	uxtb	r3, r3
   18b3c:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   18b3e:	b122      	cbz	r2, 18b4a <gatt_indicate_rsp+0x24>
   18b40:	b91b      	cbnz	r3, 18b4a <gatt_indicate_rsp+0x24>
		params->destroy(params);
   18b42:	4620      	mov	r0, r4
}
   18b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   18b48:	4710      	bx	r2
}
   18b4a:	bd10      	pop	{r4, pc}

00018b4c <match_uuid>:
	data->attr = attr;
   18b4c:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   18b4e:	8091      	strh	r1, [r2, #4]
}
   18b50:	2000      	movs	r0, #0
   18b52:	4770      	bx	lr

00018b54 <gen_hash_m>:
{
   18b54:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   18b56:	6807      	ldr	r7, [r0, #0]
{
   18b58:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   18b5a:	783d      	ldrb	r5, [r7, #0]
{
   18b5c:	4614      	mov	r4, r2
   18b5e:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   18b60:	b9dd      	cbnz	r5, 18b9a <gen_hash_m+0x46>
	switch (u16->val) {
   18b62:	887b      	ldrh	r3, [r7, #2]
   18b64:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   18b68:	d004      	beq.n	18b74 <gen_hash_m+0x20>
   18b6a:	d810      	bhi.n	18b8e <gen_hash_m+0x3a>
   18b6c:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   18b70:	2b03      	cmp	r3, #3
   18b72:	d812      	bhi.n	18b9a <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   18b74:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   18b78:	2202      	movs	r2, #2
   18b7a:	4620      	mov	r0, r4
   18b7c:	f10d 010a 	add.w	r1, sp, #10
   18b80:	f7fe fc89 	bl	17496 <tc_cmac_update>
   18b84:	b968      	cbnz	r0, 18ba2 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   18b86:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   18b8a:	65a2      	str	r2, [r4, #88]	; 0x58
   18b8c:	e006      	b.n	18b9c <gen_hash_m+0x48>
	switch (u16->val) {
   18b8e:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   18b92:	33ff      	adds	r3, #255	; 0xff
   18b94:	b29b      	uxth	r3, r3
   18b96:	2b04      	cmp	r3, #4
   18b98:	d91e      	bls.n	18bd8 <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   18b9a:	2501      	movs	r5, #1
}
   18b9c:	4628      	mov	r0, r5
   18b9e:	b009      	add	sp, #36	; 0x24
   18ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   18ba2:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   18ba4:	2202      	movs	r2, #2
   18ba6:	4620      	mov	r0, r4
   18ba8:	f10d 010a 	add.w	r1, sp, #10
		value = sys_cpu_to_le16(u16->val);
   18bac:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   18bb0:	f7fe fc71 	bl	17496 <tc_cmac_update>
   18bb4:	2800      	cmp	r0, #0
   18bb6:	d0e6      	beq.n	18b86 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   18bb8:	2000      	movs	r0, #0
   18bba:	9000      	str	r0, [sp, #0]
   18bbc:	aa03      	add	r2, sp, #12
   18bbe:	2313      	movs	r3, #19
   18bc0:	4631      	mov	r1, r6
   18bc2:	6877      	ldr	r7, [r6, #4]
   18bc4:	47b8      	blx	r7
		if (len < 0) {
   18bc6:	1e02      	subs	r2, r0, #0
   18bc8:	dbdf      	blt.n	18b8a <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   18bca:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   18bcc:	4620      	mov	r0, r4
   18bce:	f7fe fc62 	bl	17496 <tc_cmac_update>
   18bd2:	2800      	cmp	r0, #0
   18bd4:	d1e1      	bne.n	18b9a <gen_hash_m+0x46>
   18bd6:	e7d6      	b.n	18b86 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   18bd8:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   18bdc:	2202      	movs	r2, #2
   18bde:	4620      	mov	r0, r4
   18be0:	f10d 010a 	add.w	r1, sp, #10
   18be4:	f7fe fc57 	bl	17496 <tc_cmac_update>
   18be8:	2800      	cmp	r0, #0
   18bea:	d0cc      	beq.n	18b86 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   18bec:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   18bee:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   18bf0:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   18bf4:	f10d 010a 	add.w	r1, sp, #10
   18bf8:	e7e8      	b.n	18bcc <gen_hash_m+0x78>

00018bfa <bt_addr_le_eq>:
   18bfa:	2207      	movs	r2, #7
{
   18bfc:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   18bfe:	f7fe ff98 	bl	17b32 <memcmp>
}
   18c02:	fab0 f080 	clz	r0, r0
   18c06:	0940      	lsrs	r0, r0, #5
   18c08:	bd08      	pop	{r3, pc}

00018c0a <atomic_or>:
{
   18c0a:	4603      	mov	r3, r0
   18c0c:	b510      	push	{r4, lr}
}
   18c0e:	e8d3 0fef 	ldaex	r0, [r3]
   18c12:	ea40 0201 	orr.w	r2, r0, r1
   18c16:	e8c3 2fe4 	stlex	r4, r2, [r3]
   18c1a:	2c00      	cmp	r4, #0
   18c1c:	d1f7      	bne.n	18c0e <atomic_or+0x4>
   18c1e:	bd10      	pop	{r4, pc}

00018c20 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   18c20:	2207      	movs	r2, #7
   18c22:	f7fe bf96 	b.w	17b52 <memcpy>

00018c26 <z_log_msg_static_create.constprop.0>:
   18c26:	2300      	movs	r3, #0
   18c28:	f7f1 bd7c 	b.w	a724 <z_impl_z_log_msg_static_create>

00018c2c <sc_clear>:
{
   18c2c:	b570      	push	{r4, r5, r6, lr}
   18c2e:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18c30:	f100 0688 	add.w	r6, r0, #136	; 0x88
   18c34:	4631      	mov	r1, r6
   18c36:	7a00      	ldrb	r0, [r0, #8]
   18c38:	f7ff f8d2 	bl	17de0 <bt_addr_le_is_bonded>
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   18c3c:	4631      	mov	r1, r6
   18c3e:	7a20      	ldrb	r0, [r4, #8]
   18c40:	f7f7 ff5e 	bl	10b00 <find_sc_cfg>
	if (!cfg) {
   18c44:	b128      	cbz	r0, 18c52 <sc_clear+0x26>
}
   18c46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   18c4a:	220c      	movs	r2, #12
   18c4c:	2100      	movs	r1, #0
   18c4e:	f7fe bf8b 	b.w	17b68 <memset>
}
   18c52:	bd70      	pop	{r4, r5, r6, pc}

00018c54 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   18c54:	2a02      	cmp	r2, #2
{
   18c56:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   18c58:	d108      	bne.n	18c6c <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   18c5a:	2300      	movs	r3, #0
   18c5c:	f100 0188 	add.w	r1, r0, #136	; 0x88
   18c60:	461a      	mov	r2, r3
   18c62:	7a00      	ldrb	r0, [r0, #8]
   18c64:	f7f7 ffec 	bl	10c40 <sc_save>
}
   18c68:	2002      	movs	r0, #2
   18c6a:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   18c6c:	f7ff ffde 	bl	18c2c <sc_clear>
   18c70:	e7fa      	b.n	18c68 <sc_ccc_cfg_write+0x14>

00018c72 <read_appearance>:
{
   18c72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18c74:	4615      	mov	r5, r2
   18c76:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   18c7a:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   18c7c:	f7ff f8ae 	bl	17ddc <bt_get_appearance>
	if (offset > value_len) {
   18c80:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   18c82:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   18c86:	d80e      	bhi.n	18ca6 <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   18c88:	f1c6 0402 	rsb	r4, r6, #2
   18c8c:	42bc      	cmp	r4, r7
   18c8e:	bfa8      	it	ge
   18c90:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   18c92:	f10d 0306 	add.w	r3, sp, #6
   18c96:	4622      	mov	r2, r4
   18c98:	4628      	mov	r0, r5
   18c9a:	1999      	adds	r1, r3, r6
   18c9c:	f7fe ff59 	bl	17b52 <memcpy>
}
   18ca0:	4620      	mov	r0, r4
   18ca2:	b003      	add	sp, #12
   18ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18ca6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   18caa:	e7f9      	b.n	18ca0 <read_appearance+0x2e>

00018cac <read_name>:
{
   18cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18cb0:	4698      	mov	r8, r3
   18cb2:	4615      	mov	r5, r2
   18cb4:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	const char *name = bt_get_name();
   18cb8:	f7f5 f8ce 	bl	de58 <bt_get_name>
   18cbc:	4607      	mov	r7, r0
				 strlen(name));
   18cbe:	f7fe ff09 	bl	17ad4 <strlen>
	if (offset > value_len) {
   18cc2:	b283      	uxth	r3, r0
   18cc4:	42b3      	cmp	r3, r6
   18cc6:	d30c      	bcc.n	18ce2 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   18cc8:	1b9c      	subs	r4, r3, r6
   18cca:	4544      	cmp	r4, r8
   18ccc:	bfa8      	it	ge
   18cce:	4644      	movge	r4, r8
   18cd0:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   18cd2:	4622      	mov	r2, r4
   18cd4:	4628      	mov	r0, r5
   18cd6:	19b9      	adds	r1, r7, r6
   18cd8:	f7fe ff3b 	bl	17b52 <memcpy>
}
   18cdc:	4620      	mov	r0, r4
   18cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18ce2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   18ce6:	e7f9      	b.n	18cdc <read_name+0x30>

00018ce8 <cf_read>:
{
   18ce8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18cea:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   18cec:	2300      	movs	r3, #0
{
   18cee:	4615      	mov	r5, r2
   18cf0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   18cf4:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg = find_cf_cfg(conn);
   18cf8:	f7f7 feea 	bl	10ad0 <find_cf_cfg>
	if (cfg) {
   18cfc:	b128      	cbz	r0, 18d0a <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   18cfe:	f100 0108 	add.w	r1, r0, #8
   18d02:	2201      	movs	r2, #1
   18d04:	a801      	add	r0, sp, #4
   18d06:	f7fe ff24 	bl	17b52 <memcpy>
	if (offset > value_len) {
   18d0a:	2e01      	cmp	r6, #1
   18d0c:	d80d      	bhi.n	18d2a <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   18d0e:	f1c6 0401 	rsb	r4, r6, #1
   18d12:	42bc      	cmp	r4, r7
   18d14:	bfa8      	it	ge
   18d16:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   18d18:	ab01      	add	r3, sp, #4
   18d1a:	4622      	mov	r2, r4
   18d1c:	4628      	mov	r0, r5
   18d1e:	1999      	adds	r1, r3, r6
   18d20:	f7fe ff17 	bl	17b52 <memcpy>
}
   18d24:	4620      	mov	r0, r4
   18d26:	b003      	add	sp, #12
   18d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18d2a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   18d2e:	e7f9      	b.n	18d24 <cf_read+0x3c>

00018d30 <bt_gatt_attr_read_service>:
{
   18d30:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   18d32:	68c9      	ldr	r1, [r1, #12]
{
   18d34:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   18d36:	780a      	ldrb	r2, [r1, #0]
{
   18d38:	461c      	mov	r4, r3
   18d3a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   18d3e:	b992      	cbnz	r2, 18d66 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   18d40:	884a      	ldrh	r2, [r1, #2]
	if (offset > value_len) {
   18d42:	2b02      	cmp	r3, #2
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   18d44:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   18d48:	d818      	bhi.n	18d7c <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   18d4a:	f1c3 0202 	rsb	r2, r3, #2
   18d4e:	4294      	cmp	r4, r2
   18d50:	bfa8      	it	ge
   18d52:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   18d54:	4622      	mov	r2, r4
   18d56:	f10d 0106 	add.w	r1, sp, #6
   18d5a:	4419      	add	r1, r3
   18d5c:	f7fe fef9 	bl	17b52 <memcpy>
}
   18d60:	4620      	mov	r0, r4
   18d62:	b002      	add	sp, #8
   18d64:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   18d66:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   18d68:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   18d6c:	d806      	bhi.n	18d7c <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   18d6e:	f1c3 0210 	rsb	r2, r3, #16
   18d72:	4294      	cmp	r4, r2
   18d74:	bfa8      	it	ge
   18d76:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   18d78:	4622      	mov	r2, r4
   18d7a:	e7ee      	b.n	18d5a <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18d7c:	f06f 0406 	mvn.w	r4, #6
   18d80:	e7ee      	b.n	18d60 <bt_gatt_attr_read_service+0x30>

00018d82 <bt_gatt_attr_read_ccc>:
{
   18d82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   18d84:	68c9      	ldr	r1, [r1, #12]
{
   18d86:	4615      	mov	r5, r2
   18d88:	461f      	mov	r7, r3
   18d8a:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	cfg = find_ccc_cfg(conn, ccc);
   18d8e:	f7f7 fec7 	bl	10b20 <find_ccc_cfg>
	if (cfg) {
   18d92:	b100      	cbz	r0, 18d96 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   18d94:	8900      	ldrh	r0, [r0, #8]
	if (offset > value_len) {
   18d96:	2e02      	cmp	r6, #2
   18d98:	f8ad 0006 	strh.w	r0, [sp, #6]
   18d9c:	d80e      	bhi.n	18dbc <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   18d9e:	f1c6 0402 	rsb	r4, r6, #2
   18da2:	42bc      	cmp	r4, r7
   18da4:	bfa8      	it	ge
   18da6:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   18da8:	f10d 0306 	add.w	r3, sp, #6
   18dac:	4622      	mov	r2, r4
   18dae:	4628      	mov	r0, r5
   18db0:	1999      	adds	r1, r3, r6
   18db2:	f7fe fece 	bl	17b52 <memcpy>
}
   18db6:	4620      	mov	r0, r4
   18db8:	b003      	add	sp, #12
   18dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18dbc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   18dc0:	e7f9      	b.n	18db6 <bt_gatt_attr_read_ccc+0x34>

00018dc2 <set_change_aware_no_store.constprop.0.isra.0>:
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   18dc2:	2101      	movs	r1, #1
   18dc4:	300c      	adds	r0, #12
   18dc6:	f7ff bf20 	b.w	18c0a <atomic_or>

00018dca <sc_restore_rsp>:
{
   18dca:	b538      	push	{r3, r4, r5, lr}
   18dcc:	4604      	mov	r4, r0
   18dce:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   18dd0:	f7ff fe77 	bl	18ac2 <bt_att_fixed_chan_only>
   18dd4:	b140      	cbz	r0, 18de8 <sc_restore_rsp+0x1e>
		cfg = find_cf_cfg(conn);
   18dd6:	4620      	mov	r0, r4
   18dd8:	f7f7 fe7a 	bl	10ad0 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   18ddc:	b120      	cbz	r0, 18de8 <sc_restore_rsp+0x1e>
   18dde:	7a03      	ldrb	r3, [r0, #8]
   18de0:	07db      	lsls	r3, r3, #31
   18de2:	d501      	bpl.n	18de8 <sc_restore_rsp+0x1e>
	bool changed = set_change_aware_no_store(cfg, aware);
   18de4:	f7ff ffed 	bl	18dc2 <set_change_aware_no_store.constprop.0.isra.0>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   18de8:	b965      	cbnz	r5, 18e04 <sc_restore_rsp+0x3a>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   18dea:	7a20      	ldrb	r0, [r4, #8]
   18dec:	f104 0188 	add.w	r1, r4, #136	; 0x88
   18df0:	f7f7 fe86 	bl	10b00 <find_sc_cfg>
		if (sc_cfg) {
   18df4:	b130      	cbz	r0, 18e04 <sc_restore_rsp+0x3a>
	memset(&cfg->data, 0, sizeof(cfg->data));
   18df6:	4629      	mov	r1, r5
}
   18df8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   18dfc:	2204      	movs	r2, #4
   18dfe:	3008      	adds	r0, #8
   18e00:	f7fe beb2 	b.w	17b68 <memset>
}
   18e04:	bd38      	pop	{r3, r4, r5, pc}

00018e06 <bt_gatt_attr_read>:
{
   18e06:	b510      	push	{r4, lr}
   18e08:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   18e0c:	f8bd 4010 	ldrh.w	r4, [sp, #16]
   18e10:	4610      	mov	r0, r2
	if (offset > value_len) {
   18e12:	42a1      	cmp	r1, r4
   18e14:	d80b      	bhi.n	18e2e <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   18e16:	1a64      	subs	r4, r4, r1
   18e18:	429c      	cmp	r4, r3
   18e1a:	bfa8      	it	ge
   18e1c:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   18e1e:	9b03      	ldr	r3, [sp, #12]
   18e20:	b2a4      	uxth	r4, r4
   18e22:	4622      	mov	r2, r4
   18e24:	4419      	add	r1, r3
   18e26:	f7fe fe94 	bl	17b52 <memcpy>
}
   18e2a:	4620      	mov	r0, r4
   18e2c:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18e2e:	f06f 0406 	mvn.w	r4, #6
   18e32:	e7fa      	b.n	18e2a <bt_gatt_attr_read+0x24>

00018e34 <bt_gatt_attr_value_handle>:
{
   18e34:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   18e36:	4604      	mov	r4, r0
   18e38:	b910      	cbnz	r0, 18e40 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   18e3a:	2000      	movs	r0, #0
}
   18e3c:	b002      	add	sp, #8
   18e3e:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   18e40:	2300      	movs	r3, #0
   18e42:	f88d 3004 	strb.w	r3, [sp, #4]
   18e46:	f642 0303 	movw	r3, #10243	; 0x2803
   18e4a:	6800      	ldr	r0, [r0, #0]
   18e4c:	a901      	add	r1, sp, #4
   18e4e:	f8ad 3006 	strh.w	r3, [sp, #6]
   18e52:	f7fe fe95 	bl	17b80 <bt_uuid_cmp>
   18e56:	2800      	cmp	r0, #0
   18e58:	d1ef      	bne.n	18e3a <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   18e5a:	68e3      	ldr	r3, [r4, #12]
   18e5c:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   18e5e:	2800      	cmp	r0, #0
   18e60:	d1ec      	bne.n	18e3c <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   18e62:	4620      	mov	r0, r4
   18e64:	f7f8 f848 	bl	10ef8 <bt_gatt_attr_get_handle>
   18e68:	3001      	adds	r0, #1
   18e6a:	b280      	uxth	r0, r0
	return handle;
   18e6c:	e7e6      	b.n	18e3c <bt_gatt_attr_value_handle+0x8>

00018e6e <bt_gatt_attr_read_chrc>:
{
   18e6e:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   18e70:	68cc      	ldr	r4, [r1, #12]
{
   18e72:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   18e74:	79a3      	ldrb	r3, [r4, #6]
{
   18e76:	b087      	sub	sp, #28
   18e78:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   18e7a:	f88d 3004 	strb.w	r3, [sp, #4]
{
   18e7e:	4615      	mov	r5, r2
   18e80:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   18e84:	f7ff ffd6 	bl	18e34 <bt_gatt_attr_value_handle>
   18e88:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   18e8c:	6821      	ldr	r1, [r4, #0]
   18e8e:	780b      	ldrb	r3, [r1, #0]
   18e90:	b99b      	cbnz	r3, 18eba <bt_gatt_attr_read_chrc+0x4c>
		value_len += 2U;
   18e92:	2405      	movs	r4, #5
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   18e94:	884b      	ldrh	r3, [r1, #2]
   18e96:	f8ad 3007 	strh.w	r3, [sp, #7]
	if (offset > value_len) {
   18e9a:	42b4      	cmp	r4, r6
   18e9c:	d315      	bcc.n	18eca <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   18e9e:	1ba4      	subs	r4, r4, r6
   18ea0:	42bc      	cmp	r4, r7
   18ea2:	bfa8      	it	ge
   18ea4:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   18ea6:	ab01      	add	r3, sp, #4
   18ea8:	b2a4      	uxth	r4, r4
   18eaa:	4622      	mov	r2, r4
   18eac:	4628      	mov	r0, r5
   18eae:	1999      	adds	r1, r3, r6
   18eb0:	f7fe fe4f 	bl	17b52 <memcpy>
}
   18eb4:	4620      	mov	r0, r4
   18eb6:	b007      	add	sp, #28
   18eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   18eba:	2210      	movs	r2, #16
   18ebc:	3101      	adds	r1, #1
   18ebe:	f10d 0007 	add.w	r0, sp, #7
   18ec2:	f7fe fe46 	bl	17b52 <memcpy>
		value_len += 16U;
   18ec6:	2413      	movs	r4, #19
   18ec8:	e7e7      	b.n	18e9a <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18eca:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   18ece:	e7f1      	b.n	18eb4 <bt_gatt_attr_read_chrc+0x46>

00018ed0 <bt_gatt_foreach_attr>:
{
   18ed0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   18ed2:	e9cd 2301 	strd	r2, r3, [sp, #4]
   18ed6:	2300      	movs	r3, #0
   18ed8:	461a      	mov	r2, r3
   18eda:	9300      	str	r3, [sp, #0]
   18edc:	f7f8 f83c 	bl	10f58 <bt_gatt_foreach_attr_type>
}
   18ee0:	b005      	add	sp, #20
   18ee2:	f85d fb04 	ldr.w	pc, [sp], #4

00018ee6 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   18ee6:	f012 0f01 	tst.w	r2, #1
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   18eea:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   18eec:	d004      	beq.n	18ef8 <bt_gatt_check_perm+0x12>
   18eee:	f013 0f95 	tst.w	r3, #149	; 0x95
   18ef2:	d010      	beq.n	18f16 <bt_gatt_check_perm+0x30>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   18ef4:	6848      	ldr	r0, [r1, #4]
   18ef6:	b170      	cbz	r0, 18f16 <bt_gatt_check_perm+0x30>
	if ((mask & BT_GATT_PERM_WRITE) &&
   18ef8:	f012 0f02 	tst.w	r2, #2
   18efc:	d004      	beq.n	18f08 <bt_gatt_check_perm+0x22>
   18efe:	f413 7f95 	tst.w	r3, #298	; 0x12a
   18f02:	d00a      	beq.n	18f1a <bt_gatt_check_perm+0x34>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   18f04:	6889      	ldr	r1, [r1, #8]
   18f06:	b141      	cbz	r1, 18f1a <bt_gatt_check_perm+0x34>
	mask &= attr->perm;
   18f08:	401a      	ands	r2, r3
	return 0;
   18f0a:	f012 0f3c 	tst.w	r2, #60	; 0x3c
   18f0e:	bf14      	ite	ne
   18f10:	2005      	movne	r0, #5
   18f12:	2000      	moveq	r0, #0
   18f14:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   18f16:	2002      	movs	r0, #2
   18f18:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   18f1a:	2003      	movs	r0, #3
}
   18f1c:	4770      	bx	lr

00018f1e <bt_gatt_is_subscribed>:
{
   18f1e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   18f22:	7a83      	ldrb	r3, [r0, #10]
{
   18f24:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   18f26:	2b07      	cmp	r3, #7
{
   18f28:	460c      	mov	r4, r1
   18f2a:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   18f2c:	d110      	bne.n	18f50 <bt_gatt_is_subscribed+0x32>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   18f2e:	2300      	movs	r3, #0
   18f30:	f88d 300c 	strb.w	r3, [sp, #12]
   18f34:	f642 0303 	movw	r3, #10243	; 0x2803
   18f38:	6820      	ldr	r0, [r4, #0]
   18f3a:	a903      	add	r1, sp, #12
   18f3c:	f8ad 300e 	strh.w	r3, [sp, #14]
   18f40:	f7fe fe1e 	bl	17b80 <bt_uuid_cmp>
   18f44:	b960      	cbnz	r0, 18f60 <bt_gatt_is_subscribed+0x42>
		if (!(chrc->properties &
   18f46:	68e3      	ldr	r3, [r4, #12]
   18f48:	799b      	ldrb	r3, [r3, #6]
   18f4a:	f013 0f30 	tst.w	r3, #48	; 0x30
   18f4e:	d103      	bne.n	18f58 <bt_gatt_is_subscribed+0x3a>
		return false;
   18f50:	2000      	movs	r0, #0
}
   18f52:	b004      	add	sp, #16
   18f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   18f58:	4620      	mov	r0, r4
   18f5a:	f7f8 f8df 	bl	1111c <bt_gatt_attr_next>
   18f5e:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   18f60:	2300      	movs	r3, #0
   18f62:	6820      	ldr	r0, [r4, #0]
   18f64:	f88d 300c 	strb.w	r3, [sp, #12]
   18f68:	f642 1302 	movw	r3, #10498	; 0x2902
   18f6c:	a903      	add	r1, sp, #12
   18f6e:	f8ad 300e 	strh.w	r3, [sp, #14]
   18f72:	f7fe fe05 	bl	17b80 <bt_uuid_cmp>
   18f76:	b118      	cbz	r0, 18f80 <bt_gatt_is_subscribed+0x62>
		attr = bt_gatt_attr_next(attr);
   18f78:	4620      	mov	r0, r4
   18f7a:	f7f8 f8cf 	bl	1111c <bt_gatt_attr_next>
   18f7e:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   18f80:	2600      	movs	r6, #0
   18f82:	f642 1802 	movw	r8, #10498	; 0x2902
   18f86:	6820      	ldr	r0, [r4, #0]
   18f88:	4669      	mov	r1, sp
   18f8a:	f88d 6000 	strb.w	r6, [sp]
   18f8e:	f8ad 8002 	strh.w	r8, [sp, #2]
   18f92:	f7fe fdf5 	bl	17b80 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18f96:	b9d8      	cbnz	r0, 18fd0 <bt_gatt_is_subscribed+0xb2>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   18f98:	2300      	movs	r3, #0
   18f9a:	6820      	ldr	r0, [r4, #0]
   18f9c:	f88d 300c 	strb.w	r3, [sp, #12]
   18fa0:	f642 1302 	movw	r3, #10498	; 0x2902
   18fa4:	a903      	add	r1, sp, #12
   18fa6:	f8ad 300e 	strh.w	r3, [sp, #14]
   18faa:	f7fe fde9 	bl	17b80 <bt_uuid_cmp>
   18fae:	2800      	cmp	r0, #0
   18fb0:	d1ce      	bne.n	18f50 <bt_gatt_is_subscribed+0x32>
	ccc = attr->user_data;
   18fb2:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   18fb4:	4628      	mov	r0, r5
   18fb6:	4622      	mov	r2, r4
   18fb8:	f812 1b01 	ldrb.w	r1, [r2], #1
   18fbc:	f7ff f8a4 	bl	18108 <bt_conn_is_peer_addr_le>
   18fc0:	2800      	cmp	r0, #0
   18fc2:	d0c5      	beq.n	18f50 <bt_gatt_is_subscribed+0x32>
   18fc4:	8923      	ldrh	r3, [r4, #8]
   18fc6:	421f      	tst	r7, r3
   18fc8:	bf14      	ite	ne
   18fca:	2001      	movne	r0, #1
   18fcc:	2000      	moveq	r0, #0
   18fce:	e7c0      	b.n	18f52 <bt_gatt_is_subscribed+0x34>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   18fd0:	f642 0303 	movw	r3, #10243	; 0x2803
   18fd4:	6820      	ldr	r0, [r4, #0]
   18fd6:	a901      	add	r1, sp, #4
   18fd8:	f88d 6004 	strb.w	r6, [sp, #4]
   18fdc:	f8ad 3006 	strh.w	r3, [sp, #6]
   18fe0:	f7fe fdce 	bl	17b80 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   18fe4:	2800      	cmp	r0, #0
   18fe6:	d0d7      	beq.n	18f98 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18fe8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18fec:	6820      	ldr	r0, [r4, #0]
   18fee:	a902      	add	r1, sp, #8
   18ff0:	f88d 6008 	strb.w	r6, [sp, #8]
   18ff4:	f8ad 300a 	strh.w	r3, [sp, #10]
   18ff8:	f7fe fdc2 	bl	17b80 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   18ffc:	2800      	cmp	r0, #0
   18ffe:	d0cb      	beq.n	18f98 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   19000:	f642 0301 	movw	r3, #10241	; 0x2801
   19004:	6820      	ldr	r0, [r4, #0]
   19006:	a903      	add	r1, sp, #12
   19008:	f88d 600c 	strb.w	r6, [sp, #12]
   1900c:	f8ad 300e 	strh.w	r3, [sp, #14]
   19010:	f7fe fdb6 	bl	17b80 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   19014:	2800      	cmp	r0, #0
   19016:	d0bf      	beq.n	18f98 <bt_gatt_is_subscribed+0x7a>
		attr = bt_gatt_attr_next(attr);
   19018:	4620      	mov	r0, r4
   1901a:	f7f8 f87f 	bl	1111c <bt_gatt_attr_next>
		if (!attr) {
   1901e:	4604      	mov	r4, r0
   19020:	2800      	cmp	r0, #0
   19022:	d1b0      	bne.n	18f86 <bt_gatt_is_subscribed+0x68>
   19024:	e794      	b.n	18f50 <bt_gatt_is_subscribed+0x32>

00019026 <bt_gatt_change_aware>:
{
   19026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1902a:	4605      	mov	r5, r0
   1902c:	4688      	mov	r8, r1
	cfg = find_cf_cfg(conn);
   1902e:	f7f7 fd4f 	bl	10ad0 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   19032:	4604      	mov	r4, r0
   19034:	b1e0      	cbz	r0, 19070 <bt_gatt_change_aware+0x4a>
   19036:	7a03      	ldrb	r3, [r0, #8]
   19038:	07da      	lsls	r2, r3, #31
   1903a:	d519      	bpl.n	19070 <bt_gatt_change_aware+0x4a>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1903c:	f100 060c 	add.w	r6, r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19040:	e8d6 7faf 	lda	r7, [r6]
   19044:	f017 0701 	ands.w	r7, r7, #1
   19048:	d112      	bne.n	19070 <bt_gatt_change_aware+0x4a>
	if (!req) {
   1904a:	f1b8 0f00 	cmp.w	r8, #0
   1904e:	d010      	beq.n	19072 <bt_gatt_change_aware+0x4c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19050:	e8d6 3fef 	ldaex	r3, [r6]
   19054:	f023 0202 	bic.w	r2, r3, #2
   19058:	e8c6 2fe1 	stlex	r1, r2, [r6]
   1905c:	2900      	cmp	r1, #0
   1905e:	d1f7      	bne.n	19050 <bt_gatt_change_aware+0x2a>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   19060:	079b      	lsls	r3, r3, #30
		bt_att_clear_out_of_sync_sent(conn);
   19062:	4628      	mov	r0, r5
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   19064:	d508      	bpl.n	19078 <bt_gatt_change_aware+0x52>
		bt_att_clear_out_of_sync_sent(conn);
   19066:	f7ff fd2e 	bl	18ac6 <bt_att_clear_out_of_sync_sent>
	bool changed = set_change_aware_no_store(cfg, aware);
   1906a:	4620      	mov	r0, r4
   1906c:	f7ff fea9 	bl	18dc2 <set_change_aware_no_store.constprop.0.isra.0>
		return true;
   19070:	2701      	movs	r7, #1
}
   19072:	4638      	mov	r0, r7
   19074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   19078:	f7ff fd23 	bl	18ac2 <bt_att_fixed_chan_only>
   1907c:	2800      	cmp	r0, #0
   1907e:	d0f8      	beq.n	19072 <bt_gatt_change_aware+0x4c>
   19080:	4628      	mov	r0, r5
   19082:	f7ff fd30 	bl	18ae6 <bt_att_out_of_sync_sent_on_fixed>
   19086:	2800      	cmp	r0, #0
   19088:	d0f3      	beq.n	19072 <bt_gatt_change_aware+0x4c>
   1908a:	e8d6 3fef 	ldaex	r3, [r6]
   1908e:	f023 0302 	bic.w	r3, r3, #2
   19092:	e8c6 3fe2 	stlex	r2, r3, [r6]
   19096:	2a00      	cmp	r2, #0
   19098:	d1f7      	bne.n	1908a <bt_gatt_change_aware+0x64>
		bt_att_clear_out_of_sync_sent(conn);
   1909a:	4628      	mov	r0, r5
   1909c:	e7e3      	b.n	19066 <bt_gatt_change_aware+0x40>

0001909e <bt_smp_recv>:
{
   1909e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   190a0:	2100      	movs	r1, #0
   190a2:	f04f 32ff 	mov.w	r2, #4294967295
   190a6:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   190aa:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   190ac:	4608      	mov	r0, r1
   190ae:	f7ff f8c0 	bl	18232 <bt_l2cap_create_pdu_timeout>
   190b2:	f100 060c 	add.w	r6, r0, #12
   190b6:	4604      	mov	r4, r0
   190b8:	2101      	movs	r1, #1
   190ba:	4630      	mov	r0, r6
   190bc:	f000 f87b 	bl	191b6 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   190c0:	2505      	movs	r5, #5
   190c2:	2101      	movs	r1, #1
   190c4:	7005      	strb	r5, [r0, #0]
   190c6:	4630      	mov	r0, r6
   190c8:	f000 f875 	bl	191b6 <net_buf_simple_add>
   190cc:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   190ce:	7005      	strb	r5, [r0, #0]
   190d0:	4622      	mov	r2, r4
   190d2:	2106      	movs	r1, #6
   190d4:	4638      	mov	r0, r7
   190d6:	9300      	str	r3, [sp, #0]
   190d8:	f7ff f8ae 	bl	18238 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   190dc:	b110      	cbz	r0, 190e4 <bt_smp_recv+0x46>
		net_buf_unref(buf);
   190de:	4620      	mov	r0, r4
   190e0:	f7f8 fc5c 	bl	1199c <net_buf_unref>
}
   190e4:	2000      	movs	r0, #0
   190e6:	b003      	add	sp, #12
   190e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000190ea <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   190ea:	f06f 0085 	mvn.w	r0, #133	; 0x85
   190ee:	4770      	bx	lr

000190f0 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   190f0:	2000      	movs	r0, #0
   190f2:	4770      	bx	lr

000190f4 <fixed_data_unref>:
}
   190f4:	4770      	bx	lr

000190f6 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   190f6:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   190f8:	6849      	ldr	r1, [r1, #4]
   190fa:	6809      	ldr	r1, [r1, #0]
   190fc:	f7f8 bbbc 	b.w	11878 <net_buf_alloc_len>

00019100 <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   19100:	f7fb bf1e 	b.w	14f40 <z_impl_k_queue_get>

00019104 <net_buf_slist_put>:
	__asm__ volatile(
   19104:	f04f 0320 	mov.w	r3, #32
   19108:	f3ef 8211 	mrs	r2, BASEPRI
   1910c:	f383 8812 	msr	BASEPRI_MAX, r3
   19110:	f3bf 8f6f 	isb	sy
	parent->next = child;
   19114:	2300      	movs	r3, #0
   19116:	600b      	str	r3, [r1, #0]
	return list->tail;
   19118:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   1911a:	b933      	cbnz	r3, 1912a <net_buf_slist_put+0x26>
	list->head = node;
   1911c:	e9c0 1100 	strd	r1, r1, [r0]
	__asm__ volatile(
   19120:	f382 8811 	msr	BASEPRI, r2
   19124:	f3bf 8f6f 	isb	sy
}
   19128:	4770      	bx	lr
	parent->next = child;
   1912a:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1912c:	6041      	str	r1, [r0, #4]
}
   1912e:	e7f7      	b.n	19120 <net_buf_slist_put+0x1c>

00019130 <net_buf_slist_get>:
{
   19130:	4603      	mov	r3, r0
   19132:	b510      	push	{r4, lr}
	__asm__ volatile(
   19134:	f04f 0220 	mov.w	r2, #32
   19138:	f3ef 8111 	mrs	r1, BASEPRI
   1913c:	f382 8812 	msr	BASEPRI_MAX, r2
   19140:	f3bf 8f6f 	isb	sy
	return list->head;
   19144:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   19146:	b128      	cbz	r0, 19154 <net_buf_slist_get+0x24>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19148:	685c      	ldr	r4, [r3, #4]
	return node->next;
   1914a:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1914c:	42a0      	cmp	r0, r4
	list->head = node;
   1914e:	601a      	str	r2, [r3, #0]
	list->tail = node;
   19150:	bf08      	it	eq
   19152:	605a      	streq	r2, [r3, #4]
	__asm__ volatile(
   19154:	f381 8811 	msr	BASEPRI, r1
   19158:	f3bf 8f6f 	isb	sy
}
   1915c:	bd10      	pop	{r4, pc}

0001915e <net_buf_put>:
	k_fifo_put(fifo, buf);
   1915e:	f001 b9c1 	b.w	1a4e4 <k_queue_append>

00019162 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   19162:	7a02      	ldrb	r2, [r0, #8]
   19164:	3201      	adds	r2, #1
   19166:	7202      	strb	r2, [r0, #8]
	return buf;
}
   19168:	4770      	bx	lr

0001916a <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1916a:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   1916c:	4618      	mov	r0, r3
   1916e:	685b      	ldr	r3, [r3, #4]
   19170:	2b00      	cmp	r3, #0
   19172:	d1fb      	bne.n	1916c <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   19174:	4770      	bx	lr

00019176 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   19176:	6842      	ldr	r2, [r0, #4]
{
   19178:	b510      	push	{r4, lr}
	if (parent->frags) {
   1917a:	b12a      	cbz	r2, 19188 <net_buf_frag_insert+0x12>
   1917c:	460b      	mov	r3, r1
	while (buf->frags) {
   1917e:	461c      	mov	r4, r3
   19180:	685b      	ldr	r3, [r3, #4]
   19182:	2b00      	cmp	r3, #0
   19184:	d1fb      	bne.n	1917e <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   19186:	6062      	str	r2, [r4, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   19188:	6041      	str	r1, [r0, #4]
}
   1918a:	bd10      	pop	{r4, pc}

0001918c <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1918c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   1918e:	4604      	mov	r4, r0
   19190:	b920      	cbnz	r0, 1919c <net_buf_frag_add+0x10>
		return net_buf_ref(frag);
   19192:	4608      	mov	r0, r1
	buf->ref++;
   19194:	7a0b      	ldrb	r3, [r1, #8]
   19196:	3301      	adds	r3, #1
   19198:	720b      	strb	r3, [r1, #8]
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1919a:	bd10      	pop	{r4, pc}
   1919c:	4603      	mov	r3, r0
	while (buf->frags) {
   1919e:	4618      	mov	r0, r3
   191a0:	685b      	ldr	r3, [r3, #4]
   191a2:	2b00      	cmp	r3, #0
   191a4:	d1fb      	bne.n	1919e <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   191a6:	f7ff ffe6 	bl	19176 <net_buf_frag_insert>
   191aa:	4620      	mov	r0, r4
   191ac:	e7f5      	b.n	1919a <net_buf_frag_add+0xe>

000191ae <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_SIMPLE_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   191ae:	6883      	ldr	r3, [r0, #8]
   191b0:	440b      	add	r3, r1
   191b2:	6003      	str	r3, [r0, #0]
}
   191b4:	4770      	bx	lr

000191b6 <net_buf_simple_add>:
	return buf->data + buf->len;
   191b6:	8883      	ldrh	r3, [r0, #4]
   191b8:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   191ba:	4419      	add	r1, r3
   191bc:	8081      	strh	r1, [r0, #4]
	return tail;
}
   191be:	18d0      	adds	r0, r2, r3
   191c0:	4770      	bx	lr

000191c2 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   191c2:	b430      	push	{r4, r5}
   191c4:	8884      	ldrh	r4, [r0, #4]
   191c6:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   191c8:	18a3      	adds	r3, r4, r2
   191ca:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   191cc:	1928      	adds	r0, r5, r4
}
   191ce:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   191d0:	f7fe bcbf 	b.w	17b52 <memcpy>

000191d4 <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   191d4:	b510      	push	{r4, lr}
   191d6:	8883      	ldrh	r3, [r0, #4]
   191d8:	6802      	ldr	r2, [r0, #0]
	buf->len += len;
   191da:	1c5c      	adds	r4, r3, #1
   191dc:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   191de:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   191e0:	18d0      	adds	r0, r2, r3
   191e2:	bd10      	pop	{r4, pc}

000191e4 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   191e4:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   191e6:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   191e8:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   191ea:	1a40      	subs	r0, r0, r1
	buf->len += len;
   191ec:	4411      	add	r1, r2
	buf->data -= len;
   191ee:	6018      	str	r0, [r3, #0]
	buf->len += len;
   191f0:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   191f2:	4770      	bx	lr

000191f4 <net_buf_simple_push_u8>:
	buf->data -= len;
   191f4:	6802      	ldr	r2, [r0, #0]
   191f6:	1e53      	subs	r3, r2, #1
   191f8:	6003      	str	r3, [r0, #0]
	buf->len += len;
   191fa:	8883      	ldrh	r3, [r0, #4]
   191fc:	3301      	adds	r3, #1
   191fe:	8083      	strh	r3, [r0, #4]

void net_buf_simple_push_u8(struct net_buf_simple *buf, uint8_t val)
{
	uint8_t *data = net_buf_simple_push(buf, 1);

	*data = val;
   19200:	f802 1c01 	strb.w	r1, [r2, #-1]
}
   19204:	4770      	bx	lr

00019206 <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   19206:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   19208:	8882      	ldrh	r2, [r0, #4]
   1920a:	1a52      	subs	r2, r2, r1
   1920c:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1920e:	6800      	ldr	r0, [r0, #0]
   19210:	4408      	add	r0, r1
   19212:	6018      	str	r0, [r3, #0]
}
   19214:	4770      	bx	lr

00019216 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   19216:	4603      	mov	r3, r0
	void *data = buf->data;
   19218:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1921a:	889a      	ldrh	r2, [r3, #4]
   1921c:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1921e:	4401      	add	r1, r0
	buf->len -= len;
   19220:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   19222:	6019      	str	r1, [r3, #0]

	return data;
}
   19224:	4770      	bx	lr

00019226 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   19226:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   19228:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1922a:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1922c:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1922e:	f7ff ffea 	bl	19206 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   19232:	4620      	mov	r0, r4
   19234:	bd10      	pop	{r4, pc}

00019236 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   19236:	6802      	ldr	r2, [r0, #0]
   19238:	6880      	ldr	r0, [r0, #8]
}
   1923a:	1a10      	subs	r0, r2, r0
   1923c:	4770      	bx	lr

0001923e <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1923e:	8883      	ldrh	r3, [r0, #4]
   19240:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   19242:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   19244:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   19246:	6803      	ldr	r3, [r0, #0]
   19248:	1a5b      	subs	r3, r3, r1
}
   1924a:	1ad0      	subs	r0, r2, r3
   1924c:	4770      	bx	lr

0001924e <z_log_msg_static_create.constprop.0>:
   1924e:	2300      	movs	r3, #0
   19250:	f7f1 ba68 	b.w	a724 <z_impl_z_log_msg_static_create>

00019254 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   19254:	220c      	movs	r2, #12
   19256:	6903      	ldr	r3, [r0, #16]
   19258:	b2c9      	uxtb	r1, r1
   1925a:	fb01 3302 	mla	r3, r1, r2, r3
   1925e:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
   19260:	f000 0007 	and.w	r0, r0, #7
   19264:	4770      	bx	lr

00019266 <set_on_state>:
	__asm__ volatile(
   19266:	f04f 0320 	mov.w	r3, #32
   1926a:	f3ef 8211 	mrs	r2, BASEPRI
   1926e:	f383 8812 	msr	BASEPRI_MAX, r3
   19272:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   19276:	6803      	ldr	r3, [r0, #0]
   19278:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1927c:	f043 0302 	orr.w	r3, r3, #2
   19280:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   19282:	f382 8811 	msr	BASEPRI, r2
   19286:	f3bf 8f6f 	isb	sy
}
   1928a:	4770      	bx	lr

0001928c <stop>:
{
   1928c:	b570      	push	{r4, r5, r6, lr}
   1928e:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   19290:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   19292:	f04f 0420 	mov.w	r4, #32
   19296:	f3ef 8511 	mrs	r5, BASEPRI
   1929a:	f384 8812 	msr	BASEPRI_MAX, r4
   1929e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   192a2:	260c      	movs	r6, #12
   192a4:	fb06 3401 	mla	r4, r6, r1, r3
   192a8:	6fa4      	ldr	r4, [r4, #120]	; 0x78
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   192aa:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   192ae:	d008      	beq.n	192c2 <stop+0x36>
   192b0:	42a2      	cmp	r2, r4
   192b2:	d006      	beq.n	192c2 <stop+0x36>
	__asm__ volatile(
   192b4:	f385 8811 	msr	BASEPRI, r5
   192b8:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   192bc:	f04f 30ff 	mov.w	r0, #4294967295
}
   192c0:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   192c2:	2201      	movs	r2, #1
   192c4:	4371      	muls	r1, r6
   192c6:	440b      	add	r3, r1
   192c8:	679a      	str	r2, [r3, #120]	; 0x78
   192ca:	f385 8811 	msr	BASEPRI, r5
   192ce:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   192d2:	6843      	ldr	r3, [r0, #4]
   192d4:	440b      	add	r3, r1
   192d6:	685b      	ldr	r3, [r3, #4]
   192d8:	4798      	blx	r3
	return 0;
   192da:	2000      	movs	r0, #0
   192dc:	e7f0      	b.n	192c0 <stop+0x34>

000192de <api_stop>:
	return stop(dev, subsys, CTX_API);
   192de:	2280      	movs	r2, #128	; 0x80
   192e0:	f7ff bfd4 	b.w	1928c <stop>

000192e4 <async_start>:
{
   192e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   192e6:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   192e8:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   192ea:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   192ec:	f04f 0520 	mov.w	r5, #32
   192f0:	f3ef 8611 	mrs	r6, BASEPRI
   192f4:	f385 8812 	msr	BASEPRI_MAX, r5
   192f8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   192fc:	250c      	movs	r5, #12
   192fe:	4369      	muls	r1, r5
   19300:	440c      	add	r4, r1
   19302:	6fa5      	ldr	r5, [r4, #120]	; 0x78
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   19304:	f005 0c07 	and.w	ip, r5, #7
   19308:	f1bc 0f01 	cmp.w	ip, #1
   1930c:	d10b      	bne.n	19326 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1930e:	67a7      	str	r7, [r4, #120]	; 0x78
	__asm__ volatile(
   19310:	f386 8811 	msr	BASEPRI, r6
   19314:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   19318:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
   1931c:	6843      	ldr	r3, [r0, #4]
   1931e:	585b      	ldr	r3, [r3, r1]
   19320:	4798      	blx	r3
	return 0;
   19322:	2000      	movs	r0, #0
}
   19324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   19326:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1932a:	42af      	cmp	r7, r5
   1932c:	f386 8811 	msr	BASEPRI, r6
   19330:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   19334:	bf0c      	ite	eq
   19336:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   1933a:	f04f 30ff 	movne.w	r0, #4294967295
   1933e:	e7f1      	b.n	19324 <async_start+0x40>

00019340 <api_start>:
{
   19340:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   19342:	2480      	movs	r4, #128	; 0x80
   19344:	9400      	str	r4, [sp, #0]
   19346:	f7ff ffcd 	bl	192e4 <async_start>
}
   1934a:	b002      	add	sp, #8
   1934c:	bd10      	pop	{r4, pc}

0001934e <onoff_started_callback>:
{
   1934e:	b410      	push	{r4}
	notify(mgr, 0);
   19350:	241c      	movs	r4, #28
	return &data->mgr[type];
   19352:	6900      	ldr	r0, [r0, #16]
   19354:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   19356:	fb03 0004 	mla	r0, r3, r4, r0
   1935a:	2100      	movs	r1, #0
}
   1935c:	bc10      	pop	{r4}
	notify(mgr, 0);
   1935e:	4710      	bx	r2

00019360 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   19360:	2003      	movs	r0, #3
   19362:	f7fa ba1b 	b.w	1379c <nrfx_clock_start>

00019366 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   19366:	2002      	movs	r0, #2
   19368:	f7fa ba18 	b.w	1379c <nrfx_clock_start>

0001936c <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1936c:	2000      	movs	r0, #0
   1936e:	f7fa ba15 	b.w	1379c <nrfx_clock_start>

00019372 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   19372:	2003      	movs	r0, #3
   19374:	f000 b975 	b.w	19662 <nrfx_clock_stop>

00019378 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   19378:	2002      	movs	r0, #2
   1937a:	f000 b972 	b.w	19662 <nrfx_clock_stop>

0001937e <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1937e:	2000      	movs	r0, #0
   19380:	f000 b96f 	b.w	19662 <nrfx_clock_stop>

00019384 <blocking_start_callback>:
{
   19384:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   19386:	f7fb be0f 	b.w	14fa8 <z_impl_k_sem_give>

0001938a <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   1938a:	2000      	movs	r0, #0
   1938c:	4770      	bx	lr

0001938e <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   1938e:	b538      	push	{r3, r4, r5, lr}
   19390:	460c      	mov	r4, r1
   19392:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   19394:	f7f4 fd58 	bl	de48 <bt_is_ready>
   19398:	b128      	cbz	r0, 193a6 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   1939a:	4629      	mov	r1, r5
   1939c:	4620      	mov	r0, r4
}
   1939e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   193a2:	f7f3 bceb 	b.w	cd7c <bt_hci_le_rand>
}
   193a6:	f06f 000a 	mvn.w	r0, #10
   193aa:	bd38      	pop	{r3, r4, r5, pc}

000193ac <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
   193ac:	4608      	mov	r0, r1
   193ae:	b508      	push	{r3, lr}
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
   193b0:	4611      	mov	r1, r2
   193b2:	f7fa f89d 	bl	134f0 <psa_generate_random>
	if (status != PSA_SUCCESS) {
		return -EIO;
   193b6:	2800      	cmp	r0, #0
	}

	return 0;
}
   193b8:	bf18      	it	ne
   193ba:	f06f 0004 	mvnne.w	r0, #4
   193be:	bd08      	pop	{r3, pc}

000193c0 <entropy_psa_crypto_rng_init>:
{
   193c0:	b508      	push	{r3, lr}
	status = psa_crypto_init();
   193c2:	f000 f92f 	bl	19624 <psa_crypto_init>
		return -EIO;
   193c6:	2800      	cmp	r0, #0
}
   193c8:	bf18      	it	ne
   193ca:	f06f 0004 	mvnne.w	r0, #4
   193ce:	bd08      	pop	{r3, pc}

000193d0 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   193d0:	6843      	ldr	r3, [r0, #4]
}
   193d2:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   193d4:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   193d6:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   193d8:	600b      	str	r3, [r1, #0]
}
   193da:	4770      	bx	lr

000193dc <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   193dc:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   193de:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   193e2:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   193e4:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   193e8:	6098      	str	r0, [r3, #8]
}
   193ea:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   193ec:	60d9      	str	r1, [r3, #12]
   193ee:	4770      	bx	lr

000193f0 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   193f0:	6843      	ldr	r3, [r0, #4]
}
   193f2:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   193f4:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   193f6:	6099      	str	r1, [r3, #8]
}
   193f8:	4770      	bx	lr

000193fa <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   193fa:	6843      	ldr	r3, [r0, #4]
}
   193fc:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   193fe:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   19400:	60d9      	str	r1, [r3, #12]
}
   19402:	4770      	bx	lr

00019404 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   19404:	6843      	ldr	r3, [r0, #4]
   19406:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   19408:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   1940a:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   1940e:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   19410:	6090      	str	r0, [r2, #8]
}
   19412:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   19414:	60d3      	str	r3, [r2, #12]
   19416:	4770      	bx	lr

00019418 <gpio_nrfx_manage_callback>:
{
   19418:	b510      	push	{r4, lr}
	return port->data;
   1941a:	6903      	ldr	r3, [r0, #16]
	return list->head;
   1941c:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   1941e:	b1f8      	cbz	r0, 19460 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   19420:	4288      	cmp	r0, r1
   19422:	d119      	bne.n	19458 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   19424:	689c      	ldr	r4, [r3, #8]
	return node->next;
   19426:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   19428:	42a1      	cmp	r1, r4
	list->head = node;
   1942a:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1942c:	d100      	bne.n	19430 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   1942e:	6098      	str	r0, [r3, #8]
	parent->next = child;
   19430:	2000      	movs	r0, #0
   19432:	6008      	str	r0, [r1, #0]
	if (set) {
   19434:	b12a      	cbz	r2, 19442 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   19436:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   19438:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1943a:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1943c:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1943e:	b902      	cbnz	r2, 19442 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   19440:	6099      	str	r1, [r3, #8]
	return 0;
   19442:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   19444:	e010      	b.n	19468 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   19446:	4281      	cmp	r1, r0
   19448:	d106      	bne.n	19458 <gpio_nrfx_manage_callback+0x40>
	return node->next;
   1944a:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   1944c:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1944e:	6898      	ldr	r0, [r3, #8]
   19450:	4281      	cmp	r1, r0
   19452:	d1ed      	bne.n	19430 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   19454:	609c      	str	r4, [r3, #8]
}
   19456:	e7eb      	b.n	19430 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   19458:	4604      	mov	r4, r0
   1945a:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1945c:	2800      	cmp	r0, #0
   1945e:	d1f2      	bne.n	19446 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   19460:	2a00      	cmp	r2, #0
   19462:	d1e8      	bne.n	19436 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   19464:	f06f 0015 	mvn.w	r0, #21
}
   19468:	bd10      	pop	{r4, pc}

0001946a <mbox_nrf_register_callback>:
{
   1946a:	b510      	push	{r4, lr}
	struct mbox_nrf_data *data = dev->data;
   1946c:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
   1946e:	290f      	cmp	r1, #15
	data->cb[channel] = cb;
   19470:	bf9f      	itttt	ls
   19472:	eb00 0481 	addls.w	r4, r0, r1, lsl #2
   19476:	f840 2021 	strls.w	r2, [r0, r1, lsl #2]
	data->user_data[channel] = user_data;
   1947a:	6423      	strls	r3, [r4, #64]	; 0x40
	return 0;
   1947c:	2000      	movls	r0, #0
		return -EINVAL;
   1947e:	bf88      	it	hi
   19480:	f06f 0015 	mvnhi.w	r0, #21
}
   19484:	bd10      	pop	{r4, pc}

00019486 <mbox_nrf_mtu_get>:
}
   19486:	2000      	movs	r0, #0
   19488:	4770      	bx	lr

0001948a <mbox_nrf_max_channels_get>:
}
   1948a:	2010      	movs	r0, #16
   1948c:	4770      	bx	lr

0001948e <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   1948e:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   19490:	6843      	ldr	r3, [r0, #4]
   19492:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   19494:	7a05      	ldrb	r5, [r0, #8]
   19496:	6844      	ldr	r4, [r0, #4]
   19498:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   1949c:	42a3      	cmp	r3, r4
   1949e:	d302      	bcc.n	194a6 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   194a0:	f06f 0001 	mvn.w	r0, #1
}
   194a4:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   194a6:	795c      	ldrb	r4, [r3, #5]
   194a8:	428c      	cmp	r4, r1
   194aa:	d001      	beq.n	194b0 <pinctrl_lookup_state+0x22>
		(*state)++;
   194ac:	3308      	adds	r3, #8
   194ae:	e7f0      	b.n	19492 <pinctrl_lookup_state+0x4>
			return 0;
   194b0:	2000      	movs	r0, #0
   194b2:	e7f7      	b.n	194a4 <pinctrl_lookup_state+0x16>

000194b4 <uarte_nrfx_config_get>:
{
   194b4:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   194b6:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   194b8:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   194bc:	e883 0003 	stmia.w	r3, {r0, r1}
}
   194c0:	2000      	movs	r0, #0
   194c2:	4770      	bx	lr

000194c4 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   194c4:	6843      	ldr	r3, [r0, #4]
   194c6:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   194c8:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   194cc:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   194d0:	4770      	bx	lr

000194d2 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   194d2:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   194d4:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   194d6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   194d8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   194dc:	b150      	cbz	r0, 194f4 <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   194de:	2000      	movs	r0, #0
	*c = *data->rx_data;
   194e0:	6952      	ldr	r2, [r2, #20]
   194e2:	7812      	ldrb	r2, [r2, #0]
   194e4:	700a      	strb	r2, [r1, #0]
   194e6:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   194ea:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   194ee:	2201      	movs	r2, #1
   194f0:	601a      	str	r2, [r3, #0]
	return 0;
   194f2:	4770      	bx	lr
		return -1;
   194f4:	f04f 30ff 	mov.w	r0, #4294967295
}
   194f8:	4770      	bx	lr

000194fa <is_tx_ready.isra.0>:
	return config->uarte_regs;
   194fa:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   194fc:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   194fe:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   19502:	b940      	cbnz	r0, 19516 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   19504:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   19506:	079b      	lsls	r3, r3, #30
   19508:	d406      	bmi.n	19518 <is_tx_ready.isra.0+0x1e>
   1950a:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   1950e:	3800      	subs	r0, #0
   19510:	bf18      	it	ne
   19512:	2001      	movne	r0, #1
   19514:	4770      	bx	lr
   19516:	2001      	movs	r0, #1
}
   19518:	4770      	bx	lr

0001951a <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   1951a:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1951c:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1951e:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   19522:	05c9      	lsls	r1, r1, #23
   19524:	d518      	bpl.n	19558 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19526:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1952a:	b1a9      	cbz	r1, 19558 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   1952c:	f04f 0020 	mov.w	r0, #32
   19530:	f3ef 8111 	mrs	r1, BASEPRI
   19534:	f380 8812 	msr	BASEPRI_MAX, r0
   19538:	f3bf 8f6f 	isb	sy
   1953c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   19540:	b130      	cbz	r0, 19550 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19542:	2000      	movs	r0, #0
   19544:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   19548:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1954c:	2001      	movs	r0, #1
   1954e:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   19550:	f381 8811 	msr	BASEPRI, r1
   19554:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   19558:	6852      	ldr	r2, [r2, #4]
   1955a:	06d2      	lsls	r2, r2, #27
   1955c:	d515      	bpl.n	1958a <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   1955e:	f04f 0120 	mov.w	r1, #32
   19562:	f3ef 8211 	mrs	r2, BASEPRI
   19566:	f381 8812 	msr	BASEPRI_MAX, r1
   1956a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1956e:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   19572:	b111      	cbz	r1, 1957a <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   19574:	2100      	movs	r1, #0
   19576:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   1957a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1957e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   19582:	f382 8811 	msr	BASEPRI, r2
   19586:	f3bf 8f6f 	isb	sy
}
   1958a:	4770      	bx	lr

0001958c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1958c:	4770      	bx	lr

0001958e <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1958e:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   19590:	f100 0350 	add.w	r3, r0, #80	; 0x50
   19594:	009b      	lsls	r3, r3, #2
   19596:	b29b      	uxth	r3, r3
   19598:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1959c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   195a0:	601a      	str	r2, [r3, #0]
   195a2:	681b      	ldr	r3, [r3, #0]
}
   195a4:	4770      	bx	lr

000195a6 <z_nrf_rtc_timer_capture_task_address_get>:
	if (chan == 0) {
   195a6:	b130      	cbz	r0, 195b6 <z_nrf_rtc_timer_capture_task_address_get+0x10>
	nrf_rtc_task_t task = offsetof(NRF_RTC_Type, TASKS_CAPTURE[chan]);
   195a8:	3010      	adds	r0, #16
   195aa:	0080      	lsls	r0, r0, #2
    return (uint32_t)p_reg + task;
   195ac:	b2c0      	uxtb	r0, r0
   195ae:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   195b2:	f500 30a8 	add.w	r0, r0, #86016	; 0x15000
}
   195b6:	4770      	bx	lr

000195b8 <z_nrf_rtc_timer_set>:
	return compare_set(chan, target_time, handler, user_data);
   195b8:	f7f9 bad8 	b.w	12b6c <compare_set>

000195bc <sys_clock_cycle_get_32>:
{
   195bc:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   195be:	f7f9 fab3 	bl	12b28 <z_nrf_rtc_timer_read>
}
   195c2:	bd08      	pop	{r3, pc}

000195c4 <gpio_pin_configure_dt>:
{
   195c4:	4603      	mov	r3, r0
   195c6:	b470      	push	{r4, r5, r6}
   195c8:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
   195ca:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   195cc:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   195ce:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
   195d0:	4322      	orrs	r2, r4
		data->invert |= (gpio_port_pins_t)BIT(pin);
   195d2:	2401      	movs	r4, #1
	struct gpio_driver_data *data =
   195d4:	6905      	ldr	r5, [r0, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   195d6:	408c      	lsls	r4, r1
   195d8:	682b      	ldr	r3, [r5, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   195da:	f012 0f01 	tst.w	r2, #1
	const struct gpio_driver_api *api =
   195de:	6886      	ldr	r6, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   195e0:	bf14      	ite	ne
   195e2:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   195e4:	43a3      	biceq	r3, r4
   195e6:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
   195e8:	6833      	ldr	r3, [r6, #0]
}
   195ea:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
   195ec:	4718      	bx	r3

000195ee <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   195ee:	2301      	movs	r3, #1
   195f0:	fa03 f101 	lsl.w	r1, r3, r1
   195f4:	6903      	ldr	r3, [r0, #16]
   195f6:	681b      	ldr	r3, [r3, #0]
   195f8:	4219      	tst	r1, r3
   195fa:	d003      	beq.n	19604 <gpio_pin_set+0x16>
	if (value != 0)	{
   195fc:	b122      	cbz	r2, 19608 <gpio_pin_set+0x1a>
	return api->port_clear_bits_raw(port, pins);
   195fe:	6883      	ldr	r3, [r0, #8]
   19600:	691b      	ldr	r3, [r3, #16]
   19602:	e003      	b.n	1960c <gpio_pin_set+0x1e>
	if (value != 0)	{
   19604:	2a00      	cmp	r2, #0
   19606:	d0fa      	beq.n	195fe <gpio_pin_set+0x10>
	return api->port_set_bits_raw(port, pins);
   19608:	6883      	ldr	r3, [r0, #8]
   1960a:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1960c:	4718      	bx	r3

0001960e <z_log_msg_static_create.constprop.0>:
   1960e:	2300      	movs	r3, #0
   19610:	f7f1 b888 	b.w	a724 <z_impl_z_log_msg_static_create>

00019614 <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   19614:	2101      	movs	r1, #1
   19616:	f7f9 becb 	b.w	133b0 <dk_set_led>

0001961a <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   1961a:	2100      	movs	r1, #0
   1961c:	f7f9 bec8 	b.w	133b0 <dk_set_led>

00019620 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   19620:	2000      	movs	r0, #0
   19622:	4770      	bx	lr

00019624 <psa_crypto_init>:
}
   19624:	2000      	movs	r0, #0
   19626:	4770      	bx	lr

00019628 <tfm_platform_gpio_pin_mcu_select>:
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_gpio_service_args args;
	struct tfm_gpio_service_out out;

	args.type = TFM_GPIO_SERVICE_TYPE_PIN_MCU_SELECT;
   19628:	2300      	movs	r3, #0
{
   1962a:	b510      	push	{r4, lr}
   1962c:	b088      	sub	sp, #32
	args.mcu_select.pin_number = pin_number;
   1962e:	e9cd 3005 	strd	r3, r0, [sp, #20]
	args.mcu_select.mcu = mcu;

	in_vec.base = (const void *)&args;
   19632:	ab05      	add	r3, sp, #20
   19634:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   19636:	230c      	movs	r3, #12
   19638:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   1963a:	2304      	movs	r3, #4
{
   1963c:	4614      	mov	r4, r2
	args.mcu_select.mcu = mcu;
   1963e:	9107      	str	r1, [sp, #28]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   19640:	aa03      	add	r2, sp, #12
   19642:	eb0d 0103 	add.w	r1, sp, r3
   19646:	2001      	movs	r0, #1
	out_vec.len = sizeof(out);
   19648:	9304      	str	r3, [sp, #16]
	out_vec.base = (void *)&out;
   1964a:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   1964e:	f7f9 ff29 	bl	134a4 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   19652:	9b00      	ldr	r3, [sp, #0]
   19654:	6023      	str	r3, [r4, #0]

	return ret;
#else
	return TFM_PLATFORM_ERR_NOT_SUPPORTED;
#endif
}
   19656:	b008      	add	sp, #32
   19658:	bd10      	pop	{r4, pc}

0001965a <SystemInit>:
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif
}
   1965a:	4770      	bx	lr

0001965c <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1965c:	4700      	bx	r0

0001965e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1965e:	f001 b9bf 	b.w	1a9e0 <z_impl_k_busy_wait>

00019662 <nrfx_clock_stop>:
    clock_stop(domain);
   19662:	f7f9 bfb9 	b.w	135d8 <clock_stop>

00019666 <nrf_gpio_reconfigure>:
{
   19666:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19668:	4616      	mov	r6, r2
   1966a:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   1966e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   19670:	a801      	add	r0, sp, #4
{
   19672:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   19674:	f7fa f958 	bl	13928 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   19678:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1967a:	f1b6 0c00 	subs.w	ip, r6, #0
   1967e:	bf18      	it	ne
   19680:	f04f 0c01 	movne.w	ip, #1
   19684:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   19688:	1e0b      	subs	r3, r1, #0
   1968a:	bf18      	it	ne
   1968c:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1968e:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   19690:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   19694:	bf14      	ite	ne
   19696:	f04f 0c0c 	movne.w	ip, #12
   1969a:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1969e:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   196a0:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   196a4:	bf14      	ite	ne
   196a6:	f44f 6c70 	movne.w	ip, #3840	; 0xf00
   196aa:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   196ae:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   196b0:	ea43 030c 	orr.w	r3, r3, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   196b4:	bf14      	ite	ne
   196b6:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   196ba:	f04f 0c00 	moveq.w	ip, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   196be:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   196c2:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   196c6:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   196ca:	b101      	cbz	r1, 196ce <nrf_gpio_reconfigure+0x68>
   196cc:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   196ce:	b10e      	cbz	r6, 196d4 <nrf_gpio_reconfigure+0x6e>
   196d0:	7836      	ldrb	r6, [r6, #0]
   196d2:	0076      	lsls	r6, r6, #1
   196d4:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   196d6:	b10d      	cbz	r5, 196dc <nrf_gpio_reconfigure+0x76>
   196d8:	782d      	ldrb	r5, [r5, #0]
   196da:	00ad      	lsls	r5, r5, #2
   196dc:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   196de:	b10c      	cbz	r4, 196e4 <nrf_gpio_reconfigure+0x7e>
   196e0:	7824      	ldrb	r4, [r4, #0]
   196e2:	0224      	lsls	r4, r4, #8
   196e4:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   196e6:	b10f      	cbz	r7, 196ec <nrf_gpio_reconfigure+0x86>
   196e8:	783f      	ldrb	r7, [r7, #0]
   196ea:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   196ec:	430c      	orrs	r4, r1
   196ee:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   196f0:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   196f4:	b003      	add	sp, #12
   196f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000196f8 <nrf_gpio_cfg_sense_set>:
{
   196f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   196fa:	f10d 030f 	add.w	r3, sp, #15
   196fe:	9301      	str	r3, [sp, #4]
   19700:	2300      	movs	r3, #0
{
   19702:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   19706:	461a      	mov	r2, r3
   19708:	4619      	mov	r1, r3
   1970a:	9300      	str	r3, [sp, #0]
   1970c:	f7ff ffab 	bl	19666 <nrf_gpio_reconfigure>
}
   19710:	b005      	add	sp, #20
   19712:	f85d fb04 	ldr.w	pc, [sp], #4

00019716 <metal_device_open>:
{
   19716:	b573      	push	{r0, r1, r4, r5, r6, lr}
   19718:	460c      	mov	r4, r1
   1971a:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   1971c:	4606      	mov	r6, r0
   1971e:	b918      	cbnz	r0, 19728 <metal_device_open+0x12>
		return -EINVAL;
   19720:	f06f 0015 	mvn.w	r0, #21
}
   19724:	b002      	add	sp, #8
   19726:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   19728:	f7fe f9d4 	bl	17ad4 <strlen>
   1972c:	2800      	cmp	r0, #0
   1972e:	d0f7      	beq.n	19720 <metal_device_open+0xa>
   19730:	2c00      	cmp	r4, #0
   19732:	d0f5      	beq.n	19720 <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   19734:	4620      	mov	r0, r4
   19736:	f7fe f9cd 	bl	17ad4 <strlen>
   1973a:	2800      	cmp	r0, #0
   1973c:	d0f0      	beq.n	19720 <metal_device_open+0xa>
   1973e:	2d00      	cmp	r5, #0
   19740:	d0ee      	beq.n	19720 <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   19742:	4630      	mov	r0, r6
   19744:	a901      	add	r1, sp, #4
   19746:	f7fa fcff 	bl	14148 <metal_bus_find>
	if (error)
   1974a:	2800      	cmp	r0, #0
   1974c:	d1ea      	bne.n	19724 <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   1974e:	9801      	ldr	r0, [sp, #4]
   19750:	6883      	ldr	r3, [r0, #8]
   19752:	b12b      	cbz	r3, 19760 <metal_device_open+0x4a>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   19754:	462a      	mov	r2, r5
   19756:	4621      	mov	r1, r4
}
   19758:	b002      	add	sp, #8
   1975a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   1975e:	4718      	bx	r3
		return -ENODEV;
   19760:	f06f 0012 	mvn.w	r0, #18
   19764:	e7de      	b.n	19724 <metal_device_open+0xe>

00019766 <metal_device_close>:
{
   19766:	4601      	mov	r1, r0
	if (device->bus->ops.dev_close)
   19768:	6840      	ldr	r0, [r0, #4]
   1976a:	68c3      	ldr	r3, [r0, #12]
   1976c:	b103      	cbz	r3, 19770 <metal_device_close+0xa>
		device->bus->ops.dev_close(device->bus, device);
   1976e:	4718      	bx	r3
}
   19770:	4770      	bx	lr

00019772 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
   19772:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19776:	b089      	sub	sp, #36	; 0x24
   19778:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1977a:	4604      	mov	r4, r0
   1977c:	4689      	mov	r9, r1
   1977e:	4690      	mov	r8, r2
	const struct metal_io_ops nops = {
   19780:	2100      	movs	r1, #0
   19782:	2220      	movs	r2, #32
   19784:	4668      	mov	r0, sp
{
   19786:	461f      	mov	r7, r3
   19788:	9d12      	ldr	r5, [sp, #72]	; 0x48
	const struct metal_io_ops nops = {
   1978a:	f7fe f9ed 	bl	17b68 <memset>

	io->virt = virt;
	io->physmap = physmap;
	io->size = size;
	io->page_shift = page_shift;
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
   1978e:	2e1f      	cmp	r6, #31
		/* avoid overflow */
		io->page_mask = -1UL;
	else
		io->page_mask = (1UL << page_shift) - 1UL;
   19790:	bf97      	itett	ls
   19792:	2301      	movls	r3, #1
		io->page_mask = -1UL;
   19794:	f04f 33ff 	movhi.w	r3, #4294967295
		io->page_mask = (1UL << page_shift) - 1UL;
   19798:	40b3      	lslls	r3, r6
   1979a:	f103 33ff 	addls.w	r3, r3, #4294967295
   1979e:	6123      	str	r3, [r4, #16]
	io->mem_flags = mem_flags;
   197a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
	io->physmap = physmap;
   197a2:	e9c4 9800 	strd	r9, r8, [r4]
	io->page_shift = page_shift;
   197a6:	e9c4 7602 	strd	r7, r6, [r4, #8]
	io->mem_flags = mem_flags;
   197aa:	6163      	str	r3, [r4, #20]
	io->ops = ops ? *ops : nops;
   197ac:	3418      	adds	r4, #24
   197ae:	b145      	cbz	r5, 197c2 <metal_io_init+0x50>
   197b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   197b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   197b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   197b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
}
   197bc:	b009      	add	sp, #36	; 0x24
   197be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	io->ops = ops ? *ops : nops;
   197c2:	466d      	mov	r5, sp
   197c4:	e7f4      	b.n	197b0 <metal_io_init+0x3e>

000197c6 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   197c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   197c8:	6804      	ldr	r4, [r0, #0]
		: NULL);
   197ca:	1c66      	adds	r6, r4, #1
   197cc:	d031      	beq.n	19832 <metal_io_block_read+0x6c>
	return (io->virt != METAL_BAD_VA && offset < io->size
   197ce:	6885      	ldr	r5, [r0, #8]
   197d0:	42a9      	cmp	r1, r5
   197d2:	d22e      	bcs.n	19832 <metal_io_block_read+0x6c>
	unsigned char *ptr = metal_io_virt(io, offset);
	unsigned char *dest = dst;
	int retlen;

	if (!ptr)
   197d4:	1864      	adds	r4, r4, r1
   197d6:	d02c      	beq.n	19832 <metal_io_block_read+0x6c>
		return -ERANGE;
	if ((offset + len) > io->size)
   197d8:	185e      	adds	r6, r3, r1
   197da:	42ae      	cmp	r6, r5
		len = io->size - offset;
   197dc:	bf88      	it	hi
   197de:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   197e0:	6a05      	ldr	r5, [r0, #32]
   197e2:	b135      	cbz	r5, 197f2 <metal_io_block_read+0x2c>
		retlen = (*io->ops.block_read)(
   197e4:	9300      	str	r3, [sp, #0]
   197e6:	2305      	movs	r3, #5
   197e8:	47a8      	blx	r5
   197ea:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   197ec:	4618      	mov	r0, r3
   197ee:	b002      	add	sp, #8
   197f0:	bd70      	pop	{r4, r5, r6, pc}
		atomic_thread_fence(memory_order_seq_cst);
   197f2:	f3bf 8f5b 	dmb	ish
		while ( len && (
   197f6:	4619      	mov	r1, r3
   197f8:	1aa4      	subs	r4, r4, r2
   197fa:	1910      	adds	r0, r2, r4
   197fc:	b119      	cbz	r1, 19806 <metal_io_block_read+0x40>
			((uintptr_t)dest % sizeof(int)) ||
   197fe:	ea40 0502 	orr.w	r5, r0, r2
   19802:	07ad      	lsls	r5, r5, #30
   19804:	d10a      	bne.n	1981c <metal_io_block_read+0x56>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   19806:	2903      	cmp	r1, #3
   19808:	dc0d      	bgt.n	19826 <metal_io_block_read+0x60>
   1980a:	3801      	subs	r0, #1
   1980c:	4411      	add	r1, r2
		for (; len != 0; dest++, ptr++, len--)
   1980e:	428a      	cmp	r2, r1
   19810:	d0ec      	beq.n	197ec <metal_io_block_read+0x26>
				*(const unsigned char *)ptr;
   19812:	f810 4f01 	ldrb.w	r4, [r0, #1]!
			*(unsigned char *)dest =
   19816:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   1981a:	e7f8      	b.n	1980e <metal_io_block_read+0x48>
				*(const unsigned char *)ptr;
   1981c:	7800      	ldrb	r0, [r0, #0]
			len--;
   1981e:	3901      	subs	r1, #1
			*(unsigned char *)dest =
   19820:	f802 0b01 	strb.w	r0, [r2], #1
			len--;
   19824:	e7e9      	b.n	197fa <metal_io_block_read+0x34>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   19826:	f850 4b04 	ldr.w	r4, [r0], #4
   1982a:	3904      	subs	r1, #4
   1982c:	f842 4b04 	str.w	r4, [r2], #4
					ptr += sizeof(int),
   19830:	e7e9      	b.n	19806 <metal_io_block_read+0x40>
		return -ERANGE;
   19832:	f06f 0321 	mvn.w	r3, #33	; 0x21
   19836:	e7d9      	b.n	197ec <metal_io_block_read+0x26>

00019838 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   19838:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1983a:	6804      	ldr	r4, [r0, #0]
		: NULL);
   1983c:	1c65      	adds	r5, r4, #1
   1983e:	d032      	beq.n	198a6 <metal_io_block_write+0x6e>
	return (io->virt != METAL_BAD_VA && offset < io->size
   19840:	6885      	ldr	r5, [r0, #8]
   19842:	42a9      	cmp	r1, r5
   19844:	d22f      	bcs.n	198a6 <metal_io_block_write+0x6e>
	unsigned char *ptr = metal_io_virt(io, offset);
	const unsigned char *source = src;
	int retlen;

	if (!ptr)
   19846:	1864      	adds	r4, r4, r1
   19848:	d02d      	beq.n	198a6 <metal_io_block_write+0x6e>
		return -ERANGE;
	if ((offset + len) > io->size)
   1984a:	185e      	adds	r6, r3, r1
   1984c:	42ae      	cmp	r6, r5
		len = io->size - offset;
   1984e:	bf88      	it	hi
   19850:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   19852:	6a45      	ldr	r5, [r0, #36]	; 0x24
   19854:	b1cd      	cbz	r5, 1988a <metal_io_block_write+0x52>
		retlen = (*io->ops.block_write)(
   19856:	9300      	str	r3, [sp, #0]
   19858:	2305      	movs	r3, #5
   1985a:	47a8      	blx	r5
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   1985c:	b002      	add	sp, #8
   1985e:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   19860:	f812 5b01 	ldrb.w	r5, [r2], #1
			len--;
   19864:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   19866:	7005      	strb	r5, [r0, #0]
			len--;
   19868:	4615      	mov	r5, r2
   1986a:	18a0      	adds	r0, r4, r2
		while ( len && (
   1986c:	b119      	cbz	r1, 19876 <metal_io_block_write+0x3e>
			((uintptr_t)ptr % sizeof(int)) ||
   1986e:	ea40 0602 	orr.w	r6, r0, r2
   19872:	07b6      	lsls	r6, r6, #30
   19874:	d1f4      	bne.n	19860 <metal_io_block_write+0x28>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   19876:	2903      	cmp	r1, #3
   19878:	dc0a      	bgt.n	19890 <metal_io_block_write+0x58>
   1987a:	3d01      	subs	r5, #1
   1987c:	4401      	add	r1, r0
		for (; len != 0; ptr++, source++, len--)
   1987e:	4288      	cmp	r0, r1
   19880:	d10c      	bne.n	1989c <metal_io_block_write+0x64>
		atomic_thread_fence(memory_order_seq_cst);
   19882:	f3bf 8f5b 	dmb	ish
	retlen = len;
   19886:	4618      	mov	r0, r3
   19888:	e7e8      	b.n	1985c <metal_io_block_write+0x24>
   1988a:	4619      	mov	r1, r3
   1988c:	1aa4      	subs	r4, r4, r2
   1988e:	e7eb      	b.n	19868 <metal_io_block_write+0x30>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   19890:	f855 2b04 	ldr.w	r2, [r5], #4
   19894:	3904      	subs	r1, #4
   19896:	f840 2b04 	str.w	r2, [r0], #4
					source += sizeof(int),
   1989a:	e7ec      	b.n	19876 <metal_io_block_write+0x3e>
				*(const unsigned char *)source;
   1989c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
			*(unsigned char *)ptr =
   198a0:	f800 2b01 	strb.w	r2, [r0], #1
		for (; len != 0; ptr++, source++, len--)
   198a4:	e7eb      	b.n	1987e <metal_io_block_write+0x46>
		return -ERANGE;
   198a6:	f06f 0021 	mvn.w	r0, #33	; 0x21
   198aa:	e7d7      	b.n	1985c <metal_io_block_write+0x24>

000198ac <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   198ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   198ae:	6804      	ldr	r4, [r0, #0]
   198b0:	461d      	mov	r5, r3
		: NULL);
   198b2:	1c66      	adds	r6, r4, #1
   198b4:	d02b      	beq.n	1990e <metal_io_block_set+0x62>
	return (io->virt != METAL_BAD_VA && offset < io->size
   198b6:	6883      	ldr	r3, [r0, #8]
   198b8:	4299      	cmp	r1, r3
   198ba:	d228      	bcs.n	1990e <metal_io_block_set+0x62>
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (!ptr)
   198bc:	1864      	adds	r4, r4, r1
   198be:	d026      	beq.n	1990e <metal_io_block_set+0x62>
		return -ERANGE;
	if ((offset + len) > io->size)
   198c0:	186e      	adds	r6, r5, r1
   198c2:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   198c4:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   198c6:	bf88      	it	hi
   198c8:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   198ca:	b12e      	cbz	r6, 198d8 <metal_io_block_set+0x2c>
		(*io->ops.block_set)(
   198cc:	2305      	movs	r3, #5
   198ce:	9500      	str	r5, [sp, #0]
   198d0:	47b0      	blx	r6
			*(unsigned int *)ptr = cint;
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
   198d2:	4628      	mov	r0, r5
}
   198d4:	b002      	add	sp, #8
   198d6:	bd70      	pop	{r4, r5, r6, pc}
		: NULL);
   198d8:	4621      	mov	r1, r4
   198da:	462b      	mov	r3, r5
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   198dc:	b94b      	cbnz	r3, 198f2 <metal_io_block_set+0x46>
   198de:	440b      	add	r3, r1
		for (; len != 0; ptr++, len--)
   198e0:	4299      	cmp	r1, r3
   198e2:	d111      	bne.n	19908 <metal_io_block_set+0x5c>
		atomic_thread_fence(memory_order_seq_cst);
   198e4:	f3bf 8f5b 	dmb	ish
   198e8:	e7f3      	b.n	198d2 <metal_io_block_set+0x26>
			*(unsigned char *)ptr = (unsigned char) value;
   198ea:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   198ee:	3b01      	subs	r3, #1
   198f0:	e7f4      	b.n	198dc <metal_io_block_set+0x30>
   198f2:	0788      	lsls	r0, r1, #30
   198f4:	d1f9      	bne.n	198ea <metal_io_block_set+0x3e>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   198f6:	f04f 3001 	mov.w	r0, #16843009	; 0x1010101
   198fa:	4350      	muls	r0, r2
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   198fc:	2b03      	cmp	r3, #3
   198fe:	ddee      	ble.n	198de <metal_io_block_set+0x32>
			*(unsigned int *)ptr = cint;
   19900:	f841 0b04 	str.w	r0, [r1], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   19904:	3b04      	subs	r3, #4
   19906:	e7f9      	b.n	198fc <metal_io_block_set+0x50>
			*(unsigned char *)ptr = (unsigned char) value;
   19908:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len != 0; ptr++, len--)
   1990c:	e7e8      	b.n	198e0 <metal_io_block_set+0x34>
		return -ERANGE;
   1990e:	f06f 0021 	mvn.w	r0, #33	; 0x21
   19912:	e7df      	b.n	198d4 <metal_io_block_set+0x28>

00019914 <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   19914:	2000      	movs	r0, #0
   19916:	4770      	bx	lr

00019918 <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   19918:	b410      	push	{r4}
	if (!io->ops.offset_to_phys) {
   1991a:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   1991c:	4602      	mov	r2, r0
   1991e:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   19920:	b984      	cbnz	r4, 19944 <metal_io_phys+0x2c>
		unsigned long page = (io->page_shift >=
   19922:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
   19924:	291f      	cmp	r1, #31
   19926:	bf98      	it	ls
   19928:	fa23 f401 	lsrls.w	r4, r3, r1
		return (io->physmap && offset < io->size
   1992c:	6841      	ldr	r1, [r0, #4]
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   1992e:	b161      	cbz	r1, 1994a <metal_io_phys+0x32>
		return (io->physmap && offset < io->size
   19930:	6880      	ldr	r0, [r0, #8]
   19932:	4283      	cmp	r3, r0
   19934:	d209      	bcs.n	1994a <metal_io_phys+0x32>
			? io->physmap[page] + (offset & io->page_mask)
   19936:	6910      	ldr	r0, [r2, #16]
   19938:	4018      	ands	r0, r3
			: METAL_BAD_PHYS);
   1993a:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
   1993e:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   19940:	bc10      	pop	{r4}
   19942:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   19944:	4623      	mov	r3, r4
}
   19946:	bc10      	pop	{r4}
	return io->ops.offset_to_phys(io, offset);
   19948:	4718      	bx	r3
			: METAL_BAD_PHYS);
   1994a:	f04f 30ff 	mov.w	r0, #4294967295
   1994e:	e7f7      	b.n	19940 <metal_io_phys+0x28>

00019950 <metal_io_phys_to_virt>:
 * @param[in]	phys	Physical address within segment.
 * @return	NULL if out of range, or corresponding virtual address.
 */
static inline void *
metal_io_phys_to_virt(struct metal_io_region *io, metal_phys_addr_t phys)
{
   19950:	b570      	push	{r4, r5, r6, lr}
	if (!io->ops.phys_to_offset) {
   19952:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
   19954:	4605      	mov	r5, r0
   19956:	460e      	mov	r6, r1
	if (!io->ops.phys_to_offset) {
   19958:	b9e3      	cbnz	r3, 19994 <metal_io_phys_to_virt+0x44>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   1995a:	6904      	ldr	r4, [r0, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   1995c:	1c62      	adds	r2, r4, #1
   1995e:	bf09      	itett	eq
   19960:	6843      	ldreq	r3, [r0, #4]
   19962:	400c      	andne	r4, r1
   19964:	681c      	ldreq	r4, [r3, #0]
   19966:	1b0c      	subeq	r4, r1, r4
			if (metal_io_phys(io, offset) == phys)
   19968:	4621      	mov	r1, r4
   1996a:	4628      	mov	r0, r5
   1996c:	f7ff ffd4 	bl	19918 <metal_io_phys>
   19970:	4286      	cmp	r6, r0
   19972:	d007      	beq.n	19984 <metal_io_phys_to_virt+0x34>
			offset += io->page_mask + 1;
   19974:	692b      	ldr	r3, [r5, #16]
   19976:	3301      	adds	r3, #1
   19978:	441c      	add	r4, r3
		} while (offset < io->size);
   1997a:	68ab      	ldr	r3, [r5, #8]
   1997c:	429c      	cmp	r4, r3
   1997e:	d3f3      	bcc.n	19968 <metal_io_phys_to_virt+0x18>
		return METAL_BAD_OFFSET;
   19980:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   19984:	6828      	ldr	r0, [r5, #0]
		: NULL);
   19986:	1c43      	adds	r3, r0, #1
   19988:	d007      	beq.n	1999a <metal_io_phys_to_virt+0x4a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1998a:	68ab      	ldr	r3, [r5, #8]
   1998c:	42a3      	cmp	r3, r4
   1998e:	d904      	bls.n	1999a <metal_io_phys_to_virt+0x4a>
		? (void *)((uintptr_t)io->virt + offset)
   19990:	4420      	add	r0, r4
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
}
   19992:	bd70      	pop	{r4, r5, r6, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   19994:	4798      	blx	r3
   19996:	4604      	mov	r4, r0
   19998:	e7f4      	b.n	19984 <metal_io_phys_to_virt+0x34>
		: NULL);
   1999a:	2000      	movs	r0, #0
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
   1999c:	e7f9      	b.n	19992 <metal_io_phys_to_virt+0x42>

0001999e <virtqueue_create>:
{
   1999e:	b530      	push	{r4, r5, lr}
   199a0:	9c05      	ldr	r4, [sp, #20]
		vq->vq_name = name;
   199a2:	e9c4 0200 	strd	r0, r2, [r4]
		vq->callback = callback;
   199a6:	9a03      	ldr	r2, [sp, #12]
		vq->vq_queue_index = id;
   199a8:	8121      	strh	r1, [r4, #8]
		vq->vq_nentries = ring->num_descs;
   199aa:	8919      	ldrh	r1, [r3, #8]
		vq->callback = callback;
   199ac:	60e2      	str	r2, [r4, #12]
		vq->notify = notify;
   199ae:	9a04      	ldr	r2, [sp, #16]
		vq->vq_nentries = ring->num_descs;
   199b0:	8161      	strh	r1, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   199b2:	84a1      	strh	r1, [r4, #36]	; 0x24
		vq->notify = notify;
   199b4:	6122      	str	r2, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   199b6:	e9d3 2500 	ldrd	r2, r5, [r3]
static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   199ba:	eb02 1301 	add.w	r3, r2, r1, lsl #4
	vr->desc = (struct vring_desc *)p;
   199be:	e9c4 1205 	strd	r1, r2, [r4, #20]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   199c2:	1c8a      	adds	r2, r1, #2
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   199c4:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   199c6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	      align - 1) & ~(align - 1));
   199ca:	1c6a      	adds	r2, r5, #1
   199cc:	4413      	add	r3, r2
   199ce:	426d      	negs	r5, r5
   199d0:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   199d2:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_DEVICE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   199d4:	6983      	ldr	r3, [r0, #24]
   199d6:	b953      	cbnz	r3, 199ee <virtqueue_create+0x50>
		int i;

		for (i = 0; i < size - 1; i++)
   199d8:	3901      	subs	r1, #1
			vr->desc[i].next = i + 1;
   199da:	69a2      	ldr	r2, [r4, #24]
		for (i = 0; i < size - 1; i++)
   199dc:	428b      	cmp	r3, r1
			vr->desc[i].next = i + 1;
   199de:	eb02 1203 	add.w	r2, r2, r3, lsl #4
		for (i = 0; i < size - 1; i++)
   199e2:	db06      	blt.n	199f2 <virtqueue_create+0x54>
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   199e4:	2300      	movs	r3, #0
   199e6:	7393      	strb	r3, [r2, #14]
   199e8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   199ec:	73d3      	strb	r3, [r2, #15]
}
   199ee:	2000      	movs	r0, #0
   199f0:	bd30      	pop	{r4, r5, pc}
			vr->desc[i].next = i + 1;
   199f2:	3301      	adds	r3, #1
   199f4:	81d3      	strh	r3, [r2, #14]
		for (i = 0; i < size - 1; i++)
   199f6:	e7f0      	b.n	199da <virtqueue_create+0x3c>

000199f8 <virtqueue_add_buffer>:
{
   199f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		head_idx = vq->vq_desc_head_idx;
   199fc:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	; 0x2c
{
   19a00:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   19a02:	4655      	mov	r5, sl
   19a04:	2600      	movs	r6, #0
{
   19a06:	b085      	sub	sp, #20
	needed = readable + writable;
   19a08:	eb02 0803 	add.w	r8, r2, r3
{
   19a0c:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   19a0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19a10:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
		dxp->ndescs = needed;
   19a14:	fa1f fb88 	uxth.w	fp, r8
		dxp->cookie = cookie;
   19a18:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   19a1a:	f8a3 b038 	strh.w	fp, [r3, #56]	; 0x38
		if (i < needed - 1)
   19a1e:	f108 32ff 	add.w	r2, r8, #4294967295
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   19a22:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   19a24:	1d0f      	adds	r7, r1, #4
		if (i < needed - 1)
   19a26:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   19a28:	45b0      	cmp	r8, r6
   19a2a:	dc1a      	bgt.n	19a62 <virtqueue_add_buffer+0x6a>
		vq->vq_free_cnt -= needed;
   19a2c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		vq->vq_desc_head_idx = idx;
   19a2e:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   19a30:	eba3 030b 	sub.w	r3, r3, fp
   19a34:	84a3      	strh	r3, [r4, #36]	; 0x24
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 *
	 * CACHE: avail is never written by remote, so it is safe to not invalidate here
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   19a36:	69e3      	ldr	r3, [r4, #28]
   19a38:	8961      	ldrh	r1, [r4, #10]
   19a3a:	885a      	ldrh	r2, [r3, #2]
   19a3c:	3901      	subs	r1, #1
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   19a3e:	400a      	ands	r2, r1
   19a40:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   19a44:	f8a3 a004 	strh.w	sl, [r3, #4]

	/* We still need to flush the ring */
	VRING_FLUSH(vq->vq_ring.avail->ring[avail_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   19a48:	f3bf 8f5b 	dmb	ish
}
   19a4c:	2000      	movs	r0, #0

	vq->vq_ring.avail->idx++;
   19a4e:	69e2      	ldr	r2, [r4, #28]
   19a50:	8853      	ldrh	r3, [r2, #2]
   19a52:	3301      	adds	r3, #1
   19a54:	8053      	strh	r3, [r2, #2]

	/* And the index */
	VRING_FLUSH(vq->vq_ring.avail->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   19a56:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   19a58:	3301      	adds	r3, #1
   19a5a:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   19a5c:	b005      	add	sp, #20
   19a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   19a62:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   19a64:	012a      	lsls	r2, r5, #4
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   19a66:	f857 1c04 	ldr.w	r1, [r7, #-4]
   19a6a:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   19a6e:	9302      	str	r3, [sp, #8]
   19a70:	6803      	ldr	r3, [r0, #0]
   19a72:	9203      	str	r2, [sp, #12]
   19a74:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   19a76:	6883      	ldr	r3, [r0, #8]
   19a78:	3708      	adds	r7, #8
   19a7a:	4299      	cmp	r1, r3
   19a7c:	bf28      	it	cs
   19a7e:	f04f 31ff 	movcs.w	r1, #4294967295
   19a82:	f7ff ff49 	bl	19918 <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   19a86:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   19a8a:	5098      	str	r0, [r3, r2]
   19a8c:	2200      	movs	r2, #0
   19a8e:	606a      	str	r2, [r5, #4]
		dp->len = buf_list[i].len;
   19a90:	f857 2c08 	ldr.w	r2, [r7, #-8]
   19a94:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   19a96:	9a01      	ldr	r2, [sp, #4]
   19a98:	4296      	cmp	r6, r2
   19a9a:	bfac      	ite	ge
   19a9c:	2200      	movge	r2, #0
   19a9e:	2201      	movlt	r2, #1
		if (i >= readable)
   19aa0:	45b1      	cmp	r9, r6
			dp->flags |= VRING_DESC_F_WRITE;
   19aa2:	bfd8      	it	le
   19aa4:	f042 0202 	orrle.w	r2, r2, #2
   19aa8:	81aa      	strh	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   19aaa:	3601      	adds	r6, #1
   19aac:	89ed      	ldrh	r5, [r5, #14]
   19aae:	e7bb      	b.n	19a28 <virtqueue_add_buffer+0x30>

00019ab0 <virtqueue_get_buffer>:
{
   19ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   19ab2:	b350      	cbz	r0, 19b0a <virtqueue_get_buffer+0x5a>
   19ab4:	6a05      	ldr	r5, [r0, #32]
   19ab6:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
   19ab8:	886b      	ldrh	r3, [r5, #2]
   19aba:	42a3      	cmp	r3, r4
   19abc:	d030      	beq.n	19b20 <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   19abe:	1c63      	adds	r3, r4, #1
   19ac0:	85c3      	strh	r3, [r0, #46]	; 0x2e
   19ac2:	8943      	ldrh	r3, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   19ac4:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   19ac8:	3b01      	subs	r3, #1
   19aca:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   19acc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   19ad0:	686b      	ldr	r3, [r5, #4]
   19ad2:	b29e      	uxth	r6, r3
	if (len)
   19ad4:	b109      	cbz	r1, 19ada <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   19ad6:	68ad      	ldr	r5, [r5, #8]
   19ad8:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   19ada:	f8d0 c018 	ldr.w	ip, [r0, #24]
   19ade:	b29b      	uxth	r3, r3
   19ae0:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   19ae4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   19ae8:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   19aea:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   19aec:	442f      	add	r7, r5
	dxp->ndescs--;
   19aee:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   19af0:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   19af2:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   19af4:	898d      	ldrh	r5, [r1, #12]
   19af6:	076f      	lsls	r7, r5, #29
   19af8:	d50e      	bpl.n	19b18 <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   19afa:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   19afc:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   19afe:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   19b00:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   19b02:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   19b04:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   19b06:	b102      	cbz	r2, 19b0a <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   19b08:	8014      	strh	r4, [r2, #0]
}
   19b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   19b0c:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   19b0e:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   19b10:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   19b12:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   19b16:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   19b18:	898d      	ldrh	r5, [r1, #12]
   19b1a:	07ed      	lsls	r5, r5, #31
   19b1c:	d4f6      	bmi.n	19b0c <virtqueue_get_buffer+0x5c>
   19b1e:	e7ec      	b.n	19afa <virtqueue_get_buffer+0x4a>
		return NULL;
   19b20:	2000      	movs	r0, #0
   19b22:	e7f2      	b.n	19b0a <virtqueue_get_buffer+0x5a>

00019b24 <virtqueue_get_buffer_length>:
	return vq->vq_ring.desc[idx].len;
   19b24:	6983      	ldr	r3, [r0, #24]
   19b26:	eb03 1301 	add.w	r3, r3, r1, lsl #4
}
   19b2a:	6898      	ldr	r0, [r3, #8]
   19b2c:	4770      	bx	lr

00019b2e <virtqueue_get_available_buffer>:
{
   19b2e:	b570      	push	{r4, r5, r6, lr}
	atomic_thread_fence(memory_order_seq_cst);
   19b30:	f3bf 8f5b 	dmb	ish
{
   19b34:	460d      	mov	r5, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   19b36:	69c1      	ldr	r1, [r0, #28]
{
   19b38:	4616      	mov	r6, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   19b3a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   19b3c:	884a      	ldrh	r2, [r1, #2]
{
   19b3e:	4604      	mov	r4, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   19b40:	429a      	cmp	r2, r3
   19b42:	d016      	beq.n	19b72 <virtqueue_get_available_buffer+0x44>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   19b44:	1c5a      	adds	r2, r3, #1
   19b46:	8602      	strh	r2, [r0, #48]	; 0x30
   19b48:	8942      	ldrh	r2, [r0, #10]
   19b4a:	3a01      	subs	r2, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   19b4c:	4013      	ands	r3, r2
   19b4e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
   19b52:	888a      	ldrh	r2, [r1, #4]
   19b54:	802a      	strh	r2, [r5, #0]
   19b56:	b293      	uxth	r3, r2
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   19b58:	6982      	ldr	r2, [r0, #24]
   19b5a:	011b      	lsls	r3, r3, #4
	return metal_io_phys_to_virt(io, phys);
   19b5c:	58d1      	ldr	r1, [r2, r3]
   19b5e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   19b60:	f7ff fef6 	bl	19950 <metal_io_phys_to_virt>
	*len = vq->vq_ring.desc[*avail_idx].len;
   19b64:	882a      	ldrh	r2, [r5, #0]
   19b66:	69a3      	ldr	r3, [r4, #24]
   19b68:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   19b6c:	689b      	ldr	r3, [r3, #8]
   19b6e:	6033      	str	r3, [r6, #0]
}
   19b70:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   19b72:	2000      	movs	r0, #0
   19b74:	e7fc      	b.n	19b70 <virtqueue_get_available_buffer+0x42>

00019b76 <virtqueue_disable_cb>:
{
   19b76:	b510      	push	{r4, lr}
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   19b78:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   19b7a:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   19b7c:	6912      	ldr	r2, [r2, #16]
   19b7e:	0092      	lsls	r2, r2, #2
   19b80:	d517      	bpl.n	19bb2 <virtqueue_disable_cb+0x3c>
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   19b82:	b943      	cbnz	r3, 19b96 <virtqueue_disable_cb+0x20>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   19b84:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
			vring_used_event(&vq->vq_ring) =
   19b86:	69c2      	ldr	r2, [r0, #28]
   19b88:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   19b8a:	8944      	ldrh	r4, [r0, #10]
   19b8c:	3b01      	subs	r3, #1
   19b8e:	1b1b      	subs	r3, r3, r4
			vring_used_event(&vq->vq_ring) =
   19b90:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   19b94:	8093      	strh	r3, [r2, #4]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   19b96:	6803      	ldr	r3, [r0, #0]
   19b98:	699b      	ldr	r3, [r3, #24]
   19b9a:	2b01      	cmp	r3, #1
   19b9c:	d108      	bne.n	19bb0 <virtqueue_disable_cb+0x3a>
			    vq->vq_available_idx - vq->vq_nentries - 1;
   19b9e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
			vring_avail_event(&vq->vq_ring) =
   19ba0:	6a02      	ldr	r2, [r0, #32]
   19ba2:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   19ba4:	8940      	ldrh	r0, [r0, #10]
   19ba6:	3b01      	subs	r3, #1
   19ba8:	1a1b      	subs	r3, r3, r0
			vring_avail_event(&vq->vq_ring) =
   19baa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   19bae:	8093      	strh	r3, [r2, #4]
}
   19bb0:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   19bb2:	b923      	cbnz	r3, 19bbe <virtqueue_disable_cb+0x48>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   19bb4:	69c2      	ldr	r2, [r0, #28]
   19bb6:	8813      	ldrh	r3, [r2, #0]
   19bb8:	f043 0301 	orr.w	r3, r3, #1
   19bbc:	8013      	strh	r3, [r2, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   19bbe:	6803      	ldr	r3, [r0, #0]
   19bc0:	699b      	ldr	r3, [r3, #24]
   19bc2:	2b01      	cmp	r3, #1
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   19bc4:	bf01      	itttt	eq
   19bc6:	6a02      	ldreq	r2, [r0, #32]
   19bc8:	8813      	ldrheq	r3, [r2, #0]
   19bca:	f043 0301 	orreq.w	r3, r3, #1
   19bce:	8013      	strheq	r3, [r2, #0]
}
   19bd0:	e7ee      	b.n	19bb0 <virtqueue_disable_cb+0x3a>

00019bd2 <virtqueue_kick>:
{
   19bd2:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   19bd4:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   19bd8:	6803      	ldr	r3, [r0, #0]
{
   19bda:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   19bdc:	691a      	ldr	r2, [r3, #16]
   19bde:	699b      	ldr	r3, [r3, #24]
   19be0:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   19be4:	d01a      	beq.n	19c1c <virtqueue_kick+0x4a>
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   19be6:	b97b      	cbnz	r3, 19c08 <virtqueue_kick+0x36>
			/* CACHE: no need to invalidate avail */
			new_idx = vq->vq_ring.avail->idx;
   19be8:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_avail_event(&vq->vq_ring));
			event_idx = vring_avail_event(&vq->vq_ring);
   19bea:	6a02      	ldr	r2, [r0, #32]
			new_idx = vq->vq_ring.avail->idx;
   19bec:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   19bee:	6941      	ldr	r1, [r0, #20]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   19bf0:	3b01      	subs	r3, #1
   19bf2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
   19bf6:	8892      	ldrh	r2, [r2, #4]
   19bf8:	1a9b      	subs	r3, r3, r2
	if (vq_ring_must_notify(vq))
   19bfa:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   19bfc:	b29b      	uxth	r3, r3
   19bfe:	429a      	cmp	r2, r3
   19c00:	d814      	bhi.n	19c2c <virtqueue_kick+0x5a>
	vq->vq_queued_cnt = 0;
   19c02:	2300      	movs	r3, #0
   19c04:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   19c06:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   19c08:	2b01      	cmp	r3, #1
   19c0a:	d1fa      	bne.n	19c02 <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   19c0c:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   19c0e:	69c2      	ldr	r2, [r0, #28]
			new_idx = vq->vq_ring.used->idx;
   19c10:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   19c12:	6941      	ldr	r1, [r0, #20]
   19c14:	3b01      	subs	r3, #1
   19c16:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   19c1a:	e7ec      	b.n	19bf6 <virtqueue_kick+0x24>
						prev_idx) != 0;
		}
#endif /*VIRTIO_DRIVER_ONLY*/
	} else {
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   19c1c:	b963      	cbnz	r3, 19c38 <virtqueue_kick+0x66>
			VRING_INVALIDATE(vq->vq_ring.used->flags);
			return (vq->vq_ring.used->flags &
   19c1e:	6a03      	ldr	r3, [r0, #32]
		}
#endif /*VIRTIO_DEVICE_ONLY*/
#ifndef VIRTIO_DRIVER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
   19c20:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   19c22:	43db      	mvns	r3, r3
   19c24:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   19c28:	2b00      	cmp	r3, #0
   19c2a:	d0ea      	beq.n	19c02 <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   19c2c:	6923      	ldr	r3, [r4, #16]
   19c2e:	2b00      	cmp	r3, #0
   19c30:	d0e7      	beq.n	19c02 <virtqueue_kick+0x30>
		vq->notify(vq);
   19c32:	4620      	mov	r0, r4
   19c34:	4798      	blx	r3
   19c36:	e7e4      	b.n	19c02 <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   19c38:	2b01      	cmp	r3, #1
   19c3a:	d1e2      	bne.n	19c02 <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   19c3c:	69c3      	ldr	r3, [r0, #28]
   19c3e:	e7ef      	b.n	19c20 <virtqueue_kick+0x4e>

00019c40 <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   19c40:	69c3      	ldr	r3, [r0, #28]
   19c42:	8e02      	ldrh	r2, [r0, #48]	; 0x30
   19c44:	8859      	ldrh	r1, [r3, #2]
   19c46:	4291      	cmp	r1, r2
   19c48:	d00a      	beq.n	19c60 <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   19c4a:	8941      	ldrh	r1, [r0, #10]
   19c4c:	3901      	subs	r1, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   19c4e:	400a      	ands	r2, r1
   19c50:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   19c54:	889a      	ldrh	r2, [r3, #4]
   19c56:	6983      	ldr	r3, [r0, #24]
   19c58:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   19c5c:	6898      	ldr	r0, [r3, #8]
	return len;
   19c5e:	4770      	bx	lr
		return 0;
   19c60:	2000      	movs	r0, #0
}
   19c62:	4770      	bx	lr

00019c64 <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   19c64:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   19c68:	68c3      	ldr	r3, [r0, #12]
   19c6a:	b103      	cbz	r3, 19c6e <virtqueue_notification+0xa>
		vq->callback(vq);
   19c6c:	4718      	bx	r3
}
   19c6e:	4770      	bx	lr

00019c70 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   19c70:	f04f 32ff 	mov.w	r2, #4294967295
   19c74:	f04f 33ff 	mov.w	r3, #4294967295
   19c78:	f7fb b9bc 	b.w	14ff4 <z_impl_k_sem_take>

00019c7c <rpmsg_unregister_endpoint>:
{
   19c7c:	b570      	push	{r4, r5, r6, lr}
   19c7e:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   19c80:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   19c82:	f105 0658 	add.w	r6, r5, #88	; 0x58
   19c86:	4630      	mov	r0, r6
   19c88:	f7ff fff2 	bl	19c70 <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   19c8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19c8e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
   19c92:	2b7f      	cmp	r3, #127	; 0x7f
   19c94:	d80b      	bhi.n	19cae <rpmsg_unregister_endpoint+0x32>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   19c96:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   19c98:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   19c9a:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   19c9c:	f003 031f 	and.w	r3, r3, #31
   19ca0:	409a      	lsls	r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   19ca2:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   19ca6:	ea23 0302 	bic.w	r3, r3, r2
   19caa:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
	node->next->prev = node->prev;
   19cae:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   19cb2:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   19cb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
	metal_list_del(&ept->node);
   19cb6:	f104 0334 	add.w	r3, r4, #52	; 0x34
   19cba:	6011      	str	r1, [r2, #0]
	node->next = node;
   19cbc:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   19cc0:	2300      	movs	r3, #0
   19cc2:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   19cc4:	4630      	mov	r0, r6
}
   19cc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   19cca:	f7fb b96d 	b.w	14fa8 <z_impl_k_sem_give>

00019cce <rpmsg_send_ns_message>:
{
   19cce:	b510      	push	{r4, lr}
   19cd0:	b08c      	sub	sp, #48	; 0x30
	ns_msg.addr = ept->addr;
   19cd2:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
   19cd4:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   19cd6:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   19cd8:	2220      	movs	r2, #32
   19cda:	4601      	mov	r1, r0
   19cdc:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   19cde:	930a      	str	r3, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   19ce0:	f7fd fee4 	bl	17aac <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   19ce4:	2328      	movs	r3, #40	; 0x28
   19ce6:	2201      	movs	r2, #1
   19ce8:	e9cd 3200 	strd	r3, r2, [sp]
   19cec:	4620      	mov	r0, r4
   19cee:	2235      	movs	r2, #53	; 0x35
   19cf0:	6a61      	ldr	r1, [r4, #36]	; 0x24
   19cf2:	ab02      	add	r3, sp, #8
   19cf4:	f7fa fb7a 	bl	143ec <rpmsg_send_offchannel_raw>
}
   19cf8:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   19cfc:	b00c      	add	sp, #48	; 0x30
   19cfe:	bd10      	pop	{r4, pc}

00019d00 <rpmsg_hold_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   19d00:	b128      	cbz	r0, 19d0e <rpmsg_hold_rx_buffer+0xe>
   19d02:	6a00      	ldr	r0, [r0, #32]
   19d04:	b118      	cbz	r0, 19d0e <rpmsg_hold_rx_buffer+0xe>
   19d06:	b111      	cbz	r1, 19d0e <rpmsg_hold_rx_buffer+0xe>
	if (rdev->ops.hold_rx_buffer)
   19d08:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   19d0a:	b103      	cbz	r3, 19d0e <rpmsg_hold_rx_buffer+0xe>
		rdev->ops.hold_rx_buffer(rdev, rxbuf);
   19d0c:	4718      	bx	r3
}
   19d0e:	4770      	bx	lr

00019d10 <rpmsg_release_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   19d10:	b130      	cbz	r0, 19d20 <rpmsg_release_rx_buffer+0x10>
   19d12:	6a00      	ldr	r0, [r0, #32]
   19d14:	b120      	cbz	r0, 19d20 <rpmsg_release_rx_buffer+0x10>
   19d16:	b119      	cbz	r1, 19d20 <rpmsg_release_rx_buffer+0x10>
	if (rdev->ops.release_rx_buffer)
   19d18:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   19d1c:	b103      	cbz	r3, 19d20 <rpmsg_release_rx_buffer+0x10>
		rdev->ops.release_rx_buffer(rdev, rxbuf);
   19d1e:	4718      	bx	r3
}
   19d20:	4770      	bx	lr

00019d22 <rpmsg_get_tx_payload_buffer>:
	if (!ept || !ept->rdev || !len)
   19d22:	b130      	cbz	r0, 19d32 <rpmsg_get_tx_payload_buffer+0x10>
   19d24:	6a00      	ldr	r0, [r0, #32]
   19d26:	b120      	cbz	r0, 19d32 <rpmsg_get_tx_payload_buffer+0x10>
   19d28:	b119      	cbz	r1, 19d32 <rpmsg_get_tx_payload_buffer+0x10>
	if (rdev->ops.get_tx_payload_buffer)
   19d2a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
   19d2e:	b103      	cbz	r3, 19d32 <rpmsg_get_tx_payload_buffer+0x10>
		return rdev->ops.get_tx_payload_buffer(rdev, len, wait);
   19d30:	4718      	bx	r3
}
   19d32:	2000      	movs	r0, #0
   19d34:	4770      	bx	lr

00019d36 <rpmsg_get_endpoint>:
{
   19d36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19d3a:	4606      	mov	r6, r0
   19d3c:	4688      	mov	r8, r1
   19d3e:	4617      	mov	r7, r2
   19d40:	4699      	mov	r9, r3
	metal_list_for_each(&rdev->endpoints, node) {
   19d42:	6804      	ldr	r4, [r0, #0]
   19d44:	42a6      	cmp	r6, r4
   19d46:	d101      	bne.n	19d4c <rpmsg_get_endpoint+0x16>
	return NULL;
   19d48:	2500      	movs	r5, #0
   19d4a:	e023      	b.n	19d94 <rpmsg_get_endpoint+0x5e>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   19d4c:	1c7a      	adds	r2, r7, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   19d4e:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   19d52:	d002      	beq.n	19d5a <rpmsg_get_endpoint+0x24>
   19d54:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   19d56:	42bb      	cmp	r3, r7
   19d58:	d01c      	beq.n	19d94 <rpmsg_get_endpoint+0x5e>
		if (name)
   19d5a:	f1b8 0f00 	cmp.w	r8, #0
   19d5e:	d101      	bne.n	19d64 <rpmsg_get_endpoint+0x2e>
	metal_list_for_each(&rdev->endpoints, node) {
   19d60:	6824      	ldr	r4, [r4, #0]
   19d62:	e7ef      	b.n	19d44 <rpmsg_get_endpoint+0xe>
			name_match = !strncmp(ept->name, name,
   19d64:	2220      	movs	r2, #32
   19d66:	4641      	mov	r1, r8
   19d68:	4628      	mov	r0, r5
   19d6a:	f7fd fecf 	bl	17b0c <strncmp>
		if (!name || !name_match)
   19d6e:	2800      	cmp	r0, #0
   19d70:	d1f6      	bne.n	19d60 <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   19d72:	f1b9 3fff 	cmp.w	r9, #4294967295
   19d76:	d002      	beq.n	19d7e <rpmsg_get_endpoint+0x48>
   19d78:	6aab      	ldr	r3, [r5, #40]	; 0x28
   19d7a:	454b      	cmp	r3, r9
   19d7c:	d00a      	beq.n	19d94 <rpmsg_get_endpoint+0x5e>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   19d7e:	1c7b      	adds	r3, r7, #1
   19d80:	d00b      	beq.n	19d9a <rpmsg_get_endpoint+0x64>
	metal_list_for_each(&rdev->endpoints, node) {
   19d82:	6824      	ldr	r4, [r4, #0]
   19d84:	42b4      	cmp	r4, r6
   19d86:	d0df      	beq.n	19d48 <rpmsg_get_endpoint+0x12>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   19d88:	f854 3c10 	ldr.w	r3, [r4, #-16]
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   19d8c:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   19d90:	429f      	cmp	r7, r3
   19d92:	d1e7      	bne.n	19d64 <rpmsg_get_endpoint+0x2e>
}
   19d94:	4628      	mov	r0, r5
   19d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   19d9a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   19d9c:	3301      	adds	r3, #1
   19d9e:	d0f9      	beq.n	19d94 <rpmsg_get_endpoint+0x5e>
	metal_list_for_each(&rdev->endpoints, node) {
   19da0:	6824      	ldr	r4, [r4, #0]
   19da2:	42b4      	cmp	r4, r6
   19da4:	d0d0      	beq.n	19d48 <rpmsg_get_endpoint+0x12>
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   19da6:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   19daa:	e7d6      	b.n	19d5a <rpmsg_get_endpoint+0x24>

00019dac <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   19dac:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev)
   19dae:	4604      	mov	r4, r0
   19db0:	b190      	cbz	r0, 19dd8 <rpmsg_destroy_ept+0x2c>
   19db2:	6a03      	ldr	r3, [r0, #32]
   19db4:	b183      	cbz	r3, 19dd8 <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;

	if (ept->name[0] && rdev->support_ns &&
   19db6:	7802      	ldrb	r2, [r0, #0]
   19db8:	b14a      	cbz	r2, 19dce <rpmsg_destroy_ept+0x22>
   19dba:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
   19dbe:	b133      	cbz	r3, 19dce <rpmsg_destroy_ept+0x22>
   19dc0:	6a43      	ldr	r3, [r0, #36]	; 0x24
   19dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   19dc6:	d302      	bcc.n	19dce <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   19dc8:	2101      	movs	r1, #1
   19dca:	f7ff ff80 	bl	19cce <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   19dce:	4620      	mov	r0, r4
}
   19dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   19dd4:	f7ff bf52 	b.w	19c7c <rpmsg_unregister_endpoint>
}
   19dd8:	bd10      	pop	{r4, pc}

00019dda <rpmsg_virtio_hold_rx_buffer>:
	rp_hdr->reserved |= RPMSG_BUF_HELD;
   19dda:	f851 3c08 	ldr.w	r3, [r1, #-8]
   19dde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   19de2:	f841 3c08 	str.w	r3, [r1, #-8]
}
   19de6:	4770      	bx	lr

00019de8 <rpmsg_virtio_tx_callback>:
}
   19de8:	4770      	bx	lr

00019dea <k_sem_give>:
   19dea:	f7fb b8dd 	b.w	14fa8 <z_impl_k_sem_give>

00019dee <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   19dee:	f04f 32ff 	mov.w	r2, #4294967295
   19df2:	f04f 33ff 	mov.w	r3, #4294967295
   19df6:	f7fb b8fd 	b.w	14ff4 <z_impl_k_sem_take>

00019dfa <rpmsg_virtio_release_tx_buffer>:
{
   19dfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19dfc:	460c      	mov	r4, r1
   19dfe:	4605      	mov	r5, r0
	idx = rp_hdr->reserved;
   19e00:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   19e04:	f100 0758 	add.w	r7, r0, #88	; 0x58
   19e08:	4638      	mov	r0, r7
	idx = rp_hdr->reserved;
   19e0a:	b2b6      	uxth	r6, r6
   19e0c:	f7ff ffef 	bl	19dee <__metal_mutex_acquire>
	r_desc->idx = idx;
   19e10:	f824 6c08 	strh.w	r6, [r4, #-8]
	new_node->prev = node->prev;
   19e14:	f8d5 20b8 	ldr.w	r2, [r5, #184]	; 0xb8
	metal_list_add_tail(&rvdev->reclaimer, &r_desc->node);
   19e18:	f1a4 0310 	sub.w	r3, r4, #16
   19e1c:	f844 2c0c 	str.w	r2, [r4, #-12]
   19e20:	f105 02b4 	add.w	r2, r5, #180	; 0xb4
	new_node->next = node;
   19e24:	f844 2c10 	str.w	r2, [r4, #-16]
	new_node->next->prev = new_node;
   19e28:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	new_node->prev->next = new_node;
   19e2c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   19e30:	4638      	mov	r0, r7
   19e32:	6013      	str	r3, [r2, #0]
   19e34:	f7ff ffd9 	bl	19dea <k_sem_give>
}
   19e38:	2000      	movs	r0, #0
   19e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00019e3c <rpmsg_virtio_ns_callback>:
{
   19e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_device *rdev = ept->rdev;
   19e40:	6a05      	ldr	r5, [r0, #32]
	if (len != sizeof(*ns_msg))
   19e42:	2a28      	cmp	r2, #40	; 0x28
{
   19e44:	460f      	mov	r7, r1
	struct metal_io_region *io = rvdev->shbuf_io;
   19e46:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
{
   19e4a:	b088      	sub	sp, #32
	if (len != sizeof(*ns_msg))
   19e4c:	d126      	bne.n	19e9c <rpmsg_virtio_ns_callback+0x60>
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   19e4e:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   19e50:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   19e52:	1a79      	subs	r1, r7, r1
	metal_io_block_read(io,
   19e54:	42a1      	cmp	r1, r4
   19e56:	bf28      	it	cs
   19e58:	f04f 31ff 	movcs.w	r1, #4294967295
   19e5c:	2320      	movs	r3, #32
   19e5e:	466a      	mov	r2, sp
   19e60:	f7ff fcb1 	bl	197c6 <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   19e64:	f105 0658 	add.w	r6, r5, #88	; 0x58
	dest = ns_msg->addr;
   19e68:	f8d7 8020 	ldr.w	r8, [r7, #32]
   19e6c:	4630      	mov	r0, r6
   19e6e:	f7ff ffbe 	bl	19dee <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   19e72:	4643      	mov	r3, r8
   19e74:	f04f 32ff 	mov.w	r2, #4294967295
   19e78:	4669      	mov	r1, sp
   19e7a:	4628      	mov	r0, r5
   19e7c:	f7ff ff5b 	bl	19d36 <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   19e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   19e82:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   19e84:	07db      	lsls	r3, r3, #31
   19e86:	d519      	bpl.n	19ebc <rpmsg_virtio_ns_callback+0x80>
		if (_ept)
   19e88:	b960      	cbnz	r0, 19ea4 <rpmsg_virtio_ns_callback+0x68>
   19e8a:	4630      	mov	r0, r6
   19e8c:	f7ff ffad 	bl	19dea <k_sem_give>
		if (rdev->ns_unbind_cb)
   19e90:	6f6b      	ldr	r3, [r5, #116]	; 0x74
			if (rdev->ns_bind_cb)
   19e92:	b11b      	cbz	r3, 19e9c <rpmsg_virtio_ns_callback+0x60>
				rdev->ns_bind_cb(rdev, name, dest);
   19e94:	4642      	mov	r2, r8
   19e96:	4669      	mov	r1, sp
   19e98:	4628      	mov	r0, r5
   19e9a:	4798      	blx	r3
}
   19e9c:	2000      	movs	r0, #0
   19e9e:	b008      	add	sp, #32
   19ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			_ept->dest_addr = RPMSG_ADDR_ANY;
   19ea4:	f04f 33ff 	mov.w	r3, #4294967295
   19ea8:	6283      	str	r3, [r0, #40]	; 0x28
   19eaa:	4630      	mov	r0, r6
   19eac:	f7ff ff9d 	bl	19dea <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   19eb0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   19eb2:	2b00      	cmp	r3, #0
   19eb4:	d0ec      	beq.n	19e90 <rpmsg_virtio_ns_callback+0x54>
			_ept->ns_unbind_cb(_ept);
   19eb6:	4620      	mov	r0, r4
   19eb8:	4798      	blx	r3
   19eba:	e7e9      	b.n	19e90 <rpmsg_virtio_ns_callback+0x54>
		if (!_ept) {
   19ebc:	b920      	cbnz	r0, 19ec8 <rpmsg_virtio_ns_callback+0x8c>
   19ebe:	4630      	mov	r0, r6
   19ec0:	f7ff ff93 	bl	19dea <k_sem_give>
			if (rdev->ns_bind_cb)
   19ec4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   19ec6:	e7e4      	b.n	19e92 <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = dest;
   19ec8:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
   19ecc:	4630      	mov	r0, r6
   19ece:	f7ff ff8c 	bl	19dea <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   19ed2:	e7e3      	b.n	19e9c <rpmsg_virtio_ns_callback+0x60>

00019ed4 <rpmsg_virtio_get_rx_buffer>:
{
   19ed4:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   19ed6:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
   19eda:	4613      	mov	r3, r2
   19edc:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_HOST) {
   19ede:	b925      	cbnz	r5, 19eea <rpmsg_virtio_get_rx_buffer+0x16>
}
   19ee0:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   19ee2:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   19ee6:	f7ff bde3 	b.w	19ab0 <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   19eea:	2d01      	cmp	r5, #1
   19eec:	d106      	bne.n	19efc <rpmsg_virtio_get_rx_buffer+0x28>
}
   19eee:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   19ef0:	460a      	mov	r2, r1
   19ef2:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   19ef6:	4619      	mov	r1, r3
   19ef8:	f7ff be19 	b.w	19b2e <virtqueue_get_available_buffer>
}
   19efc:	2000      	movs	r0, #0
   19efe:	bc30      	pop	{r4, r5}
   19f00:	4770      	bx	lr

00019f02 <rpmsg_virtio_return_buffer>:
{
   19f02:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   19f04:	460c      	mov	r4, r1
   19f06:	4619      	mov	r1, r3
   19f08:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
   19f0c:	699d      	ldr	r5, [r3, #24]
	if (role == RPMSG_HOST) {
   19f0e:	b95d      	cbnz	r5, 19f28 <rpmsg_virtio_return_buffer+0x26>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   19f10:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   19f12:	e9cd 4202 	strd	r4, r2, [sp, #8]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   19f16:	2301      	movs	r3, #1
   19f18:	462a      	mov	r2, r5
   19f1a:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   19f1e:	a902      	add	r1, sp, #8
   19f20:	f7ff fd6a 	bl	199f8 <virtqueue_add_buffer>
}
   19f24:	b004      	add	sp, #16
   19f26:	bd70      	pop	{r4, r5, r6, pc}
	if (role == RPMSG_REMOTE) {
   19f28:	2d01      	cmp	r5, #1
   19f2a:	d1fb      	bne.n	19f24 <rpmsg_virtio_return_buffer+0x22>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   19f2c:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
}
   19f30:	b004      	add	sp, #16
   19f32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   19f36:	f7fa ba3d 	b.w	143b4 <virtqueue_add_consumed_buffer>

00019f3a <rpmsg_virtio_rx_callback>:
{
   19f3a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   19f3e:	6803      	ldr	r3, [r0, #0]
   19f40:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	metal_mutex_acquire(&rdev->lock);
   19f42:	f107 0658 	add.w	r6, r7, #88	; 0x58
	__metal_mutex_acquire(mutex);
   19f46:	4630      	mov	r0, r6
   19f48:	f7ff ff51 	bl	19dee <__metal_mutex_acquire>
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   19f4c:	4638      	mov	r0, r7
   19f4e:	f10d 020a 	add.w	r2, sp, #10
   19f52:	a903      	add	r1, sp, #12
   19f54:	f7ff ffbe 	bl	19ed4 <rpmsg_virtio_get_rx_buffer>
   19f58:	4604      	mov	r4, r0
   19f5a:	4630      	mov	r0, r6
   19f5c:	f7ff ff45 	bl	19dea <k_sem_give>
	while (rp_hdr) {
   19f60:	2c00      	cmp	r4, #0
   19f62:	d041      	beq.n	19fe8 <rpmsg_virtio_rx_callback+0xae>
		rp_hdr->reserved = idx;
   19f64:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   19f68:	4630      	mov	r0, r6
   19f6a:	60a3      	str	r3, [r4, #8]
   19f6c:	f7ff ff3f 	bl	19dee <__metal_mutex_acquire>
			     rpmsg_ns_unbind_cb ns_unbind_cb);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   19f70:	f04f 33ff 	mov.w	r3, #4294967295
   19f74:	2100      	movs	r1, #0
   19f76:	4638      	mov	r0, r7
   19f78:	6862      	ldr	r2, [r4, #4]
   19f7a:	f7ff fedc 	bl	19d36 <rpmsg_get_endpoint>
   19f7e:	4605      	mov	r5, r0
   19f80:	4630      	mov	r0, r6
   19f82:	f7ff ff32 	bl	19dea <k_sem_give>
		if (ept) {
   19f86:	b17d      	cbz	r5, 19fa8 <rpmsg_virtio_rx_callback+0x6e>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   19f88:	6aab      	ldr	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   19f8a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   19f8c:	3301      	adds	r3, #1
				ept->dest_addr = rp_hdr->src;
   19f8e:	bf08      	it	eq
   19f90:	6823      	ldreq	r3, [r4, #0]
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   19f92:	4628      	mov	r0, r5
				ept->dest_addr = rp_hdr->src;
   19f94:	bf08      	it	eq
   19f96:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   19f98:	6823      	ldr	r3, [r4, #0]
   19f9a:	89a2      	ldrh	r2, [r4, #12]
   19f9c:	9100      	str	r1, [sp, #0]
   19f9e:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   19fa2:	f104 0110 	add.w	r1, r4, #16
   19fa6:	47c0      	blx	r8
   19fa8:	4630      	mov	r0, r6
   19faa:	f7ff ff20 	bl	19dee <__metal_mutex_acquire>
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
   19fae:	68a3      	ldr	r3, [r4, #8]
   19fb0:	2b00      	cmp	r3, #0
   19fb2:	db06      	blt.n	19fc2 <rpmsg_virtio_rx_callback+0x88>
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   19fb4:	4621      	mov	r1, r4
   19fb6:	4638      	mov	r0, r7
   19fb8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   19fbc:	9a03      	ldr	r2, [sp, #12]
   19fbe:	f7ff ffa0 	bl	19f02 <rpmsg_virtio_return_buffer>
		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   19fc2:	4638      	mov	r0, r7
   19fc4:	f10d 020a 	add.w	r2, sp, #10
   19fc8:	a903      	add	r1, sp, #12
   19fca:	f7ff ff83 	bl	19ed4 <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   19fce:	4604      	mov	r4, r0
   19fd0:	b118      	cbz	r0, 19fda <rpmsg_virtio_rx_callback+0xa0>
   19fd2:	4630      	mov	r0, r6
   19fd4:	f7ff ff09 	bl	19dea <k_sem_give>
	while (rp_hdr) {
   19fd8:	e7c4      	b.n	19f64 <rpmsg_virtio_rx_callback+0x2a>
			virtqueue_kick(rvdev->rvq);
   19fda:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   19fde:	f7ff fdf8 	bl	19bd2 <virtqueue_kick>
   19fe2:	4630      	mov	r0, r6
   19fe4:	f7ff ff01 	bl	19dea <k_sem_give>
}
   19fe8:	b004      	add	sp, #16
   19fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019fee <rpmsg_virtio_release_rx_buffer>:
{
   19fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19ff0:	4604      	mov	r4, r0
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   19ff2:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   19ff6:	f100 0758 	add.w	r7, r0, #88	; 0x58
   19ffa:	4638      	mov	r0, r7
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   19ffc:	b2b6      	uxth	r6, r6
{
   19ffe:	460d      	mov	r5, r1
   1a000:	f7ff fef5 	bl	19dee <__metal_mutex_acquire>
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   1a004:	4631      	mov	r1, r6
   1a006:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   1a00a:	f7ff fd8b 	bl	19b24 <virtqueue_get_buffer_length>
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1a00e:	4633      	mov	r3, r6
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   1a010:	4602      	mov	r2, r0
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1a012:	f1a5 0110 	sub.w	r1, r5, #16
   1a016:	4620      	mov	r0, r4
   1a018:	f7ff ff73 	bl	19f02 <rpmsg_virtio_return_buffer>
	virtqueue_kick(rvdev->rvq);
   1a01c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   1a020:	f7ff fdd7 	bl	19bd2 <virtqueue_kick>
   1a024:	4638      	mov	r0, r7
}
   1a026:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1a02a:	f7ff bede 	b.w	19dea <k_sem_give>

0001a02e <rpmsg_virtio_send_offchannel_nocopy>:
{
   1a02e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	hdr = RPMSG_LOCATE_HDR(data);
   1a032:	f1a3 0610 	sub.w	r6, r3, #16
	idx = hdr->reserved;
   1a036:	f853 5c08 	ldr.w	r5, [r3, #-8]
	rp_hdr.reserved = 0;
   1a03a:	2300      	movs	r3, #0
{
   1a03c:	b088      	sub	sp, #32
	rp_hdr.reserved = 0;
   1a03e:	9306      	str	r3, [sp, #24]
	rp_hdr.flags = 0;
   1a040:	f8ad 301e 	strh.w	r3, [sp, #30]
{
   1a044:	4604      	mov	r4, r0
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   1a046:	2310      	movs	r3, #16
	rp_hdr.src = src;
   1a048:	e9cd 1204 	strd	r1, r2, [sp, #16]
{
   1a04c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	io = rvdev->shbuf_io;
   1a04e:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
	rp_hdr.len = len;
   1a052:	f8ad 701c 	strh.w	r7, [sp, #28]
   1a056:	6801      	ldr	r1, [r0, #0]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   1a058:	f8d0 c008 	ldr.w	ip, [r0, #8]
   1a05c:	1a71      	subs	r1, r6, r1
   1a05e:	eb0d 0203 	add.w	r2, sp, r3
   1a062:	4561      	cmp	r1, ip
   1a064:	bf28      	it	cs
   1a066:	f04f 31ff 	movcs.w	r1, #4294967295
	metal_mutex_acquire(&rdev->lock);
   1a06a:	f104 0858 	add.w	r8, r4, #88	; 0x58
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   1a06e:	f7ff fbe3 	bl	19838 <metal_io_block_write>
   1a072:	4640      	mov	r0, r8
   1a074:	f7ff febb 	bl	19dee <__metal_mutex_acquire>
   1a078:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	idx = hdr->reserved;
   1a07c:	b2ad      	uxth	r5, r5
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_HOST)
   1a07e:	699b      	ldr	r3, [r3, #24]
   1a080:	b9cb      	cbnz	r3, 1a0b6 <rpmsg_virtio_send_offchannel_nocopy+0x88>
		buff_len = rvdev->config.h2r_buf_size;
   1a082:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   1a086:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   1a08a:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1a08e:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   1a090:	b9c3      	cbnz	r3, 1a0c4 <rpmsg_virtio_send_offchannel_nocopy+0x96>
		vqbuf.len = len;
   1a092:	e9cd 6202 	strd	r6, r2, [sp, #8]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   1a096:	9600      	str	r6, [sp, #0]
   1a098:	2201      	movs	r2, #1
   1a09a:	a902      	add	r1, sp, #8
   1a09c:	f7ff fcac 	bl	199f8 <virtqueue_add_buffer>
	virtqueue_kick(rvdev->svq);
   1a0a0:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1a0a4:	f7ff fd95 	bl	19bd2 <virtqueue_kick>
   1a0a8:	4640      	mov	r0, r8
   1a0aa:	f7ff fe9e 	bl	19dea <k_sem_give>
}
   1a0ae:	4638      	mov	r0, r7
   1a0b0:	b008      	add	sp, #32
   1a0b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
   1a0b6:	4629      	mov	r1, r5
   1a0b8:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1a0bc:	f7ff fd32 	bl	19b24 <virtqueue_get_buffer_length>
   1a0c0:	4602      	mov	r2, r0
   1a0c2:	e7e0      	b.n	1a086 <rpmsg_virtio_send_offchannel_nocopy+0x58>
	if (role == RPMSG_REMOTE) {
   1a0c4:	2b01      	cmp	r3, #1
   1a0c6:	d1eb      	bne.n	1a0a0 <rpmsg_virtio_send_offchannel_nocopy+0x72>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   1a0c8:	4629      	mov	r1, r5
   1a0ca:	f7fa f973 	bl	143b4 <virtqueue_add_consumed_buffer>
   1a0ce:	e7e7      	b.n	1a0a0 <rpmsg_virtio_send_offchannel_nocopy+0x72>

0001a0d0 <rpmsg_virtio_shm_pool_get_buffer>:
{
   1a0d0:	b510      	push	{r4, lr}
	if (!shpool || size == 0 || shpool->avail < size)
   1a0d2:	b148      	cbz	r0, 1a0e8 <rpmsg_virtio_shm_pool_get_buffer+0x18>
   1a0d4:	b149      	cbz	r1, 1a0ea <rpmsg_virtio_shm_pool_get_buffer+0x1a>
   1a0d6:	6843      	ldr	r3, [r0, #4]
   1a0d8:	428b      	cmp	r3, r1
   1a0da:	d306      	bcc.n	1a0ea <rpmsg_virtio_shm_pool_get_buffer+0x1a>
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1a0dc:	6882      	ldr	r2, [r0, #8]
   1a0de:	6804      	ldr	r4, [r0, #0]
   1a0e0:	1ad2      	subs	r2, r2, r3
	shpool->avail -= size;
   1a0e2:	1a5b      	subs	r3, r3, r1
   1a0e4:	6043      	str	r3, [r0, #4]
	return buffer;
   1a0e6:	18a0      	adds	r0, r4, r2
}
   1a0e8:	bd10      	pop	{r4, pc}
		return NULL;
   1a0ea:	2000      	movs	r0, #0
   1a0ec:	e7fc      	b.n	1a0e8 <rpmsg_virtio_shm_pool_get_buffer+0x18>

0001a0ee <rpmsg_virtio_get_tx_payload_buffer>:
{
   1a0ee:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1a0f2:	4605      	mov	r5, r0
   1a0f4:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   1a0f8:	460e      	mov	r6, r1
	return rvdev->vdev->func->get_status(rvdev->vdev);
   1a0fa:	6a03      	ldr	r3, [r0, #32]
   1a0fc:	4617      	mov	r7, r2
   1a0fe:	681b      	ldr	r3, [r3, #0]
   1a100:	4798      	blx	r3
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
   1a102:	0743      	lsls	r3, r0, #29
   1a104:	d403      	bmi.n	1a10e <rpmsg_virtio_get_tx_payload_buffer+0x20>
		return NULL;
   1a106:	2000      	movs	r0, #0
}
   1a108:	b002      	add	sp, #8
   1a10a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   1a10e:	f643 2398 	movw	r3, #15000	; 0x3a98
   1a112:	2f00      	cmp	r7, #0
   1a114:	bf18      	it	ne
   1a116:	461f      	movne	r7, r3
		metal_mutex_acquire(&rdev->lock);
   1a118:	f105 0858 	add.w	r8, r5, #88	; 0x58
	node = metal_list_first(&rvdev->reclaimer);
   1a11c:	f105 0ab4 	add.w	sl, r5, #180	; 0xb4
   1a120:	4640      	mov	r0, r8
   1a122:	f7ff fe64 	bl	19dee <__metal_mutex_acquire>
	return list->next == list;
   1a126:	f8d5 40b4 	ldr.w	r4, [r5, #180]	; 0xb4
	return rvdev->vdev->role;
   1a12a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
}

static inline struct metal_list *metal_list_first(struct metal_list *list)
{
	return metal_list_is_empty(list) ? NULL : list->next;
   1a12e:	4554      	cmp	r4, sl
   1a130:	f8d3 9018 	ldr.w	r9, [r3, #24]
   1a134:	d025      	beq.n	1a182 <rpmsg_virtio_get_tx_payload_buffer+0x94>
	if (node) {
   1a136:	b324      	cbz	r4, 1a182 <rpmsg_virtio_get_tx_payload_buffer+0x94>
	node->next->prev = node->prev;
   1a138:	e9d4 2300 	ldrd	r2, r3, [r4]
   1a13c:	6053      	str	r3, [r2, #4]
	node->prev->next = node->next;
   1a13e:	6822      	ldr	r2, [r4, #0]
   1a140:	601a      	str	r2, [r3, #0]
	node->next = node;
   1a142:	e9c4 4400 	strd	r4, r4, [r4]
		if (role == RPMSG_HOST)
   1a146:	f1b9 0f00 	cmp.w	r9, #0
   1a14a:	d10e      	bne.n	1a16a <rpmsg_virtio_get_tx_payload_buffer+0x7c>
			*len = rvdev->config.h2r_buf_size;
   1a14c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   1a150:	6033      	str	r3, [r6, #0]
   1a152:	4640      	mov	r0, r8
   1a154:	f7ff fe49 	bl	19dea <k_sem_give>
	rp_hdr->reserved = idx;
   1a158:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return RPMSG_LOCATE_DATA(rp_hdr);
   1a15c:	f104 0010 	add.w	r0, r4, #16
	rp_hdr->reserved = idx;
   1a160:	60a3      	str	r3, [r4, #8]
	*len -= sizeof(struct rpmsg_hdr);
   1a162:	6833      	ldr	r3, [r6, #0]
   1a164:	3b10      	subs	r3, #16
   1a166:	6033      	str	r3, [r6, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
   1a168:	e7ce      	b.n	1a108 <rpmsg_virtio_get_tx_payload_buffer+0x1a>
		if (role == RPMSG_REMOTE) {
   1a16a:	f1b9 0f01 	cmp.w	r9, #1
   1a16e:	d1f0      	bne.n	1a152 <rpmsg_virtio_get_tx_payload_buffer+0x64>
			*idx = r_desc->idx;
   1a170:	8921      	ldrh	r1, [r4, #8]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   1a172:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
			*idx = r_desc->idx;
   1a176:	f8ad 1006 	strh.w	r1, [sp, #6]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   1a17a:	f7ff fcd3 	bl	19b24 <virtqueue_get_buffer_length>
   1a17e:	6030      	str	r0, [r6, #0]
   1a180:	e7e7      	b.n	1a152 <rpmsg_virtio_get_tx_payload_buffer+0x64>
	} else if (role == RPMSG_HOST) {
   1a182:	f1b9 0f00 	cmp.w	r9, #0
   1a186:	d12a      	bne.n	1a1de <rpmsg_virtio_get_tx_payload_buffer+0xf0>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   1a188:	4631      	mov	r1, r6
   1a18a:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   1a18e:	f10d 0206 	add.w	r2, sp, #6
   1a192:	f7ff fc8d 	bl	19ab0 <virtqueue_get_buffer>
		if (!data && rvdev->svq->vq_free_cnt) {
   1a196:	4604      	mov	r4, r0
   1a198:	2800      	cmp	r0, #0
   1a19a:	d1da      	bne.n	1a152 <rpmsg_virtio_get_tx_payload_buffer+0x64>
   1a19c:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
   1a1a0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1a1a2:	b953      	cbnz	r3, 1a1ba <rpmsg_virtio_get_tx_payload_buffer+0xcc>
   1a1a4:	4640      	mov	r0, r8
   1a1a6:	f7ff fe20 	bl	19dea <k_sem_give>
		if (rp_hdr || !tick_count)
   1a1aa:	2f00      	cmp	r7, #0
   1a1ac:	d0ab      	beq.n	1a106 <rpmsg_virtio_get_tx_payload_buffer+0x18>
	return z_impl_k_sleep(timeout);
   1a1ae:	2021      	movs	r0, #33	; 0x21
   1a1b0:	2100      	movs	r1, #0
   1a1b2:	f7fb fc17 	bl	159e4 <z_impl_k_sleep>
		tick_count--;
   1a1b6:	3f01      	subs	r7, #1
		metal_mutex_acquire(&rdev->lock);
   1a1b8:	e7b2      	b.n	1a120 <rpmsg_virtio_get_tx_payload_buffer+0x32>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   1a1ba:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
   1a1be:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
   1a1c2:	f7ff ff85 	bl	1a0d0 <rpmsg_virtio_shm_pool_get_buffer>
   1a1c6:	4604      	mov	r4, r0
			*len = rvdev->config.h2r_buf_size;
   1a1c8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
			*idx = 0;
   1a1cc:	f8ad 9006 	strh.w	r9, [sp, #6]
			*len = rvdev->config.h2r_buf_size;
   1a1d0:	6033      	str	r3, [r6, #0]
   1a1d2:	4640      	mov	r0, r8
   1a1d4:	f7ff fe09 	bl	19dea <k_sem_give>
		if (rp_hdr || !tick_count)
   1a1d8:	2c00      	cmp	r4, #0
   1a1da:	d0e6      	beq.n	1a1aa <rpmsg_virtio_get_tx_payload_buffer+0xbc>
   1a1dc:	e7bc      	b.n	1a158 <rpmsg_virtio_get_tx_payload_buffer+0x6a>
	} else if (role == RPMSG_REMOTE) {
   1a1de:	f1b9 0f01 	cmp.w	r9, #1
   1a1e2:	d1df      	bne.n	1a1a4 <rpmsg_virtio_get_tx_payload_buffer+0xb6>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   1a1e4:	4632      	mov	r2, r6
   1a1e6:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   1a1ea:	f10d 0106 	add.w	r1, sp, #6
   1a1ee:	f7ff fc9e 	bl	19b2e <virtqueue_get_available_buffer>
   1a1f2:	4604      	mov	r4, r0
   1a1f4:	e7ed      	b.n	1a1d2 <rpmsg_virtio_get_tx_payload_buffer+0xe4>

0001a1f6 <rpmsg_virtio_init_shm_pool>:
	if (!shpool || !shb || size == 0)
   1a1f6:	b120      	cbz	r0, 1a202 <rpmsg_virtio_init_shm_pool+0xc>
   1a1f8:	b119      	cbz	r1, 1a202 <rpmsg_virtio_init_shm_pool+0xc>
   1a1fa:	b112      	cbz	r2, 1a202 <rpmsg_virtio_init_shm_pool+0xc>
	shpool->avail = size;
   1a1fc:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   1a200:	6001      	str	r1, [r0, #0]
}
   1a202:	4770      	bx	lr

0001a204 <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
   1a204:	b510      	push	{r4, lr}
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	if (rvdev) {
   1a206:	4604      	mov	r4, r0
   1a208:	b918      	cbnz	r0, 1a212 <rpmsg_deinit_vdev+0xe>
		rvdev->rvq = 0;
		rvdev->svq = 0;

		metal_mutex_deinit(&rdev->lock);
	}
}
   1a20a:	bd10      	pop	{r4, pc}
			rpmsg_destroy_ept(ept);
   1a20c:	3834      	subs	r0, #52	; 0x34
   1a20e:	f7ff fdcd 	bl	19dac <rpmsg_destroy_ept>
	return list->next == list;
   1a212:	6820      	ldr	r0, [r4, #0]
		while (!metal_list_is_empty(&rdev->endpoints)) {
   1a214:	4284      	cmp	r4, r0
   1a216:	d1f9      	bne.n	1a20c <rpmsg_deinit_vdev+0x8>
		rvdev->rvq = 0;
   1a218:	2300      	movs	r3, #0
		rvdev->svq = 0;
   1a21a:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
}
   1a21e:	e7f4      	b.n	1a20a <rpmsg_deinit_vdev+0x6>

0001a220 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   1a220:	4770      	bx	lr

0001a222 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1a222:	b140      	cbz	r0, 1a236 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1a224:	68c3      	ldr	r3, [r0, #12]
   1a226:	7858      	ldrb	r0, [r3, #1]
   1a228:	f010 0001 	ands.w	r0, r0, #1
   1a22c:	bf1e      	ittt	ne
   1a22e:	7818      	ldrbne	r0, [r3, #0]
   1a230:	fab0 f080 	clzne	r0, r0
   1a234:	0940      	lsrne	r0, r0, #5
}
   1a236:	4770      	bx	lr

0001a238 <z_early_memset>:
	(void) memset(dst, c, n);
   1a238:	f7fd bc96 	b.w	17b68 <memset>

0001a23c <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   1a23c:	f7fd bc89 	b.w	17b52 <memcpy>

0001a240 <k_heap_init>:
{
   1a240:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   1a242:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1a246:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1a24a:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1a24c:	f7fc b92b 	b.w	164a6 <sys_heap_init>

0001a250 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1a250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a254:	b085      	sub	sp, #20
   1a256:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   1a25a:	4607      	mov	r7, r0
   1a25c:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1a25e:	4650      	mov	r0, sl
   1a260:	4621      	mov	r1, r4
{
   1a262:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1a264:	f000 fbc0 	bl	1a9e8 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1a268:	f1b4 3fff 	cmp.w	r4, #4294967295
   1a26c:	bf08      	it	eq
   1a26e:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1a272:	4605      	mov	r5, r0
   1a274:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1a276:	bf04      	itt	eq
   1a278:	f04f 35ff 	moveq.w	r5, #4294967295
   1a27c:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1a280:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   1a284:	f04f 0320 	mov.w	r3, #32
   1a288:	f3ef 8411 	mrs	r4, BASEPRI
   1a28c:	f383 8812 	msr	BASEPRI_MAX, r3
   1a290:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1a294:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1a298:	464a      	mov	r2, r9
   1a29a:	4641      	mov	r1, r8
   1a29c:	4638      	mov	r0, r7
   1a29e:	f7fc f89b 	bl	163d8 <sys_heap_aligned_alloc>
   1a2a2:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   1a2a4:	f7fb fd70 	bl	15d88 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1a2a8:	9b03      	ldr	r3, [sp, #12]
   1a2aa:	b13b      	cbz	r3, 1a2bc <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   1a2ac:	f384 8811 	msr	BASEPRI, r4
   1a2b0:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1a2b4:	4618      	mov	r0, r3
   1a2b6:	b005      	add	sp, #20
   1a2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   1a2bc:	1a28      	subs	r0, r5, r0
   1a2be:	eb66 0101 	sbc.w	r1, r6, r1
   1a2c2:	2801      	cmp	r0, #1
   1a2c4:	f171 0200 	sbcs.w	r2, r1, #0
   1a2c8:	dbf0      	blt.n	1a2ac <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1a2ca:	e9cd 0100 	strd	r0, r1, [sp]
   1a2ce:	465a      	mov	r2, fp
   1a2d0:	4621      	mov	r1, r4
   1a2d2:	4650      	mov	r0, sl
   1a2d4:	f7fb fa06 	bl	156e4 <z_pend_curr>
	__asm__ volatile(
   1a2d8:	f04f 0320 	mov.w	r3, #32
   1a2dc:	f3ef 8411 	mrs	r4, BASEPRI
   1a2e0:	f383 8812 	msr	BASEPRI_MAX, r3
   1a2e4:	f3bf 8f6f 	isb	sy
	return k;
   1a2e8:	e7d6      	b.n	1a298 <k_heap_aligned_alloc+0x48>

0001a2ea <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1a2ea:	b538      	push	{r3, r4, r5, lr}
   1a2ec:	4604      	mov	r4, r0
   1a2ee:	f04f 0320 	mov.w	r3, #32
   1a2f2:	f3ef 8511 	mrs	r5, BASEPRI
   1a2f6:	f383 8812 	msr	BASEPRI_MAX, r3
   1a2fa:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   1a2fe:	f7fc f833 	bl	16368 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1a302:	f104 000c 	add.w	r0, r4, #12
   1a306:	f000 fb0c 	bl	1a922 <z_unpend_all>
   1a30a:	b130      	cbz	r0, 1a31a <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   1a30c:	4629      	mov	r1, r5
   1a30e:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1a312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   1a316:	f7fb ba49 	b.w	157ac <z_reschedule>
	__asm__ volatile(
   1a31a:	f385 8811 	msr	BASEPRI, r5
   1a31e:	f3bf 8f6f 	isb	sy
}
   1a322:	bd38      	pop	{r3, r4, r5, pc}

0001a324 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1a324:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   1a328:	4313      	orrs	r3, r2
   1a32a:	f013 0303 	ands.w	r3, r3, #3
   1a32e:	d10c      	bne.n	1a34a <create_free_list+0x26>
	slab->free_list = NULL;
   1a330:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1a332:	6881      	ldr	r1, [r0, #8]
   1a334:	4299      	cmp	r1, r3
   1a336:	d801      	bhi.n	1a33c <create_free_list+0x18>
	return 0;
   1a338:	2000      	movs	r0, #0
   1a33a:	4770      	bx	lr
		*(char **)p = slab->free_list;
   1a33c:	6941      	ldr	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1a33e:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   1a340:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   1a342:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   1a344:	6142      	str	r2, [r0, #20]
		p += slab->block_size;
   1a346:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   1a348:	e7f3      	b.n	1a332 <create_free_list+0xe>
		return -EINVAL;
   1a34a:	f06f 0015 	mvn.w	r0, #21
}
   1a34e:	4770      	bx	lr

0001a350 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1a350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a352:	4604      	mov	r4, r0
   1a354:	460d      	mov	r5, r1
	__asm__ volatile(
   1a356:	f04f 0320 	mov.w	r3, #32
   1a35a:	f3ef 8611 	mrs	r6, BASEPRI
   1a35e:	f383 8812 	msr	BASEPRI_MAX, r3
   1a362:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1a366:	6947      	ldr	r7, [r0, #20]
   1a368:	b977      	cbnz	r7, 1a388 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1a36a:	f000 fa90 	bl	1a88e <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1a36e:	b158      	cbz	r0, 1a388 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1a370:	682a      	ldr	r2, [r5, #0]
   1a372:	67c7      	str	r7, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1a374:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   1a376:	f000 fa2b 	bl	1a7d0 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1a37a:	4631      	mov	r1, r6
   1a37c:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1a380:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   1a384:	f7fb ba12 	b.w	157ac <z_reschedule>
	**(char ***) mem = slab->free_list;
   1a388:	682b      	ldr	r3, [r5, #0]
   1a38a:	6962      	ldr	r2, [r4, #20]
   1a38c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1a38e:	682b      	ldr	r3, [r5, #0]
   1a390:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1a392:	69a3      	ldr	r3, [r4, #24]
   1a394:	3b01      	subs	r3, #1
   1a396:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1a398:	f386 8811 	msr	BASEPRI, r6
   1a39c:	f3bf 8f6f 	isb	sy
}
   1a3a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a3a2 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1a3a2:	f3ef 8005 	mrs	r0, IPSR
}
   1a3a6:	3800      	subs	r0, #0
   1a3a8:	bf18      	it	ne
   1a3aa:	2001      	movne	r0, #1
   1a3ac:	4770      	bx	lr

0001a3ae <z_impl_k_thread_name_set>:
}
   1a3ae:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1a3b2:	4770      	bx	lr

0001a3b4 <k_thread_name_get>:
}
   1a3b4:	2000      	movs	r0, #0
   1a3b6:	4770      	bx	lr

0001a3b8 <z_impl_k_thread_start>:
	z_sched_start(thread);
   1a3b8:	f7fb ba0a 	b.w	157d0 <z_sched_start>

0001a3bc <z_pm_save_idle_exit>:
{
   1a3bc:	b508      	push	{r3, lr}
	pm_system_resume();
   1a3be:	f7f0 fccd 	bl	ad5c <pm_system_resume>
}
   1a3c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   1a3c6:	f7ff b8e1 	b.w	1958c <sys_clock_idle_exit>

0001a3ca <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   1a3ca:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1a3ce:	428b      	cmp	r3, r1
   1a3d0:	d001      	beq.n	1a3d6 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   1a3d2:	f7fb b9a5 	b.w	15720 <z_set_prio>
}
   1a3d6:	2000      	movs	r0, #0
   1a3d8:	4770      	bx	lr

0001a3da <z_impl_k_mutex_init>:
{
   1a3da:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1a3dc:	2000      	movs	r0, #0
   1a3de:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   1a3e2:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   1a3e6:	4770      	bx	lr

0001a3e8 <queue_insert>:
{
   1a3e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a3ec:	4699      	mov	r9, r3
   1a3ee:	4604      	mov	r4, r0
   1a3f0:	460d      	mov	r5, r1
   1a3f2:	4690      	mov	r8, r2
   1a3f4:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1a3f8:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1a3fc:	f04f 0220 	mov.w	r2, #32
   1a400:	f3ef 8711 	mrs	r7, BASEPRI
   1a404:	f382 8812 	msr	BASEPRI_MAX, r2
   1a408:	f3bf 8f6f 	isb	sy
	if (is_append) {
   1a40c:	b103      	cbz	r3, 1a410 <queue_insert+0x28>
	return list->tail;
   1a40e:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1a410:	4630      	mov	r0, r6
   1a412:	f000 fa3c 	bl	1a88e <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1a416:	b158      	cbz	r0, 1a430 <queue_insert+0x48>
   1a418:	2300      	movs	r3, #0
   1a41a:	f8c0 8014 	str.w	r8, [r0, #20]
   1a41e:	67c3      	str	r3, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   1a420:	f000 f9d6 	bl	1a7d0 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   1a424:	4630      	mov	r0, r6
   1a426:	4639      	mov	r1, r7
   1a428:	f7fb f9c0 	bl	157ac <z_reschedule>
		return 0;
   1a42c:	2000      	movs	r0, #0
   1a42e:	e00c      	b.n	1a44a <queue_insert+0x62>
	if (alloc) {
   1a430:	f1b9 0f00 	cmp.w	r9, #0
   1a434:	d01b      	beq.n	1a46e <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   1a436:	2108      	movs	r1, #8
   1a438:	f7fb fdf4 	bl	16024 <z_thread_aligned_alloc>
		if (anode == NULL) {
   1a43c:	b938      	cbnz	r0, 1a44e <queue_insert+0x66>
	__asm__ volatile(
   1a43e:	f387 8811 	msr	BASEPRI, r7
   1a442:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1a446:	f06f 000b 	mvn.w	r0, #11
}
   1a44a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   1a44e:	2201      	movs	r2, #1
		anode->data = data;
   1a450:	f8c0 8004 	str.w	r8, [r0, #4]
   1a454:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1a456:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a458:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   1a45c:	b95d      	cbnz	r5, 1a476 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a45e:	6822      	ldr	r2, [r4, #0]
   1a460:	430a      	orrs	r2, r1
   1a462:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1a464:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   1a466:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1a468:	b96a      	cbnz	r2, 1a486 <queue_insert+0x9e>
	list->tail = node;
   1a46a:	6060      	str	r0, [r4, #4]
}
   1a46c:	e00b      	b.n	1a486 <queue_insert+0x9e>
}
   1a46e:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   1a470:	f8c8 9000 	str.w	r9, [r8]
}
   1a474:	e7ef      	b.n	1a456 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1a476:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1a478:	2a03      	cmp	r2, #3
   1a47a:	d810      	bhi.n	1a49e <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a47c:	6001      	str	r1, [r0, #0]
	return list->tail;
   1a47e:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1a480:	b939      	cbnz	r1, 1a492 <queue_insert+0xaa>
	list->head = node;
   1a482:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1a486:	2104      	movs	r1, #4
   1a488:	f104 0010 	add.w	r0, r4, #16
   1a48c:	f000 fc37 	bl	1acfe <z_handle_obj_poll_events>
   1a490:	e7c8      	b.n	1a424 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1a492:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a494:	f002 0203 	and.w	r2, r2, #3
   1a498:	4302      	orrs	r2, r0
   1a49a:	600a      	str	r2, [r1, #0]
   1a49c:	e7e5      	b.n	1a46a <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1a49e:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a4a2:	430a      	orrs	r2, r1
   1a4a4:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1a4a6:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a4a8:	f002 0203 	and.w	r2, r2, #3
   1a4ac:	ea40 0302 	orr.w	r3, r0, r2
   1a4b0:	602b      	str	r3, [r5, #0]
}
   1a4b2:	e7e8      	b.n	1a486 <queue_insert+0x9e>

0001a4b4 <z_queue_node_peek>:
{
   1a4b4:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1a4b6:	4604      	mov	r4, r0
   1a4b8:	b130      	cbz	r0, 1a4c8 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1a4ba:	6802      	ldr	r2, [r0, #0]
   1a4bc:	0793      	lsls	r3, r2, #30
   1a4be:	d003      	beq.n	1a4c8 <z_queue_node_peek+0x14>
		ret = anode->data;
   1a4c0:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1a4c2:	b109      	cbz	r1, 1a4c8 <z_queue_node_peek+0x14>
			k_free(anode);
   1a4c4:	f000 fc41 	bl	1ad4a <k_free>
}
   1a4c8:	4620      	mov	r0, r4
   1a4ca:	bd10      	pop	{r4, pc}

0001a4cc <z_impl_k_queue_init>:
	list->head = NULL;
   1a4cc:	2300      	movs	r3, #0
	list->tail = NULL;
   1a4ce:	e9c0 3300 	strd	r3, r3, [r0]
   1a4d2:	f100 0308 	add.w	r3, r0, #8
   1a4d6:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   1a4da:	f100 0310 	add.w	r3, r0, #16
   1a4de:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   1a4e2:	4770      	bx	lr

0001a4e4 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   1a4e4:	2301      	movs	r3, #1
{
   1a4e6:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1a4e8:	9300      	str	r3, [sp, #0]
   1a4ea:	2300      	movs	r3, #0
{
   1a4ec:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1a4ee:	4619      	mov	r1, r3
   1a4f0:	f7ff ff7a 	bl	1a3e8 <queue_insert>
}
   1a4f4:	b003      	add	sp, #12
   1a4f6:	f85d fb04 	ldr.w	pc, [sp], #4

0001a4fa <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   1a4fa:	2300      	movs	r3, #0
{
   1a4fc:	b507      	push	{r0, r1, r2, lr}
   1a4fe:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1a500:	9300      	str	r3, [sp, #0]
   1a502:	4619      	mov	r1, r3
   1a504:	f7ff ff70 	bl	1a3e8 <queue_insert>
}
   1a508:	b003      	add	sp, #12
   1a50a:	f85d fb04 	ldr.w	pc, [sp], #4

0001a50e <z_impl_k_queue_peek_head>:
	return true;
}

void *z_impl_k_queue_peek_head(struct k_queue *queue)
{
	void *ret = z_queue_node_peek(sys_sflist_peek_head(&queue->data_q), false);
   1a50e:	2100      	movs	r1, #0
   1a510:	6800      	ldr	r0, [r0, #0]
   1a512:	f7ff bfcf 	b.w	1a4b4 <z_queue_node_peek>

0001a516 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1a516:	b15a      	cbz	r2, 1a530 <z_impl_k_sem_init+0x1a>
   1a518:	428a      	cmp	r2, r1
   1a51a:	d309      	bcc.n	1a530 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1a51c:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1a520:	e9c0 1202 	strd	r1, r2, [r0, #8]
   1a524:	e9c0 0000 	strd	r0, r0, [r0]
   1a528:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1a52c:	2000      	movs	r0, #0
   1a52e:	4770      	bx	lr
		return -EINVAL;
   1a530:	f06f 0015 	mvn.w	r0, #21
}
   1a534:	4770      	bx	lr

0001a536 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   1a536:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   1a538:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   1a53a:	408b      	lsls	r3, r1
   1a53c:	ea22 0303 	bic.w	r3, r2, r3
   1a540:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   1a542:	fa22 f001 	lsr.w	r0, r2, r1
}
   1a546:	f000 0001 	and.w	r0, r0, #1
   1a54a:	4770      	bx	lr

0001a54c <unschedule_locked>:
{
   1a54c:	b510      	push	{r4, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1a54e:	2103      	movs	r1, #3
{
   1a550:	4604      	mov	r4, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1a552:	300c      	adds	r0, #12
   1a554:	f7ff ffef 	bl	1a536 <flag_test_and_clear>
   1a558:	b130      	cbz	r0, 1a568 <unschedule_locked+0x1c>
		ret = z_abort_timeout(&dwork->timeout) == 0;
   1a55a:	f104 0010 	add.w	r0, r4, #16
   1a55e:	f000 fa13 	bl	1a988 <z_abort_timeout>
   1a562:	fab0 f080 	clz	r0, r0
   1a566:	0940      	lsrs	r0, r0, #5
}
   1a568:	bd10      	pop	{r4, pc}

0001a56a <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   1a56a:	b120      	cbz	r0, 1a576 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1a56c:	2200      	movs	r2, #0
   1a56e:	3090      	adds	r0, #144	; 0x90
   1a570:	4611      	mov	r1, r2
   1a572:	f000 b9e6 	b.w	1a942 <z_sched_wake>
}
   1a576:	4770      	bx	lr

0001a578 <cancel_async_locked>:
{
   1a578:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1a57a:	68c3      	ldr	r3, [r0, #12]
{
   1a57c:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1a57e:	f3c3 0640 	ubfx	r6, r3, #1, #1
   1a582:	079b      	lsls	r3, r3, #30
   1a584:	d416      	bmi.n	1a5b4 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   1a586:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   1a588:	2102      	movs	r1, #2
   1a58a:	300c      	adds	r0, #12
   1a58c:	f7ff ffd3 	bl	1a536 <flag_test_and_clear>
   1a590:	b180      	cbz	r0, 1a5b4 <cancel_async_locked+0x3c>
	return list->head;
   1a592:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1a596:	b16a      	cbz	r2, 1a5b4 <cancel_async_locked+0x3c>
   1a598:	4294      	cmp	r4, r2
   1a59a:	d11d      	bne.n	1a5d8 <cancel_async_locked+0x60>
	return node->next;
   1a59c:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1a59e:	b99e      	cbnz	r6, 1a5c8 <cancel_async_locked+0x50>
   1a5a0:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	list->head = node;
   1a5a4:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
Z_GENLIST_REMOVE(slist, snode)
   1a5a8:	429c      	cmp	r4, r3
   1a5aa:	d101      	bne.n	1a5b0 <cancel_async_locked+0x38>
	list->tail = node;
   1a5ac:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
	parent->next = child;
   1a5b0:	2300      	movs	r3, #0
   1a5b2:	6023      	str	r3, [r4, #0]
	return *flagp;
   1a5b4:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   1a5b6:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   1a5ba:	bf1e      	ittt	ne
   1a5bc:	f043 0302 	orrne.w	r3, r3, #2
   1a5c0:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   1a5c2:	f040 0002 	orrne.w	r0, r0, #2
}
   1a5c6:	bd70      	pop	{r4, r5, r6, pc}
   1a5c8:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1a5ca:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
   1a5ce:	4294      	cmp	r4, r2
	list->tail = node;
   1a5d0:	bf08      	it	eq
   1a5d2:	f8c5 608c 	streq.w	r6, [r5, #140]	; 0x8c
}
   1a5d6:	e7eb      	b.n	1a5b0 <cancel_async_locked+0x38>
	return node->next;
   1a5d8:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1a5da:	6812      	ldr	r2, [r2, #0]
   1a5dc:	e7db      	b.n	1a596 <cancel_async_locked+0x1e>

0001a5de <work_timeout>:
{
   1a5de:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1a5e0:	4604      	mov	r4, r0
	__asm__ volatile(
   1a5e2:	f04f 0320 	mov.w	r3, #32
   1a5e6:	f3ef 8511 	mrs	r5, BASEPRI
   1a5ea:	f383 8812 	msr	BASEPRI_MAX, r3
   1a5ee:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   1a5f2:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1a5f4:	f1a0 0610 	sub.w	r6, r0, #16
   1a5f8:	2103      	movs	r1, #3
   1a5fa:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   1a5fc:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1a5fe:	f7ff ff9a 	bl	1a536 <flag_test_and_clear>
   1a602:	b128      	cbz	r0, 1a610 <work_timeout+0x32>
		queue = dw->queue;
   1a604:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   1a606:	4630      	mov	r0, r6
   1a608:	a901      	add	r1, sp, #4
		queue = dw->queue;
   1a60a:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   1a60c:	f7fa fdee 	bl	151ec <submit_to_queue_locked>
	__asm__ volatile(
   1a610:	f385 8811 	msr	BASEPRI, r5
   1a614:	f3bf 8f6f 	isb	sy
}
   1a618:	b002      	add	sp, #8
   1a61a:	bd70      	pop	{r4, r5, r6, pc}

0001a61c <k_work_init>:
{
   1a61c:	b538      	push	{r3, r4, r5, lr}
   1a61e:	4604      	mov	r4, r0
   1a620:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1a622:	2210      	movs	r2, #16
   1a624:	2100      	movs	r1, #0
   1a626:	f7fd fa9f 	bl	17b68 <memset>
   1a62a:	6065      	str	r5, [r4, #4]
}
   1a62c:	bd38      	pop	{r3, r4, r5, pc}

0001a62e <k_work_busy_get>:
	__asm__ volatile(
   1a62e:	f04f 0220 	mov.w	r2, #32
   1a632:	f3ef 8311 	mrs	r3, BASEPRI
   1a636:	f382 8812 	msr	BASEPRI_MAX, r2
   1a63a:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   1a63e:	68c0      	ldr	r0, [r0, #12]
   1a640:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   1a644:	f383 8811 	msr	BASEPRI, r3
   1a648:	f3bf 8f6f 	isb	sy
}
   1a64c:	4770      	bx	lr

0001a64e <z_work_submit_to_queue>:
{
   1a64e:	b513      	push	{r0, r1, r4, lr}
   1a650:	9001      	str	r0, [sp, #4]
   1a652:	4608      	mov	r0, r1
	__asm__ volatile(
   1a654:	f04f 0320 	mov.w	r3, #32
   1a658:	f3ef 8411 	mrs	r4, BASEPRI
   1a65c:	f383 8812 	msr	BASEPRI_MAX, r3
   1a660:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   1a664:	a901      	add	r1, sp, #4
   1a666:	f7fa fdc1 	bl	151ec <submit_to_queue_locked>
	__asm__ volatile(
   1a66a:	f384 8811 	msr	BASEPRI, r4
   1a66e:	f3bf 8f6f 	isb	sy
}
   1a672:	b002      	add	sp, #8
   1a674:	bd10      	pop	{r4, pc}

0001a676 <k_work_submit_to_queue>:
{
   1a676:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   1a678:	f7ff ffe9 	bl	1a64e <z_work_submit_to_queue>
	if (ret > 0) {
   1a67c:	1e04      	subs	r4, r0, #0
   1a67e:	dd09      	ble.n	1a694 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   1a680:	f04f 0320 	mov.w	r3, #32
   1a684:	f3ef 8011 	mrs	r0, BASEPRI
   1a688:	f383 8812 	msr	BASEPRI_MAX, r3
   1a68c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1a690:	f000 f931 	bl	1a8f6 <z_reschedule_irqlock>
}
   1a694:	4620      	mov	r0, r4
   1a696:	bd10      	pop	{r4, pc}

0001a698 <k_work_queue_init>:
{
   1a698:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   1a69a:	22a8      	movs	r2, #168	; 0xa8
   1a69c:	2100      	movs	r1, #0
   1a69e:	f7fd fa63 	bl	17b68 <memset>
}
   1a6a2:	bd08      	pop	{r3, pc}

0001a6a4 <k_work_init_delayable>:
{
   1a6a4:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   1a6a6:	2230      	movs	r2, #48	; 0x30
{
   1a6a8:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   1a6aa:	2100      	movs	r1, #0
{
   1a6ac:	4604      	mov	r4, r0
	*dwork = (struct k_work_delayable){
   1a6ae:	f7fd fa5b 	bl	17b68 <memset>
   1a6b2:	f44f 7380 	mov.w	r3, #256	; 0x100
   1a6b6:	6065      	str	r5, [r4, #4]
   1a6b8:	60e3      	str	r3, [r4, #12]
}
   1a6ba:	bd38      	pop	{r3, r4, r5, pc}

0001a6bc <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   1a6bc:	f7ff bfb7 	b.w	1a62e <k_work_busy_get>

0001a6c0 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   1a6c0:	b538      	push	{r3, r4, r5, lr}
   1a6c2:	4604      	mov	r4, r0
   1a6c4:	f04f 0320 	mov.w	r3, #32
   1a6c8:	f3ef 8511 	mrs	r5, BASEPRI
   1a6cc:	f383 8812 	msr	BASEPRI_MAX, r3
   1a6d0:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   1a6d4:	f7ff ff3a 	bl	1a54c <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1a6d8:	4620      	mov	r0, r4
   1a6da:	f7ff ff4d 	bl	1a578 <cancel_async_locked>
	__asm__ volatile(
   1a6de:	f385 8811 	msr	BASEPRI, r5
   1a6e2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   1a6e6:	bd38      	pop	{r3, r4, r5, pc}

0001a6e8 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   1a6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a6ea:	4604      	mov	r4, r0
   1a6ec:	460d      	mov	r5, r1
	__asm__ volatile(
   1a6ee:	f04f 0320 	mov.w	r3, #32
   1a6f2:	f3ef 8611 	mrs	r6, BASEPRI
   1a6f6:	f383 8812 	msr	BASEPRI_MAX, r3
   1a6fa:	f3bf 8f6f 	isb	sy
	return *flagp;
   1a6fe:	68c3      	ldr	r3, [r0, #12]
   1a700:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   1a704:	2b00      	cmp	r3, #0
   1a706:	bf14      	ite	ne
   1a708:	2701      	movne	r7, #1
   1a70a:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   1a70c:	d105      	bne.n	1a71a <k_work_cancel_delayable_sync+0x32>
	__asm__ volatile(
   1a70e:	f386 8811 	msr	BASEPRI, r6
   1a712:	f3bf 8f6f 	isb	sy
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   1a716:	4638      	mov	r0, r7
   1a718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	(void)unschedule_locked(dwork);
   1a71a:	f7ff ff17 	bl	1a54c <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1a71e:	4620      	mov	r0, r4
   1a720:	f7ff ff2a 	bl	1a578 <cancel_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   1a724:	4629      	mov	r1, r5
   1a726:	4620      	mov	r0, r4
   1a728:	f7fa fd42 	bl	151b0 <cancel_sync_locked>
   1a72c:	f386 8811 	msr	BASEPRI, r6
   1a730:	f3bf 8f6f 	isb	sy
	if (need_wait) {
   1a734:	2800      	cmp	r0, #0
   1a736:	d0ee      	beq.n	1a716 <k_work_cancel_delayable_sync+0x2e>
	return z_impl_k_sem_take(sem, timeout);
   1a738:	f04f 32ff 	mov.w	r2, #4294967295
   1a73c:	f04f 33ff 	mov.w	r3, #4294967295
   1a740:	f105 0008 	add.w	r0, r5, #8
   1a744:	f7fa fc56 	bl	14ff4 <z_impl_k_sem_take>
   1a748:	e7e5      	b.n	1a716 <k_work_cancel_delayable_sync+0x2e>

0001a74a <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   1a74a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1a74e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1a750:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1a752:	2300      	movs	r3, #0
	node->prev = NULL;
   1a754:	e9c0 3300 	strd	r3, r3, [r0]
}
   1a758:	4770      	bx	lr

0001a75a <unpend_thread_no_timeout>:
{
   1a75a:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   1a75c:	f7ff fff5 	bl	1a74a <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1a760:	7b43      	ldrb	r3, [r0, #13]
   1a762:	f023 0302 	bic.w	r3, r3, #2
   1a766:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   1a768:	2300      	movs	r3, #0
   1a76a:	6083      	str	r3, [r0, #8]
}
   1a76c:	bd08      	pop	{r3, pc}

0001a76e <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1a76e:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1a772:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   1a776:	4283      	cmp	r3, r0
		return b2 - b1;
   1a778:	bf14      	ite	ne
   1a77a:	1ac0      	subne	r0, r0, r3
	return 0;
   1a77c:	2000      	moveq	r0, #0
}
   1a77e:	4770      	bx	lr

0001a780 <add_to_waitq_locked>:
{
   1a780:	b538      	push	{r3, r4, r5, lr}
   1a782:	4604      	mov	r4, r0
   1a784:	460d      	mov	r5, r1
	unready_thread(thread);
   1a786:	f7fa ff4d 	bl	15624 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1a78a:	7b63      	ldrb	r3, [r4, #13]
   1a78c:	f043 0302 	orr.w	r3, r3, #2
   1a790:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1a792:	b1e5      	cbz	r5, 1a7ce <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   1a794:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   1a796:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a798:	429d      	cmp	r5, r3
   1a79a:	d109      	bne.n	1a7b0 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   1a79c:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   1a79e:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   1a7a2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1a7a4:	606c      	str	r4, [r5, #4]
}
   1a7a6:	e012      	b.n	1a7ce <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1a7a8:	686a      	ldr	r2, [r5, #4]
   1a7aa:	4293      	cmp	r3, r2
   1a7ac:	d0f6      	beq.n	1a79c <add_to_waitq_locked+0x1c>
   1a7ae:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a7b0:	2b00      	cmp	r3, #0
   1a7b2:	d0f3      	beq.n	1a79c <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   1a7b4:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1a7b8:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   1a7bc:	428a      	cmp	r2, r1
   1a7be:	d0f3      	beq.n	1a7a8 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1a7c0:	4291      	cmp	r1, r2
   1a7c2:	ddf1      	ble.n	1a7a8 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   1a7c4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1a7c6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1a7ca:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1a7cc:	605c      	str	r4, [r3, #4]
}
   1a7ce:	bd38      	pop	{r3, r4, r5, pc}

0001a7d0 <z_ready_thread>:
{
   1a7d0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1a7d2:	f04f 0320 	mov.w	r3, #32
   1a7d6:	f3ef 8411 	mrs	r4, BASEPRI
   1a7da:	f383 8812 	msr	BASEPRI_MAX, r3
   1a7de:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   1a7e2:	f7fa feeb 	bl	155bc <ready_thread>
	__asm__ volatile(
   1a7e6:	f384 8811 	msr	BASEPRI, r4
   1a7ea:	f3bf 8f6f 	isb	sy
}
   1a7ee:	bd10      	pop	{r4, pc}

0001a7f0 <z_unpend_thread_no_timeout>:
{
   1a7f0:	b508      	push	{r3, lr}
	__asm__ volatile(
   1a7f2:	f04f 0220 	mov.w	r2, #32
   1a7f6:	f3ef 8111 	mrs	r1, BASEPRI
   1a7fa:	f382 8812 	msr	BASEPRI_MAX, r2
   1a7fe:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   1a802:	6883      	ldr	r3, [r0, #8]
   1a804:	b10b      	cbz	r3, 1a80a <z_unpend_thread_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
   1a806:	f7ff ffa8 	bl	1a75a <unpend_thread_no_timeout>
	__asm__ volatile(
   1a80a:	f381 8811 	msr	BASEPRI, r1
   1a80e:	f3bf 8f6f 	isb	sy
}
   1a812:	bd08      	pop	{r3, pc}

0001a814 <z_sched_wake_thread>:
{
   1a814:	b538      	push	{r3, r4, r5, lr}
   1a816:	4604      	mov	r4, r0
	__asm__ volatile(
   1a818:	f04f 0320 	mov.w	r3, #32
   1a81c:	f3ef 8511 	mrs	r5, BASEPRI
   1a820:	f383 8812 	msr	BASEPRI_MAX, r3
   1a824:	f3bf 8f6f 	isb	sy
		if (!killed) {
   1a828:	7b43      	ldrb	r3, [r0, #13]
   1a82a:	f013 0f28 	tst.w	r3, #40	; 0x28
   1a82e:	d10b      	bne.n	1a848 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
   1a830:	6883      	ldr	r3, [r0, #8]
   1a832:	b10b      	cbz	r3, 1a838 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
   1a834:	f7ff ff91 	bl	1a75a <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1a838:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
   1a83a:	b951      	cbnz	r1, 1a852 <z_sched_wake_thread+0x3e>
   1a83c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
			ready_thread(thread);
   1a840:	4620      	mov	r0, r4
   1a842:	7363      	strb	r3, [r4, #13]
   1a844:	f7fa feba 	bl	155bc <ready_thread>
	__asm__ volatile(
   1a848:	f385 8811 	msr	BASEPRI, r5
   1a84c:	f3bf 8f6f 	isb	sy
}
   1a850:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1a852:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
   1a856:	e7f3      	b.n	1a840 <z_sched_wake_thread+0x2c>

0001a858 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
   1a858:	2101      	movs	r1, #1
   1a85a:	3818      	subs	r0, #24
   1a85c:	f7ff bfda 	b.w	1a814 <z_sched_wake_thread>

0001a860 <z_unpend1_no_timeout>:
{
   1a860:	b508      	push	{r3, lr}
   1a862:	4603      	mov	r3, r0
	__asm__ volatile(
   1a864:	f04f 0220 	mov.w	r2, #32
   1a868:	f3ef 8111 	mrs	r1, BASEPRI
   1a86c:	f382 8812 	msr	BASEPRI_MAX, r2
   1a870:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1a874:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a876:	4283      	cmp	r3, r0
   1a878:	d007      	beq.n	1a88a <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   1a87a:	b108      	cbz	r0, 1a880 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   1a87c:	f7ff ff6d 	bl	1a75a <unpend_thread_no_timeout>
	__asm__ volatile(
   1a880:	f381 8811 	msr	BASEPRI, r1
   1a884:	f3bf 8f6f 	isb	sy
}
   1a888:	bd08      	pop	{r3, pc}
   1a88a:	2000      	movs	r0, #0
   1a88c:	e7f8      	b.n	1a880 <z_unpend1_no_timeout+0x20>

0001a88e <z_unpend_first_thread>:
{
   1a88e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1a890:	f04f 0320 	mov.w	r3, #32
   1a894:	f3ef 8511 	mrs	r5, BASEPRI
   1a898:	f383 8812 	msr	BASEPRI_MAX, r3
   1a89c:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1a8a0:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a8a2:	42a0      	cmp	r0, r4
   1a8a4:	d00d      	beq.n	1a8c2 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   1a8a6:	b134      	cbz	r4, 1a8b6 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   1a8a8:	4620      	mov	r0, r4
   1a8aa:	f7ff ff56 	bl	1a75a <unpend_thread_no_timeout>
   1a8ae:	f104 0018 	add.w	r0, r4, #24
   1a8b2:	f000 f869 	bl	1a988 <z_abort_timeout>
	__asm__ volatile(
   1a8b6:	f385 8811 	msr	BASEPRI, r5
   1a8ba:	f3bf 8f6f 	isb	sy
}
   1a8be:	4620      	mov	r0, r4
   1a8c0:	bd38      	pop	{r3, r4, r5, pc}
   1a8c2:	2400      	movs	r4, #0
   1a8c4:	e7f7      	b.n	1a8b6 <z_unpend_first_thread+0x28>

0001a8c6 <z_unpend_thread>:
{
   1a8c6:	4601      	mov	r1, r0
   1a8c8:	b510      	push	{r4, lr}
	__asm__ volatile(
   1a8ca:	f04f 0320 	mov.w	r3, #32
   1a8ce:	f3ef 8411 	mrs	r4, BASEPRI
   1a8d2:	f383 8812 	msr	BASEPRI_MAX, r3
   1a8d6:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   1a8da:	6883      	ldr	r3, [r0, #8]
   1a8dc:	b10b      	cbz	r3, 1a8e2 <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
   1a8de:	f7ff ff3c 	bl	1a75a <unpend_thread_no_timeout>
	__asm__ volatile(
   1a8e2:	f384 8811 	msr	BASEPRI, r4
   1a8e6:	f3bf 8f6f 	isb	sy
}
   1a8ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a8ee:	f101 0018 	add.w	r0, r1, #24
   1a8f2:	f000 b849 	b.w	1a988 <z_abort_timeout>

0001a8f6 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1a8f6:	4603      	mov	r3, r0
   1a8f8:	b920      	cbnz	r0, 1a904 <z_reschedule_irqlock+0xe>
   1a8fa:	f3ef 8205 	mrs	r2, IPSR
   1a8fe:	b90a      	cbnz	r2, 1a904 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   1a900:	f7f0 bd9a 	b.w	b438 <arch_swap>
   1a904:	f383 8811 	msr	BASEPRI, r3
   1a908:	f3bf 8f6f 	isb	sy
}
   1a90c:	4770      	bx	lr

0001a90e <z_reschedule_unlocked>:
	__asm__ volatile(
   1a90e:	f04f 0320 	mov.w	r3, #32
   1a912:	f3ef 8011 	mrs	r0, BASEPRI
   1a916:	f383 8812 	msr	BASEPRI_MAX, r3
   1a91a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1a91e:	f7ff bfea 	b.w	1a8f6 <z_reschedule_irqlock>

0001a922 <z_unpend_all>:
{
   1a922:	b538      	push	{r3, r4, r5, lr}
   1a924:	4605      	mov	r5, r0
	int need_sched = 0;
   1a926:	2000      	movs	r0, #0
	return list->head == list;
   1a928:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a92a:	42a5      	cmp	r5, r4
   1a92c:	d000      	beq.n	1a930 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1a92e:	b904      	cbnz	r4, 1a932 <z_unpend_all+0x10>
}
   1a930:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1a932:	4620      	mov	r0, r4
   1a934:	f7ff ffc7 	bl	1a8c6 <z_unpend_thread>
		z_ready_thread(thread);
   1a938:	4620      	mov	r0, r4
   1a93a:	f7ff ff49 	bl	1a7d0 <z_ready_thread>
		need_sched = 1;
   1a93e:	2001      	movs	r0, #1
   1a940:	e7f2      	b.n	1a928 <z_unpend_all+0x6>

0001a942 <z_sched_wake>:
{
   1a942:	b538      	push	{r3, r4, r5, lr}
   1a944:	f04f 0320 	mov.w	r3, #32
   1a948:	f3ef 8511 	mrs	r5, BASEPRI
   1a94c:	f383 8812 	msr	BASEPRI_MAX, r3
   1a950:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1a954:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a956:	42a0      	cmp	r0, r4
   1a958:	d012      	beq.n	1a980 <z_sched_wake+0x3e>
		if (thread != NULL) {
   1a95a:	b19c      	cbz	r4, 1a984 <z_sched_wake+0x42>
   1a95c:	67e1      	str	r1, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   1a95e:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   1a960:	4620      	mov	r0, r4
   1a962:	f7ff fefa 	bl	1a75a <unpend_thread_no_timeout>
   1a966:	f104 0018 	add.w	r0, r4, #24
   1a96a:	f000 f80d 	bl	1a988 <z_abort_timeout>
			ready_thread(thread);
   1a96e:	4620      	mov	r0, r4
   1a970:	f7fa fe24 	bl	155bc <ready_thread>
			ret = true;
   1a974:	2001      	movs	r0, #1
	__asm__ volatile(
   1a976:	f385 8811 	msr	BASEPRI, r5
   1a97a:	f3bf 8f6f 	isb	sy
}
   1a97e:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   1a980:	2000      	movs	r0, #0
   1a982:	e7f8      	b.n	1a976 <z_sched_wake+0x34>
   1a984:	4620      	mov	r0, r4
   1a986:	e7f6      	b.n	1a976 <z_sched_wake+0x34>

0001a988 <z_abort_timeout>:
{
   1a988:	b510      	push	{r4, lr}
	__asm__ volatile(
   1a98a:	f04f 0220 	mov.w	r2, #32
   1a98e:	f3ef 8411 	mrs	r4, BASEPRI
   1a992:	f382 8812 	msr	BASEPRI_MAX, r2
   1a996:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1a99a:	6803      	ldr	r3, [r0, #0]
   1a99c:	b13b      	cbz	r3, 1a9ae <z_abort_timeout+0x26>
			remove_timeout(to);
   1a99e:	f7fb f8f7 	bl	15b90 <remove_timeout>
			ret = 0;
   1a9a2:	2000      	movs	r0, #0
	__asm__ volatile(
   1a9a4:	f384 8811 	msr	BASEPRI, r4
   1a9a8:	f3bf 8f6f 	isb	sy
}
   1a9ac:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1a9ae:	f06f 0015 	mvn.w	r0, #21
   1a9b2:	e7f7      	b.n	1a9a4 <z_abort_timeout+0x1c>

0001a9b4 <z_get_next_timeout_expiry>:
{
   1a9b4:	b510      	push	{r4, lr}
	__asm__ volatile(
   1a9b6:	f04f 0320 	mov.w	r3, #32
   1a9ba:	f3ef 8411 	mrs	r4, BASEPRI
   1a9be:	f383 8812 	msr	BASEPRI_MAX, r3
   1a9c2:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1a9c6:	f7fb f8c3 	bl	15b50 <next_timeout>
	__asm__ volatile(
   1a9ca:	f384 8811 	msr	BASEPRI, r4
   1a9ce:	f3bf 8f6f 	isb	sy
}
   1a9d2:	bd10      	pop	{r4, pc}

0001a9d4 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1a9d4:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1a9d6:	f7fb f9d7 	bl	15d88 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1a9da:	bd08      	pop	{r3, pc}

0001a9dc <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   1a9dc:	f7fb b9d4 	b.w	15d88 <sys_clock_tick_get>

0001a9e0 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1a9e0:	b108      	cbz	r0, 1a9e6 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1a9e2:	f7ee bf67 	b.w	98b4 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1a9e6:	4770      	bx	lr

0001a9e8 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1a9e8:	f1b1 3fff 	cmp.w	r1, #4294967295
   1a9ec:	bf08      	it	eq
   1a9ee:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1a9f2:	b538      	push	{r3, r4, r5, lr}
   1a9f4:	460c      	mov	r4, r1
   1a9f6:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1a9f8:	d014      	beq.n	1aa24 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1a9fa:	4308      	orrs	r0, r1
   1a9fc:	d103      	bne.n	1aa06 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   1a9fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   1aa02:	f7fb b9c1 	b.w	15d88 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1aa06:	f06f 0001 	mvn.w	r0, #1
   1aa0a:	f04f 33ff 	mov.w	r3, #4294967295
   1aa0e:	1b40      	subs	r0, r0, r5
   1aa10:	eb63 0101 	sbc.w	r1, r3, r1
   1aa14:	2900      	cmp	r1, #0
   1aa16:	da04      	bge.n	1aa22 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   1aa18:	f7fb f9b6 	bl	15d88 <sys_clock_tick_get>
   1aa1c:	1940      	adds	r0, r0, r5
   1aa1e:	eb41 0104 	adc.w	r1, r1, r4
}
   1aa22:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   1aa24:	f04f 30ff 	mov.w	r0, #4294967295
   1aa28:	4601      	mov	r1, r0
   1aa2a:	e7fa      	b.n	1aa22 <sys_clock_timeout_end_calc+0x3a>

0001aa2c <k_timer_init>:
	timer->status = 0U;
   1aa2c:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   1aa2e:	e9c0 1208 	strd	r1, r2, [r0, #32]
   1aa32:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   1aa36:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   1aa3a:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   1aa3e:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   1aa40:	6343      	str	r3, [r0, #52]	; 0x34
}
   1aa42:	4770      	bx	lr

0001aa44 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1aa44:	b510      	push	{r4, lr}
   1aa46:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   1aa48:	f7ff ff9e 	bl	1a988 <z_abort_timeout>

	if (inactive) {
   1aa4c:	b9b0      	cbnz	r0, 1aa7c <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   1aa4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1aa50:	b10b      	cbz	r3, 1aa56 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1aa52:	4620      	mov	r0, r4
   1aa54:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   1aa56:	f104 0018 	add.w	r0, r4, #24
   1aa5a:	f7ff ff01 	bl	1a860 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   1aa5e:	b168      	cbz	r0, 1aa7c <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   1aa60:	f7ff feb6 	bl	1a7d0 <z_ready_thread>
	__asm__ volatile(
   1aa64:	f04f 0320 	mov.w	r3, #32
   1aa68:	f3ef 8011 	mrs	r0, BASEPRI
   1aa6c:	f383 8812 	msr	BASEPRI_MAX, r3
   1aa70:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   1aa74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1aa78:	f7ff bf3d 	b.w	1a8f6 <z_reschedule_irqlock>
   1aa7c:	bd10      	pop	{r4, pc}

0001aa7e <add_event>:
{
   1aa7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aa80:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1aa82:	e9d0 1300 	ldrd	r1, r3, [r0]
   1aa86:	4288      	cmp	r0, r1
   1aa88:	4604      	mov	r4, r0
   1aa8a:	d105      	bne.n	1aa98 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   1aa8c:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   1aa8e:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   1aa92:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1aa94:	6065      	str	r5, [r4, #4]
   1aa96:	e01d      	b.n	1aad4 <add_event+0x56>
	if ((pending == NULL) ||
   1aa98:	2b00      	cmp	r3, #0
   1aa9a:	d0f7      	beq.n	1aa8c <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1aa9c:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1aa9e:	b100      	cbz	r0, 1aaa2 <add_event+0x24>
   1aaa0:	3860      	subs	r0, #96	; 0x60
   1aaa2:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1aaa6:	4639      	mov	r1, r7
   1aaa8:	f7ff fe61 	bl	1a76e <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1aaac:	2800      	cmp	r0, #0
   1aaae:	dced      	bgt.n	1aa8c <add_event+0xe>
	return list->head == list;
   1aab0:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1aab2:	42b4      	cmp	r4, r6
   1aab4:	d0ea      	beq.n	1aa8c <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1aab6:	2e00      	cmp	r6, #0
   1aab8:	d0e8      	beq.n	1aa8c <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   1aaba:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1aabc:	b101      	cbz	r1, 1aac0 <add_event+0x42>
   1aabe:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   1aac0:	4638      	mov	r0, r7
   1aac2:	f7ff fe54 	bl	1a76e <z_sched_prio_cmp>
   1aac6:	2800      	cmp	r0, #0
   1aac8:	dd05      	ble.n	1aad6 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   1aaca:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1aacc:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   1aad0:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1aad2:	6075      	str	r5, [r6, #4]
}
   1aad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1aad6:	6863      	ldr	r3, [r4, #4]
   1aad8:	429e      	cmp	r6, r3
   1aada:	d0d7      	beq.n	1aa8c <add_event+0xe>
   1aadc:	6836      	ldr	r6, [r6, #0]
   1aade:	e7ea      	b.n	1aab6 <add_event+0x38>

0001aae0 <register_events>:
{
   1aae0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1aae4:	2500      	movs	r5, #0
{
   1aae6:	468b      	mov	fp, r1
   1aae8:	4614      	mov	r4, r2
   1aaea:	461f      	mov	r7, r3
   1aaec:	4682      	mov	sl, r0
	int events_registered = 0;
   1aaee:	462e      	mov	r6, r5
	event->poller = NULL;
   1aaf0:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   1aaf2:	455d      	cmp	r5, fp
   1aaf4:	db02      	blt.n	1aafc <register_events+0x1c>
}
   1aaf6:	4630      	mov	r0, r6
   1aaf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aafc:	f04f 0320 	mov.w	r3, #32
   1ab00:	f3ef 8911 	mrs	r9, BASEPRI
   1ab04:	f383 8812 	msr	BASEPRI_MAX, r3
   1ab08:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1ab0c:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1ab10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1ab14:	3b01      	subs	r3, #1
   1ab16:	2b07      	cmp	r3, #7
   1ab18:	d80f      	bhi.n	1ab3a <register_events+0x5a>
   1ab1a:	e8df f003 	tbb	[pc, r3]
   1ab1e:	041e      	.short	0x041e
   1ab20:	0e0e0a0e 	.word	0x0e0e0a0e
   1ab24:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   1ab26:	f8da 3010 	ldr.w	r3, [sl, #16]
   1ab2a:	689b      	ldr	r3, [r3, #8]
   1ab2c:	b12b      	cbz	r3, 1ab3a <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1ab2e:	2302      	movs	r3, #2
   1ab30:	e020      	b.n	1ab74 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   1ab32:	f8da 3010 	ldr.w	r3, [sl, #16]
   1ab36:	681b      	ldr	r3, [r3, #0]
   1ab38:	bb8b      	cbnz	r3, 1ab9e <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   1ab3a:	bb47      	cbnz	r7, 1ab8e <register_events+0xae>
   1ab3c:	7823      	ldrb	r3, [r4, #0]
   1ab3e:	b333      	cbz	r3, 1ab8e <register_events+0xae>
	switch (event->type) {
   1ab40:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1ab44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1ab48:	3b01      	subs	r3, #1
   1ab4a:	2b07      	cmp	r3, #7
   1ab4c:	d830      	bhi.n	1abb0 <register_events+0xd0>
   1ab4e:	e8df f003 	tbb	[pc, r3]
   1ab52:	2833      	.short	0x2833
   1ab54:	2f2f282f 	.word	0x2f2f282f
   1ab58:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   1ab5a:	f8da 3010 	ldr.w	r3, [sl, #16]
   1ab5e:	689b      	ldr	r3, [r3, #8]
   1ab60:	2b00      	cmp	r3, #0
   1ab62:	d0ea      	beq.n	1ab3a <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   1ab64:	2301      	movs	r3, #1
   1ab66:	e005      	b.n	1ab74 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   1ab68:	f8da 3010 	ldr.w	r3, [sl, #16]
   1ab6c:	6a1b      	ldr	r3, [r3, #32]
   1ab6e:	2b00      	cmp	r3, #0
   1ab70:	d0e3      	beq.n	1ab3a <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   1ab72:	2310      	movs	r3, #16
	event->state |= state;
   1ab74:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   1ab78:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   1ab7c:	f3c2 3186 	ubfx	r1, r2, #14, #7
   1ab80:	430b      	orrs	r3, r1
   1ab82:	f363 3294 	bfi	r2, r3, #14, #7
   1ab86:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   1ab8a:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   1ab8e:	f389 8811 	msr	BASEPRI, r9
   1ab92:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1ab96:	3501      	adds	r5, #1
   1ab98:	f10a 0a14 	add.w	sl, sl, #20
   1ab9c:	e7a9      	b.n	1aaf2 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1ab9e:	2304      	movs	r3, #4
   1aba0:	e7e8      	b.n	1ab74 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   1aba2:	4622      	mov	r2, r4
   1aba4:	4651      	mov	r1, sl
   1aba6:	f8da 0010 	ldr.w	r0, [sl, #16]
   1abaa:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   1abac:	f7ff ff67 	bl	1aa7e <add_event>
	event->poller = poller;
   1abb0:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   1abb4:	3601      	adds	r6, #1
   1abb6:	e7ea      	b.n	1ab8e <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   1abb8:	4622      	mov	r2, r4
   1abba:	4651      	mov	r1, sl
   1abbc:	f8da 0010 	ldr.w	r0, [sl, #16]
   1abc0:	e7f4      	b.n	1abac <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   1abc2:	f8da 0010 	ldr.w	r0, [sl, #16]
   1abc6:	4622      	mov	r2, r4
   1abc8:	4651      	mov	r1, sl
   1abca:	3024      	adds	r0, #36	; 0x24
   1abcc:	e7ee      	b.n	1abac <register_events+0xcc>

0001abce <signal_poll_event>:
{
   1abce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1abd2:	6884      	ldr	r4, [r0, #8]
{
   1abd4:	4605      	mov	r5, r0
   1abd6:	460e      	mov	r6, r1
	if (poller != NULL) {
   1abd8:	b144      	cbz	r4, 1abec <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   1abda:	7863      	ldrb	r3, [r4, #1]
   1abdc:	2b01      	cmp	r3, #1
   1abde:	d12e      	bne.n	1ac3e <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   1abe0:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1abe4:	f013 0302 	ands.w	r3, r3, #2
   1abe8:	d10a      	bne.n	1ac00 <signal_poll_event+0x32>
		poller->is_polling = false;
   1abea:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   1abec:	2000      	movs	r0, #0
	event->state |= state;
   1abee:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   1abf0:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1abf2:	f3c3 3286 	ubfx	r2, r3, #14, #7
   1abf6:	4316      	orrs	r6, r2
   1abf8:	f366 3394 	bfi	r3, r6, #14, #7
   1abfc:	60eb      	str	r3, [r5, #12]
	return retcode;
   1abfe:	e03e      	b.n	1ac7e <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   1ac00:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   1ac04:	f1b3 3fff 	cmp.w	r3, #4294967295
   1ac08:	bf08      	it	eq
   1ac0a:	f112 0f02 	cmneq.w	r2, #2
   1ac0e:	d032      	beq.n	1ac76 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1ac10:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   1ac14:	4640      	mov	r0, r8
   1ac16:	f7ff fe56 	bl	1a8c6 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1ac1a:	2e08      	cmp	r6, #8
   1ac1c:	bf0c      	ite	eq
   1ac1e:	f06f 0303 	mvneq.w	r3, #3
   1ac22:	2300      	movne	r3, #0
   1ac24:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1ac26:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1ac2a:	06db      	lsls	r3, r3, #27
   1ac2c:	d109      	bne.n	1ac42 <signal_poll_event+0x74>
   1ac2e:	f854 7c48 	ldr.w	r7, [r4, #-72]
   1ac32:	b937      	cbnz	r7, 1ac42 <signal_poll_event+0x74>
	z_ready_thread(thread);
   1ac34:	4640      	mov	r0, r8
   1ac36:	f7ff fdcb 	bl	1a7d0 <z_ready_thread>
		poller->is_polling = false;
   1ac3a:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1ac3c:	e7d6      	b.n	1abec <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   1ac3e:	2b02      	cmp	r3, #2
   1ac40:	d001      	beq.n	1ac46 <signal_poll_event+0x78>
		poller->is_polling = false;
   1ac42:	2300      	movs	r3, #0
   1ac44:	e7d1      	b.n	1abea <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1ac46:	7823      	ldrb	r3, [r4, #0]
   1ac48:	2b00      	cmp	r3, #0
   1ac4a:	d0cf      	beq.n	1abec <signal_poll_event+0x1e>
   1ac4c:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1ac50:	2f00      	cmp	r7, #0
   1ac52:	d0f2      	beq.n	1ac3a <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1ac54:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1ac58:	f1a4 0914 	sub.w	r9, r4, #20
   1ac5c:	f104 0014 	add.w	r0, r4, #20
   1ac60:	f7ff fe92 	bl	1a988 <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   1ac64:	4649      	mov	r1, r9
   1ac66:	4638      	mov	r0, r7
		twork->poll_result = 0;
   1ac68:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   1ac6c:	f7ff fcef 	bl	1a64e <z_work_submit_to_queue>
		poller->is_polling = false;
   1ac70:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1ac74:	e7ba      	b.n	1abec <signal_poll_event+0x1e>
		poller->is_polling = false;
   1ac76:	2300      	movs	r3, #0
		return -EAGAIN;
   1ac78:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   1ac7c:	7023      	strb	r3, [r4, #0]
}
   1ac7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001ac82 <clear_event_registrations>:
	while (num_events--) {
   1ac82:	2314      	movs	r3, #20
{
   1ac84:	b5f0      	push	{r4, r5, r6, r7, lr}
	event->poller = NULL;
   1ac86:	2400      	movs	r4, #0
	switch (event->type) {
   1ac88:	f44f 768b 	mov.w	r6, #278	; 0x116
   1ac8c:	fb03 0001 	mla	r0, r3, r1, r0
	while (num_events--) {
   1ac90:	b901      	cbnz	r1, 1ac94 <clear_event_registrations+0x12>
}
   1ac92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   1ac94:	f810 3c07 	ldrb.w	r3, [r0, #-7]
   1ac98:	f1a0 0714 	sub.w	r7, r0, #20
   1ac9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1aca0:	2b08      	cmp	r3, #8
	event->poller = NULL;
   1aca2:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   1aca6:	d80c      	bhi.n	1acc2 <clear_event_registrations+0x40>
   1aca8:	fa26 f303 	lsr.w	r3, r6, r3
   1acac:	07db      	lsls	r3, r3, #31
   1acae:	d508      	bpl.n	1acc2 <clear_event_registrations+0x40>
	return node->next != NULL;
   1acb0:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1acb4:	b12b      	cbz	r3, 1acc2 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   1acb6:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   1acba:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   1acbc:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1acbe:	e940 4405 	strd	r4, r4, [r0, #-20]
   1acc2:	f382 8811 	msr	BASEPRI, r2
   1acc6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1acca:	f04f 0320 	mov.w	r3, #32
   1acce:	f3ef 8211 	mrs	r2, BASEPRI
   1acd2:	f383 8812 	msr	BASEPRI_MAX, r3
   1acd6:	f3bf 8f6f 	isb	sy
   1acda:	4638      	mov	r0, r7
   1acdc:	3901      	subs	r1, #1
   1acde:	e7d7      	b.n	1ac90 <clear_event_registrations+0xe>

0001ace0 <k_poll_event_init>:
{
   1ace0:	b510      	push	{r4, lr}
	event->poller = NULL;
   1ace2:	2400      	movs	r4, #0
	event->type = type;
   1ace4:	0552      	lsls	r2, r2, #21
   1ace6:	0209      	lsls	r1, r1, #8
   1ace8:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   1acec:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
   1acf0:	430a      	orrs	r2, r1
   1acf2:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   1acf4:	6084      	str	r4, [r0, #8]
	event->type = type;
   1acf6:	430a      	orrs	r2, r1
	event->obj = obj;
   1acf8:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   1acfc:	bd10      	pop	{r4, pc}

0001acfe <z_handle_obj_poll_events>:
{
   1acfe:	4603      	mov	r3, r0
	return list->head == list;
   1ad00:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1ad02:	4283      	cmp	r3, r0
   1ad04:	d008      	beq.n	1ad18 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   1ad06:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1ad0a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1ad0c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1ad0e:	2300      	movs	r3, #0
	node->prev = NULL;
   1ad10:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1ad14:	f7ff bf5b 	b.w	1abce <signal_poll_event>
}
   1ad18:	4770      	bx	lr

0001ad1a <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   1ad1a:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   1ad1c:	e9c0 0000 	strd	r0, r0, [r0]
   1ad20:	6083      	str	r3, [r0, #8]
}
   1ad22:	4770      	bx	lr

0001ad24 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1ad24:	3204      	adds	r2, #4
{
   1ad26:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1ad28:	4604      	mov	r4, r0
   1ad2a:	d208      	bcs.n	1ad3e <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1ad2c:	2600      	movs	r6, #0
   1ad2e:	2700      	movs	r7, #0
   1ad30:	f041 0104 	orr.w	r1, r1, #4
   1ad34:	e9cd 6700 	strd	r6, r7, [sp]
   1ad38:	f7ff fa8a 	bl	1a250 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1ad3c:	b910      	cbnz	r0, 1ad44 <z_heap_aligned_alloc+0x20>
		return NULL;
   1ad3e:	2000      	movs	r0, #0
}
   1ad40:	b002      	add	sp, #8
   1ad42:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   1ad44:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   1ad48:	e7fa      	b.n	1ad40 <z_heap_aligned_alloc+0x1c>

0001ad4a <k_free>:
	if (ptr != NULL) {
   1ad4a:	b120      	cbz	r0, 1ad56 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   1ad4c:	1f01      	subs	r1, r0, #4
   1ad4e:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1ad52:	f7ff baca 	b.w	1a2ea <k_heap_free>
}
   1ad56:	4770      	bx	lr

0001ad58 <k_malloc>:
{
   1ad58:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   1ad5a:	2004      	movs	r0, #4
   1ad5c:	f7fb b954 	b.w	16008 <k_aligned_alloc>

0001ad60 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   1ad60:	4770      	bx	lr
	...
