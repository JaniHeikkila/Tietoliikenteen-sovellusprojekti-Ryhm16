
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	28 c7 00 20 b1 bd 00 00 83 80 01 00 85 bd 00 00     (.. ............
    8010:	85 bd 00 00 85 bd 00 00 85 bd 00 00 85 bd 00 00     ................
	...
    802c:	a5 b6 00 00 85 bd 00 00 00 00 00 00 45 b6 00 00     ............E...
    803c:	85 bd 00 00                                         ....

00008040 <_irq_vector_table>:
    8040:	2d b7 00 00 2d b7 00 00 2d b7 00 00 2d b7 00 00     -...-...-...-...
    8050:	2d b7 00 00 2d b7 00 00 2d b7 00 00 2d b7 00 00     -...-...-...-...
    8060:	2d b7 00 00 2d b7 00 00 2d b7 00 00 2d b7 00 00     -...-...-...-...
    8070:	2d b7 00 00 2d b7 00 00 2d b7 00 00 2d b7 00 00     -...-...-...-...
    8080:	2d b7 00 00 2d b7 00 00 2d b7 00 00 2d b7 00 00     -...-...-...-...
    8090:	2d b7 00 00 2d b7 00 00 2d b7 00 00 2d b7 00 00     -...-...-...-...
    80a0:	2d b7 00 00 2d b7 00 00 2d b7 00 00 2d b7 00 00     -...-...-...-...
    80b0:	2d b7 00 00 2d b7 00 00 2d b7 00 00 2d b7 00 00     -...-...-...-...
    80c0:	2d b7 00 00 2d b7 00 00 2d b7 00 00 2d b7 00 00     -...-...-...-...
    80d0:	2d b7 00 00 2d b7 00 00 2d b7 00 00 2d b7 00 00     -...-...-...-...
    80e0:	2d b7 00 00 2d b7 00 00 2d b7 00 00 2d b7 00 00     -...-...-...-...
    80f0:	2d b7 00 00 2d b7 00 00 2d b7 00 00 2d b7 00 00     -...-...-...-...
    8100:	2d b7 00 00 2d b7 00 00 2d b7 00 00 2d b7 00 00     -...-...-...-...
    8110:	2d b7 00 00 2d b7 00 00 2d b7 00 00 2d b7 00 00     -...-...-...-...
    8120:	2d b7 00 00 2d b7 00 00 2d b7 00 00 2d b7 00 00     -...-...-...-...
    8130:	2d b7 00 00 2d b7 00 00 2d b7 00 00 2d b7 00 00     -...-...-...-...
    8140:	2d b7 00 00 2d b7 00 00 2d b7 00 00 2d b7 00 00     -...-...-...-...
    8150:	2d b7 00 00                                         -...

Disassembly of section text:

00008154 <__aeabi_uldivmod>:
    8154:	b953      	cbnz	r3, 816c <__aeabi_uldivmod+0x18>
    8156:	b94a      	cbnz	r2, 816c <__aeabi_uldivmod+0x18>
    8158:	2900      	cmp	r1, #0
    815a:	bf08      	it	eq
    815c:	2800      	cmpeq	r0, #0
    815e:	bf1c      	itt	ne
    8160:	f04f 31ff 	movne.w	r1, #4294967295
    8164:	f04f 30ff 	movne.w	r0, #4294967295
    8168:	f000 b80c 	b.w	8184 <__aeabi_idiv0>
    816c:	f1ad 0c08 	sub.w	ip, sp, #8
    8170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8174:	f000 f808 	bl	8188 <__udivmoddi4>
    8178:	f8dd e004 	ldr.w	lr, [sp, #4]
    817c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8180:	b004      	add	sp, #16
    8182:	4770      	bx	lr

00008184 <__aeabi_idiv0>:
    8184:	4770      	bx	lr
    8186:	bf00      	nop

00008188 <__udivmoddi4>:
    8188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    818c:	4686      	mov	lr, r0
    818e:	468c      	mov	ip, r1
    8190:	4608      	mov	r0, r1
    8192:	9e08      	ldr	r6, [sp, #32]
    8194:	4615      	mov	r5, r2
    8196:	4674      	mov	r4, lr
    8198:	4619      	mov	r1, r3
    819a:	2b00      	cmp	r3, #0
    819c:	f040 80c1 	bne.w	8322 <__udivmoddi4+0x19a>
    81a0:	4285      	cmp	r5, r0
    81a2:	fab2 f282 	clz	r2, r2
    81a6:	d945      	bls.n	8234 <__udivmoddi4+0xac>
    81a8:	b14a      	cbz	r2, 81be <__udivmoddi4+0x36>
    81aa:	f1c2 0320 	rsb	r3, r2, #32
    81ae:	fa00 fc02 	lsl.w	ip, r0, r2
    81b2:	4095      	lsls	r5, r2
    81b4:	4094      	lsls	r4, r2
    81b6:	fa2e f303 	lsr.w	r3, lr, r3
    81ba:	ea43 0c0c 	orr.w	ip, r3, ip
    81be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    81c2:	b2a8      	uxth	r0, r5
    81c4:	0c23      	lsrs	r3, r4, #16
    81c6:	fbbc f8fe 	udiv	r8, ip, lr
    81ca:	fb0e cc18 	mls	ip, lr, r8, ip
    81ce:	fb08 f900 	mul.w	r9, r8, r0
    81d2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    81d6:	4599      	cmp	r9, r3
    81d8:	d928      	bls.n	822c <__udivmoddi4+0xa4>
    81da:	18eb      	adds	r3, r5, r3
    81dc:	f108 37ff 	add.w	r7, r8, #4294967295
    81e0:	d204      	bcs.n	81ec <__udivmoddi4+0x64>
    81e2:	4599      	cmp	r9, r3
    81e4:	d902      	bls.n	81ec <__udivmoddi4+0x64>
    81e6:	f1a8 0702 	sub.w	r7, r8, #2
    81ea:	442b      	add	r3, r5
    81ec:	eba3 0309 	sub.w	r3, r3, r9
    81f0:	b2a4      	uxth	r4, r4
    81f2:	fbb3 fcfe 	udiv	ip, r3, lr
    81f6:	fb0e 331c 	mls	r3, lr, ip, r3
    81fa:	fb0c f000 	mul.w	r0, ip, r0
    81fe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    8202:	42a0      	cmp	r0, r4
    8204:	d914      	bls.n	8230 <__udivmoddi4+0xa8>
    8206:	192c      	adds	r4, r5, r4
    8208:	f10c 33ff 	add.w	r3, ip, #4294967295
    820c:	d204      	bcs.n	8218 <__udivmoddi4+0x90>
    820e:	42a0      	cmp	r0, r4
    8210:	d902      	bls.n	8218 <__udivmoddi4+0x90>
    8212:	f1ac 0302 	sub.w	r3, ip, #2
    8216:	442c      	add	r4, r5
    8218:	1a24      	subs	r4, r4, r0
    821a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    821e:	b11e      	cbz	r6, 8228 <__udivmoddi4+0xa0>
    8220:	40d4      	lsrs	r4, r2
    8222:	2300      	movs	r3, #0
    8224:	6034      	str	r4, [r6, #0]
    8226:	6073      	str	r3, [r6, #4]
    8228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    822c:	4647      	mov	r7, r8
    822e:	e7dd      	b.n	81ec <__udivmoddi4+0x64>
    8230:	4663      	mov	r3, ip
    8232:	e7f1      	b.n	8218 <__udivmoddi4+0x90>
    8234:	bb92      	cbnz	r2, 829c <__udivmoddi4+0x114>
    8236:	1b43      	subs	r3, r0, r5
    8238:	2101      	movs	r1, #1
    823a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    823e:	b2af      	uxth	r7, r5
    8240:	0c20      	lsrs	r0, r4, #16
    8242:	fbb3 fcfe 	udiv	ip, r3, lr
    8246:	fb0e 331c 	mls	r3, lr, ip, r3
    824a:	fb0c f807 	mul.w	r8, ip, r7
    824e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    8252:	4598      	cmp	r8, r3
    8254:	d961      	bls.n	831a <__udivmoddi4+0x192>
    8256:	18eb      	adds	r3, r5, r3
    8258:	f10c 30ff 	add.w	r0, ip, #4294967295
    825c:	d204      	bcs.n	8268 <__udivmoddi4+0xe0>
    825e:	4598      	cmp	r8, r3
    8260:	d902      	bls.n	8268 <__udivmoddi4+0xe0>
    8262:	f1ac 0002 	sub.w	r0, ip, #2
    8266:	442b      	add	r3, r5
    8268:	eba3 0308 	sub.w	r3, r3, r8
    826c:	b2a4      	uxth	r4, r4
    826e:	fbb3 fcfe 	udiv	ip, r3, lr
    8272:	fb0e 331c 	mls	r3, lr, ip, r3
    8276:	fb0c f707 	mul.w	r7, ip, r7
    827a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    827e:	42a7      	cmp	r7, r4
    8280:	d94d      	bls.n	831e <__udivmoddi4+0x196>
    8282:	192c      	adds	r4, r5, r4
    8284:	f10c 33ff 	add.w	r3, ip, #4294967295
    8288:	d204      	bcs.n	8294 <__udivmoddi4+0x10c>
    828a:	42a7      	cmp	r7, r4
    828c:	d902      	bls.n	8294 <__udivmoddi4+0x10c>
    828e:	f1ac 0302 	sub.w	r3, ip, #2
    8292:	442c      	add	r4, r5
    8294:	1be4      	subs	r4, r4, r7
    8296:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    829a:	e7c0      	b.n	821e <__udivmoddi4+0x96>
    829c:	f1c2 0320 	rsb	r3, r2, #32
    82a0:	4095      	lsls	r5, r2
    82a2:	4094      	lsls	r4, r2
    82a4:	fa20 f103 	lsr.w	r1, r0, r3
    82a8:	fa2e f303 	lsr.w	r3, lr, r3
    82ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    82b0:	4090      	lsls	r0, r2
    82b2:	b2af      	uxth	r7, r5
    82b4:	4303      	orrs	r3, r0
    82b6:	fbb1 fcfe 	udiv	ip, r1, lr
    82ba:	fb0e 101c 	mls	r0, lr, ip, r1
    82be:	0c19      	lsrs	r1, r3, #16
    82c0:	fb0c f807 	mul.w	r8, ip, r7
    82c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    82c8:	4588      	cmp	r8, r1
    82ca:	d922      	bls.n	8312 <__udivmoddi4+0x18a>
    82cc:	1869      	adds	r1, r5, r1
    82ce:	f10c 30ff 	add.w	r0, ip, #4294967295
    82d2:	d204      	bcs.n	82de <__udivmoddi4+0x156>
    82d4:	4588      	cmp	r8, r1
    82d6:	d902      	bls.n	82de <__udivmoddi4+0x156>
    82d8:	f1ac 0002 	sub.w	r0, ip, #2
    82dc:	4429      	add	r1, r5
    82de:	eba1 0108 	sub.w	r1, r1, r8
    82e2:	b29b      	uxth	r3, r3
    82e4:	fbb1 fcfe 	udiv	ip, r1, lr
    82e8:	fb0e 111c 	mls	r1, lr, ip, r1
    82ec:	fb0c f707 	mul.w	r7, ip, r7
    82f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    82f4:	429f      	cmp	r7, r3
    82f6:	d90e      	bls.n	8316 <__udivmoddi4+0x18e>
    82f8:	18eb      	adds	r3, r5, r3
    82fa:	f10c 31ff 	add.w	r1, ip, #4294967295
    82fe:	d204      	bcs.n	830a <__udivmoddi4+0x182>
    8300:	429f      	cmp	r7, r3
    8302:	d902      	bls.n	830a <__udivmoddi4+0x182>
    8304:	f1ac 0102 	sub.w	r1, ip, #2
    8308:	442b      	add	r3, r5
    830a:	1bdb      	subs	r3, r3, r7
    830c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8310:	e793      	b.n	823a <__udivmoddi4+0xb2>
    8312:	4660      	mov	r0, ip
    8314:	e7e3      	b.n	82de <__udivmoddi4+0x156>
    8316:	4661      	mov	r1, ip
    8318:	e7f7      	b.n	830a <__udivmoddi4+0x182>
    831a:	4660      	mov	r0, ip
    831c:	e7a4      	b.n	8268 <__udivmoddi4+0xe0>
    831e:	4663      	mov	r3, ip
    8320:	e7b8      	b.n	8294 <__udivmoddi4+0x10c>
    8322:	4283      	cmp	r3, r0
    8324:	d906      	bls.n	8334 <__udivmoddi4+0x1ac>
    8326:	b916      	cbnz	r6, 832e <__udivmoddi4+0x1a6>
    8328:	2100      	movs	r1, #0
    832a:	4608      	mov	r0, r1
    832c:	e77c      	b.n	8228 <__udivmoddi4+0xa0>
    832e:	e9c6 e000 	strd	lr, r0, [r6]
    8332:	e7f9      	b.n	8328 <__udivmoddi4+0x1a0>
    8334:	fab3 f783 	clz	r7, r3
    8338:	b98f      	cbnz	r7, 835e <__udivmoddi4+0x1d6>
    833a:	4283      	cmp	r3, r0
    833c:	d301      	bcc.n	8342 <__udivmoddi4+0x1ba>
    833e:	4572      	cmp	r2, lr
    8340:	d808      	bhi.n	8354 <__udivmoddi4+0x1cc>
    8342:	ebbe 0402 	subs.w	r4, lr, r2
    8346:	eb60 0303 	sbc.w	r3, r0, r3
    834a:	2001      	movs	r0, #1
    834c:	469c      	mov	ip, r3
    834e:	b91e      	cbnz	r6, 8358 <__udivmoddi4+0x1d0>
    8350:	2100      	movs	r1, #0
    8352:	e769      	b.n	8228 <__udivmoddi4+0xa0>
    8354:	4638      	mov	r0, r7
    8356:	e7fa      	b.n	834e <__udivmoddi4+0x1c6>
    8358:	e9c6 4c00 	strd	r4, ip, [r6]
    835c:	e7f8      	b.n	8350 <__udivmoddi4+0x1c8>
    835e:	f1c7 0c20 	rsb	ip, r7, #32
    8362:	40bb      	lsls	r3, r7
    8364:	fa0e f507 	lsl.w	r5, lr, r7
    8368:	fa22 f40c 	lsr.w	r4, r2, ip
    836c:	fa2e f10c 	lsr.w	r1, lr, ip
    8370:	40ba      	lsls	r2, r7
    8372:	431c      	orrs	r4, r3
    8374:	fa20 f30c 	lsr.w	r3, r0, ip
    8378:	40b8      	lsls	r0, r7
    837a:	ea4f 4914 	mov.w	r9, r4, lsr #16
    837e:	4301      	orrs	r1, r0
    8380:	fa1f fe84 	uxth.w	lr, r4
    8384:	fbb3 f8f9 	udiv	r8, r3, r9
    8388:	fb09 3018 	mls	r0, r9, r8, r3
    838c:	0c0b      	lsrs	r3, r1, #16
    838e:	fb08 fa0e 	mul.w	sl, r8, lr
    8392:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    8396:	459a      	cmp	sl, r3
    8398:	d940      	bls.n	841c <__udivmoddi4+0x294>
    839a:	18e3      	adds	r3, r4, r3
    839c:	f108 30ff 	add.w	r0, r8, #4294967295
    83a0:	d204      	bcs.n	83ac <__udivmoddi4+0x224>
    83a2:	459a      	cmp	sl, r3
    83a4:	d902      	bls.n	83ac <__udivmoddi4+0x224>
    83a6:	f1a8 0002 	sub.w	r0, r8, #2
    83aa:	4423      	add	r3, r4
    83ac:	eba3 030a 	sub.w	r3, r3, sl
    83b0:	b289      	uxth	r1, r1
    83b2:	fbb3 f8f9 	udiv	r8, r3, r9
    83b6:	fb09 3318 	mls	r3, r9, r8, r3
    83ba:	fb08 fe0e 	mul.w	lr, r8, lr
    83be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    83c2:	458e      	cmp	lr, r1
    83c4:	d92c      	bls.n	8420 <__udivmoddi4+0x298>
    83c6:	1861      	adds	r1, r4, r1
    83c8:	f108 33ff 	add.w	r3, r8, #4294967295
    83cc:	d204      	bcs.n	83d8 <__udivmoddi4+0x250>
    83ce:	458e      	cmp	lr, r1
    83d0:	d902      	bls.n	83d8 <__udivmoddi4+0x250>
    83d2:	f1a8 0302 	sub.w	r3, r8, #2
    83d6:	4421      	add	r1, r4
    83d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    83dc:	eba1 010e 	sub.w	r1, r1, lr
    83e0:	fba0 9802 	umull	r9, r8, r0, r2
    83e4:	4541      	cmp	r1, r8
    83e6:	46ce      	mov	lr, r9
    83e8:	4643      	mov	r3, r8
    83ea:	d302      	bcc.n	83f2 <__udivmoddi4+0x26a>
    83ec:	d106      	bne.n	83fc <__udivmoddi4+0x274>
    83ee:	454d      	cmp	r5, r9
    83f0:	d204      	bcs.n	83fc <__udivmoddi4+0x274>
    83f2:	3801      	subs	r0, #1
    83f4:	ebb9 0e02 	subs.w	lr, r9, r2
    83f8:	eb68 0304 	sbc.w	r3, r8, r4
    83fc:	2e00      	cmp	r6, #0
    83fe:	d0a7      	beq.n	8350 <__udivmoddi4+0x1c8>
    8400:	ebb5 020e 	subs.w	r2, r5, lr
    8404:	eb61 0103 	sbc.w	r1, r1, r3
    8408:	fa01 fc0c 	lsl.w	ip, r1, ip
    840c:	fa22 f307 	lsr.w	r3, r2, r7
    8410:	40f9      	lsrs	r1, r7
    8412:	ea4c 0303 	orr.w	r3, ip, r3
    8416:	e9c6 3100 	strd	r3, r1, [r6]
    841a:	e799      	b.n	8350 <__udivmoddi4+0x1c8>
    841c:	4640      	mov	r0, r8
    841e:	e7c5      	b.n	83ac <__udivmoddi4+0x224>
    8420:	4643      	mov	r3, r8
    8422:	e7d9      	b.n	83d8 <__udivmoddi4+0x250>

00008424 <app_button_cb>:
}

static bool app_button_cb(void)
{
	return app_button_state;
}
    8424:	4b01      	ldr	r3, [pc, #4]	; (842c <app_button_cb+0x8>)
    8426:	7818      	ldrb	r0, [r3, #0]
    8428:	4770      	bx	lr
    842a:	bf00      	nop
    842c:	20009bdc 	.word	0x20009bdc

00008430 <on_disconnected>:

	dk_set_led_on(CON_STATUS_LED);
}

static void on_disconnected(struct bt_conn *conn, uint8_t reason)
{
    8430:	b508      	push	{r3, lr}
	printk("Disconnected (reason %u)\n", reason);
    8432:	4804      	ldr	r0, [pc, #16]	; (8444 <on_disconnected+0x14>)
    8434:	f00e f9b4 	bl	167a0 <printk>

	dk_set_led_off(CON_STATUS_LED);
}
    8438:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	dk_set_led_off(CON_STATUS_LED);
    843c:	2001      	movs	r0, #1
    843e:	f011 bc2d 	b.w	19c9c <dk_set_led_off>
    8442:	bf00      	nop
    8444:	0001c20c 	.word	0x0001c20c

00008448 <on_connected>:
{
    8448:	b508      	push	{r3, lr}
	if (err) {
    844a:	b121      	cbz	r1, 8456 <on_connected+0xe>
}
    844c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Connection failed (err %u)\n", err);
    8450:	4805      	ldr	r0, [pc, #20]	; (8468 <on_connected+0x20>)
    8452:	f00e b9a5 	b.w	167a0 <printk>
	printk("Connected\n");
    8456:	4805      	ldr	r0, [pc, #20]	; (846c <on_connected+0x24>)
    8458:	f00e f9a2 	bl	167a0 <printk>
}
    845c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	dk_set_led_on(CON_STATUS_LED);
    8460:	2001      	movs	r0, #1
    8462:	f011 bc18 	b.w	19c96 <dk_set_led_on>
    8466:	bf00      	nop
    8468:	0001c226 	.word	0x0001c226
    846c:	0001c242 	.word	0x0001c242

00008470 <button_changed>:
	if (has_changed & USER_BUTTON) {
    8470:	07ca      	lsls	r2, r1, #31
{
    8472:	b538      	push	{r3, r4, r5, lr}
    8474:	460d      	mov	r5, r1
	if (has_changed & USER_BUTTON) {
    8476:	d506      	bpl.n	8486 <button_changed+0x16>
		my_lbs_send_button_state_indicate(user_button_state);
    8478:	f000 0401 	and.w	r4, r0, #1
    847c:	4620      	mov	r0, r4
    847e:	f000 f94b 	bl	8718 <my_lbs_send_button_state_indicate>
		app_button_state = user_button_state ? true : false;
    8482:	4b07      	ldr	r3, [pc, #28]	; (84a0 <button_changed+0x30>)
    8484:	701c      	strb	r4, [r3, #0]
	if (has_changed & USER_BUTTON2) {
    8486:	07ab      	lsls	r3, r5, #30
    8488:	d508      	bpl.n	849c <button_changed+0x2c>
		direction = (direction + 1) % 6;
    848a:	2106      	movs	r1, #6
    848c:	4a05      	ldr	r2, [pc, #20]	; (84a4 <button_changed+0x34>)
    848e:	7813      	ldrb	r3, [r2, #0]
    8490:	3301      	adds	r3, #1
    8492:	fbb3 f0f1 	udiv	r0, r3, r1
    8496:	fb01 3310 	mls	r3, r1, r0, r3
    849a:	7013      	strb	r3, [r2, #0]
}
    849c:	bd38      	pop	{r3, r4, r5, pc}
    849e:	bf00      	nop
    84a0:	20009bdc 	.word	0x20009bdc
    84a4:	20009bdd 	.word	0x20009bdd

000084a8 <send_data_thread>:
{
    84a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	app_sensor_value++;
    84aa:	4c16      	ldr	r4, [pc, #88]	; (8504 <send_data_thread+0x5c>)
		my_lbs_send_sensor_notify(direction);
    84ac:	4d16      	ldr	r5, [pc, #88]	; (8508 <send_data_thread+0x60>)
	app_sensor_value++;
    84ae:	6822      	ldr	r2, [r4, #0]
		struct Measurement m = readADCValue();
    84b0:	4668      	mov	r0, sp
    84b2:	2ac7      	cmp	r2, #199	; 0xc7
	app_sensor_value++;
    84b4:	f102 0301 	add.w	r3, r2, #1
	if (app_sensor_value == 200) {
    84b8:	bf08      	it	eq
    84ba:	2364      	moveq	r3, #100	; 0x64
	app_sensor_value++;
    84bc:	6023      	str	r3, [r4, #0]
		struct Measurement m = readADCValue();
    84be:	f000 f99b 	bl	87f8 <readADCValue>
		my_lbs_send_sensor_notify(1);
    84c2:	2001      	movs	r0, #1
    84c4:	f000 f94a 	bl	875c <my_lbs_send_sensor_notify>
		my_lbs_send_sensor_notify(direction);
    84c8:	7828      	ldrb	r0, [r5, #0]
    84ca:	f000 f947 	bl	875c <my_lbs_send_sensor_notify>
		my_lbs_send_sensor_notify(2);
    84ce:	2002      	movs	r0, #2
    84d0:	f000 f944 	bl	875c <my_lbs_send_sensor_notify>
		my_lbs_send_sensor_notify(m.x);
    84d4:	f8bd 0000 	ldrh.w	r0, [sp]
    84d8:	f000 f940 	bl	875c <my_lbs_send_sensor_notify>
		my_lbs_send_sensor_notify(3);
    84dc:	2003      	movs	r0, #3
    84de:	f000 f93d 	bl	875c <my_lbs_send_sensor_notify>
		my_lbs_send_sensor_notify(m.y);
    84e2:	f8bd 0002 	ldrh.w	r0, [sp, #2]
    84e6:	f000 f939 	bl	875c <my_lbs_send_sensor_notify>
		my_lbs_send_sensor_notify(4);
    84ea:	2004      	movs	r0, #4
    84ec:	f000 f936 	bl	875c <my_lbs_send_sensor_notify>
		my_lbs_send_sensor_notify(m.z); 
    84f0:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    84f4:	f000 f932 	bl	875c <my_lbs_send_sensor_notify>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    84f8:	2100      	movs	r1, #0
    84fa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    84fe:	f00d fd9f 	bl	16040 <z_impl_k_sleep>
	while(1){
    8502:	e7d4      	b.n	84ae <send_data_thread+0x6>
    8504:	20008224 	.word	0x20008224
    8508:	20009bdd 	.word	0x20009bdd

0000850c <main>:

	return err;
}

void main(void)
{
    850c:	b5f0      	push	{r4, r5, r6, r7, lr}
    850e:	b089      	sub	sp, #36	; 0x24
	int blink_status = 0;
	int err;

	LOG_INF("Starting Lesson 4 - Exercise 2 \n");
    8510:	466c      	mov	r4, sp
{
    8512:	af02      	add	r7, sp, #8
	LOG_INF("Starting Lesson 4 - Exercise 2 \n");
    8514:	2602      	movs	r6, #2
    8516:	4b41      	ldr	r3, [pc, #260]	; (861c <main+0x110>)
    8518:	613e      	str	r6, [r7, #16]
    851a:	617b      	str	r3, [r7, #20]
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
    851c:	2300      	movs	r3, #0
    851e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    8522:	483f      	ldr	r0, [pc, #252]	; (8620 <main+0x114>)
    8524:	f107 0210 	add.w	r2, r7, #16
    8528:	f002 f9e8 	bl	a8fc <z_impl_z_log_msg_static_create>

	err = dk_leds_init();
    852c:	f00b f9a2 	bl	13874 <dk_leds_init>
	if (err) {
    8530:	b188      	cbz	r0, 8556 <main+0x4a>
		LOG_ERR("LEDs init failed (err %d)\n", err);
    8532:	b088      	sub	sp, #32
    8534:	aa02      	add	r2, sp, #8
    8536:	4b3b      	ldr	r3, [pc, #236]	; (8624 <main+0x118>)
    8538:	e9c2 3005 	strd	r3, r0, [r2, #20]
    853c:	2303      	movs	r3, #3
    853e:	f842 3f10 	str.w	r3, [r2, #16]!
    8542:	2300      	movs	r3, #0
    8544:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8548:	4835      	ldr	r0, [pc, #212]	; (8620 <main+0x114>)
    854a:	f002 f9d7 	bl	a8fc <z_impl_z_log_msg_static_create>
    854e:	46a5      	mov	sp, r4
		dk_set_led(RUN_STATUS_LED, (++blink_status) % 2);
		k_sleep(K_MSEC(RUN_LED_BLINK_INTERVAL));
		struct Measurement m = readADCValue();
		printk("x = %d,  y = %d,  z = %d\n",m.x,m.y,m.z);
	}
}
    8550:	371c      	adds	r7, #28
    8552:	46bd      	mov	sp, r7
    8554:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = dk_buttons_init(button_changed);
    8556:	4834      	ldr	r0, [pc, #208]	; (8628 <main+0x11c>)
    8558:	f00b f9c6 	bl	138e8 <dk_buttons_init>
	if (err) {
    855c:	4605      	mov	r5, r0
    855e:	b930      	cbnz	r0, 856e <main+0x62>
	err = bt_enable(NULL);
    8560:	f005 fccc 	bl	defc <bt_enable>
	if (err) {
    8564:	b160      	cbz	r0, 8580 <main+0x74>
		LOG_ERR("Bluetooth init failed (err %d)\n", err);
    8566:	b088      	sub	sp, #32
    8568:	aa02      	add	r2, sp, #8
    856a:	4b30      	ldr	r3, [pc, #192]	; (862c <main+0x120>)
    856c:	e7e4      	b.n	8538 <main+0x2c>
		printk("Cannot init buttons (err: %d)\n", err);
    856e:	4601      	mov	r1, r0
    8570:	482f      	ldr	r0, [pc, #188]	; (8630 <main+0x124>)
    8572:	f00e f915 	bl	167a0 <printk>
		printk("Button init failed (err %d)\n", err);
    8576:	4629      	mov	r1, r5
    8578:	482e      	ldr	r0, [pc, #184]	; (8634 <main+0x128>)
		printk("Failed to init LBS (err:%d)\n", err);
    857a:	f00e f911 	bl	167a0 <printk>
		return;
    857e:	e7e7      	b.n	8550 <main+0x44>
	bt_conn_cb_register(&connection_callbacks);
    8580:	482d      	ldr	r0, [pc, #180]	; (8638 <main+0x12c>)
    8582:	f006 ffbb 	bl	f4fc <bt_conn_cb_register>
	err = my_lbs_init(&app_callbacks);
    8586:	482d      	ldr	r0, [pc, #180]	; (863c <main+0x130>)
    8588:	f000 f8bc 	bl	8704 <my_lbs_init>
	if (err) {
    858c:	b110      	cbz	r0, 8594 <main+0x88>
		printk("Failed to init LBS (err:%d)\n", err);
    858e:	4601      	mov	r1, r0
    8590:	482b      	ldr	r0, [pc, #172]	; (8640 <main+0x134>)
    8592:	e7f2      	b.n	857a <main+0x6e>
	LOG_INF("Bluetooth initialized\n");
    8594:	4b2b      	ldr	r3, [pc, #172]	; (8644 <main+0x138>)
    8596:	e9c7 6304 	strd	r6, r3, [r7, #16]
    859a:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    859e:	4603      	mov	r3, r0
    85a0:	f107 0210 	add.w	r2, r7, #16
    85a4:	481e      	ldr	r0, [pc, #120]	; (8620 <main+0x114>)
    85a6:	f002 f9a9 	bl	a8fc <z_impl_z_log_msg_static_create>
	err = bt_le_adv_start(adv_param, ad, ARRAY_SIZE(ad), sd, ARRAY_SIZE(sd));
    85aa:	2301      	movs	r3, #1
    85ac:	4632      	mov	r2, r6
    85ae:	9300      	str	r3, [sp, #0]
    85b0:	4925      	ldr	r1, [pc, #148]	; (8648 <main+0x13c>)
    85b2:	4b26      	ldr	r3, [pc, #152]	; (864c <main+0x140>)
    85b4:	4826      	ldr	r0, [pc, #152]	; (8650 <main+0x144>)
    85b6:	f006 f993 	bl	e8e0 <bt_le_adv_start>
	if (err) {
    85ba:	4603      	mov	r3, r0
    85bc:	b128      	cbz	r0, 85ca <main+0xbe>
		LOG_ERR("Advertising failed to start (err %d)\n", err);
    85be:	b088      	sub	sp, #32
    85c0:	aa02      	add	r2, sp, #8
    85c2:	4924      	ldr	r1, [pc, #144]	; (8654 <main+0x148>)
    85c4:	e9c2 1005 	strd	r1, r0, [r2, #20]
    85c8:	e7b8      	b.n	853c <main+0x30>
	LOG_INF("Advertising successfully started\n");
    85ca:	4a23      	ldr	r2, [pc, #140]	; (8658 <main+0x14c>)
    85cc:	e9c7 6204 	strd	r6, r2, [r7, #16]
    85d0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    85d4:	4812      	ldr	r0, [pc, #72]	; (8620 <main+0x114>)
    85d6:	f107 0210 	add.w	r2, r7, #16
    85da:	f002 f98f 	bl	a8fc <z_impl_z_log_msg_static_create>
	if(initializeADC() != 0)
    85de:	f000 f8dd 	bl	879c <initializeADC>
    85e2:	4604      	mov	r4, r0
    85e4:	b9a8      	cbnz	r0, 8612 <main+0x106>
		printk("x = %d,  y = %d,  z = %d\n",m.x,m.y,m.z);
    85e6:	4d1d      	ldr	r5, [pc, #116]	; (865c <main+0x150>)
		dk_set_led(RUN_STATUS_LED, (++blink_status) % 2);
    85e8:	3401      	adds	r4, #1
    85ea:	f004 0101 	and.w	r1, r4, #1
    85ee:	2000      	movs	r0, #0
    85f0:	f00b fa0c 	bl	13a0c <dk_set_led>
    85f4:	2100      	movs	r1, #0
    85f6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    85fa:	f00d fd21 	bl	16040 <z_impl_k_sleep>
		struct Measurement m = readADCValue();
    85fe:	4638      	mov	r0, r7
    8600:	f000 f8fa 	bl	87f8 <readADCValue>
		printk("x = %d,  y = %d,  z = %d\n",m.x,m.y,m.z);
    8604:	4628      	mov	r0, r5
    8606:	88bb      	ldrh	r3, [r7, #4]
    8608:	887a      	ldrh	r2, [r7, #2]
    860a:	8839      	ldrh	r1, [r7, #0]
    860c:	f00e f8c8 	bl	167a0 <printk>
	for (;;) {
    8610:	e7ea      	b.n	85e8 <main+0xdc>
	printk("ADC initialization failed!");
    8612:	4813      	ldr	r0, [pc, #76]	; (8660 <main+0x154>)
    8614:	f00e f8c4 	bl	167a0 <printk>
	return;
    8618:	e79a      	b.n	8550 <main+0x44>
    861a:	bf00      	nop
    861c:	0001c24d 	.word	0x0001c24d
    8620:	0001b848 	.word	0x0001b848
    8624:	0001c26e 	.word	0x0001c26e
    8628:	00008471 	.word	0x00008471
    862c:	0001c2c5 	.word	0x0001c2c5
    8630:	0001c289 	.word	0x0001c289
    8634:	0001c2a8 	.word	0x0001c2a8
    8638:	20008208 	.word	0x20008208
    863c:	2000821c 	.word	0x2000821c
    8640:	0001c2e5 	.word	0x0001c2e5
    8644:	0001c302 	.word	0x0001c302
    8648:	0001ba00 	.word	0x0001ba00
    864c:	0001b9f8 	.word	0x0001b9f8
    8650:	20008228 	.word	0x20008228
    8654:	0001c319 	.word	0x0001c319
    8658:	0001c33f 	.word	0x0001c33f
    865c:	0001c37c 	.word	0x0001c37c
    8660:	0001c361 	.word	0x0001c361

00008664 <mylbsbc_ccc_cfg_changed>:

/* STEP 3 - Implement the configuration change callback function */
static void mylbsbc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	indicate_enabled = (value == BT_GATT_CCC_INDICATE);
    8664:	1e8b      	subs	r3, r1, #2
    8666:	4259      	negs	r1, r3
    8668:	4159      	adcs	r1, r3
    866a:	4b01      	ldr	r3, [pc, #4]	; (8670 <mylbsbc_ccc_cfg_changed+0xc>)
    866c:	7019      	strb	r1, [r3, #0]
}
    866e:	4770      	bx	lr
    8670:	20009bdf 	.word	0x20009bdf

00008674 <mylbsbc_ccc_mysensor_cfg_changed>:

/* STEP 13 - Define the configuration change callback function for the MYSENSOR characteristic */
static void mylbsbc_ccc_mysensor_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	notify_mysensor_enabled = (value == BT_GATT_CCC_NOTIFY);
    8674:	1e4b      	subs	r3, r1, #1
    8676:	4259      	negs	r1, r3
    8678:	4159      	adcs	r1, r3
    867a:	4b01      	ldr	r3, [pc, #4]	; (8680 <mylbsbc_ccc_mysensor_cfg_changed+0xc>)
    867c:	7019      	strb	r1, [r3, #0]
}
    867e:	4770      	bx	lr
    8680:	20009be0 	.word	0x20009be0

00008684 <write_led>:
	LOG_DBG("Indication %s\n", err != 0U ? "fail" : "success");
}

static ssize_t write_led(struct bt_conn *conn, const struct bt_gatt_attr *attr, const void *buf,
			 uint16_t len, uint16_t offset, uint8_t flags)
{
    8684:	b508      	push	{r3, lr}
	LOG_DBG("Attribute write, handle: %u, conn: %p", attr->handle, (void *)conn);

	if (len != 1U) {
    8686:	2b01      	cmp	r3, #1
{
    8688:	f8bd 1008 	ldrh.w	r1, [sp, #8]
	if (len != 1U) {
    868c:	d10c      	bne.n	86a8 <write_led+0x24>
		LOG_DBG("Write led: Incorrect data length");
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (offset != 0) {
    868e:	b971      	cbnz	r1, 86ae <write_led+0x2a>
		LOG_DBG("Write led: Incorrect data offset");
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (lbs_cb.led_cb) {
    8690:	4b0a      	ldr	r3, [pc, #40]	; (86bc <write_led+0x38>)
    8692:	681b      	ldr	r3, [r3, #0]
    8694:	b90b      	cbnz	r3, 869a <write_led+0x16>
			LOG_DBG("Write led: Incorrect value");
			return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
		}
	}

	return len;
    8696:	2001      	movs	r0, #1
}
    8698:	bd08      	pop	{r3, pc}
		uint8_t val = *((uint8_t *)buf);
    869a:	7810      	ldrb	r0, [r2, #0]
		if (val == 0x00 || val == 0x01) {
    869c:	2801      	cmp	r0, #1
    869e:	d809      	bhi.n	86b4 <write_led+0x30>
			lbs_cb.led_cb(val ? true : false);
    86a0:	f000 0001 	and.w	r0, r0, #1
    86a4:	4798      	blx	r3
    86a6:	e7f6      	b.n	8696 <write_led+0x12>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    86a8:	f06f 000c 	mvn.w	r0, #12
    86ac:	e7f4      	b.n	8698 <write_led+0x14>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    86ae:	f06f 0006 	mvn.w	r0, #6
    86b2:	e7f1      	b.n	8698 <write_led+0x14>
			return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    86b4:	f06f 0012 	mvn.w	r0, #18
    86b8:	e7ee      	b.n	8698 <write_led+0x14>
    86ba:	bf00      	nop
    86bc:	20009798 	.word	0x20009798

000086c0 <read_button>:

static ssize_t read_button(struct bt_conn *conn, const struct bt_gatt_attr *attr, void *buf,
			   uint16_t len, uint16_t offset)
{
    86c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    86c4:	461f      	mov	r7, r3
	// get a pointer to button_state which is passed in the BT_GATT_CHARACTERISTIC() and stored in attr->user_data
	const char *value = attr->user_data;

	LOG_DBG("Attribute read, handle: %u, conn: %p", attr->handle, (void *)conn);

	if (lbs_cb.button_cb) {
    86c6:	4b0d      	ldr	r3, [pc, #52]	; (86fc <read_button+0x3c>)
{
    86c8:	4605      	mov	r5, r0
	if (lbs_cb.button_cb) {
    86ca:	6858      	ldr	r0, [r3, #4]
{
    86cc:	460c      	mov	r4, r1
    86ce:	4616      	mov	r6, r2
	if (lbs_cb.button_cb) {
    86d0:	b180      	cbz	r0, 86f4 <read_button+0x34>
	const char *value = attr->user_data;
    86d2:	f8d1 800c 	ldr.w	r8, [r1, #12]
		// Call the application callback function to update the get the current value of the button
		button_state = lbs_cb.button_cb();
    86d6:	4780      	blx	r0
    86d8:	4b09      	ldr	r3, [pc, #36]	; (8700 <read_button+0x40>)
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value, sizeof(*value));
    86da:	4632      	mov	r2, r6
		button_state = lbs_cb.button_cb();
    86dc:	7018      	strb	r0, [r3, #0]
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value, sizeof(*value));
    86de:	2301      	movs	r3, #1
    86e0:	e9cd 8301 	strd	r8, r3, [sp, #4]
    86e4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    86e8:	4621      	mov	r1, r4
    86ea:	9300      	str	r3, [sp, #0]
    86ec:	4628      	mov	r0, r5
    86ee:	463b      	mov	r3, r7
    86f0:	f010 feb7 	bl	19462 <bt_gatt_attr_read>
	}

	return 0;
}
    86f4:	b004      	add	sp, #16
    86f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    86fa:	bf00      	nop
    86fc:	20009798 	.word	0x20009798
    8700:	20009bde 	.word	0x20009bde

00008704 <my_lbs_init>:

);
/* A function to register application callbacks for the LED and Button characteristics  */
int my_lbs_init(struct my_lbs_cb *callbacks)
{
	if (callbacks) {
    8704:	b120      	cbz	r0, 8710 <my_lbs_init+0xc>
		lbs_cb.led_cb = callbacks->led_cb;
    8706:	4b03      	ldr	r3, [pc, #12]	; (8714 <my_lbs_init+0x10>)
    8708:	6802      	ldr	r2, [r0, #0]
    870a:	601a      	str	r2, [r3, #0]
		lbs_cb.button_cb = callbacks->button_cb;
    870c:	6842      	ldr	r2, [r0, #4]
    870e:	605a      	str	r2, [r3, #4]
	}

	return 0;
}
    8710:	2000      	movs	r0, #0
    8712:	4770      	bx	lr
    8714:	20009798 	.word	0x20009798

00008718 <my_lbs_send_button_state_indicate>:

/* STEP 5.1 - Define the function to send indications */
int my_lbs_send_button_state_indicate(bool button_state)
{
    8718:	b507      	push	{r0, r1, r2, lr}
	if (!indicate_enabled) {
    871a:	4b0c      	ldr	r3, [pc, #48]	; (874c <my_lbs_send_button_state_indicate+0x34>)
{
    871c:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!indicate_enabled) {
    8720:	781b      	ldrb	r3, [r3, #0]
    8722:	b183      	cbz	r3, 8746 <my_lbs_send_button_state_indicate+0x2e>
		return -EACCES;
	}
	/* STEP 5.2 - Populate the indication */
	ind_params.attr = &my_lbs_svc.attrs[2];
    8724:	490a      	ldr	r1, [pc, #40]	; (8750 <my_lbs_send_button_state_indicate+0x38>)
    8726:	4b0b      	ldr	r3, [pc, #44]	; (8754 <my_lbs_send_button_state_indicate+0x3c>)
	ind_params.func = indicate_cb;
	ind_params.destroy = NULL;
    8728:	2000      	movs	r0, #0
	ind_params.attr = &my_lbs_svc.attrs[2];
    872a:	604b      	str	r3, [r1, #4]
	ind_params.func = indicate_cb;
    872c:	4b0a      	ldr	r3, [pc, #40]	; (8758 <my_lbs_send_button_state_indicate+0x40>)
	ind_params.destroy = NULL;
    872e:	60c8      	str	r0, [r1, #12]
	ind_params.func = indicate_cb;
    8730:	608b      	str	r3, [r1, #8]
	ind_params.data = &button_state;
    8732:	f10d 0307 	add.w	r3, sp, #7
    8736:	610b      	str	r3, [r1, #16]
	ind_params.len = sizeof(button_state);
    8738:	2301      	movs	r3, #1
    873a:	828b      	strh	r3, [r1, #20]
	return bt_gatt_indicate(NULL, &ind_params);
    873c:	f008 fe68 	bl	11410 <bt_gatt_indicate>
}
    8740:	b003      	add	sp, #12
    8742:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EACCES;
    8746:	f06f 000c 	mvn.w	r0, #12
    874a:	e7f9      	b.n	8740 <my_lbs_send_button_state_indicate+0x28>
    874c:	20009bdf 	.word	0x20009bdf
    8750:	20009780 	.word	0x20009780
    8754:	0001ba38 	.word	0x0001ba38
    8758:	000166c5 	.word	0x000166c5

0000875c <my_lbs_send_sensor_notify>:

/* STEP 14 - Define the function to send notifications for the MYSENSOR characteristic */
int my_lbs_send_sensor_notify(uint32_t sensor_value)
{
    875c:	b500      	push	{lr}
	if (!notify_mysensor_enabled) {
    875e:	4b0d      	ldr	r3, [pc, #52]	; (8794 <my_lbs_send_sensor_notify+0x38>)
{
    8760:	b089      	sub	sp, #36	; 0x24
	if (!notify_mysensor_enabled) {
    8762:	781b      	ldrb	r3, [r3, #0]
{
    8764:	9001      	str	r0, [sp, #4]
	if (!notify_mysensor_enabled) {
    8766:	b193      	cbz	r3, 878e <my_lbs_send_sensor_notify+0x32>
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    8768:	2100      	movs	r1, #0
    876a:	2218      	movs	r2, #24
    876c:	a802      	add	r0, sp, #8
    876e:	f00f fd29 	bl	181c4 <memset>

	params.attr = attr;
    8772:	4b09      	ldr	r3, [pc, #36]	; (8798 <my_lbs_send_sensor_notify+0x3c>)
	params.len = len;
#if defined(CONFIG_BT_EATT)
	params.chan_opt = BT_ATT_CHAN_OPT_NONE;
#endif /* CONFIG_BT_EATT */

	return bt_gatt_notify_cb(conn, &params);
    8774:	2000      	movs	r0, #0
	params.attr = attr;
    8776:	9303      	str	r3, [sp, #12]
	params.data = data;
    8778:	ab01      	add	r3, sp, #4
    877a:	9304      	str	r3, [sp, #16]
	params.len = len;
    877c:	2304      	movs	r3, #4
	return bt_gatt_notify_cb(conn, &params);
    877e:	a902      	add	r1, sp, #8
	params.len = len;
    8780:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
    8784:	f008 ffca 	bl	1171c <bt_gatt_notify_cb>
		return -EACCES;
	}
	return bt_gatt_notify(NULL, &my_lbs_svc.attrs[7],
			      &sensor_value,
			      sizeof(sensor_value));
}
    8788:	b009      	add	sp, #36	; 0x24
    878a:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EACCES;
    878e:	f06f 000c 	mvn.w	r0, #12
    8792:	e7f9      	b.n	8788 <my_lbs_send_sensor_notify+0x2c>
    8794:	20009be0 	.word	0x20009be0
    8798:	0001ba9c 	.word	0x0001ba9c

0000879c <initializeADC>:
   }

}

int initializeADC(void)
{
    879c:	b538      	push	{r3, r4, r5, lr}

    int err;
	
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    879e:	2500      	movs	r5, #0
    87a0:	4c12      	ldr	r4, [pc, #72]	; (87ec <initializeADC+0x50>)
		if (!device_is_ready(adc_channels[i].dev)) {
    87a2:	f854 0c06 	ldr.w	r0, [r4, #-6]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    87a6:	f012 f87d 	bl	1a8a4 <z_device_is_ready>
    87aa:	b928      	cbnz	r0, 87b8 <initializeADC+0x1c>
			printk("ADC controller device not ready\n");
    87ac:	4810      	ldr	r0, [pc, #64]	; (87f0 <initializeADC+0x54>)
    87ae:	f00d fff7 	bl	167a0 <printk>
			return -1;
    87b2:	f04f 30ff 	mov.w	r0, #4294967295
		}
	}

    return 0;

}
    87b6:	bd38      	pop	{r3, r4, r5, pc}
 * Devicetree is not valid.
 * @see adc_channel_setup()
 */
static inline int adc_channel_setup_dt(const struct adc_dt_spec *spec)
{
	if (!spec->channel_cfg_dt_node_exists) {
    87b8:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    87bc:	b163      	cbz	r3, 87d8 <initializeADC+0x3c>
		return -ENOTSUP;
	}

	return adc_channel_setup(spec->dev, &spec->channel_cfg);
    87be:	f854 0c06 	ldr.w	r0, [r4, #-6]
	return api->channel_setup(dev, channel_cfg);
    87c2:	6883      	ldr	r3, [r0, #8]
    87c4:	4621      	mov	r1, r4
    87c6:	681b      	ldr	r3, [r3, #0]
    87c8:	4798      	blx	r3
		if (err < 0) {
    87ca:	1e02      	subs	r2, r0, #0
    87cc:	da07      	bge.n	87de <initializeADC+0x42>
			printk("Could not setup channel #%d (%d)\n", i, err);
    87ce:	4629      	mov	r1, r5
    87d0:	4808      	ldr	r0, [pc, #32]	; (87f4 <initializeADC+0x58>)
    87d2:	f00d ffe5 	bl	167a0 <printk>
			return -1;
    87d6:	e7ec      	b.n	87b2 <initializeADC+0x16>
		return -ENOTSUP;
    87d8:	f06f 0285 	mvn.w	r2, #133	; 0x85
    87dc:	e7f7      	b.n	87ce <initializeADC+0x32>
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    87de:	3501      	adds	r5, #1
    87e0:	2d03      	cmp	r5, #3
    87e2:	f104 0414 	add.w	r4, r4, #20
    87e6:	d1dc      	bne.n	87a2 <initializeADC+0x6>
    return 0;
    87e8:	2000      	movs	r0, #0
    87ea:	e7e4      	b.n	87b6 <initializeADC+0x1a>
    87ec:	0001baca 	.word	0x0001baca
    87f0:	0001c3c5 	.word	0x0001c3c5
    87f4:	0001c3e6 	.word	0x0001c3e6

000087f8 <readADCValue>:

struct Measurement readADCValue(void)
{
    87f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t buf;
    struct Measurement m;
    struct adc_sequence sequence = {
    87fc:	2214      	movs	r2, #20
{
    87fe:	2600      	movs	r6, #0
    8800:	b08b      	sub	sp, #44	; 0x2c
    struct adc_sequence sequence = {
    8802:	4631      	mov	r1, r6
{
    8804:	4607      	mov	r7, r0
    struct adc_sequence sequence = {
    8806:	eb0d 0002 	add.w	r0, sp, r2
    880a:	f00f fcdb 	bl	181c4 <memset>
    880e:	f10d 030e 	add.w	r3, sp, #14
    8812:	9307      	str	r3, [sp, #28]
    8814:	2302      	movs	r3, #2
	  .buffer = &buf,

	  .buffer_size = sizeof(buf),
    };

    printk("ADC reading:\n");
    8816:	4837      	ldr	r0, [pc, #220]	; (88f4 <readADCValue+0xfc>)
    struct adc_sequence sequence = {
    8818:	9308      	str	r3, [sp, #32]
{
    881a:	46b1      	mov	r9, r6
    881c:	46b0      	mov	r8, r6
    printk("ADC reading:\n");
    881e:	f00d ffbf 	bl	167a0 <printk>
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) 
    8822:	4635      	mov	r5, r6
    8824:	46b2      	mov	sl, r6

	/*
	 * For differential channels, one bit less needs to be specified
	 * for resolution to achieve correct conversion.
	 */
	if (spec->channel_cfg.differential) {
    8826:	f04f 0b14 	mov.w	fp, #20
    882a:	4c33      	ldr	r4, [pc, #204]	; (88f8 <readADCValue+0x100>)
 * @retval -ENOTSUP If @p spec does not have valid channel configuration
 */
static inline int adc_sequence_init_dt(const struct adc_dt_spec *spec,
				       struct adc_sequence *seq)
{
	if (!spec->channel_cfg_dt_node_exists) {
    882c:	7963      	ldrb	r3, [r4, #5]
    882e:	b153      	cbz	r3, 8846 <readADCValue+0x4e>
		return -ENOTSUP;
	}

	seq->channels = BIT(spec->channel_id);
    8830:	2201      	movs	r2, #1
    8832:	7923      	ldrb	r3, [r4, #4]
    8834:	fa02 f303 	lsl.w	r3, r2, r3
    8838:	9306      	str	r3, [sp, #24]
	seq->resolution = spec->resolution;
    883a:	7c23      	ldrb	r3, [r4, #16]
    883c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	seq->oversampling = spec->oversampling;
    8840:	7c63      	ldrb	r3, [r4, #17]
    8842:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		       adc_channels[i].channel_id);
        */

		(void)adc_sequence_init_dt(&adc_channels[i], &sequence);

		err = adc_read(adc_channels[i].dev, &sequence);
    8846:	6820      	ldr	r0, [r4, #0]
	return api->read(dev, sequence);
    8848:	6883      	ldr	r3, [r0, #8]
    884a:	a905      	add	r1, sp, #20
    884c:	685b      	ldr	r3, [r3, #4]
    884e:	4798      	blx	r3
		if (err < 0) {
    8850:	1e01      	subs	r1, r0, #0
    8852:	da10      	bge.n	8876 <readADCValue+0x7e>
			printk("Could not read (%d)\n", err);
    8854:	4829      	ldr	r0, [pc, #164]	; (88fc <readADCValue+0x104>)
    8856:	f00d ffa3 	bl	167a0 <printk>
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) 
    885a:	3501      	adds	r5, #1
    885c:	2d03      	cmp	r5, #3
    885e:	f104 0414 	add.w	r4, r4, #20
    8862:	d1e3      	bne.n	882c <readADCValue+0x34>
            }           
            //printk(" = %"PRId32" mV\n", val_mv);
		}
	}
    return m;
}
    8864:	4638      	mov	r0, r7
    return m;
    8866:	f8a7 9000 	strh.w	r9, [r7]
    886a:	807e      	strh	r6, [r7, #2]
    886c:	f8a7 8004 	strh.w	r8, [r7, #4]
}
    8870:	b00b      	add	sp, #44	; 0x2c
    8872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(i==0)
    8876:	b945      	cbnz	r5, 888a <readADCValue+0x92>
                m.x = val_mv;
    8878:	46d1      	mov	r9, sl
	if (!spec->channel_cfg_dt_node_exists) {
    887a:	7962      	ldrb	r2, [r4, #5]
		val_mv = buf;
    887c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
    8880:	b942      	cbnz	r2, 8894 <readADCValue+0x9c>
			printk(" (value in mV not available)\n");
    8882:	481f      	ldr	r0, [pc, #124]	; (8900 <readADCValue+0x108>)
    8884:	f00d ff8c 	bl	167a0 <printk>
    8888:	e7e7      	b.n	885a <readADCValue+0x62>
               m.y = val_mv;
    888a:	2d01      	cmp	r5, #1
    888c:	bf0c      	ite	eq
    888e:	4656      	moveq	r6, sl
    8890:	46d0      	movne	r8, sl
    8892:	e7f2      	b.n	887a <readADCValue+0x82>
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    8894:	79e2      	ldrb	r2, [r4, #7]
	if (spec->channel_cfg.differential) {
    8896:	4818      	ldr	r0, [pc, #96]	; (88f8 <readADCValue+0x100>)
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    8898:	2a04      	cmp	r2, #4
	const struct adc_driver_api *api =
    889a:	bf08      	it	eq
    889c:	6822      	ldreq	r2, [r4, #0]
	if (spec->channel_cfg.differential) {
    889e:	fb0b 0005 	mla	r0, fp, r5, r0
	return api->ref_internal;
    88a2:	bf0a      	itet	eq
    88a4:	6892      	ldreq	r2, [r2, #8]
		vref_mv = spec->vref_mv;
    88a6:	89e1      	ldrhne	r1, [r4, #14]
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
    88a8:	8911      	ldrheq	r1, [r2, #8]
	if (spec->channel_cfg.differential) {
    88aa:	7a80      	ldrb	r0, [r0, #10]
	int32_t adc_mv = *valp * ref_mv;
    88ac:	4359      	muls	r1, r3
	resolution = spec->resolution;
    88ae:	7c22      	ldrb	r2, [r4, #16]
	if (spec->channel_cfg.differential) {
    88b0:	0680      	lsls	r0, r0, #26
		resolution -= 1U;
    88b2:	bf44      	itt	mi
    88b4:	f102 32ff 	addmi.w	r2, r2, #4294967295
    88b8:	b2d2      	uxtbmi	r2, r2
	int32_t adc_mv = *valp * ref_mv;
    88ba:	9104      	str	r1, [sp, #16]
	int ret = adc_gain_invert(gain, &adc_mv);
    88bc:	79a0      	ldrb	r0, [r4, #6]
    88be:	a904      	add	r1, sp, #16
	int32_t adc_mv = *valp * ref_mv;
    88c0:	9300      	str	r3, [sp, #0]
    88c2:	9201      	str	r2, [sp, #4]
	int ret = adc_gain_invert(gain, &adc_mv);
    88c4:	f009 f988 	bl	11bd8 <adc_gain_invert>
	if (ret == 0) {
    88c8:	2800      	cmp	r0, #0
    88ca:	9b00      	ldr	r3, [sp, #0]
    88cc:	d108      	bne.n	88e0 <readADCValue+0xe8>
		*valp = (adc_mv >> resolution);
    88ce:	9b04      	ldr	r3, [sp, #16]
    88d0:	9a01      	ldr	r2, [sp, #4]
    88d2:	4113      	asrs	r3, r2
			if(i==0)
    88d4:	b29b      	uxth	r3, r3
    88d6:	b92d      	cbnz	r5, 88e4 <readADCValue+0xec>
                m.x = val_mv;
    88d8:	4699      	mov	r9, r3
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) 
    88da:	2501      	movs	r5, #1
    88dc:	3414      	adds	r4, #20
    88de:	e7a5      	b.n	882c <readADCValue+0x34>
		if (err < 0) 
    88e0:	dbcf      	blt.n	8882 <readADCValue+0x8a>
    88e2:	e7f7      	b.n	88d4 <readADCValue+0xdc>
            else if (i==1)
    88e4:	2d01      	cmp	r5, #1
    88e6:	d103      	bne.n	88f0 <readADCValue+0xf8>
                m.x = val_mv;
    88e8:	461e      	mov	r6, r3
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) 
    88ea:	2502      	movs	r5, #2
    88ec:	3414      	adds	r4, #20
    88ee:	e79d      	b.n	882c <readADCValue+0x34>
                m.x = val_mv;
    88f0:	4698      	mov	r8, r3
    88f2:	e7b7      	b.n	8864 <readADCValue+0x6c>
    88f4:	0001c408 	.word	0x0001c408
    88f8:	0001bac4 	.word	0x0001bac4
    88fc:	0001c416 	.word	0x0001c416
    8900:	0001c42b 	.word	0x0001c42b

00008904 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    8904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8908:	b091      	sub	sp, #68	; 0x44
    890a:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    890c:	f002 0304 	and.w	r3, r2, #4
    8910:	9302      	str	r3, [sp, #8]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    8912:	f3c2 03c2 	ubfx	r3, r2, #3, #3
    8916:	3301      	adds	r3, #1
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    8918:	0784      	lsls	r4, r0, #30
{
    891a:	4605      	mov	r5, r0
    891c:	460e      	mov	r6, r1
    891e:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
    8922:	9203      	str	r2, [sp, #12]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    8924:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
    8926:	f040 81bd 	bne.w	8ca4 <cbvprintf_package+0x3a0>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    892a:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    892c:	b130      	cbz	r0, 893c <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    892e:	2907      	cmp	r1, #7
    8930:	d809      	bhi.n	8946 <cbvprintf_package+0x42>
		return -ENOSPC;
    8932:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    8936:	b011      	add	sp, #68	; 0x44
    8938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    893c:	f001 0607 	and.w	r6, r1, #7
    8940:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    8942:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
    8946:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    8948:	f04f 0900 	mov.w	r9, #0
	align = VA_STACK_ALIGN(char *);
    894c:	f04f 0a04 	mov.w	sl, #4
	s = fmt--;
    8950:	1e59      	subs	r1, r3, #1
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    8952:	f04f 33ff 	mov.w	r3, #4294967295
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    8956:	464f      	mov	r7, r9
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    8958:	9301      	str	r3, [sp, #4]
	bool parsing = false;
    895a:	46cb      	mov	fp, r9
	size = sizeof(char *);
    895c:	4653      	mov	r3, sl
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    895e:	f8cd 9010 	str.w	r9, [sp, #16]
			if (buf0 != NULL) {
    8962:	b10d      	cbz	r5, 8968 <cbvprintf_package+0x64>
				*(const char **)buf = s;
    8964:	9a00      	ldr	r2, [sp, #0]
    8966:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    8968:	9805      	ldr	r0, [sp, #20]
    896a:	2800      	cmp	r0, #0
    896c:	f300 80eb 	bgt.w	8b46 <cbvprintf_package+0x242>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    8970:	4899      	ldr	r0, [pc, #612]	; (8bd8 <cbvprintf_package+0x2d4>)
    8972:	9a00      	ldr	r2, [sp, #0]
    8974:	4282      	cmp	r2, r0
    8976:	d303      	bcc.n	8980 <cbvprintf_package+0x7c>
    8978:	4898      	ldr	r0, [pc, #608]	; (8bdc <cbvprintf_package+0x2d8>)
    897a:	4282      	cmp	r2, r0
    897c:	f0c0 80e3 	bcc.w	8b46 <cbvprintf_package+0x242>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    8980:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    8982:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    8986:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    8988:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    898c:	f100 8106 	bmi.w	8b9c <cbvprintf_package+0x298>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    8990:	2f0f      	cmp	r7, #15
    8992:	f200 80b4 	bhi.w	8afe <cbvprintf_package+0x1fa>
				if (buf0 != NULL) {
    8996:	2d00      	cmp	r5, #0
    8998:	f000 8108 	beq.w	8bac <cbvprintf_package+0x2a8>
					str_ptr_pos[s_idx] = s_ptr_idx;
    899c:	f107 0240 	add.w	r2, r7, #64	; 0x40
    89a0:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
    89a4:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    89a6:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    89aa:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
    89ae:	9804      	ldr	r0, [sp, #16]
    89b0:	3001      	adds	r0, #1
    89b2:	9004      	str	r0, [sp, #16]
    89b4:	e0ea      	b.n	8b8c <cbvprintf_package+0x288>
			switch (*fmt) {
    89b6:	287a      	cmp	r0, #122	; 0x7a
    89b8:	d860      	bhi.n	8a7c <cbvprintf_package+0x178>
    89ba:	284b      	cmp	r0, #75	; 0x4b
    89bc:	d80e      	bhi.n	89dc <cbvprintf_package+0xd8>
    89be:	2847      	cmp	r0, #71	; 0x47
    89c0:	d85c      	bhi.n	8a7c <cbvprintf_package+0x178>
    89c2:	2829      	cmp	r0, #41	; 0x29
    89c4:	d82f      	bhi.n	8a26 <cbvprintf_package+0x122>
    89c6:	2825      	cmp	r0, #37	; 0x25
    89c8:	d055      	beq.n	8a76 <cbvprintf_package+0x172>
    89ca:	d857      	bhi.n	8a7c <cbvprintf_package+0x178>
    89cc:	2820      	cmp	r0, #32
    89ce:	d07d      	beq.n	8acc <cbvprintf_package+0x1c8>
    89d0:	3823      	subs	r0, #35	; 0x23
    89d2:	f1d0 0b00 	rsbs	fp, r0, #0
    89d6:	eb4b 0b00 	adc.w	fp, fp, r0
    89da:	e077      	b.n	8acc <cbvprintf_package+0x1c8>
    89dc:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
    89e0:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    89e4:	d84a      	bhi.n	8a7c <cbvprintf_package+0x178>
    89e6:	e8df f00c 	tbb	[pc, ip]
    89ea:	4971      	.short	0x4971
    89ec:	49494949 	.word	0x49494949
    89f0:	49494949 	.word	0x49494949
    89f4:	494c4949 	.word	0x494c4949
    89f8:	49494949 	.word	0x49494949
    89fc:	5a494949 	.word	0x5a494949
    8a00:	5a4c4c49 	.word	0x5a4c4c49
    8a04:	4c715a5a 	.word	0x4c715a5a
    8a08:	4971496e 	.word	0x4971496e
    8a0c:	49184c18 	.word	0x49184c18
    8a10:	4c808349 	.word	0x4c808349
    8a14:	494c4949 	.word	0x494c4949
    8a18:	80          	.byte	0x80
    8a19:	00          	.byte	0x00
    8a1a:	2000      	movs	r0, #0
    8a1c:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
    8a20:	f04f 0a04 	mov.w	sl, #4
    8a24:	e039      	b.n	8a9a <cbvprintf_package+0x196>
    8a26:	2201      	movs	r2, #1
			switch (*fmt) {
    8a28:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
    8a2c:	fa5f fc8c 	uxtb.w	ip, ip
    8a30:	fa02 fc0c 	lsl.w	ip, r2, ip
    8a34:	ea1c 0f0e 	tst.w	ip, lr
    8a38:	d148      	bne.n	8acc <cbvprintf_package+0x1c8>
    8a3a:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
    8a3e:	d12e      	bne.n	8a9e <cbvprintf_package+0x19a>
    8a40:	ea1c 0b02 	ands.w	fp, ip, r2
    8a44:	d042      	beq.n	8acc <cbvprintf_package+0x1c8>
		buf = (void *) ROUND_UP(buf, align);
    8a46:	3c01      	subs	r4, #1
    8a48:	4454      	add	r4, sl
    8a4a:	f1ca 0c00 	rsb	ip, sl, #0
    8a4e:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    8a52:	2d00      	cmp	r5, #0
    8a54:	d061      	beq.n	8b1a <cbvprintf_package+0x216>
    8a56:	eba3 0c05 	sub.w	ip, r3, r5
    8a5a:	44a4      	add	ip, r4
    8a5c:	45b4      	cmp	ip, r6
    8a5e:	f63f af68 	bhi.w	8932 <cbvprintf_package+0x2e>
		if (is_str_arg) {
    8a62:	2800      	cmp	r0, #0
    8a64:	d168      	bne.n	8b38 <cbvprintf_package+0x234>
		} else if (size == sizeof(int)) {
    8a66:	2b04      	cmp	r3, #4
    8a68:	d147      	bne.n	8afa <cbvprintf_package+0x1f6>
			int v = va_arg(ap, int);
    8a6a:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
    8a6e:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
    8a70:	2304      	movs	r3, #4
    8a72:	3404      	adds	r4, #4
    8a74:	e02a      	b.n	8acc <cbvprintf_package+0x1c8>
				arg_idx--;
    8a76:	9a01      	ldr	r2, [sp, #4]
    8a78:	3a01      	subs	r2, #1
    8a7a:	9201      	str	r2, [sp, #4]
				parsing = false;
    8a7c:	f04f 0b00 	mov.w	fp, #0
				continue;
    8a80:	e024      	b.n	8acc <cbvprintf_package+0x1c8>
				if (fmt[-1] == 'l') {
    8a82:	f811 0c01 	ldrb.w	r0, [r1, #-1]
    8a86:	286c      	cmp	r0, #108	; 0x6c
    8a88:	d134      	bne.n	8af4 <cbvprintf_package+0x1f0>
					if (fmt[-2] == 'l') {
    8a8a:	2000      	movs	r0, #0
    8a8c:	f811 3c02 	ldrb.w	r3, [r1, #-2]
				parsing = false;
    8a90:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
    8a92:	2b6c      	cmp	r3, #108	; 0x6c
    8a94:	d1c4      	bne.n	8a20 <cbvprintf_package+0x11c>
						align = VA_STACK_ALIGN(long long);
    8a96:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
    8a9a:	4653      	mov	r3, sl
    8a9c:	e7d3      	b.n	8a46 <cbvprintf_package+0x142>
					v.ld = va_arg(ap, long double);
    8a9e:	f108 0807 	add.w	r8, r8, #7
    8aa2:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
    8aa6:	3407      	adds	r4, #7
    8aa8:	f024 0407 	bic.w	r4, r4, #7
					v.ld = va_arg(ap, long double);
    8aac:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				if (buf0 != NULL) {
    8ab0:	b135      	cbz	r5, 8ac0 <cbvprintf_package+0x1bc>
					if (BUF_OFFSET + size > len) {
    8ab2:	9806      	ldr	r0, [sp, #24]
    8ab4:	4420      	add	r0, r4
    8ab6:	42b0      	cmp	r0, r6
    8ab8:	f63f af3b 	bhi.w	8932 <cbvprintf_package+0x2e>
						*(long double *)buf = v.ld;
    8abc:	e9c4 ab00 	strd	sl, fp, [r4]
				parsing = false;
    8ac0:	f04f 0b00 	mov.w	fp, #0
				buf += size;
    8ac4:	3408      	adds	r4, #8
			switch (*fmt) {
    8ac6:	f04f 0a08 	mov.w	sl, #8
    8aca:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
    8acc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    8ad0:	2800      	cmp	r0, #0
    8ad2:	d078      	beq.n	8bc6 <cbvprintf_package+0x2c2>
			if (!parsing) {
    8ad4:	f1bb 0f00 	cmp.w	fp, #0
    8ad8:	f47f af6d 	bne.w	89b6 <cbvprintf_package+0xb2>
				if (*fmt == '%') {
    8adc:	2825      	cmp	r0, #37	; 0x25
    8ade:	d1f5      	bne.n	8acc <cbvprintf_package+0x1c8>
					parsing = true;
    8ae0:	f04f 0b01 	mov.w	fp, #1
					arg_idx++;
    8ae4:	9b01      	ldr	r3, [sp, #4]
    8ae6:	3301      	adds	r3, #1
    8ae8:	9301      	str	r3, [sp, #4]
				align = VA_STACK_ALIGN(size_t);
    8aea:	f04f 0a04 	mov.w	sl, #4
    8aee:	e7ec      	b.n	8aca <cbvprintf_package+0x1c6>
			switch (*fmt) {
    8af0:	4658      	mov	r0, fp
    8af2:	e793      	b.n	8a1c <cbvprintf_package+0x118>
    8af4:	2000      	movs	r0, #0
				parsing = false;
    8af6:	4683      	mov	fp, r0
    8af8:	e7a5      	b.n	8a46 <cbvprintf_package+0x142>
		} else if (size == sizeof(long long)) {
    8afa:	2b08      	cmp	r3, #8
    8afc:	d002      	beq.n	8b04 <cbvprintf_package+0x200>
					return -EINVAL;
    8afe:	f06f 0015 	mvn.w	r0, #21
    8b02:	e718      	b.n	8936 <cbvprintf_package+0x32>
			long long v = va_arg(ap, long long);
    8b04:	f108 0807 	add.w	r8, r8, #7
    8b08:	f028 0807 	bic.w	r8, r8, #7
    8b0c:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
    8b10:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
    8b14:	2308      	movs	r3, #8
    8b16:	3408      	adds	r4, #8
    8b18:	e7d8      	b.n	8acc <cbvprintf_package+0x1c8>
		if (is_str_arg) {
    8b1a:	b968      	cbnz	r0, 8b38 <cbvprintf_package+0x234>
		} else if (size == sizeof(int)) {
    8b1c:	2b04      	cmp	r3, #4
    8b1e:	d102      	bne.n	8b26 <cbvprintf_package+0x222>
			int v = va_arg(ap, int);
    8b20:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
    8b24:	e7a4      	b.n	8a70 <cbvprintf_package+0x16c>
		} else if (size == sizeof(long long)) {
    8b26:	2b08      	cmp	r3, #8
    8b28:	d1e9      	bne.n	8afe <cbvprintf_package+0x1fa>
			long long v = va_arg(ap, long long);
    8b2a:	f108 0807 	add.w	r8, r8, #7
    8b2e:	f028 0807 	bic.w	r8, r8, #7
    8b32:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
    8b36:	e7ed      	b.n	8b14 <cbvprintf_package+0x210>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    8b38:	9a05      	ldr	r2, [sp, #20]
    8b3a:	3a01      	subs	r2, #1
    8b3c:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
    8b3e:	f858 2b04 	ldr.w	r2, [r8], #4
    8b42:	9200      	str	r2, [sp, #0]
    8b44:	e70d      	b.n	8962 <cbvprintf_package+0x5e>
			if (is_ro && !do_ro) {
    8b46:	9a03      	ldr	r2, [sp, #12]
    8b48:	0790      	lsls	r0, r2, #30
    8b4a:	d520      	bpl.n	8b8e <cbvprintf_package+0x28a>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    8b4c:	f04f 0c01 	mov.w	ip, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    8b50:	eba4 0e05 	sub.w	lr, r4, r5
    8b54:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    8b58:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    8b5c:	d2cf      	bcs.n	8afe <cbvprintf_package+0x1fa>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    8b5e:	2f0f      	cmp	r7, #15
    8b60:	d8cd      	bhi.n	8afe <cbvprintf_package+0x1fa>
				if (buf0 != NULL) {
    8b62:	b1f5      	cbz	r5, 8ba2 <cbvprintf_package+0x29e>
					str_ptr_pos[s_idx] = s_ptr_idx;
    8b64:	f107 0240 	add.w	r2, r7, #64	; 0x40
    8b68:	eb0d 0e02 	add.w	lr, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
    8b6c:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    8b6e:	b2c0      	uxtb	r0, r0
    8b70:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    8b74:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
    8b78:	f1bc 0f00 	cmp.w	ip, #0
    8b7c:	f43f af17 	beq.w	89ae <cbvprintf_package+0xaa>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    8b80:	f060 007f 	orn	r0, r0, #127	; 0x7f
    8b84:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
    8b88:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
    8b8c:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
    8b8e:	f1c5 0208 	rsb	r2, r5, #8
			switch (*fmt) {
    8b92:	f64f 7eda 	movw	lr, #65498	; 0xffda
			buf += sizeof(char *);
    8b96:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
    8b98:	9206      	str	r2, [sp, #24]
    8b9a:	e797      	b.n	8acc <cbvprintf_package+0x1c8>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    8b9c:	f04f 0c00 	mov.w	ip, #0
    8ba0:	e7da      	b.n	8b58 <cbvprintf_package+0x254>
				} else if (is_ro) {
    8ba2:	f1bc 0f00 	cmp.w	ip, #0
    8ba6:	d001      	beq.n	8bac <cbvprintf_package+0x2a8>
					len += 1;
    8ba8:	3601      	adds	r6, #1
    8baa:	e7ef      	b.n	8b8c <cbvprintf_package+0x288>
				} else if (rws_pos_en) {
    8bac:	9802      	ldr	r0, [sp, #8]
					len += 2;
    8bae:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
    8bb0:	2800      	cmp	r0, #0
    8bb2:	d1eb      	bne.n	8b8c <cbvprintf_package+0x288>
					len += strlen(s) + 1 + 1;
    8bb4:	9800      	ldr	r0, [sp, #0]
    8bb6:	e9cd 3106 	strd	r3, r1, [sp, #24]
    8bba:	f00f fab9 	bl	18130 <strlen>
    8bbe:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
    8bc2:	4406      	add	r6, r0
    8bc4:	e7e2      	b.n	8b8c <cbvprintf_package+0x288>
	if (BUF_OFFSET / sizeof(int) > 255) {
    8bc6:	1b63      	subs	r3, r4, r5
    8bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    8bcc:	d297      	bcs.n	8afe <cbvprintf_package+0x1fa>
	if (buf0 == NULL) {
    8bce:	b93d      	cbnz	r5, 8be0 <cbvprintf_package+0x2dc>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    8bd0:	f1a6 0408 	sub.w	r4, r6, #8
    8bd4:	18e0      	adds	r0, r4, r3
    8bd6:	e6ae      	b.n	8936 <cbvprintf_package+0x32>
    8bd8:	0001b3ec 	.word	0x0001b3ec
    8bdc:	0001e720 	.word	0x0001e720
	if (rws_pos_en) {
    8be0:	9a02      	ldr	r2, [sp, #8]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    8be2:	089b      	lsrs	r3, r3, #2
	*(char **)buf0 = NULL;
    8be4:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    8be6:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    8be8:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
    8bec:	b1c2      	cbz	r2, 8c20 <cbvprintf_package+0x31c>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    8bee:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    8bf0:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
    8bf4:	f1b9 0f00 	cmp.w	r9, #0
    8bf8:	d005      	beq.n	8c06 <cbvprintf_package+0x302>
		for (i = 0; i < s_idx; i++) {
    8bfa:	2200      	movs	r2, #0
    8bfc:	a808      	add	r0, sp, #32
			if (BUF_OFFSET + 1 > len) {
    8bfe:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
    8c02:	4297      	cmp	r7, r2
    8c04:	d10e      	bne.n	8c24 <cbvprintf_package+0x320>
			*buf++ = str_ptr_arg[i];
    8c06:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
    8c0a:	f1c5 0301 	rsb	r3, r5, #1
    8c0e:	f10d 0820 	add.w	r8, sp, #32
    8c12:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
    8c14:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
    8c18:	4557      	cmp	r7, sl
    8c1a:	d112      	bne.n	8c42 <cbvprintf_package+0x33e>
	return BUF_OFFSET;
    8c1c:	1b60      	subs	r0, r4, r5
    8c1e:	e68a      	b.n	8936 <cbvprintf_package+0x32>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    8c20:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    8c22:	e7e5      	b.n	8bf0 <cbvprintf_package+0x2ec>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    8c24:	f810 3b01 	ldrb.w	r3, [r0], #1
    8c28:	0619      	lsls	r1, r3, #24
    8c2a:	d508      	bpl.n	8c3e <cbvprintf_package+0x33a>
			if (BUF_OFFSET + 1 > len) {
    8c2c:	eb04 0e0c 	add.w	lr, r4, ip
    8c30:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    8c32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    8c36:	f63f ae7c 	bhi.w	8932 <cbvprintf_package+0x2e>
			*buf++ = pos;
    8c3a:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
    8c3e:	3201      	adds	r2, #1
    8c40:	e7df      	b.n	8c02 <cbvprintf_package+0x2fe>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    8c42:	f1b9 0f00 	cmp.w	r9, #0
    8c46:	d003      	beq.n	8c50 <cbvprintf_package+0x34c>
    8c48:	f998 2000 	ldrsb.w	r2, [r8]
    8c4c:	2a00      	cmp	r2, #0
    8c4e:	db17      	blt.n	8c80 <cbvprintf_package+0x37c>
		if (rws_pos_en) {
    8c50:	9b02      	ldr	r3, [sp, #8]
    8c52:	b1d3      	cbz	r3, 8c8a <cbvprintf_package+0x386>
			*buf++ = str_ptr_arg[i];
    8c54:	f81a 200b 	ldrb.w	r2, [sl, fp]
    8c58:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
    8c5c:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
    8c5e:	9b01      	ldr	r3, [sp, #4]
    8c60:	1898      	adds	r0, r3, r2
    8c62:	4420      	add	r0, r4
    8c64:	42b0      	cmp	r0, r6
    8c66:	f63f ae64 	bhi.w	8932 <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
    8c6a:	f898 0000 	ldrb.w	r0, [r8]
		memcpy(buf, s, size);
    8c6e:	9900      	ldr	r1, [sp, #0]
		*buf++ = str_ptr_pos[i];
    8c70:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
    8c74:	4620      	mov	r0, r4
    8c76:	9203      	str	r2, [sp, #12]
    8c78:	f00f fa99 	bl	181ae <memcpy>
		buf += size;
    8c7c:	9a03      	ldr	r2, [sp, #12]
    8c7e:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    8c80:	f10a 0a01 	add.w	sl, sl, #1
    8c84:	f108 0801 	add.w	r8, r8, #1
    8c88:	e7c6      	b.n	8c18 <cbvprintf_package+0x314>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    8c8a:	f898 2000 	ldrb.w	r2, [r8]
    8c8e:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    8c92:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    8c94:	9b02      	ldr	r3, [sp, #8]
			size = strlen(s) + 1;
    8c96:	9800      	ldr	r0, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    8c98:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    8c9c:	f00f fa48 	bl	18130 <strlen>
    8ca0:	1c42      	adds	r2, r0, #1
    8ca2:	e7dc      	b.n	8c5e <cbvprintf_package+0x35a>
		return -EFAULT;
    8ca4:	f06f 000d 	mvn.w	r0, #13
    8ca8:	e645      	b.n	8936 <cbvprintf_package+0x32>
    8caa:	bf00      	nop

00008cac <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    8cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8cb0:	b095      	sub	sp, #84	; 0x54
    8cb2:	af00      	add	r7, sp, #0
    8cb4:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
    8cb8:	61bb      	str	r3, [r7, #24]
    8cba:	f3cb 03c0 	ubfx	r3, fp, #3, #1
    8cbe:	4604      	mov	r4, r0
    8cc0:	627a      	str	r2, [r7, #36]	; 0x24
    8cc2:	613b      	str	r3, [r7, #16]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    8cc4:	6239      	str	r1, [r7, #32]
    8cc6:	b951      	cbnz	r1, 8cde <cbprintf_package_convert+0x32>
	buf += ros_nbr;
    8cc8:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
    8cca:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
    8ccc:	7880      	ldrb	r0, [r0, #2]
    8cce:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    8cd2:	4420      	add	r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
    8cd4:	6a3b      	ldr	r3, [r7, #32]
    8cd6:	429e      	cmp	r6, r3
    8cd8:	d81a      	bhi.n	8d10 <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
    8cda:	1b03      	subs	r3, r0, r4
    8cdc:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
    8cde:	f894 a002 	ldrb.w	sl, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
    8ce2:	78e3      	ldrb	r3, [r4, #3]
	ros_nbr = in_desc->ro_str_cnt;
    8ce4:	4656      	mov	r6, sl
	rws_nbr = in_desc->rw_str_cnt;
    8ce6:	617b      	str	r3, [r7, #20]
	ro_cpy = ros_nbr &&
    8ce8:	f1ba 0f00 	cmp.w	sl, #0
    8cec:	d002      	beq.n	8cf4 <cbprintf_package_convert+0x48>
    8cee:	f01b 0f01 	tst.w	fp, #1
    8cf2:	d117      	bne.n	8d24 <cbprintf_package_convert+0x78>
	rw_cpy = rws_nbr > 0 &&
    8cf4:	697b      	ldr	r3, [r7, #20]
    8cf6:	bb5b      	cbnz	r3, 8d50 <cbprintf_package_convert+0xa4>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
    8cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8cfa:	b11b      	cbz	r3, 8d04 <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
    8cfc:	4620      	mov	r0, r4
    8cfe:	69ba      	ldr	r2, [r7, #24]
    8d00:	6a39      	ldr	r1, [r7, #32]
    8d02:	4798      	blx	r3
		}

		return in_len;
    8d04:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    8d06:	4628      	mov	r0, r5
    8d08:	3754      	adds	r7, #84	; 0x54
    8d0a:	46bd      	mov	sp, r7
    8d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
    8d10:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
    8d12:	4628      	mov	r0, r5
    8d14:	f00f fa0c 	bl	18130 <strlen>
	for (unsigned int i = 0; i < s_nbr; i++) {
    8d18:	6a3b      	ldr	r3, [r7, #32]
		buf += strlen((const char *)buf) + 1;
    8d1a:	3001      	adds	r0, #1
	for (unsigned int i = 0; i < s_nbr; i++) {
    8d1c:	3301      	adds	r3, #1
		buf += strlen((const char *)buf) + 1;
    8d1e:	4428      	add	r0, r5
	for (unsigned int i = 0; i < s_nbr; i++) {
    8d20:	623b      	str	r3, [r7, #32]
    8d22:	e7d7      	b.n	8cd4 <cbprintf_package_convert+0x28>
	rw_cpy = rws_nbr > 0 &&
    8d24:	6863      	ldr	r3, [r4, #4]
    8d26:	f894 8000 	ldrb.w	r8, [r4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    8d2a:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    8d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
    8d2e:	ea4f 0288 	mov.w	r2, r8, lsl #2
    8d32:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
    8d34:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
    8d38:	2b00      	cmp	r3, #0
    8d3a:	f040 8102 	bne.w	8f42 <cbprintf_package_convert+0x296>
		out_len = (int)in_len;
    8d3e:	46c1      	mov	r9, r8
	size_t strl_cnt = 0;
    8d40:	2600      	movs	r6, #0
		out_len = (int)in_len;
    8d42:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
    8d44:	eb0a 0308 	add.w	r3, sl, r8
			for (unsigned int i = 0; i < ros_nbr; i++) {
    8d48:	454b      	cmp	r3, r9
    8d4a:	d14e      	bne.n	8dea <cbprintf_package_convert+0x13e>
    8d4c:	44d0      	add	r8, sl
    8d4e:	e013      	b.n	8d78 <cbprintf_package_convert+0xcc>
	rw_cpy = rws_nbr > 0 &&
    8d50:	f01b 0f02 	tst.w	fp, #2
    8d54:	d0d0      	beq.n	8cf8 <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
    8d56:	f894 8000 	ldrb.w	r8, [r4]
    8d5a:	ea4f 0388 	mov.w	r3, r8, lsl #2
    8d5e:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    8d60:	6863      	ldr	r3, [r4, #4]
	uint8_t *str_pos = &buf[args_size];
    8d62:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	const char *fmt = *(const char **)(buf + sizeof(void *));
    8d66:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    8d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8d6a:	2b00      	cmp	r3, #0
    8d6c:	d178      	bne.n	8e60 <cbprintf_package_convert+0x1b4>
		out_len = (int)in_len;
    8d6e:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    8d70:	f1ba 0f00 	cmp.w	sl, #0
    8d74:	d14e      	bne.n	8e14 <cbprintf_package_convert+0x168>
	size_t strl_cnt = 0;
    8d76:	4656      	mov	r6, sl
		for (unsigned int i = 0; i < rws_nbr; i++) {
    8d78:	f01b 0f05 	tst.w	fp, #5
    8d7c:	bf0c      	ite	eq
    8d7e:	2302      	moveq	r3, #2
    8d80:	2301      	movne	r3, #1
    8d82:	627b      	str	r3, [r7, #36]	; 0x24
    8d84:	697b      	ldr	r3, [r7, #20]
    8d86:	eb08 0a43 	add.w	sl, r8, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    8d8a:	f00b 0302 	and.w	r3, fp, #2
    8d8e:	623b      	str	r3, [r7, #32]
		for (unsigned int i = 0; i < rws_nbr; i++) {
    8d90:	45d0      	cmp	r8, sl
    8d92:	d0b8      	beq.n	8d06 <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
    8d94:	f818 1b02 	ldrb.w	r1, [r8], #2
			const char *str = *(const char **)&buf32[arg_pos];
    8d98:	f818 3c01 	ldrb.w	r3, [r8, #-1]
    8d9c:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
    8da0:	4bad      	ldr	r3, [pc, #692]	; (9058 <cbprintf_package_convert+0x3ac>)
    8da2:	4599      	cmp	r9, r3
    8da4:	d302      	bcc.n	8dac <cbprintf_package_convert+0x100>
    8da6:	4bad      	ldr	r3, [pc, #692]	; (905c <cbprintf_package_convert+0x3b0>)
    8da8:	4599      	cmp	r9, r3
    8daa:	d339      	bcc.n	8e20 <cbprintf_package_convert+0x174>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    8dac:	693b      	ldr	r3, [r7, #16]
    8dae:	2b00      	cmp	r3, #0
    8db0:	d043      	beq.n	8e3a <cbprintf_package_convert+0x18e>
    8db2:	69f8      	ldr	r0, [r7, #28]
    8db4:	f00d fcb8 	bl	16728 <is_ptr>
    8db8:	2800      	cmp	r0, #0
    8dba:	d03e      	beq.n	8e3a <cbprintf_package_convert+0x18e>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    8dbc:	46e9      	mov	r9, sp
    8dbe:	b08a      	sub	sp, #40	; 0x28
    8dc0:	466a      	mov	r2, sp
    8dc2:	4ba7      	ldr	r3, [pc, #668]	; (9060 <cbprintf_package_convert+0x3b4>)
    8dc4:	6153      	str	r3, [r2, #20]
    8dc6:	69fb      	ldr	r3, [r7, #28]
    8dc8:	e9c2 3106 	strd	r3, r1, [r2, #24]
    8dcc:	f44f 7300 	mov.w	r3, #512	; 0x200
    8dd0:	8413      	strh	r3, [r2, #32]
    8dd2:	4ba4      	ldr	r3, [pc, #656]	; (9064 <cbprintf_package_convert+0x3b8>)
    8dd4:	f842 3f10 	str.w	r3, [r2, #16]!
    8dd8:	2300      	movs	r3, #0
    8dda:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    8dde:	48a2      	ldr	r0, [pc, #648]	; (9068 <cbprintf_package_convert+0x3bc>)
    8de0:	f001 fd8c 	bl	a8fc <z_impl_z_log_msg_static_create>
				out_len -= 2;
    8de4:	3d02      	subs	r5, #2
    8de6:	46cd      	mov	sp, r9
				continue;
    8de8:	e7d2      	b.n	8d90 <cbprintf_package_convert+0xe4>
				const char *str = *(const char **)&buf32[*str_pos];
    8dea:	f819 2b01 	ldrb.w	r2, [r9], #1
    8dee:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    8df0:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    8df4:	f00f f99c 	bl	18130 <strlen>
				if (strl && strl_cnt < strl_len) {
    8df8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    8dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    8dfc:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
    8dfe:	b13a      	cbz	r2, 8e10 <cbprintf_package_convert+0x164>
    8e00:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    8e04:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
    8e06:	bf3e      	ittt	cc
    8e08:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
    8e0a:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
    8e0e:	3601      	addcc	r6, #1
				out_len += len;
    8e10:	4405      	add	r5, r0
			for (unsigned int i = 0; i < ros_nbr; i++) {
    8e12:	e799      	b.n	8d48 <cbprintf_package_convert+0x9c>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    8e14:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
    8e18:	bf1c      	itt	ne
    8e1a:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
    8e1c:	44d0      	addne	r8, sl
    8e1e:	e7ab      	b.n	8d78 <cbprintf_package_convert+0xcc>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    8e20:	693b      	ldr	r3, [r7, #16]
    8e22:	b123      	cbz	r3, 8e2e <cbprintf_package_convert+0x182>
    8e24:	69f8      	ldr	r0, [r7, #28]
    8e26:	f00d fc7f 	bl	16728 <is_ptr>
    8e2a:	2800      	cmp	r0, #0
    8e2c:	d1c6      	bne.n	8dbc <cbprintf_package_convert+0x110>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    8e2e:	f01b 0f01 	tst.w	fp, #1
    8e32:	d105      	bne.n	8e40 <cbprintf_package_convert+0x194>
					out_len -= drop_ro_str_pos ? 2 : 1;
    8e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8e36:	1aed      	subs	r5, r5, r3
    8e38:	e7aa      	b.n	8d90 <cbprintf_package_convert+0xe4>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    8e3a:	6a3b      	ldr	r3, [r7, #32]
    8e3c:	2b00      	cmp	r3, #0
    8e3e:	d0a7      	beq.n	8d90 <cbprintf_package_convert+0xe4>
		return 1 + strlen(str);
    8e40:	4648      	mov	r0, r9
    8e42:	f00f f975 	bl	18130 <strlen>
				if (strl && strl_cnt < strl_len) {
    8e46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    8e48:	b143      	cbz	r3, 8e5c <cbprintf_package_convert+0x1b0>
    8e4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    8e4e:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
    8e50:	bf3f      	itttt	cc
    8e52:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
    8e54:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
    8e56:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
    8e5a:	3601      	addcc	r6, #1
				out_len += (len - 1);
    8e5c:	4405      	add	r5, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
    8e5e:	e797      	b.n	8d90 <cbprintf_package_convert+0xe4>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    8e60:	f1ba 0f00 	cmp.w	sl, #0
    8e64:	d072      	beq.n	8f4c <cbprintf_package_convert+0x2a0>
    8e66:	f01b 0604 	ands.w	r6, fp, #4
    8e6a:	d072      	beq.n	8f52 <cbprintf_package_convert+0x2a6>
		keep_cnt = ros_nbr;
    8e6c:	46d1      	mov	r9, sl
		scpy_cnt = 0;
    8e6e:	2600      	movs	r6, #0
		dst = keep_str_pos;
    8e70:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
    8e74:	4652      	mov	r2, sl
    8e76:	4641      	mov	r1, r8
    8e78:	f00f f999 	bl	181ae <memcpy>
	str_pos += ros_nbr;
    8e7c:	697b      	ldr	r3, [r7, #20]
    8e7e:	44d0      	add	r8, sl
	for (unsigned int i = 0; i < rws_nbr; i++) {
    8e80:	005b      	lsls	r3, r3, #1
    8e82:	60bb      	str	r3, [r7, #8]
    8e84:	697b      	ldr	r3, [r7, #20]
    8e86:	eb08 0343 	add.w	r3, r8, r3, lsl #1
    8e8a:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    8e8c:	f00b 0302 	and.w	r3, fp, #2
    8e90:	607b      	str	r3, [r7, #4]
	for (unsigned int i = 0; i < rws_nbr; i++) {
    8e92:	697b      	ldr	r3, [r7, #20]
    8e94:	4598      	cmp	r8, r3
    8e96:	d15e      	bne.n	8f56 <cbprintf_package_convert+0x2aa>
	out_desc.len = in_desc->len;
    8e98:	7823      	ldrb	r3, [r4, #0]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    8e9a:	f01b 0f02 	tst.w	fp, #2
	out_desc.len = in_desc->len;
    8e9e:	61fb      	str	r3, [r7, #28]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    8ea0:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    8ea2:	bf18      	it	ne
    8ea4:	2100      	movne	r1, #0
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    8ea6:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    8eaa:	bf08      	it	eq
    8eac:	ea4f 0159 	moveq.w	r1, r9, lsr #1
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    8eb0:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    8eb4:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    8eb6:	f040 809d 	bne.w	8ff4 <cbprintf_package_convert+0x348>
    8eba:	f01b 0f04 	tst.w	fp, #4
    8ebe:	bf14      	ite	ne
    8ec0:	4648      	movne	r0, r9
    8ec2:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
    8ec4:	f894 b002 	ldrb.w	fp, [r4, #2]
    8ec8:	f894 8003 	ldrb.w	r8, [r4, #3]
    8ecc:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
    8ece:	7062      	strb	r2, [r4, #1]
    8ed0:	70a0      	strb	r0, [r4, #2]
    8ed2:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
    8ed4:	4620      	mov	r0, r4
    8ed6:	69ba      	ldr	r2, [r7, #24]
    8ed8:	68f9      	ldr	r1, [r7, #12]
    8eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8edc:	4798      	blx	r3
	if (rv < 0) {
    8ede:	1e05      	subs	r5, r0, #0
    8ee0:	f6ff af11 	blt.w	8d06 <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
    8ee4:	69fb      	ldr	r3, [r7, #28]
    8ee6:	f884 8003 	strb.w	r8, [r4, #3]
    8eea:	7023      	strb	r3, [r4, #0]
    8eec:	693b      	ldr	r3, [r7, #16]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    8eee:	4649      	mov	r1, r9
	*in_desc = in_desc_backup;
    8ef0:	7063      	strb	r3, [r4, #1]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    8ef2:	69ba      	ldr	r2, [r7, #24]
    8ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
    8ef6:	f884 b002 	strb.w	fp, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    8efa:	f107 0040 	add.w	r0, r7, #64	; 0x40
    8efe:	4798      	blx	r3
	if (rv < 0) {
    8f00:	f1b0 0800 	subs.w	r8, r0, #0
    8f04:	f2c0 80a3 	blt.w	904e <cbprintf_package_convert+0x3a2>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    8f08:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
    8f0a:	69ba      	ldr	r2, [r7, #24]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    8f0c:	eba3 010a 	sub.w	r1, r3, sl
    8f10:	68fb      	ldr	r3, [r7, #12]
	rv = cb(str_pos, strs_len, ctx);
    8f12:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    8f14:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
    8f16:	68bb      	ldr	r3, [r7, #8]
    8f18:	1ac9      	subs	r1, r1, r3
    8f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8f1c:	4798      	blx	r3
	if (rv < 0) {
    8f1e:	2800      	cmp	r0, #0
    8f20:	f2c0 8097 	blt.w	9052 <cbprintf_package_convert+0x3a6>
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    8f24:	f04f 0b00 	mov.w	fp, #0
	out_len += rv;
    8f28:	44a8      	add	r8, r5
	out_len += rv;
    8f2a:	eb08 0500 	add.w	r5, r8, r0
		uint8_t loc = cpy_str_pos[i];
    8f2e:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    8f32:	45b3      	cmp	fp, r6
    8f34:	d360      	bcc.n	8ff8 <cbprintf_package_convert+0x34c>
	(void)cb(NULL, 0, ctx);
    8f36:	2100      	movs	r1, #0
    8f38:	69ba      	ldr	r2, [r7, #24]
    8f3a:	4608      	mov	r0, r1
    8f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8f3e:	4798      	blx	r3
	return out_len;
    8f40:	e6e1      	b.n	8d06 <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
    8f42:	f04f 0900 	mov.w	r9, #0
    8f46:	f107 0030 	add.w	r0, r7, #48	; 0x30
    8f4a:	e793      	b.n	8e74 <cbprintf_package_convert+0x1c8>
		scpy_cnt = 0;
    8f4c:	4656      	mov	r6, sl
		keep_cnt = 0;
    8f4e:	46d1      	mov	r9, sl
    8f50:	e794      	b.n	8e7c <cbprintf_package_convert+0x1d0>
    8f52:	46b1      	mov	r9, r6
    8f54:	e792      	b.n	8e7c <cbprintf_package_convert+0x1d0>
		uint8_t arg_idx = *str_pos++;
    8f56:	f818 1b02 	ldrb.w	r1, [r8], #2
    8f5a:	4a3f      	ldr	r2, [pc, #252]	; (9058 <cbprintf_package_convert+0x3ac>)
		uint8_t arg_pos = *str_pos++;
    8f5c:	f818 5c01 	ldrb.w	r5, [r8, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
    8f60:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
    8f64:	4293      	cmp	r3, r2
    8f66:	d302      	bcc.n	8f6e <cbprintf_package_convert+0x2c2>
    8f68:	4a3c      	ldr	r2, [pc, #240]	; (905c <cbprintf_package_convert+0x3b0>)
    8f6a:	4293      	cmp	r3, r2
    8f6c:	d31c      	bcc.n	8fa8 <cbprintf_package_convert+0x2fc>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    8f6e:	693b      	ldr	r3, [r7, #16]
    8f70:	b123      	cbz	r3, 8f7c <cbprintf_package_convert+0x2d0>
    8f72:	69f8      	ldr	r0, [r7, #28]
    8f74:	f00d fbd8 	bl	16728 <is_ptr>
    8f78:	2800      	cmp	r0, #0
    8f7a:	d18a      	bne.n	8e92 <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    8f7c:	687b      	ldr	r3, [r7, #4]
    8f7e:	b9f3      	cbnz	r3, 8fbe <cbprintf_package_convert+0x312>
				keep_str_pos[keep_cnt++] = arg_idx;
    8f80:	f109 0228 	add.w	r2, r9, #40	; 0x28
    8f84:	f107 0028 	add.w	r0, r7, #40	; 0x28
    8f88:	4402      	add	r2, r0
    8f8a:	f109 0301 	add.w	r3, r9, #1
    8f8e:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
    8f92:	f107 0250 	add.w	r2, r7, #80	; 0x50
    8f96:	f109 0902 	add.w	r9, r9, #2
    8f9a:	fa52 f383 	uxtab	r3, r2, r3
    8f9e:	fa5f f989 	uxtb.w	r9, r9
    8fa2:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (unsigned int i = 0; i < rws_nbr; i++) {
    8fa6:	e774      	b.n	8e92 <cbprintf_package_convert+0x1e6>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    8fa8:	693b      	ldr	r3, [r7, #16]
    8faa:	b12b      	cbz	r3, 8fb8 <cbprintf_package_convert+0x30c>
    8fac:	69f8      	ldr	r0, [r7, #28]
    8fae:	f00d fbbb 	bl	16728 <is_ptr>
    8fb2:	2800      	cmp	r0, #0
    8fb4:	f47f af6d 	bne.w	8e92 <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    8fb8:	f01b 0f01 	tst.w	fp, #1
    8fbc:	d009      	beq.n	8fd2 <cbprintf_package_convert+0x326>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    8fbe:	f106 0228 	add.w	r2, r6, #40	; 0x28
    8fc2:	f107 0128 	add.w	r1, r7, #40	; 0x28
    8fc6:	1c73      	adds	r3, r6, #1
    8fc8:	1856      	adds	r6, r2, r1
    8fca:	f806 5c20 	strb.w	r5, [r6, #-32]
    8fce:	b2de      	uxtb	r6, r3
    8fd0:	e75f      	b.n	8e92 <cbprintf_package_convert+0x1e6>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    8fd2:	f01b 0f04 	tst.w	fp, #4
    8fd6:	f43f af5c 	beq.w	8e92 <cbprintf_package_convert+0x1e6>
				keep_str_pos[keep_cnt++] = arg_pos;
    8fda:	f109 0228 	add.w	r2, r9, #40	; 0x28
    8fde:	f107 0128 	add.w	r1, r7, #40	; 0x28
    8fe2:	f109 0301 	add.w	r3, r9, #1
    8fe6:	eb02 0901 	add.w	r9, r2, r1
    8fea:	f809 5c10 	strb.w	r5, [r9, #-16]
    8fee:	fa5f f983 	uxtb.w	r9, r3
    8ff2:	e74e      	b.n	8e92 <cbprintf_package_convert+0x1e6>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    8ff4:	2000      	movs	r0, #0
    8ff6:	e765      	b.n	8ec4 <cbprintf_package_convert+0x218>
		uint8_t loc = cpy_str_pos[i];
    8ff8:	f81b 300a 	ldrb.w	r3, [fp, sl]
		const char *str = *(const char **)&buf32[loc];
    8ffc:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint8_t loc = cpy_str_pos[i];
    9000:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		uint16_t str_len = strl ? strl[i] : 0;
    9004:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    9006:	b1fb      	cbz	r3, 9048 <cbprintf_package_convert+0x39c>
    9008:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
    900c:	2101      	movs	r1, #1
    900e:	69ba      	ldr	r2, [r7, #24]
    9010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9012:	f107 002f 	add.w	r0, r7, #47	; 0x2f
    9016:	4798      	blx	r3
		if (rv < 0) {
    9018:	2800      	cmp	r0, #0
    901a:	db1a      	blt.n	9052 <cbprintf_package_convert+0x3a6>
		out_len += rv;
    901c:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    901e:	f1b8 0f00 	cmp.w	r8, #0
    9022:	d106      	bne.n	9032 <cbprintf_package_convert+0x386>
    9024:	4648      	mov	r0, r9
    9026:	f00f f883 	bl	18130 <strlen>
    902a:	f100 0801 	add.w	r8, r0, #1
    902e:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
    9032:	4641      	mov	r1, r8
    9034:	4648      	mov	r0, r9
    9036:	69ba      	ldr	r2, [r7, #24]
    9038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    903a:	4798      	blx	r3
		if (rv < 0) {
    903c:	2800      	cmp	r0, #0
    903e:	db08      	blt.n	9052 <cbprintf_package_convert+0x3a6>
		out_len += rv;
    9040:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    9042:	f10b 0b01 	add.w	fp, fp, #1
    9046:	e774      	b.n	8f32 <cbprintf_package_convert+0x286>
		uint16_t str_len = strl ? strl[i] : 0;
    9048:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
    904c:	e7de      	b.n	900c <cbprintf_package_convert+0x360>
    904e:	4645      	mov	r5, r8
    9050:	e659      	b.n	8d06 <cbprintf_package_convert+0x5a>
    9052:	4605      	mov	r5, r0
    9054:	e657      	b.n	8d06 <cbprintf_package_convert+0x5a>
    9056:	bf00      	nop
    9058:	0001b3ec 	.word	0x0001b3ec
    905c:	0001e720 	.word	0x0001e720
    9060:	0001c449 	.word	0x0001c449
    9064:	01000004 	.word	0x01000004
    9068:	0001b8c8 	.word	0x0001b8c8

0000906c <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
    906c:	4b01      	ldr	r3, [pc, #4]	; (9074 <__printk_hook_install+0x8>)
    906e:	6018      	str	r0, [r3, #0]
}
    9070:	4770      	bx	lr
    9072:	bf00      	nop
    9074:	20008284 	.word	0x20008284

00009078 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    9078:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    907a:	2500      	movs	r5, #0
{
    907c:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    907e:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    9082:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    9084:	9500      	str	r5, [sp, #0]
    9086:	a903      	add	r1, sp, #12
    9088:	4805      	ldr	r0, [pc, #20]	; (90a0 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    908a:	9505      	str	r5, [sp, #20]
    908c:	f000 f918 	bl	92c0 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    9090:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    9094:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    9096:	bfb8      	it	lt
    9098:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    909a:	b007      	add	sp, #28
    909c:	bd30      	pop	{r4, r5, pc}
    909e:	bf00      	nop
    90a0:	00016777 	.word	0x00016777

000090a4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    90a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    90a8:	8b05      	ldrh	r5, [r0, #24]
{
    90aa:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    90ac:	0728      	lsls	r0, r5, #28
{
    90ae:	4690      	mov	r8, r2
	if (processing) {
    90b0:	d411      	bmi.n	90d6 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    90b2:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    90b4:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    90b8:	f040 80cd 	bne.w	9256 <process_event+0x1b2>
			evt = process_recheck(mgr);
    90bc:	4620      	mov	r0, r4
    90be:	f00d fd58 	bl	16b72 <process_recheck>
		}

		if (evt == EVT_NOP) {
    90c2:	b178      	cbz	r0, 90e4 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    90c4:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    90c6:	8b21      	ldrh	r1, [r4, #24]
    90c8:	2804      	cmp	r0, #4
    90ca:	d811      	bhi.n	90f0 <process_event+0x4c>
    90cc:	e8df f000 	tbb	[pc, r0]
    90d0:	856d10c3 	.word	0x856d10c3
    90d4:	95          	.byte	0x95
    90d5:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    90d6:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    90d8:	bf0c      	ite	eq
    90da:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    90de:	f045 0520 	orrne.w	r5, r5, #32
    90e2:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    90e4:	f388 8811 	msr	BASEPRI, r8
    90e8:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    90ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    90f0:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    90f4:	45aa      	cmp	sl, r5
    90f6:	f000 80a6 	beq.w	9246 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    90fa:	2700      	movs	r7, #0
    90fc:	46b9      	mov	r9, r7
    90fe:	463e      	mov	r6, r7
    9100:	68a3      	ldr	r3, [r4, #8]
    9102:	2b00      	cmp	r3, #0
    9104:	f000 80bd 	beq.w	9282 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    9108:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    910c:	8321      	strh	r1, [r4, #24]
    910e:	f388 8811 	msr	BASEPRI, r8
    9112:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    9116:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    9118:	2900      	cmp	r1, #0
    911a:	f000 80bb 	beq.w	9294 <process_event+0x1f0>
	return node->next;
    911e:	680d      	ldr	r5, [r1, #0]
    9120:	2900      	cmp	r1, #0
    9122:	f000 80b7 	beq.w	9294 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    9126:	4633      	mov	r3, r6
    9128:	4652      	mov	r2, sl
    912a:	4620      	mov	r0, r4
    912c:	f8d1 8004 	ldr.w	r8, [r1, #4]
    9130:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    9132:	2d00      	cmp	r5, #0
    9134:	d076      	beq.n	9224 <process_event+0x180>
    9136:	682b      	ldr	r3, [r5, #0]
    9138:	4629      	mov	r1, r5
    913a:	461d      	mov	r5, r3
    913c:	e7f0      	b.n	9120 <process_event+0x7c>
    913e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    9142:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    9144:	2a01      	cmp	r2, #1
    9146:	d81b      	bhi.n	9180 <process_event+0xdc>
	list->head = NULL;
    9148:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    914a:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    914e:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    9150:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9152:	b289      	uxth	r1, r1
	list->tail = NULL;
    9154:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    9158:	d109      	bne.n	916e <process_event+0xca>
    915a:	463b      	mov	r3, r7
    915c:	e003      	b.n	9166 <process_event+0xc2>
				mgr->refs += 1U;
    915e:	8b62      	ldrh	r2, [r4, #26]
    9160:	3201      	adds	r2, #1
    9162:	8362      	strh	r2, [r4, #26]
	return node->next;
    9164:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    9166:	2b00      	cmp	r3, #0
    9168:	d1f9      	bne.n	915e <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    916a:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    916e:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    9170:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    9172:	f00d fcfe 	bl	16b72 <process_recheck>
    9176:	2800      	cmp	r0, #0
    9178:	d07b      	beq.n	9272 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    917a:	f041 0120 	orr.w	r1, r1, #32
    917e:	e077      	b.n	9270 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    9180:	2b04      	cmp	r3, #4
    9182:	d10a      	bne.n	919a <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9184:	f021 0107 	bic.w	r1, r1, #7
    9188:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    918a:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    918c:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    918e:	f00d fcf0 	bl	16b72 <process_recheck>
    9192:	b110      	cbz	r0, 919a <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    9194:	f041 0120 	orr.w	r1, r1, #32
    9198:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    919a:	8b21      	ldrh	r1, [r4, #24]
    919c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    91a0:	45aa      	cmp	sl, r5
    91a2:	d050      	beq.n	9246 <process_event+0x1a2>
    91a4:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    91a6:	46b9      	mov	r9, r7
    91a8:	e7aa      	b.n	9100 <process_event+0x5c>
			transit = mgr->transitions->start;
    91aa:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    91ac:	f021 0107 	bic.w	r1, r1, #7
    91b0:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    91b4:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    91b6:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    91ba:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    91bc:	d12d      	bne.n	921a <process_event+0x176>
		    || (transit != NULL)) {
    91be:	f1b9 0f00 	cmp.w	r9, #0
    91c2:	d040      	beq.n	9246 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    91c4:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    91c8:	8321      	strh	r1, [r4, #24]
    91ca:	f388 8811 	msr	BASEPRI, r8
    91ce:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    91d2:	4620      	mov	r0, r4
    91d4:	4939      	ldr	r1, [pc, #228]	; (92bc <process_event+0x218>)
    91d6:	47c8      	blx	r9
    91d8:	e029      	b.n	922e <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    91da:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    91de:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    91e0:	f041 0104 	orr.w	r1, r1, #4
    91e4:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    91e6:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    91e8:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    91ec:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    91ee:	d0e6      	beq.n	91be <process_event+0x11a>
    91f0:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    91f2:	f04f 0a04 	mov.w	sl, #4
		res = 0;
    91f6:	463e      	mov	r6, r7
    91f8:	e782      	b.n	9100 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    91fa:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    91fe:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9200:	f041 0105 	orr.w	r1, r1, #5
    9204:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    9206:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    9208:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    920c:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    920e:	d0d6      	beq.n	91be <process_event+0x11a>
    9210:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9212:	f04f 0a05 	mov.w	sl, #5
		res = 0;
    9216:	463e      	mov	r6, r7
    9218:	e772      	b.n	9100 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    921a:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    921c:	f04f 0a06 	mov.w	sl, #6
		res = 0;
    9220:	463e      	mov	r6, r7
    9222:	e76d      	b.n	9100 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    9224:	462b      	mov	r3, r5
    9226:	e787      	b.n	9138 <process_event+0x94>
			if (transit != NULL) {
    9228:	f1b9 0f00 	cmp.w	r9, #0
    922c:	d1d1      	bne.n	91d2 <process_event+0x12e>
	__asm__ volatile(
    922e:	f04f 0320 	mov.w	r3, #32
    9232:	f3ef 8811 	mrs	r8, BASEPRI
    9236:	f383 8812 	msr	BASEPRI_MAX, r3
    923a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    923e:	8b23      	ldrh	r3, [r4, #24]
    9240:	f023 0308 	bic.w	r3, r3, #8
    9244:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    9246:	8b25      	ldrh	r5, [r4, #24]
    9248:	06ea      	lsls	r2, r5, #27
    924a:	d52e      	bpl.n	92aa <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    924c:	f025 0310 	bic.w	r3, r5, #16
    9250:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    9252:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    9256:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9258:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    925a:	2e00      	cmp	r6, #0
    925c:	f6bf af6f 	bge.w	913e <process_event+0x9a>
	list->head = NULL;
    9260:	2300      	movs	r3, #0
		*clients = mgr->clients;
    9262:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    9264:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9268:	f021 0107 	bic.w	r1, r1, #7
    926c:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    9270:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9272:	8b21      	ldrh	r1, [r4, #24]
    9274:	f04f 0900 	mov.w	r9, #0
    9278:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    927c:	45aa      	cmp	sl, r5
    927e:	f47f af3f 	bne.w	9100 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    9282:	2f00      	cmp	r7, #0
    9284:	d09b      	beq.n	91be <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    9286:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    928a:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    928c:	f388 8811 	msr	BASEPRI, r8
    9290:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    9294:	2f00      	cmp	r7, #0
    9296:	d0c7      	beq.n	9228 <process_event+0x184>
	return node->next;
    9298:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    929a:	4639      	mov	r1, r7
    929c:	4633      	mov	r3, r6
    929e:	4652      	mov	r2, sl
    92a0:	4620      	mov	r0, r4
    92a2:	f00d fc92 	bl	16bca <notify_one>
	list->head = node;
    92a6:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    92a8:	e7f4      	b.n	9294 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    92aa:	06ab      	lsls	r3, r5, #26
    92ac:	f57f af1a 	bpl.w	90e4 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    92b0:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    92b4:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    92b6:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    92ba:	e6ff      	b.n	90bc <process_event+0x18>
    92bc:	00016bf7 	.word	0x00016bf7

000092c0 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    92c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    92c4:	4681      	mov	r9, r0
    92c6:	468b      	mov	fp, r1
    92c8:	4617      	mov	r7, r2
    92ca:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    92cc:	2500      	movs	r5, #0
{
    92ce:	b095      	sub	sp, #84	; 0x54
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    92d0:	7838      	ldrb	r0, [r7, #0]
    92d2:	b908      	cbnz	r0, 92d8 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    92d4:	4628      	mov	r0, r5
    92d6:	e357      	b.n	9988 <z_cbvprintf_impl+0x6c8>
			OUTC(*fp++);
    92d8:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    92da:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    92dc:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
    92de:	d006      	beq.n	92ee <z_cbvprintf_impl+0x2e>
			OUTC('%');
    92e0:	4659      	mov	r1, fp
    92e2:	47c8      	blx	r9
    92e4:	2800      	cmp	r0, #0
    92e6:	f2c0 834f 	blt.w	9988 <z_cbvprintf_impl+0x6c8>
    92ea:	3501      	adds	r5, #1
		if (bps == NULL) {
    92ec:	e1fb      	b.n	96e6 <z_cbvprintf_impl+0x426>
		} state = {
    92ee:	2218      	movs	r2, #24
    92f0:	2100      	movs	r1, #0
    92f2:	a80e      	add	r0, sp, #56	; 0x38
    92f4:	f00e ff66 	bl	181c4 <memset>
	if (*sp == '%') {
    92f8:	787b      	ldrb	r3, [r7, #1]
    92fa:	2b25      	cmp	r3, #37	; 0x25
    92fc:	d07d      	beq.n	93fa <z_cbvprintf_impl+0x13a>
    92fe:	2300      	movs	r3, #0
    9300:	4698      	mov	r8, r3
    9302:	469e      	mov	lr, r3
    9304:	469c      	mov	ip, r3
    9306:	461e      	mov	r6, r3
    9308:	1c78      	adds	r0, r7, #1
    930a:	4601      	mov	r1, r0
		switch (*sp) {
    930c:	f810 2b01 	ldrb.w	r2, [r0], #1
    9310:	2a2b      	cmp	r2, #43	; 0x2b
    9312:	f000 80a1 	beq.w	9458 <z_cbvprintf_impl+0x198>
    9316:	f200 8098 	bhi.w	944a <z_cbvprintf_impl+0x18a>
    931a:	2a20      	cmp	r2, #32
    931c:	f000 809f 	beq.w	945e <z_cbvprintf_impl+0x19e>
    9320:	2a23      	cmp	r2, #35	; 0x23
    9322:	f000 809f 	beq.w	9464 <z_cbvprintf_impl+0x1a4>
    9326:	b12b      	cbz	r3, 9334 <z_cbvprintf_impl+0x74>
    9328:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    932c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9330:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    9334:	f1b8 0f00 	cmp.w	r8, #0
    9338:	d005      	beq.n	9346 <z_cbvprintf_impl+0x86>
    933a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    933e:	f043 0320 	orr.w	r3, r3, #32
    9342:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    9346:	f1be 0f00 	cmp.w	lr, #0
    934a:	d005      	beq.n	9358 <z_cbvprintf_impl+0x98>
    934c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9350:	f043 0310 	orr.w	r3, r3, #16
    9354:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    9358:	f1bc 0f00 	cmp.w	ip, #0
    935c:	d005      	beq.n	936a <z_cbvprintf_impl+0xaa>
    935e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9362:	f043 0308 	orr.w	r3, r3, #8
    9366:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    936a:	b12e      	cbz	r6, 9378 <z_cbvprintf_impl+0xb8>
    936c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    9370:	f043 0304 	orr.w	r3, r3, #4
    9374:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
    9378:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    937c:	f003 0044 	and.w	r0, r3, #68	; 0x44
    9380:	2844      	cmp	r0, #68	; 0x44
    9382:	d103      	bne.n	938c <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
    9384:	f36f 1386 	bfc	r3, #6, #1
    9388:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
    938c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    9390:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    9392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    9396:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    939a:	d17f      	bne.n	949c <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
    939c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    93a0:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    93a2:	f042 0201 	orr.w	r2, r2, #1
    93a6:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
    93aa:	781a      	ldrb	r2, [r3, #0]
    93ac:	2a2e      	cmp	r2, #46	; 0x2e
    93ae:	bf0c      	ite	eq
    93b0:	2101      	moveq	r1, #1
    93b2:	2100      	movne	r1, #0
    93b4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    93b8:	f361 0241 	bfi	r2, r1, #1, #1
    93bc:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
    93c0:	d178      	bne.n	94b4 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
    93c2:	785a      	ldrb	r2, [r3, #1]
    93c4:	2a2a      	cmp	r2, #42	; 0x2a
    93c6:	d06e      	beq.n	94a6 <z_cbvprintf_impl+0x1e6>
	size_t val = 0;
    93c8:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    93ca:	f04f 0c0a 	mov.w	ip, #10
	++sp;
    93ce:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    93d0:	4619      	mov	r1, r3
    93d2:	f811 0b01 	ldrb.w	r0, [r1], #1
    93d6:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    93da:	2e09      	cmp	r6, #9
    93dc:	f240 8095 	bls.w	950a <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
    93e0:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
    93e4:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
    93e6:	f3c1 0040 	ubfx	r0, r1, #1, #1
    93ea:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    93ee:	460a      	mov	r2, r1
    93f0:	f360 0241 	bfi	r2, r0, #1, #1
    93f4:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    93f8:	e05c      	b.n	94b4 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
    93fa:	1cba      	adds	r2, r7, #2
    93fc:	9203      	str	r2, [sp, #12]
    93fe:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
    9402:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    9406:	07da      	lsls	r2, r3, #31
    9408:	f140 812e 	bpl.w	9668 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
    940c:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    9410:	f1b8 0f00 	cmp.w	r8, #0
    9414:	da07      	bge.n	9426 <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
    9416:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				width = -width;
    941a:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
    941e:	f042 0204 	orr.w	r2, r2, #4
    9422:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
		if (conv->prec_star) {
    9426:	075e      	lsls	r6, r3, #29
    9428:	f140 8127 	bpl.w	967a <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
    942c:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
    9430:	f1ba 0f00 	cmp.w	sl, #0
    9434:	f280 8126 	bge.w	9684 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
    9438:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    943c:	f36f 0341 	bfc	r3, #1, #1
    9440:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
    9444:	f04f 3aff 	mov.w	sl, #4294967295
    9448:	e11c      	b.n	9684 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
    944a:	2a2d      	cmp	r2, #45	; 0x2d
    944c:	d00d      	beq.n	946a <z_cbvprintf_impl+0x1aa>
    944e:	2a30      	cmp	r2, #48	; 0x30
    9450:	f47f af69 	bne.w	9326 <z_cbvprintf_impl+0x66>
    9454:	2301      	movs	r3, #1
	} while (loop);
    9456:	e758      	b.n	930a <z_cbvprintf_impl+0x4a>
		switch (*sp) {
    9458:	f04f 0c01 	mov.w	ip, #1
    945c:	e755      	b.n	930a <z_cbvprintf_impl+0x4a>
    945e:	f04f 0e01 	mov.w	lr, #1
    9462:	e752      	b.n	930a <z_cbvprintf_impl+0x4a>
    9464:	f04f 0801 	mov.w	r8, #1
    9468:	e74f      	b.n	930a <z_cbvprintf_impl+0x4a>
    946a:	2601      	movs	r6, #1
    946c:	e74d      	b.n	930a <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
    946e:	4603      	mov	r3, r0
    9470:	fb0e 6202 	mla	r2, lr, r2, r6
    9474:	3a30      	subs	r2, #48	; 0x30
    9476:	4618      	mov	r0, r3
    9478:	f810 6b01 	ldrb.w	r6, [r0], #1
    947c:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    9480:	f1bc 0f09 	cmp.w	ip, #9
    9484:	d9f3      	bls.n	946e <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
    9486:	4299      	cmp	r1, r3
    9488:	d08f      	beq.n	93aa <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    948a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
    948e:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
    9490:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    9492:	f362 0141 	bfi	r1, r2, #1, #1
    9496:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    949a:	e786      	b.n	93aa <z_cbvprintf_impl+0xea>
    949c:	460b      	mov	r3, r1
	size_t val = 0;
    949e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    94a0:	f04f 0e0a 	mov.w	lr, #10
    94a4:	e7e7      	b.n	9476 <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
    94a6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    94aa:	3302      	adds	r3, #2
		conv->prec_star = true;
    94ac:	f042 0204 	orr.w	r2, r2, #4
    94b0:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	switch (*sp) {
    94b4:	781a      	ldrb	r2, [r3, #0]
    94b6:	2a6c      	cmp	r2, #108	; 0x6c
    94b8:	d047      	beq.n	954a <z_cbvprintf_impl+0x28a>
    94ba:	d82b      	bhi.n	9514 <z_cbvprintf_impl+0x254>
    94bc:	2a68      	cmp	r2, #104	; 0x68
    94be:	d031      	beq.n	9524 <z_cbvprintf_impl+0x264>
    94c0:	2a6a      	cmp	r2, #106	; 0x6a
    94c2:	d04b      	beq.n	955c <z_cbvprintf_impl+0x29c>
    94c4:	2a4c      	cmp	r2, #76	; 0x4c
    94c6:	d051      	beq.n	956c <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
    94c8:	461a      	mov	r2, r3
    94ca:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    94ce:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    94d0:	9203      	str	r2, [sp, #12]
    94d2:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->length_mod == LENGTH_UPPER_L) {
    94d6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	switch (conv->specifier) {
    94da:	f200 80be 	bhi.w	965a <z_cbvprintf_impl+0x39a>
    94de:	2b6d      	cmp	r3, #109	; 0x6d
    94e0:	d851      	bhi.n	9586 <z_cbvprintf_impl+0x2c6>
    94e2:	2b69      	cmp	r3, #105	; 0x69
    94e4:	f200 80b9 	bhi.w	965a <z_cbvprintf_impl+0x39a>
    94e8:	2b57      	cmp	r3, #87	; 0x57
    94ea:	d867      	bhi.n	95bc <z_cbvprintf_impl+0x2fc>
    94ec:	2b41      	cmp	r3, #65	; 0x41
    94ee:	d003      	beq.n	94f8 <z_cbvprintf_impl+0x238>
    94f0:	3b45      	subs	r3, #69	; 0x45
    94f2:	2b02      	cmp	r3, #2
    94f4:	f200 80b1 	bhi.w	965a <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
    94f8:	2204      	movs	r2, #4
    94fa:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    94fe:	f362 0302 	bfi	r3, r2, #0, #3
    9502:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    9506:	2301      	movs	r3, #1
			break;
    9508:	e073      	b.n	95f2 <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
    950a:	fb0c 0202 	mla	r2, ip, r2, r0
    950e:	460b      	mov	r3, r1
    9510:	3a30      	subs	r2, #48	; 0x30
    9512:	e75d      	b.n	93d0 <z_cbvprintf_impl+0x110>
	switch (*sp) {
    9514:	2a74      	cmp	r2, #116	; 0x74
    9516:	d025      	beq.n	9564 <z_cbvprintf_impl+0x2a4>
    9518:	2a7a      	cmp	r2, #122	; 0x7a
    951a:	d1d5      	bne.n	94c8 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
    951c:	2106      	movs	r1, #6
    951e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    9522:	e00c      	b.n	953e <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
    9524:	785a      	ldrb	r2, [r3, #1]
    9526:	2a68      	cmp	r2, #104	; 0x68
    9528:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    952c:	d106      	bne.n	953c <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
    952e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    9530:	f361 02c6 	bfi	r2, r1, #3, #4
    9534:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    9538:	3302      	adds	r3, #2
    953a:	e7c5      	b.n	94c8 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
    953c:	2102      	movs	r1, #2
    953e:	f361 02c6 	bfi	r2, r1, #3, #4
    9542:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    9546:	3301      	adds	r3, #1
    9548:	e7be      	b.n	94c8 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
    954a:	785a      	ldrb	r2, [r3, #1]
    954c:	2a6c      	cmp	r2, #108	; 0x6c
    954e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    9552:	d101      	bne.n	9558 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
    9554:	2104      	movs	r1, #4
    9556:	e7eb      	b.n	9530 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
    9558:	2103      	movs	r1, #3
    955a:	e7f0      	b.n	953e <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
    955c:	2105      	movs	r1, #5
    955e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    9562:	e7ec      	b.n	953e <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
    9564:	2107      	movs	r1, #7
    9566:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    956a:	e7e8      	b.n	953e <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
    956c:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    9570:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    9574:	f022 0202 	bic.w	r2, r2, #2
    9578:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    957c:	f042 0202 	orr.w	r2, r2, #2
    9580:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    9584:	e7df      	b.n	9546 <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
    9586:	3b6e      	subs	r3, #110	; 0x6e
    9588:	b2d9      	uxtb	r1, r3
    958a:	2301      	movs	r3, #1
    958c:	408b      	lsls	r3, r1
    958e:	f240 4182 	movw	r1, #1154	; 0x482
    9592:	420b      	tst	r3, r1
    9594:	d137      	bne.n	9606 <z_cbvprintf_impl+0x346>
    9596:	f013 0f24 	tst.w	r3, #36	; 0x24
    959a:	d151      	bne.n	9640 <z_cbvprintf_impl+0x380>
    959c:	07d8      	lsls	r0, r3, #31
    959e:	d55c      	bpl.n	965a <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
    95a0:	2103      	movs	r1, #3
    95a2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    95a6:	f361 0302 	bfi	r3, r1, #0, #3
    95aa:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    95ae:	f002 0378 	and.w	r3, r2, #120	; 0x78
    95b2:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    95b6:	424b      	negs	r3, r1
    95b8:	414b      	adcs	r3, r1
    95ba:	e01a      	b.n	95f2 <z_cbvprintf_impl+0x332>
    95bc:	2001      	movs	r0, #1
	switch (conv->specifier) {
    95be:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    95c2:	b2c9      	uxtb	r1, r1
    95c4:	fa00 f101 	lsl.w	r1, r0, r1
    95c8:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    95cc:	d194      	bne.n	94f8 <z_cbvprintf_impl+0x238>
    95ce:	f640 0601 	movw	r6, #2049	; 0x801
    95d2:	4231      	tst	r1, r6
    95d4:	d11d      	bne.n	9612 <z_cbvprintf_impl+0x352>
    95d6:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    95da:	d03e      	beq.n	965a <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
    95dc:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    95e0:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    95e4:	f002 0278 	and.w	r2, r2, #120	; 0x78
    95e8:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    95ea:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    95ee:	d034      	beq.n	965a <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
    95f0:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    95f2:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    95f6:	f3c2 0140 	ubfx	r1, r2, #1, #1
    95fa:	430b      	orrs	r3, r1
    95fc:	f363 0241 	bfi	r2, r3, #1, #1
    9600:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    9604:	e6fd      	b.n	9402 <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
    9606:	2102      	movs	r1, #2
    9608:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    960c:	f361 0302 	bfi	r3, r1, #0, #3
    9610:	e7e8      	b.n	95e4 <z_cbvprintf_impl+0x324>
    9612:	2002      	movs	r0, #2
    9614:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    9618:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    961c:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    9620:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    9622:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    9626:	bf02      	ittt	eq
    9628:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    962c:	f041 0101 	orreq.w	r1, r1, #1
    9630:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    9634:	2b63      	cmp	r3, #99	; 0x63
    9636:	d1db      	bne.n	95f0 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
    9638:	1e13      	subs	r3, r2, #0
    963a:	bf18      	it	ne
    963c:	2301      	movne	r3, #1
    963e:	e7d8      	b.n	95f2 <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
    9640:	2103      	movs	r1, #3
    9642:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    9646:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    964a:	f361 0302 	bfi	r3, r1, #0, #3
    964e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    9652:	bf14      	ite	ne
    9654:	2301      	movne	r3, #1
    9656:	2300      	moveq	r3, #0
    9658:	e7cb      	b.n	95f2 <z_cbvprintf_impl+0x332>
		conv->invalid = true;
    965a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    965e:	f043 0301 	orr.w	r3, r3, #1
    9662:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    9666:	e7c3      	b.n	95f0 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
    9668:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    966c:	2a00      	cmp	r2, #0
		int width = -1;
    966e:	bfac      	ite	ge
    9670:	f04f 38ff 	movge.w	r8, #4294967295
			width = conv->width_value;
    9674:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
    9678:	e6d5      	b.n	9426 <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
    967a:	0798      	lsls	r0, r3, #30
    967c:	f57f aee2 	bpl.w	9444 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
    9680:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
		conv->pad0_value = 0;
    9684:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    9686:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    968a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
			= (enum length_mod_enum)conv->length_mod;
    968e:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		enum specifier_cat_enum specifier_cat
    9692:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    9696:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    9698:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    969c:	d133      	bne.n	9706 <z_cbvprintf_impl+0x446>
			switch (length_mod) {
    969e:	1ecb      	subs	r3, r1, #3
    96a0:	2b04      	cmp	r3, #4
    96a2:	d804      	bhi.n	96ae <z_cbvprintf_impl+0x3ee>
    96a4:	e8df f003 	tbb	[pc, r3]
    96a8:	21464621 	.word	0x21464621
    96ac:	21          	.byte	0x21
    96ad:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    96ae:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    96b0:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    96b2:	ea4f 72e3 	mov.w	r2, r3, asr #31
    96b6:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    96ba:	d11c      	bne.n	96f6 <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
    96bc:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
    96c0:	17da      	asrs	r2, r3, #31
    96c2:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
    96c6:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    96c8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    96cc:	f013 0603 	ands.w	r6, r3, #3
    96d0:	d050      	beq.n	9774 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
    96d2:	463a      	mov	r2, r7
    96d4:	4659      	mov	r1, fp
    96d6:	4648      	mov	r0, r9
    96d8:	9b03      	ldr	r3, [sp, #12]
    96da:	f00d fb78 	bl	16dce <outs>
    96de:	2800      	cmp	r0, #0
    96e0:	f2c0 8152 	blt.w	9988 <z_cbvprintf_impl+0x6c8>
    96e4:	4405      	add	r5, r0
			continue;
    96e6:	9f03      	ldr	r7, [sp, #12]
    96e8:	e5f2      	b.n	92d0 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    96ea:	f854 3b04 	ldr.w	r3, [r4], #4
    96ee:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    96f0:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    96f4:	e7e8      	b.n	96c8 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
    96f6:	2902      	cmp	r1, #2
    96f8:	d1e5      	bne.n	96c6 <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
    96fa:	b21a      	sxth	r2, r3
    96fc:	f343 33c0 	sbfx	r3, r3, #15, #1
    9700:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    9704:	e7df      	b.n	96c6 <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
    9706:	2b02      	cmp	r3, #2
    9708:	d124      	bne.n	9754 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
    970a:	1ecb      	subs	r3, r1, #3
    970c:	2b04      	cmp	r3, #4
    970e:	d804      	bhi.n	971a <z_cbvprintf_impl+0x45a>
    9710:	e8df f003 	tbb	[pc, r3]
    9714:	18101018 	.word	0x18101018
    9718:	18          	.byte	0x18
    9719:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    971a:	2901      	cmp	r1, #1
    971c:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    9720:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    9724:	d014      	beq.n	9750 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
    9726:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    9728:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    972c:	d1cc      	bne.n	96c8 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
    972e:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    9730:	930e      	str	r3, [sp, #56]	; 0x38
    9732:	e7c9      	b.n	96c8 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
    9734:	3407      	adds	r4, #7
    9736:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    973a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    973e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    9742:	e7c1      	b.n	96c8 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
    9744:	f854 3b04 	ldr.w	r3, [r4], #4
    9748:	930e      	str	r3, [sp, #56]	; 0x38
    974a:	2300      	movs	r3, #0
    974c:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    974e:	e7bb      	b.n	96c8 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
    9750:	b2db      	uxtb	r3, r3
    9752:	e7cd      	b.n	96f0 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
    9754:	2b04      	cmp	r3, #4
    9756:	d108      	bne.n	976a <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
    9758:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    975a:	f024 0407 	bic.w	r4, r4, #7
    975e:	e9d4 2300 	ldrd	r2, r3, [r4]
    9762:	3408      	adds	r4, #8
    9764:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    9768:	e7ae      	b.n	96c8 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
    976a:	2b03      	cmp	r3, #3
    976c:	d1ac      	bne.n	96c8 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
    976e:	f854 3b04 	ldr.w	r3, [r4], #4
    9772:	e7dd      	b.n	9730 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
    9774:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    9778:	2878      	cmp	r0, #120	; 0x78
    977a:	d8b4      	bhi.n	96e6 <z_cbvprintf_impl+0x426>
    977c:	2862      	cmp	r0, #98	; 0x62
    977e:	d81c      	bhi.n	97ba <z_cbvprintf_impl+0x4fa>
    9780:	2825      	cmp	r0, #37	; 0x25
    9782:	f43f adad 	beq.w	92e0 <z_cbvprintf_impl+0x20>
    9786:	2858      	cmp	r0, #88	; 0x58
    9788:	d1ad      	bne.n	96e6 <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
    978a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    978e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    9792:	9300      	str	r3, [sp, #0]
    9794:	aa10      	add	r2, sp, #64	; 0x40
    9796:	ab08      	add	r3, sp, #32
    9798:	f00d fad3 	bl	16d42 <encode_uint>
			if (precision >= 0) {
    979c:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    97a0:	4607      	mov	r7, r0
			if (precision >= 0) {
    97a2:	f280 8099 	bge.w	98d8 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
    97a6:	2f00      	cmp	r7, #0
    97a8:	d09d      	beq.n	96e6 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    97aa:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    97ae:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    97b0:	2e00      	cmp	r6, #0
    97b2:	f000 80c0 	beq.w	9936 <z_cbvprintf_impl+0x676>
			nj_len += 1U;
    97b6:	3001      	adds	r0, #1
    97b8:	e0bd      	b.n	9936 <z_cbvprintf_impl+0x676>
		switch (conv->specifier) {
    97ba:	3863      	subs	r0, #99	; 0x63
    97bc:	2815      	cmp	r0, #21
    97be:	d892      	bhi.n	96e6 <z_cbvprintf_impl+0x426>
    97c0:	a201      	add	r2, pc, #4	; (adr r2, 97c8 <z_cbvprintf_impl+0x508>)
    97c2:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    97c6:	bf00      	nop
    97c8:	0000989d 	.word	0x0000989d
    97cc:	000098af 	.word	0x000098af
    97d0:	000096e7 	.word	0x000096e7
    97d4:	000096e7 	.word	0x000096e7
    97d8:	000096e7 	.word	0x000096e7
    97dc:	000096e7 	.word	0x000096e7
    97e0:	000098af 	.word	0x000098af
    97e4:	000096e7 	.word	0x000096e7
    97e8:	000096e7 	.word	0x000096e7
    97ec:	000096e7 	.word	0x000096e7
    97f0:	000096e7 	.word	0x000096e7
    97f4:	0000993b 	.word	0x0000993b
    97f8:	000098d3 	.word	0x000098d3
    97fc:	000098f9 	.word	0x000098f9
    9800:	000096e7 	.word	0x000096e7
    9804:	000096e7 	.word	0x000096e7
    9808:	00009821 	.word	0x00009821
    980c:	000096e7 	.word	0x000096e7
    9810:	000098d3 	.word	0x000098d3
    9814:	000096e7 	.word	0x000096e7
    9818:	000096e7 	.word	0x000096e7
    981c:	000098d3 	.word	0x000098d3
			if (precision >= 0) {
    9820:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    9824:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    9826:	db35      	blt.n	9894 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
    9828:	4651      	mov	r1, sl
    982a:	4638      	mov	r0, r7
    982c:	f00e fc87 	bl	1813e <strnlen>
			bpe = bps + len;
    9830:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    9834:	2f00      	cmp	r7, #0
    9836:	f43f af56 	beq.w	96e6 <z_cbvprintf_impl+0x426>
		char sign = 0;
    983a:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    983c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    9840:	f013 0210 	ands.w	r2, r3, #16
    9844:	9205      	str	r2, [sp, #20]
    9846:	f000 8092 	beq.w	996e <z_cbvprintf_impl+0x6ae>
			nj_len += 2U;
    984a:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    984c:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    984e:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    9850:	bf48      	it	mi
    9852:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    9854:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    9856:	bf48      	it	mi
    9858:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    985a:	f1b8 0f00 	cmp.w	r8, #0
		nj_len += conv->pad0_value;
    985e:	9204      	str	r2, [sp, #16]
		if (width > 0) {
    9860:	f340 809f 	ble.w	99a2 <z_cbvprintf_impl+0x6e2>
			if (!conv->flag_dash) {
    9864:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    9868:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    986c:	f3c2 0380 	ubfx	r3, r2, #2, #1
    9870:	0750      	lsls	r0, r2, #29
    9872:	9306      	str	r3, [sp, #24]
    9874:	f100 8095 	bmi.w	99a2 <z_cbvprintf_impl+0x6e2>
				if (conv->flag_zero) {
    9878:	0651      	lsls	r1, r2, #25
    987a:	f140 8088 	bpl.w	998e <z_cbvprintf_impl+0x6ce>
					if (sign != 0) {
    987e:	b13e      	cbz	r6, 9890 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    9880:	4659      	mov	r1, fp
    9882:	4630      	mov	r0, r6
    9884:	47c8      	blx	r9
    9886:	2800      	cmp	r0, #0
    9888:	db7e      	blt.n	9988 <z_cbvprintf_impl+0x6c8>
    988a:	9b06      	ldr	r3, [sp, #24]
    988c:	3501      	adds	r5, #1
    988e:	461e      	mov	r6, r3
					pad = '0';
    9890:	2230      	movs	r2, #48	; 0x30
    9892:	e07d      	b.n	9990 <z_cbvprintf_impl+0x6d0>
				len = strlen(bps);
    9894:	4638      	mov	r0, r7
    9896:	f00e fc4b 	bl	18130 <strlen>
    989a:	e7c9      	b.n	9830 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    989c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		char sign = 0;
    989e:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    98a0:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    98a2:	f88d 3020 	strb.w	r3, [sp, #32]
			bps = buf;
    98a6:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    98a8:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
    98ac:	e7c6      	b.n	983c <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
    98ae:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    98b0:	bf5a      	itte	pl
    98b2:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    98b6:	015e      	lslpl	r6, r3, #5
				sign = '+';
    98b8:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
    98ba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
			if (sint < 0) {
    98be:	2b00      	cmp	r3, #0
    98c0:	f6bf af63 	bge.w	978a <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
    98c4:	4252      	negs	r2, r2
    98c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    98ca:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    98cc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    98d0:	e75b      	b.n	978a <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
    98d2:	2600      	movs	r6, #0
    98d4:	e759      	b.n	978a <z_cbvprintf_impl+0x4ca>
		char sign = 0;
    98d6:	2600      	movs	r6, #0
				conv->flag_zero = false;
    98d8:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    98dc:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    98e0:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    98e2:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    98e6:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    98e8:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    98ec:	f67f af5b 	bls.w	97a6 <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
    98f0:	ebaa 0303 	sub.w	r3, sl, r3
    98f4:	9311      	str	r3, [sp, #68]	; 0x44
    98f6:	e756      	b.n	97a6 <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
    98f8:	980e      	ldr	r0, [sp, #56]	; 0x38
    98fa:	b390      	cbz	r0, 9962 <z_cbvprintf_impl+0x6a2>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    98fc:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    9900:	9300      	str	r3, [sp, #0]
    9902:	2100      	movs	r1, #0
    9904:	ab08      	add	r3, sp, #32
    9906:	aa10      	add	r2, sp, #64	; 0x40
    9908:	f00d fa1b 	bl	16d42 <encode_uint>
				conv->altform_0c = true;
    990c:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    9910:	f1ba 0f00 	cmp.w	sl, #0
				conv->altform_0c = true;
    9914:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    9918:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    991c:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    9920:	4607      	mov	r7, r0
				conv->altform_0c = true;
    9922:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    9926:	dad6      	bge.n	98d6 <z_cbvprintf_impl+0x616>
		if (bps == NULL) {
    9928:	2800      	cmp	r0, #0
    992a:	f43f aedc 	beq.w	96e6 <z_cbvprintf_impl+0x426>
		char sign = 0;
    992e:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    9930:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    9934:	1a18      	subs	r0, r3, r0
		if (sign != 0) {
    9936:	469a      	mov	sl, r3
    9938:	e780      	b.n	983c <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
    993a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    993c:	2907      	cmp	r1, #7
    993e:	f63f aed2 	bhi.w	96e6 <z_cbvprintf_impl+0x426>
    9942:	e8df f001 	tbb	[pc, r1]
    9946:	040c      	.short	0x040c
    9948:	08080c06 	.word	0x08080c06
    994c:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    994e:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    9950:	e6c9      	b.n	96e6 <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
    9952:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    9954:	e6c7      	b.n	96e6 <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
    9956:	17ea      	asrs	r2, r5, #31
    9958:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    995c:	e6c3      	b.n	96e6 <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    995e:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    9960:	e6c1      	b.n	96e6 <z_cbvprintf_impl+0x426>
    9962:	4f2f      	ldr	r7, [pc, #188]	; (9a20 <z_cbvprintf_impl+0x760>)
		char sign = 0;
    9964:	4606      	mov	r6, r0
			bpe = bps + 5;
    9966:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    996a:	2005      	movs	r0, #5
    996c:	e766      	b.n	983c <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
    996e:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    9970:	bf48      	it	mi
    9972:	3001      	addmi	r0, #1
    9974:	e76a      	b.n	984c <z_cbvprintf_impl+0x58c>
					OUTC(pad);
    9976:	4610      	mov	r0, r2
    9978:	9307      	str	r3, [sp, #28]
    997a:	9206      	str	r2, [sp, #24]
    997c:	4659      	mov	r1, fp
    997e:	47c8      	blx	r9
    9980:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    9984:	2800      	cmp	r0, #0
    9986:	da04      	bge.n	9992 <z_cbvprintf_impl+0x6d2>
#undef OUTS
#undef OUTC
}
    9988:	b015      	add	sp, #84	; 0x54
    998a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    998e:	2220      	movs	r2, #32
					pad = '0';
    9990:	4643      	mov	r3, r8
				while (width-- > 0) {
    9992:	4619      	mov	r1, r3
    9994:	2900      	cmp	r1, #0
    9996:	f103 33ff 	add.w	r3, r3, #4294967295
    999a:	dcec      	bgt.n	9976 <z_cbvprintf_impl+0x6b6>
    999c:	4445      	add	r5, r8
    999e:	4698      	mov	r8, r3
    99a0:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    99a2:	b12e      	cbz	r6, 99b0 <z_cbvprintf_impl+0x6f0>
			OUTC(sign);
    99a4:	4659      	mov	r1, fp
    99a6:	4630      	mov	r0, r6
    99a8:	47c8      	blx	r9
    99aa:	2800      	cmp	r0, #0
    99ac:	dbec      	blt.n	9988 <z_cbvprintf_impl+0x6c8>
    99ae:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    99b0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    99b4:	06da      	lsls	r2, r3, #27
    99b6:	d401      	bmi.n	99bc <z_cbvprintf_impl+0x6fc>
    99b8:	071b      	lsls	r3, r3, #28
    99ba:	d505      	bpl.n	99c8 <z_cbvprintf_impl+0x708>
				OUTC('0');
    99bc:	4659      	mov	r1, fp
    99be:	2030      	movs	r0, #48	; 0x30
    99c0:	47c8      	blx	r9
    99c2:	2800      	cmp	r0, #0
    99c4:	dbe0      	blt.n	9988 <z_cbvprintf_impl+0x6c8>
    99c6:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    99c8:	9b05      	ldr	r3, [sp, #20]
    99ca:	b133      	cbz	r3, 99da <z_cbvprintf_impl+0x71a>
				OUTC(conv->specifier);
    99cc:	4659      	mov	r1, fp
    99ce:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    99d2:	47c8      	blx	r9
    99d4:	2800      	cmp	r0, #0
    99d6:	dbd7      	blt.n	9988 <z_cbvprintf_impl+0x6c8>
    99d8:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    99da:	9e04      	ldr	r6, [sp, #16]
    99dc:	442e      	add	r6, r5
    99de:	e005      	b.n	99ec <z_cbvprintf_impl+0x72c>
				OUTC('0');
    99e0:	4659      	mov	r1, fp
    99e2:	2030      	movs	r0, #48	; 0x30
    99e4:	47c8      	blx	r9
    99e6:	2800      	cmp	r0, #0
    99e8:	dbce      	blt.n	9988 <z_cbvprintf_impl+0x6c8>
    99ea:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    99ec:	1b73      	subs	r3, r6, r5
    99ee:	2b00      	cmp	r3, #0
    99f0:	dcf6      	bgt.n	99e0 <z_cbvprintf_impl+0x720>
			OUTS(bps, bpe);
    99f2:	4653      	mov	r3, sl
    99f4:	463a      	mov	r2, r7
    99f6:	4659      	mov	r1, fp
    99f8:	4648      	mov	r0, r9
    99fa:	f00d f9e8 	bl	16dce <outs>
    99fe:	2800      	cmp	r0, #0
    9a00:	dbc2      	blt.n	9988 <z_cbvprintf_impl+0x6c8>
    9a02:	4405      	add	r5, r0
		while (width > 0) {
    9a04:	44a8      	add	r8, r5
    9a06:	eba8 0305 	sub.w	r3, r8, r5
    9a0a:	2b00      	cmp	r3, #0
    9a0c:	f77f ae6b 	ble.w	96e6 <z_cbvprintf_impl+0x426>
			OUTC(' ');
    9a10:	4659      	mov	r1, fp
    9a12:	2020      	movs	r0, #32
    9a14:	47c8      	blx	r9
    9a16:	2800      	cmp	r0, #0
    9a18:	dbb6      	blt.n	9988 <z_cbvprintf_impl+0x6c8>
    9a1a:	3501      	adds	r5, #1
			--width;
    9a1c:	e7f3      	b.n	9a06 <z_cbvprintf_impl+0x746>
    9a1e:	bf00      	nop
    9a20:	0001c4fd 	.word	0x0001c4fd

00009a24 <z_arm_on_enter_cpu_idle>:
		DIV_ROUND_UP(200 * CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC,
				 1000000);
	static uint32_t timestamps[5];
	static bool timestamps_filled;
	static uint8_t current;
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    9a24:	2305      	movs	r3, #5

	return true;
}

bool z_arm_on_enter_cpu_idle(void)
{
    9a26:	b570      	push	{r4, r5, r6, lr}
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    9a28:	4d14      	ldr	r5, [pc, #80]	; (9a7c <z_arm_on_enter_cpu_idle+0x58>)
    9a2a:	4e15      	ldr	r6, [pc, #84]	; (9a80 <z_arm_on_enter_cpu_idle+0x5c>)
    9a2c:	782c      	ldrb	r4, [r5, #0]
    9a2e:	3401      	adds	r4, #1
    9a30:	fbb4 f3f3 	udiv	r3, r4, r3
    9a34:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    9a38:	1ae4      	subs	r4, r4, r3
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    9a3a:	f010 f900 	bl	19c3e <sys_clock_cycle_get_32>
	if (timestamps_filled &&
    9a3e:	4a11      	ldr	r2, [pc, #68]	; (9a84 <z_arm_on_enter_cpu_idle+0x60>)
    9a40:	7813      	ldrb	r3, [r2, #0]
    9a42:	b123      	cbz	r3, 9a4e <z_arm_on_enter_cpu_idle+0x2a>
	    (now - timestamps[oldest]) < (window_cycles + 1)) {
    9a44:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
    9a48:	1ac0      	subs	r0, r0, r3
	if (timestamps_filled &&
    9a4a:	2807      	cmp	r0, #7
    9a4c:	d913      	bls.n	9a76 <z_arm_on_enter_cpu_idle+0x52>
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_power_event_check(NRF_POWER_Type const * p_reg, nrf_power_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9a4e:	4b0e      	ldr	r3, [pc, #56]	; (9a88 <z_arm_on_enter_cpu_idle+0x64>)
    9a50:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
	if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER)) {
    9a54:	b141      	cbz	r1, 9a68 <z_arm_on_enter_cpu_idle+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9a56:	2100      	movs	r1, #0
    9a58:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    9a5c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    9a60:	702c      	strb	r4, [r5, #0]
		if (current == 0) {
    9a62:	b90c      	cbnz	r4, 9a68 <z_arm_on_enter_cpu_idle+0x44>
			timestamps_filled = true;
    9a64:	2301      	movs	r3, #1
    9a66:	7013      	strb	r3, [r2, #0]
	timestamps[current] = k_cycle_get_32();
    9a68:	782c      	ldrb	r4, [r5, #0]
    9a6a:	f010 f8e8 	bl	19c3e <sys_clock_cycle_get_32>
    9a6e:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
	return true;
    9a72:	2001      	movs	r0, #1
		suppress_message = true;
	}
#endif

	return ok_to_sleep;
}
    9a74:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    9a76:	2000      	movs	r0, #0
    9a78:	e7fc      	b.n	9a74 <z_arm_on_enter_cpu_idle+0x50>
    9a7a:	bf00      	nop
    9a7c:	20009be2 	.word	0x20009be2
    9a80:	200097a0 	.word	0x200097a0
    9a84:	20009be1 	.word	0x20009be1
    9a88:	40005000 	.word	0x40005000

00009a8c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    9a8c:	b148      	cbz	r0, 9aa2 <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    9a8e:	4b05      	ldr	r3, [pc, #20]	; (9aa4 <arch_busy_wait+0x18>)
    9a90:	4a05      	ldr	r2, [pc, #20]	; (9aa8 <arch_busy_wait+0x1c>)
    9a92:	681b      	ldr	r3, [r3, #0]
    9a94:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
    9a98:	4358      	muls	r0, r3
    9a9a:	4b04      	ldr	r3, [pc, #16]	; (9aac <arch_busy_wait+0x20>)
    9a9c:	f043 0301 	orr.w	r3, r3, #1
    9aa0:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    9aa2:	4770      	bx	lr
    9aa4:	200083c8 	.word	0x200083c8
    9aa8:	000f4240 	.word	0x000f4240
    9aac:	0001b9f0 	.word	0x0001b9f0

00009ab0 <sync_rtc_setup>:
	return mbox_set_enabled(&channel, true);
}

/* Setup RTC synchronization. */
static int sync_rtc_setup(void)
{
    9ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ab2:	b083      	sub	sp, #12
    9ab4:	af00      	add	r7, sp, #0
	nrfx_err_t err;
	union rtc_sync_channels channels;
	int32_t sync_rtc_ch;
	int rv;

	err = nrfx_dppi_channel_alloc(&channels.ch.ppi);
    9ab6:	1d38      	adds	r0, r7, #4
    9ab8:	f00a fa50 	bl	13f5c <nrfx_dppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    9abc:	4b27      	ldr	r3, [pc, #156]	; (9b5c <sync_rtc_setup+0xac>)
    9abe:	4298      	cmp	r0, r3
    9ac0:	d149      	bne.n	9b56 <sync_rtc_setup+0xa6>
		rv = -ENODEV;
		goto bail;
	}

	sync_rtc_ch = z_nrf_rtc_timer_chan_alloc();
    9ac2:	f009 fcdd 	bl	13480 <z_nrf_rtc_timer_chan_alloc>
	if (sync_rtc_ch < 0) {
    9ac6:	1e04      	subs	r4, r0, #0
    9ac8:	da13      	bge.n	9af2 <sync_rtc_setup+0x42>
		nrfx_dppi_channel_free(channels.ch.ppi);
    9aca:	7938      	ldrb	r0, [r7, #4]
    9acc:	f00a fa4c 	bl	13f68 <nrfx_dppi_channel_free>
		irq_unlock(key);
	}

bail:
	if (rv != 0) {
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
    9ad0:	466d      	mov	r5, sp
    9ad2:	b088      	sub	sp, #32
    9ad4:	466a      	mov	r2, sp
    9ad6:	4b22      	ldr	r3, [pc, #136]	; (9b60 <sync_rtc_setup+0xb0>)
    9ad8:	e9c2 3405 	strd	r3, r4, [r2, #20]
    9adc:	2303      	movs	r3, #3
    9ade:	f842 3f10 	str.w	r3, [r2, #16]!
    9ae2:	2300      	movs	r3, #0
    9ae4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9ae8:	481e      	ldr	r0, [pc, #120]	; (9b64 <sync_rtc_setup+0xb4>)
    9aea:	f000 ff07 	bl	a8fc <z_impl_z_log_msg_static_create>
    9aee:	46ad      	mov	sp, r5
	}

	return rv;
    9af0:	e02d      	b.n	9b4e <sync_rtc_setup+0x9e>
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    9af2:	f640 0307 	movw	r3, #2055	; 0x807
 */
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
	const struct mbox_driver_api *api =
    9af6:	4d1c      	ldr	r5, [pc, #112]	; (9b68 <sync_rtc_setup+0xb8>)
	channels.ch.rtc = (uint8_t)sync_rtc_ch;
    9af8:	717c      	strb	r4, [r7, #5]
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->register_callback == NULL) {
    9afa:	68ae      	ldr	r6, [r5, #8]
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    9afc:	80fb      	strh	r3, [r7, #6]
    9afe:	6874      	ldr	r4, [r6, #4]
	rv = mbox_rx_init((void *)channels.raw);
    9b00:	687b      	ldr	r3, [r7, #4]
    9b02:	b914      	cbnz	r4, 9b0a <sync_rtc_setup+0x5a>
		return -ENOSYS;
    9b04:	f06f 0457 	mvn.w	r4, #87	; 0x57
    9b08:	e7e2      	b.n	9ad0 <sync_rtc_setup+0x20>
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
    9b0a:	2108      	movs	r1, #8
    9b0c:	4628      	mov	r0, r5
    9b0e:	4a17      	ldr	r2, [pc, #92]	; (9b6c <sync_rtc_setup+0xbc>)
    9b10:	47a0      	blx	r4
	if (err < 0) {
    9b12:	1e04      	subs	r4, r0, #0
    9b14:	dbdc      	blt.n	9ad0 <sync_rtc_setup+0x20>
static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->set_enabled == NULL) {
    9b16:	6933      	ldr	r3, [r6, #16]
    9b18:	2b00      	cmp	r3, #0
    9b1a:	d0f3      	beq.n	9b04 <sync_rtc_setup+0x54>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
    9b1c:	2201      	movs	r2, #1
    9b1e:	2108      	movs	r1, #8
    9b20:	4628      	mov	r0, r5
    9b22:	4798      	blx	r3
	if (rv < 0) {
    9b24:	1e04      	subs	r4, r0, #0
    9b26:	dbd3      	blt.n	9ad0 <sync_rtc_setup+0x20>
	nrfx_gppi_channels_enable(BIT(channels.ch.ppi));
    9b28:	2301      	movs	r3, #1
    9b2a:	793d      	ldrb	r5, [r7, #4]
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    9b2c:	4a10      	ldr	r2, [pc, #64]	; (9b70 <sync_rtc_setup+0xc0>)
    9b2e:	40ab      	lsls	r3, r5
    9b30:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    9b34:	7978      	ldrb	r0, [r7, #5]
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    9b36:	79fe      	ldrb	r6, [r7, #7]
    9b38:	f010 f876 	bl	19c28 <z_nrf_rtc_timer_capture_task_address_get>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    9b3c:	4b0d      	ldr	r3, [pc, #52]	; (9b74 <sync_rtc_setup+0xc4>)
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    9b3e:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    9b42:	00b6      	lsls	r6, r6, #2
    9b44:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    9b48:	519d      	str	r5, [r3, r6]
	if (rv != 0) {
    9b4a:	2c00      	cmp	r4, #0
    9b4c:	d1c0      	bne.n	9ad0 <sync_rtc_setup+0x20>
}
    9b4e:	4620      	mov	r0, r4
    9b50:	370c      	adds	r7, #12
    9b52:	46bd      	mov	sp, r7
    9b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rv = -ENODEV;
    9b56:	f06f 0412 	mvn.w	r4, #18
    9b5a:	e7b9      	b.n	9ad0 <sync_rtc_setup+0x20>
    9b5c:	0bad0000 	.word	0x0bad0000
    9b60:	0001c507 	.word	0x0001c507
    9b64:	0001b948 	.word	0x0001b948
    9b68:	0001b564 	.word	0x0001b564
    9b6c:	00009bbd 	.word	0x00009bbd
    9b70:	40017000 	.word	0x40017000
    9b74:	4002a180 	.word	0x4002a180

00009b78 <rtc_cb>:
{
    9b78:	b538      	push	{r3, r4, r5, lr}
    9b7a:	9c04      	ldr	r4, [sp, #16]
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    9b7c:	f3c4 2507 	ubfx	r5, r4, #8, #8
    9b80:	4628      	mov	r0, r5
    9b82:	f009 faef 	bl	13164 <z_nrf_rtc_timer_compare_evt_address_get>

__STATIC_INLINE void nrfx_gppi_event_endpoint_clear(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    (void)channel;
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
    9b86:	2100      	movs	r1, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    9b88:	4b0a      	ldr	r3, [pc, #40]	; (9bb4 <rtc_cb+0x3c>)
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    9b8a:	0ba2      	lsrs	r2, r4, #14
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    9b8c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    9b90:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    9b94:	5099      	str	r1, [r3, r2]
	nrfx_gppi_channels_disable(BIT(channels.ch.ppi));
    9b96:	2301      	movs	r3, #1
    9b98:	b2e4      	uxtb	r4, r4
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
    9b9a:	4a07      	ldr	r2, [pc, #28]	; (9bb8 <rtc_cb+0x40>)
    9b9c:	40a3      	lsls	r3, r4
	z_nrf_rtc_timer_chan_free(channels.ch.rtc);
    9b9e:	4628      	mov	r0, r5
    9ba0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    9ba4:	f009 fc8a 	bl	134bc <z_nrf_rtc_timer_chan_free>
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    9ba8:	4620      	mov	r0, r4
}
    9baa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    9bae:	f00a b9db 	b.w	13f68 <nrfx_dppi_channel_free>
    9bb2:	bf00      	nop
    9bb4:	4002a080 	.word	0x4002a080
    9bb8:	40017000 	.word	0x40017000

00009bbc <mbox_callback>:
{
    9bbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9bbe:	4614      	mov	r4, r2
	if (api->set_enabled == NULL) {
    9bc0:	6883      	ldr	r3, [r0, #8]
    9bc2:	691b      	ldr	r3, [r3, #16]
    9bc4:	b10b      	cbz	r3, 9bca <mbox_callback+0xe>
	return api->set_enabled(channel->dev, channel->id, enable);
    9bc6:	2200      	movs	r2, #0
    9bc8:	4798      	blx	r3
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    9bca:	f3c4 2607 	ubfx	r6, r4, #8, #8
    9bce:	4630      	mov	r0, r6
    9bd0:	f009 fad0 	bl	13174 <z_nrf_rtc_timer_compare_read>
    9bd4:	4605      	mov	r5, r0
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    9bd6:	4630      	mov	r0, r6
    9bd8:	f010 f826 	bl	19c28 <z_nrf_rtc_timer_capture_task_address_get>

__STATIC_INLINE void nrfx_gppi_task_endpoint_clear(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    (void)channel;
    *((volatile uint32_t *)(tep + 0x80uL)) = 0;
    9bdc:	2700      	movs	r7, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    9bde:	4b10      	ldr	r3, [pc, #64]	; (9c20 <mbox_callback+0x64>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    9be0:	0e22      	lsrs	r2, r4, #24
    9be2:	0092      	lsls	r2, r2, #2
    9be4:	f8c0 7080 	str.w	r7, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    9be8:	509f      	str	r7, [r3, r2]
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    9bea:	4630      	mov	r0, r6
    9bec:	f009 faba 	bl	13164 <z_nrf_rtc_timer_compare_evt_address_get>
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    9bf0:	0ba2      	lsrs	r2, r4, #14
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    9bf2:	4b0c      	ldr	r3, [pc, #48]	; (9c24 <mbox_callback+0x68>)
    9bf4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    9bf8:	4413      	add	r3, r2
            ((uint32_t)channel | IPC_SUBSCRIBE_SEND_EN_Msk);
    9bfa:	b2e2      	uxtb	r2, r4
    9bfc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    9c00:	601a      	str	r2, [r3, #0]
		z_nrf_rtc_timer_set(channels.ch.rtc, cc + cc + RTC_SYNC_ARBITRARY_DELAY,
    9c02:	4b09      	ldr	r3, [pc, #36]	; (9c28 <mbox_callback+0x6c>)
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    9c04:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    9c08:	f105 0232 	add.w	r2, r5, #50	; 0x32
    9c0c:	9300      	str	r3, [sp, #0]
    9c0e:	4630      	mov	r0, r6
    9c10:	463b      	mov	r3, r7
    9c12:	9401      	str	r4, [sp, #4]
    9c14:	0052      	lsls	r2, r2, #1
    9c16:	f010 f810 	bl	19c3a <z_nrf_rtc_timer_set>
}
    9c1a:	b003      	add	sp, #12
    9c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9c1e:	bf00      	nop
    9c20:	4002a180 	.word	0x4002a180
    9c24:	4002a080 	.word	0x4002a080
    9c28:	00009b79 	.word	0x00009b79

00009c2c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    9c2c:	f010 b856 	b.w	19cdc <SystemInit>

00009c30 <ipc_service_open_instance>:
#include <zephyr/device.h>

LOG_MODULE_REGISTER(ipc_service, CONFIG_IPC_SERVICE_LOG_LEVEL);

int ipc_service_open_instance(const struct device *instance)
{
    9c30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct ipc_service_backend *backend;

	if (!instance) {
    9c32:	b970      	cbnz	r0, 9c52 <ipc_service_open_instance+0x22>
		LOG_ERR("Invalid instance");
    9c34:	4b12      	ldr	r3, [pc, #72]	; (9c80 <ipc_service_open_instance+0x50>)
    9c36:	4813      	ldr	r0, [pc, #76]	; (9c84 <ipc_service_open_instance+0x54>)
    9c38:	9305      	str	r3, [sp, #20]
    9c3a:	2302      	movs	r3, #2
    9c3c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9c40:	aa04      	add	r2, sp, #16
    9c42:	9304      	str	r3, [sp, #16]
    9c44:	f00d fb82 	bl	1734c <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    9c48:	f06f 0015 	mvn.w	r0, #21
		/* maybe not needed on backend */
		return 0;
	}

	return backend->open_instance(instance);
}
    9c4c:	b007      	add	sp, #28
    9c4e:	f85d fb04 	ldr.w	pc, [sp], #4
	backend = (const struct ipc_service_backend *) instance->api;
    9c52:	6883      	ldr	r3, [r0, #8]
	if (!backend) {
    9c54:	b963      	cbnz	r3, 9c70 <ipc_service_open_instance+0x40>
		LOG_ERR("Invalid backend configuration");
    9c56:	4b0c      	ldr	r3, [pc, #48]	; (9c88 <ipc_service_open_instance+0x58>)
    9c58:	480a      	ldr	r0, [pc, #40]	; (9c84 <ipc_service_open_instance+0x54>)
    9c5a:	9305      	str	r3, [sp, #20]
    9c5c:	2302      	movs	r3, #2
    9c5e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9c62:	aa04      	add	r2, sp, #16
    9c64:	9304      	str	r3, [sp, #16]
    9c66:	f00d fb71 	bl	1734c <z_log_msg_static_create.constprop.0>
		return -EIO;
    9c6a:	f06f 0004 	mvn.w	r0, #4
    9c6e:	e7ed      	b.n	9c4c <ipc_service_open_instance+0x1c>
	if (!backend->open_instance) {
    9c70:	681b      	ldr	r3, [r3, #0]
    9c72:	b11b      	cbz	r3, 9c7c <ipc_service_open_instance+0x4c>
}
    9c74:	b007      	add	sp, #28
    9c76:	f85d eb04 	ldr.w	lr, [sp], #4
	return backend->open_instance(instance);
    9c7a:	4718      	bx	r3
		return 0;
    9c7c:	4618      	mov	r0, r3
    9c7e:	e7e5      	b.n	9c4c <ipc_service_open_instance+0x1c>
    9c80:	0001c538 	.word	0x0001c538
    9c84:	0001b8e8 	.word	0x0001b8e8
    9c88:	0001c549 	.word	0x0001c549

00009c8c <ipc_service_register_endpoint>:
}

int ipc_service_register_endpoint(const struct device *instance,
				  struct ipc_ept *ept,
				  const struct ipc_ept_cfg *cfg)
{
    9c8c:	b530      	push	{r4, r5, lr}
    9c8e:	b087      	sub	sp, #28
	const struct ipc_service_backend *backend;

	if (!instance || !ept || !cfg) {
    9c90:	b108      	cbz	r0, 9c96 <ipc_service_register_endpoint+0xa>
    9c92:	b101      	cbz	r1, 9c96 <ipc_service_register_endpoint+0xa>
    9c94:	b96a      	cbnz	r2, 9cb2 <ipc_service_register_endpoint+0x26>
		LOG_ERR("Invalid instance, endpoint or configuration");
    9c96:	4b13      	ldr	r3, [pc, #76]	; (9ce4 <ipc_service_register_endpoint+0x58>)
    9c98:	4813      	ldr	r0, [pc, #76]	; (9ce8 <ipc_service_register_endpoint+0x5c>)
    9c9a:	9305      	str	r3, [sp, #20]
    9c9c:	2302      	movs	r3, #2
    9c9e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9ca2:	aa04      	add	r2, sp, #16
    9ca4:	9304      	str	r3, [sp, #16]
    9ca6:	f00d fb51 	bl	1734c <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    9caa:	f06f 0015 	mvn.w	r0, #21
	LOG_DBG("Register endpoint %s", cfg->name ? cfg->name : "");

	ept->instance = instance;

	return backend->register_endpoint(instance, &ept->token, cfg);
}
    9cae:	b007      	add	sp, #28
    9cb0:	bd30      	pop	{r4, r5, pc}
	backend = (const struct ipc_service_backend *) instance->api;
    9cb2:	6884      	ldr	r4, [r0, #8]
	if (!backend || !backend->register_endpoint) {
    9cb4:	b10c      	cbz	r4, 9cba <ipc_service_register_endpoint+0x2e>
    9cb6:	68e5      	ldr	r5, [r4, #12]
    9cb8:	b965      	cbnz	r5, 9cd4 <ipc_service_register_endpoint+0x48>
		LOG_ERR("Invalid backend configuration");
    9cba:	4b0c      	ldr	r3, [pc, #48]	; (9cec <ipc_service_register_endpoint+0x60>)
    9cbc:	480a      	ldr	r0, [pc, #40]	; (9ce8 <ipc_service_register_endpoint+0x5c>)
    9cbe:	9305      	str	r3, [sp, #20]
    9cc0:	2302      	movs	r3, #2
    9cc2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9cc6:	aa04      	add	r2, sp, #16
    9cc8:	9304      	str	r3, [sp, #16]
    9cca:	f00d fb3f 	bl	1734c <z_log_msg_static_create.constprop.0>
		return -EIO;
    9cce:	f06f 0004 	mvn.w	r0, #4
    9cd2:	e7ec      	b.n	9cae <ipc_service_register_endpoint+0x22>
	ept->instance = instance;
    9cd4:	f841 0b04 	str.w	r0, [r1], #4
	return backend->register_endpoint(instance, &ept->token, cfg);
    9cd8:	68e3      	ldr	r3, [r4, #12]
}
    9cda:	b007      	add	sp, #28
    9cdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->register_endpoint(instance, &ept->token, cfg);
    9ce0:	4718      	bx	r3
    9ce2:	bf00      	nop
    9ce4:	0001c567 	.word	0x0001c567
    9ce8:	0001b8e8 	.word	0x0001b8e8
    9cec:	0001c549 	.word	0x0001c549

00009cf0 <ipc_service_send>:
	return 0;
}


int ipc_service_send(struct ipc_ept *ept, const void *data, size_t len)
{
    9cf0:	b530      	push	{r4, r5, lr}
    9cf2:	4613      	mov	r3, r2
	const struct ipc_service_backend *backend;

	if (!ept) {
    9cf4:	4604      	mov	r4, r0
{
    9cf6:	b087      	sub	sp, #28
	if (!ept) {
    9cf8:	b968      	cbnz	r0, 9d16 <ipc_service_send+0x26>
		LOG_ERR("Invalid endpoint");
    9cfa:	4b1a      	ldr	r3, [pc, #104]	; (9d64 <ipc_service_send+0x74>)
    9cfc:	481a      	ldr	r0, [pc, #104]	; (9d68 <ipc_service_send+0x78>)
    9cfe:	9305      	str	r3, [sp, #20]
    9d00:	2302      	movs	r3, #2
    9d02:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9d06:	aa04      	add	r2, sp, #16
    9d08:	9304      	str	r3, [sp, #16]
    9d0a:	f00d fb1f 	bl	1734c <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    9d0e:	f06f 0015 	mvn.w	r0, #21
		LOG_ERR("Invalid backend configuration");
		return -EIO;
	}

	return backend->send(ept->instance, ept->token, data, len);
}
    9d12:	b007      	add	sp, #28
    9d14:	bd30      	pop	{r4, r5, pc}
	if (!ept->instance) {
    9d16:	6800      	ldr	r0, [r0, #0]
    9d18:	b960      	cbnz	r0, 9d34 <ipc_service_send+0x44>
		LOG_ERR("Endpoint not registered\n");
    9d1a:	4b14      	ldr	r3, [pc, #80]	; (9d6c <ipc_service_send+0x7c>)
    9d1c:	4812      	ldr	r0, [pc, #72]	; (9d68 <ipc_service_send+0x78>)
    9d1e:	9305      	str	r3, [sp, #20]
    9d20:	2302      	movs	r3, #2
    9d22:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9d26:	aa04      	add	r2, sp, #16
    9d28:	9304      	str	r3, [sp, #16]
    9d2a:	f00d fb0f 	bl	1734c <z_log_msg_static_create.constprop.0>
		return -ENOENT;
    9d2e:	f06f 0001 	mvn.w	r0, #1
    9d32:	e7ee      	b.n	9d12 <ipc_service_send+0x22>
	backend = ept->instance->api;
    9d34:	6882      	ldr	r2, [r0, #8]
	if (!backend || !backend->send) {
    9d36:	b10a      	cbz	r2, 9d3c <ipc_service_send+0x4c>
    9d38:	6895      	ldr	r5, [r2, #8]
    9d3a:	b965      	cbnz	r5, 9d56 <ipc_service_send+0x66>
		LOG_ERR("Invalid backend configuration");
    9d3c:	4b0c      	ldr	r3, [pc, #48]	; (9d70 <ipc_service_send+0x80>)
    9d3e:	480a      	ldr	r0, [pc, #40]	; (9d68 <ipc_service_send+0x78>)
    9d40:	9305      	str	r3, [sp, #20]
    9d42:	2302      	movs	r3, #2
    9d44:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9d48:	aa04      	add	r2, sp, #16
    9d4a:	9304      	str	r3, [sp, #16]
    9d4c:	f00d fafe 	bl	1734c <z_log_msg_static_create.constprop.0>
		return -EIO;
    9d50:	f06f 0004 	mvn.w	r0, #4
    9d54:	e7dd      	b.n	9d12 <ipc_service_send+0x22>
	return backend->send(ept->instance, ept->token, data, len);
    9d56:	460a      	mov	r2, r1
    9d58:	46ac      	mov	ip, r5
    9d5a:	6861      	ldr	r1, [r4, #4]
}
    9d5c:	b007      	add	sp, #28
    9d5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->send(ept->instance, ept->token, data, len);
    9d62:	4760      	bx	ip
    9d64:	0001c593 	.word	0x0001c593
    9d68:	0001b8e8 	.word	0x0001b8e8
    9d6c:	0001c5a4 	.word	0x0001c5a4
    9d70:	0001c549 	.word	0x0001c549

00009d74 <shared_memory_prepare>:

#define BACKEND_CONFIG_DEFINE(i) BACKEND_CONFIG_POPULATE(i),

#if defined(CONFIG_IPC_SERVICE_BACKEND_RPMSG_SHMEM_RESET)
static int shared_memory_prepare(void)
{
    9d74:	b508      	push	{r3, lr}

	for (backend_config = backend_configs;
	     backend_config < backend_configs + ARRAY_SIZE(backend_configs);
	     backend_config++) {
		if (backend_config->role == ROLE_HOST) {
			memset((void *) backend_config->shm_addr, 0, VDEV_STATUS_SIZE);
    9d76:	2204      	movs	r2, #4
    9d78:	2100      	movs	r1, #0
    9d7a:	4802      	ldr	r0, [pc, #8]	; (9d84 <shared_memory_prepare+0x10>)
    9d7c:	f00e fa22 	bl	181c4 <memset>
		}
	}

	return 0;
}
    9d80:	2000      	movs	r0, #0
    9d82:	bd08      	pop	{r3, pc}
    9d84:	20070000 	.word	0x20070000

00009d88 <advertise_ept>:
{
    9d88:	b530      	push	{r4, r5, lr}
    9d8a:	460c      	mov	r4, r1
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    9d8c:	490e      	ldr	r1, [pc, #56]	; (9dc8 <advertise_ept+0x40>)
{
    9d8e:	b085      	sub	sp, #20
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    9d90:	9102      	str	r1, [sp, #8]
    9d92:	f8d0 11ac 	ldr.w	r1, [r0, #428]	; 0x1ac
{
    9d96:	4605      	mov	r5, r0
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    9d98:	e9cd 3100 	strd	r3, r1, [sp]
    9d9c:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    9da0:	f04f 33ff 	mov.w	r3, #4294967295
    9da4:	4620      	mov	r0, r4
    9da6:	f00a fe9b 	bl	14ae0 <rpmsg_create_ept>
	if (err != 0) {
    9daa:	b950      	cbnz	r0, 9dc2 <advertise_ept+0x3a>
	rpmsg_ept->bound = true;
    9dac:	2301      	movs	r3, #1
    9dae:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (rpmsg_inst->bound_cb) {
    9db2:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
    9db6:	b123      	cbz	r3, 9dc2 <advertise_ept+0x3a>
		rpmsg_inst->bound_cb(rpmsg_ept);
    9db8:	4620      	mov	r0, r4
}
    9dba:	b005      	add	sp, #20
    9dbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		rpmsg_inst->bound_cb(rpmsg_ept);
    9dc0:	4718      	bx	r3
}
    9dc2:	b005      	add	sp, #20
    9dc4:	bd30      	pop	{r4, r5, pc}
    9dc6:	bf00      	nop
    9dc8:	00017443 	.word	0x00017443

00009dcc <get_ept>:
{
    9dcc:	b538      	push	{r3, r4, r5, lr}
    9dce:	460c      	mov	r4, r1
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    9dd0:	4611      	mov	r1, r2
{
    9dd2:	4605      	mov	r5, r0
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    9dd4:	f00d fb37 	bl	17446 <get_ept_slot_with_name>
	if (ept != NULL) {
    9dd8:	4603      	mov	r3, r0
    9dda:	b938      	cbnz	r0, 9dec <get_ept+0x20>
	return get_ept_slot_with_name(rpmsg_inst, "");
    9ddc:	4628      	mov	r0, r5
    9dde:	4904      	ldr	r1, [pc, #16]	; (9df0 <get_ept+0x24>)
    9de0:	f00d fb31 	bl	17446 <get_ept_slot_with_name>
    9de4:	4603      	mov	r3, r0
	if (ept != NULL) {
    9de6:	2000      	movs	r0, #0
		(*rpmsg_ept) = ept;
    9de8:	6023      	str	r3, [r4, #0]
}
    9dea:	bd38      	pop	{r3, r4, r5, pc}
		return true;
    9dec:	2001      	movs	r0, #1
    9dee:	e7fb      	b.n	9de8 <get_ept+0x1c>
    9df0:	0001e614 	.word	0x0001e614

00009df4 <open>:
{
    9df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    9df8:	2301      	movs	r3, #1
    9dfa:	4681      	mov	r9, r0
	struct backend_data_t *data = instance->data;
    9dfc:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    9dfe:	6846      	ldr	r6, [r0, #4]
{
    9e00:	b085      	sub	sp, #20
	if (!atomic_cas(&data->state, STATE_READY, STATE_BUSY)) {
    9e02:	f505 775b 	add.w	r7, r5, #876	; 0x36c
    9e06:	e8d7 2fef 	ldaex	r2, [r7]
    9e0a:	2a00      	cmp	r2, #0
    9e0c:	d103      	bne.n	9e16 <open+0x22>
    9e0e:	e8c7 3fe1 	stlex	r1, r3, [r7]
    9e12:	2900      	cmp	r1, #0
    9e14:	d1f7      	bne.n	9e06 <open+0x12>
    9e16:	f040 80b8 	bne.w	9f8a <open+0x196>
static inline unsigned int optimal_num_desc(size_t shm_size, unsigned int buf_size)
{
	size_t available, single_alloc;
	unsigned int num_desc;

	available = shm_size - VDEV_STATUS_SIZE;
    9e1a:	68b3      	ldr	r3, [r6, #8]
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    9e1c:	6ab2      	ldr	r2, [r6, #40]	; 0x28
	available = shm_size - VDEV_STATUS_SIZE;
    9e1e:	3b04      	subs	r3, #4
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    9e20:	3226      	adds	r2, #38	; 0x26
 * @return most significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_msb_set(uint32_t op)
{
	if (op == 0) {
    9e22:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    9e26:	ea4f 0142 	mov.w	r1, r2, lsl #1

	num_desc = (unsigned int) (available / single_alloc);
    9e2a:	bf26      	itte	cs
    9e2c:	fbb3 f3f1 	udivcs	r3, r3, r1
		return 0;
	}

	return 32 - __builtin_clz(op);
    9e30:	fab3 f383 	clzcs	r3, r3
		return 0;
    9e34:	2300      	movcc	r3, #0

	return (1 << (find_msb_set(num_desc) - 1));
    9e36:	f04f 0401 	mov.w	r4, #1
	return 32 - __builtin_clz(op);
    9e3a:	bf28      	it	cs
    9e3c:	f1c3 0320 	rsbcs	r3, r3, #32
    9e40:	3b01      	subs	r3, #1
	if (num_desc == 0) {
    9e42:	409c      	lsls	r4, r3
	err = vr_shm_configure(&data->vr, conf);
    9e44:	f505 78e4 	add.w	r8, r5, #456	; 0x1c8
	if (num_desc == 0) {
    9e48:	f000 8099 	beq.w	9f7e <open+0x18a>

static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
    9e4c:	2210      	movs	r2, #16
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    9e4e:	2108      	movs	r1, #8
	vr->shm_addr = conf->shm_addr + VDEV_STATUS_SIZE;
    9e50:	6870      	ldr	r0, [r6, #4]
	size = num * sizeof(struct vring_desc);
    9e52:	409a      	lsls	r2, r3
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
    9e54:	eb02 0244 	add.w	r2, r2, r4, lsl #1
    9e58:	3004      	adds	r0, #4
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    9e5a:	4099      	lsls	r1, r3
	size = (size + align - 1) & ~(align - 1);
    9e5c:	3209      	adds	r2, #9
    9e5e:	f8c5 0260 	str.w	r0, [r5, #608]	; 0x260
	size += sizeof(struct vring_used) +
    9e62:	3106      	adds	r1, #6
	size = (size + align - 1) & ~(align - 1);
    9e64:	f022 0203 	bic.w	r2, r2, #3
	size += sizeof(struct vring_used) +
    9e68:	440a      	add	r2, r1
	return (buf_size * num);
    9e6a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    9e6c:	fa01 fc03 	lsl.w	ip, r1, r3
	       (VRING_COUNT * vring_size(num, VRING_ALIGNMENT)));
    9e70:	0051      	lsls	r1, r2, #1
	vr->shm_size = shm_size(num_desc, conf->buffer_size) - VDEV_STATUS_SIZE;
    9e72:	eb01 014c 	add.w	r1, r1, ip, lsl #1
    9e76:	f8c5 1264 	str.w	r1, [r5, #612]	; 0x264
	return (buf_size * num);
    9e7a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    9e7c:	4099      	lsls	r1, r3
	vr->rx_addr = vr->shm_addr + VRING_COUNT * vq_ring_size(num_desc, conf->buffer_size);
    9e7e:	eb00 0341 	add.w	r3, r0, r1, lsl #1
    9e82:	f8c5 3258 	str.w	r3, [r5, #600]	; 0x258
	vr->tx_addr = ROUND_UP(vr->rx_addr + vring_size(num_desc, VRING_ALIGNMENT),
    9e86:	3303      	adds	r3, #3
    9e88:	4413      	add	r3, r2
    9e8a:	f023 0303 	bic.w	r3, r3, #3
    9e8e:	f8c5 3254 	str.w	r3, [r5, #596]	; 0x254
	vr->status_reg_addr = conf->shm_addr;
    9e92:	6873      	ldr	r3, [r6, #4]
	vr->vring_size = num_desc;
    9e94:	f8c5 425c 	str.w	r4, [r5, #604]	; 0x25c
	vr->status_reg_addr = conf->shm_addr;
    9e98:	f8c5 3250 	str.w	r3, [r5, #592]	; 0x250
	data->vr.notify_cb = virtio_notify_cb;
    9e9c:	4b3c      	ldr	r3, [pc, #240]	; (9f90 <open+0x19c>)
	err = ipc_static_vrings_init(&data->vr, conf->role);
    9e9e:	4640      	mov	r0, r8
	data->vr.priv = (void *) conf;
    9ea0:	e9c5 63a9 	strd	r6, r3, [r5, #676]	; 0x2a4
	err = ipc_static_vrings_init(&data->vr, conf->role);
    9ea4:	6831      	ldr	r1, [r6, #0]
    9ea6:	f000 fa1d 	bl	a2e4 <ipc_static_vrings_init>
	if (err != 0) {
    9eaa:	4604      	mov	r4, r0
    9eac:	bb30      	cbnz	r0, 9efc <open+0x108>
	const struct backend_config_t *conf = instance->config;
    9eae:	f8d9 a004 	ldr.w	sl, [r9, #4]
	struct backend_data_t *data = instance->data;
    9eb2:	f8d9 9010 	ldr.w	r9, [r9, #16]
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    9eb6:	e9da 3407 	ldrd	r3, r4, [sl, #28]
	k_work_queue_init(&data->mbox_wq);
    9eba:	f509 7b30 	add.w	fp, r9, #704	; 0x2c0
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    9ebe:	2b01      	cmp	r3, #1
	k_work_queue_init(&data->mbox_wq);
    9ec0:	4658      	mov	r0, fp
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    9ec2:	bf08      	it	eq
    9ec4:	3c10      	subeq	r4, #16
	k_work_queue_init(&data->mbox_wq);
    9ec6:	f010 ff28 	bl	1ad1a <k_work_queue_init>
	k_work_queue_start(&data->mbox_wq, mbox_stack[conf->id], WQ_STACK_SIZE, prio, NULL);
    9eca:	2300      	movs	r3, #0
    9ecc:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
    9ed0:	4930      	ldr	r1, [pc, #192]	; (9f94 <open+0x1a0>)
    9ed2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9ed6:	eb01 2180 	add.w	r1, r1, r0, lsl #10
    9eda:	9300      	str	r3, [sp, #0]
    9edc:	4658      	mov	r0, fp
    9ede:	4623      	mov	r3, r4
    9ee0:	f00b fd12 	bl	15908 <k_work_queue_start>
	k_work_init(&data->mbox_work, mbox_callback_process);
    9ee4:	f509 702c 	add.w	r0, r9, #688	; 0x2b0
    9ee8:	492b      	ldr	r1, [pc, #172]	; (9f98 <open+0x1a4>)
    9eea:	f010 fed8 	bl	1ac9e <k_work_init>
		(const struct mbox_driver_api *)channel->dev->api;
    9eee:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->register_callback == NULL) {
    9ef2:	6883      	ldr	r3, [r0, #8]
    9ef4:	685c      	ldr	r4, [r3, #4]
    9ef6:	b91c      	cbnz	r4, 9f00 <open+0x10c>
		return -ENOSYS;
    9ef8:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_READY);
    9efc:	2100      	movs	r1, #0
    9efe:	e037      	b.n	9f70 <open+0x17c>
	return api->register_callback(channel->dev, channel->id, cb, user_data);
    9f00:	464b      	mov	r3, r9
    9f02:	4a26      	ldr	r2, [pc, #152]	; (9f9c <open+0x1a8>)
    9f04:	f8da 1018 	ldr.w	r1, [sl, #24]
    9f08:	47a0      	blx	r4
	if (err != 0) {
    9f0a:	4604      	mov	r4, r0
    9f0c:	2800      	cmp	r0, #0
    9f0e:	d1f5      	bne.n	9efc <open+0x108>
		(const struct mbox_driver_api *)channel->dev->api;
    9f10:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->set_enabled == NULL) {
    9f14:	6883      	ldr	r3, [r0, #8]
    9f16:	691b      	ldr	r3, [r3, #16]
    9f18:	2b00      	cmp	r3, #0
    9f1a:	d0ed      	beq.n	9ef8 <open+0x104>
	return api->set_enabled(channel->dev, channel->id, enable);
    9f1c:	2201      	movs	r2, #1
    9f1e:	f8da 1018 	ldr.w	r1, [sl, #24]
    9f22:	4798      	blx	r3
	if (err != 0) {
    9f24:	4604      	mov	r4, r0
    9f26:	2800      	cmp	r0, #0
    9f28:	d1e8      	bne.n	9efc <open+0x108>
	rpmsg_inst->bound_cb = bound_cb;
    9f2a:	4b1d      	ldr	r3, [pc, #116]	; (9fa0 <open+0x1ac>)
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    9f2c:	4628      	mov	r0, r5
	rpmsg_inst->bound_cb = bound_cb;
    9f2e:	f8c5 31a8 	str.w	r3, [r5, #424]	; 0x1a8
	rpmsg_inst->cb = ept_cb;
    9f32:	4b1c      	ldr	r3, [pc, #112]	; (9fa4 <open+0x1b0>)
    9f34:	f8c5 31ac 	str.w	r3, [r5, #428]	; 0x1ac
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    9f38:	4b1b      	ldr	r3, [pc, #108]	; (9fa8 <open+0x1b4>)
    9f3a:	9303      	str	r3, [sp, #12]
    9f3c:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
    9f40:	9302      	str	r3, [sp, #8]
    9f42:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
    9f46:	e9cd 8300 	strd	r8, r3, [sp]
    9f4a:	f8d5 3268 	ldr.w	r3, [r5, #616]	; 0x268
    9f4e:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    9f50:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    9f54:	f000 f98e 	bl	a274 <ipc_rpmsg_init>
	if (err != 0) {
    9f58:	4604      	mov	r4, r0
    9f5a:	2800      	cmp	r0, #0
    9f5c:	d1ce      	bne.n	9efc <open+0x108>
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    9f5e:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
    9f62:	f00a fe6b 	bl	14c3c <rpmsg_virtio_get_buffer_size>
	if (data->tx_buffer_size < 0) {
    9f66:	2800      	cmp	r0, #0
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    9f68:	f8c5 0370 	str.w	r0, [r5, #880]	; 0x370
	if (data->tx_buffer_size < 0) {
    9f6c:	db0a      	blt.n	9f84 <open+0x190>
	atomic_set(&data->state, STATE_INITED);
    9f6e:	2102      	movs	r1, #2
	atomic_set(&data->state, STATE_READY);
    9f70:	4638      	mov	r0, r7
    9f72:	f00d fa9d 	bl	174b0 <atomic_set.isra.0>
}
    9f76:	4620      	mov	r0, r4
    9f78:	b005      	add	sp, #20
    9f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
    9f7e:	f06f 040b 	mvn.w	r4, #11
    9f82:	e7bb      	b.n	9efc <open+0x108>
		err = -EINVAL;
    9f84:	f06f 0415 	mvn.w	r4, #21
    9f88:	e7b8      	b.n	9efc <open+0x108>
		return -EALREADY;
    9f8a:	f06f 0477 	mvn.w	r4, #119	; 0x77
    9f8e:	e7f2      	b.n	9f76 <open+0x182>
    9f90:	00017499 	.word	0x00017499
    9f94:	2000a090 	.word	0x2000a090
    9f98:	0001747f 	.word	0x0001747f
    9f9c:	00017473 	.word	0x00017473
    9fa0:	0000a071 	.word	0x0000a071
    9fa4:	00017551 	.word	0x00017551
    9fa8:	000174e1 	.word	0x000174e1

00009fac <close>:
{
    9fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9fb0:	4606      	mov	r6, r0
    9fb2:	f04f 0901 	mov.w	r9, #1
	struct backend_data_t *data = instance->data;
    9fb6:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    9fb8:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (!atomic_cas(&data->state, STATE_INITED, STATE_BUSY)) {
    9fbc:	f505 775b 	add.w	r7, r5, #876	; 0x36c
    9fc0:	e8d7 3fef 	ldaex	r3, [r7]
    9fc4:	2b02      	cmp	r3, #2
    9fc6:	d103      	bne.n	9fd0 <close+0x24>
    9fc8:	e8c7 9fe2 	stlex	r2, r9, [r7]
    9fcc:	2a00      	cmp	r2, #0
    9fce:	d1f7      	bne.n	9fc0 <close+0x14>
    9fd0:	d149      	bne.n	a066 <close+0xba>
		if (strcmp("", rpmsg_ept->name) != 0) {
    9fd2:	4826      	ldr	r0, [pc, #152]	; (a06c <close+0xc0>)
    9fd4:	f105 0140 	add.w	r1, r5, #64	; 0x40
    9fd8:	f00e f8ba 	bl	18150 <strcmp>
    9fdc:	b120      	cbz	r0, 9fe8 <close+0x3c>
		return -EBUSY;
    9fde:	f06f 040f 	mvn.w	r4, #15
}
    9fe2:	4620      	mov	r0, r4
    9fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (strcmp("", rpmsg_ept->name) != 0) {
    9fe8:	4820      	ldr	r0, [pc, #128]	; (a06c <close+0xc0>)
    9fea:	f105 01b0 	add.w	r1, r5, #176	; 0xb0
    9fee:	f00e f8af 	bl	18150 <strcmp>
    9ff2:	2800      	cmp	r0, #0
    9ff4:	d1f3      	bne.n	9fde <close+0x32>
	err = ipc_rpmsg_deinit(rpmsg_inst, data->role);
    9ff6:	4628      	mov	r0, r5
    9ff8:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    9ffc:	f00d fadb 	bl	175b6 <ipc_rpmsg_deinit>
	if (err != 0) {
    a000:	4604      	mov	r4, r0
    a002:	bb70      	cbnz	r0, a062 <close+0xb6>
	const struct backend_config_t *conf = instance->config;
    a004:	6871      	ldr	r1, [r6, #4]
	struct backend_data_t *data = instance->data;
    a006:	6936      	ldr	r6, [r6, #16]
		(const struct mbox_driver_api *)channel->dev->api;
    a008:	6948      	ldr	r0, [r1, #20]
	if (api->set_enabled == NULL) {
    a00a:	6883      	ldr	r3, [r0, #8]
    a00c:	691b      	ldr	r3, [r3, #16]
    a00e:	b333      	cbz	r3, a05e <close+0xb2>
	return api->set_enabled(channel->dev, channel->id, enable);
    a010:	4622      	mov	r2, r4
    a012:	6989      	ldr	r1, [r1, #24]
    a014:	4798      	blx	r3
	if (err != 0) {
    a016:	4604      	mov	r4, r0
    a018:	bb18      	cbnz	r0, a062 <close+0xb6>
	k_work_queue_drain(&data->mbox_wq, 1);
    a01a:	f506 7630 	add.w	r6, r6, #704	; 0x2c0
    a01e:	4649      	mov	r1, r9
    a020:	4630      	mov	r0, r6
    a022:	f00b fca9 	bl	15978 <k_work_queue_drain>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_THREAD_ABORT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_abort(thread);
    a026:	4630      	mov	r0, r6
	err = ipc_static_vrings_deinit(&data->vr, conf->role);
    a028:	f505 76e4 	add.w	r6, r5, #456	; 0x1c8
    a02c:	f001 ff3a 	bl	bea4 <z_impl_k_thread_abort>
    a030:	4630      	mov	r0, r6
    a032:	f8d8 1000 	ldr.w	r1, [r8]
    a036:	f00d fafb 	bl	17630 <ipc_static_vrings_deinit>
	if (err != 0) {
    a03a:	4604      	mov	r4, r0
    a03c:	b988      	cbnz	r0, a062 <close+0xb6>
	memset(&data->vr, 0, sizeof(struct ipc_static_vrings));
    a03e:	4601      	mov	r1, r0
    a040:	22e8      	movs	r2, #232	; 0xe8
    a042:	4630      	mov	r0, r6
    a044:	f00e f8be 	bl	181c4 <memset>
	memset(rpmsg_inst, 0, sizeof(struct ipc_rpmsg_instance));
    a048:	4621      	mov	r1, r4
    a04a:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
    a04e:	4628      	mov	r0, r5
    a050:	f00e f8b8 	bl	181c4 <memset>
	atomic_set(&data->state, STATE_READY);
    a054:	4621      	mov	r1, r4
	atomic_set(&data->state, STATE_INITED);
    a056:	4638      	mov	r0, r7
    a058:	f00d fa2a 	bl	174b0 <atomic_set.isra.0>
	return err;
    a05c:	e7c1      	b.n	9fe2 <close+0x36>
		return -ENOSYS;
    a05e:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_INITED);
    a062:	2102      	movs	r1, #2
    a064:	e7f7      	b.n	a056 <close+0xaa>
		return -EALREADY;
    a066:	f06f 0477 	mvn.w	r4, #119	; 0x77
    a06a:	e7ba      	b.n	9fe2 <close+0x36>
    a06c:	0001e614 	.word	0x0001e614

0000a070 <bound_cb>:
{
    a070:	b513      	push	{r0, r1, r4, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	if (!ept)
    a072:	4604      	mov	r4, r0
    a074:	b140      	cbz	r0, a088 <bound_cb+0x18>
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    a076:	2300      	movs	r3, #0
    a078:	2201      	movs	r2, #1
    a07a:	e9cd 3200 	strd	r3, r2, [sp]
    a07e:	4b07      	ldr	r3, [pc, #28]	; (a09c <bound_cb+0x2c>)
    a080:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    a084:	f00a fce0 	bl	14a48 <rpmsg_send_offchannel_raw>
	if (ept->cb->bound) {
    a088:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    a08a:	681b      	ldr	r3, [r3, #0]
    a08c:	b123      	cbz	r3, a098 <bound_cb+0x28>
		ept->cb->bound(ept->priv);
    a08e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
    a090:	b002      	add	sp, #8
    a092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ept->cb->bound(ept->priv);
    a096:	4718      	bx	r3
}
    a098:	b002      	add	sp, #8
    a09a:	bd10      	pop	{r4, pc}
    a09c:	0001e614 	.word	0x0001e614

0000a0a0 <send>:
{
    a0a0:	b513      	push	{r0, r1, r4, lr}
    a0a2:	4604      	mov	r4, r0
    a0a4:	4608      	mov	r0, r1
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a0a6:	6921      	ldr	r1, [r4, #16]
    a0a8:	f501 715b 	add.w	r1, r1, #876	; 0x36c
    a0ac:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
    a0b0:	2902      	cmp	r1, #2
    a0b2:	d110      	bne.n	a0d6 <send+0x36>
	if (len == 0) {
    a0b4:	b193      	cbz	r3, a0dc <send+0x3c>
	if (!rpmsg_ept) {
    a0b6:	b1a0      	cbz	r0, a0e2 <send+0x42>
    a0b8:	2101      	movs	r1, #1
    a0ba:	e9cd 3100 	strd	r3, r1, [sp]
    a0be:	4613      	mov	r3, r2
    a0c0:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    a0c4:	f00a fcc0 	bl	14a48 <rpmsg_send_offchannel_raw>
	if (ret == RPMSG_ERR_NO_BUFF) {
    a0c8:	4b07      	ldr	r3, [pc, #28]	; (a0e8 <send+0x48>)
		return -ENOMEM;
    a0ca:	4298      	cmp	r0, r3
    a0cc:	bf08      	it	eq
    a0ce:	f06f 000b 	mvneq.w	r0, #11
}
    a0d2:	b002      	add	sp, #8
    a0d4:	bd10      	pop	{r4, pc}
		return -EBUSY;
    a0d6:	f06f 000f 	mvn.w	r0, #15
    a0da:	e7fa      	b.n	a0d2 <send+0x32>
		return -EBADMSG;
    a0dc:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    a0e0:	e7f7      	b.n	a0d2 <send+0x32>
		return -ENOENT;
    a0e2:	f06f 0001 	mvn.w	r0, #1
    a0e6:	e7f4      	b.n	a0d2 <send+0x32>
    a0e8:	fffff82e 	.word	0xfffff82e

0000a0ec <register_ept>:
{
    a0ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    a0f0:	4688      	mov	r8, r1
    a0f2:	4615      	mov	r5, r2
	struct backend_data_t *data = instance->data;
    a0f4:	6906      	ldr	r6, [r0, #16]
    a0f6:	f506 735b 	add.w	r3, r6, #876	; 0x36c
    a0fa:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
    a0fe:	2b02      	cmp	r3, #2
    a100:	d15f      	bne.n	a1c2 <register_ept+0xd6>
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    a102:	6813      	ldr	r3, [r2, #0]
    a104:	b923      	cbnz	r3, a110 <register_ept+0x24>
		return -EINVAL;
    a106:	f06f 0015 	mvn.w	r0, #21
}
    a10a:	b003      	add	sp, #12
    a10c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    a110:	781b      	ldrb	r3, [r3, #0]
    a112:	2b00      	cmp	r3, #0
    a114:	d0f7      	beq.n	a106 <register_ept+0x1a>
			register_ept_on_host(rpmsg_inst, cfg) :
    a116:	f8d6 9368 	ldr.w	r9, [r6, #872]	; 0x368
    a11a:	f1b9 0f00 	cmp.w	r9, #0
    a11e:	d133      	bne.n	a188 <register_ept+0x9c>
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
    a120:	f506 77d8 	add.w	r7, r6, #432	; 0x1b0
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    a124:	f04f 32ff 	mov.w	r2, #4294967295
    a128:	f04f 33ff 	mov.w	r3, #4294967295
    a12c:	4638      	mov	r0, r7
    a12e:	f00b f97f 	bl	15430 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, cfg->name);
    a132:	4630      	mov	r0, r6
    a134:	682a      	ldr	r2, [r5, #0]
    a136:	a901      	add	r1, sp, #4
    a138:	f7ff fe48 	bl	9dcc <get_ept>
	if (rpmsg_ept == NULL) {
    a13c:	9c01      	ldr	r4, [sp, #4]
    a13e:	b91c      	cbnz	r4, a148 <register_ept+0x5c>
		k_mutex_unlock(&rpmsg_inst->mtx);
    a140:	4638      	mov	r0, r7
    a142:	f00d f9b3 	bl	174ac <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    a146:	e7de      	b.n	a106 <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    a148:	f105 0308 	add.w	r3, r5, #8
    a14c:	66a3      	str	r3, [r4, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    a14e:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->bound = false;
    a150:	f884 9064 	strb.w	r9, [r4, #100]	; 0x64
	rpmsg_ept->priv = cfg->priv;
    a154:	66e3      	str	r3, [r4, #108]	; 0x6c
	rpmsg_ept->ep.priv = rpmsg_ept;
    a156:	63e4      	str	r4, [r4, #60]	; 0x3c
	if (ept_cached) {
    a158:	b160      	cbz	r0, a174 <register_ept+0x88>
		k_mutex_unlock(&rpmsg_inst->mtx);
    a15a:	4638      	mov	r0, r7
    a15c:	f00d f9a6 	bl	174ac <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, cfg->name, rpmsg_ept->dest);
    a160:	4621      	mov	r1, r4
    a162:	4630      	mov	r0, r6
    a164:	6e23      	ldr	r3, [r4, #96]	; 0x60
    a166:	682a      	ldr	r2, [r5, #0]
    a168:	f7ff fe0e 	bl	9d88 <advertise_ept>
	return 0;
    a16c:	2000      	movs	r0, #0
	(*token) = rpmsg_ept;
    a16e:	f8c8 4000 	str.w	r4, [r8]
	return 0;
    a172:	e7ca      	b.n	a10a <register_ept+0x1e>
		strncpy(rpmsg_ept->name, cfg->name, sizeof(rpmsg_ept->name));
    a174:	2220      	movs	r2, #32
    a176:	6829      	ldr	r1, [r5, #0]
    a178:	f104 0040 	add.w	r0, r4, #64	; 0x40
    a17c:	f00d ffc4 	bl	18108 <strncpy>
		k_mutex_unlock(&rpmsg_inst->mtx);
    a180:	4638      	mov	r0, r7
    a182:	f00d f993 	bl	174ac <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    a186:	e7f1      	b.n	a16c <register_ept+0x80>
	return get_ept_slot_with_name(rpmsg_inst, "");
    a188:	4630      	mov	r0, r6
    a18a:	490f      	ldr	r1, [pc, #60]	; (a1c8 <register_ept+0xdc>)
    a18c:	f00d f95b 	bl	17446 <get_ept_slot_with_name>
	if (rpmsg_ept == NULL) {
    a190:	4604      	mov	r4, r0
    a192:	2800      	cmp	r0, #0
    a194:	d0b7      	beq.n	a106 <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    a196:	f105 0308 	add.w	r3, r5, #8
    a19a:	6683      	str	r3, [r0, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    a19c:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->ep.priv = rpmsg_ept;
    a19e:	63c0      	str	r0, [r0, #60]	; 0x3c
	rpmsg_ept->priv = cfg->priv;
    a1a0:	66c3      	str	r3, [r0, #108]	; 0x6c
	rpmsg_ept->bound = false;
    a1a2:	2300      	movs	r3, #0
    a1a4:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
	strncpy(rpmsg_ept->name, cfg->name, sizeof(rpmsg_ept->name));
    a1a8:	2220      	movs	r2, #32
    a1aa:	6829      	ldr	r1, [r5, #0]
    a1ac:	3040      	adds	r0, #64	; 0x40
    a1ae:	f00d ffab 	bl	18108 <strncpy>
	err = ipc_rpmsg_register_ept(rpmsg_inst, RPMSG_REMOTE, rpmsg_ept);
    a1b2:	4622      	mov	r2, r4
    a1b4:	2101      	movs	r1, #1
    a1b6:	4630      	mov	r0, r6
    a1b8:	f000 f83e 	bl	a238 <ipc_rpmsg_register_ept>
	if (err != 0) {
    a1bc:	2800      	cmp	r0, #0
    a1be:	d0d5      	beq.n	a16c <register_ept+0x80>
    a1c0:	e7a1      	b.n	a106 <register_ept+0x1a>
		return -EBUSY;
    a1c2:	f06f 000f 	mvn.w	r0, #15
    a1c6:	e7a0      	b.n	a10a <register_ept+0x1e>
    a1c8:	0001e614 	.word	0x0001e614

0000a1cc <ns_bind_cb>:
{
	rpmsg_destroy_ept(ep);
}

static void ns_bind_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
    a1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a1d0:	4605      	mov	r5, r0
    a1d2:	460e      	mov	r6, r1
    a1d4:	4690      	mov	r8, r2
	int err;

	p_rvdev = CONTAINER_OF(rdev, struct rpmsg_virtio_device, rdev);
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);

	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    a1d6:	2700      	movs	r7, #0
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
    a1d8:	f8d0 a0b0 	ldr.w	sl, [r0, #176]	; 0xb0
{
    a1dc:	b085      	sub	sp, #20
    a1de:	f5aa 74ae 	sub.w	r4, sl, #348	; 0x15c
		ept = &instance->endpoint[i];

		if (strcmp(name, ept->name) == 0) {
    a1e2:	4621      	mov	r1, r4
    a1e4:	4630      	mov	r0, r6
    a1e6:	f00d ffb3 	bl	18150 <strcmp>
    a1ea:	b9e0      	cbnz	r0, a226 <ns_bind_cb+0x5a>
			 * The destination address is 'dest' so ns_bind_cb() is
			 * *NOT* called on the REMOTE side. The bound_cb()
			 * function will eventually take care of notifying the
			 * REMOTE side if needed.
			 */
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    a1ec:	4b11      	ldr	r3, [pc, #68]	; (a234 <ns_bind_cb+0x68>)
		ept = &instance->endpoint[i];
    a1ee:	f1a4 0b40 	sub.w	fp, r4, #64	; 0x40
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    a1f2:	9302      	str	r3, [sp, #8]
    a1f4:	f8da 3010 	ldr.w	r3, [sl, #16]
    a1f8:	4632      	mov	r2, r6
    a1fa:	e9cd 8300 	strd	r8, r3, [sp]
    a1fe:	4629      	mov	r1, r5
    a200:	f04f 33ff 	mov.w	r3, #4294967295
    a204:	4658      	mov	r0, fp
    a206:	f5aa 79ce 	sub.w	r9, sl, #412	; 0x19c
    a20a:	f00a fc69 	bl	14ae0 <rpmsg_create_ept>
					       dest, instance->cb, rpmsg_service_unbind);
			if (err != 0) {
    a20e:	b960      	cbnz	r0, a22a <ns_bind_cb+0x5e>
				return;
			}

			ept->bound = true;
    a210:	2370      	movs	r3, #112	; 0x70
    a212:	2201      	movs	r2, #1
    a214:	fb03 9307 	mla	r3, r3, r7, r9
    a218:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			if (instance->bound_cb) {
    a21c:	f8da 300c 	ldr.w	r3, [sl, #12]
    a220:	b10b      	cbz	r3, a226 <ns_bind_cb+0x5a>
				instance->bound_cb(ept);
    a222:	4658      	mov	r0, fp
    a224:	4798      	blx	r3
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    a226:	3470      	adds	r4, #112	; 0x70
    a228:	b117      	cbz	r7, a230 <ns_bind_cb+0x64>
			}
		}
	}
}
    a22a:	b005      	add	sp, #20
    a22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    a230:	2701      	movs	r7, #1
    a232:	e7d6      	b.n	a1e2 <ns_bind_cb+0x16>
    a234:	000175b3 	.word	0x000175b3

0000a238 <ipc_rpmsg_register_ept>:

int ipc_rpmsg_register_ept(struct ipc_rpmsg_instance *instance, unsigned int role,
			   struct ipc_rpmsg_ept *ept)
{
    a238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    a23a:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!instance || !ept) {
    a23c:	b190      	cbz	r0, a264 <ipc_rpmsg_register_ept+0x2c>
    a23e:	b18a      	cbz	r2, a264 <ipc_rpmsg_register_ept+0x2c>
		return -EINVAL;
	}

	rdev = rpmsg_virtio_get_rpmsg_device(&instance->rvdev);

	if (role == RPMSG_REMOTE) {
    a240:	2901      	cmp	r1, #1
    a242:	d112      	bne.n	a26a <ipc_rpmsg_register_ept+0x32>
		/*
		 * The destination address is RPMSG_ADDR_ANY, this will trigger
		 * the ns_bind_cb() callback function on the HOST side.
		 */
		return rpmsg_create_ept(&ept->ep, rdev, ept->name, RPMSG_ADDR_ANY,
    a244:	4b0a      	ldr	r3, [pc, #40]	; (a270 <ipc_rpmsg_register_ept+0x38>)
    a246:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    a24a:	9302      	str	r3, [sp, #8]
    a24c:	f8d0 31ac 	ldr.w	r3, [r0, #428]	; 0x1ac
    a250:	3240      	adds	r2, #64	; 0x40
    a252:	9301      	str	r3, [sp, #4]
    a254:	f04f 33ff 	mov.w	r3, #4294967295
    a258:	4620      	mov	r0, r4
    a25a:	9300      	str	r3, [sp, #0]
    a25c:	f00a fc40 	bl	14ae0 <rpmsg_create_ept>
					RPMSG_ADDR_ANY, instance->cb, rpmsg_service_unbind);
	}

	return RPMSG_SUCCESS;
}
    a260:	b004      	add	sp, #16
    a262:	bd10      	pop	{r4, pc}
		return -EINVAL;
    a264:	f06f 0015 	mvn.w	r0, #21
    a268:	e7fa      	b.n	a260 <ipc_rpmsg_register_ept+0x28>
	return RPMSG_SUCCESS;
    a26a:	2000      	movs	r0, #0
    a26c:	e7f8      	b.n	a260 <ipc_rpmsg_register_ept+0x28>
    a26e:	bf00      	nop
    a270:	000175b3 	.word	0x000175b3

0000a274 <ipc_rpmsg_init>:
		   unsigned int buffer_size,
		   struct metal_io_region *shm_io,
		   struct virtio_device *vdev,
		   void *shb, size_t size,
		   rpmsg_ns_bind_cb p_bind_cb)
{
    a274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a278:	b087      	sub	sp, #28
    a27a:	460e      	mov	r6, r1
    a27c:	e9dd 810e 	ldrd	r8, r1, [sp, #56]	; 0x38
    a280:	4614      	mov	r4, r2
    a282:	e9dd 2510 	ldrd	r2, r5, [sp, #64]	; 0x40
    a286:	461f      	mov	r7, r3
	rpmsg_ns_bind_cb bind_cb = p_bind_cb;

	if (!instance || !shb) {
    a288:	b330      	cbz	r0, a2d8 <ipc_rpmsg_init+0x64>
    a28a:	b329      	cbz	r1, a2d8 <ipc_rpmsg_init+0x64>
		return -EINVAL;
	}

	if (p_bind_cb == NULL) {
		bind_cb = ns_bind_cb;
    a28c:	f8df c050 	ldr.w	ip, [pc, #80]	; a2e0 <ipc_rpmsg_init+0x6c>
		config.h2r_buf_size = (uint32_t) buffer_size;
		config.r2h_buf_size = (uint32_t) buffer_size;

		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);

		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    a290:	f100 09e0 	add.w	r9, r0, #224	; 0xe0
		bind_cb = ns_bind_cb;
    a294:	2d00      	cmp	r5, #0
    a296:	bf08      	it	eq
    a298:	4665      	moveq	r5, ip
	if (role == RPMSG_HOST) {
    a29a:	b99e      	cbnz	r6, a2c4 <ipc_rpmsg_init+0x50>
		config.r2h_buf_size = (uint32_t) buffer_size;
    a29c:	e9cd 4403 	strd	r4, r4, [sp, #12]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
    a2a0:	f500 74ce 	add.w	r4, r0, #412	; 0x19c
    a2a4:	4620      	mov	r0, r4
		struct rpmsg_virtio_config config = { 0 };
    a2a6:	9605      	str	r6, [sp, #20]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
    a2a8:	f010 fae6 	bl	1a878 <rpmsg_virtio_init_shm_pool>
		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    a2ac:	ab03      	add	r3, sp, #12
    a2ae:	e9cd 4300 	strd	r4, r3, [sp]
    a2b2:	462a      	mov	r2, r5
    a2b4:	463b      	mov	r3, r7
    a2b6:	4641      	mov	r1, r8
    a2b8:	4648      	mov	r0, r9
    a2ba:	f00a fce5 	bl	14c88 <rpmsg_init_vdev_with_config>
						   shm_io, &instance->shm_pool,
						   &config);
	} else {
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
	}
}
    a2be:	b007      	add	sp, #28
    a2c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    a2c4:	2200      	movs	r2, #0
    a2c6:	4641      	mov	r1, r8
    a2c8:	920e      	str	r2, [sp, #56]	; 0x38
    a2ca:	4648      	mov	r0, r9
    a2cc:	462a      	mov	r2, r5
}
    a2ce:	b007      	add	sp, #28
    a2d0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    a2d4:	f00a be02 	b.w	14edc <rpmsg_init_vdev>
		return -EINVAL;
    a2d8:	f06f 0015 	mvn.w	r0, #21
    a2dc:	e7ef      	b.n	a2be <ipc_rpmsg_init+0x4a>
    a2de:	bf00      	nop
    a2e0:	0000a1cd 	.word	0x0000a1cd

0000a2e4 <ipc_static_vrings_init>:

	return 0;
}

int ipc_static_vrings_init(struct ipc_static_vrings *vr, unsigned int role)
{
    a2e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a2e6:	460e      	mov	r6, r1
	int err = 0;

	if (!vr) {
    a2e8:	4604      	mov	r4, r0
{
    a2ea:	b089      	sub	sp, #36	; 0x24
	if (!vr) {
    a2ec:	2800      	cmp	r0, #0
    a2ee:	d06f      	beq.n	a3d0 <ipc_static_vrings_init+0xec>
		return -EINVAL;
	}

	vr->shm_device.name = SHM_DEVICE_NAME;
	vr->shm_device.num_regions = 1;
    a2f0:	2301      	movs	r3, #1
	vr->shm_physmap[0] = vr->shm_addr;
    a2f2:	4602      	mov	r2, r0
	vr->shm_device.num_regions = 1;
    a2f4:	63c3      	str	r3, [r0, #60]	; 0x3c

	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    a2f6:	2300      	movs	r3, #0
	vr->shm_physmap[0] = vr->shm_addr;
    a2f8:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
	vr->shm_device.name = SHM_DEVICE_NAME;
    a2fc:	4f36      	ldr	r7, [pc, #216]	; (a3d8 <ipc_static_vrings_init+0xf4>)
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    a2fe:	3040      	adds	r0, #64	; 0x40
	vr->shm_device.name = SHM_DEVICE_NAME;
    a300:	f840 7c0c 	str.w	r7, [r0, #-12]
	vr->shm_physmap[0] = vr->shm_addr;
    a304:	f842 1f30 	str.w	r1, [r2, #48]!
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    a308:	e9cd 3301 	strd	r3, r3, [sp, #4]
    a30c:	f04f 33ff 	mov.w	r3, #4294967295
    a310:	9300      	str	r3, [sp, #0]
    a312:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    a314:	f00f fd6e 	bl	19df4 <metal_io_init>
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    a318:	4a30      	ldr	r2, [pc, #192]	; (a3dc <ipc_static_vrings_init+0xf8>)
    a31a:	ab06      	add	r3, sp, #24
    a31c:	e892 0003 	ldmia.w	r2, {r0, r1}
    a320:	e883 0003 	stmia.w	r3, {r0, r1}
	err = metal_init(&metal_params);
    a324:	4618      	mov	r0, r3
    a326:	f00a faaf 	bl	14888 <metal_init>
	if (err != 0) {
    a32a:	4605      	mov	r5, r0
    a32c:	b9d8      	cbnz	r0, a366 <ipc_static_vrings_init+0x82>
	err = metal_register_generic_device(&vr->shm_device);
    a32e:	f104 0034 	add.w	r0, r4, #52	; 0x34
    a332:	f00a fa89 	bl	14848 <metal_register_generic_device>
	if (err != 0) {
    a336:	4605      	mov	r5, r0
    a338:	b9a8      	cbnz	r0, a366 <ipc_static_vrings_init+0x82>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    a33a:	4639      	mov	r1, r7
    a33c:	4828      	ldr	r0, [pc, #160]	; (a3e0 <ipc_static_vrings_init+0xfc>)
    a33e:	aa05      	add	r2, sp, #20
    a340:	f00f fd2a 	bl	19d98 <metal_device_open>
	if (err != 0) {
    a344:	4605      	mov	r5, r0
    a346:	b970      	cbnz	r0, a366 <ipc_static_vrings_init+0x82>
	vr->shm_io = metal_device_io_region(device, 0);
    a348:	9b05      	ldr	r3, [sp, #20]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
    a34a:	689a      	ldr	r2, [r3, #8]
    a34c:	b172      	cbz	r2, a36c <ipc_static_vrings_init+0x88>
    a34e:	330c      	adds	r3, #12
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    a350:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	vr->shm_io = metal_device_io_region(device, 0);
    a354:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    a358:	f00d f95c 	bl	17614 <virtqueue_allocate>
    a35c:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
	if (vr->vq[RPMSG_VQ_0] == NULL) {
    a360:	b930      	cbnz	r0, a370 <ipc_static_vrings_init+0x8c>
		return -ENOMEM;
    a362:	f06f 050b 	mvn.w	r5, #11
	if (err != 0) {
		return err;
	}

	return vq_setup(vr, role);
}
    a366:	4628      	mov	r0, r5
    a368:	b009      	add	sp, #36	; 0x24
    a36a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a36c:	4603      	mov	r3, r0
    a36e:	e7ef      	b.n	a350 <ipc_static_vrings_init+0x6c>
	vr->vq[RPMSG_VQ_1] = virtqueue_allocate(vr->vring_size);
    a370:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    a374:	f00d f94e 	bl	17614 <virtqueue_allocate>
    a378:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
	if (vr->vq[RPMSG_VQ_1] == NULL) {
    a37c:	2800      	cmp	r0, #0
    a37e:	d0f0      	beq.n	a362 <ipc_static_vrings_init+0x7e>
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    a380:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    a384:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    a388:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	vr->rvrings[RPMSG_VQ_0].info.align = VRING_ALIGNMENT;
    a38c:	2304      	movs	r3, #4
    a38e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	vr->rvrings[RPMSG_VQ_1].info.align = VRING_ALIGNMENT;
    a392:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	vr->vdev.vrings_num = VRING_COUNT;
    a396:	2302      	movs	r3, #2
    a398:	62a3      	str	r3, [r4, #40]	; 0x28
	vr->vdev.func = &dispatch;
    a39a:	4b12      	ldr	r3, [pc, #72]	; (a3e4 <ipc_static_vrings_init+0x100>)
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    a39c:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    a3a0:	f8d4 70d4 	ldr.w	r7, [r4, #212]	; 0xd4
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    a3a4:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
	vr->rvrings[RPMSG_VQ_1].io = vr->shm_io;
    a3a8:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    a3ac:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
	vr->vdev.func = &dispatch;
    a3b0:	6223      	str	r3, [r4, #32]
	vr->vdev.vrings_info = &vr->rvrings[0];
    a3b2:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    a3b6:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    a3ba:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    a3be:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	vr->rvrings[RPMSG_VQ_1].info.num_descs = vr->vring_size;
    a3c2:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	vr->rvrings[RPMSG_VQ_1].vq = vr->vq[RPMSG_VQ_1];
    a3c6:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	vr->vdev.role = role;
    a3ca:	61a6      	str	r6, [r4, #24]
	vr->vdev.vrings_info = &vr->rvrings[0];
    a3cc:	62e3      	str	r3, [r4, #44]	; 0x2c
	return 0;
    a3ce:	e7ca      	b.n	a366 <ipc_static_vrings_init+0x82>
		return -EINVAL;
    a3d0:	f06f 0515 	mvn.w	r5, #21
    a3d4:	e7c7      	b.n	a366 <ipc_static_vrings_init+0x82>
    a3d6:	bf00      	nop
    a3d8:	0001c5ce 	.word	0x0001c5ce
    a3dc:	0001b970 	.word	0x0001b970
    a3e0:	0001c5d8 	.word	0x0001c5d8
    a3e4:	0001bb2c 	.word	0x0001bb2c

0000a3e8 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
    a3e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a3ec:	4604      	mov	r4, r0
	uint32_t mask_cpy = mask;

	while (mask_cpy) {
    a3ee:	4607      	mov	r7, r0
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
    a3f0:	f04f 0901 	mov.w	r9, #1
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    a3f4:	f8df 8050 	ldr.w	r8, [pc, #80]	; a448 <activate_foreach_backend+0x60>
	while (mask_cpy) {
    a3f8:	b914      	cbnz	r4, a400 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
    a3fa:	4638      	mov	r0, r7
    a3fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    a400:	fa94 f5a4 	rbit	r5, r4
    a404:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    a408:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    a40c:	012e      	lsls	r6, r5, #4
    a40e:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    a412:	ea6f 0a03 	mvn.w	sl, r3
    a416:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    a41a:	7b2b      	ldrb	r3, [r5, #12]
    a41c:	2b00      	cmp	r3, #0
    a41e:	d0eb      	beq.n	a3f8 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    a420:	f858 3006 	ldr.w	r3, [r8, r6]
    a424:	691b      	ldr	r3, [r3, #16]
    a426:	b94b      	cbnz	r3, a43c <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    a428:	4446      	add	r6, r8
			log_backend_enable(backend,
    a42a:	6873      	ldr	r3, [r6, #4]
    a42c:	2204      	movs	r2, #4
    a42e:	4628      	mov	r0, r5
    a430:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    a432:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    a436:	f000 fa4d 	bl	a8d4 <log_backend_enable>
    a43a:	e7dd      	b.n	a3f8 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    a43c:	4628      	mov	r0, r5
    a43e:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    a440:	2800      	cmp	r0, #0
    a442:	d1d9      	bne.n	a3f8 <activate_foreach_backend+0x10>
    a444:	e7f0      	b.n	a428 <activate_foreach_backend+0x40>
    a446:	bf00      	nop
    a448:	0001b958 	.word	0x0001b958

0000a44c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
    a44c:	b530      	push	{r4, r5, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    a44e:	2200      	movs	r2, #0
{
    a450:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    a452:	490f      	ldr	r1, [pc, #60]	; (a490 <enable_logger+0x44>)
    a454:	480f      	ldr	r0, [pc, #60]	; (a494 <enable_logger+0x48>)
    a456:	f010 fe2a 	bl	1b0ae <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    a45a:	2200      	movs	r2, #0
    a45c:	2300      	movs	r3, #0
    a45e:	2400      	movs	r4, #0
    a460:	e9cd 2306 	strd	r2, r3, [sp, #24]
    a464:	230e      	movs	r3, #14
    a466:	4d0c      	ldr	r5, [pc, #48]	; (a498 <enable_logger+0x4c>)
    a468:	e9cd 3403 	strd	r3, r4, [sp, #12]
    a46c:	f44f 7240 	mov.w	r2, #768	; 0x300
    a470:	4628      	mov	r0, r5
    a472:	e9cd 4401 	strd	r4, r4, [sp, #4]
    a476:	4b09      	ldr	r3, [pc, #36]	; (a49c <enable_logger+0x50>)
    a478:	4909      	ldr	r1, [pc, #36]	; (a4a0 <enable_logger+0x54>)
    a47a:	9400      	str	r4, [sp, #0]
    a47c:	f00a ff34 	bl	152e8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    a480:	4908      	ldr	r1, [pc, #32]	; (a4a4 <enable_logger+0x58>)
    a482:	4628      	mov	r0, r5
    a484:	f010 fad4 	bl	1aa30 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    a488:	4620      	mov	r0, r4
    a48a:	b009      	add	sp, #36	; 0x24
    a48c:	bd30      	pop	{r4, r5, pc}
    a48e:	bf00      	nop
    a490:	0000a4a9 	.word	0x0000a4a9
    a494:	20009080 	.word	0x20009080
    a498:	20008bf0 	.word	0x20008bf0
    a49c:	0000a781 	.word	0x0000a781
    a4a0:	2000a490 	.word	0x2000a490
    a4a4:	0001c5e0 	.word	0x0001c5e0

0000a4a8 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    a4a8:	4801      	ldr	r0, [pc, #4]	; (a4b0 <log_process_thread_timer_expiry_fn+0x8>)
    a4aa:	f00b b8ab 	b.w	15604 <z_impl_k_sem_give>
    a4ae:	bf00      	nop
    a4b0:	20008670 	.word	0x20008670

0000a4b4 <z_log_init>:
{
    a4b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a4b8:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
    a4ba:	481f      	ldr	r0, [pc, #124]	; (a538 <z_log_init+0x84>)
{
    a4bc:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
    a4be:	f00d f8fb 	bl	176b8 <atomic_inc>
    a4c2:	4606      	mov	r6, r0
    a4c4:	2800      	cmp	r0, #0
    a4c6:	d030      	beq.n	a52a <z_log_init+0x76>
	uint32_t mask = 0;
    a4c8:	2500      	movs	r5, #0
}
    a4ca:	4628      	mov	r0, r5
    a4cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    a4d0:	7b23      	ldrb	r3, [r4, #12]
    a4d2:	b173      	cbz	r3, a4f2 <z_log_init+0x3e>
	if (backend->api->init) {
    a4d4:	6823      	ldr	r3, [r4, #0]
    a4d6:	68db      	ldr	r3, [r3, #12]
    a4d8:	b10b      	cbz	r3, a4de <z_log_init+0x2a>
		backend->api->init(backend);
    a4da:	4620      	mov	r0, r4
    a4dc:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    a4de:	6823      	ldr	r3, [r4, #0]
    a4e0:	691b      	ldr	r3, [r3, #16]
    a4e2:	b9d3      	cbnz	r3, a51a <z_log_init+0x66>
				log_backend_enable(backend,
    a4e4:	6863      	ldr	r3, [r4, #4]
    a4e6:	2204      	movs	r2, #4
    a4e8:	4620      	mov	r0, r4
    a4ea:	6819      	ldr	r1, [r3, #0]
    a4ec:	f000 f9f2 	bl	a8d4 <log_backend_enable>
			i++;
    a4f0:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a4f2:	3410      	adds	r4, #16
    a4f4:	454c      	cmp	r4, r9
    a4f6:	d3eb      	bcc.n	a4d0 <z_log_init+0x1c>
	if (blocking) {
    a4f8:	f1b8 0f00 	cmp.w	r8, #0
    a4fc:	d0e5      	beq.n	a4ca <z_log_init+0x16>
		while (mask) {
    a4fe:	2d00      	cmp	r5, #0
    a500:	d0e2      	beq.n	a4c8 <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
    a502:	4628      	mov	r0, r5
    a504:	f7ff ff70 	bl	a3e8 <activate_foreach_backend>
    a508:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    a50a:	2f00      	cmp	r7, #0
    a50c:	d0f7      	beq.n	a4fe <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
    a50e:	2100      	movs	r1, #0
    a510:	f44f 70a4 	mov.w	r0, #328	; 0x148
    a514:	f00b fd94 	bl	16040 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    a518:	e7f1      	b.n	a4fe <z_log_init+0x4a>
		return backend->api->is_ready(backend);
    a51a:	4620      	mov	r0, r4
    a51c:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    a51e:	2800      	cmp	r0, #0
    a520:	d0e0      	beq.n	a4e4 <z_log_init+0x30>
				mask |= BIT(i);
    a522:	fa0a f306 	lsl.w	r3, sl, r6
    a526:	431d      	orrs	r5, r3
    a528:	e7e2      	b.n	a4f0 <z_log_init+0x3c>
	uint32_t mask = 0;
    a52a:	4605      	mov	r5, r0
				mask |= BIT(i);
    a52c:	f04f 0a01 	mov.w	sl, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a530:	4c02      	ldr	r4, [pc, #8]	; (a53c <z_log_init+0x88>)
    a532:	f8df 900c 	ldr.w	r9, [pc, #12]	; a540 <z_log_init+0x8c>
    a536:	e7dd      	b.n	a4f4 <z_log_init+0x40>
    a538:	200097c4 	.word	0x200097c4
    a53c:	0001b958 	.word	0x0001b958
    a540:	0001b968 	.word	0x0001b968

0000a544 <log_format_func_t_get>:
}
    a544:	4b01      	ldr	r3, [pc, #4]	; (a54c <log_format_func_t_get+0x8>)
    a546:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    a54a:	4770      	bx	lr
    a54c:	0001bb64 	.word	0x0001bb64

0000a550 <log_set_timestamp_func>:
{
    a550:	b508      	push	{r3, lr}
    a552:	4603      	mov	r3, r0
    a554:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    a556:	b12b      	cbz	r3, a564 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    a558:	4a04      	ldr	r2, [pc, #16]	; (a56c <log_set_timestamp_func+0x1c>)
    a55a:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    a55c:	f000 fc6c 	bl	ae38 <log_output_timestamp_freq_set>
	return 0;
    a560:	2000      	movs	r0, #0
}
    a562:	bd08      	pop	{r3, pc}
		return -EINVAL;
    a564:	f06f 0015 	mvn.w	r0, #21
    a568:	e7fb      	b.n	a562 <log_set_timestamp_func+0x12>
    a56a:	bf00      	nop
    a56c:	200082b4 	.word	0x200082b4

0000a570 <z_log_notify_backend_enabled>:
{
    a570:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    a572:	4c04      	ldr	r4, [pc, #16]	; (a584 <z_log_notify_backend_enabled+0x14>)
    a574:	7823      	ldrb	r3, [r4, #0]
    a576:	b913      	cbnz	r3, a57e <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
    a578:	4803      	ldr	r0, [pc, #12]	; (a588 <z_log_notify_backend_enabled+0x18>)
    a57a:	f00b f843 	bl	15604 <z_impl_k_sem_give>
	backend_attached = true;
    a57e:	2301      	movs	r3, #1
    a580:	7023      	strb	r3, [r4, #0]
}
    a582:	bd10      	pop	{r4, pc}
    a584:	20009be3 	.word	0x20009be3
    a588:	20008670 	.word	0x20008670

0000a58c <z_log_dropped>:
{
    a58c:	b510      	push	{r4, lr}
    a58e:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    a590:	4806      	ldr	r0, [pc, #24]	; (a5ac <z_log_dropped+0x20>)
    a592:	f00d f891 	bl	176b8 <atomic_inc>
	if (buffered) {
    a596:	b13c      	cbz	r4, a5a8 <z_log_dropped+0x1c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    a598:	4b05      	ldr	r3, [pc, #20]	; (a5b0 <z_log_dropped+0x24>)
    a59a:	e8d3 1fef 	ldaex	r1, [r3]
    a59e:	3901      	subs	r1, #1
    a5a0:	e8c3 1fe2 	stlex	r2, r1, [r3]
    a5a4:	2a00      	cmp	r2, #0
    a5a6:	d1f8      	bne.n	a59a <z_log_dropped+0xe>
}
    a5a8:	bd10      	pop	{r4, pc}
    a5aa:	bf00      	nop
    a5ac:	200097bc 	.word	0x200097bc
    a5b0:	200097c0 	.word	0x200097c0

0000a5b4 <z_log_dropped_read_and_clear>:
}
    a5b4:	2000      	movs	r0, #0
    a5b6:	4601      	mov	r1, r0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    a5b8:	4b03      	ldr	r3, [pc, #12]	; (a5c8 <z_log_dropped_read_and_clear+0x14>)
    a5ba:	e8d3 0fef 	ldaex	r0, [r3]
    a5be:	e8c3 1fe2 	stlex	r2, r1, [r3]
    a5c2:	2a00      	cmp	r2, #0
    a5c4:	d1f9      	bne.n	a5ba <z_log_dropped_read_and_clear+0x6>
    a5c6:	4770      	bx	lr
    a5c8:	200097bc 	.word	0x200097bc

0000a5cc <dropped_notify>:
{
    a5cc:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    a5ce:	f7ff fff1 	bl	a5b4 <z_log_dropped_read_and_clear>
    a5d2:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a5d4:	4c07      	ldr	r4, [pc, #28]	; (a5f4 <dropped_notify+0x28>)
    a5d6:	4e08      	ldr	r6, [pc, #32]	; (a5f8 <dropped_notify+0x2c>)
    a5d8:	42b4      	cmp	r4, r6
    a5da:	d300      	bcc.n	a5de <dropped_notify+0x12>
}
    a5dc:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    a5de:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    a5e0:	795b      	ldrb	r3, [r3, #5]
    a5e2:	b12b      	cbz	r3, a5f0 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
    a5e4:	6823      	ldr	r3, [r4, #0]
    a5e6:	685b      	ldr	r3, [r3, #4]
    a5e8:	b113      	cbz	r3, a5f0 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
    a5ea:	4629      	mov	r1, r5
    a5ec:	4620      	mov	r0, r4
    a5ee:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a5f0:	3410      	adds	r4, #16
    a5f2:	e7f1      	b.n	a5d8 <dropped_notify+0xc>
    a5f4:	0001b958 	.word	0x0001b958
    a5f8:	0001b968 	.word	0x0001b968

0000a5fc <z_log_msg_init>:
{
    a5fc:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    a5fe:	4c04      	ldr	r4, [pc, #16]	; (a610 <z_log_msg_init+0x14>)
    a600:	4904      	ldr	r1, [pc, #16]	; (a614 <z_log_msg_init+0x18>)
    a602:	4620      	mov	r0, r4
    a604:	f00c fd03 	bl	1700e <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    a608:	4b03      	ldr	r3, [pc, #12]	; (a618 <z_log_msg_init+0x1c>)
    a60a:	601c      	str	r4, [r3, #0]
}
    a60c:	bd10      	pop	{r4, pc}
    a60e:	bf00      	nop
    a610:	20008598 	.word	0x20008598
    a614:	0001bb50 	.word	0x0001bb50
    a618:	200097b4 	.word	0x200097b4

0000a61c <log_core_init>:
{
    a61c:	b508      	push	{r3, lr}
	panic_mode = false;
    a61e:	2300      	movs	r3, #0
    a620:	4a07      	ldr	r2, [pc, #28]	; (a640 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
    a622:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
    a626:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    a628:	4a06      	ldr	r2, [pc, #24]	; (a644 <log_core_init+0x28>)
		log_set_timestamp_func(default_get_timestamp,
    a62a:	4807      	ldr	r0, [pc, #28]	; (a648 <log_core_init+0x2c>)
	dropped_cnt = 0;
    a62c:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
    a62e:	4a07      	ldr	r2, [pc, #28]	; (a64c <log_core_init+0x30>)
    a630:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    a632:	f7ff ff8d 	bl	a550 <log_set_timestamp_func>
}
    a636:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    a63a:	f7ff bfdf 	b.w	a5fc <z_log_msg_init>
    a63e:	bf00      	nop
    a640:	20009be4 	.word	0x20009be4
    a644:	200097bc 	.word	0x200097bc
    a648:	000176b5 	.word	0x000176b5
    a64c:	200097c0 	.word	0x200097c0

0000a650 <z_log_msg_alloc>:
{
    a650:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    a652:	2200      	movs	r2, #0
    a654:	2300      	movs	r3, #0
    a656:	4801      	ldr	r0, [pc, #4]	; (a65c <z_log_msg_alloc+0xc>)
    a658:	f00c bcfa 	b.w	17050 <mpsc_pbuf_alloc>
    a65c:	20008598 	.word	0x20008598

0000a660 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    a660:	4801      	ldr	r0, [pc, #4]	; (a668 <z_log_msg_local_claim+0x8>)
    a662:	f00c bd93 	b.w	1718c <mpsc_pbuf_claim>
    a666:	bf00      	nop
    a668:	20008598 	.word	0x20008598

0000a66c <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    a66c:	4b02      	ldr	r3, [pc, #8]	; (a678 <z_log_msg_free+0xc>)
{
    a66e:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    a670:	6818      	ldr	r0, [r3, #0]
    a672:	f00c bddd 	b.w	17230 <mpsc_pbuf_free>
    a676:	bf00      	nop
    a678:	200097b4 	.word	0x200097b4

0000a67c <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    a67c:	4801      	ldr	r0, [pc, #4]	; (a684 <z_log_msg_pending+0x8>)
    a67e:	f00c be13 	b.w	172a8 <mpsc_pbuf_is_pending>
    a682:	bf00      	nop
    a684:	20008598 	.word	0x20008598

0000a688 <z_impl_log_process>:
{
    a688:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
    a68a:	4b26      	ldr	r3, [pc, #152]	; (a724 <z_impl_log_process+0x9c>)
    a68c:	7818      	ldrb	r0, [r3, #0]
    a68e:	2800      	cmp	r0, #0
    a690:	d047      	beq.n	a722 <z_impl_log_process+0x9a>
	return z_log_msg_local_claim();
    a692:	f7ff ffe5 	bl	a660 <z_log_msg_local_claim>
	if (msg) {
    a696:	4605      	mov	r5, r0
    a698:	b170      	cbz	r0, a6b8 <z_impl_log_process+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    a69a:	4b23      	ldr	r3, [pc, #140]	; (a728 <z_impl_log_process+0xa0>)
    a69c:	e8d3 1fef 	ldaex	r1, [r3]
    a6a0:	3901      	subs	r1, #1
    a6a2:	e8c3 1fe2 	stlex	r2, r1, [r3]
    a6a6:	2a00      	cmp	r2, #0
    a6a8:	d1f8      	bne.n	a69c <z_impl_log_process+0x14>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a6aa:	4c20      	ldr	r4, [pc, #128]	; (a72c <z_impl_log_process+0xa4>)
    a6ac:	4e20      	ldr	r6, [pc, #128]	; (a730 <z_impl_log_process+0xa8>)
    a6ae:	42b4      	cmp	r4, r6
    a6b0:	d32d      	bcc.n	a70e <z_impl_log_process+0x86>
		z_log_msg_free(msg);
    a6b2:	4628      	mov	r0, r5
    a6b4:	f7ff ffda 	bl	a66c <z_log_msg_free>
	return dropped_cnt > 0;
    a6b8:	4b1e      	ldr	r3, [pc, #120]	; (a734 <z_impl_log_process+0xac>)
    a6ba:	4c1f      	ldr	r4, [pc, #124]	; (a738 <z_impl_log_process+0xb0>)
		if ((dropped_pend || unordered_pend) &&
    a6bc:	681b      	ldr	r3, [r3, #0]
    a6be:	2b00      	cmp	r3, #0
    a6c0:	dd19      	ble.n	a6f6 <z_impl_log_process+0x6e>
	return z_impl_k_uptime_ticks();
    a6c2:	f010 fccc 	bl	1b05e <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    a6c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a6ca:	fba0 0302 	umull	r0, r3, r0, r2
    a6ce:	fb02 3101 	mla	r1, r2, r1, r3
    a6d2:	0bc3      	lsrs	r3, r0, #15
    a6d4:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    a6d8:	e9d4 2000 	ldrd	r2, r0, [r4]
    a6dc:	1a9b      	subs	r3, r3, r2
		if ((dropped_pend || unordered_pend) &&
    a6de:	f240 32e9 	movw	r2, #1001	; 0x3e9
    a6e2:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    a6e6:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    a6ea:	4293      	cmp	r3, r2
    a6ec:	f171 0100 	sbcs.w	r1, r1, #0
    a6f0:	d301      	bcc.n	a6f6 <z_impl_log_process+0x6e>
				dropped_notify();
    a6f2:	f7ff ff6b 	bl	a5cc <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    a6f6:	e9d4 3200 	ldrd	r3, r2, [r4]
    a6fa:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    a6fe:	f142 0200 	adc.w	r2, r2, #0
    a702:	e9c4 3200 	strd	r3, r2, [r4]
}
    a706:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
    a70a:	f7ff bfb7 	b.w	a67c <z_log_msg_pending>
	return backend->cb->active;
    a70e:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    a710:	795b      	ldrb	r3, [r3, #5]
    a712:	b123      	cbz	r3, a71e <z_impl_log_process+0x96>
	backend->api->process(backend, msg);
    a714:	6823      	ldr	r3, [r4, #0]
    a716:	4629      	mov	r1, r5
    a718:	4620      	mov	r0, r4
    a71a:	681b      	ldr	r3, [r3, #0]
    a71c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a71e:	3410      	adds	r4, #16
    a720:	e7c5      	b.n	a6ae <z_impl_log_process+0x26>
}
    a722:	bd70      	pop	{r4, r5, r6, pc}
    a724:	20009be3 	.word	0x20009be3
    a728:	200097c0 	.word	0x200097c0
    a72c:	0001b958 	.word	0x0001b958
    a730:	0001b968 	.word	0x0001b968
    a734:	200097bc 	.word	0x200097bc
    a738:	20009078 	.word	0x20009078

0000a73c <z_impl_log_panic>:
{
    a73c:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    a73e:	4d0d      	ldr	r5, [pc, #52]	; (a774 <z_impl_log_panic+0x38>)
    a740:	7829      	ldrb	r1, [r5, #0]
    a742:	b961      	cbnz	r1, a75e <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
    a744:	2001      	movs	r0, #1
    a746:	f7ff feb5 	bl	a4b4 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a74a:	4c0b      	ldr	r4, [pc, #44]	; (a778 <z_impl_log_panic+0x3c>)
    a74c:	4e0b      	ldr	r6, [pc, #44]	; (a77c <z_impl_log_panic+0x40>)
    a74e:	42b4      	cmp	r4, r6
    a750:	d306      	bcc.n	a760 <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    a752:	f7ff ff99 	bl	a688 <z_impl_log_process>
		while (log_process() == true) {
    a756:	2800      	cmp	r0, #0
    a758:	d1fb      	bne.n	a752 <z_impl_log_panic+0x16>
	panic_mode = true;
    a75a:	2301      	movs	r3, #1
    a75c:	702b      	strb	r3, [r5, #0]
}
    a75e:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
    a760:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    a762:	795b      	ldrb	r3, [r3, #5]
    a764:	b11b      	cbz	r3, a76e <z_impl_log_panic+0x32>
	backend->api->panic(backend);
    a766:	6823      	ldr	r3, [r4, #0]
    a768:	4620      	mov	r0, r4
    a76a:	689b      	ldr	r3, [r3, #8]
    a76c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a76e:	3410      	adds	r4, #16
    a770:	e7ed      	b.n	a74e <z_impl_log_panic+0x12>
    a772:	bf00      	nop
    a774:	20009be4 	.word	0x20009be4
    a778:	0001b958 	.word	0x0001b958
    a77c:	0001b968 	.word	0x0001b968

0000a780 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
    a780:	2100      	movs	r1, #0
{
    a782:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
    a786:	4608      	mov	r0, r1
    a788:	f7ff fe94 	bl	a4b4 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    a78c:	4604      	mov	r4, r0
    a78e:	b348      	cbz	r0, a7e4 <log_process_thread_func+0x64>
    a790:	f240 6867 	movw	r8, #1639	; 0x667
    a794:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    a798:	f00b fc6c 	bl	16074 <z_impl_z_current_get>
	proc_tid = process_tid;
    a79c:	4b1a      	ldr	r3, [pc, #104]	; (a808 <log_process_thread_func+0x88>)
    a79e:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    a7a0:	b130      	cbz	r0, a7b0 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    a7a2:	4b1a      	ldr	r3, [pc, #104]	; (a80c <log_process_thread_func+0x8c>)
	    process_tid &&
    a7a4:	681b      	ldr	r3, [r3, #0]
    a7a6:	2b09      	cmp	r3, #9
    a7a8:	dd02      	ble.n	a7b0 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
    a7aa:	4819      	ldr	r0, [pc, #100]	; (a810 <log_process_thread_func+0x90>)
    a7ac:	f00a ff2a 	bl	15604 <z_impl_k_sem_give>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    a7b0:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a7b2:	4f18      	ldr	r7, [pc, #96]	; (a814 <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
    a7b4:	f8df a058 	ldr.w	sl, [pc, #88]	; a810 <log_process_thread_func+0x90>
		if (activate_mask) {
    a7b8:	b144      	cbz	r4, a7cc <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
    a7ba:	4620      	mov	r0, r4
    a7bc:	f7ff fe14 	bl	a3e8 <activate_foreach_backend>
			if (!activate_mask) {
    a7c0:	4604      	mov	r4, r0
    a7c2:	b918      	cbnz	r0, a7cc <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
    a7c4:	f04f 38ff 	mov.w	r8, #4294967295
    a7c8:	f04f 39ff 	mov.w	r9, #4294967295
    a7cc:	f7ff ff5c 	bl	a688 <z_impl_log_process>
		if (log_process() == false) {
    a7d0:	4606      	mov	r6, r0
    a7d2:	b928      	cbnz	r0, a7e0 <log_process_thread_func+0x60>
			if (processed_any) {
    a7d4:	b9b5      	cbnz	r5, a804 <log_process_thread_func+0x84>
    a7d6:	4642      	mov	r2, r8
    a7d8:	464b      	mov	r3, r9
    a7da:	4650      	mov	r0, sl
    a7dc:	f00a ff38 	bl	15650 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    a7e0:	4635      	mov	r5, r6
    a7e2:	e7e9      	b.n	a7b8 <log_process_thread_func+0x38>
    a7e4:	f04f 38ff 	mov.w	r8, #4294967295
    a7e8:	f04f 39ff 	mov.w	r9, #4294967295
    a7ec:	e7d4      	b.n	a798 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    a7ee:	682b      	ldr	r3, [r5, #0]
    a7f0:	699b      	ldr	r3, [r3, #24]
    a7f2:	b11b      	cbz	r3, a7fc <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
    a7f4:	2200      	movs	r2, #0
    a7f6:	4628      	mov	r0, r5
    a7f8:	4611      	mov	r1, r2
    a7fa:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    a7fc:	3510      	adds	r5, #16
    a7fe:	42bd      	cmp	r5, r7
    a800:	d3f5      	bcc.n	a7ee <log_process_thread_func+0x6e>
    a802:	e7e8      	b.n	a7d6 <log_process_thread_func+0x56>
    a804:	4d04      	ldr	r5, [pc, #16]	; (a818 <log_process_thread_func+0x98>)
    a806:	e7fa      	b.n	a7fe <log_process_thread_func+0x7e>
    a808:	200097b8 	.word	0x200097b8
    a80c:	200097c0 	.word	0x200097c0
    a810:	20008670 	.word	0x20008670
    a814:	0001b968 	.word	0x0001b968
    a818:	0001b958 	.word	0x0001b958

0000a81c <z_log_msg_post_finalize>:
{
    a81c:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    a81e:	4818      	ldr	r0, [pc, #96]	; (a880 <z_log_msg_post_finalize+0x64>)
    a820:	f00c ff4a 	bl	176b8 <atomic_inc>
	if (panic_mode) {
    a824:	4b17      	ldr	r3, [pc, #92]	; (a884 <z_log_msg_post_finalize+0x68>)
    a826:	781b      	ldrb	r3, [r3, #0]
    a828:	b17b      	cbz	r3, a84a <z_log_msg_post_finalize+0x2e>
	__asm__ volatile(
    a82a:	f04f 0320 	mov.w	r3, #32
    a82e:	f3ef 8411 	mrs	r4, BASEPRI
    a832:	f383 8812 	msr	BASEPRI_MAX, r3
    a836:	f3bf 8f6f 	isb	sy
    a83a:	f7ff ff25 	bl	a688 <z_impl_log_process>
	__asm__ volatile(
    a83e:	f384 8811 	msr	BASEPRI, r4
    a842:	f3bf 8f6f 	isb	sy
}
    a846:	b002      	add	sp, #8
    a848:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    a84a:	4b0f      	ldr	r3, [pc, #60]	; (a888 <z_log_msg_post_finalize+0x6c>)
    a84c:	681b      	ldr	r3, [r3, #0]
    a84e:	2b00      	cmp	r3, #0
    a850:	d0f9      	beq.n	a846 <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
    a852:	b950      	cbnz	r0, a86a <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
    a854:	2200      	movs	r2, #0
    a856:	2300      	movs	r3, #0
    a858:	480c      	ldr	r0, [pc, #48]	; (a88c <z_log_msg_post_finalize+0x70>)
    a85a:	e9cd 2300 	strd	r2, r3, [sp]
    a85e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    a862:	2300      	movs	r3, #0
    a864:	f00b fe4a 	bl	164fc <z_impl_k_timer_start>
    a868:	e7ed      	b.n	a846 <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    a86a:	280a      	cmp	r0, #10
    a86c:	d1eb      	bne.n	a846 <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
    a86e:	4807      	ldr	r0, [pc, #28]	; (a88c <z_log_msg_post_finalize+0x70>)
    a870:	f010 fc29 	bl	1b0c6 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    a874:	4806      	ldr	r0, [pc, #24]	; (a890 <z_log_msg_post_finalize+0x74>)
}
    a876:	b002      	add	sp, #8
    a878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a87c:	f00a bec2 	b.w	15604 <z_impl_k_sem_give>
    a880:	200097c0 	.word	0x200097c0
    a884:	20009be4 	.word	0x20009be4
    a888:	200097b8 	.word	0x200097b8
    a88c:	20009080 	.word	0x20009080
    a890:	20008670 	.word	0x20008670

0000a894 <z_log_msg_commit>:
{
    a894:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    a896:	4b06      	ldr	r3, [pc, #24]	; (a8b0 <z_log_msg_commit+0x1c>)
{
    a898:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    a89a:	681b      	ldr	r3, [r3, #0]
    a89c:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    a89e:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    a8a0:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    a8a2:	4804      	ldr	r0, [pc, #16]	; (a8b4 <z_log_msg_commit+0x20>)
    a8a4:	f00c fc52 	bl	1714c <mpsc_pbuf_commit>
}
    a8a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    a8ac:	f7ff bfb6 	b.w	a81c <z_log_msg_post_finalize>
    a8b0:	200082b4 	.word	0x200082b4
    a8b4:	20008598 	.word	0x20008598

0000a8b8 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    a8b8:	4a04      	ldr	r2, [pc, #16]	; (a8cc <log_source_name_get+0x14>)
    a8ba:	4b05      	ldr	r3, [pc, #20]	; (a8d0 <log_source_name_get+0x18>)
    a8bc:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    a8be:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    a8c2:	bf34      	ite	cc
    a8c4:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    a8c8:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    a8ca:	4770      	bx	lr
    a8cc:	0001b848 	.word	0x0001b848
    a8d0:	0001b958 	.word	0x0001b958

0000a8d4 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    a8d4:	4b08      	ldr	r3, [pc, #32]	; (a8f8 <log_backend_enable+0x24>)
{
    a8d6:	b410      	push	{r4}
	id += backend - log_backend_get(0);
    a8d8:	1ac3      	subs	r3, r0, r3
	backend->cb->id = id;
    a8da:	6844      	ldr	r4, [r0, #4]
    a8dc:	111b      	asrs	r3, r3, #4
    a8de:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    a8e0:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    a8e2:	6843      	ldr	r3, [r0, #4]
    a8e4:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
    a8e6:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    a8e8:	6843      	ldr	r3, [r0, #4]
    a8ea:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    a8ec:	6843      	ldr	r3, [r0, #4]
    a8ee:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    a8f0:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
    a8f2:	f7ff be3d 	b.w	a570 <z_log_notify_backend_enabled>
    a8f6:	bf00      	nop
    a8f8:	0001b958 	.word	0x0001b958

0000a8fc <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    a8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a900:	b08f      	sub	sp, #60	; 0x3c
    a902:	f3c1 284a 	ubfx	r8, r1, #9, #11
    a906:	af04      	add	r7, sp, #16
    a908:	460d      	mov	r5, r1
    a90a:	4691      	mov	r9, r2
    a90c:	60b8      	str	r0, [r7, #8]
    a90e:	607b      	str	r3, [r7, #4]

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
    a910:	0d0c      	lsrs	r4, r1, #20
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    a912:	f1b8 0f00 	cmp.w	r8, #0
    a916:	d063      	beq.n	a9e0 <z_impl_z_log_msg_static_create+0xe4>
	struct z_cbprintf_buf_desc buf_desc = {
    a918:	2600      	movs	r6, #0
	return cbprintf_package_convert(in_packaged, in_len,
    a91a:	f04f 0b04 	mov.w	fp, #4
    a91e:	f04f 0a0a 	mov.w	sl, #10
    a922:	f107 0314 	add.w	r3, r7, #20
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    a926:	f8c7 800c 	str.w	r8, [r7, #12]
	struct z_cbprintf_buf_desc buf_desc = {
    a92a:	e9c7 6607 	strd	r6, r6, [r7, #28]
    a92e:	627e      	str	r6, [r7, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
    a930:	9301      	str	r3, [sp, #4]
    a932:	f8cd b008 	str.w	fp, [sp, #8]
    a936:	f8cd a000 	str.w	sl, [sp]
    a93a:	f107 031c 	add.w	r3, r7, #28
    a93e:	4632      	mov	r2, r6
    a940:	4648      	mov	r0, r9
    a942:	68f9      	ldr	r1, [r7, #12]
    a944:	f7fe f9b2 	bl	8cac <cbprintf_package_convert>
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
    a948:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    a94c:	4603      	mov	r3, r0
    a94e:	d31c      	bcc.n	a98a <z_impl_z_log_msg_static_create+0x8e>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
    a950:	466c      	mov	r4, sp
    a952:	b08a      	sub	sp, #40	; 0x28
    a954:	f8d9 1004 	ldr.w	r1, [r9, #4]
    a958:	ab04      	add	r3, sp, #16
    a95a:	4826      	ldr	r0, [pc, #152]	; (a9f4 <z_impl_z_log_msg_static_create+0xf8>)
    a95c:	461a      	mov	r2, r3
    a95e:	e9c3 0105 	strd	r0, r1, [r3, #20]
    a962:	f240 71ff 	movw	r1, #2047	; 0x7ff
    a966:	61d9      	str	r1, [r3, #28]
    a968:	f44f 7100 	mov.w	r1, #512	; 0x200
    a96c:	8419      	strh	r1, [r3, #32]
    a96e:	4b22      	ldr	r3, [pc, #136]	; (a9f8 <z_impl_z_log_msg_static_create+0xfc>)
    a970:	f842 3f10 	str.w	r3, [r2, #16]!
    a974:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    a978:	4633      	mov	r3, r6
    a97a:	4820      	ldr	r0, [pc, #128]	; (a9fc <z_impl_z_log_msg_static_create+0x100>)
    a97c:	f7ff ffbe 	bl	a8fc <z_impl_z_log_msg_static_create>
    a980:	46a5      	mov	sp, r4
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
}
    a982:	372c      	adds	r7, #44	; 0x2c
    a984:	46bd      	mov	sp, r7
    a986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_desc.package_len = len;
    a98a:	f3c0 080a 	ubfx	r8, r0, #0, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    a98e:	f104 0017 	add.w	r0, r4, #23
    a992:	4418      	add	r0, r3
    a994:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    a998:	0880      	lsrs	r0, r0, #2
    a99a:	603b      	str	r3, [r7, #0]
    a99c:	f7ff fe58 	bl	a650 <z_log_msg_alloc>
    a9a0:	f368 2553 	bfi	r5, r8, #9, #11
		if (msg) {
    a9a4:	4604      	mov	r4, r0
    a9a6:	b190      	cbz	r0, a9ce <z_impl_z_log_msg_static_create+0xd2>
	struct z_cbprintf_buf_desc buf_desc = {
    a9a8:	683b      	ldr	r3, [r7, #0]
						    msg->data, out_desc.package_len,
    a9aa:	f100 0110 	add.w	r1, r0, #16
    a9ae:	e9c7 3608 	strd	r3, r6, [r7, #32]
	return cbprintf_package_convert(in_packaged, in_len,
    a9b2:	f107 0314 	add.w	r3, r7, #20
	struct z_cbprintf_buf_desc buf_desc = {
    a9b6:	61f9      	str	r1, [r7, #28]
	return cbprintf_package_convert(in_packaged, in_len,
    a9b8:	e9cd a300 	strd	sl, r3, [sp]
    a9bc:	f8cd b008 	str.w	fp, [sp, #8]
    a9c0:	4648      	mov	r0, r9
    a9c2:	4a0f      	ldr	r2, [pc, #60]	; (aa00 <z_impl_z_log_msg_static_create+0x104>)
    a9c4:	68f9      	ldr	r1, [r7, #12]
    a9c6:	f107 031c 	add.w	r3, r7, #28
    a9ca:	f7fe f96f 	bl	8cac <cbprintf_package_convert>
	z_log_msg_finalize(msg, source, out_desc, data);
    a9ce:	f368 2553 	bfi	r5, r8, #9, #11
    a9d2:	462a      	mov	r2, r5
    a9d4:	4620      	mov	r0, r4
    a9d6:	687b      	ldr	r3, [r7, #4]
    a9d8:	68b9      	ldr	r1, [r7, #8]
    a9da:	f00c fe9f 	bl	1771c <z_log_msg_finalize>
    a9de:	e7d0      	b.n	a982 <z_impl_z_log_msg_static_create+0x86>
    a9e0:	f104 0017 	add.w	r0, r4, #23
    a9e4:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    a9e8:	0880      	lsrs	r0, r0, #2
    a9ea:	f7ff fe31 	bl	a650 <z_log_msg_alloc>
    a9ee:	4604      	mov	r4, r0
    a9f0:	e7ed      	b.n	a9ce <z_impl_z_log_msg_static_create+0xd2>
    a9f2:	bf00      	nop
    a9f4:	0001c5f5 	.word	0x0001c5f5
    a9f8:	01000004 	.word	0x01000004
    a9fc:	0001b8f0 	.word	0x0001b8f0
    aa00:	000176f1 	.word	0x000176f1

0000aa04 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    aa04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aa08:	b087      	sub	sp, #28
    aa0a:	4604      	mov	r4, r0
    aa0c:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
    aa10:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
    aa14:	460f      	mov	r7, r1
    aa16:	4693      	mov	fp, r2
    aa18:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
    aa1a:	b3a6      	cbz	r6, aa86 <z_impl_z_log_msg_runtime_vcreate+0x82>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    aa1c:	2110      	movs	r1, #16
    aa1e:	4633      	mov	r3, r6
    aa20:	4652      	mov	r2, sl
    aa22:	2000      	movs	r0, #0
    aa24:	f8cd 9000 	str.w	r9, [sp]
		va_copy(ap2, ap);
    aa28:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    aa2c:	f7fd ff6a 	bl	8904 <cbvprintf_package>
    aa30:	4601      	mov	r1, r0
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    aa32:	f105 0017 	add.w	r0, r5, #23
    aa36:	4408      	add	r0, r1
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
    aa38:	4b14      	ldr	r3, [pc, #80]	; (aa8c <z_impl_z_log_msg_runtime_vcreate+0x88>)
    aa3a:	f004 0407 	and.w	r4, r4, #7
    aa3e:	f00b 0b07 	and.w	fp, fp, #7
    aa42:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    aa44:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
    aa48:	ea03 2341 	and.w	r3, r3, r1, lsl #9
    aa4c:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
    aa50:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
    aa52:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    aa54:	9103      	str	r1, [sp, #12]
		msg = z_log_msg_alloc(msg_wlen);
    aa56:	f7ff fdfb 	bl	a650 <z_log_msg_alloc>
	struct log_msg_desc desc =
    aa5a:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
    aa5e:	4605      	mov	r5, r0
    aa60:	b140      	cbz	r0, aa74 <z_impl_z_log_msg_runtime_vcreate+0x70>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
    aa62:	b13e      	cbz	r6, aa74 <z_impl_z_log_msg_runtime_vcreate+0x70>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    aa64:	4633      	mov	r3, r6
    aa66:	4652      	mov	r2, sl
    aa68:	9903      	ldr	r1, [sp, #12]
    aa6a:	f8cd 9000 	str.w	r9, [sp]
    aa6e:	3010      	adds	r0, #16
    aa70:	f7fd ff48 	bl	8904 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    aa74:	4643      	mov	r3, r8
    aa76:	4622      	mov	r2, r4
    aa78:	4639      	mov	r1, r7
    aa7a:	4628      	mov	r0, r5
	}
}
    aa7c:	b007      	add	sp, #28
    aa7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
    aa82:	f00c be4b 	b.w	1771c <z_log_msg_finalize>
		plen = 0;
    aa86:	4631      	mov	r1, r6
    aa88:	e7d3      	b.n	aa32 <z_impl_z_log_msg_runtime_vcreate+0x2e>
    aa8a:	bf00      	nop
    aa8c:	000ffe00 	.word	0x000ffe00

0000aa90 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    aa90:	b40e      	push	{r1, r2, r3}
    aa92:	b503      	push	{r0, r1, lr}
    aa94:	ab03      	add	r3, sp, #12
    aa96:	f853 2b04 	ldr.w	r2, [r3], #4
    aa9a:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    aa9c:	4804      	ldr	r0, [pc, #16]	; (aab0 <print_formatted+0x20>)
	va_start(args, fmt);
    aa9e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    aaa0:	f00c fe62 	bl	17768 <cbvprintf>
	va_end(args);

	return length;
}
    aaa4:	b002      	add	sp, #8
    aaa6:	f85d eb04 	ldr.w	lr, [sp], #4
    aaaa:	b003      	add	sp, #12
    aaac:	4770      	bx	lr
    aaae:	bf00      	nop
    aab0:	00017791 	.word	0x00017791

0000aab4 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    aab4:	06ca      	lsls	r2, r1, #27
    aab6:	d405      	bmi.n	aac4 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    aab8:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    aaba:	bf4c      	ite	mi
    aabc:	4902      	ldrmi	r1, [pc, #8]	; (aac8 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    aabe:	4903      	ldrpl	r1, [pc, #12]	; (aacc <newline_print+0x18>)
    aac0:	f7ff bfe6 	b.w	aa90 <print_formatted>
	}
}
    aac4:	4770      	bx	lr
    aac6:	bf00      	nop
    aac8:	0001e613 	.word	0x0001e613
    aacc:	0001e612 	.word	0x0001e612

0000aad0 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    aad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aad4:	b089      	sub	sp, #36	; 0x24
    aad6:	469b      	mov	fp, r3
    aad8:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
    aadc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    aae0:	4604      	mov	r4, r0
    aae2:	9304      	str	r3, [sp, #16]
    aae4:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
    aae8:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    aaea:	9b04      	ldr	r3, [sp, #16]
{
    aaec:	460d      	mov	r5, r1
    aaee:	9206      	str	r2, [sp, #24]
	if (!raw_string) {
    aaf0:	2b00      	cmp	r3, #0
    aaf2:	f000 8087 	beq.w	ac04 <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    aaf6:	f006 0308 	and.w	r3, r6, #8
    aafa:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    aafc:	f00c fdf6 	bl	176ec <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    ab00:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
    ab04:	4602      	mov	r2, r0
    ab06:	2800      	cmp	r0, #0
    ab08:	d04b      	beq.n	aba2 <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
    ab0a:	4620      	mov	r0, r4
    ab0c:	4985      	ldr	r1, [pc, #532]	; (ad24 <log_output_process+0x254>)
    ab0e:	f7ff ffbf 	bl	aa90 <print_formatted>
    ab12:	4680      	mov	r8, r0
	if (stamp) {
    ab14:	f1ba 0f00 	cmp.w	sl, #0
    ab18:	d008      	beq.n	ab2c <log_output_process+0x5c>
	if (!format) {
    ab1a:	f016 0f44 	tst.w	r6, #68	; 0x44
    ab1e:	d142      	bne.n	aba6 <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
    ab20:	462a      	mov	r2, r5
    ab22:	4620      	mov	r0, r4
    ab24:	4980      	ldr	r1, [pc, #512]	; (ad28 <log_output_process+0x258>)
    ab26:	f7ff ffb3 	bl	aa90 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    ab2a:	4480      	add	r8, r0
	if (color) {
    ab2c:	f006 0301 	and.w	r3, r6, #1
    ab30:	b15b      	cbz	r3, ab4a <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
    ab32:	4b7e      	ldr	r3, [pc, #504]	; (ad2c <log_output_process+0x25c>)
    ab34:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
    ab36:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
    ab38:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
    ab3c:	4b7c      	ldr	r3, [pc, #496]	; (ad30 <log_output_process+0x260>)
    ab3e:	497d      	ldr	r1, [pc, #500]	; (ad34 <log_output_process+0x264>)
    ab40:	2a00      	cmp	r2, #0
    ab42:	bf08      	it	eq
    ab44:	461a      	moveq	r2, r3
    ab46:	f7ff ffa3 	bl	aa90 <print_formatted>
	if (level_on) {
    ab4a:	f006 0308 	and.w	r3, r6, #8
    ab4e:	2b00      	cmp	r3, #0
    ab50:	d055      	beq.n	abfe <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
    ab52:	4b79      	ldr	r3, [pc, #484]	; (ad38 <log_output_process+0x268>)
    ab54:	9a04      	ldr	r2, [sp, #16]
    ab56:	4620      	mov	r0, r4
    ab58:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    ab5c:	4977      	ldr	r1, [pc, #476]	; (ad3c <log_output_process+0x26c>)
    ab5e:	f7ff ff97 	bl	aa90 <print_formatted>
    ab62:	4605      	mov	r5, r0
	if (domain) {
    ab64:	9b06      	ldr	r3, [sp, #24]
    ab66:	b12b      	cbz	r3, ab74 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
    ab68:	461a      	mov	r2, r3
    ab6a:	4620      	mov	r0, r4
    ab6c:	4974      	ldr	r1, [pc, #464]	; (ad40 <log_output_process+0x270>)
    ab6e:	f7ff ff8f 	bl	aa90 <print_formatted>
    ab72:	4405      	add	r5, r0
	if (source) {
    ab74:	f1bb 0f00 	cmp.w	fp, #0
    ab78:	d005      	beq.n	ab86 <log_output_process+0xb6>
		total += print_formatted(output,
    ab7a:	465a      	mov	r2, fp
    ab7c:	4620      	mov	r0, r4
    ab7e:	4971      	ldr	r1, [pc, #452]	; (ad44 <log_output_process+0x274>)
    ab80:	f7ff ff86 	bl	aa90 <print_formatted>
    ab84:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    ab86:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    ab88:	f1b9 0f00 	cmp.w	r9, #0
    ab8c:	d149      	bne.n	ac22 <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    ab8e:	2f00      	cmp	r7, #0
    ab90:	d14f      	bne.n	ac32 <log_output_process+0x162>
	if (color) {
    ab92:	07f3      	lsls	r3, r6, #31
    ab94:	f100 80c0 	bmi.w	ad18 <log_output_process+0x248>
	newline_print(output, flags);
    ab98:	4631      	mov	r1, r6
    ab9a:	4620      	mov	r0, r4
    ab9c:	f7ff ff8a 	bl	aab4 <newline_print>
}
    aba0:	e0b4      	b.n	ad0c <log_output_process+0x23c>
	uint32_t length = 0U;
    aba2:	4680      	mov	r8, r0
    aba4:	e7b6      	b.n	ab14 <log_output_process+0x44>
	} else if (freq != 0U) {
    aba6:	4b68      	ldr	r3, [pc, #416]	; (ad48 <log_output_process+0x278>)
    aba8:	6818      	ldr	r0, [r3, #0]
    abaa:	2800      	cmp	r0, #0
    abac:	d0bd      	beq.n	ab2a <log_output_process+0x5a>
		timestamp /= timestamp_div;
    abae:	4b67      	ldr	r3, [pc, #412]	; (ad4c <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
    abb0:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
    abb4:	681b      	ldr	r3, [r3, #0]
    abb6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    abba:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    abbe:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    abc2:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
    abc6:	fb0e f505 	mul.w	r5, lr, r5
    abca:	fbb3 faf2 	udiv	sl, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    abce:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
    abd2:	213c      	movs	r1, #60	; 0x3c
    abd4:	fb02 321a 	mls	r2, r2, sl, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    abd8:	fb00 551c 	mls	r5, r0, ip, r5
		mins = seconds / 60U;
    abdc:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    abe0:	fb0e f505 	mul.w	r5, lr, r5
    abe4:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    abe8:	fb01 2213 	mls	r2, r1, r3, r2
    abec:	4620      	mov	r0, r4
    abee:	9200      	str	r2, [sp, #0]
    abf0:	e9cd c501 	strd	ip, r5, [sp, #4]
    abf4:	4652      	mov	r2, sl
    abf6:	4956      	ldr	r1, [pc, #344]	; (ad50 <log_output_process+0x280>)
    abf8:	f7ff ff4a 	bl	aa90 <print_formatted>
    abfc:	e795      	b.n	ab2a <log_output_process+0x5a>
	int total = 0;
    abfe:	f006 0508 	and.w	r5, r6, #8
    ac02:	e7af      	b.n	ab64 <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    ac04:	f1bb 0f01 	cmp.w	fp, #1
    ac08:	d106      	bne.n	ac18 <log_output_process+0x148>
	if (package) {
    ac0a:	f1b9 0f00 	cmp.w	r9, #0
    ac0e:	d164      	bne.n	acda <log_output_process+0x20a>
	if (data_len) {
    ac10:	2f00      	cmp	r7, #0
    ac12:	d07b      	beq.n	ad0c <log_output_process+0x23c>
		prefix_offset = 0;
    ac14:	2500      	movs	r5, #0
    ac16:	e00c      	b.n	ac32 <log_output_process+0x162>
	if (package) {
    ac18:	f1b9 0f00 	cmp.w	r9, #0
    ac1c:	d0f8      	beq.n	ac10 <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    ac1e:	484d      	ldr	r0, [pc, #308]	; (ad54 <log_output_process+0x284>)
    ac20:	e05c      	b.n	acdc <log_output_process+0x20c>
		cb = out_func;
    ac22:	484d      	ldr	r0, [pc, #308]	; (ad58 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    ac24:	464b      	mov	r3, r9
    ac26:	4622      	mov	r2, r4
    ac28:	494c      	ldr	r1, [pc, #304]	; (ad5c <log_output_process+0x28c>)
    ac2a:	f00b fd4c 	bl	166c6 <cbpprintf_external>
	if (data_len) {
    ac2e:	2f00      	cmp	r7, #0
    ac30:	d068      	beq.n	ad04 <log_output_process+0x234>
		print_formatted(output, " ");
    ac32:	f8df 912c 	ldr.w	r9, [pc, #300]	; ad60 <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
    ac36:	f8df a12c 	ldr.w	sl, [pc, #300]	; ad64 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    ac3a:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    ac3c:	4631      	mov	r1, r6
    ac3e:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    ac40:	46b8      	mov	r8, r7
	for (int i = 0; i < prefix_offset; i++) {
    ac42:	f04f 0b00 	mov.w	fp, #0
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    ac46:	bf28      	it	cs
    ac48:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
    ac4c:	f7ff ff32 	bl	aab4 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    ac50:	455d      	cmp	r5, fp
    ac52:	dc45      	bgt.n	ace0 <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
    ac54:	9b05      	ldr	r3, [sp, #20]
    ac56:	4651      	mov	r1, sl
    ac58:	4620      	mov	r0, r4
    ac5a:	781a      	ldrb	r2, [r3, #0]
    ac5c:	f7ff ff18 	bl	aa90 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    ac60:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
    ac64:	f01b 0f07 	tst.w	fp, #7
    ac68:	d103      	bne.n	ac72 <log_output_process+0x1a2>
			print_formatted(output, " ");
    ac6a:	4649      	mov	r1, r9
    ac6c:	4620      	mov	r0, r4
    ac6e:	f7ff ff0f 	bl	aa90 <print_formatted>
		if (i < length) {
    ac72:	45d8      	cmp	r8, fp
    ac74:	d93b      	bls.n	acee <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
    ac76:	9b05      	ldr	r3, [sp, #20]
    ac78:	4651      	mov	r1, sl
    ac7a:	4620      	mov	r0, r4
    ac7c:	f813 200b 	ldrb.w	r2, [r3, fp]
    ac80:	f7ff ff06 	bl	aa90 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    ac84:	f10b 0b01 	add.w	fp, fp, #1
    ac88:	f1bb 0f10 	cmp.w	fp, #16
    ac8c:	d1ea      	bne.n	ac64 <log_output_process+0x194>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    ac8e:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
    ac92:	4620      	mov	r0, r4
    ac94:	4934      	ldr	r1, [pc, #208]	; (ad68 <log_output_process+0x298>)
    ac96:	f7ff fefb 	bl	aa90 <print_formatted>
		if (i < length) {
    ac9a:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
    ac9c:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
    ac9e:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
    aca0:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
    aca2:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
    aca6:	295f      	cmp	r1, #95	; 0x5f
    aca8:	bf28      	it	cs
    acaa:	222e      	movcs	r2, #46	; 0x2e
    acac:	492f      	ldr	r1, [pc, #188]	; (ad6c <log_output_process+0x29c>)
    acae:	f7ff feef 	bl	aa90 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    acb2:	f10b 0b01 	add.w	fp, fp, #1
    acb6:	f1bb 0f10 	cmp.w	fp, #16
    acba:	d01d      	beq.n	acf8 <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
    acbc:	f01b 0f07 	tst.w	fp, #7
    acc0:	d103      	bne.n	acca <log_output_process+0x1fa>
			print_formatted(output, " ");
    acc2:	4649      	mov	r1, r9
    acc4:	4620      	mov	r0, r4
    acc6:	f7ff fee3 	bl	aa90 <print_formatted>
		if (i < length) {
    acca:	45d8      	cmp	r8, fp
    accc:	465a      	mov	r2, fp
    acce:	d8e5      	bhi.n	ac9c <log_output_process+0x1cc>
			print_formatted(output, " ");
    acd0:	4649      	mov	r1, r9
    acd2:	4620      	mov	r0, r4
    acd4:	f7ff fedc 	bl	aa90 <print_formatted>
    acd8:	e7eb      	b.n	acb2 <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    acda:	481f      	ldr	r0, [pc, #124]	; (ad58 <log_output_process+0x288>)
		prefix_offset = 0;
    acdc:	9d04      	ldr	r5, [sp, #16]
    acde:	e7a1      	b.n	ac24 <log_output_process+0x154>
		print_formatted(output, " ");
    ace0:	4649      	mov	r1, r9
    ace2:	4620      	mov	r0, r4
    ace4:	f7ff fed4 	bl	aa90 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    ace8:	f10b 0b01 	add.w	fp, fp, #1
    acec:	e7b0      	b.n	ac50 <log_output_process+0x180>
			print_formatted(output, "   ");
    acee:	4620      	mov	r0, r4
    acf0:	491f      	ldr	r1, [pc, #124]	; (ad70 <log_output_process+0x2a0>)
    acf2:	f7ff fecd 	bl	aa90 <print_formatted>
    acf6:	e7c5      	b.n	ac84 <log_output_process+0x1b4>
		data += length;
    acf8:	9b05      	ldr	r3, [sp, #20]
	} while (len);
    acfa:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
    acfe:	4443      	add	r3, r8
    ad00:	9305      	str	r3, [sp, #20]
	} while (len);
    ad02:	d19a      	bne.n	ac3a <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    ad04:	9b04      	ldr	r3, [sp, #16]
    ad06:	2b00      	cmp	r3, #0
    ad08:	f47f af43 	bne.w	ab92 <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    ad0c:	4620      	mov	r0, r4
}
    ad0e:	b009      	add	sp, #36	; 0x24
    ad10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    ad14:	f00c bd2f 	b.w	17776 <log_output_flush>
		print_formatted(output, "%s", log_color);
    ad18:	4620      	mov	r0, r4
    ad1a:	4a05      	ldr	r2, [pc, #20]	; (ad30 <log_output_process+0x260>)
    ad1c:	4905      	ldr	r1, [pc, #20]	; (ad34 <log_output_process+0x264>)
    ad1e:	f7ff feb7 	bl	aa90 <print_formatted>
}
    ad22:	e739      	b.n	ab98 <log_output_process+0xc8>
    ad24:	0001c639 	.word	0x0001c639
    ad28:	0001c63d 	.word	0x0001c63d
    ad2c:	0001bb74 	.word	0x0001bb74
    ad30:	0001c634 	.word	0x0001c634
    ad34:	0001d213 	.word	0x0001d213
    ad38:	0001bb88 	.word	0x0001bb88
    ad3c:	0001c662 	.word	0x0001c662
    ad40:	0001c668 	.word	0x0001c668
    ad44:	0001c66c 	.word	0x0001c66c
    ad48:	200097cc 	.word	0x200097cc
    ad4c:	200097c8 	.word	0x200097c8
    ad50:	0001c646 	.word	0x0001c646
    ad54:	000177bf 	.word	0x000177bf
    ad58:	00017791 	.word	0x00017791
    ad5c:	00017769 	.word	0x00017769
    ad60:	0001e5de 	.word	0x0001e5de
    ad64:	0001c671 	.word	0x0001c671
    ad68:	0001c677 	.word	0x0001c677
    ad6c:	0001c679 	.word	0x0001c679
    ad70:	0001e5dc 	.word	0x0001e5dc

0000ad74 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    ad74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    ad78:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    ad7a:	684b      	ldr	r3, [r1, #4]
    ad7c:	4605      	mov	r5, r0
    ad7e:	460c      	mov	r4, r1
    ad80:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    ad82:	688e      	ldr	r6, [r1, #8]
    ad84:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
    ad86:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    ad8a:	b15b      	cbz	r3, ada4 <log_output_msg_process+0x30>
    ad8c:	4a13      	ldr	r2, [pc, #76]	; (addc <log_output_msg_process+0x68>)
    ad8e:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    ad90:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    ad94:	2900      	cmp	r1, #0
    ad96:	db1f      	blt.n	add8 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    ad98:	7820      	ldrb	r0, [r4, #0]
    ad9a:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    ad9e:	f7ff fd8b 	bl	a8b8 <log_source_name_get>
    ada2:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    ada4:	4621      	mov	r1, r4
    ada6:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
    adaa:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    adac:	f3c2 224a 	ubfx	r2, r2, #9, #11
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    adb0:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    adb2:	eb01 0402 	add.w	r4, r1, r2
    adb6:	bf08      	it	eq
    adb8:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
    adba:	f3c0 100b 	ubfx	r0, r0, #4, #12
    adbe:	e9cd 0803 	strd	r0, r8, [sp, #12]
    adc2:	e9cd 1401 	strd	r1, r4, [sp, #4]
    adc6:	2200      	movs	r2, #0
    adc8:	4631      	mov	r1, r6
    adca:	4628      	mov	r0, r5
    adcc:	9700      	str	r7, [sp, #0]
    adce:	f7ff fe7f 	bl	aad0 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    add2:	b006      	add	sp, #24
    add4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    add8:	2300      	movs	r3, #0
    adda:	e7e3      	b.n	ada4 <log_output_msg_process+0x30>
    addc:	0001b848 	.word	0x0001b848

0000ade0 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    ade0:	f242 730f 	movw	r3, #9999	; 0x270f
{
    ade4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    ade6:	428b      	cmp	r3, r1
    ade8:	bf28      	it	cs
    adea:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    adec:	6805      	ldr	r5, [r0, #0]
{
    adee:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    adf0:	2105      	movs	r1, #5
    adf2:	4668      	mov	r0, sp
    adf4:	4a0d      	ldr	r2, [pc, #52]	; (ae2c <log_output_dropped_process+0x4c>)
    adf6:	f00b fce0 	bl	167ba <snprintk>
    adfa:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    adfc:	6863      	ldr	r3, [r4, #4]
    adfe:	4628      	mov	r0, r5
    ae00:	220b      	movs	r2, #11
    ae02:	685b      	ldr	r3, [r3, #4]
    ae04:	490a      	ldr	r1, [pc, #40]	; (ae30 <log_output_dropped_process+0x50>)
    ae06:	f00c fca2 	bl	1774e <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    ae0a:	6863      	ldr	r3, [r4, #4]
    ae0c:	4632      	mov	r2, r6
    ae0e:	4669      	mov	r1, sp
    ae10:	4628      	mov	r0, r5
    ae12:	685b      	ldr	r3, [r3, #4]
    ae14:	f00c fc9b 	bl	1774e <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    ae18:	6863      	ldr	r3, [r4, #4]
    ae1a:	221b      	movs	r2, #27
    ae1c:	4628      	mov	r0, r5
    ae1e:	685b      	ldr	r3, [r3, #4]
    ae20:	4904      	ldr	r1, [pc, #16]	; (ae34 <log_output_dropped_process+0x54>)
    ae22:	f00c fc94 	bl	1774e <buffer_write>
		     output->control_block->ctx);
}
    ae26:	b002      	add	sp, #8
    ae28:	bd70      	pop	{r4, r5, r6, pc}
    ae2a:	bf00      	nop
    ae2c:	0001cdae 	.word	0x0001cdae
    ae30:	0001c698 	.word	0x0001c698
    ae34:	0001c67c 	.word	0x0001c67c

0000ae38 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    ae38:	2100      	movs	r1, #0
    ae3a:	2301      	movs	r3, #1
    ae3c:	4a06      	ldr	r2, [pc, #24]	; (ae58 <log_output_timestamp_freq_set+0x20>)
    ae3e:	4290      	cmp	r0, r2
    ae40:	d806      	bhi.n	ae50 <log_output_timestamp_freq_set+0x18>
    ae42:	4a06      	ldr	r2, [pc, #24]	; (ae5c <log_output_timestamp_freq_set+0x24>)
    ae44:	b901      	cbnz	r1, ae48 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    ae46:	2301      	movs	r3, #1
    ae48:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    ae4a:	4b05      	ldr	r3, [pc, #20]	; (ae60 <log_output_timestamp_freq_set+0x28>)
    ae4c:	6018      	str	r0, [r3, #0]
}
    ae4e:	4770      	bx	lr
		timestamp_div *= 2U;
    ae50:	2101      	movs	r1, #1
		frequency /= 2U;
    ae52:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    ae54:	005b      	lsls	r3, r3, #1
    ae56:	e7f2      	b.n	ae3e <log_output_timestamp_freq_set+0x6>
    ae58:	000f4240 	.word	0x000f4240
    ae5c:	200097c8 	.word	0x200097c8
    ae60:	200097cc 	.word	0x200097cc

0000ae64 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    ae64:	4b01      	ldr	r3, [pc, #4]	; (ae6c <format_set+0x8>)
	return 0;
}
    ae66:	2000      	movs	r0, #0
	log_format_current = log_type;
    ae68:	6019      	str	r1, [r3, #0]
}
    ae6a:	4770      	bx	lr
    ae6c:	200097e4 	.word	0x200097e4

0000ae70 <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
    ae70:	2201      	movs	r2, #1
    ae72:	4b02      	ldr	r3, [pc, #8]	; (ae7c <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    ae74:	4802      	ldr	r0, [pc, #8]	; (ae80 <panic+0x10>)
    ae76:	701a      	strb	r2, [r3, #0]
    ae78:	f00c bc7d 	b.w	17776 <log_output_flush>
    ae7c:	20009be6 	.word	0x20009be6
    ae80:	0001bbb8 	.word	0x0001bbb8

0000ae84 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    ae84:	4801      	ldr	r0, [pc, #4]	; (ae8c <dropped+0x8>)
    ae86:	f7ff bfab 	b.w	ade0 <log_output_dropped_process>
    ae8a:	bf00      	nop
    ae8c:	0001bbb8 	.word	0x0001bbb8

0000ae90 <process>:
{
    ae90:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    ae92:	4b06      	ldr	r3, [pc, #24]	; (aeac <process+0x1c>)
{
    ae94:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    ae96:	6818      	ldr	r0, [r3, #0]
    ae98:	f7ff fb54 	bl	a544 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    ae9c:	4621      	mov	r1, r4
}
    ae9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    aea2:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    aea4:	220f      	movs	r2, #15
    aea6:	4802      	ldr	r0, [pc, #8]	; (aeb0 <process+0x20>)
    aea8:	4718      	bx	r3
    aeaa:	bf00      	nop
    aeac:	200097e4 	.word	0x200097e4
    aeb0:	0001bbb8 	.word	0x0001bbb8

0000aeb4 <char_out>:
{
    aeb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aeb6:	460d      	mov	r5, r1
    aeb8:	4604      	mov	r4, r0
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    aeba:	4f06      	ldr	r7, [pc, #24]	; (aed4 <char_out+0x20>)
    aebc:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    aebe:	42b4      	cmp	r4, r6
    aec0:	d101      	bne.n	aec6 <char_out+0x12>
}
    aec2:	4628      	mov	r0, r5
    aec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    aec6:	f814 1b01 	ldrb.w	r1, [r4], #1
    aeca:	68bb      	ldr	r3, [r7, #8]
    aecc:	4801      	ldr	r0, [pc, #4]	; (aed4 <char_out+0x20>)
    aece:	685b      	ldr	r3, [r3, #4]
    aed0:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    aed2:	e7f4      	b.n	aebe <char_out+0xa>
    aed4:	0001b51c 	.word	0x0001b51c

0000aed8 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    aed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    aedc:	4605      	mov	r5, r0
	__asm__ volatile(
    aede:	f04f 0320 	mov.w	r3, #32
    aee2:	f3ef 8611 	mrs	r6, BASEPRI
    aee6:	f383 8812 	msr	BASEPRI_MAX, r3
    aeea:	f3bf 8f6f 	isb	sy
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    aeee:	f04f 090c 	mov.w	r9, #12
	return list->head;
    aef2:	4b0d      	ldr	r3, [pc, #52]	; (af28 <pm_state_notify+0x50>)
    aef4:	4f0d      	ldr	r7, [pc, #52]	; (af2c <pm_state_notify+0x54>)
    aef6:	681c      	ldr	r4, [r3, #0]
    aef8:	f8df 8034 	ldr.w	r8, [pc, #52]	; af30 <pm_state_notify+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    aefc:	b92c      	cbnz	r4, af0a <pm_state_notify+0x32>
	__asm__ volatile(
    aefe:	f386 8811 	msr	BASEPRI, r6
    af02:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    af06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    af0a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    af0e:	2d00      	cmp	r5, #0
    af10:	bf18      	it	ne
    af12:	4613      	movne	r3, r2
		if (callback) {
    af14:	b12b      	cbz	r3, af22 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    af16:	f898 2010 	ldrb.w	r2, [r8, #16]
    af1a:	fb09 f202 	mul.w	r2, r9, r2
    af1e:	5cb8      	ldrb	r0, [r7, r2]
    af20:	4798      	blx	r3
	return node->next;
    af22:	6824      	ldr	r4, [r4, #0]
    af24:	e7ea      	b.n	aefc <pm_state_notify+0x24>
    af26:	bf00      	nop
    af28:	20009800 	.word	0x20009800
    af2c:	200097f4 	.word	0x200097f4
    af30:	20009b90 	.word	0x20009b90

0000af34 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    af34:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    af36:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    af38:	4b16      	ldr	r3, [pc, #88]	; (af94 <pm_system_resume+0x60>)
    af3a:	7c1c      	ldrb	r4, [r3, #16]
    af3c:	f004 031f 	and.w	r3, r4, #31
    af40:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    af42:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    af44:	4b14      	ldr	r3, [pc, #80]	; (af98 <pm_system_resume+0x64>)
    af46:	0961      	lsrs	r1, r4, #5
    af48:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    af4c:	e8d3 1fef 	ldaex	r1, [r3]
    af50:	ea01 0500 	and.w	r5, r1, r0
    af54:	e8c3 5fe6 	stlex	r6, r5, [r3]
    af58:	2e00      	cmp	r6, #0
    af5a:	d1f7      	bne.n	af4c <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    af5c:	420a      	tst	r2, r1
    af5e:	d013      	beq.n	af88 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
    af60:	4b0e      	ldr	r3, [pc, #56]	; (af9c <pm_system_resume+0x68>)
    af62:	4d0f      	ldr	r5, [pc, #60]	; (afa0 <pm_system_resume+0x6c>)
    af64:	b18b      	cbz	r3, af8a <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
    af66:	230c      	movs	r3, #12
    af68:	4363      	muls	r3, r4
    af6a:	18ea      	adds	r2, r5, r3
    af6c:	7851      	ldrb	r1, [r2, #1]
    af6e:	5ce8      	ldrb	r0, [r5, r3]
    af70:	f00c f9df 	bl	17332 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    af74:	2000      	movs	r0, #0
    af76:	f7ff ffaf 	bl	aed8 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    af7a:	230c      	movs	r3, #12
    af7c:	435c      	muls	r4, r3
    af7e:	2300      	movs	r3, #0
    af80:	192a      	adds	r2, r5, r4
    af82:	512b      	str	r3, [r5, r4]
    af84:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    af88:	bd70      	pop	{r4, r5, r6, pc}
    af8a:	f383 8811 	msr	BASEPRI, r3
    af8e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    af92:	e7ef      	b.n	af74 <pm_system_resume+0x40>
    af94:	20009b90 	.word	0x20009b90
    af98:	20009808 	.word	0x20009808
    af9c:	00017333 	.word	0x00017333
    afa0:	200097f4 	.word	0x200097f4

0000afa4 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    afa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    afa8:	4b32      	ldr	r3, [pc, #200]	; (b074 <pm_system_suspend+0xd0>)
{
    afaa:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    afac:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    afae:	f04f 0320 	mov.w	r3, #32
    afb2:	f3ef 8811 	mrs	r8, BASEPRI
    afb6:	f383 8812 	msr	BASEPRI_MAX, r3
    afba:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    afbe:	240c      	movs	r4, #12
    afc0:	436c      	muls	r4, r5
    afc2:	4b2d      	ldr	r3, [pc, #180]	; (b078 <pm_system_suspend+0xd4>)
    afc4:	4e2d      	ldr	r6, [pc, #180]	; (b07c <pm_system_suspend+0xd8>)
    afc6:	5d19      	ldrb	r1, [r3, r4]
    afc8:	191a      	adds	r2, r3, r4
    afca:	2900      	cmp	r1, #0
    afcc:	d047      	beq.n	b05e <pm_system_suspend+0xba>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    afce:	ca07      	ldmia	r2, {r0, r1, r2}
    afd0:	eb06 0c04 	add.w	ip, r6, r4
    afd4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    afd8:	2200      	movs	r2, #0
    afda:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    afdc:	f388 8811 	msr	BASEPRI, r8
    afe0:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    afe4:	230c      	movs	r3, #12
    afe6:	436b      	muls	r3, r5
    afe8:	5cf0      	ldrb	r0, [r6, r3]
    afea:	18f2      	adds	r2, r6, r3
    afec:	b3a8      	cbz	r0, b05a <pm_system_suspend+0xb6>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    afee:	1c7b      	adds	r3, r7, #1
    aff0:	d010      	beq.n	b014 <pm_system_suspend+0x70>
			return (uint32_t)((t * to_hz + off) / from_hz);
    aff2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    aff6:	2100      	movs	r1, #0
    aff8:	f8d2 c008 	ldr.w	ip, [r2, #8]
    affc:	4c20      	ldr	r4, [pc, #128]	; (b080 <pm_system_suspend+0xdc>)
    affe:	2300      	movs	r3, #0
    b000:	fbec 4100 	umlal	r4, r1, ip, r0
    b004:	4a1f      	ldr	r2, [pc, #124]	; (b084 <pm_system_suspend+0xe0>)
    b006:	4620      	mov	r0, r4
    b008:	f7fd f8a4 	bl	8154 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    b00c:	2101      	movs	r1, #1
    b00e:	1a38      	subs	r0, r7, r0
    b010:	f008 fa62 	bl	134d8 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    b014:	f00a ff5a 	bl	15ecc <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    b018:	2001      	movs	r0, #1
    b01a:	f7ff ff5d 	bl	aed8 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b01e:	4b1a      	ldr	r3, [pc, #104]	; (b088 <pm_system_suspend+0xe4>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    b020:	096a      	lsrs	r2, r5, #5
    b022:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    b026:	2201      	movs	r2, #1
    b028:	f005 011f 	and.w	r1, r5, #31
    b02c:	408a      	lsls	r2, r1
    b02e:	e8d3 0fef 	ldaex	r0, [r3]
    b032:	4310      	orrs	r0, r2
    b034:	e8c3 0fe1 	stlex	r1, r0, [r3]
    b038:	2900      	cmp	r1, #0
    b03a:	d1f8      	bne.n	b02e <pm_system_suspend+0x8a>
	if (pm_state_set != NULL) {
    b03c:	4b13      	ldr	r3, [pc, #76]	; (b08c <pm_system_suspend+0xe8>)
    b03e:	b13b      	cbz	r3, b050 <pm_system_suspend+0xac>
		pm_state_set(info->state, info->substate_id);
    b040:	230c      	movs	r3, #12
    b042:	fb03 f005 	mul.w	r0, r3, r5
    b046:	1833      	adds	r3, r6, r0
    b048:	7859      	ldrb	r1, [r3, #1]
    b04a:	5c30      	ldrb	r0, [r6, r0]
    b04c:	f00c f965 	bl	1731a <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    b050:	f7ff ff70 	bl	af34 <pm_system_resume>
	k_sched_unlock();
    b054:	f00a ff4e 	bl	15ef4 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    b058:	2001      	movs	r0, #1
}
    b05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    b05e:	4601      	mov	r1, r0
    b060:	4628      	mov	r0, r5
    b062:	f000 f815 	bl	b090 <pm_policy_next_state>
		if (info != NULL) {
    b066:	2800      	cmp	r0, #0
    b068:	d0b8      	beq.n	afdc <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    b06a:	c807      	ldmia	r0, {r0, r1, r2}
    b06c:	4434      	add	r4, r6
    b06e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    b072:	e7b3      	b.n	afdc <pm_system_suspend+0x38>
    b074:	20009b90 	.word	0x20009b90
    b078:	200097e8 	.word	0x200097e8
    b07c:	200097f4 	.word	0x200097f4
    b080:	000f423f 	.word	0x000f423f
    b084:	000f4240 	.word	0x000f4240
    b088:	20009808 	.word	0x20009808
    b08c:	0001731b 	.word	0x0001731b

0000b090 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    b090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b094:	b085      	sub	sp, #20
    b096:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    b098:	a903      	add	r1, sp, #12
    b09a:	f000 f843 	bl	b124 <pm_state_cpu_get_all>
    b09e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    b0a2:	4604      	mov	r4, r0
    b0a4:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    b0a8:	4b1b      	ldr	r3, [pc, #108]	; (b118 <pm_policy_next_state+0x88>)
    b0aa:	9d03      	ldr	r5, [sp, #12]
    b0ac:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    b0b0:	1e43      	subs	r3, r0, #1
    b0b2:	b21b      	sxth	r3, r3
    b0b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    b0b8:	f8df 8060 	ldr.w	r8, [pc, #96]	; b11c <pm_policy_next_state+0x8c>
    b0bc:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    b0c0:	b924      	cbnz	r4, b0cc <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    b0c2:	46a1      	mov	r9, r4
}
    b0c4:	4648      	mov	r0, r9
    b0c6:	b005      	add	sp, #20
    b0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b0cc:	46c4      	mov	ip, r8
    b0ce:	4659      	mov	r1, fp
    b0d0:	6868      	ldr	r0, [r5, #4]
    b0d2:	2300      	movs	r3, #0
    b0d4:	fbe0 c107 	umlal	ip, r1, r0, r7
    b0d8:	4a11      	ldr	r2, [pc, #68]	; (b120 <pm_policy_next_state+0x90>)
    b0da:	4660      	mov	r0, ip
    b0dc:	f7fd f83a 	bl	8154 <__aeabi_uldivmod>
    b0e0:	46c4      	mov	ip, r8
    b0e2:	4659      	mov	r1, fp
    b0e4:	9001      	str	r0, [sp, #4]
    b0e6:	68a8      	ldr	r0, [r5, #8]
    b0e8:	2300      	movs	r3, #0
    b0ea:	fbe0 c107 	umlal	ip, r1, r0, r7
    b0ee:	4a0c      	ldr	r2, [pc, #48]	; (b120 <pm_policy_next_state+0x90>)
    b0f0:	4660      	mov	r0, ip
    b0f2:	f7fd f82f 	bl	8154 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    b0f6:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    b0fa:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    b0fc:	d001      	beq.n	b102 <pm_policy_next_state+0x72>
    b0fe:	4582      	cmp	sl, r0
    b100:	d905      	bls.n	b10e <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    b102:	1c73      	adds	r3, r6, #1
    b104:	d0de      	beq.n	b0c4 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    b106:	9b01      	ldr	r3, [sp, #4]
    b108:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    b10a:	42b0      	cmp	r0, r6
    b10c:	d9da      	bls.n	b0c4 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    b10e:	3c01      	subs	r4, #1
    b110:	b2a4      	uxth	r4, r4
    b112:	3d0c      	subs	r5, #12
    b114:	e7d4      	b.n	b0c0 <pm_policy_next_state+0x30>
    b116:	bf00      	nop
    b118:	200082b8 	.word	0x200082b8
    b11c:	000f423f 	.word	0x000f423f
    b120:	000f4240 	.word	0x000f4240

0000b124 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    b124:	b908      	cbnz	r0, b12a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    b126:	4b02      	ldr	r3, [pc, #8]	; (b130 <pm_state_cpu_get_all+0xc>)
    b128:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    b12a:	2000      	movs	r0, #0
    b12c:	4770      	bx	lr
    b12e:	bf00      	nop
    b130:	0001bbc8 	.word	0x0001bbc8

0000b134 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    b134:	4904      	ldr	r1, [pc, #16]	; (b148 <sub_bytes+0x14>)
    b136:	1e43      	subs	r3, r0, #1
    b138:	300f      	adds	r0, #15
    b13a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    b13e:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
    b140:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
    b142:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    b144:	d1f9      	bne.n	b13a <sub_bytes+0x6>
	}
}
    b146:	4770      	bx	lr
    b148:	0001c6e1 	.word	0x0001c6e1

0000b14c <tc_aes128_set_encrypt_key>:
{
    b14c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b14e:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
    b150:	4e26      	ldr	r6, [pc, #152]	; (b1ec <tc_aes128_set_encrypt_key+0xa0>)
{
    b152:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    b154:	ad01      	add	r5, sp, #4
{
    b156:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    b158:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    b15a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    b15c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    b15e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    b160:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    b164:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    b168:	4638      	mov	r0, r7
    b16a:	2f00      	cmp	r7, #0
    b16c:	d039      	beq.n	b1e2 <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
    b16e:	2c00      	cmp	r4, #0
    b170:	d039      	beq.n	b1e6 <tc_aes128_set_encrypt_key+0x9a>
    b172:	1f38      	subs	r0, r7, #4
    b174:	4602      	mov	r2, r0
    b176:	4621      	mov	r1, r4
    b178:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    b17a:	784b      	ldrb	r3, [r1, #1]
    b17c:	780d      	ldrb	r5, [r1, #0]
    b17e:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    b180:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    b184:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
    b186:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    b188:	432b      	orrs	r3, r5
    b18a:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
    b18e:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    b190:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    b194:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    b198:	d1ef      	bne.n	b17a <tc_aes128_set_encrypt_key+0x2e>
    b19a:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
    b19c:	4c14      	ldr	r4, [pc, #80]	; (b1f0 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
    b19e:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    b1a0:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    b1a2:	d116      	bne.n	b1d2 <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    b1a4:	f3c3 4207 	ubfx	r2, r3, #16, #8
    b1a8:	5ca5      	ldrb	r5, [r4, r2]
    b1aa:	0e1a      	lsrs	r2, r3, #24
    b1ac:	5ca2      	ldrb	r2, [r4, r2]
    b1ae:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    b1b2:	f3c3 2507 	ubfx	r5, r3, #8, #8
    b1b6:	5d65      	ldrb	r5, [r4, r5]
    b1b8:	b2db      	uxtb	r3, r3
    b1ba:	5ce3      	ldrb	r3, [r4, r3]
    b1bc:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    b1c0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    b1c4:	f021 0303 	bic.w	r3, r1, #3
    b1c8:	3330      	adds	r3, #48	; 0x30
    b1ca:	446b      	add	r3, sp
    b1cc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    b1d0:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    b1d2:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    b1d6:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    b1d8:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    b1da:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    b1dc:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    b1de:	d1de      	bne.n	b19e <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
    b1e0:	2001      	movs	r0, #1
}
    b1e2:	b00d      	add	sp, #52	; 0x34
    b1e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    b1e6:	4620      	mov	r0, r4
    b1e8:	e7fb      	b.n	b1e2 <tc_aes128_set_encrypt_key+0x96>
    b1ea:	bf00      	nop
    b1ec:	0001b978 	.word	0x0001b978
    b1f0:	0001c6e1 	.word	0x0001c6e1

0000b1f4 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
    b1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    b1f8:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    b1fa:	6803      	ldr	r3, [r0, #0]
{
    b1fc:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    b1fe:	9302      	str	r3, [sp, #8]
    b200:	6843      	ldr	r3, [r0, #4]
    b202:	f8df a1bc 	ldr.w	sl, [pc, #444]	; b3c0 <compress+0x1cc>
    b206:	9303      	str	r3, [sp, #12]
    b208:	6883      	ldr	r3, [r0, #8]
    b20a:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
    b20e:	9304      	str	r3, [sp, #16]
    b210:	68c3      	ldr	r3, [r0, #12]
    b212:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    b214:	6903      	ldr	r3, [r0, #16]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    b216:	e9dd be04 	ldrd	fp, lr, [sp, #16]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    b21a:	9306      	str	r3, [sp, #24]
    b21c:	6943      	ldr	r3, [r0, #20]
    b21e:	9307      	str	r3, [sp, #28]
    b220:	6983      	ldr	r3, [r0, #24]
    b222:	e9dd 2c06 	ldrd	r2, ip, [sp, #24]
    b226:	9308      	str	r3, [sp, #32]
    b228:	69c3      	ldr	r3, [r0, #28]
    b22a:	4698      	mov	r8, r3
    b22c:	9309      	str	r3, [sp, #36]	; 0x24
    b22e:	9b08      	ldr	r3, [sp, #32]
    b230:	9300      	str	r3, [sp, #0]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
    b232:	59cd      	ldr	r5, [r1, r7]
		t1 = work_space[i] = n;
    b234:	ab0c      	add	r3, sp, #48	; 0x30
    b236:	ba2d      	rev	r5, r5
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    b238:	f85a 9b04 	ldr.w	r9, [sl], #4
		t1 = work_space[i] = n;
    b23c:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
    b23e:	ea4f 23f2 	mov.w	r3, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    b242:	44a9      	add	r9, r5
    b244:	ea83 13b2 	eor.w	r3, r3, r2, ror #6
    b248:	9d00      	ldr	r5, [sp, #0]
    b24a:	ea83 6372 	eor.w	r3, r3, r2, ror #25
    b24e:	444b      	add	r3, r9
    b250:	ea25 0502 	bic.w	r5, r5, r2
    b254:	ea02 090c 	and.w	r9, r2, ip
    b258:	ea85 0509 	eor.w	r5, r5, r9
    b25c:	442b      	add	r3, r5
    b25e:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
    b260:	ea86 050b 	eor.w	r5, r6, fp
	return (((a) >> n) | ((a) << (32 - n)));
    b264:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    b268:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    b26c:	4025      	ands	r5, r4
    b26e:	ea06 090b 	and.w	r9, r6, fp
    b272:	ea85 0509 	eor.w	r5, r5, r9
    b276:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
	for (i = 0; i < 16; ++i) {
    b27a:	3704      	adds	r7, #4
		t2 = Sigma0(a) + Maj(a, b, c);
    b27c:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
    b27e:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
    b280:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
    b284:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
    b286:	46de      	mov	lr, fp
    b288:	f8dd 8000 	ldr.w	r8, [sp]
    b28c:	f040 8088 	bne.w	b3a0 <compress+0x1ac>
    b290:	f04f 0a10 	mov.w	sl, #16
    b294:	494b      	ldr	r1, [pc, #300]	; (b3c4 <compress+0x1d0>)
    b296:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    b298:	4651      	mov	r1, sl
    b29a:	f10a 0a01 	add.w	sl, sl, #1
    b29e:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    b2a2:	f00a 070f 	and.w	r7, sl, #15
    b2a6:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    b2aa:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    b2ae:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
    b2b2:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
    b2b6:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
    b2b8:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
    b2bc:	f101 070e 	add.w	r7, r1, #14
    b2c0:	f007 070f 	and.w	r7, r7, #15
    b2c4:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    b2c8:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    b2cc:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
    b2ce:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
    b2d2:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
    b2d6:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    b2da:	f001 010f 	and.w	r1, r1, #15
    b2de:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    b2e2:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    b2e6:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
    b2ea:	f859 ec40 	ldr.w	lr, [r9, #-64]
    b2ee:	f851 1c40 	ldr.w	r1, [r1, #-64]
	for ( ; i < 64; ++i) {
    b2f2:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    b2f6:	4471      	add	r1, lr
		s0 = sigma0(s0);
    b2f8:	f8dd e004 	ldr.w	lr, [sp, #4]
    b2fc:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
    b300:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    b304:	4441      	add	r1, r8
		s1 = sigma1(s1);
    b306:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    b30a:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    b30c:	ea05 0802 	and.w	r8, r5, r2
	return (((a) >> n) | ((a) << (32 - n)));
    b310:	ea4f 2ef5 	mov.w	lr, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    b314:	ea2c 0705 	bic.w	r7, ip, r5
    b318:	ea87 0708 	eor.w	r7, r7, r8
    b31c:	ea8e 1eb5 	eor.w	lr, lr, r5, ror #6
    b320:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    b324:	ea8e 6e75 	eor.w	lr, lr, r5, ror #25
    b328:	4477      	add	r7, lr
    b32a:	f858 ef04 	ldr.w	lr, [r8, #4]!
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    b32e:	f849 1c40 	str.w	r1, [r9, #-64]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    b332:	4477      	add	r7, lr
    b334:	440f      	add	r7, r1
    b336:	9900      	ldr	r1, [sp, #0]
	return (((a) >> n) | ((a) << (32 - n)));
    b338:	ea4f 3e73 	mov.w	lr, r3, ror #13
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    b33c:	4439      	add	r1, r7
		t2 = Sigma0(a) + Maj(a, b, c);
    b33e:	ea84 0706 	eor.w	r7, r4, r6
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    b342:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
		t2 = Sigma0(a) + Maj(a, b, c);
    b346:	ea8e 0eb3 	eor.w	lr, lr, r3, ror #2
    b34a:	ea07 0703 	and.w	r7, r7, r3
    b34e:	ea04 0806 	and.w	r8, r4, r6
    b352:	ea8e 5eb3 	eor.w	lr, lr, r3, ror #22
    b356:	ea87 0708 	eor.w	r7, r7, r8
    b35a:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
		d = c; c = b; b = a; a = t1 + t2;
    b35c:	440f      	add	r7, r1
		h = g; g = f; f = e; e = d + t1;
    b35e:	eb01 0e0b 	add.w	lr, r1, fp
	for ( ; i < 64; ++i) {
    b362:	f8cd c000 	str.w	ip, [sp]
    b366:	46b3      	mov	fp, r6
    b368:	d122      	bne.n	b3b0 <compress+0x1bc>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
    b36a:	9902      	ldr	r1, [sp, #8]
    b36c:	4439      	add	r1, r7
    b36e:	6001      	str	r1, [r0, #0]
    b370:	9903      	ldr	r1, [sp, #12]
    b372:	4419      	add	r1, r3
    b374:	9b04      	ldr	r3, [sp, #16]
    b376:	6041      	str	r1, [r0, #4]
    b378:	4423      	add	r3, r4
    b37a:	6083      	str	r3, [r0, #8]
    b37c:	9b05      	ldr	r3, [sp, #20]
    b37e:	4433      	add	r3, r6
    b380:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    b382:	9b06      	ldr	r3, [sp, #24]
    b384:	4473      	add	r3, lr
    b386:	6103      	str	r3, [r0, #16]
    b388:	9b07      	ldr	r3, [sp, #28]
    b38a:	442b      	add	r3, r5
    b38c:	6143      	str	r3, [r0, #20]
    b38e:	9b08      	ldr	r3, [sp, #32]
    b390:	4413      	add	r3, r2
    b392:	6183      	str	r3, [r0, #24]
    b394:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b396:	4463      	add	r3, ip
    b398:	61c3      	str	r3, [r0, #28]
}
    b39a:	b01d      	add	sp, #116	; 0x74
    b39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b3a0:	46b3      	mov	fp, r6
    b3a2:	f8cd c000 	str.w	ip, [sp]
    b3a6:	4626      	mov	r6, r4
    b3a8:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
    b3aa:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    b3ac:	462a      	mov	r2, r5
    b3ae:	e740      	b.n	b232 <compress+0x3e>
    b3b0:	4694      	mov	ip, r2
    b3b2:	4626      	mov	r6, r4
    b3b4:	462a      	mov	r2, r5
    b3b6:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    b3b8:	4675      	mov	r5, lr
		d = c; c = b; b = a; a = t1 + t2;
    b3ba:	463b      	mov	r3, r7
    b3bc:	e76c      	b.n	b298 <compress+0xa4>
    b3be:	bf00      	nop
    b3c0:	0001bbc8 	.word	0x0001bbc8
    b3c4:	0001bc04 	.word	0x0001bc04

0000b3c8 <tc_sha256_init>:
{
    b3c8:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
    b3ca:	4604      	mov	r4, r0
    b3cc:	b1c8      	cbz	r0, b402 <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
    b3ce:	2270      	movs	r2, #112	; 0x70
    b3d0:	2100      	movs	r1, #0
    b3d2:	f00c fa10 	bl	177f6 <_set>
	s->iv[1] = 0xbb67ae85;
    b3d6:	4b0b      	ldr	r3, [pc, #44]	; (b404 <tc_sha256_init+0x3c>)
    b3d8:	4a0b      	ldr	r2, [pc, #44]	; (b408 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
    b3da:	490c      	ldr	r1, [pc, #48]	; (b40c <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
    b3dc:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
    b3e0:	4b0b      	ldr	r3, [pc, #44]	; (b410 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
    b3e2:	480c      	ldr	r0, [pc, #48]	; (b414 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
    b3e4:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
    b3e8:	4b0b      	ldr	r3, [pc, #44]	; (b418 <tc_sha256_init+0x50>)
    b3ea:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
    b3ee:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
    b3f0:	4b0a      	ldr	r3, [pc, #40]	; (b41c <tc_sha256_init+0x54>)
    b3f2:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
    b3f4:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    b3f8:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    b3fc:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    b400:	61e3      	str	r3, [r4, #28]
}
    b402:	bd10      	pop	{r4, pc}
    b404:	bb67ae85 	.word	0xbb67ae85
    b408:	6a09e667 	.word	0x6a09e667
    b40c:	3c6ef372 	.word	0x3c6ef372
    b410:	a54ff53a 	.word	0xa54ff53a
    b414:	510e527f 	.word	0x510e527f
    b418:	9b05688c 	.word	0x9b05688c
    b41c:	1f83d9ab 	.word	0x1f83d9ab

0000b420 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    b420:	4901      	ldr	r1, [pc, #4]	; (b428 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    b422:	2210      	movs	r2, #16
	str	r2, [r1]
    b424:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    b426:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    b428:	e000ed10 	.word	0xe000ed10

0000b42c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    b42c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    b42e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    b430:	f380 8811 	msr	BASEPRI, r0
	isb
    b434:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    b438:	b501      	push	{r0, lr}
    b43a:	f7fe faf3 	bl	9a24 <z_arm_on_enter_cpu_idle>
    b43e:	2800      	cmp	r0, #0
    b440:	d002      	beq.n	b448 <_skip_0>
    b442:	f3bf 8f4f 	dsb	sy
    b446:	bf30      	wfi

0000b448 <_skip_0>:
    b448:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    b44c:	b662      	cpsie	i
	isb
    b44e:	f3bf 8f6f 	isb	sy

	bx	lr
    b452:	4770      	bx	lr

0000b454 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    b454:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    b456:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    b458:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    b45c:	b501      	push	{r0, lr}
    b45e:	f7fe fae1 	bl	9a24 <z_arm_on_enter_cpu_idle>
    b462:	2800      	cmp	r0, #0
    b464:	d002      	beq.n	b46c <_skip_1>
    b466:	f3bf 8f4f 	dsb	sy
    b46a:	bf20      	wfe

0000b46c <_skip_1>:
    b46c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	msr	BASEPRI, r0
    b470:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    b474:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    b476:	4770      	bx	lr

0000b478 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    b478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b47c:	4681      	mov	r9, r0

	if (esf != NULL) {
    b47e:	460c      	mov	r4, r1
{
    b480:	af00      	add	r7, sp, #0
	if (esf != NULL) {
    b482:	2900      	cmp	r1, #0
    b484:	d04c      	beq.n	b520 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    b486:	e9d1 1200 	ldrd	r1, r2, [r1]
    b48a:	466e      	mov	r6, sp
    b48c:	b08a      	sub	sp, #40	; 0x28
    b48e:	68a3      	ldr	r3, [r4, #8]
    b490:	466d      	mov	r5, sp
    b492:	f04f 0a05 	mov.w	sl, #5
    b496:	46a8      	mov	r8, r5
    b498:	4825      	ldr	r0, [pc, #148]	; (b530 <z_arm_fatal_error+0xb8>)
    b49a:	e9c5 2307 	strd	r2, r3, [r5, #28]
    b49e:	e9c5 0105 	strd	r0, r1, [r5, #20]
    b4a2:	f848 af10 	str.w	sl, [r8, #16]!
    b4a6:	2300      	movs	r3, #0
    b4a8:	4642      	mov	r2, r8
    b4aa:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    b4ae:	4821      	ldr	r0, [pc, #132]	; (b534 <z_arm_fatal_error+0xbc>)
    b4b0:	f7ff fa24 	bl	a8fc <z_impl_z_log_msg_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    b4b4:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    b4b8:	46b5      	mov	sp, r6
    b4ba:	6963      	ldr	r3, [r4, #20]
    b4bc:	46ad      	mov	sp, r5
    b4be:	481e      	ldr	r0, [pc, #120]	; (b538 <z_arm_fatal_error+0xc0>)
    b4c0:	e9c5 2307 	strd	r2, r3, [r5, #28]
    b4c4:	e9c5 0105 	strd	r0, r1, [r5, #20]
    b4c8:	f8c5 a010 	str.w	sl, [r5, #16]
    b4cc:	2300      	movs	r3, #0
    b4ce:	4642      	mov	r2, r8
    b4d0:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    b4d4:	4817      	ldr	r0, [pc, #92]	; (b534 <z_arm_fatal_error+0xbc>)
    b4d6:	f7ff fa11 	bl	a8fc <z_impl_z_log_msg_static_create>
    b4da:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    b4dc:	b088      	sub	sp, #32
    b4de:	69e3      	ldr	r3, [r4, #28]
    b4e0:	466d      	mov	r5, sp
    b4e2:	f04f 0a03 	mov.w	sl, #3
    b4e6:	46a8      	mov	r8, r5
    b4e8:	4a14      	ldr	r2, [pc, #80]	; (b53c <z_arm_fatal_error+0xc4>)
    b4ea:	e9c5 2305 	strd	r2, r3, [r5, #20]
    b4ee:	f848 af10 	str.w	sl, [r8, #16]!
    b4f2:	2300      	movs	r3, #0
    b4f4:	4642      	mov	r2, r8
    b4f6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b4fa:	480e      	ldr	r0, [pc, #56]	; (b534 <z_arm_fatal_error+0xbc>)
    b4fc:	f7ff f9fe 	bl	a8fc <z_impl_z_log_msg_static_create>
    b500:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    b502:	69a3      	ldr	r3, [r4, #24]
    b504:	46ad      	mov	sp, r5
    b506:	4a0e      	ldr	r2, [pc, #56]	; (b540 <z_arm_fatal_error+0xc8>)
    b508:	f8c5 a010 	str.w	sl, [r5, #16]
    b50c:	e9c5 2305 	strd	r2, r3, [r5, #20]
    b510:	2300      	movs	r3, #0
    b512:	4642      	mov	r2, r8
    b514:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b518:	4806      	ldr	r0, [pc, #24]	; (b534 <z_arm_fatal_error+0xbc>)
    b51a:	f7ff f9ef 	bl	a8fc <z_impl_z_log_msg_static_create>
    b51e:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    b520:	4621      	mov	r1, r4
    b522:	4648      	mov	r0, r9
    b524:	f009 fcf0 	bl	14f08 <z_fatal_error>
}
    b528:	46bd      	mov	sp, r7
    b52a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b52e:	bf00      	nop
    b530:	0001c7e1 	.word	0x0001c7e1
    b534:	0001b930 	.word	0x0001b930
    b538:	0001c810 	.word	0x0001c810
    b53c:	0001c83f 	.word	0x0001c83f
    b540:	0001c84e 	.word	0x0001c84e

0000b544 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    b544:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    b546:	2800      	cmp	r0, #0
    b548:	db07      	blt.n	b55a <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b54a:	2301      	movs	r3, #1
    b54c:	0941      	lsrs	r1, r0, #5
    b54e:	4a03      	ldr	r2, [pc, #12]	; (b55c <arch_irq_enable+0x18>)
    b550:	f000 001f 	and.w	r0, r0, #31
    b554:	4083      	lsls	r3, r0
    b556:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    b55a:	4770      	bx	lr
    b55c:	e000e100 	.word	0xe000e100

0000b560 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    b560:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    b562:	2800      	cmp	r0, #0
    b564:	db0c      	blt.n	b580 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b566:	2201      	movs	r2, #1
    b568:	4906      	ldr	r1, [pc, #24]	; (b584 <arch_irq_disable+0x24>)
    b56a:	0943      	lsrs	r3, r0, #5
    b56c:	f000 001f 	and.w	r0, r0, #31
    b570:	4082      	lsls	r2, r0
    b572:	3320      	adds	r3, #32
    b574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    b578:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b57c:	f3bf 8f6f 	isb	sy
}
    b580:	4770      	bx	lr
    b582:	bf00      	nop
    b584:	e000e100 	.word	0xe000e100

0000b588 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    b588:	4b05      	ldr	r3, [pc, #20]	; (b5a0 <arch_irq_is_enabled+0x18>)
    b58a:	0942      	lsrs	r2, r0, #5
    b58c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    b590:	2301      	movs	r3, #1
    b592:	f000 001f 	and.w	r0, r0, #31
    b596:	fa03 f000 	lsl.w	r0, r3, r0
}
    b59a:	4010      	ands	r0, r2
    b59c:	4770      	bx	lr
    b59e:	bf00      	nop
    b5a0:	e000e100 	.word	0xe000e100

0000b5a4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    b5a4:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    b5a6:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
    b5a8:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b5ac:	bfac      	ite	ge
    b5ae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b5b2:	4b06      	ldrlt	r3, [pc, #24]	; (b5cc <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b5b4:	ea4f 1141 	mov.w	r1, r1, lsl #5
    b5b8:	b2c9      	uxtb	r1, r1
    b5ba:	bfab      	itete	ge
    b5bc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b5c0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b5c4:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b5c8:	5419      	strblt	r1, [r3, r0]
}
    b5ca:	4770      	bx	lr
    b5cc:	e000ed14 	.word	0xe000ed14

0000b5d0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    b5d0:	bf30      	wfi
    b z_SysNmiOnReset
    b5d2:	f7ff bffd 	b.w	b5d0 <z_SysNmiOnReset>
    b5d6:	bf00      	nop

0000b5d8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    b5d8:	4a0b      	ldr	r2, [pc, #44]	; (b608 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    b5da:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    b5dc:	4b0b      	ldr	r3, [pc, #44]	; (b60c <z_arm_prep_c+0x34>)
    b5de:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    b5e2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    b5e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b5e8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    b5ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    b5f0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    b5f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    b5f8:	f009 fd42 	bl	15080 <z_bss_zero>
	z_data_copy();
    b5fc:	f00a fdb2 	bl	16164 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    b600:	f000 fbca 	bl	bd98 <z_arm_interrupt_init>
	z_cstart();
    b604:	f009 fd7c 	bl	15100 <z_cstart>
    b608:	00008000 	.word	0x00008000
    b60c:	e000ed00 	.word	0xe000ed00

0000b610 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    b610:	4a09      	ldr	r2, [pc, #36]	; (b638 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    b612:	490a      	ldr	r1, [pc, #40]	; (b63c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    b614:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    b616:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    b618:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
    b61a:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    b61c:	4908      	ldr	r1, [pc, #32]	; (b640 <arch_swap+0x30>)
    b61e:	684b      	ldr	r3, [r1, #4]
    b620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    b624:	604b      	str	r3, [r1, #4]
    b626:	2300      	movs	r3, #0
    b628:	f383 8811 	msr	BASEPRI, r3
    b62c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    b630:	6893      	ldr	r3, [r2, #8]
}
    b632:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    b634:	4770      	bx	lr
    b636:	bf00      	nop
    b638:	20009b90 	.word	0x20009b90
    b63c:	0001c1dc 	.word	0x0001c1dc
    b640:	e000ed00 	.word	0xe000ed00

0000b644 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    b644:	4915      	ldr	r1, [pc, #84]	; (b69c <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
    b646:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    b648:	f882 e081 	strb.w	lr, [r2, #129]	; 0x81
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    b64c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    b650:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    b652:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    b656:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    b65a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    b65c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    b660:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    b664:	4f0e      	ldr	r7, [pc, #56]	; (b6a0 <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    b666:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    b66a:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    b66c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    b66e:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    b670:	f992 e081 	ldrsb.w	lr, [r2, #129]	; 0x81

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    b674:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    b676:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    b678:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    b67a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    b67e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    b682:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    b686:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    b68a:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    b68e:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    b690:	f00c fcfe 	bl	18090 <configure_builtin_stack_guard>
    pop {r2, lr}
    b694:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    b698:	4770      	bx	lr
    b69a:	0000      	.short	0x0000
    ldr r1, =_kernel
    b69c:	20009b90 	.word	0x20009b90
    ldr v4, =_SCS_ICSR
    b6a0:	e000ed04 	.word	0xe000ed04

0000b6a4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    b6a4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    b6a8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    b6aa:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    b6ae:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    b6b2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    b6b4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    b6b8:	2902      	cmp	r1, #2
    beq _oops
    b6ba:	d0ff      	beq.n	b6bc <_oops>

0000b6bc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    b6bc:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    b6be:	f00c fcd8 	bl	18072 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    b6c2:	bd01      	pop	{r0, pc}

0000b6c4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    b6c4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    b6c8:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    b6ca:	490d      	ldr	r1, [pc, #52]	; (b700 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
    b6cc:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    b6d0:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    b6d2:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    b6d6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    b6da:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    b6dc:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    b6e0:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    b6e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    b6e8:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    b6ec:	2300      	movs	r3, #0
    b6ee:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
    b6f0:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    b6f4:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    b6f6:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
    b6f8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    b6fc:	4770      	bx	lr
    b6fe:	bf00      	nop
    b700:	000167d5 	.word	0x000167d5

0000b704 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    b704:	4b08      	ldr	r3, [pc, #32]	; (b728 <arch_switch_to_main_thread+0x24>)
    b706:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    b708:	6e83      	ldr	r3, [r0, #104]	; 0x68
    b70a:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    b70e:	4610      	mov	r0, r2
    b710:	f381 8809 	msr	PSP, r1
    b714:	2100      	movs	r1, #0
    b716:	b663      	cpsie	if
    b718:	f381 8811 	msr	BASEPRI, r1
    b71c:	f3bf 8f6f 	isb	sy
    b720:	2200      	movs	r2, #0
    b722:	2300      	movs	r3, #0
    b724:	f00b f856 	bl	167d4 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    b728:	20009b90 	.word	0x20009b90

0000b72c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    b72c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    b72e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    b730:	4a0b      	ldr	r2, [pc, #44]	; (b760 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    b732:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    b734:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    b736:	bf1e      	ittt	ne
	movne	r1, #0
    b738:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    b73a:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    b73c:	f00f f97f 	blne	1aa3e <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    b740:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    b742:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    b746:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    b74a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    b74e:	4905      	ldr	r1, [pc, #20]	; (b764 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    b750:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    b752:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    b754:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    b756:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    b75a:	4903      	ldr	r1, [pc, #12]	; (b768 <_isr_wrapper+0x3c>)
	bx r1
    b75c:	4708      	bx	r1
    b75e:	0000      	.short	0x0000
	ldr r2, =_kernel
    b760:	20009b90 	.word	0x20009b90
	ldr r1, =_sw_isr_table
    b764:	0001b57c 	.word	0x0001b57c
	ldr r1, =z_arm_int_exit
    b768:	0000b76d 	.word	0x0000b76d

0000b76c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    b76c:	4b04      	ldr	r3, [pc, #16]	; (b780 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    b76e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    b770:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    b772:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    b774:	d003      	beq.n	b77e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    b776:	4903      	ldr	r1, [pc, #12]	; (b784 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    b778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    b77c:	600a      	str	r2, [r1, #0]

0000b77e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    b77e:	4770      	bx	lr
	ldr r3, =_kernel
    b780:	20009b90 	.word	0x20009b90
	ldr r1, =_SCS_ICSR
    b784:	e000ed04 	.word	0xe000ed04

0000b788 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    b788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b78c:	b086      	sub	sp, #24
    b78e:	4606      	mov	r6, r0
    b790:	460d      	mov	r5, r1
    b792:	af00      	add	r7, sp, #0
			      bool *recoverable)
{
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
    b794:	2402      	movs	r4, #2
    b796:	4b44      	ldr	r3, [pc, #272]	; (b8a8 <mem_manage_fault.constprop.0+0x120>)
    b798:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b79c:	617b      	str	r3, [r7, #20]
    b79e:	4843      	ldr	r0, [pc, #268]	; (b8ac <mem_manage_fault.constprop.0+0x124>)
    b7a0:	613c      	str	r4, [r7, #16]
    b7a2:	f107 0210 	add.w	r2, r7, #16
    b7a6:	f00c fc77 	bl	18098 <z_log_msg_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    b7aa:	4b41      	ldr	r3, [pc, #260]	; (b8b0 <mem_manage_fault.constprop.0+0x128>)
    b7ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b7ae:	06db      	lsls	r3, r3, #27
    b7b0:	d578      	bpl.n	b8a4 <mem_manage_fault.constprop.0+0x11c>
		reason = K_ERR_ARM_MEM_STACKING;
		PR_FAULT_INFO("  Stacking error (context area might be"
    b7b2:	4b40      	ldr	r3, [pc, #256]	; (b8b4 <mem_manage_fault.constprop.0+0x12c>)
    b7b4:	483d      	ldr	r0, [pc, #244]	; (b8ac <mem_manage_fault.constprop.0+0x124>)
    b7b6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b7ba:	e9c7 4304 	strd	r4, r3, [r7, #16]
    b7be:	f107 0210 	add.w	r2, r7, #16
    b7c2:	f00c fc69 	bl	18098 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_STACKING;
    b7c6:	2011      	movs	r0, #17
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    b7c8:	4b39      	ldr	r3, [pc, #228]	; (b8b0 <mem_manage_fault.constprop.0+0x128>)
    b7ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b7cc:	071c      	lsls	r4, r3, #28
    b7ce:	d50b      	bpl.n	b7e8 <mem_manage_fault.constprop.0+0x60>
		reason = K_ERR_ARM_MEM_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
    b7d0:	4b39      	ldr	r3, [pc, #228]	; (b8b8 <mem_manage_fault.constprop.0+0x130>)
    b7d2:	4836      	ldr	r0, [pc, #216]	; (b8ac <mem_manage_fault.constprop.0+0x124>)
    b7d4:	617b      	str	r3, [r7, #20]
    b7d6:	2302      	movs	r3, #2
    b7d8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b7dc:	613b      	str	r3, [r7, #16]
    b7de:	f107 0210 	add.w	r2, r7, #16
    b7e2:	f00c fc59 	bl	18098 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_UNSTACKING;
    b7e6:	2012      	movs	r0, #18
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    b7e8:	4c31      	ldr	r4, [pc, #196]	; (b8b0 <mem_manage_fault.constprop.0+0x128>)
    b7ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    b7ec:	0799      	lsls	r1, r3, #30
    b7ee:	d523      	bpl.n	b838 <mem_manage_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
		PR_FAULT_INFO("  Data Access Violation");
    b7f0:	46e8      	mov	r8, sp
    b7f2:	4b32      	ldr	r3, [pc, #200]	; (b8bc <mem_manage_fault.constprop.0+0x134>)
    b7f4:	f107 0210 	add.w	r2, r7, #16
    b7f8:	617b      	str	r3, [r7, #20]
    b7fa:	2302      	movs	r3, #2
    b7fc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b800:	613b      	str	r3, [r7, #16]
    b802:	482a      	ldr	r0, [pc, #168]	; (b8ac <mem_manage_fault.constprop.0+0x124>)
    b804:	f00c fc48 	bl	18098 <z_log_msg_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    b808:	6b63      	ldr	r3, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    b80a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    b80c:	0612      	lsls	r2, r2, #24
    b80e:	d512      	bpl.n	b836 <mem_manage_fault.constprop.0+0xae>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    b810:	b088      	sub	sp, #32
    b812:	466a      	mov	r2, sp
    b814:	492a      	ldr	r1, [pc, #168]	; (b8c0 <mem_manage_fault.constprop.0+0x138>)
    b816:	4825      	ldr	r0, [pc, #148]	; (b8ac <mem_manage_fault.constprop.0+0x124>)
    b818:	e9c2 1305 	strd	r1, r3, [r2, #20]
    b81c:	2303      	movs	r3, #3
    b81e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b822:	f842 3f10 	str.w	r3, [r2, #16]!
    b826:	f00c fc37 	bl	18098 <z_log_msg_static_create.constprop.0>
    b82a:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    b82c:	b11e      	cbz	r6, b836 <mem_manage_fault.constprop.0+0xae>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    b82e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    b830:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    b834:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    b836:	2013      	movs	r0, #19
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    b838:	4b1d      	ldr	r3, [pc, #116]	; (b8b0 <mem_manage_fault.constprop.0+0x128>)
    b83a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b83c:	07de      	lsls	r6, r3, #31
    b83e:	d50b      	bpl.n	b858 <mem_manage_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
		PR_FAULT_INFO("  Instruction Access Violation");
    b840:	4b20      	ldr	r3, [pc, #128]	; (b8c4 <mem_manage_fault.constprop.0+0x13c>)
    b842:	481a      	ldr	r0, [pc, #104]	; (b8ac <mem_manage_fault.constprop.0+0x124>)
    b844:	617b      	str	r3, [r7, #20]
    b846:	2302      	movs	r3, #2
    b848:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b84c:	613b      	str	r3, [r7, #16]
    b84e:	f107 0210 	add.w	r2, r7, #16
    b852:	f00c fc21 	bl	18098 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    b856:	2014      	movs	r0, #20
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    b858:	4b15      	ldr	r3, [pc, #84]	; (b8b0 <mem_manage_fault.constprop.0+0x128>)
    b85a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b85c:	069c      	lsls	r4, r3, #26
    b85e:	d50b      	bpl.n	b878 <mem_manage_fault.constprop.0+0xf0>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
		PR_FAULT_INFO(
    b860:	4b19      	ldr	r3, [pc, #100]	; (b8c8 <mem_manage_fault.constprop.0+0x140>)
    b862:	4812      	ldr	r0, [pc, #72]	; (b8ac <mem_manage_fault.constprop.0+0x124>)
    b864:	617b      	str	r3, [r7, #20]
    b866:	2302      	movs	r3, #2
    b868:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b86c:	613b      	str	r3, [r7, #16]
    b86e:	f107 0210 	add.w	r2, r7, #16
    b872:	f00c fc11 	bl	18098 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    b876:	2015      	movs	r0, #21
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    b878:	4b0d      	ldr	r3, [pc, #52]	; (b8b0 <mem_manage_fault.constprop.0+0x128>)

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
    b87a:	3718      	adds	r7, #24
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    b87c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b87e:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    b880:	bf58      	it	pl
    b882:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    b884:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b886:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    b888:	bf42      	ittt	mi
    b88a:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    b88c:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    b890:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    b892:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b894:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    b898:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    b89a:	2300      	movs	r3, #0
    b89c:	702b      	strb	r3, [r5, #0]
}
    b89e:	46bd      	mov	sp, r7
    b8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    b8a4:	2010      	movs	r0, #16
    b8a6:	e78f      	b.n	b7c8 <mem_manage_fault.constprop.0+0x40>
    b8a8:	0001c87c 	.word	0x0001c87c
    b8ac:	0001b930 	.word	0x0001b930
    b8b0:	e000ed00 	.word	0xe000ed00
    b8b4:	0001c892 	.word	0x0001c892
    b8b8:	0001c8c5 	.word	0x0001c8c5
    b8bc:	0001c8d8 	.word	0x0001c8d8
    b8c0:	0001c8f0 	.word	0x0001c8f0
    b8c4:	0001c906 	.word	0x0001c906
    b8c8:	0001c925 	.word	0x0001c925

0000b8cc <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    b8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b8d0:	b086      	sub	sp, #24
    b8d2:	4606      	mov	r6, r0
    b8d4:	460d      	mov	r5, r1
    b8d6:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
    b8d8:	2402      	movs	r4, #2
    b8da:	4b47      	ldr	r3, [pc, #284]	; (b9f8 <bus_fault.constprop.0+0x12c>)
    b8dc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b8e0:	617b      	str	r3, [r7, #20]
    b8e2:	4846      	ldr	r0, [pc, #280]	; (b9fc <bus_fault.constprop.0+0x130>)
    b8e4:	613c      	str	r4, [r7, #16]
    b8e6:	f107 0210 	add.w	r2, r7, #16
    b8ea:	f00c fbd5 	bl	18098 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    b8ee:	4b44      	ldr	r3, [pc, #272]	; (ba00 <bus_fault.constprop.0+0x134>)
    b8f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b8f2:	04d9      	lsls	r1, r3, #19
    b8f4:	d56d      	bpl.n	b9d2 <bus_fault.constprop.0+0x106>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
    b8f6:	4b43      	ldr	r3, [pc, #268]	; (ba04 <bus_fault.constprop.0+0x138>)
    b8f8:	4840      	ldr	r0, [pc, #256]	; (b9fc <bus_fault.constprop.0+0x130>)
    b8fa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b8fe:	e9c7 4304 	strd	r4, r3, [r7, #16]
    b902:	f107 0210 	add.w	r2, r7, #16
    b906:	f00c fbc7 	bl	18098 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
    b90a:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    b90c:	4b3c      	ldr	r3, [pc, #240]	; (ba00 <bus_fault.constprop.0+0x134>)
    b90e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b910:	051a      	lsls	r2, r3, #20
    b912:	d50b      	bpl.n	b92c <bus_fault.constprop.0+0x60>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
    b914:	4b3c      	ldr	r3, [pc, #240]	; (ba08 <bus_fault.constprop.0+0x13c>)
    b916:	4839      	ldr	r0, [pc, #228]	; (b9fc <bus_fault.constprop.0+0x130>)
    b918:	617b      	str	r3, [r7, #20]
    b91a:	2302      	movs	r3, #2
    b91c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b920:	613b      	str	r3, [r7, #16]
    b922:	f107 0210 	add.w	r2, r7, #16
    b926:	f00c fbb7 	bl	18098 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
    b92a:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    b92c:	4c34      	ldr	r4, [pc, #208]	; (ba00 <bus_fault.constprop.0+0x134>)
    b92e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    b930:	059b      	lsls	r3, r3, #22
    b932:	d523      	bpl.n	b97c <bus_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
    b934:	46e8      	mov	r8, sp
    b936:	4b35      	ldr	r3, [pc, #212]	; (ba0c <bus_fault.constprop.0+0x140>)
    b938:	4830      	ldr	r0, [pc, #192]	; (b9fc <bus_fault.constprop.0+0x130>)
    b93a:	617b      	str	r3, [r7, #20]
    b93c:	2302      	movs	r3, #2
    b93e:	f107 0210 	add.w	r2, r7, #16
    b942:	613b      	str	r3, [r7, #16]
    b944:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b948:	f00c fba6 	bl	18098 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    b94c:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    b94e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    b950:	0410      	lsls	r0, r2, #16
    b952:	d512      	bpl.n	b97a <bus_fault.constprop.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    b954:	b088      	sub	sp, #32
    b956:	466a      	mov	r2, sp
    b958:	492d      	ldr	r1, [pc, #180]	; (ba10 <bus_fault.constprop.0+0x144>)
    b95a:	4828      	ldr	r0, [pc, #160]	; (b9fc <bus_fault.constprop.0+0x130>)
    b95c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    b960:	2303      	movs	r3, #3
    b962:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b966:	f842 3f10 	str.w	r3, [r2, #16]!
    b96a:	f00c fb95 	bl	18098 <z_log_msg_static_create.constprop.0>
    b96e:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    b970:	b11e      	cbz	r6, b97a <bus_fault.constprop.0+0xae>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    b972:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    b974:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    b978:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    b97a:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    b97c:	4b20      	ldr	r3, [pc, #128]	; (ba00 <bus_fault.constprop.0+0x134>)
    b97e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b980:	0559      	lsls	r1, r3, #21
    b982:	d50b      	bpl.n	b99c <bus_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
    b984:	4b23      	ldr	r3, [pc, #140]	; (ba14 <bus_fault.constprop.0+0x148>)
    b986:	481d      	ldr	r0, [pc, #116]	; (b9fc <bus_fault.constprop.0+0x130>)
    b988:	617b      	str	r3, [r7, #20]
    b98a:	2302      	movs	r3, #2
    b98c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b990:	613b      	str	r3, [r7, #16]
    b992:	f107 0210 	add.w	r2, r7, #16
    b996:	f00c fb7f 	bl	18098 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    b99a:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    b99c:	4b18      	ldr	r3, [pc, #96]	; (ba00 <bus_fault.constprop.0+0x134>)
    b99e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b9a0:	05d2      	lsls	r2, r2, #23
    b9a2:	d518      	bpl.n	b9d6 <bus_fault.constprop.0+0x10a>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
    b9a4:	4b1c      	ldr	r3, [pc, #112]	; (ba18 <bus_fault.constprop.0+0x14c>)
    b9a6:	4815      	ldr	r0, [pc, #84]	; (b9fc <bus_fault.constprop.0+0x130>)
    b9a8:	617b      	str	r3, [r7, #20]
    b9aa:	2302      	movs	r3, #2
    b9ac:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b9b0:	613b      	str	r3, [r7, #16]
    b9b2:	f107 0210 	add.w	r2, r7, #16
    b9b6:	f00c fb6f 	bl	18098 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    b9ba:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    b9bc:	4a10      	ldr	r2, [pc, #64]	; (ba00 <bus_fault.constprop.0+0x134>)

	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
    b9be:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    b9c0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    b9c2:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    b9c6:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    b9c8:	2300      	movs	r3, #0
    b9ca:	702b      	strb	r3, [r5, #0]
}
    b9cc:	46bd      	mov	sp, r7
    b9ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    b9d2:	2016      	movs	r0, #22
    b9d4:	e79a      	b.n	b90c <bus_fault.constprop.0+0x40>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    b9d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b9d8:	049b      	lsls	r3, r3, #18
    b9da:	d5ef      	bpl.n	b9bc <bus_fault.constprop.0+0xf0>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    b9dc:	4b0f      	ldr	r3, [pc, #60]	; (ba1c <bus_fault.constprop.0+0x150>)
    b9de:	4807      	ldr	r0, [pc, #28]	; (b9fc <bus_fault.constprop.0+0x130>)
    b9e0:	617b      	str	r3, [r7, #20]
    b9e2:	2302      	movs	r3, #2
    b9e4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b9e8:	613b      	str	r3, [r7, #16]
    b9ea:	f107 0210 	add.w	r2, r7, #16
    b9ee:	f00c fb53 	bl	18098 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    b9f2:	201c      	movs	r0, #28
    b9f4:	e7e2      	b.n	b9bc <bus_fault.constprop.0+0xf0>
    b9f6:	bf00      	nop
    b9f8:	0001c954 	.word	0x0001c954
    b9fc:	0001b930 	.word	0x0001b930
    ba00:	e000ed00 	.word	0xe000ed00
    ba04:	0001c96a 	.word	0x0001c96a
    ba08:	0001c8c5 	.word	0x0001c8c5
    ba0c:	0001c97b 	.word	0x0001c97b
    ba10:	0001c994 	.word	0x0001c994
    ba14:	0001c9a9 	.word	0x0001c9a9
    ba18:	0001c9c4 	.word	0x0001c9c4
    ba1c:	0001c925 	.word	0x0001c925

0000ba20 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    ba20:	b510      	push	{r4, lr}
    ba22:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    ba24:	2402      	movs	r4, #2
    ba26:	4b3e      	ldr	r3, [pc, #248]	; (bb20 <usage_fault.constprop.0+0x100>)
    ba28:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ba2c:	483d      	ldr	r0, [pc, #244]	; (bb24 <usage_fault.constprop.0+0x104>)
    ba2e:	aa04      	add	r2, sp, #16
    ba30:	9305      	str	r3, [sp, #20]
    ba32:	9404      	str	r4, [sp, #16]
    ba34:	f00c fb30 	bl	18098 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    ba38:	4b3b      	ldr	r3, [pc, #236]	; (bb28 <usage_fault.constprop.0+0x108>)
    ba3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ba3c:	0199      	lsls	r1, r3, #6
    ba3e:	d56c      	bpl.n	bb1a <usage_fault.constprop.0+0xfa>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
    ba40:	4b3a      	ldr	r3, [pc, #232]	; (bb2c <usage_fault.constprop.0+0x10c>)
    ba42:	4838      	ldr	r0, [pc, #224]	; (bb24 <usage_fault.constprop.0+0x104>)
    ba44:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ba48:	aa04      	add	r2, sp, #16
    ba4a:	e9cd 4304 	strd	r4, r3, [sp, #16]
    ba4e:	f00c fb23 	bl	18098 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
    ba52:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    ba54:	4b34      	ldr	r3, [pc, #208]	; (bb28 <usage_fault.constprop.0+0x108>)
    ba56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ba58:	01da      	lsls	r2, r3, #7
    ba5a:	d50a      	bpl.n	ba72 <usage_fault.constprop.0+0x52>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
    ba5c:	4b34      	ldr	r3, [pc, #208]	; (bb30 <usage_fault.constprop.0+0x110>)
    ba5e:	4831      	ldr	r0, [pc, #196]	; (bb24 <usage_fault.constprop.0+0x104>)
    ba60:	9305      	str	r3, [sp, #20]
    ba62:	2302      	movs	r3, #2
    ba64:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ba68:	aa04      	add	r2, sp, #16
    ba6a:	9304      	str	r3, [sp, #16]
    ba6c:	f00c fb14 	bl	18098 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    ba70:	201f      	movs	r0, #31
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    ba72:	4b2d      	ldr	r3, [pc, #180]	; (bb28 <usage_fault.constprop.0+0x108>)
    ba74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ba76:	02db      	lsls	r3, r3, #11
    ba78:	d50a      	bpl.n	ba90 <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_STACK_OVERFLOW;
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    ba7a:	2402      	movs	r4, #2
    ba7c:	4b2d      	ldr	r3, [pc, #180]	; (bb34 <usage_fault.constprop.0+0x114>)
    ba7e:	4829      	ldr	r0, [pc, #164]	; (bb24 <usage_fault.constprop.0+0x104>)
    ba80:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ba84:	aa04      	add	r2, sp, #16
    ba86:	9305      	str	r3, [sp, #20]
    ba88:	9404      	str	r4, [sp, #16]
    ba8a:	f00c fb05 	bl	18098 <z_log_msg_static_create.constprop.0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    ba8e:	4620      	mov	r0, r4
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    ba90:	4b25      	ldr	r3, [pc, #148]	; (bb28 <usage_fault.constprop.0+0x108>)
    ba92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ba94:	031c      	lsls	r4, r3, #12
    ba96:	d50a      	bpl.n	baae <usage_fault.constprop.0+0x8e>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
    ba98:	4b27      	ldr	r3, [pc, #156]	; (bb38 <usage_fault.constprop.0+0x118>)
    ba9a:	4822      	ldr	r0, [pc, #136]	; (bb24 <usage_fault.constprop.0+0x104>)
    ba9c:	9305      	str	r3, [sp, #20]
    ba9e:	2302      	movs	r3, #2
    baa0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    baa4:	aa04      	add	r2, sp, #16
    baa6:	9304      	str	r3, [sp, #16]
    baa8:	f00c faf6 	bl	18098 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    baac:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    baae:	4b1e      	ldr	r3, [pc, #120]	; (bb28 <usage_fault.constprop.0+0x108>)
    bab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    bab2:	0359      	lsls	r1, r3, #13
    bab4:	d50a      	bpl.n	bacc <usage_fault.constprop.0+0xac>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    bab6:	4b21      	ldr	r3, [pc, #132]	; (bb3c <usage_fault.constprop.0+0x11c>)
    bab8:	481a      	ldr	r0, [pc, #104]	; (bb24 <usage_fault.constprop.0+0x104>)
    baba:	9305      	str	r3, [sp, #20]
    babc:	2302      	movs	r3, #2
    babe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bac2:	aa04      	add	r2, sp, #16
    bac4:	9304      	str	r3, [sp, #16]
    bac6:	f00c fae7 	bl	18098 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    baca:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    bacc:	4b16      	ldr	r3, [pc, #88]	; (bb28 <usage_fault.constprop.0+0x108>)
    bace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    bad0:	039a      	lsls	r2, r3, #14
    bad2:	d50a      	bpl.n	baea <usage_fault.constprop.0+0xca>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
    bad4:	4b1a      	ldr	r3, [pc, #104]	; (bb40 <usage_fault.constprop.0+0x120>)
    bad6:	4813      	ldr	r0, [pc, #76]	; (bb24 <usage_fault.constprop.0+0x104>)
    bad8:	9305      	str	r3, [sp, #20]
    bada:	2302      	movs	r3, #2
    badc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bae0:	aa04      	add	r2, sp, #16
    bae2:	9304      	str	r3, [sp, #16]
    bae4:	f00c fad8 	bl	18098 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    bae8:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    baea:	4b0f      	ldr	r3, [pc, #60]	; (bb28 <usage_fault.constprop.0+0x108>)
    baec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    baee:	03db      	lsls	r3, r3, #15
    baf0:	d50a      	bpl.n	bb08 <usage_fault.constprop.0+0xe8>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    baf2:	4b14      	ldr	r3, [pc, #80]	; (bb44 <usage_fault.constprop.0+0x124>)
    baf4:	480b      	ldr	r0, [pc, #44]	; (bb24 <usage_fault.constprop.0+0x104>)
    baf6:	9305      	str	r3, [sp, #20]
    baf8:	2302      	movs	r3, #2
    bafa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bafe:	aa04      	add	r2, sp, #16
    bb00:	9304      	str	r3, [sp, #16]
    bb02:	f00c fac9 	bl	18098 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    bb06:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    bb08:	4a07      	ldr	r2, [pc, #28]	; (bb28 <usage_fault.constprop.0+0x108>)
    bb0a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    bb0c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    bb10:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    bb14:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    bb16:	b006      	add	sp, #24
    bb18:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    bb1a:	201d      	movs	r0, #29
    bb1c:	e79a      	b.n	ba54 <usage_fault.constprop.0+0x34>
    bb1e:	bf00      	nop
    bb20:	0001c9dc 	.word	0x0001c9dc
    bb24:	0001b930 	.word	0x0001b930
    bb28:	e000ed00 	.word	0xe000ed00
    bb2c:	0001c9f4 	.word	0x0001c9f4
    bb30:	0001ca07 	.word	0x0001ca07
    bb34:	0001ca21 	.word	0x0001ca21
    bb38:	0001ca4b 	.word	0x0001ca4b
    bb3c:	0001ca69 	.word	0x0001ca69
    bb40:	0001ca8e 	.word	0x0001ca8e
    bb44:	0001caa8 	.word	0x0001caa8

0000bb48 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    bb48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bb4c:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    bb4e:	4b7a      	ldr	r3, [pc, #488]	; (bd38 <z_arm_fault+0x1f0>)
{
    bb50:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    bb52:	f8d3 9004 	ldr.w	r9, [r3, #4]
{
    bb56:	468a      	mov	sl, r1
    bb58:	4614      	mov	r4, r2
    bb5a:	2600      	movs	r6, #0
    bb5c:	af00      	add	r7, sp, #0
    bb5e:	f3c9 0808 	ubfx	r8, r9, #0, #9
    bb62:	f386 8811 	msr	BASEPRI, r6
    bb66:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    bb6a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    bb6e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    bb72:	d125      	bne.n	bbc0 <z_arm_fault+0x78>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    bb74:	07d3      	lsls	r3, r2, #31
    bb76:	d423      	bmi.n	bbc0 <z_arm_fault+0x78>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    bb78:	0650      	lsls	r0, r2, #25
    bb7a:	d403      	bmi.n	bb84 <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    bb7c:	0711      	lsls	r1, r2, #28
    bb7e:	d40f      	bmi.n	bba0 <z_arm_fault+0x58>
			*nested_exc = true;
    bb80:	2601      	movs	r6, #1
    bb82:	e00f      	b.n	bba4 <z_arm_fault+0x5c>
		PR_FAULT_INFO("Exception occurred in Secure State");
    bb84:	4b6d      	ldr	r3, [pc, #436]	; (bd3c <z_arm_fault+0x1f4>)
    bb86:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bb8a:	61fb      	str	r3, [r7, #28]
    bb8c:	2302      	movs	r3, #2
    bb8e:	486c      	ldr	r0, [pc, #432]	; (bd40 <z_arm_fault+0x1f8>)
    bb90:	61bb      	str	r3, [r7, #24]
    bb92:	f107 0218 	add.w	r2, r7, #24
    bb96:	f00c fa7f 	bl	18098 <z_log_msg_static_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    bb9a:	f014 0404 	ands.w	r4, r4, #4
    bb9e:	d000      	beq.n	bba2 <z_arm_fault+0x5a>
			ptr_esf = (z_arch_esf_t *)psp;
    bba0:	4655      	mov	r5, sl
	*nested_exc = false;
    bba2:	2600      	movs	r6, #0
	*recoverable = false;
    bba4:	2300      	movs	r3, #0
    bba6:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    bba8:	f1a8 0303 	sub.w	r3, r8, #3
    bbac:	2b09      	cmp	r3, #9
    bbae:	f200 80a2 	bhi.w	bcf6 <z_arm_fault+0x1ae>
    bbb2:	e8df f003 	tbb	[pc, r3]
    bbb6:	9507      	.short	0x9507
    bbb8:	a0a09198 	.word	0xa0a09198
    bbbc:	9ba0a0a0 	.word	0x9ba0a0a0
		return NULL;
    bbc0:	4635      	mov	r5, r6
    bbc2:	e7ef      	b.n	bba4 <z_arm_fault+0x5c>
	PR_FAULT_INFO("***** HARD FAULT *****");
    bbc4:	46e9      	mov	r9, sp
    bbc6:	f04f 0802 	mov.w	r8, #2
    bbca:	4b5e      	ldr	r3, [pc, #376]	; (bd44 <z_arm_fault+0x1fc>)
    bbcc:	f107 0218 	add.w	r2, r7, #24
    bbd0:	61fb      	str	r3, [r7, #28]
    bbd2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bbd6:	485a      	ldr	r0, [pc, #360]	; (bd40 <z_arm_fault+0x1f8>)
    bbd8:	f8c7 8018 	str.w	r8, [r7, #24]
    bbdc:	f00c fa5c 	bl	18098 <z_log_msg_static_create.constprop.0>
	*recoverable = false;
    bbe0:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    bbe2:	4c55      	ldr	r4, [pc, #340]	; (bd38 <z_arm_fault+0x1f0>)
	*recoverable = false;
    bbe4:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    bbe6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    bbe8:	079a      	lsls	r2, r3, #30
    bbea:	d50b      	bpl.n	bc04 <z_arm_fault+0xbc>
		PR_EXC("  Bus fault on vector table read");
    bbec:	4b56      	ldr	r3, [pc, #344]	; (bd48 <z_arm_fault+0x200>)
		PR_EXC("  Debug event");
    bbee:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
    bbf2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bbf6:	4852      	ldr	r0, [pc, #328]	; (bd40 <z_arm_fault+0x1f8>)
    bbf8:	f107 0218 	add.w	r2, r7, #24
    bbfc:	f00c fa4c 	bl	18098 <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    bc00:	2400      	movs	r4, #0
    bc02:	e038      	b.n	bc76 <z_arm_fault+0x12e>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    bc04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    bc06:	2b00      	cmp	r3, #0
    bc08:	da01      	bge.n	bc0e <z_arm_fault+0xc6>
		PR_EXC("  Debug event");
    bc0a:	4b50      	ldr	r3, [pc, #320]	; (bd4c <z_arm_fault+0x204>)
    bc0c:	e7ef      	b.n	bbee <z_arm_fault+0xa6>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    bc0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    bc10:	005b      	lsls	r3, r3, #1
    bc12:	d5f5      	bpl.n	bc00 <z_arm_fault+0xb8>
		PR_EXC("  Fault escalation (see below)");
    bc14:	4b4e      	ldr	r3, [pc, #312]	; (bd50 <z_arm_fault+0x208>)
    bc16:	f107 0218 	add.w	r2, r7, #24
    bc1a:	e9c7 8306 	strd	r8, r3, [r7, #24]
    bc1e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bc22:	4847      	ldr	r0, [pc, #284]	; (bd40 <z_arm_fault+0x1f8>)
    bc24:	f00c fa38 	bl	18098 <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    bc28:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    bc2a:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    bc2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    bc30:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    bc32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    bc36:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    bc3a:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    bc3c:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    bc40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    bc44:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    bc46:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    bc4a:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    bc4e:	f64d 7302 	movw	r3, #57090	; 0xdf02
    bc52:	429a      	cmp	r2, r3
    bc54:	d12b      	bne.n	bcae <z_arm_fault+0x166>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    bc56:	b088      	sub	sp, #32
    bc58:	682b      	ldr	r3, [r5, #0]
    bc5a:	466a      	mov	r2, sp
    bc5c:	493d      	ldr	r1, [pc, #244]	; (bd54 <z_arm_fault+0x20c>)
    bc5e:	4838      	ldr	r0, [pc, #224]	; (bd40 <z_arm_fault+0x1f8>)
    bc60:	e9c2 1305 	strd	r1, r3, [r2, #20]
    bc64:	2303      	movs	r3, #3
    bc66:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bc6a:	f842 3f10 	str.w	r3, [r2, #16]!
    bc6e:	f00c fa13 	bl	18098 <z_log_msg_static_create.constprop.0>
    bc72:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
    bc74:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    bc76:	79fb      	ldrb	r3, [r7, #7]
    bc78:	b9ab      	cbnz	r3, bca6 <z_arm_fault+0x15e>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    bc7a:	2220      	movs	r2, #32
    bc7c:	4629      	mov	r1, r5
    bc7e:	f107 0008 	add.w	r0, r7, #8
    bc82:	f00c fa94 	bl	181ae <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    bc86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    bc88:	2e00      	cmp	r6, #0
    bc8a:	d050      	beq.n	bd2e <z_arm_fault+0x1e6>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    bc8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    bc90:	b922      	cbnz	r2, bc9c <z_arm_fault+0x154>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    bc92:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    bc96:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    bc9a:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    bc9c:	4620      	mov	r0, r4
    bc9e:	f107 0108 	add.w	r1, r7, #8
    bca2:	f7ff fbe9 	bl	b478 <z_arm_fatal_error>
}
    bca6:	3728      	adds	r7, #40	; 0x28
    bca8:	46bd      	mov	sp, r7
    bcaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    bcae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    bcb0:	b2db      	uxtb	r3, r3
    bcb2:	b123      	cbz	r3, bcbe <z_arm_fault+0x176>
			reason = mem_manage_fault(esf, 1, recoverable);
    bcb4:	2001      	movs	r0, #1
    bcb6:	1df9      	adds	r1, r7, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    bcb8:	f7ff fd66 	bl	b788 <mem_manage_fault.constprop.0>
    bcbc:	e00e      	b.n	bcdc <z_arm_fault+0x194>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    bcbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    bcc0:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    bcc4:	d004      	beq.n	bcd0 <z_arm_fault+0x188>
			reason = bus_fault(esf, 1, recoverable);
    bcc6:	2001      	movs	r0, #1
    bcc8:	1df9      	adds	r1, r7, #7
		reason = bus_fault(esf, 0, recoverable);
    bcca:	f7ff fdff 	bl	b8cc <bus_fault.constprop.0>
    bcce:	e005      	b.n	bcdc <z_arm_fault+0x194>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    bcd0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    bcd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    bcd6:	d393      	bcc.n	bc00 <z_arm_fault+0xb8>
			reason = usage_fault(esf);
    bcd8:	f7ff fea2 	bl	ba20 <usage_fault.constprop.0>
    bcdc:	4604      	mov	r4, r0
    bcde:	e7ca      	b.n	bc76 <z_arm_fault+0x12e>
		reason = mem_manage_fault(esf, 0, recoverable);
    bce0:	2000      	movs	r0, #0
    bce2:	1df9      	adds	r1, r7, #7
    bce4:	e7e8      	b.n	bcb8 <z_arm_fault+0x170>
		reason = bus_fault(esf, 0, recoverable);
    bce6:	2000      	movs	r0, #0
    bce8:	1df9      	adds	r1, r7, #7
    bcea:	e7ee      	b.n	bcca <z_arm_fault+0x182>
	PR_FAULT_INFO(
    bcec:	4b1a      	ldr	r3, [pc, #104]	; (bd58 <z_arm_fault+0x210>)
    bcee:	61fb      	str	r3, [r7, #28]
    bcf0:	2302      	movs	r3, #2
    bcf2:	61bb      	str	r3, [r7, #24]
    bcf4:	e77d      	b.n	bbf2 <z_arm_fault+0xaa>
	PR_FAULT_INFO("***** %s %d) *****",
    bcf6:	4a19      	ldr	r2, [pc, #100]	; (bd5c <z_arm_fault+0x214>)
    bcf8:	466c      	mov	r4, sp
    bcfa:	f419 7ff8 	tst.w	r9, #496	; 0x1f0
    bcfe:	b08a      	sub	sp, #40	; 0x28
    bd00:	4b17      	ldr	r3, [pc, #92]	; (bd60 <z_arm_fault+0x218>)
    bd02:	bf18      	it	ne
    bd04:	4613      	movne	r3, r2
    bd06:	466a      	mov	r2, sp
    bd08:	4916      	ldr	r1, [pc, #88]	; (bd64 <z_arm_fault+0x21c>)
    bd0a:	480d      	ldr	r0, [pc, #52]	; (bd40 <z_arm_fault+0x1f8>)
    bd0c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    bd10:	f1a8 0310 	sub.w	r3, r8, #16
    bd14:	61d3      	str	r3, [r2, #28]
    bd16:	f44f 7300 	mov.w	r3, #512	; 0x200
    bd1a:	8413      	strh	r3, [r2, #32]
    bd1c:	4b12      	ldr	r3, [pc, #72]	; (bd68 <z_arm_fault+0x220>)
    bd1e:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    bd22:	f842 3f10 	str.w	r3, [r2, #16]!
    bd26:	f00c f9b7 	bl	18098 <z_log_msg_static_create.constprop.0>
    bd2a:	46a5      	mov	sp, r4
}
    bd2c:	e768      	b.n	bc00 <z_arm_fault+0xb8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    bd2e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    bd32:	f023 0301 	bic.w	r3, r3, #1
    bd36:	e7b0      	b.n	bc9a <z_arm_fault+0x152>
    bd38:	e000ed00 	.word	0xe000ed00
    bd3c:	0001cb01 	.word	0x0001cb01
    bd40:	0001b930 	.word	0x0001b930
    bd44:	0001cb24 	.word	0x0001cb24
    bd48:	0001cb3b 	.word	0x0001cb3b
    bd4c:	0001cb5c 	.word	0x0001cb5c
    bd50:	0001cb6a 	.word	0x0001cb6a
    bd54:	0001cb89 	.word	0x0001cb89
    bd58:	0001cba5 	.word	0x0001cba5
    bd5c:	0001cae8 	.word	0x0001cae8
    bd60:	0001cad3 	.word	0x0001cad3
    bd64:	0001cbc9 	.word	0x0001cbc9
    bd68:	01000004 	.word	0x01000004

0000bd6c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    bd6c:	4b04      	ldr	r3, [pc, #16]	; (bd80 <z_arm_fault_init+0x14>)
    bd6e:	695a      	ldr	r2, [r3, #20]
    bd70:	f042 0210 	orr.w	r2, r2, #16
    bd74:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    bd76:	695a      	ldr	r2, [r3, #20]
    bd78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    bd7c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    bd7e:	4770      	bx	lr
    bd80:	e000ed00 	.word	0xe000ed00

0000bd84 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    bd84:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    bd88:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    bd8c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    bd8e:	4672      	mov	r2, lr
	bl z_arm_fault
    bd90:	f7ff feda 	bl	bb48 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    bd94:	bd01      	pop	{r0, pc}
    bd96:	bf00      	nop

0000bd98 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    bd98:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    bd9a:	2120      	movs	r1, #32
    bd9c:	4803      	ldr	r0, [pc, #12]	; (bdac <z_arm_interrupt_init+0x14>)
    bd9e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    bda0:	3301      	adds	r3, #1
    bda2:	2b45      	cmp	r3, #69	; 0x45
    bda4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    bda8:	d1f9      	bne.n	bd9e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    bdaa:	4770      	bx	lr
    bdac:	e000e100 	.word	0xe000e100

0000bdb0 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    bdb0:	2000      	movs	r0, #0
    msr CONTROL, r0
    bdb2:	f380 8814 	msr	CONTROL, r0
    isb
    bdb6:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    bdba:	2000      	movs	r0, #0
    msr MSPLIM, r0
    bdbc:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    bdc0:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    bdc4:	f7fd ff32 	bl	9c2c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    bdc8:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    bdca:	490e      	ldr	r1, [pc, #56]	; (be04 <__start+0x54>)
    str r0, [r1]
    bdcc:	6008      	str	r0, [r1, #0]
    dsb
    bdce:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    bdd2:	480d      	ldr	r0, [pc, #52]	; (be08 <__start+0x58>)
    msr msp, r0
    bdd4:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    bdd8:	f000 f83e 	bl	be58 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    bddc:	2020      	movs	r0, #32
    msr BASEPRI, r0
    bdde:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    bde2:	480a      	ldr	r0, [pc, #40]	; (be0c <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    bde4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    bde8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    bdea:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    bdee:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    bdf2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    bdf4:	4308      	orrs	r0, r1
    msr CONTROL, r0
    bdf6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    bdfa:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    bdfe:	f7ff fbeb 	bl	b5d8 <z_arm_prep_c>
    be02:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    be04:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    be08:	2000c728 	.word	0x2000c728
    ldr r0, =z_interrupt_stacks
    be0c:	2000b5e8 	.word	0x2000b5e8

0000be10 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    be10:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    be14:	4905      	ldr	r1, [pc, #20]	; (be2c <sys_arch_reboot+0x1c>)
    be16:	4b06      	ldr	r3, [pc, #24]	; (be30 <sys_arch_reboot+0x20>)
    be18:	68ca      	ldr	r2, [r1, #12]
    be1a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    be1e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    be20:	60cb      	str	r3, [r1, #12]
    be22:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    be26:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    be28:	e7fd      	b.n	be26 <sys_arch_reboot+0x16>
    be2a:	bf00      	nop
    be2c:	e000ed00 	.word	0xe000ed00
    be30:	05fa0004 	.word	0x05fa0004

0000be34 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    be34:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    be36:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    be38:	4906      	ldr	r1, [pc, #24]	; (be54 <z_arm_clear_arm_mpu_config+0x20>)
    be3a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    be3e:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    be42:	4293      	cmp	r3, r2
    be44:	db00      	blt.n	be48 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    be46:	4770      	bx	lr
  mpu->RNR = rnr;
    be48:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    be4c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    be50:	3301      	adds	r3, #1
    be52:	e7f6      	b.n	be42 <z_arm_clear_arm_mpu_config+0xe>
    be54:	e000ed00 	.word	0xe000ed00

0000be58 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    be58:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    be5a:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    be5c:	2400      	movs	r4, #0
    be5e:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    be62:	f7ff ffe7 	bl	be34 <z_arm_clear_arm_mpu_config>
    be66:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    be68:	f04f 30ff 	mov.w	r0, #4294967295
    be6c:	4a0c      	ldr	r2, [pc, #48]	; (bea0 <z_arm_init_arch_hw_at_boot+0x48>)
    be6e:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    be72:	3301      	adds	r3, #1
    be74:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    be76:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    be7a:	d1f8      	bne.n	be6e <z_arm_init_arch_hw_at_boot+0x16>
    be7c:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    be7e:	f04f 30ff 	mov.w	r0, #4294967295
    be82:	4a07      	ldr	r2, [pc, #28]	; (bea0 <z_arm_init_arch_hw_at_boot+0x48>)
    be84:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    be88:	3301      	adds	r3, #1
    be8a:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    be8c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    be90:	d1f8      	bne.n	be84 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    be92:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    be94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    be98:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    be9c:	bd10      	pop	{r4, pc}
    be9e:	bf00      	nop
    bea0:	e000e100 	.word	0xe000e100

0000bea4 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    bea4:	4b08      	ldr	r3, [pc, #32]	; (bec8 <z_impl_k_thread_abort+0x24>)
    bea6:	689b      	ldr	r3, [r3, #8]
    bea8:	4283      	cmp	r3, r0
    beaa:	d10b      	bne.n	bec4 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    beac:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    beb0:	b143      	cbz	r3, bec4 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    beb2:	4b06      	ldr	r3, [pc, #24]	; (becc <z_impl_k_thread_abort+0x28>)
    beb4:	685a      	ldr	r2, [r3, #4]
    beb6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    beba:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    bebc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    bebe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    bec2:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    bec4:	f00a b8dc 	b.w	16080 <z_thread_abort>
    bec8:	20009b90 	.word	0x20009b90
    becc:	e000ed00 	.word	0xe000ed00

0000bed0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    bed0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    bed2:	4c09      	ldr	r4, [pc, #36]	; (bef8 <z_arm_configure_static_mpu_regions+0x28>)
    bed4:	4a09      	ldr	r2, [pc, #36]	; (befc <z_arm_configure_static_mpu_regions+0x2c>)
    bed6:	4623      	mov	r3, r4
    bed8:	2101      	movs	r1, #1
    beda:	4809      	ldr	r0, [pc, #36]	; (bf00 <z_arm_configure_static_mpu_regions+0x30>)
    bedc:	f000 f92a 	bl	c134 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    bee0:	2300      	movs	r3, #0
    bee2:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    bee4:	4b07      	ldr	r3, [pc, #28]	; (bf04 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    bee6:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    bee8:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    beea:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    beec:	9301      	str	r3, [sp, #4]
    beee:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    bef0:	f000 f92a 	bl	c148 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    bef4:	b004      	add	sp, #16
    bef6:	bd10      	pop	{r4, pc}
    bef8:	20070000 	.word	0x20070000
    befc:	20008000 	.word	0x20008000
    bf00:	0001bcc8 	.word	0x0001bcc8
    bf04:	200087f0 	.word	0x200087f0

0000bf08 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    bf08:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
    bf0a:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    bf0c:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    bf0e:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
    bf12:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    bf16:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    bf18:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    bf1a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    bf1c:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    bf20:	4905      	ldr	r1, [pc, #20]	; (bf38 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    bf22:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    bf26:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    bf2a:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    bf2e:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    bf32:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    bf36:	bd10      	pop	{r4, pc}
    bf38:	e000ed00 	.word	0xe000ed00

0000bf3c <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
    bf3c:	b580      	push	{r7, lr}
    bf3e:	af00      	add	r7, sp, #0
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    bf40:	b088      	sub	sp, #32
    bf42:	466a      	mov	r2, sp
    bf44:	4b07      	ldr	r3, [pc, #28]	; (bf64 <region_allocate_and_init.part.0+0x28>)
    bf46:	e9c2 3005 	strd	r3, r0, [r2, #20]
    bf4a:	2303      	movs	r3, #3
    bf4c:	f842 3f10 	str.w	r3, [r2, #16]!
    bf50:	2300      	movs	r3, #0
    bf52:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bf56:	4804      	ldr	r0, [pc, #16]	; (bf68 <region_allocate_and_init.part.0+0x2c>)
    bf58:	f7fe fcd0 	bl	a8fc <z_impl_z_log_msg_static_create>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    bf5c:	f06f 0015 	mvn.w	r0, #21
    bf60:	46bd      	mov	sp, r7
    bf62:	bd80      	pop	{r7, pc}
    bf64:	0001cbe0 	.word	0x0001cbe0
    bf68:	0001b910 	.word	0x0001b910

0000bf6c <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    bf6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bf70:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    bf72:	4606      	mov	r6, r0
    bf74:	f04f 0900 	mov.w	r9, #0
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    bf78:	b087      	sub	sp, #28
	MPU->RNR = rnr;
    bf7a:	4d5f      	ldr	r5, [pc, #380]	; (c0f8 <mpu_configure_regions_and_partition.constprop.0+0x18c>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    bf7c:	af00      	add	r7, sp, #0
    bf7e:	6079      	str	r1, [r7, #4]
	for (i = 0; i < regions_num; i++) {
    bf80:	687b      	ldr	r3, [r7, #4]
    bf82:	4599      	cmp	r9, r3
    bf84:	da35      	bge.n	bff2 <mpu_configure_regions_and_partition.constprop.0+0x86>
		if (regions[i].size == 0U) {
    bf86:	f8d6 8004 	ldr.w	r8, [r6, #4]
    bf8a:	f1b8 0f00 	cmp.w	r8, #0
    bf8e:	d054      	beq.n	c03a <mpu_configure_regions_and_partition.constprop.0+0xce>
		&&
    bf90:	f1b8 0f1f 	cmp.w	r8, #31
    bf94:	d91b      	bls.n	bfce <mpu_configure_regions_and_partition.constprop.0+0x62>
		&&
    bf96:	f018 0f1f 	tst.w	r8, #31
    bf9a:	d118      	bne.n	bfce <mpu_configure_regions_and_partition.constprop.0+0x62>
		((part->start &
    bf9c:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    bfa0:	f01b 0f1f 	tst.w	fp, #31
    bfa4:	d113      	bne.n	bfce <mpu_configure_regions_and_partition.constprop.0+0x62>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    bfa6:	4658      	mov	r0, fp
    bfa8:	f00c f87b 	bl	180a2 <arm_cmse_mpu_region_get>
    bfac:	4682      	mov	sl, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    bfae:	eb08 000b 	add.w	r0, r8, fp
    bfb2:	3801      	subs	r0, #1
    bfb4:	f00c f875 	bl	180a2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    bfb8:	4582      	cmp	sl, r0
    bfba:	d01f      	beq.n	bffc <mpu_configure_regions_and_partition.constprop.0+0x90>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
    bfbc:	f06f 0a15 	mvn.w	sl, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    bfc0:	466c      	mov	r4, sp
    bfc2:	b088      	sub	sp, #32
    bfc4:	466a      	mov	r2, sp
    bfc6:	494d      	ldr	r1, [pc, #308]	; (c0fc <mpu_configure_regions_and_partition.constprop.0+0x190>)
    bfc8:	e9c2 1a05 	strd	r1, sl, [r2, #20]
    bfcc:	e005      	b.n	bfda <mpu_configure_regions_and_partition.constprop.0+0x6e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    bfce:	466c      	mov	r4, sp
    bfd0:	b088      	sub	sp, #32
    bfd2:	466a      	mov	r2, sp
    bfd4:	4b4a      	ldr	r3, [pc, #296]	; (c100 <mpu_configure_regions_and_partition.constprop.0+0x194>)
    bfd6:	e9c2 3905 	strd	r3, r9, [r2, #20]
			LOG_ERR("Invalid underlying region index %u",
    bfda:	2303      	movs	r3, #3
    bfdc:	f842 3f10 	str.w	r3, [r2, #16]!
    bfe0:	2300      	movs	r3, #0
    bfe2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bfe6:	4847      	ldr	r0, [pc, #284]	; (c104 <mpu_configure_regions_and_partition.constprop.0+0x198>)
    bfe8:	f7fe fc88 	bl	a8fc <z_impl_z_log_msg_static_create>
    bfec:	46a5      	mov	sp, r4
			return -EINVAL;
    bfee:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    bff2:	4620      	mov	r0, r4
    bff4:	371c      	adds	r7, #28
    bff6:	46bd      	mov	sp, r7
    bff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    bffc:	f11a 0f16 	cmn.w	sl, #22
    c000:	d0de      	beq.n	bfc0 <mpu_configure_regions_and_partition.constprop.0+0x54>
    c002:	4554      	cmp	r4, sl
    c004:	dddc      	ble.n	bfc0 <mpu_configure_regions_and_partition.constprop.0+0x54>
	MPU->RNR = rnr;
    c006:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    c00a:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    c00e:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RLAR;
    c012:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    c016:	f020 001f 	bic.w	r0, r0, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    c01a:	f042 081f 	orr.w	r8, r2, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    c01e:	e9d6 2100 	ldrd	r2, r1, [r6]
    c022:	4411      	add	r1, r2
		if ((regions[i].start == u_reg_base) &&
    c024:	4290      	cmp	r0, r2
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    c026:	f101 3bff 	add.w	fp, r1, #4294967295
		if ((regions[i].start == u_reg_base) &&
    c02a:	d11e      	bne.n	c06a <mpu_configure_regions_and_partition.constprop.0+0xfe>
    c02c:	45d8      	cmp	r8, fp
    c02e:	d108      	bne.n	c042 <mpu_configure_regions_and_partition.constprop.0+0xd6>
			mpu_configure_region(u_reg_index, &regions[i]);
    c030:	4631      	mov	r1, r6
    c032:	fa5f f08a 	uxtb.w	r0, sl
    c036:	f00c f83d 	bl	180b4 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    c03a:	f109 0901 	add.w	r9, r9, #1
    c03e:	360c      	adds	r6, #12
    c040:	e79e      	b.n	bf80 <mpu_configure_regions_and_partition.constprop.0+0x14>
	MPU->RNR = rnr;
    c042:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    c046:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    c04a:	f021 011f 	bic.w	r1, r1, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    c04e:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    c052:	430b      	orrs	r3, r1
				mpu_configure_region(reg_index, &regions[i]);
    c054:	4631      	mov	r1, r6
	MPU->RBAR = rbar;
    c056:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    c05a:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    c05c:	f00c f82a 	bl	180b4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    c060:	f110 0f16 	cmn.w	r0, #22
    c064:	d0c3      	beq.n	bfee <mpu_configure_regions_and_partition.constprop.0+0x82>
			reg_index++;
    c066:	1c44      	adds	r4, r0, #1
    c068:	e7e7      	b.n	c03a <mpu_configure_regions_and_partition.constprop.0+0xce>
				regions[i].start - 1);
    c06a:	3a01      	subs	r2, #1
		} else if (reg_last == u_reg_last) {
    c06c:	45d8      	cmp	r8, fp
				mpu_configure_region(reg_index, &regions[i]);
    c06e:	b2e0      	uxtb	r0, r4
		     | (limit & MPU_RLAR_LIMIT_Msk));
    c070:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
    c074:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
    c078:	d108      	bne.n	c08c <mpu_configure_regions_and_partition.constprop.0+0x120>
	return MPU->RLAR;
    c07a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    c07e:	4631      	mov	r1, r6
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    c080:	f003 031f 	and.w	r3, r3, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    c084:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    c086:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
    c08a:	e7e7      	b.n	c05c <mpu_configure_regions_and_partition.constprop.0+0xf0>
	return MPU->RLAR;
    c08c:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    c090:	f001 011f 	and.w	r1, r1, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    c094:	430a      	orrs	r2, r1
	MPU->RLAR = rlar;
    c096:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    c09a:	4631      	mov	r1, r6
    c09c:	f00c f80a 	bl	180b4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    c0a0:	f110 0f16 	cmn.w	r0, #22
    c0a4:	d0a3      	beq.n	bfee <mpu_configure_regions_and_partition.constprop.0+0x82>
	MPU->RNR = rnr;
    c0a6:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    c0aa:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    c0ae:	7c3b      	ldrb	r3, [r7, #16]
			REGION_LIMIT_ADDR((regions[i].start +
    c0b0:	f108 38ff 	add.w	r8, r8, #4294967295
	attr->rbar = mpu_get_rbar() &
    c0b4:	f362 0304 	bfi	r3, r2, #0, #5
    c0b8:	743b      	strb	r3, [r7, #16]
	return MPU->RLAR;
    c0ba:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    c0be:	7c3a      	ldrb	r2, [r7, #16]
    c0c0:	085b      	lsrs	r3, r3, #1
    c0c2:	f363 1247 	bfi	r2, r3, #5, #3
    c0c6:	743a      	strb	r2, [r7, #16]
			fill_region.base = regions[i].start +
    c0c8:	e9d6 3200 	ldrd	r3, r2, [r6]
    c0cc:	4413      	add	r3, r2
    c0ce:	60bb      	str	r3, [r7, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    c0d0:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    c0d4:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    c0d6:	4443      	add	r3, r8
    c0d8:	eba3 030b 	sub.w	r3, r3, fp
				region_allocate_and_init(reg_index,
    c0dc:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i].start +
    c0de:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    c0e2:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
    c0e4:	617b      	str	r3, [r7, #20]
    c0e6:	d902      	bls.n	c0ee <mpu_configure_regions_and_partition.constprop.0+0x182>
    c0e8:	f7ff ff28 	bl	bf3c <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
    c0ec:	e7b8      	b.n	c060 <mpu_configure_regions_and_partition.constprop.0+0xf4>
	region_init(index, region_conf);
    c0ee:	f107 0108 	add.w	r1, r7, #8
    c0f2:	f7ff ff09 	bl	bf08 <region_init>
    c0f6:	e7b6      	b.n	c066 <mpu_configure_regions_and_partition.constprop.0+0xfa>
    c0f8:	e000ed00 	.word	0xe000ed00
    c0fc:	0001cc29 	.word	0x0001cc29
    c100:	0001cc06 	.word	0x0001cc06
    c104:	0001b910 	.word	0x0001b910

0000c108 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    c108:	2205      	movs	r2, #5
    c10a:	4b04      	ldr	r3, [pc, #16]	; (c11c <arm_core_mpu_enable+0x14>)
    c10c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    c110:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c114:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    c118:	4770      	bx	lr
    c11a:	bf00      	nop
    c11c:	e000ed00 	.word	0xe000ed00

0000c120 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    c120:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    c124:	2200      	movs	r2, #0
    c126:	4b02      	ldr	r3, [pc, #8]	; (c130 <arm_core_mpu_disable+0x10>)
    c128:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    c12c:	4770      	bx	lr
    c12e:	bf00      	nop
    c130:	e000ed00 	.word	0xe000ed00

0000c134 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    c134:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    c136:	4c03      	ldr	r4, [pc, #12]	; (c144 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    c138:	7822      	ldrb	r2, [r4, #0]
    c13a:	f7ff ff17 	bl	bf6c <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    c13e:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    c140:	bd10      	pop	{r4, pc}
    c142:	bf00      	nop
    c144:	20009be7 	.word	0x20009be7

0000c148 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    c148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c14c:	4d29      	ldr	r5, [pc, #164]	; (c1f4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
    c14e:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
    c150:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    c152:	f04f 0800 	mov.w	r8, #0
    c156:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
    c158:	4f27      	ldr	r7, [pc, #156]	; (c1f8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    c15a:	45d0      	cmp	r8, sl
    c15c:	da1b      	bge.n	c196 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    c15e:	f8d6 9004 	ldr.w	r9, [r6, #4]
    c162:	f1b9 0f00 	cmp.w	r9, #0
    c166:	d03f      	beq.n	c1e8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    c168:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    c16a:	4608      	mov	r0, r1
    c16c:	9101      	str	r1, [sp, #4]
    c16e:	f00b ff98 	bl	180a2 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    c172:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    c174:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    c176:	eb09 0001 	add.w	r0, r9, r1
    c17a:	3801      	subs	r0, #1
    c17c:	f00b ff91 	bl	180a2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    c180:	4284      	cmp	r4, r0
    c182:	f04f 0214 	mov.w	r2, #20
    c186:	4b1d      	ldr	r3, [pc, #116]	; (c1fc <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
    c188:	d008      	beq.n	c19c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    c18a:	fb02 f308 	mul.w	r3, r2, r8
    c18e:	f06f 0215 	mvn.w	r2, #21
    c192:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    c196:	b003      	add	sp, #12
    c198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    c19c:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    c1a0:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    c1a2:	d0f8      	beq.n	c196 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    c1a4:	7819      	ldrb	r1, [r3, #0]
    c1a6:	42a1      	cmp	r1, r4
    c1a8:	ddf5      	ble.n	c196 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
    c1aa:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
    c1ae:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
    c1b2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
    c1b6:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    c1ba:	f100 0108 	add.w	r1, r0, #8
    c1be:	7b00      	ldrb	r0, [r0, #12]
    c1c0:	f364 0004 	bfi	r0, r4, #0, #5
    c1c4:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
    c1c6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    c1ca:	790c      	ldrb	r4, [r1, #4]
    c1cc:	0840      	lsrs	r0, r0, #1
    c1ce:	f360 1447 	bfi	r4, r0, #5, #3
    c1d2:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
    c1d4:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    c1d8:	f021 011f 	bic.w	r1, r1, #31
    c1dc:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
    c1de:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    c1e2:	f021 011f 	bic.w	r1, r1, #31
    c1e6:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    c1e8:	f108 0801 	add.w	r8, r8, #1
    c1ec:	3514      	adds	r5, #20
    c1ee:	360c      	adds	r6, #12
    c1f0:	e7b3      	b.n	c15a <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    c1f2:	bf00      	nop
    c1f4:	2000980c 	.word	0x2000980c
    c1f8:	e000ed00 	.word	0xe000ed00
    c1fc:	20009be7 	.word	0x20009be7

0000c200 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    c200:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    c202:	4d0e      	ldr	r5, [pc, #56]	; (c23c <z_arm_mpu_init+0x3c>)
    c204:	682c      	ldr	r4, [r5, #0]
    c206:	2c08      	cmp	r4, #8
    c208:	d815      	bhi.n	c236 <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    c20a:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    c20c:	f7ff ff88 	bl	c120 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
    c210:	4b0b      	ldr	r3, [pc, #44]	; (c240 <z_arm_mpu_init+0x40>)
    c212:	4a0c      	ldr	r2, [pc, #48]	; (c244 <z_arm_mpu_init+0x44>)
    c214:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    c218:	4284      	cmp	r4, r0
    c21a:	d105      	bne.n	c228 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    c21c:	4b0a      	ldr	r3, [pc, #40]	; (c248 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    c21e:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    c220:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    c222:	f7ff ff71 	bl	c108 <arm_core_mpu_enable>
}
    c226:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    c228:	6869      	ldr	r1, [r5, #4]
    c22a:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    c22e:	f7ff fe6b 	bl	bf08 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    c232:	3001      	adds	r0, #1
    c234:	e7f0      	b.n	c218 <z_arm_mpu_init+0x18>
		return -1;
    c236:	f04f 30ff 	mov.w	r0, #4294967295
    c23a:	e7f4      	b.n	c226 <z_arm_mpu_init+0x26>
    c23c:	0001bcd4 	.word	0x0001bcd4
    c240:	e000ed00 	.word	0xe000ed00
    c244:	0044ffaa 	.word	0x0044ffaa
    c248:	20009be7 	.word	0x20009be7

0000c24c <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    c24c:	4b01      	ldr	r3, [pc, #4]	; (c254 <__stdout_hook_install+0x8>)
    c24e:	6018      	str	r0, [r3, #0]
}
    c250:	4770      	bx	lr
    c252:	bf00      	nop
    c254:	200082bc 	.word	0x200082bc

0000c258 <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    c258:	2000      	movs	r0, #0
    c25a:	4b02      	ldr	r3, [pc, #8]	; (c264 <remoteproc_mgr_boot+0xc>)
    c25c:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
    c260:	4770      	bx	lr
    c262:	bf00      	nop
    c264:	40005000 	.word	0x40005000

0000c268 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(void)
{
    c268:	b508      	push	{r3, lr}
    c26a:	4804      	ldr	r0, [pc, #16]	; (c27c <xoshiro128_initialize+0x14>)
    c26c:	f00e fb1a 	bl	1a8a4 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
    c270:	2800      	cmp	r0, #0
}
    c272:	bf0c      	ite	eq
    c274:	f06f 0012 	mvneq.w	r0, #18
    c278:	2000      	movne	r0, #0
    c27a:	bd08      	pop	{r3, pc}
    c27c:	0001b504 	.word	0x0001b504

0000c280 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    c280:	4b0e      	ldr	r3, [pc, #56]	; (c2bc <bt_hex+0x3c>)
    c282:	2940      	cmp	r1, #64	; 0x40
    c284:	bf28      	it	cs
    c286:	2140      	movcs	r1, #64	; 0x40
{
    c288:	b570      	push	{r4, r5, r6, lr}
    c28a:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
    c28c:	4c0c      	ldr	r4, [pc, #48]	; (c2c0 <bt_hex+0x40>)
    c28e:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
    c290:	42b0      	cmp	r0, r6
    c292:	f103 0302 	add.w	r3, r3, #2
    c296:	d104      	bne.n	c2a2 <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    c298:	2300      	movs	r3, #0
    c29a:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    c29e:	4807      	ldr	r0, [pc, #28]	; (c2bc <bt_hex+0x3c>)
    c2a0:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
    c2a2:	7802      	ldrb	r2, [r0, #0]
    c2a4:	0912      	lsrs	r2, r2, #4
    c2a6:	5ca2      	ldrb	r2, [r4, r2]
    c2a8:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    c2ac:	f810 2b01 	ldrb.w	r2, [r0], #1
    c2b0:	f002 020f 	and.w	r2, r2, #15
    c2b4:	5ca2      	ldrb	r2, [r4, r2]
    c2b6:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    c2ba:	e7e9      	b.n	c290 <bt_hex+0x10>
    c2bc:	20009c06 	.word	0x20009c06
    c2c0:	0001ccd3 	.word	0x0001ccd3

0000c2c4 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    c2c4:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    c2c6:	7803      	ldrb	r3, [r0, #0]
    c2c8:	b08b      	sub	sp, #44	; 0x2c
    c2ca:	4604      	mov	r4, r0
    c2cc:	ad07      	add	r5, sp, #28
    c2ce:	2b03      	cmp	r3, #3
    c2d0:	d821      	bhi.n	c316 <bt_addr_le_str+0x52>
    c2d2:	e8df f003 	tbb	[pc, r3]
    c2d6:	1a02      	.short	0x1a02
    c2d8:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    c2da:	4912      	ldr	r1, [pc, #72]	; (c324 <bt_addr_le_str+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    c2dc:	4628      	mov	r0, r5
    c2de:	f00b ff09 	bl	180f4 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    c2e2:	9505      	str	r5, [sp, #20]
    c2e4:	7863      	ldrb	r3, [r4, #1]
    c2e6:	211e      	movs	r1, #30
    c2e8:	9304      	str	r3, [sp, #16]
    c2ea:	78a3      	ldrb	r3, [r4, #2]
    c2ec:	4a0e      	ldr	r2, [pc, #56]	; (c328 <bt_addr_le_str+0x64>)
    c2ee:	9303      	str	r3, [sp, #12]
    c2f0:	78e3      	ldrb	r3, [r4, #3]
    c2f2:	480e      	ldr	r0, [pc, #56]	; (c32c <bt_addr_le_str+0x68>)
    c2f4:	9302      	str	r3, [sp, #8]
    c2f6:	7923      	ldrb	r3, [r4, #4]
    c2f8:	9301      	str	r3, [sp, #4]
    c2fa:	7963      	ldrb	r3, [r4, #5]
    c2fc:	9300      	str	r3, [sp, #0]
    c2fe:	79a3      	ldrb	r3, [r4, #6]
    c300:	f00a fa5b 	bl	167ba <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    c304:	4809      	ldr	r0, [pc, #36]	; (c32c <bt_addr_le_str+0x68>)
    c306:	b00b      	add	sp, #44	; 0x2c
    c308:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    c30a:	4909      	ldr	r1, [pc, #36]	; (c330 <bt_addr_le_str+0x6c>)
    c30c:	e7e6      	b.n	c2dc <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
    c30e:	4909      	ldr	r1, [pc, #36]	; (c334 <bt_addr_le_str+0x70>)
    c310:	e7e4      	b.n	c2dc <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
    c312:	4909      	ldr	r1, [pc, #36]	; (c338 <bt_addr_le_str+0x74>)
    c314:	e7e2      	b.n	c2dc <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    c316:	210a      	movs	r1, #10
    c318:	4628      	mov	r0, r5
    c31a:	4a08      	ldr	r2, [pc, #32]	; (c33c <bt_addr_le_str+0x78>)
    c31c:	f00a fa4d 	bl	167ba <snprintk>
		break;
    c320:	e7df      	b.n	c2e2 <bt_addr_le_str+0x1e>
    c322:	bf00      	nop
    c324:	0001cc8e 	.word	0x0001cc8e
    c328:	0001ccb0 	.word	0x0001ccb0
    c32c:	20009be8 	.word	0x20009be8
    c330:	0001cc95 	.word	0x0001cc95
    c334:	0001cc9c 	.word	0x0001cc9c
    c338:	0001cca6 	.word	0x0001cca6
    c33c:	0001dc22 	.word	0x0001dc22

0000c340 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(void)
{
    c340:	b530      	push	{r4, r5, lr}

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    c342:	2400      	movs	r4, #0

	k_work_queue_init(&bt_long_wq);
    c344:	4d09      	ldr	r5, [pc, #36]	; (c36c <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    c346:	4b0a      	ldr	r3, [pc, #40]	; (c370 <long_wq_init+0x30>)
{
    c348:	b085      	sub	sp, #20
	k_work_queue_init(&bt_long_wq);
    c34a:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    c34c:	9302      	str	r3, [sp, #8]
    c34e:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
    c350:	f00e fce3 	bl	1ad1a <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
    c354:	ab02      	add	r3, sp, #8
    c356:	4628      	mov	r0, r5
    c358:	9300      	str	r3, [sp, #0]
    c35a:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    c35e:	230a      	movs	r3, #10
    c360:	4904      	ldr	r1, [pc, #16]	; (c374 <long_wq_init+0x34>)
    c362:	f009 fad1 	bl	15908 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
    c366:	4620      	mov	r0, r4
    c368:	b005      	add	sp, #20
    c36a:	bd30      	pop	{r4, r5, pc}
    c36c:	200090b8 	.word	0x200090b8
    c370:	0001cce4 	.word	0x0001cce4
    c374:	2000a790 	.word	0x2000a790

0000c378 <bt_long_wq_schedule>:
{
    c378:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
    c37a:	4801      	ldr	r0, [pc, #4]	; (c380 <bt_long_wq_schedule+0x8>)
    c37c:	f009 bb3a 	b.w	159f4 <k_work_schedule_for_queue>
    c380:	200090b8 	.word	0x200090b8

0000c384 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    c384:	4603      	mov	r3, r0
    c386:	b430      	push	{r4, r5}
	switch (src->type) {
    c388:	781a      	ldrb	r2, [r3, #0]
{
    c38a:	4608      	mov	r0, r1
	switch (src->type) {
    c38c:	2a01      	cmp	r2, #1
    c38e:	d013      	beq.n	c3b8 <uuid_to_uuid128+0x34>
    c390:	2a02      	cmp	r2, #2
    c392:	d026      	beq.n	c3e2 <uuid_to_uuid128+0x5e>
    c394:	b972      	cbnz	r2, c3b4 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    c396:	4a15      	ldr	r2, [pc, #84]	; (c3ec <uuid_to_uuid128+0x68>)
    c398:	f102 0410 	add.w	r4, r2, #16
    c39c:	f852 5b04 	ldr.w	r5, [r2], #4
    c3a0:	42a2      	cmp	r2, r4
    c3a2:	f841 5b04 	str.w	r5, [r1], #4
    c3a6:	d1f9      	bne.n	c39c <uuid_to_uuid128+0x18>
    c3a8:	7812      	ldrb	r2, [r2, #0]
    c3aa:	700a      	strb	r2, [r1, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    c3ac:	885b      	ldrh	r3, [r3, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    c3ae:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    c3b0:	0a1b      	lsrs	r3, r3, #8
    c3b2:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    c3b4:	bc30      	pop	{r4, r5}
    c3b6:	4770      	bx	lr
		*dst = uuid128_base;
    c3b8:	4a0c      	ldr	r2, [pc, #48]	; (c3ec <uuid_to_uuid128+0x68>)
    c3ba:	f102 0410 	add.w	r4, r2, #16
    c3be:	f852 5b04 	ldr.w	r5, [r2], #4
    c3c2:	42a2      	cmp	r2, r4
    c3c4:	f841 5b04 	str.w	r5, [r1], #4
    c3c8:	d1f9      	bne.n	c3be <uuid_to_uuid128+0x3a>
    c3ca:	7812      	ldrb	r2, [r2, #0]
    c3cc:	700a      	strb	r2, [r1, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    c3ce:	685b      	ldr	r3, [r3, #4]
    c3d0:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    c3d4:	7343      	strb	r3, [r0, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    c3d6:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    c3d8:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    c3da:	0a1b      	lsrs	r3, r3, #8
    c3dc:	7382      	strb	r2, [r0, #14]
    c3de:	7403      	strb	r3, [r0, #16]
}
    c3e0:	e7e8      	b.n	c3b4 <uuid_to_uuid128+0x30>
		memcpy(dst, src, sizeof(*dst));
    c3e2:	2211      	movs	r2, #17
}
    c3e4:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    c3e6:	4619      	mov	r1, r3
    c3e8:	f00b bee1 	b.w	181ae <memcpy>
    c3ec:	0001cced 	.word	0x0001cced

0000c3f0 <bt_buf_get_rx>:
	     type == BT_BUF_ISO_IN) {
		return bt_iso_get_rx(timeout);
	}

#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	if (type == BT_BUF_EVT) {
    c3f0:	2801      	cmp	r0, #1
{
    c3f2:	b538      	push	{r3, r4, r5, lr}
    c3f4:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
    c3f6:	bf0c      	ite	eq
    c3f8:	4806      	ldreq	r0, [pc, #24]	; (c414 <bt_buf_get_rx+0x24>)
    c3fa:	4807      	ldrne	r0, [pc, #28]	; (c418 <bt_buf_get_rx+0x28>)
    c3fc:	f00d f9a9 	bl	19752 <net_buf_alloc_fixed>
    c400:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    c402:	b120      	cbz	r0, c40e <bt_buf_get_rx+0x1e>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
    c404:	2101      	movs	r1, #1
    c406:	300c      	adds	r0, #12
    c408:	f00d f9ff 	bl	1980a <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    c40c:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    c40e:	4620      	mov	r0, r4
    c410:	bd38      	pop	{r3, r4, r5, pc}
    c412:	bf00      	nop
    c414:	2000873c 	.word	0x2000873c
    c418:	200086b8 	.word	0x200086b8

0000c41c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    c41c:	4602      	mov	r2, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    c41e:	2000      	movs	r0, #0
    c420:	b570      	push	{r4, r5, r6, lr}
    c422:	460b      	mov	r3, r1
    c424:	490a      	ldr	r1, [pc, #40]	; (c450 <bt_buf_get_cmd_complete+0x34>)
    c426:	e8d1 4fef 	ldaex	r4, [r1]
    c42a:	e8c1 0fe5 	stlex	r5, r0, [r1]
    c42e:	2d00      	cmp	r5, #0
    c430:	d1f9      	bne.n	c426 <bt_buf_get_cmd_complete+0xa>
	struct net_buf *buf;

	buf = (struct net_buf *)atomic_ptr_clear((atomic_ptr_t *)&bt_dev.sent_cmd);
	if (buf) {
    c432:	b924      	cbnz	r4, c43e <bt_buf_get_cmd_complete+0x22>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    c434:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    c438:	2001      	movs	r0, #1
    c43a:	f7ff bfd9 	b.w	c3f0 <bt_buf_get_rx>
    c43e:	2101      	movs	r1, #1
		buf->len = 0U;
    c440:	8220      	strh	r0, [r4, #16]
    c442:	7621      	strb	r1, [r4, #24]
    c444:	f104 000c 	add.w	r0, r4, #12
    c448:	f00d f9df 	bl	1980a <net_buf_simple_reserve>
}
    c44c:	4620      	mov	r0, r4
    c44e:	bd70      	pop	{r4, r5, r6, pc}
    c450:	20008138 	.word	0x20008138

0000c454 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    c454:	b570      	push	{r4, r5, r6, lr}
    c456:	4604      	mov	r4, r0
	switch (evt) {
    c458:	2c0f      	cmp	r4, #15
{
    c45a:	460d      	mov	r5, r1
    c45c:	4610      	mov	r0, r2
    c45e:	4619      	mov	r1, r3
	switch (evt) {
    c460:	d805      	bhi.n	c46e <bt_buf_get_evt+0x1a>
    c462:	2c0d      	cmp	r4, #13
    c464:	d90d      	bls.n	c482 <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    c466:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    c46a:	f7ff bfd7 	b.w	c41c <bt_buf_get_cmd_complete>
	switch (evt) {
    c46e:	2c13      	cmp	r4, #19
    c470:	d107      	bne.n	c482 <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
    c472:	480c      	ldr	r0, [pc, #48]	; (c4a4 <bt_buf_get_evt+0x50>)
    c474:	f00d f96d 	bl	19752 <net_buf_alloc_fixed>
			if (buf) {
    c478:	4604      	mov	r4, r0
    c47a:	b938      	cbnz	r0, c48c <bt_buf_get_evt+0x38>
{
    c47c:	2400      	movs	r4, #0
}
    c47e:	4620      	mov	r0, r4
    c480:	bd70      	pop	{r4, r5, r6, pc}
    c482:	4602      	mov	r2, r0
    c484:	460b      	mov	r3, r1
		if (discardable) {
    c486:	b145      	cbz	r5, c49a <bt_buf_get_evt+0x46>
    c488:	4807      	ldr	r0, [pc, #28]	; (c4a8 <bt_buf_get_evt+0x54>)
    c48a:	e7f3      	b.n	c474 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
    c48c:	2101      	movs	r1, #1
    c48e:	300c      	adds	r0, #12
    c490:	f00d f9bb 	bl	1980a <net_buf_simple_reserve>
    c494:	2301      	movs	r3, #1
    c496:	7623      	strb	r3, [r4, #24]
}
    c498:	e7f1      	b.n	c47e <bt_buf_get_evt+0x2a>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    c49a:	2001      	movs	r0, #1
}
    c49c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    c4a0:	f7ff bfa6 	b.w	c3f0 <bt_buf_get_rx>
    c4a4:	200087c0 	.word	0x200087c0
    c4a8:	20008710 	.word	0x20008710

0000c4ac <ver_str>:
	sys_put_le64(mask, ev->events);
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static const char *ver_str(uint8_t ver)
{
    c4ac:	b570      	push	{r4, r5, r6, lr}
    c4ae:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
    c4b0:	466c      	mov	r4, sp
{
    c4b2:	4606      	mov	r6, r0
	const char * const str[] = {
    c4b4:	4d0a      	ldr	r5, [pc, #40]	; (c4e0 <ver_str+0x34>)
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2", "5.3", "5.4"
	};

	if (ver < ARRAY_SIZE(str)) {
    c4b6:	2e0d      	cmp	r6, #13
	const char * const str[] = {
    c4b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c4ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c4bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c4be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c4c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c4c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c4c4:	e895 0003 	ldmia.w	r5, {r0, r1}
    c4c8:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
    c4cc:	bf9d      	ittte	ls
    c4ce:	ab0e      	addls	r3, sp, #56	; 0x38
    c4d0:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
    c4d4:	f856 0c38 	ldrls.w	r0, [r6, #-56]
	}

	return "unknown";
    c4d8:	4802      	ldrhi	r0, [pc, #8]	; (c4e4 <ver_str+0x38>)
}
    c4da:	b00e      	add	sp, #56	; 0x38
    c4dc:	bd70      	pop	{r4, r5, r6, pc}
    c4de:	bf00      	nop
    c4e0:	0001b9a4 	.word	0x0001b9a4
    c4e4:	0001cd06 	.word	0x0001cd06

0000c4e8 <hci_disconn_complete_prio>:
{
    c4e8:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    c4ea:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    c4ec:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
    c4f0:	781b      	ldrb	r3, [r3, #0]
    c4f2:	b963      	cbnz	r3, c50e <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
    c4f4:	4620      	mov	r0, r4
    c4f6:	f002 fe5b 	bl	f1b0 <bt_conn_lookup_handle>
	if (!conn) {
    c4fa:	4605      	mov	r5, r0
    c4fc:	b940      	cbnz	r0, c510 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
    c4fe:	4b08      	ldr	r3, [pc, #32]	; (c520 <hci_disconn_complete_prio+0x38>)
    c500:	881a      	ldrh	r2, [r3, #0]
    c502:	b922      	cbnz	r2, c50e <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
    c504:	ea6f 5004 	mvn.w	r0, r4, lsl #20
    c508:	ea6f 5010 	mvn.w	r0, r0, lsr #20
    c50c:	8018      	strh	r0, [r3, #0]
}
    c50e:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    c510:	2101      	movs	r1, #1
    c512:	f002 fe55 	bl	f1c0 <bt_conn_set_state>
	bt_conn_unref(conn);
    c516:	4628      	mov	r0, r5
}
    c518:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    c51c:	f00c b8e3 	b.w	186e6 <bt_conn_unref>
    c520:	20009bcc 	.word	0x20009bcc

0000c524 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    c524:	b510      	push	{r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    c526:	4c08      	ldr	r4, [pc, #32]	; (c548 <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    c528:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    c52a:	2205      	movs	r2, #5
    c52c:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    c530:	f003 f850 	bl	f5d4 <bt_conn_lookup_state_le>
		if (!conn) {
    c534:	b938      	cbnz	r0, c546 <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    c536:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    c53a:	2204      	movs	r2, #4
}
    c53c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    c540:	4902      	ldr	r1, [pc, #8]	; (c54c <find_pending_connect.part.0+0x28>)
    c542:	f003 b847 	b.w	f5d4 <bt_conn_lookup_state_le>
}
    c546:	bd10      	pop	{r4, pc}
    c548:	20008000 	.word	0x20008000
    c54c:	0001cc74 	.word	0x0001cc74

0000c550 <hci_data_buf_overflow>:
{
    c550:	b580      	push	{r7, lr}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    c552:	68c3      	ldr	r3, [r0, #12]
{
    c554:	af00      	add	r7, sp, #0
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    c556:	b088      	sub	sp, #32
    c558:	466a      	mov	r2, sp
    c55a:	781b      	ldrb	r3, [r3, #0]
    c55c:	4906      	ldr	r1, [pc, #24]	; (c578 <hci_data_buf_overflow+0x28>)
    c55e:	4807      	ldr	r0, [pc, #28]	; (c57c <hci_data_buf_overflow+0x2c>)
    c560:	e9c2 1305 	strd	r1, r3, [r2, #20]
    c564:	2303      	movs	r3, #3
    c566:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    c56a:	f842 3f10 	str.w	r3, [r2, #16]!
    c56e:	f00b feb8 	bl	182e2 <z_log_msg_static_create.constprop.0>
}
    c572:	46bd      	mov	sp, r7
    c574:	bd80      	pop	{r7, pc}
    c576:	bf00      	nop
    c578:	0001cd0e 	.word	0x0001cd0e
    c57c:	0001b898 	.word	0x0001b898

0000c580 <le_conn_param_neg_reply.part.0>:
static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
    c580:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_ERR("Unable to allocate buffer");
    c582:	4b06      	ldr	r3, [pc, #24]	; (c59c <le_conn_param_neg_reply.part.0+0x1c>)
    c584:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c588:	9305      	str	r3, [sp, #20]
    c58a:	2302      	movs	r3, #2
    c58c:	4804      	ldr	r0, [pc, #16]	; (c5a0 <le_conn_param_neg_reply.part.0+0x20>)
    c58e:	aa04      	add	r2, sp, #16
    c590:	9304      	str	r3, [sp, #16]
    c592:	f00b fea6 	bl	182e2 <z_log_msg_static_create.constprop.0>
}
    c596:	b007      	add	sp, #28
    c598:	f85d fb04 	ldr.w	pc, [sp], #4
    c59c:	0001cd36 	.word	0x0001cd36
    c5a0:	0001b898 	.word	0x0001b898

0000c5a4 <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
    c5a4:	b598      	push	{r3, r4, r7, lr}
    c5a6:	4601      	mov	r1, r0
    c5a8:	af00      	add	r7, sp, #0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
    c5aa:	480d      	ldr	r0, [pc, #52]	; (c5e0 <rx_queue_put+0x3c>)
    c5ac:	f00d f8d8 	bl	19760 <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
    c5b0:	490c      	ldr	r1, [pc, #48]	; (c5e4 <rx_queue_put+0x40>)
    c5b2:	480d      	ldr	r0, [pc, #52]	; (c5e8 <rx_queue_put+0x44>)
    c5b4:	f00e fba0 	bl	1acf8 <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
    c5b8:	2800      	cmp	r0, #0
    c5ba:	da0e      	bge.n	c5da <rx_queue_put+0x36>
		LOG_ERR("Could not submit rx_work: %d", err);
    c5bc:	466c      	mov	r4, sp
    c5be:	b088      	sub	sp, #32
    c5c0:	466a      	mov	r2, sp
    c5c2:	4b0a      	ldr	r3, [pc, #40]	; (c5ec <rx_queue_put+0x48>)
    c5c4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c5c8:	e9c2 3005 	strd	r3, r0, [r2, #20]
    c5cc:	2303      	movs	r3, #3
    c5ce:	4808      	ldr	r0, [pc, #32]	; (c5f0 <rx_queue_put+0x4c>)
    c5d0:	f842 3f10 	str.w	r3, [r2, #16]!
    c5d4:	f00b fe85 	bl	182e2 <z_log_msg_static_create.constprop.0>
    c5d8:	46a5      	mov	sp, r4
	}
}
    c5da:	46bd      	mov	sp, r7
    c5dc:	bd98      	pop	{r3, r4, r7, pc}
    c5de:	bf00      	nop
    c5e0:	2000813c 	.word	0x2000813c
    c5e4:	200082fc 	.word	0x200082fc
    c5e8:	200091e8 	.word	0x200091e8
    c5ec:	0001cd50 	.word	0x0001cd50
    c5f0:	0001b898 	.word	0x0001b898

0000c5f4 <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
    c5f4:	460b      	mov	r3, r1
    c5f6:	b5b0      	push	{r4, r5, r7, lr}
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
    c5f8:	8a0d      	ldrh	r5, [r1, #16]
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
    c5fa:	af00      	add	r7, sp, #0
    c5fc:	4604      	mov	r4, r0
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
    c5fe:	4629      	mov	r1, r5
    c600:	68d8      	ldr	r0, [r3, #12]
    c602:	f7ff fe3d 	bl	c280 <bt_hex>
    c606:	b08a      	sub	sp, #40	; 0x28
    c608:	466a      	mov	r2, sp
    c60a:	4b09      	ldr	r3, [pc, #36]	; (c630 <handle_event.part.0+0x3c>)
    c60c:	e9c2 5007 	strd	r5, r0, [r2, #28]
    c610:	e9c2 3405 	strd	r3, r4, [r2, #20]
    c614:	f240 4302 	movw	r3, #1026	; 0x402
    c618:	8493      	strh	r3, [r2, #36]	; 0x24
    c61a:	4b06      	ldr	r3, [pc, #24]	; (c634 <handle_event.part.0+0x40>)
    c61c:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
    c620:	4805      	ldr	r0, [pc, #20]	; (c638 <handle_event.part.0+0x44>)
    c622:	f842 3f10 	str.w	r3, [r2, #16]!
    c626:	f00b fe5c 	bl	182e2 <z_log_msg_static_create.constprop.0>
}
    c62a:	46bd      	mov	sp, r7
    c62c:	bdb0      	pop	{r4, r5, r7, pc}
    c62e:	bf00      	nop
    c630:	0001cd6d 	.word	0x0001cd6d
    c634:	01000005 	.word	0x01000005
    c638:	0001b898 	.word	0x0001b898

0000c63c <hci_hardware_error>:
{
    c63c:	b580      	push	{r7, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    c63e:	2101      	movs	r1, #1
    c640:	af00      	add	r7, sp, #0
    c642:	300c      	adds	r0, #12
    c644:	f00d f915 	bl	19872 <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    c648:	b088      	sub	sp, #32
    c64a:	466a      	mov	r2, sp
    c64c:	7803      	ldrb	r3, [r0, #0]
    c64e:	4906      	ldr	r1, [pc, #24]	; (c668 <hci_hardware_error+0x2c>)
    c650:	4806      	ldr	r0, [pc, #24]	; (c66c <hci_hardware_error+0x30>)
    c652:	e9c2 1305 	strd	r1, r3, [r2, #20]
    c656:	2303      	movs	r3, #3
    c658:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c65c:	f842 3f10 	str.w	r3, [r2, #16]!
    c660:	f00b fe3f 	bl	182e2 <z_log_msg_static_create.constprop.0>
}
    c664:	46bd      	mov	sp, r7
    c666:	bd80      	pop	{r7, pc}
    c668:	0001cd8f 	.word	0x0001cd8f
    c66c:	0001b898 	.word	0x0001b898

0000c670 <le_data_len_change>:
{
    c670:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    c672:	68c3      	ldr	r3, [r0, #12]
{
    c674:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    c676:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    c678:	4620      	mov	r0, r4
    c67a:	f002 fd99 	bl	f1b0 <bt_conn_lookup_handle>
	if (!conn) {
    c67e:	b980      	cbnz	r0, c6a2 <le_data_len_change+0x32>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
    c680:	466d      	mov	r5, sp
    c682:	b088      	sub	sp, #32
    c684:	466a      	mov	r2, sp
    c686:	4b08      	ldr	r3, [pc, #32]	; (c6a8 <le_data_len_change+0x38>)
    c688:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c68c:	e9c2 3405 	strd	r3, r4, [r2, #20]
    c690:	2303      	movs	r3, #3
    c692:	4806      	ldr	r0, [pc, #24]	; (c6ac <le_data_len_change+0x3c>)
    c694:	f842 3f10 	str.w	r3, [r2, #16]!
    c698:	f00b fe23 	bl	182e2 <z_log_msg_static_create.constprop.0>
    c69c:	46ad      	mov	sp, r5
}
    c69e:	46bd      	mov	sp, r7
    c6a0:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
    c6a2:	f00c f820 	bl	186e6 <bt_conn_unref>
    c6a6:	e7fa      	b.n	c69e <le_data_len_change+0x2e>
    c6a8:	0001cdb1 	.word	0x0001cdb1
    c6ac:	0001b898 	.word	0x0001b898

0000c6b0 <le_phy_update_complete>:
{
    c6b0:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    c6b2:	68c3      	ldr	r3, [r0, #12]
{
    c6b4:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    c6b6:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    c6ba:	4620      	mov	r0, r4
    c6bc:	f002 fd78 	bl	f1b0 <bt_conn_lookup_handle>
	if (!conn) {
    c6c0:	b980      	cbnz	r0, c6e4 <le_phy_update_complete+0x34>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
    c6c2:	466d      	mov	r5, sp
    c6c4:	b088      	sub	sp, #32
    c6c6:	466a      	mov	r2, sp
    c6c8:	4b08      	ldr	r3, [pc, #32]	; (c6ec <le_phy_update_complete+0x3c>)
    c6ca:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c6ce:	e9c2 3405 	strd	r3, r4, [r2, #20]
    c6d2:	2303      	movs	r3, #3
    c6d4:	4806      	ldr	r0, [pc, #24]	; (c6f0 <le_phy_update_complete+0x40>)
    c6d6:	f842 3f10 	str.w	r3, [r2, #16]!
    c6da:	f00b fe02 	bl	182e2 <z_log_msg_static_create.constprop.0>
    c6de:	46ad      	mov	sp, r5
}
    c6e0:	46bd      	mov	sp, r7
    c6e2:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
    c6e4:	f00b ffff 	bl	186e6 <bt_conn_unref>
    c6e8:	e7fa      	b.n	c6e0 <le_phy_update_complete+0x30>
    c6ea:	bf00      	nop
    c6ec:	0001cdb1 	.word	0x0001cdb1
    c6f0:	0001b898 	.word	0x0001b898

0000c6f4 <hci_disconn_complete>:
{
    c6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    c6f8:	68c5      	ldr	r5, [r0, #12]
{
    c6fa:	af00      	add	r7, sp, #0
	if (evt->status) {
    c6fc:	782e      	ldrb	r6, [r5, #0]
    c6fe:	b9ae      	cbnz	r6, c72c <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    c700:	f8b5 8001 	ldrh.w	r8, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    c704:	4640      	mov	r0, r8
    c706:	f002 fd53 	bl	f1b0 <bt_conn_lookup_handle>
	if (!conn) {
    c70a:	4604      	mov	r4, r0
    c70c:	b988      	cbnz	r0, c732 <hci_disconn_complete+0x3e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
    c70e:	466c      	mov	r4, sp
    c710:	b088      	sub	sp, #32
    c712:	466a      	mov	r2, sp
    c714:	4b0b      	ldr	r3, [pc, #44]	; (c744 <hci_disconn_complete+0x50>)
    c716:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c71a:	e9c2 3805 	strd	r3, r8, [r2, #20]
    c71e:	2303      	movs	r3, #3
    c720:	4809      	ldr	r0, [pc, #36]	; (c748 <hci_disconn_complete+0x54>)
    c722:	f842 3f10 	str.w	r3, [r2, #16]!
    c726:	f00b fddc 	bl	182e2 <z_log_msg_static_create.constprop.0>
    c72a:	46a5      	mov	sp, r4
}
    c72c:	46bd      	mov	sp, r7
    c72e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
    c732:	78eb      	ldrb	r3, [r5, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    c734:	4631      	mov	r1, r6
	conn->err = evt->reason;
    c736:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    c738:	f002 fd42 	bl	f1c0 <bt_conn_set_state>
		bt_conn_unref(conn);
    c73c:	4620      	mov	r0, r4
	bt_conn_unref(conn);
    c73e:	f00b ffd2 	bl	186e6 <bt_conn_unref>
    c742:	e7f3      	b.n	c72c <hci_disconn_complete+0x38>
    c744:	0001cdd5 	.word	0x0001cdd5
    c748:	0001b898 	.word	0x0001b898

0000c74c <handle_event>:
{
    c74c:	b5b0      	push	{r4, r5, r7, lr}
    c74e:	4604      	mov	r4, r0
    c750:	af00      	add	r7, sp, #0
    c752:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	for (i = 0; i < num_handlers; i++) {
    c756:	4293      	cmp	r3, r2
    c758:	d103      	bne.n	c762 <handle_event+0x16>
	if (err == -EOPNOTSUPP) {
    c75a:	4620      	mov	r0, r4
    c75c:	f7ff ff4a 	bl	c5f4 <handle_event.part.0>
}
    c760:	e018      	b.n	c794 <handle_event+0x48>
		if (handler->event != event) {
    c762:	4610      	mov	r0, r2
    c764:	f810 5b08 	ldrb.w	r5, [r0], #8
    c768:	42a5      	cmp	r5, r4
    c76a:	d119      	bne.n	c7a0 <handle_event+0x54>
		if (buf->len < handler->min_len) {
    c76c:	8a0b      	ldrh	r3, [r1, #16]
    c76e:	7850      	ldrb	r0, [r2, #1]
    c770:	4298      	cmp	r0, r3
    c772:	d911      	bls.n	c798 <handle_event+0x4c>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
    c774:	466d      	mov	r5, sp
    c776:	b088      	sub	sp, #32
    c778:	466a      	mov	r2, sp
    c77a:	490a      	ldr	r1, [pc, #40]	; (c7a4 <handle_event+0x58>)
    c77c:	61d4      	str	r4, [r2, #28]
    c77e:	e9c2 1305 	strd	r1, r3, [r2, #20]
    c782:	2304      	movs	r3, #4
    c784:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    c788:	4807      	ldr	r0, [pc, #28]	; (c7a8 <handle_event+0x5c>)
    c78a:	f842 3f10 	str.w	r3, [r2, #16]!
    c78e:	f00b fda8 	bl	182e2 <z_log_msg_static_create.constprop.0>
    c792:	46ad      	mov	sp, r5
}
    c794:	46bd      	mov	sp, r7
    c796:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
    c798:	4608      	mov	r0, r1
    c79a:	6853      	ldr	r3, [r2, #4]
    c79c:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
    c79e:	e7f9      	b.n	c794 <handle_event+0x48>
    c7a0:	4602      	mov	r2, r0
    c7a2:	e7d8      	b.n	c756 <handle_event+0xa>
    c7a4:	0001cdfb 	.word	0x0001cdfb
    c7a8:	0001b898 	.word	0x0001b898

0000c7ac <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
    c7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
    c7ae:	4855      	ldr	r0, [pc, #340]	; (c904 <rx_work_handler+0x158>)
{
    c7b0:	af00      	add	r7, sp, #0
	buf = net_buf_slist_get(&bt_dev.rx_queue);
    c7b2:	f00c ffeb 	bl	1978c <net_buf_slist_get>
	if (!buf) {
    c7b6:	4604      	mov	r4, r0
    c7b8:	2800      	cmp	r0, #0
    c7ba:	d06a      	beq.n	c892 <rx_work_handler+0xe6>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    c7bc:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
    c7be:	2b01      	cmp	r3, #1
    c7c0:	d069      	beq.n	c896 <rx_work_handler+0xea>
    c7c2:	2b03      	cmp	r3, #3
    c7c4:	f040 8099 	bne.w	c8fa <rx_work_handler+0x14e>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    c7c8:	8a03      	ldrh	r3, [r0, #16]
    c7ca:	2b03      	cmp	r3, #3
    c7cc:	d80c      	bhi.n	c7e8 <rx_work_handler+0x3c>
    c7ce:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
    c7d2:	4a4d      	ldr	r2, [pc, #308]	; (c908 <rx_work_handler+0x15c>)
    c7d4:	494d      	ldr	r1, [pc, #308]	; (c90c <rx_work_handler+0x160>)
    c7d6:	484e      	ldr	r0, [pc, #312]	; (c910 <rx_work_handler+0x164>)
    c7d8:	f00a fb10 	bl	16dfc <assert_print>
    c7dc:	4040      	eors	r0, r0
    c7de:	f380 8811 	msr	BASEPRI, r0
    c7e2:	f04f 0003 	mov.w	r0, #3
    c7e6:	df02      	svc	2
    c7e8:	2104      	movs	r1, #4
    c7ea:	f104 000c 	add.w	r0, r4, #12
    c7ee:	f00d f840 	bl	19872 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    c7f2:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    c7f4:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    c7f6:	8806      	ldrh	r6, [r0, #0]
	if (buf->len != len) {
    c7f8:	8a21      	ldrh	r1, [r4, #16]
	acl(buf)->handle = bt_acl_handle(handle);
    c7fa:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    c7fe:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
    c800:	8360      	strh	r0, [r4, #26]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    c802:	7662      	strb	r2, [r4, #25]
	if (buf->len != len) {
    c804:	d010      	beq.n	c828 <rx_work_handler+0x7c>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    c806:	466d      	mov	r5, sp
    c808:	b088      	sub	sp, #32
    c80a:	466a      	mov	r2, sp
    c80c:	4841      	ldr	r0, [pc, #260]	; (c914 <rx_work_handler+0x168>)
    c80e:	61d3      	str	r3, [r2, #28]
    c810:	2304      	movs	r3, #4
    c812:	e9c2 0105 	strd	r0, r1, [r2, #20]
    c816:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    c81a:	f842 3f10 	str.w	r3, [r2, #16]!
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    c81e:	483e      	ldr	r0, [pc, #248]	; (c918 <rx_work_handler+0x16c>)
    c820:	f00b fd5f 	bl	182e2 <z_log_msg_static_create.constprop.0>
    c824:	46ad      	mov	sp, r5
    c826:	e064      	b.n	c8f2 <rx_work_handler+0x146>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    c828:	f002 fcc2 	bl	f1b0 <bt_conn_lookup_handle>
	if (!conn) {
    c82c:	4605      	mov	r5, r0
    c82e:	b960      	cbnz	r0, c84a <rx_work_handler+0x9e>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    c830:	466d      	mov	r5, sp
    c832:	b088      	sub	sp, #32
    c834:	8b63      	ldrh	r3, [r4, #26]
    c836:	466a      	mov	r2, sp
    c838:	4938      	ldr	r1, [pc, #224]	; (c91c <rx_work_handler+0x170>)
	switch (bt_buf_get_type(buf)) {
    c83a:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    c83e:	2303      	movs	r3, #3
    c840:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c844:	f842 3f10 	str.w	r3, [r2, #16]!
    c848:	e7e9      	b.n	c81e <rx_work_handler+0x72>
	acl(buf)->index = bt_conn_index(conn);
    c84a:	f002 fdb7 	bl	f3bc <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    c84e:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
    c850:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
    c852:	0b32      	lsrs	r2, r6, #12
    c854:	4628      	mov	r0, r5
    c856:	f002 fb55 	bl	ef04 <bt_conn_recv>
	bt_conn_unref(conn);
    c85a:	4628      	mov	r0, r5
    c85c:	f00b ff43 	bl	186e6 <bt_conn_unref>
	return list->head;
    c860:	4b2f      	ldr	r3, [pc, #188]	; (c920 <rx_work_handler+0x174>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
    c862:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    c866:	b1a3      	cbz	r3, c892 <rx_work_handler+0xe6>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
    c868:	492e      	ldr	r1, [pc, #184]	; (c924 <rx_work_handler+0x178>)
    c86a:	482f      	ldr	r0, [pc, #188]	; (c928 <rx_work_handler+0x17c>)
    c86c:	f00e fa44 	bl	1acf8 <k_work_submit_to_queue>
#endif
		if (err < 0) {
    c870:	2800      	cmp	r0, #0
    c872:	da0e      	bge.n	c892 <rx_work_handler+0xe6>
			LOG_ERR("Could not submit rx_work: %d", err);
    c874:	466c      	mov	r4, sp
    c876:	b088      	sub	sp, #32
    c878:	466a      	mov	r2, sp
    c87a:	4b2c      	ldr	r3, [pc, #176]	; (c92c <rx_work_handler+0x180>)
    c87c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c880:	e9c2 3005 	strd	r3, r0, [r2, #20]
    c884:	2303      	movs	r3, #3
    c886:	4824      	ldr	r0, [pc, #144]	; (c918 <rx_work_handler+0x16c>)
    c888:	f842 3f10 	str.w	r3, [r2, #16]!
    c88c:	f00b fd29 	bl	182e2 <z_log_msg_static_create.constprop.0>
    c890:	46a5      	mov	sp, r4
		}
	}
}
    c892:	46bd      	mov	sp, r7
    c894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    c896:	8a03      	ldrh	r3, [r0, #16]
    c898:	2b01      	cmp	r3, #1
    c89a:	d80c      	bhi.n	c8b6 <rx_work_handler+0x10a>
    c89c:	f640 2347 	movw	r3, #2631	; 0xa47
    c8a0:	4a19      	ldr	r2, [pc, #100]	; (c908 <rx_work_handler+0x15c>)
    c8a2:	491a      	ldr	r1, [pc, #104]	; (c90c <rx_work_handler+0x160>)
    c8a4:	481a      	ldr	r0, [pc, #104]	; (c910 <rx_work_handler+0x164>)
    c8a6:	f00a faa9 	bl	16dfc <assert_print>
    c8aa:	4040      	eors	r0, r0
    c8ac:	f380 8811 	msr	BASEPRI, r0
    c8b0:	f04f 0003 	mov.w	r0, #3
    c8b4:	df02      	svc	2
    c8b6:	2102      	movs	r1, #2
    c8b8:	f104 000c 	add.w	r0, r4, #12
    c8bc:	f00c ffd9 	bl	19872 <net_buf_simple_pull_mem>
    c8c0:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    c8c2:	7800      	ldrb	r0, [r0, #0]
    c8c4:	f00b fcef 	bl	182a6 <bt_hci_evt_get_flags>
    c8c8:	0783      	lsls	r3, r0, #30
    c8ca:	d40c      	bmi.n	c8e6 <rx_work_handler+0x13a>
    c8cc:	f640 234b 	movw	r3, #2635	; 0xa4b
    c8d0:	4a0d      	ldr	r2, [pc, #52]	; (c908 <rx_work_handler+0x15c>)
    c8d2:	4917      	ldr	r1, [pc, #92]	; (c930 <rx_work_handler+0x184>)
    c8d4:	480e      	ldr	r0, [pc, #56]	; (c910 <rx_work_handler+0x164>)
    c8d6:	f00a fa91 	bl	16dfc <assert_print>
    c8da:	4040      	eors	r0, r0
    c8dc:	f380 8811 	msr	BASEPRI, r0
    c8e0:	f04f 0003 	mov.w	r0, #3
    c8e4:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    c8e6:	2304      	movs	r3, #4
    c8e8:	4621      	mov	r1, r4
    c8ea:	4a12      	ldr	r2, [pc, #72]	; (c934 <rx_work_handler+0x188>)
    c8ec:	7828      	ldrb	r0, [r5, #0]
    c8ee:	f7ff ff2d 	bl	c74c <handle_event>
		net_buf_unref(buf);
    c8f2:	4620      	mov	r0, r4
    c8f4:	f005 f93e 	bl	11b74 <net_buf_unref>
		break;
    c8f8:	e7b2      	b.n	c860 <rx_work_handler+0xb4>
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    c8fa:	466d      	mov	r5, sp
    c8fc:	b088      	sub	sp, #32
    c8fe:	466a      	mov	r2, sp
    c900:	490d      	ldr	r1, [pc, #52]	; (c938 <rx_work_handler+0x18c>)
    c902:	e79a      	b.n	c83a <rx_work_handler+0x8e>
    c904:	2000813c 	.word	0x2000813c
    c908:	0001ce1d 	.word	0x0001ce1d
    c90c:	0001ce51 	.word	0x0001ce51
    c910:	0001ce6a 	.word	0x0001ce6a
    c914:	0001ce87 	.word	0x0001ce87
    c918:	0001b898 	.word	0x0001b898
    c91c:	0001ceab 	.word	0x0001ceab
    c920:	20008000 	.word	0x20008000
    c924:	200082fc 	.word	0x200082fc
    c928:	200091e8 	.word	0x200091e8
    c92c:	0001cd50 	.word	0x0001cd50
    c930:	0001cecd 	.word	0x0001cecd
    c934:	0001bd94 	.word	0x0001bd94
    c938:	0001cefb 	.word	0x0001cefb

0000c93c <hci_le_meta_event>:
{
    c93c:	b510      	push	{r4, lr}
    c93e:	2101      	movs	r1, #1
    c940:	4604      	mov	r4, r0
    c942:	300c      	adds	r0, #12
    c944:	f00c ff95 	bl	19872 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    c948:	4621      	mov	r1, r4
}
    c94a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    c94e:	2307      	movs	r3, #7
    c950:	4a01      	ldr	r2, [pc, #4]	; (c958 <hci_le_meta_event+0x1c>)
    c952:	7800      	ldrb	r0, [r0, #0]
    c954:	f7ff befa 	b.w	c74c <handle_event>
    c958:	0001bdb4 	.word	0x0001bdb4

0000c95c <le_remote_feat_complete>:
{
    c95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    c95e:	68c5      	ldr	r5, [r0, #12]
{
    c960:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    c962:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    c966:	4630      	mov	r0, r6
    c968:	f002 fc22 	bl	f1b0 <bt_conn_lookup_handle>
	if (!conn) {
    c96c:	4604      	mov	r4, r0
    c96e:	b980      	cbnz	r0, c992 <le_remote_feat_complete+0x36>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
    c970:	466c      	mov	r4, sp
    c972:	b088      	sub	sp, #32
    c974:	466a      	mov	r2, sp
    c976:	4b0f      	ldr	r3, [pc, #60]	; (c9b4 <le_remote_feat_complete+0x58>)
    c978:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c97c:	e9c2 3605 	strd	r3, r6, [r2, #20]
    c980:	2303      	movs	r3, #3
    c982:	480d      	ldr	r0, [pc, #52]	; (c9b8 <le_remote_feat_complete+0x5c>)
    c984:	f842 3f10 	str.w	r3, [r2, #16]!
    c988:	f00b fcab 	bl	182e2 <z_log_msg_static_create.constprop.0>
    c98c:	46a5      	mov	sp, r4
}
    c98e:	46bd      	mov	sp, r7
    c990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
    c992:	782b      	ldrb	r3, [r5, #0]
    c994:	b923      	cbnz	r3, c9a0 <le_remote_feat_complete+0x44>
		memcpy(conn->le.features, evt->features,
    c996:	2208      	movs	r2, #8
    c998:	1ce9      	adds	r1, r5, #3
    c99a:	30ad      	adds	r0, #173	; 0xad
    c99c:	f00b fc07 	bl	181ae <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    c9a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    c9a4:	1d20      	adds	r0, r4, #4
    c9a6:	f00b fc91 	bl	182cc <atomic_or>
	bt_conn_unref(conn);
    c9aa:	4620      	mov	r0, r4
    c9ac:	f00b fe9b 	bl	186e6 <bt_conn_unref>
    c9b0:	e7ed      	b.n	c98e <le_remote_feat_complete+0x32>
    c9b2:	bf00      	nop
    c9b4:	0001cdb1 	.word	0x0001cdb1
    c9b8:	0001b898 	.word	0x0001b898

0000c9bc <hci_cmd_done>:
{
    c9bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c9c0:	4606      	mov	r6, r0
    c9c2:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    c9c4:	7a90      	ldrb	r0, [r2, #10]
{
    c9c6:	4688      	mov	r8, r1
    c9c8:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    c9ca:	f005 f811 	bl	119f0 <net_buf_pool_get>
    c9ce:	4d41      	ldr	r5, [pc, #260]	; (cad4 <hci_cmd_done+0x118>)
    c9d0:	4285      	cmp	r5, r0
    c9d2:	d018      	beq.n	ca06 <hci_cmd_done+0x4a>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
    c9d4:	7aa4      	ldrb	r4, [r4, #10]
    c9d6:	46e8      	mov	r8, sp
    c9d8:	4620      	mov	r0, r4
    c9da:	f005 f809 	bl	119f0 <net_buf_pool_get>
    c9de:	b08a      	sub	sp, #40	; 0x28
    c9e0:	466a      	mov	r2, sp
    c9e2:	4b3d      	ldr	r3, [pc, #244]	; (cad8 <hci_cmd_done+0x11c>)
    c9e4:	e9c2 4007 	strd	r4, r0, [r2, #28]
    c9e8:	e9c2 3605 	strd	r3, r6, [r2, #20]
    c9ec:	2306      	movs	r3, #6
    c9ee:	6255      	str	r5, [r2, #36]	; 0x24
    c9f0:	f44f 5142 	mov.w	r1, #12416	; 0x3080
    c9f4:	4839      	ldr	r0, [pc, #228]	; (cadc <hci_cmd_done+0x120>)
    c9f6:	f842 3f10 	str.w	r3, [r2, #16]!
    c9fa:	f00b fc72 	bl	182e2 <z_log_msg_static_create.constprop.0>
    c9fe:	46c5      	mov	sp, r8
}
    ca00:	46bd      	mov	sp, r7
    ca02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    ca06:	4620      	mov	r0, r4
    ca08:	f004 fffa 	bl	11a00 <net_buf_id>
    ca0c:	f04f 090c 	mov.w	r9, #12
    ca10:	4d33      	ldr	r5, [pc, #204]	; (cae0 <hci_cmd_done+0x124>)
    ca12:	fb09 5000 	mla	r0, r9, r0, r5
    ca16:	8843      	ldrh	r3, [r0, #2]
    ca18:	42b3      	cmp	r3, r6
    ca1a:	d016      	beq.n	ca4a <hci_cmd_done+0x8e>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
    ca1c:	4620      	mov	r0, r4
    ca1e:	f004 ffef 	bl	11a00 <net_buf_id>
    ca22:	fb09 5000 	mla	r0, r9, r0, r5
    ca26:	466c      	mov	r4, sp
    ca28:	b088      	sub	sp, #32
    ca2a:	466a      	mov	r2, sp
    ca2c:	8843      	ldrh	r3, [r0, #2]
    ca2e:	61d3      	str	r3, [r2, #28]
    ca30:	2304      	movs	r3, #4
    ca32:	492c      	ldr	r1, [pc, #176]	; (cae4 <hci_cmd_done+0x128>)
    ca34:	4829      	ldr	r0, [pc, #164]	; (cadc <hci_cmd_done+0x120>)
    ca36:	e9c2 1605 	strd	r1, r6, [r2, #20]
    ca3a:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    ca3e:	f842 3f10 	str.w	r3, [r2, #16]!
    ca42:	f00b fc4e 	bl	182e2 <z_log_msg_static_create.constprop.0>
    ca46:	46a5      	mov	sp, r4
		return;
    ca48:	e7da      	b.n	ca00 <hci_cmd_done+0x44>
	if (bt_dev.sent_cmd) {
    ca4a:	4e27      	ldr	r6, [pc, #156]	; (cae8 <hci_cmd_done+0x12c>)
    ca4c:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
    ca50:	b120      	cbz	r0, ca5c <hci_cmd_done+0xa0>
		net_buf_unref(bt_dev.sent_cmd);
    ca52:	f005 f88f 	bl	11b74 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    ca56:	2300      	movs	r3, #0
    ca58:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
    ca5c:	4620      	mov	r0, r4
    ca5e:	f004 ffcf 	bl	11a00 <net_buf_id>
    ca62:	260c      	movs	r6, #12
    ca64:	fb06 5000 	mla	r0, r6, r0, r5
    ca68:	6843      	ldr	r3, [r0, #4]
    ca6a:	b1ab      	cbz	r3, ca98 <hci_cmd_done+0xdc>
    ca6c:	f1b8 0f00 	cmp.w	r8, #0
    ca70:	d112      	bne.n	ca98 <hci_cmd_done+0xdc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    ca72:	4620      	mov	r0, r4
    ca74:	f004 ffc4 	bl	11a00 <net_buf_id>
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    ca78:	2101      	movs	r1, #1
    ca7a:	fb06 5000 	mla	r0, r6, r0, r5
    ca7e:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    ca80:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
    ca84:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
    ca86:	f003 061f 	and.w	r6, r3, #31
    ca8a:	40b1      	lsls	r1, r6
	if (val) {
    ca8c:	095b      	lsrs	r3, r3, #5
    ca8e:	b1da      	cbz	r2, cac8 <hci_cmd_done+0x10c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    ca90:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    ca94:	f00b fc1a 	bl	182cc <atomic_or>
	if (cmd(buf)->sync) {
    ca98:	4620      	mov	r0, r4
    ca9a:	f004 ffb1 	bl	11a00 <net_buf_id>
    ca9e:	260c      	movs	r6, #12
    caa0:	fb06 5000 	mla	r0, r6, r0, r5
    caa4:	6883      	ldr	r3, [r0, #8]
    caa6:	2b00      	cmp	r3, #0
    caa8:	d0aa      	beq.n	ca00 <hci_cmd_done+0x44>
		cmd(buf)->status = status;
    caaa:	4620      	mov	r0, r4
    caac:	f004 ffa8 	bl	11a00 <net_buf_id>
    cab0:	4370      	muls	r0, r6
    cab2:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    cab6:	4620      	mov	r0, r4
    cab8:	f004 ffa2 	bl	11a00 <net_buf_id>
    cabc:	fb06 5500 	mla	r5, r6, r0, r5
    cac0:	68a8      	ldr	r0, [r5, #8]
    cac2:	f008 fd9f 	bl	15604 <z_impl_k_sem_give>
}
    cac6:	e79b      	b.n	ca00 <hci_cmd_done+0x44>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    cac8:	43c9      	mvns	r1, r1
    caca:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    cace:	f00b fc0b 	bl	182e8 <atomic_and.isra.0>
    cad2:	e7e1      	b.n	ca98 <hci_cmd_done+0xdc>
    cad4:	20008794 	.word	0x20008794
    cad8:	0001cf0f 	.word	0x0001cf0f
    cadc:	0001b898 	.word	0x0001b898
    cae0:	20009820 	.word	0x20009820
    cae4:	0001cf44 	.word	0x0001cf44
    cae8:	20008000 	.word	0x20008000

0000caec <hci_cmd_status>:
{
    caec:	b538      	push	{r3, r4, r5, lr}
    caee:	2104      	movs	r1, #4
    caf0:	4604      	mov	r4, r0
    caf2:	300c      	adds	r0, #12
    caf4:	f00c febd 	bl	19872 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    caf8:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    cafa:	7801      	ldrb	r1, [r0, #0]
    cafc:	4622      	mov	r2, r4
    cafe:	8840      	ldrh	r0, [r0, #2]
    cb00:	f7ff ff5c 	bl	c9bc <hci_cmd_done>
	if (ncmd) {
    cb04:	b125      	cbz	r5, cb10 <hci_cmd_status+0x24>
}
    cb06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
    cb0a:	4802      	ldr	r0, [pc, #8]	; (cb14 <hci_cmd_status+0x28>)
    cb0c:	f008 bd7a 	b.w	15604 <z_impl_k_sem_give>
    cb10:	bd38      	pop	{r3, r4, r5, pc}
    cb12:	bf00      	nop
    cb14:	20008120 	.word	0x20008120

0000cb18 <hci_cmd_complete>:
{
    cb18:	b538      	push	{r3, r4, r5, lr}
    cb1a:	2103      	movs	r1, #3
    cb1c:	4604      	mov	r4, r0
    cb1e:	300c      	adds	r0, #12
    cb20:	f00c fea7 	bl	19872 <net_buf_simple_pull_mem>
	status = buf->data[0];
    cb24:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
    cb26:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    cb28:	4622      	mov	r2, r4
    cb2a:	7819      	ldrb	r1, [r3, #0]
    cb2c:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    cb30:	f7ff ff44 	bl	c9bc <hci_cmd_done>
	if (ncmd) {
    cb34:	b125      	cbz	r5, cb40 <hci_cmd_complete+0x28>
}
    cb36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cb3a:	4802      	ldr	r0, [pc, #8]	; (cb44 <hci_cmd_complete+0x2c>)
    cb3c:	f008 bd62 	b.w	15604 <z_impl_k_sem_give>
    cb40:	bd38      	pop	{r3, r4, r5, pc}
    cb42:	bf00      	nop
    cb44:	20008120 	.word	0x20008120

0000cb48 <hci_num_completed_packets>:
{
    cb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cb4c:	b087      	sub	sp, #28
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
    cb4e:	2301      	movs	r3, #1
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    cb50:	f8d0 800c 	ldr.w	r8, [r0, #12]
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
    cb54:	8a01      	ldrh	r1, [r0, #16]
    cb56:	f898 4000 	ldrb.w	r4, [r8]
{
    cb5a:	af00      	add	r7, sp, #0
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
    cb5c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    cb60:	428b      	cmp	r3, r1
    cb62:	f240 808c 	bls.w	cc7e <hci_num_completed_packets+0x136>
		LOG_ERR("evt num_handles (=%u) too large (%u > %u)",
    cb66:	466d      	mov	r5, sp
    cb68:	b08a      	sub	sp, #40	; 0x28
    cb6a:	466a      	mov	r2, sp
    cb6c:	e9c2 3107 	strd	r3, r1, [r2, #28]
    cb70:	2305      	movs	r3, #5
    cb72:	4845      	ldr	r0, [pc, #276]	; (cc88 <hci_num_completed_packets+0x140>)
    cb74:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    cb78:	e9c2 0405 	strd	r0, r4, [r2, #20]
    cb7c:	4843      	ldr	r0, [pc, #268]	; (cc8c <hci_num_completed_packets+0x144>)
    cb7e:	f842 3f10 	str.w	r3, [r2, #16]!
    cb82:	f00b fbae 	bl	182e2 <z_log_msg_static_create.constprop.0>
    cb86:	46ad      	mov	sp, r5
}
    cb88:	371c      	adds	r7, #28
    cb8a:	46bd      	mov	sp, r7
    cb8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("No connection for handle %u", handle);
    cb90:	466c      	mov	r4, sp
    cb92:	b088      	sub	sp, #32
    cb94:	466a      	mov	r2, sp
    cb96:	4b3e      	ldr	r3, [pc, #248]	; (cc90 <hci_num_completed_packets+0x148>)
    cb98:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cb9c:	e9c2 3b05 	strd	r3, fp, [r2, #20]
    cba0:	2303      	movs	r3, #3
    cba2:	483a      	ldr	r0, [pc, #232]	; (cc8c <hci_num_completed_packets+0x144>)
    cba4:	f842 3f10 	str.w	r3, [r2, #16]!
    cba8:	f00b fb9b 	bl	182e2 <z_log_msg_static_create.constprop.0>
    cbac:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
    cbae:	3501      	adds	r5, #1
    cbb0:	f898 3000 	ldrb.w	r3, [r8]
    cbb4:	429d      	cmp	r5, r3
    cbb6:	dae7      	bge.n	cb88 <hci_num_completed_packets+0x40>
		handle = sys_le16_to_cpu(evt->h[i].handle);
    cbb8:	eb08 0385 	add.w	r3, r8, r5, lsl #2
    cbbc:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    cbc0:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    cbc4:	4658      	mov	r0, fp
    cbc6:	f002 faf3 	bl	f1b0 <bt_conn_lookup_handle>
		if (!conn) {
    cbca:	4604      	mov	r4, r0
    cbcc:	2800      	cmp	r0, #0
    cbce:	d0df      	beq.n	cb90 <hci_num_completed_packets+0x48>
			k_work_submit(&conn->tx_complete_work);
    cbd0:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    cbd4:	b346      	cbz	r6, cc28 <hci_num_completed_packets+0xe0>
	__asm__ volatile(
    cbd6:	f04f 0320 	mov.w	r3, #32
    cbda:	f3ef 8211 	mrs	r2, BASEPRI
    cbde:	f383 8812 	msr	BASEPRI_MAX, r3
    cbe2:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    cbe6:	69e3      	ldr	r3, [r4, #28]
    cbe8:	b16b      	cbz	r3, cc06 <hci_num_completed_packets+0xbe>
				conn->pending_no_cb--;
    cbea:	3b01      	subs	r3, #1
    cbec:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    cbee:	f382 8811 	msr	BASEPRI, r2
    cbf2:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    cbf6:	4620      	mov	r0, r4
    cbf8:	f002 f94a 	bl	ee90 <bt_conn_get_pkts>
    cbfc:	3e01      	subs	r6, #1
    cbfe:	f008 fd01 	bl	15604 <z_impl_k_sem_give>
    cc02:	b2b6      	uxth	r6, r6
    cc04:	e7e6      	b.n	cbd4 <hci_num_completed_packets+0x8c>
    cc06:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    cc08:	b993      	cbnz	r3, cc30 <hci_num_completed_packets+0xe8>
    cc0a:	f382 8811 	msr	BASEPRI, r2
    cc0e:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
    cc12:	2302      	movs	r3, #2
    cc14:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cc18:	481c      	ldr	r0, [pc, #112]	; (cc8c <hci_num_completed_packets+0x144>)
    cc1a:	f107 0210 	add.w	r2, r7, #16
    cc1e:	f8c7 a014 	str.w	sl, [r7, #20]
    cc22:	613b      	str	r3, [r7, #16]
    cc24:	f00b fb5d 	bl	182e2 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
    cc28:	4620      	mov	r0, r4
    cc2a:	f00b fd5c 	bl	186e6 <bt_conn_unref>
    cc2e:	e7be      	b.n	cbae <hci_num_completed_packets+0x66>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    cc30:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    cc32:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    cc34:	428b      	cmp	r3, r1
	list->head = node;
    cc36:	6160      	str	r0, [r4, #20]
	list->tail = node;
    cc38:	bf08      	it	eq
    cc3a:	61a0      	streq	r0, [r4, #24]
    cc3c:	f382 8811 	msr	BASEPRI, r2
    cc40:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    cc44:	f04f 0220 	mov.w	r2, #32
    cc48:	f3ef 8111 	mrs	r1, BASEPRI
    cc4c:	f382 8812 	msr	BASEPRI_MAX, r2
    cc50:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    cc54:	68da      	ldr	r2, [r3, #12]
    cc56:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
    cc58:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
    cc5c:	f8c3 9000 	str.w	r9, [r3]
	return list->tail;
    cc60:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
    cc62:	b94a      	cbnz	r2, cc78 <hci_num_completed_packets+0x130>
	list->head = node;
    cc64:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    cc68:	f381 8811 	msr	BASEPRI, r1
    cc6c:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
    cc70:	4658      	mov	r0, fp
    cc72:	f008 fe43 	bl	158fc <k_work_submit>
    cc76:	e7be      	b.n	cbf6 <hci_num_completed_packets+0xae>
	parent->next = child;
    cc78:	6013      	str	r3, [r2, #0]
	list->tail = node;
    cc7a:	6263      	str	r3, [r4, #36]	; 0x24
}
    cc7c:	e7f4      	b.n	cc68 <hci_num_completed_packets+0x120>
	for (i = 0; i < evt->num_handles; i++) {
    cc7e:	2500      	movs	r5, #0
				LOG_ERR("packets count mismatch");
    cc80:	f8df a010 	ldr.w	sl, [pc, #16]	; cc94 <hci_num_completed_packets+0x14c>
			tx->pending_no_cb = 0U;
    cc84:	46a9      	mov	r9, r5
    cc86:	e793      	b.n	cbb0 <hci_num_completed_packets+0x68>
    cc88:	0001cf77 	.word	0x0001cf77
    cc8c:	0001b898 	.word	0x0001b898
    cc90:	0001cfa1 	.word	0x0001cfa1
    cc94:	0001cfbd 	.word	0x0001cfbd

0000cc98 <le_conn_update_complete>:
{
    cc98:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc9a:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    cc9c:	68c5      	ldr	r5, [r0, #12]
{
    cc9e:	af00      	add	r7, sp, #0
	handle = sys_le16_to_cpu(evt->handle);
    cca0:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    cca4:	4630      	mov	r0, r6
    cca6:	f002 fa83 	bl	f1b0 <bt_conn_lookup_handle>
	if (!conn) {
    ccaa:	4604      	mov	r4, r0
    ccac:	b988      	cbnz	r0, ccd2 <le_conn_update_complete+0x3a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
    ccae:	466c      	mov	r4, sp
    ccb0:	b088      	sub	sp, #32
    ccb2:	466a      	mov	r2, sp
    ccb4:	4b2b      	ldr	r3, [pc, #172]	; (cd64 <le_conn_update_complete+0xcc>)
    ccb6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ccba:	e9c2 3605 	strd	r3, r6, [r2, #20]
    ccbe:	2303      	movs	r3, #3
    ccc0:	4829      	ldr	r0, [pc, #164]	; (cd68 <le_conn_update_complete+0xd0>)
    ccc2:	f842 3f10 	str.w	r3, [r2, #16]!
    ccc6:	f00b fb0c 	bl	182e2 <z_log_msg_static_create.constprop.0>
    ccca:	46a5      	mov	sp, r4
}
    cccc:	370c      	adds	r7, #12
    ccce:	46bd      	mov	sp, r7
    ccd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    ccd2:	782b      	ldrb	r3, [r5, #0]
	    !atomic_test_and_set_bit(conn->flags,
    ccd4:	1d06      	adds	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    ccd6:	2b1a      	cmp	r3, #26
    ccd8:	d117      	bne.n	cd0a <le_conn_update_complete+0x72>
    ccda:	78c3      	ldrb	r3, [r0, #3]
    ccdc:	2b01      	cmp	r3, #1
    ccde:	d128      	bne.n	cd32 <le_conn_update_complete+0x9a>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    cce0:	f44f 6180 	mov.w	r1, #1024	; 0x400
    cce4:	4630      	mov	r0, r6
    cce6:	f00b faf1 	bl	182cc <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
    ccea:	0542      	lsls	r2, r0, #21
    ccec:	d40d      	bmi.n	cd0a <le_conn_update_complete+0x72>
		param.interval_min = conn->le.interval_min;
    ccee:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
		bt_l2cap_update_conn_param(conn, &param);
    ccf2:	4639      	mov	r1, r7
		param.interval_min = conn->le.interval_min;
    ccf4:	603b      	str	r3, [r7, #0]
		param.latency = conn->le.pending_latency;
    ccf6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		bt_l2cap_update_conn_param(conn, &param);
    ccfa:	4620      	mov	r0, r4
		param.latency = conn->le.pending_latency;
    ccfc:	607b      	str	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
    ccfe:	f002 ff3b 	bl	fb78 <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
    cd02:	4620      	mov	r0, r4
    cd04:	f00b fcef 	bl	186e6 <bt_conn_unref>
    cd08:	e7e0      	b.n	cccc <le_conn_update_complete+0x34>
		if (!evt->status) {
    cd0a:	782b      	ldrb	r3, [r5, #0]
    cd0c:	b98b      	cbnz	r3, cd32 <le_conn_update_complete+0x9a>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
    cd0e:	f8b5 3003 	ldrh.w	r3, [r5, #3]
    cd12:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
			conn->le.latency = sys_le16_to_cpu(evt->latency);
    cd16:	f8b5 3005 	ldrh.w	r3, [r5, #5]
    cd1a:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    cd1e:	f8b5 3007 	ldrh.w	r3, [r5, #7]
    cd22:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    cd26:	f46f 7180 	mvn.w	r1, #256	; 0x100
    cd2a:	4630      	mov	r0, r6
    cd2c:	f00b fadc 	bl	182e8 <atomic_and.isra.0>
}
    cd30:	e014      	b.n	cd5c <le_conn_update_complete+0xc4>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cd32:	e8d6 3faf 	lda	r3, [r6]
		} else if (atomic_test_bit(conn->flags,
    cd36:	05db      	lsls	r3, r3, #23
    cd38:	d5f5      	bpl.n	cd26 <le_conn_update_complete+0x8e>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
    cd3a:	782b      	ldrb	r3, [r5, #0]
    cd3c:	2b20      	cmp	r3, #32
    cd3e:	d1f2      	bne.n	cd26 <le_conn_update_complete+0x8e>
			   conn->le.conn_param_retry_countdown) {
    cd40:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
    cd44:	2b00      	cmp	r3, #0
    cd46:	d0ee      	beq.n	cd26 <le_conn_update_complete+0x8e>
			conn->le.conn_param_retry_countdown--;
    cd48:	3b01      	subs	r3, #1
    cd4a:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
    cd4e:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    cd52:	2300      	movs	r3, #0
    cd54:	f104 0058 	add.w	r0, r4, #88	; 0x58
    cd58:	f008 fe76 	bl	15a48 <k_work_schedule>
		notify_le_param_updated(conn);
    cd5c:	4620      	mov	r0, r4
    cd5e:	f002 fb4f 	bl	f400 <notify_le_param_updated>
    cd62:	e7ce      	b.n	cd02 <le_conn_update_complete+0x6a>
    cd64:	0001cdb1 	.word	0x0001cdb1
    cd68:	0001b898 	.word	0x0001b898

0000cd6c <bt_hci_cmd_state_set_init>:
{
    cd6c:	b510      	push	{r4, lr}
	state->bit = bit;
    cd6e:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    cd72:	f89d 3008 	ldrb.w	r3, [sp, #8]
{
    cd76:	460c      	mov	r4, r1
	state->val = val;
    cd78:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
    cd7a:	f004 fe41 	bl	11a00 <net_buf_id>
    cd7e:	220c      	movs	r2, #12
    cd80:	4b02      	ldr	r3, [pc, #8]	; (cd8c <bt_hci_cmd_state_set_init+0x20>)
    cd82:	fb02 3300 	mla	r3, r2, r0, r3
    cd86:	605c      	str	r4, [r3, #4]
}
    cd88:	bd10      	pop	{r4, pc}
    cd8a:	bf00      	nop
    cd8c:	20009820 	.word	0x20009820

0000cd90 <bt_hci_cmd_create>:
{
    cd90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    cd94:	f04f 32ff 	mov.w	r2, #4294967295
    cd98:	f04f 33ff 	mov.w	r3, #4294967295
    cd9c:	4606      	mov	r6, r0
    cd9e:	4817      	ldr	r0, [pc, #92]	; (cdfc <bt_hci_cmd_create+0x6c>)
    cda0:	460f      	mov	r7, r1
    cda2:	f00c fcd6 	bl	19752 <net_buf_alloc_fixed>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    cda6:	f04f 0800 	mov.w	r8, #0
    cdaa:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    cdac:	f100 0a0c 	add.w	sl, r0, #12
    cdb0:	2101      	movs	r1, #1
    cdb2:	4650      	mov	r0, sl
    cdb4:	f00c fd29 	bl	1980a <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
    cdb8:	4620      	mov	r0, r4
    cdba:	f884 8018 	strb.w	r8, [r4, #24]
    cdbe:	f004 fe1f 	bl	11a00 <net_buf_id>
    cdc2:	f04f 090c 	mov.w	r9, #12
    cdc6:	4d0e      	ldr	r5, [pc, #56]	; (ce00 <bt_hci_cmd_create+0x70>)
    cdc8:	fb09 5000 	mla	r0, r9, r0, r5
    cdcc:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    cdce:	4620      	mov	r0, r4
    cdd0:	f004 fe16 	bl	11a00 <net_buf_id>
    cdd4:	fb09 5000 	mla	r0, r9, r0, r5
    cdd8:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    cddc:	4620      	mov	r0, r4
    cdde:	f004 fe0f 	bl	11a00 <net_buf_id>
    cde2:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    cde6:	2103      	movs	r1, #3
    cde8:	4650      	mov	r0, sl
    cdea:	f8c5 8004 	str.w	r8, [r5, #4]
    cdee:	f00c fd10 	bl	19812 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    cdf2:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
    cdf4:	7087      	strb	r7, [r0, #2]
}
    cdf6:	4620      	mov	r0, r4
    cdf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cdfc:	20008794 	.word	0x20008794
    ce00:	20009820 	.word	0x20009820

0000ce04 <bt_hci_cmd_send_sync>:
{
    ce04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ce08:	b087      	sub	sp, #28
    ce0a:	4606      	mov	r6, r0
    ce0c:	4615      	mov	r5, r2
	if (!buf) {
    ce0e:	460c      	mov	r4, r1
{
    ce10:	af00      	add	r7, sp, #0
	if (!buf) {
    ce12:	b921      	cbnz	r1, ce1e <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
    ce14:	f7ff ffbc 	bl	cd90 <bt_hci_cmd_create>
		if (!buf) {
    ce18:	4604      	mov	r4, r0
    ce1a:	2800      	cmp	r0, #0
    ce1c:	d05f      	beq.n	cede <bt_hci_cmd_send_sync+0xda>
	return z_impl_k_sem_init(sem, initial_count, limit);
    ce1e:	2201      	movs	r2, #1
    ce20:	2100      	movs	r1, #0
    ce22:	4638      	mov	r0, r7
    ce24:	f00d feb8 	bl	1ab98 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    ce28:	4620      	mov	r0, r4
    ce2a:	f004 fde9 	bl	11a00 <net_buf_id>
    ce2e:	230c      	movs	r3, #12
    ce30:	f8df 90b0 	ldr.w	r9, [pc, #176]	; cee4 <bt_hci_cmd_send_sync+0xe0>
    ce34:	fb03 9000 	mla	r0, r3, r0, r9
    ce38:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    ce3a:	4620      	mov	r0, r4
    ce3c:	f00c fcbf 	bl	197be <net_buf_ref>
    ce40:	4601      	mov	r1, r0
    ce42:	4829      	ldr	r0, [pc, #164]	; (cee8 <bt_hci_cmd_send_sync+0xe4>)
    ce44:	f00c fcb9 	bl	197ba <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    ce48:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    ce4c:	2300      	movs	r3, #0
    ce4e:	4638      	mov	r0, r7
    ce50:	f008 fbfe 	bl	15650 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "command opcode 0x%04x timeout with err %d", opcode, err);
    ce54:	4680      	mov	r8, r0
    ce56:	b188      	cbz	r0, ce7c <bt_hci_cmd_send_sync+0x78>
    ce58:	f44f 73a5 	mov.w	r3, #330	; 0x14a
    ce5c:	4a23      	ldr	r2, [pc, #140]	; (ceec <bt_hci_cmd_send_sync+0xe8>)
    ce5e:	4924      	ldr	r1, [pc, #144]	; (cef0 <bt_hci_cmd_send_sync+0xec>)
    ce60:	4824      	ldr	r0, [pc, #144]	; (cef4 <bt_hci_cmd_send_sync+0xf0>)
    ce62:	f009 ffcb 	bl	16dfc <assert_print>
    ce66:	4642      	mov	r2, r8
    ce68:	4631      	mov	r1, r6
    ce6a:	4823      	ldr	r0, [pc, #140]	; (cef8 <bt_hci_cmd_send_sync+0xf4>)
    ce6c:	f009 ffc6 	bl	16dfc <assert_print>
    ce70:	4040      	eors	r0, r0
    ce72:	f380 8811 	msr	BASEPRI, r0
    ce76:	f04f 0003 	mov.w	r0, #3
    ce7a:	df02      	svc	2
	status = cmd(buf)->status;
    ce7c:	4620      	mov	r0, r4
    ce7e:	f004 fdbf 	bl	11a00 <net_buf_id>
    ce82:	230c      	movs	r3, #12
    ce84:	4358      	muls	r0, r3
    ce86:	f819 8000 	ldrb.w	r8, [r9, r0]
	if (status) {
    ce8a:	f1b8 0f00 	cmp.w	r8, #0
    ce8e:	d01e      	beq.n	cece <bt_hci_cmd_send_sync+0xca>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
    ce90:	466d      	mov	r5, sp
    ce92:	b088      	sub	sp, #32
    ce94:	466a      	mov	r2, sp
    ce96:	4b19      	ldr	r3, [pc, #100]	; (cefc <bt_hci_cmd_send_sync+0xf8>)
    ce98:	f8c2 801c 	str.w	r8, [r2, #28]
    ce9c:	e9c2 3605 	strd	r3, r6, [r2, #20]
    cea0:	2304      	movs	r3, #4
    cea2:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    cea6:	4816      	ldr	r0, [pc, #88]	; (cf00 <bt_hci_cmd_send_sync+0xfc>)
    cea8:	f842 3f10 	str.w	r3, [r2, #16]!
    ceac:	f00b fa19 	bl	182e2 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
    ceb0:	4620      	mov	r0, r4
    ceb2:	46ad      	mov	sp, r5
    ceb4:	f004 fe5e 	bl	11b74 <net_buf_unref>
			return -ECONNREFUSED;
    ceb8:	f1b8 0f09 	cmp.w	r8, #9
    cebc:	bf14      	ite	ne
    cebe:	f06f 0004 	mvnne.w	r0, #4
    cec2:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
    cec6:	371c      	adds	r7, #28
    cec8:	46bd      	mov	sp, r7
    ceca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
    cece:	b115      	cbz	r5, ced6 <bt_hci_cmd_send_sync+0xd2>
		*rsp = buf;
    ced0:	602c      	str	r4, [r5, #0]
	return 0;
    ced2:	2000      	movs	r0, #0
    ced4:	e7f7      	b.n	cec6 <bt_hci_cmd_send_sync+0xc2>
		net_buf_unref(buf);
    ced6:	4620      	mov	r0, r4
    ced8:	f004 fe4c 	bl	11b74 <net_buf_unref>
    cedc:	e7f9      	b.n	ced2 <bt_hci_cmd_send_sync+0xce>
			return -ENOBUFS;
    cede:	f06f 0068 	mvn.w	r0, #104	; 0x68
    cee2:	e7f0      	b.n	cec6 <bt_hci_cmd_send_sync+0xc2>
    cee4:	20009820 	.word	0x20009820
    cee8:	20008144 	.word	0x20008144
    ceec:	0001ce1d 	.word	0x0001ce1d
    cef0:	0001cfd4 	.word	0x0001cfd4
    cef4:	0001ce6a 	.word	0x0001ce6a
    cef8:	0001cfdd 	.word	0x0001cfdd
    cefc:	0001d009 	.word	0x0001d009
    cf00:	0001b898 	.word	0x0001b898

0000cf04 <hci_le_read_max_data_len>:
{
    cf04:	b570      	push	{r4, r5, r6, lr}
    cf06:	b088      	sub	sp, #32
    cf08:	4606      	mov	r6, r0
    cf0a:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    cf0c:	f242 002f 	movw	r0, #8239	; 0x202f
    cf10:	2100      	movs	r1, #0
    cf12:	aa01      	add	r2, sp, #4
    cf14:	f7ff ff76 	bl	ce04 <bt_hci_cmd_send_sync>
	if (err) {
    cf18:	4604      	mov	r4, r0
    cf1a:	b160      	cbz	r0, cf36 <hci_le_read_max_data_len+0x32>
		LOG_ERR("Failed to read DLE max data len");
    cf1c:	4b0b      	ldr	r3, [pc, #44]	; (cf4c <hci_le_read_max_data_len+0x48>)
    cf1e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cf22:	9307      	str	r3, [sp, #28]
    cf24:	2302      	movs	r3, #2
    cf26:	480a      	ldr	r0, [pc, #40]	; (cf50 <hci_le_read_max_data_len+0x4c>)
    cf28:	aa06      	add	r2, sp, #24
    cf2a:	9306      	str	r3, [sp, #24]
    cf2c:	f00b f9d9 	bl	182e2 <z_log_msg_static_create.constprop.0>
}
    cf30:	4620      	mov	r0, r4
    cf32:	b008      	add	sp, #32
    cf34:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    cf36:	9801      	ldr	r0, [sp, #4]
    cf38:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    cf3a:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    cf3e:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    cf40:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    cf44:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    cf46:	f004 fe15 	bl	11b74 <net_buf_unref>
	return 0;
    cf4a:	e7f1      	b.n	cf30 <hci_le_read_max_data_len+0x2c>
    cf4c:	0001d025 	.word	0x0001d025
    cf50:	0001b898 	.word	0x0001b898

0000cf54 <bt_hci_le_rand>:
{
    cf54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    cf56:	4b14      	ldr	r3, [pc, #80]	; (cfa8 <bt_hci_le_rand+0x54>)
{
    cf58:	4605      	mov	r5, r0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    cf5a:	f993 309b 	ldrsb.w	r3, [r3, #155]	; 0x9b
{
    cf5e:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    cf60:	2b00      	cmp	r3, #0
    cf62:	da1d      	bge.n	cfa0 <bt_hci_le_rand+0x4c>
	while (len > 0) {
    cf64:	b914      	cbnz	r4, cf6c <bt_hci_le_rand+0x18>
	return 0;
    cf66:	4620      	mov	r0, r4
}
    cf68:	b003      	add	sp, #12
    cf6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
    cf6c:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    cf6e:	f04f 0100 	mov.w	r1, #0
    cf72:	f242 0018 	movw	r0, #8216	; 0x2018
    cf76:	aa01      	add	r2, sp, #4
		count = MIN(len, sizeof(rp->rand));
    cf78:	4626      	mov	r6, r4
    cf7a:	bf28      	it	cs
    cf7c:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    cf7e:	f7ff ff41 	bl	ce04 <bt_hci_cmd_send_sync>
		if (err) {
    cf82:	2800      	cmp	r0, #0
    cf84:	d1f0      	bne.n	cf68 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
    cf86:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
    cf88:	4632      	mov	r2, r6
    cf8a:	68f9      	ldr	r1, [r7, #12]
    cf8c:	4628      	mov	r0, r5
    cf8e:	3101      	adds	r1, #1
    cf90:	f00b f90d 	bl	181ae <memcpy>
		net_buf_unref(rsp);
    cf94:	4638      	mov	r0, r7
    cf96:	f004 fded 	bl	11b74 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
    cf9a:	4435      	add	r5, r6
		len -= count;
    cf9c:	1ba4      	subs	r4, r4, r6
    cf9e:	e7e1      	b.n	cf64 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
    cfa0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    cfa4:	e7e0      	b.n	cf68 <bt_hci_le_rand+0x14>
    cfa6:	bf00      	nop
    cfa8:	20008000 	.word	0x20008000

0000cfac <bt_hci_le_enh_conn_complete>:
{
    cfac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cfb0:	b08c      	sub	sp, #48	; 0x30
    cfb2:	2600      	movs	r6, #0
		if (disconnected_handles[i] == handle) {
    cfb4:	4bac      	ldr	r3, [pc, #688]	; (d268 <bt_hci_le_enh_conn_complete+0x2bc>)
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    cfb6:	f8b0 8001 	ldrh.w	r8, [r0, #1]
		if (disconnected_handles[i] == handle) {
    cfba:	8819      	ldrh	r1, [r3, #0]
    cfbc:	f448 4270 	orr.w	r2, r8, #61440	; 0xf000
    cfc0:	4291      	cmp	r1, r2
			disconnected_handles[i] = 0;
    cfc2:	bf08      	it	eq
    cfc4:	801e      	strheq	r6, [r3, #0]
	if (evt->status) {
    cfc6:	7804      	ldrb	r4, [r0, #0]
{
    cfc8:	4605      	mov	r5, r0
			return true;
    cfca:	bf08      	it	eq
    cfcc:	2601      	moveq	r6, #1
{
    cfce:	af02      	add	r7, sp, #8
	if (evt->status) {
    cfd0:	b3a4      	cbz	r4, d03c <bt_hci_le_enh_conn_complete+0x90>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    cfd2:	2c3c      	cmp	r4, #60	; 0x3c
    cfd4:	d122      	bne.n	d01c <bt_hci_le_enh_conn_complete+0x70>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    cfd6:	f001 fb45 	bl	e664 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    cfda:	f06f 0180 	mvn.w	r1, #128	; 0x80
    cfde:	3010      	adds	r0, #16
    cfe0:	f00b f982 	bl	182e8 <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    cfe4:	2000      	movs	r0, #0
    cfe6:	f7ff fa9d 	bl	c524 <find_pending_connect.part.0>
		if (!conn) {
    cfea:	4605      	mov	r5, r0
    cfec:	b970      	cbnz	r0, d00c <bt_hci_le_enh_conn_complete+0x60>
			LOG_ERR("No pending peripheral connection");
    cfee:	4b9f      	ldr	r3, [pc, #636]	; (d26c <bt_hci_le_enh_conn_complete+0x2c0>)
    cff0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cff4:	627b      	str	r3, [r7, #36]	; 0x24
    cff6:	2302      	movs	r3, #2
    cff8:	489d      	ldr	r0, [pc, #628]	; (d270 <bt_hci_le_enh_conn_complete+0x2c4>)
    cffa:	623b      	str	r3, [r7, #32]
    cffc:	f107 0220 	add.w	r2, r7, #32
    d000:	f00b f96f 	bl	182e2 <z_log_msg_static_create.constprop.0>
}
    d004:	3728      	adds	r7, #40	; 0x28
    d006:	46bd      	mov	sp, r7
    d008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    d00c:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    d00e:	2100      	movs	r1, #0
    d010:	f002 f8d6 	bl	f1c0 <bt_conn_set_state>
		bt_conn_unref(conn);
    d014:	4628      	mov	r0, r5
	bt_conn_unref(conn);
    d016:	f00b fb66 	bl	186e6 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    d01a:	e7f3      	b.n	d004 <bt_hci_le_enh_conn_complete+0x58>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
    d01c:	466d      	mov	r5, sp
    d01e:	b088      	sub	sp, #32
    d020:	aa02      	add	r2, sp, #8
    d022:	4b94      	ldr	r3, [pc, #592]	; (d274 <bt_hci_le_enh_conn_complete+0x2c8>)
    d024:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    d028:	e9c2 3405 	strd	r3, r4, [r2, #20]
    d02c:	2303      	movs	r3, #3
    d02e:	4890      	ldr	r0, [pc, #576]	; (d270 <bt_hci_le_enh_conn_complete+0x2c4>)
    d030:	f842 3f10 	str.w	r3, [r2, #16]!
    d034:	f00b f955 	bl	182e2 <z_log_msg_static_create.constprop.0>
    d038:	46ad      	mov	sp, r5
		return;
    d03a:	e7e3      	b.n	d004 <bt_hci_le_enh_conn_complete+0x58>
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
    d03c:	78c3      	ldrb	r3, [r0, #3]
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
    d03e:	f100 0904 	add.w	r9, r0, #4
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
    d042:	2b01      	cmp	r3, #1
    d044:	bf08      	it	eq
    d046:	4b8c      	ldreq	r3, [pc, #560]	; (d278 <bt_hci_le_enh_conn_complete+0x2cc>)
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
    d048:	4648      	mov	r0, r9
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
    d04a:	bf08      	it	eq
    d04c:	f893 406f 	ldrbeq.w	r4, [r3, #111]	; 0x6f
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
    d050:	f00b f925 	bl	1829e <bt_addr_le_is_resolved>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
    d054:	4649      	mov	r1, r9
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
    d056:	b348      	cbz	r0, d0ac <bt_hci_le_enh_conn_complete+0x100>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
    d058:	f107 0010 	add.w	r0, r7, #16
    d05c:	f00b f915 	bl	1828a <bt_addr_le_copy_resolved>
	memcpy(dst, src, sizeof(*dst));
    d060:	2206      	movs	r2, #6
    d062:	f105 0111 	add.w	r1, r5, #17
    d066:	f107 0009 	add.w	r0, r7, #9
    d06a:	f00b f8a0 	bl	181ae <memcpy>
		peer_addr->type = BT_ADDR_LE_RANDOM;
    d06e:	2301      	movs	r3, #1
    d070:	723b      	strb	r3, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    d072:	78eb      	ldrb	r3, [r5, #3]
    d074:	2b01      	cmp	r3, #1
    d076:	d029      	beq.n	d0cc <bt_hci_le_enh_conn_complete+0x120>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
    d078:	4648      	mov	r0, r9
    d07a:	f7ff f923 	bl	c2c4 <bt_addr_le_str>
    d07e:	466c      	mov	r4, sp
    d080:	b088      	sub	sp, #32
    d082:	aa02      	add	r2, sp, #8
    d084:	4b7d      	ldr	r3, [pc, #500]	; (d27c <bt_hci_le_enh_conn_complete+0x2d0>)
    d086:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    d08a:	e9c2 3005 	strd	r3, r0, [r2, #20]
    d08e:	f44f 7300 	mov.w	r3, #512	; 0x200
    d092:	8393      	strh	r3, [r2, #28]
    d094:	4b7a      	ldr	r3, [pc, #488]	; (d280 <bt_hci_le_enh_conn_complete+0x2d4>)
    d096:	4876      	ldr	r0, [pc, #472]	; (d270 <bt_hci_le_enh_conn_complete+0x2c4>)
    d098:	f842 3f10 	str.w	r3, [r2, #16]!
    d09c:	f00b f921 	bl	182e2 <z_log_msg_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    d0a0:	211f      	movs	r1, #31
    d0a2:	46a5      	mov	sp, r4
    d0a4:	4640      	mov	r0, r8
    d0a6:	f00b f927 	bl	182f8 <bt_hci_disconnect>
		return;
    d0aa:	e7ab      	b.n	d004 <bt_hci_le_enh_conn_complete+0x58>
		bt_addr_le_copy(id_addr, bt_lookup_id_addr(id, &evt->peer_addr));
    d0ac:	4620      	mov	r0, r4
    d0ae:	f00b f9d2 	bl	18456 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
    d0b2:	2207      	movs	r2, #7
    d0b4:	4601      	mov	r1, r0
    d0b6:	f107 0010 	add.w	r0, r7, #16
    d0ba:	f00b f878 	bl	181ae <memcpy>
    d0be:	2207      	movs	r2, #7
    d0c0:	4649      	mov	r1, r9
    d0c2:	f107 0008 	add.w	r0, r7, #8
    d0c6:	f00b f872 	bl	181ae <memcpy>
}
    d0ca:	e7d2      	b.n	d072 <bt_hci_le_enh_conn_complete+0xc6>
    d0cc:	f107 0010 	add.w	r0, r7, #16
    d0d0:	f7ff fa28 	bl	c524 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    d0d4:	78eb      	ldrb	r3, [r5, #3]
    d0d6:	4604      	mov	r4, r0
    d0d8:	2b01      	cmp	r3, #1
    d0da:	d10a      	bne.n	d0f2 <bt_hci_le_enh_conn_complete+0x146>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    d0dc:	f001 fac2 	bl	e664 <bt_le_adv_lookup_legacy>
    d0e0:	4682      	mov	sl, r0
    d0e2:	f06f 0180 	mvn.w	r1, #128	; 0x80
    d0e6:	3010      	adds	r0, #16
    d0e8:	f00b f8fe 	bl	182e8 <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
    d0ec:	4650      	mov	r0, sl
    d0ee:	f00b fab1 	bl	18654 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
    d0f2:	2c00      	cmp	r4, #0
    d0f4:	d0c0      	beq.n	d078 <bt_hci_le_enh_conn_complete+0xcc>
	conn->handle = sys_le16_to_cpu(evt->handle);
    d0f6:	4620      	mov	r0, r4
    d0f8:	f8b5 3001 	ldrh.w	r3, [r5, #1]
	memcpy(dst, src, sizeof(*dst));
    d0fc:	2207      	movs	r2, #7
    d0fe:	f820 3b88 	strh.w	r3, [r0], #136
    d102:	f107 0110 	add.w	r1, r7, #16
    d106:	f00b f852 	bl	181ae <memcpy>
	conn->err = 0U;
    d10a:	2200      	movs	r2, #0
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    d10c:	f8b5 3017 	ldrh.w	r3, [r5, #23]
    d110:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    d114:	f8b5 3019 	ldrh.w	r3, [r5, #25]
    d118:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    d11c:	f8b5 301b 	ldrh.w	r3, [r5, #27]
    d120:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
    d124:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
    d126:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    d128:	2b01      	cmp	r3, #1
	conn->role = evt->role;
    d12a:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    d12c:	d118      	bne.n	d160 <bt_hci_le_enh_conn_complete+0x1b4>
    d12e:	2207      	movs	r2, #7
    d130:	f107 0108 	add.w	r1, r7, #8
    d134:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    d138:	f00b f839 	bl	181ae <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    d13c:	f001 fa92 	bl	e664 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
    d140:	7a21      	ldrb	r1, [r4, #8]
    d142:	4d4d      	ldr	r5, [pc, #308]	; (d278 <bt_hci_le_enh_conn_complete+0x2cc>)
    d144:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    d148:	4429      	add	r1, r5
    d14a:	2207      	movs	r2, #7
    d14c:	f104 0096 	add.w	r0, r4, #150	; 0x96
    d150:	f00b f82d 	bl	181ae <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
    d154:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
    d158:	065d      	lsls	r5, r3, #25
    d15a:	d501      	bpl.n	d160 <bt_hci_le_enh_conn_complete+0x1b4>
			bt_le_adv_resume();
    d15c:	f001 fc4a 	bl	e9f4 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    d160:	2107      	movs	r1, #7
    d162:	4620      	mov	r0, r4
    d164:	f002 f82c 	bl	f1c0 <bt_conn_set_state>
	if (is_disconnected) {
    d168:	b11e      	cbz	r6, d172 <bt_hci_le_enh_conn_complete+0x1c6>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    d16a:	2101      	movs	r1, #1
    d16c:	4620      	mov	r0, r4
    d16e:	f002 f827 	bl	f1c0 <bt_conn_set_state>
	bt_conn_connected(conn);
    d172:	4620      	mov	r0, r4
    d174:	f00b faed 	bl	18752 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
    d178:	7aa3      	ldrb	r3, [r4, #10]
    d17a:	2b07      	cmp	r3, #7
    d17c:	d16e      	bne.n	d25c <bt_hci_le_enh_conn_complete+0x2b0>
    d17e:	1d23      	adds	r3, r4, #4
    d180:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    d184:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    d188:	4d3b      	ldr	r5, [pc, #236]	; (d278 <bt_hci_le_enh_conn_complete+0x2cc>)
    d18a:	d129      	bne.n	d1e0 <bt_hci_le_enh_conn_complete+0x234>
    d18c:	78e3      	ldrb	r3, [r4, #3]
    d18e:	b11b      	cbz	r3, d198 <bt_hci_le_enh_conn_complete+0x1ec>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
    d190:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
    d194:	0718      	lsls	r0, r3, #28
    d196:	d523      	bpl.n	d1e0 <bt_hci_le_enh_conn_complete+0x234>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    d198:	2102      	movs	r1, #2
    d19a:	f242 0016 	movw	r0, #8214	; 0x2016
    d19e:	f7ff fdf7 	bl	cd90 <bt_hci_cmd_create>
	if (!buf) {
    d1a2:	4606      	mov	r6, r0
    d1a4:	2800      	cmp	r0, #0
    d1a6:	d05b      	beq.n	d260 <bt_hci_le_enh_conn_complete+0x2b4>
    d1a8:	2102      	movs	r1, #2
    d1aa:	300c      	adds	r0, #12
    d1ac:	f00c fb31 	bl	19812 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    d1b0:	8823      	ldrh	r3, [r4, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
    d1b2:	2200      	movs	r2, #0
	cp->handle = sys_cpu_to_le16(conn->handle);
    d1b4:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
    d1b6:	4631      	mov	r1, r6
    d1b8:	f242 0016 	movw	r0, #8214	; 0x2016
    d1bc:	f7ff fe22 	bl	ce04 <bt_hci_cmd_send_sync>
		if (err) {
    d1c0:	b170      	cbz	r0, d1e0 <bt_hci_le_enh_conn_complete+0x234>
			LOG_ERR("Failed read remote features (%d)", err);
    d1c2:	466e      	mov	r6, sp
    d1c4:	b088      	sub	sp, #32
    d1c6:	aa02      	add	r2, sp, #8
    d1c8:	4b2e      	ldr	r3, [pc, #184]	; (d284 <bt_hci_le_enh_conn_complete+0x2d8>)
    d1ca:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d1ce:	e9c2 3005 	strd	r3, r0, [r2, #20]
    d1d2:	2303      	movs	r3, #3
    d1d4:	4826      	ldr	r0, [pc, #152]	; (d270 <bt_hci_le_enh_conn_complete+0x2c4>)
    d1d6:	f842 3f10 	str.w	r3, [r2, #16]!
    d1da:	f00b f882 	bl	182e2 <z_log_msg_static_create.constprop.0>
    d1de:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    d1e0:	f895 30d9 	ldrb.w	r3, [r5, #217]	; 0xd9
    d1e4:	07d9      	lsls	r1, r3, #31
    d1e6:	d516      	bpl.n	d216 <bt_hci_le_enh_conn_complete+0x26a>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    d1e8:	2100      	movs	r1, #0
    d1ea:	2302      	movs	r3, #2
    d1ec:	4620      	mov	r0, r4
    d1ee:	461a      	mov	r2, r3
    d1f0:	9100      	str	r1, [sp, #0]
    d1f2:	f00b f8ba 	bl	1836a <bt_le_set_phy>
		if (err) {
    d1f6:	b170      	cbz	r0, d216 <bt_hci_le_enh_conn_complete+0x26a>
			LOG_ERR("Failed LE Set PHY (%d)", err);
    d1f8:	466e      	mov	r6, sp
    d1fa:	b088      	sub	sp, #32
    d1fc:	aa02      	add	r2, sp, #8
    d1fe:	4b22      	ldr	r3, [pc, #136]	; (d288 <bt_hci_le_enh_conn_complete+0x2dc>)
    d200:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d204:	e9c2 3005 	strd	r3, r0, [r2, #20]
    d208:	2303      	movs	r3, #3
    d20a:	4819      	ldr	r0, [pc, #100]	; (d270 <bt_hci_le_enh_conn_complete+0x2c4>)
    d20c:	f842 3f10 	str.w	r3, [r2, #16]!
    d210:	f00b f867 	bl	182e2 <z_log_msg_static_create.constprop.0>
    d214:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    d216:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
    d21a:	069a      	lsls	r2, r3, #26
    d21c:	d51e      	bpl.n	d25c <bt_hci_le_enh_conn_complete+0x2b0>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    d21e:	f8d5 315c 	ldr.w	r3, [r5, #348]	; 0x15c
    d222:	689b      	ldr	r3, [r3, #8]
    d224:	079b      	lsls	r3, r3, #30
    d226:	d519      	bpl.n	d25c <bt_hci_le_enh_conn_complete+0x2b0>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    d228:	1db9      	adds	r1, r7, #6
    d22a:	1d38      	adds	r0, r7, #4
    d22c:	f7ff fe6a 	bl	cf04 <hci_le_read_max_data_len>
			if (!err) {
    d230:	b9a0      	cbnz	r0, d25c <bt_hci_le_enh_conn_complete+0x2b0>
				err = bt_le_set_data_len(conn,
    d232:	4620      	mov	r0, r4
    d234:	88fa      	ldrh	r2, [r7, #6]
    d236:	88b9      	ldrh	r1, [r7, #4]
    d238:	f00b f879 	bl	1832e <bt_le_set_data_len>
				if (err) {
    d23c:	b170      	cbz	r0, d25c <bt_hci_le_enh_conn_complete+0x2b0>
					LOG_ERR("Failed to set data len (%d)", err);
    d23e:	466d      	mov	r5, sp
    d240:	b088      	sub	sp, #32
    d242:	aa02      	add	r2, sp, #8
    d244:	4b11      	ldr	r3, [pc, #68]	; (d28c <bt_hci_le_enh_conn_complete+0x2e0>)
    d246:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d24a:	e9c2 3005 	strd	r3, r0, [r2, #20]
    d24e:	2303      	movs	r3, #3
    d250:	4807      	ldr	r0, [pc, #28]	; (d270 <bt_hci_le_enh_conn_complete+0x2c4>)
    d252:	f842 3f10 	str.w	r3, [r2, #16]!
    d256:	f00b f844 	bl	182e2 <z_log_msg_static_create.constprop.0>
    d25a:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
    d25c:	4620      	mov	r0, r4
    d25e:	e6da      	b.n	d016 <bt_hci_le_enh_conn_complete+0x6a>
		return -ENOBUFS;
    d260:	f06f 0068 	mvn.w	r0, #104	; 0x68
    d264:	e7ad      	b.n	d1c2 <bt_hci_le_enh_conn_complete+0x216>
    d266:	bf00      	nop
    d268:	20009bcc 	.word	0x20009bcc
    d26c:	0001d045 	.word	0x0001d045
    d270:	0001b898 	.word	0x0001b898
    d274:	0001d066 	.word	0x0001d066
    d278:	20008000 	.word	0x20008000
    d27c:	0001d07f 	.word	0x0001d07f
    d280:	01000003 	.word	0x01000003
    d284:	0001d09b 	.word	0x0001d09b
    d288:	0001d0bc 	.word	0x0001d0bc
    d28c:	0001d0d3 	.word	0x0001d0d3

0000d290 <le_legacy_conn_complete>:
{
    d290:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    d292:	68c1      	ldr	r1, [r0, #12]
{
    d294:	b088      	sub	sp, #32
	enh.status         = evt->status;
    d296:	780b      	ldrb	r3, [r1, #0]
	memcpy(dst, src, sizeof(*dst));
    d298:	4c17      	ldr	r4, [pc, #92]	; (d2f8 <le_legacy_conn_complete+0x68>)
    d29a:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
    d29e:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	memcpy(dst, src, sizeof(*dst));
    d2a2:	2207      	movs	r2, #7
    d2a4:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
    d2a8:	78cb      	ldrb	r3, [r1, #3]
    d2aa:	a801      	add	r0, sp, #4
    d2ac:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
    d2b0:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    d2b4:	3104      	adds	r1, #4
    d2b6:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
    d2ba:	f8b1 3009 	ldrh.w	r3, [r1, #9]
    d2be:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
    d2c2:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    d2c6:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
    d2ca:	7b4b      	ldrb	r3, [r1, #13]
    d2cc:	f88d 301d 	strb.w	r3, [sp, #29]
    d2d0:	f00a ff6d 	bl	181ae <memcpy>
	memcpy(dst, src, sizeof(*dst));
    d2d4:	4621      	mov	r1, r4
    d2d6:	2206      	movs	r2, #6
    d2d8:	f10d 000b 	add.w	r0, sp, #11
    d2dc:	f00a ff67 	bl	181ae <memcpy>
    d2e0:	2206      	movs	r2, #6
    d2e2:	4621      	mov	r1, r4
    d2e4:	f10d 0011 	add.w	r0, sp, #17
    d2e8:	f00a ff61 	bl	181ae <memcpy>
	bt_hci_le_enh_conn_complete(evt);
    d2ec:	4668      	mov	r0, sp
    d2ee:	f7ff fe5d 	bl	cfac <bt_hci_le_enh_conn_complete>
}
    d2f2:	b008      	add	sp, #32
    d2f4:	bd10      	pop	{r4, pc}
    d2f6:	bf00      	nop
    d2f8:	0001cc88 	.word	0x0001cc88

0000d2fc <bt_send>:
	return bt_dev.drv->send(buf);
    d2fc:	4b02      	ldr	r3, [pc, #8]	; (d308 <bt_send+0xc>)
    d2fe:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
    d302:	695b      	ldr	r3, [r3, #20]
    d304:	4718      	bx	r3
    d306:	bf00      	nop
    d308:	20008000 	.word	0x20008000

0000d30c <bt_hci_cmd_send>:
{
    d30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d30e:	4605      	mov	r5, r0
	if (!buf) {
    d310:	460c      	mov	r4, r1
{
    d312:	af00      	add	r7, sp, #0
	if (!buf) {
    d314:	b919      	cbnz	r1, d31e <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    d316:	f7ff fd3b 	bl	cd90 <bt_hci_cmd_create>
		if (!buf) {
    d31a:	4604      	mov	r4, r0
    d31c:	b318      	cbz	r0, d366 <bt_hci_cmd_send+0x5a>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    d31e:	f640 4335 	movw	r3, #3125	; 0xc35
    d322:	429d      	cmp	r5, r3
    d324:	d119      	bne.n	d35a <bt_hci_cmd_send+0x4e>
		err = bt_send(buf);
    d326:	4620      	mov	r0, r4
    d328:	f7ff ffe8 	bl	d2fc <bt_send>
		if (err) {
    d32c:	4605      	mov	r5, r0
    d32e:	b188      	cbz	r0, d354 <bt_hci_cmd_send+0x48>
			LOG_ERR("Unable to send to driver (err %d)", err);
    d330:	466e      	mov	r6, sp
    d332:	b088      	sub	sp, #32
    d334:	466a      	mov	r2, sp
    d336:	4b0d      	ldr	r3, [pc, #52]	; (d36c <bt_hci_cmd_send+0x60>)
    d338:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d33c:	e9c2 3005 	strd	r3, r0, [r2, #20]
    d340:	2303      	movs	r3, #3
    d342:	480b      	ldr	r0, [pc, #44]	; (d370 <bt_hci_cmd_send+0x64>)
    d344:	f842 3f10 	str.w	r3, [r2, #16]!
    d348:	f00a ffcb 	bl	182e2 <z_log_msg_static_create.constprop.0>
			net_buf_unref(buf);
    d34c:	4620      	mov	r0, r4
    d34e:	46b5      	mov	sp, r6
    d350:	f004 fc10 	bl	11b74 <net_buf_unref>
}
    d354:	4628      	mov	r0, r5
    d356:	46bd      	mov	sp, r7
    d358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    d35a:	4621      	mov	r1, r4
    d35c:	4805      	ldr	r0, [pc, #20]	; (d374 <bt_hci_cmd_send+0x68>)
    d35e:	f00c fa2c 	bl	197ba <net_buf_put>
	return 0;
    d362:	2500      	movs	r5, #0
    d364:	e7f6      	b.n	d354 <bt_hci_cmd_send+0x48>
			return -ENOBUFS;
    d366:	f06f 0568 	mvn.w	r5, #104	; 0x68
    d36a:	e7f3      	b.n	d354 <bt_hci_cmd_send+0x48>
    d36c:	0001d0ef 	.word	0x0001d0ef
    d370:	0001b898 	.word	0x0001b898
    d374:	20008144 	.word	0x20008144

0000d378 <bt_hci_host_num_completed_packets>:
{
    d378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d37c:	b086      	sub	sp, #24
    d37e:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
    d380:	8b45      	ldrh	r5, [r0, #26]
	uint8_t index = acl(buf)->index;
    d382:	7e46      	ldrb	r6, [r0, #25]
{
    d384:	af00      	add	r7, sp, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    d386:	7a80      	ldrb	r0, [r0, #10]
    d388:	f004 fb32 	bl	119f0 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
    d38c:	4621      	mov	r1, r4
    d38e:	f00d fbf5 	bl	1ab7c <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    d392:	4b2d      	ldr	r3, [pc, #180]	; (d448 <bt_hci_host_num_completed_packets+0xd0>)
    d394:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
    d398:	069b      	lsls	r3, r3, #26
    d39a:	d513      	bpl.n	d3c4 <bt_hci_host_num_completed_packets+0x4c>
	conn = bt_conn_lookup_index(index);
    d39c:	4630      	mov	r0, r6
    d39e:	f002 fa8b 	bl	f8b8 <bt_conn_lookup_index>
	if (!conn) {
    d3a2:	4604      	mov	r4, r0
    d3a4:	b990      	cbnz	r0, d3cc <bt_hci_host_num_completed_packets+0x54>
		LOG_WRN("Unable to look up conn with index 0x%02x", index);
    d3a6:	466c      	mov	r4, sp
    d3a8:	b088      	sub	sp, #32
    d3aa:	466a      	mov	r2, sp
    d3ac:	4b27      	ldr	r3, [pc, #156]	; (d44c <bt_hci_host_num_completed_packets+0xd4>)
    d3ae:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    d3b2:	e9c2 3605 	strd	r3, r6, [r2, #20]
    d3b6:	2303      	movs	r3, #3
    d3b8:	4825      	ldr	r0, [pc, #148]	; (d450 <bt_hci_host_num_completed_packets+0xd8>)
    d3ba:	f842 3f10 	str.w	r3, [r2, #16]!
    d3be:	f00a ff90 	bl	182e2 <z_log_msg_static_create.constprop.0>
    d3c2:	46a5      	mov	sp, r4
}
    d3c4:	3718      	adds	r7, #24
    d3c6:	46bd      	mov	sp, r7
    d3c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->state != BT_CONN_CONNECTED &&
    d3cc:	7a83      	ldrb	r3, [r0, #10]
    d3ce:	3b07      	subs	r3, #7
    d3d0:	2b01      	cmp	r3, #1
    d3d2:	d90e      	bls.n	d3f2 <bt_hci_host_num_completed_packets+0x7a>
		LOG_WRN("Not reporting packet for non-connected conn");
    d3d4:	4b1f      	ldr	r3, [pc, #124]	; (d454 <bt_hci_host_num_completed_packets+0xdc>)
    d3d6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    d3da:	617b      	str	r3, [r7, #20]
    d3dc:	2302      	movs	r3, #2
    d3de:	481c      	ldr	r0, [pc, #112]	; (d450 <bt_hci_host_num_completed_packets+0xd8>)
    d3e0:	613b      	str	r3, [r7, #16]
    d3e2:	f107 0210 	add.w	r2, r7, #16
    d3e6:	f00a ff7c 	bl	182e2 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
    d3ea:	4620      	mov	r0, r4
    d3ec:	f00b f97b 	bl	186e6 <bt_conn_unref>
		return;
    d3f0:	e7e8      	b.n	d3c4 <bt_hci_host_num_completed_packets+0x4c>
	bt_conn_unref(conn);
    d3f2:	f00b f978 	bl	186e6 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
    d3f6:	2105      	movs	r1, #5
    d3f8:	f640 4035 	movw	r0, #3125	; 0xc35
    d3fc:	f7ff fcc8 	bl	cd90 <bt_hci_cmd_create>
	if (!buf) {
    d400:	4604      	mov	r4, r0
    d402:	b958      	cbnz	r0, d41c <bt_hci_host_num_completed_packets+0xa4>
		LOG_ERR("Unable to allocate new HCI command");
    d404:	4b14      	ldr	r3, [pc, #80]	; (d458 <bt_hci_host_num_completed_packets+0xe0>)
    d406:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d40a:	617b      	str	r3, [r7, #20]
    d40c:	2302      	movs	r3, #2
    d40e:	4810      	ldr	r0, [pc, #64]	; (d450 <bt_hci_host_num_completed_packets+0xd8>)
    d410:	613b      	str	r3, [r7, #16]
    d412:	f107 0210 	add.w	r2, r7, #16
    d416:	f00a ff64 	bl	182e2 <z_log_msg_static_create.constprop.0>
		return;
    d41a:	e7d3      	b.n	d3c4 <bt_hci_host_num_completed_packets+0x4c>
	return net_buf_simple_add(&buf->b, len);
    d41c:	f100 080c 	add.w	r8, r0, #12
    d420:	2101      	movs	r1, #1
    d422:	4640      	mov	r0, r8
    d424:	f00c f9f5 	bl	19812 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
    d428:	2601      	movs	r6, #1
    d42a:	2104      	movs	r1, #4
    d42c:	7006      	strb	r6, [r0, #0]
    d42e:	4640      	mov	r0, r8
    d430:	f00c f9ef 	bl	19812 <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
    d434:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
    d436:	8005      	strh	r5, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
    d438:	7086      	strb	r6, [r0, #2]
    d43a:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    d43c:	4621      	mov	r1, r4
    d43e:	f640 4035 	movw	r0, #3125	; 0xc35
    d442:	f7ff ff63 	bl	d30c <bt_hci_cmd_send>
    d446:	e7bd      	b.n	d3c4 <bt_hci_host_num_completed_packets+0x4c>
    d448:	20008000 	.word	0x20008000
    d44c:	0001d111 	.word	0x0001d111
    d450:	0001b898 	.word	0x0001b898
    d454:	0001d13a 	.word	0x0001d13a
    d458:	0001d166 	.word	0x0001d166

0000d45c <le_conn_param_req>:
{
    d45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d460:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    d462:	68c3      	ldr	r3, [r0, #12]
{
    d464:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    d466:	78d9      	ldrb	r1, [r3, #3]
    d468:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    d46a:	f8b3 8000 	ldrh.w	r8, [r3]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    d46e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    d472:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    d474:	7959      	ldrb	r1, [r3, #5]
    d476:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
    d478:	fa1f f488 	uxth.w	r4, r8
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    d47c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    d480:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    d482:	799a      	ldrb	r2, [r3, #6]
    d484:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
    d486:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
    d488:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    d48c:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    d48e:	7a1a      	ldrb	r2, [r3, #8]
    d490:	7a5b      	ldrb	r3, [r3, #9]
    d492:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    d496:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
    d498:	f001 fe8a 	bl	f1b0 <bt_conn_lookup_handle>
	if (!conn) {
    d49c:	4606      	mov	r6, r0
    d49e:	b9b0      	cbnz	r0, d4ce <le_conn_param_req+0x72>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
    d4a0:	466d      	mov	r5, sp
    d4a2:	b088      	sub	sp, #32
    d4a4:	466a      	mov	r2, sp
    d4a6:	4b20      	ldr	r3, [pc, #128]	; (d528 <le_conn_param_req+0xcc>)
    d4a8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d4ac:	e9c2 3405 	strd	r3, r4, [r2, #20]
    d4b0:	2303      	movs	r3, #3
    d4b2:	481e      	ldr	r0, [pc, #120]	; (d52c <le_conn_param_req+0xd0>)
    d4b4:	f842 3f10 	str.w	r3, [r2, #16]!
    d4b8:	f00a ff13 	bl	182e2 <z_log_msg_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    d4bc:	2102      	movs	r1, #2
    d4be:	46ad      	mov	sp, r5
    d4c0:	4620      	mov	r0, r4
    d4c2:	f00a ff9e 	bl	18402 <le_conn_param_neg_reply>
}
    d4c6:	3708      	adds	r7, #8
    d4c8:	46bd      	mov	sp, r7
    d4ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!le_param_req(conn, &param)) {
    d4ce:	4639      	mov	r1, r7
    d4d0:	f001 ffda 	bl	f488 <le_param_req>
    d4d4:	b938      	cbnz	r0, d4e6 <le_conn_param_req+0x8a>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    d4d6:	211e      	movs	r1, #30
    d4d8:	4620      	mov	r0, r4
    d4da:	f00a ff92 	bl	18402 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    d4de:	4630      	mov	r0, r6
    d4e0:	f00b f901 	bl	186e6 <bt_conn_unref>
    d4e4:	e7ef      	b.n	d4c6 <le_conn_param_req+0x6a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    d4e6:	210e      	movs	r1, #14
    d4e8:	f242 0020 	movw	r0, #8224	; 0x2020
    d4ec:	f7ff fc50 	bl	cd90 <bt_hci_cmd_create>
	if (!buf) {
    d4f0:	4605      	mov	r5, r0
    d4f2:	2800      	cmp	r0, #0
    d4f4:	d0f3      	beq.n	d4de <le_conn_param_req+0x82>
    d4f6:	210e      	movs	r1, #14
    d4f8:	300c      	adds	r0, #12
    d4fa:	f00c f98a 	bl	19812 <net_buf_simple_add>
    d4fe:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    d500:	220e      	movs	r2, #14
    d502:	2100      	movs	r1, #0
    d504:	f00a fe5e 	bl	181c4 <memset>
	cp->handle = sys_cpu_to_le16(handle);
    d508:	f8a4 8000 	strh.w	r8, [r4]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    d50c:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    d50e:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    d510:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    d512:	887b      	ldrh	r3, [r7, #2]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    d514:	f242 0020 	movw	r0, #8224	; 0x2020
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    d518:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    d51a:	88bb      	ldrh	r3, [r7, #4]
    d51c:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    d51e:	88fb      	ldrh	r3, [r7, #6]
    d520:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    d522:	f7ff fef3 	bl	d30c <bt_hci_cmd_send>
    d526:	e7da      	b.n	d4de <le_conn_param_req+0x82>
    d528:	0001cdb1 	.word	0x0001cdb1
    d52c:	0001b898 	.word	0x0001b898

0000d530 <hci_tx_thread>:
{
    d530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    d534:	f8df 8154 	ldr.w	r8, [pc, #340]	; d68c <hci_tx_thread+0x15c>
{
    d538:	b087      	sub	sp, #28
		BT_ASSERT(err == 0);
    d53a:	f8df 9154 	ldr.w	r9, [pc, #340]	; d690 <hci_tx_thread+0x160>
{
    d53e:	af00      	add	r7, sp, #0
		events[0].state = K_POLL_STATE_NOT_READY;
    d540:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    d544:	4853      	ldr	r0, [pc, #332]	; (d694 <hci_tx_thread+0x164>)
		events[0].state = K_POLL_STATE_NOT_READY;
    d546:	f36f 3394 	bfc	r3, #14, #7
    d54a:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    d54e:	f001 fde5 	bl	f11c <bt_conn_prepare_events>
    d552:	1c45      	adds	r5, r0, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    d554:	f04f 32ff 	mov.w	r2, #4294967295
    d558:	f04f 33ff 	mov.w	r3, #4294967295
    d55c:	4629      	mov	r1, r5
    d55e:	484b      	ldr	r0, [pc, #300]	; (d68c <hci_tx_thread+0x15c>)
    d560:	f008 fffc 	bl	1655c <z_impl_k_poll>
		BT_ASSERT(err == 0);
    d564:	b160      	cbz	r0, d580 <hci_tx_thread+0x50>
    d566:	f640 23c8 	movw	r3, #2760	; 0xac8
    d56a:	464a      	mov	r2, r9
    d56c:	494a      	ldr	r1, [pc, #296]	; (d698 <hci_tx_thread+0x168>)
    d56e:	484b      	ldr	r0, [pc, #300]	; (d69c <hci_tx_thread+0x16c>)
    d570:	f009 fc44 	bl	16dfc <assert_print>
    d574:	4040      	eors	r0, r0
    d576:	f380 8811 	msr	BASEPRI, r0
    d57a:	f04f 0003 	mov.w	r0, #3
    d57e:	df02      	svc	2
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
    d580:	f04f 0a03 	mov.w	sl, #3
{
    d584:	4e41      	ldr	r6, [pc, #260]	; (d68c <hci_tx_thread+0x15c>)
	for (; count; ev++, count--) {
    d586:	b915      	cbnz	r5, d58e <hci_tx_thread+0x5e>
	z_impl_k_yield();
    d588:	f008 fcd8 	bl	15f3c <z_impl_k_yield>
	while (1) {
    d58c:	e7d8      	b.n	d540 <hci_tx_thread+0x10>
		switch (ev->state) {
    d58e:	68f3      	ldr	r3, [r6, #12]
    d590:	f3c3 3386 	ubfx	r3, r3, #14, #7
    d594:	2b02      	cmp	r3, #2
    d596:	d960      	bls.n	d65a <hci_tx_thread+0x12a>
    d598:	2b04      	cmp	r3, #4
    d59a:	d168      	bne.n	d66e <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
    d59c:	7b33      	ldrb	r3, [r6, #12]
    d59e:	2b00      	cmp	r3, #0
    d5a0:	d15e      	bne.n	d660 <hci_tx_thread+0x130>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    d5a2:	2200      	movs	r2, #0
    d5a4:	2300      	movs	r3, #0
    d5a6:	483e      	ldr	r0, [pc, #248]	; (d6a0 <hci_tx_thread+0x170>)
    d5a8:	f00c f8d8 	bl	1975c <net_buf_get>
	BT_ASSERT(buf);
    d5ac:	4604      	mov	r4, r0
    d5ae:	b960      	cbnz	r0, d5ca <hci_tx_thread+0x9a>
    d5b0:	f640 235a 	movw	r3, #2650	; 0xa5a
    d5b4:	464a      	mov	r2, r9
    d5b6:	493b      	ldr	r1, [pc, #236]	; (d6a4 <hci_tx_thread+0x174>)
    d5b8:	4838      	ldr	r0, [pc, #224]	; (d69c <hci_tx_thread+0x16c>)
    d5ba:	f009 fc1f 	bl	16dfc <assert_print>
    d5be:	4040      	eors	r0, r0
    d5c0:	f380 8811 	msr	BASEPRI, r0
    d5c4:	f04f 0003 	mov.w	r0, #3
    d5c8:	df02      	svc	2
	if (bt_dev.sent_cmd) {
    d5ca:	f8df b0dc 	ldr.w	fp, [pc, #220]	; d6a8 <hci_tx_thread+0x178>
	return z_impl_k_sem_take(sem, timeout);
    d5ce:	f04f 33ff 	mov.w	r3, #4294967295
    d5d2:	f04f 32ff 	mov.w	r2, #4294967295
    d5d6:	4835      	ldr	r0, [pc, #212]	; (d6ac <hci_tx_thread+0x17c>)
    d5d8:	f008 f83a 	bl	15650 <z_impl_k_sem_take>
    d5dc:	f8db 3138 	ldr.w	r3, [fp, #312]	; 0x138
    d5e0:	b18b      	cbz	r3, d606 <hci_tx_thread+0xd6>
		LOG_ERR("Uncleared pending sent_cmd");
    d5e2:	4b33      	ldr	r3, [pc, #204]	; (d6b0 <hci_tx_thread+0x180>)
    d5e4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d5e8:	617b      	str	r3, [r7, #20]
    d5ea:	2302      	movs	r3, #2
    d5ec:	4831      	ldr	r0, [pc, #196]	; (d6b4 <hci_tx_thread+0x184>)
    d5ee:	f107 0210 	add.w	r2, r7, #16
    d5f2:	613b      	str	r3, [r7, #16]
    d5f4:	f00a fe75 	bl	182e2 <z_log_msg_static_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
    d5f8:	f8db 0138 	ldr.w	r0, [fp, #312]	; 0x138
    d5fc:	f004 faba 	bl	11b74 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    d600:	2300      	movs	r3, #0
    d602:	f8cb 3138 	str.w	r3, [fp, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
    d606:	4620      	mov	r0, r4
    d608:	f00c f8d9 	bl	197be <net_buf_ref>
    d60c:	f8cb 0138 	str.w	r0, [fp, #312]	; 0x138
	err = bt_send(buf);
    d610:	4620      	mov	r0, r4
    d612:	f7ff fe73 	bl	d2fc <bt_send>
	if (err) {
    d616:	b300      	cbz	r0, d65a <hci_tx_thread+0x12a>
		LOG_ERR("Unable to send to driver (err %d)", err);
    d618:	46eb      	mov	fp, sp
    d61a:	b088      	sub	sp, #32
    d61c:	466a      	mov	r2, sp
    d61e:	4b26      	ldr	r3, [pc, #152]	; (d6b8 <hci_tx_thread+0x188>)
    d620:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d624:	e9c2 3005 	strd	r3, r0, [r2, #20]
    d628:	2303      	movs	r3, #3
    d62a:	4822      	ldr	r0, [pc, #136]	; (d6b4 <hci_tx_thread+0x184>)
    d62c:	f842 3f10 	str.w	r3, [r2, #16]!
    d630:	f00a fe57 	bl	182e2 <z_log_msg_static_create.constprop.0>
    d634:	46dd      	mov	sp, fp
	z_impl_k_sem_give(sem);
    d636:	481d      	ldr	r0, [pc, #116]	; (d6ac <hci_tx_thread+0x17c>)
    d638:	f007 ffe4 	bl	15604 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    d63c:	4620      	mov	r0, r4
    d63e:	f004 f9df 	bl	11a00 <net_buf_id>
    d642:	220c      	movs	r2, #12
    d644:	4b1d      	ldr	r3, [pc, #116]	; (d6bc <hci_tx_thread+0x18c>)
    d646:	211f      	movs	r1, #31
    d648:	fb02 3000 	mla	r0, r2, r0, r3
    d64c:	4622      	mov	r2, r4
    d64e:	8840      	ldrh	r0, [r0, #2]
    d650:	f7ff f9b4 	bl	c9bc <hci_cmd_done>
		net_buf_unref(buf);
    d654:	4620      	mov	r0, r4
    d656:	f004 fa8d 	bl	11b74 <net_buf_unref>
	for (; count; ev++, count--) {
    d65a:	3614      	adds	r6, #20
    d65c:	3d01      	subs	r5, #1
    d65e:	e792      	b.n	d586 <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    d660:	2b01      	cmp	r3, #1
    d662:	d1fa      	bne.n	d65a <hci_tx_thread+0x12a>
					conn = CONTAINER_OF(ev->fifo,
    d664:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    d666:	3838      	subs	r0, #56	; 0x38
    d668:	f002 f89c 	bl	f7a4 <bt_conn_process_tx>
    d66c:	e7f5      	b.n	d65a <hci_tx_thread+0x12a>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
    d66e:	466c      	mov	r4, sp
    d670:	b088      	sub	sp, #32
    d672:	466a      	mov	r2, sp
    d674:	4912      	ldr	r1, [pc, #72]	; (d6c0 <hci_tx_thread+0x190>)
    d676:	480f      	ldr	r0, [pc, #60]	; (d6b4 <hci_tx_thread+0x184>)
		switch (ev->state) {
    d678:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
    d67c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    d680:	f842 af10 	str.w	sl, [r2, #16]!
    d684:	f00a fe2d 	bl	182e2 <z_log_msg_static_create.constprop.0>
    d688:	46a5      	mov	sp, r4
    d68a:	e7e6      	b.n	d65a <hci_tx_thread+0x12a>
    d68c:	200082c0 	.word	0x200082c0
    d690:	0001ce1d 	.word	0x0001ce1d
    d694:	200082d4 	.word	0x200082d4
    d698:	0001cfd4 	.word	0x0001cfd4
    d69c:	0001ce6a 	.word	0x0001ce6a
    d6a0:	20008144 	.word	0x20008144
    d6a4:	0001de60 	.word	0x0001de60
    d6a8:	20008000 	.word	0x20008000
    d6ac:	20008120 	.word	0x20008120
    d6b0:	0001d189 	.word	0x0001d189
    d6b4:	0001b898 	.word	0x0001b898
    d6b8:	0001d0ef 	.word	0x0001d0ef
    d6bc:	20009820 	.word	0x20009820
    d6c0:	0001d1a4 	.word	0x0001d1a4

0000d6c4 <hci_event_prio>:
{
    d6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d6c8:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    d6ca:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
    d6ce:	4630      	mov	r0, r6
    d6d0:	f00c f8df 	bl	19892 <net_buf_simple_headroom>
	state->len = buf->len;
    d6d4:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    d6d8:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
    d6da:	f1b8 0f01 	cmp.w	r8, #1
    d6de:	d80c      	bhi.n	d6fa <hci_event_prio+0x36>
    d6e0:	f640 636f 	movw	r3, #3695	; 0xe6f
    d6e4:	4a1b      	ldr	r2, [pc, #108]	; (d754 <hci_event_prio+0x90>)
    d6e6:	491c      	ldr	r1, [pc, #112]	; (d758 <hci_event_prio+0x94>)
    d6e8:	481c      	ldr	r0, [pc, #112]	; (d75c <hci_event_prio+0x98>)
    d6ea:	f009 fb87 	bl	16dfc <assert_print>
    d6ee:	4040      	eors	r0, r0
    d6f0:	f380 8811 	msr	BASEPRI, r0
    d6f4:	f04f 0003 	mov.w	r0, #3
    d6f8:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    d6fa:	4630      	mov	r0, r6
    d6fc:	2102      	movs	r1, #2
    d6fe:	f00c f8b8 	bl	19872 <net_buf_simple_pull_mem>
    d702:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    d704:	7800      	ldrb	r0, [r0, #0]
    d706:	f00a fdce 	bl	182a6 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    d70a:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    d70c:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    d70e:	d40c      	bmi.n	d72a <hci_event_prio+0x66>
    d710:	f640 6373 	movw	r3, #3699	; 0xe73
    d714:	4a0f      	ldr	r2, [pc, #60]	; (d754 <hci_event_prio+0x90>)
    d716:	4912      	ldr	r1, [pc, #72]	; (d760 <hci_event_prio+0x9c>)
    d718:	4810      	ldr	r0, [pc, #64]	; (d75c <hci_event_prio+0x98>)
    d71a:	f009 fb6f 	bl	16dfc <assert_print>
    d71e:	4040      	eors	r0, r0
    d720:	f380 8811 	msr	BASEPRI, r0
    d724:	f04f 0003 	mov.w	r0, #3
    d728:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    d72a:	2305      	movs	r3, #5
    d72c:	4621      	mov	r1, r4
    d72e:	4a0d      	ldr	r2, [pc, #52]	; (d764 <hci_event_prio+0xa0>)
    d730:	7838      	ldrb	r0, [r7, #0]
    d732:	f7ff f80b 	bl	c74c <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    d736:	07b3      	lsls	r3, r6, #30
    d738:	d507      	bpl.n	d74a <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    d73a:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
    d73c:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
    d740:	fa13 f585 	uxtah	r5, r3, r5
    d744:	60e5      	str	r5, [r4, #12]
}
    d746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    d74a:	4620      	mov	r0, r4
}
    d74c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    d750:	f004 ba10 	b.w	11b74 <net_buf_unref>
    d754:	0001ce1d 	.word	0x0001ce1d
    d758:	0001ce51 	.word	0x0001ce51
    d75c:	0001ce6a 	.word	0x0001ce6a
    d760:	0001d1c5 	.word	0x0001d1c5
    d764:	0001bd6c 	.word	0x0001bd6c

0000d768 <bt_recv>:
{
    d768:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    d76a:	7e03      	ldrb	r3, [r0, #24]
    d76c:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    d76e:	2b01      	cmp	r3, #1
{
    d770:	af00      	add	r7, sp, #0
	switch (bt_buf_get_type(buf)) {
    d772:	d006      	beq.n	d782 <bt_recv+0x1a>
    d774:	2b03      	cmp	r3, #3
    d776:	d112      	bne.n	d79e <bt_recv+0x36>
			rx_queue_put(buf);
    d778:	f7fe ff14 	bl	c5a4 <rx_queue_put>
		return 0;
    d77c:	2000      	movs	r0, #0
}
    d77e:	46bd      	mov	sp, r7
    d780:	bdb0      	pop	{r4, r5, r7, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    d782:	68c3      	ldr	r3, [r0, #12]
    d784:	7818      	ldrb	r0, [r3, #0]
    d786:	f00a fd8e 	bl	182a6 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    d78a:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    d78c:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    d78e:	d502      	bpl.n	d796 <bt_recv+0x2e>
			hci_event_prio(buf);
    d790:	4620      	mov	r0, r4
    d792:	f7ff ff97 	bl	d6c4 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    d796:	07ab      	lsls	r3, r5, #30
    d798:	d5f0      	bpl.n	d77c <bt_recv+0x14>
			rx_queue_put(buf);
    d79a:	4620      	mov	r0, r4
    d79c:	e7ec      	b.n	d778 <bt_recv+0x10>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    d79e:	466d      	mov	r5, sp
    d7a0:	b088      	sub	sp, #32
    d7a2:	466a      	mov	r2, sp
    d7a4:	4908      	ldr	r1, [pc, #32]	; (d7c8 <bt_recv+0x60>)
    d7a6:	4809      	ldr	r0, [pc, #36]	; (d7cc <bt_recv+0x64>)
	switch (bt_buf_get_type(buf)) {
    d7a8:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    d7ac:	2303      	movs	r3, #3
    d7ae:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d7b2:	f842 3f10 	str.w	r3, [r2, #16]!
    d7b6:	f00a fd94 	bl	182e2 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
    d7ba:	4620      	mov	r0, r4
    d7bc:	46ad      	mov	sp, r5
    d7be:	f004 f9d9 	bl	11b74 <net_buf_unref>
		return -EINVAL;
    d7c2:	f06f 0015 	mvn.w	r0, #21
    d7c6:	e7da      	b.n	d77e <bt_recv+0x16>
    d7c8:	0001d1de 	.word	0x0001d1de
    d7cc:	0001b898 	.word	0x0001b898

0000d7d0 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    d7d0:	4a08      	ldr	r2, [pc, #32]	; (d7f4 <bt_hci_driver_register+0x24>)
{
    d7d2:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    d7d4:	f8d2 015c 	ldr.w	r0, [r2, #348]	; 0x15c
    d7d8:	b930      	cbnz	r0, d7e8 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    d7da:	68d9      	ldr	r1, [r3, #12]
    d7dc:	b139      	cbz	r1, d7ee <bt_hci_driver_register+0x1e>
    d7de:	6959      	ldr	r1, [r3, #20]
    d7e0:	b129      	cbz	r1, d7ee <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    d7e2:	f8c2 315c 	str.w	r3, [r2, #348]	; 0x15c
	return 0;
    d7e6:	4770      	bx	lr
		return -EALREADY;
    d7e8:	f06f 0077 	mvn.w	r0, #119	; 0x77
    d7ec:	4770      	bx	lr
		return -EINVAL;
    d7ee:	f06f 0015 	mvn.w	r0, #21
}
    d7f2:	4770      	bx	lr
    d7f4:	20008000 	.word	0x20008000

0000d7f8 <bt_finalize_init>:
{
    d7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    d7fc:	4c45      	ldr	r4, [pc, #276]	; (d914 <bt_finalize_init+0x11c>)
{
    d7fe:	b083      	sub	sp, #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    d800:	2104      	movs	r1, #4
    d802:	af00      	add	r7, sp, #0
    d804:	4844      	ldr	r0, [pc, #272]	; (d918 <bt_finalize_init+0x120>)
    d806:	f00a fd61 	bl	182cc <atomic_or>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    d80a:	4d44      	ldr	r5, [pc, #272]	; (d91c <bt_finalize_init+0x124>)
    d80c:	79e2      	ldrb	r2, [r4, #7]
    d80e:	4b44      	ldr	r3, [pc, #272]	; (d920 <bt_finalize_init+0x128>)
    d810:	4620      	mov	r0, r4
    d812:	2a01      	cmp	r2, #1
    d814:	bf88      	it	hi
    d816:	461d      	movhi	r5, r3
    d818:	466e      	mov	r6, sp
    d81a:	f7fe fd53 	bl	c2c4 <bt_addr_le_str>
    d81e:	b08a      	sub	sp, #40	; 0x28
    d820:	466b      	mov	r3, sp
    d822:	4940      	ldr	r1, [pc, #256]	; (d924 <bt_finalize_init+0x12c>)
    d824:	61d8      	str	r0, [r3, #28]
    d826:	e9c3 1505 	strd	r1, r5, [r3, #20]
    d82a:	493f      	ldr	r1, [pc, #252]	; (d928 <bt_finalize_init+0x130>)
    d82c:	f103 0210 	add.w	r2, r3, #16
    d830:	6079      	str	r1, [r7, #4]
    d832:	1d38      	adds	r0, r7, #4
    d834:	f103 011f 	add.w	r1, r3, #31
    d838:	f103 0523 	add.w	r5, r3, #35	; 0x23
    d83c:	f810 cb01 	ldrb.w	ip, [r0], #1
    d840:	f801 cf01 	strb.w	ip, [r1, #1]!
    d844:	42a9      	cmp	r1, r5
    d846:	d1f9      	bne.n	d83c <bt_finalize_init+0x44>
	for (i = 1; i < bt_dev.id_count; i++) {
    d848:	2501      	movs	r5, #1
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    d84a:	4938      	ldr	r1, [pc, #224]	; (d92c <bt_finalize_init+0x134>)
    d84c:	4838      	ldr	r0, [pc, #224]	; (d930 <bt_finalize_init+0x138>)
    d84e:	6119      	str	r1, [r3, #16]
    d850:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
    d854:	f00a fd45 	bl	182e2 <z_log_msg_static_create.constprop.0>
    d858:	f8df b0b8 	ldr.w	fp, [pc, #184]	; d914 <bt_finalize_init+0x11c>
    d85c:	46b5      	mov	sp, r6
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
    d85e:	f8df 80d4 	ldr.w	r8, [pc, #212]	; d934 <bt_finalize_init+0x13c>
    d862:	4e35      	ldr	r6, [pc, #212]	; (d938 <bt_finalize_init+0x140>)
    d864:	f8df 90c8 	ldr.w	r9, [pc, #200]	; d930 <bt_finalize_init+0x138>
	for (i = 1; i < bt_dev.id_count; i++) {
    d868:	79e3      	ldrb	r3, [r4, #7]
    d86a:	f10b 0b07 	add.w	fp, fp, #7
    d86e:	429d      	cmp	r5, r3
    d870:	db39      	blt.n	d8e6 <bt_finalize_init+0xee>
	LOG_INF("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    d872:	f894 5070 	ldrb.w	r5, [r4, #112]	; 0x70
    d876:	466e      	mov	r6, sp
    d878:	4628      	mov	r0, r5
    d87a:	f7fe fe17 	bl	c4ac <ver_str>
    d87e:	b08c      	sub	sp, #48	; 0x30
    d880:	466a      	mov	r2, sp
    d882:	f8b4 1072 	ldrh.w	r1, [r4, #114]	; 0x72
    d886:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
    d88a:	e9c2 5107 	strd	r5, r1, [r2, #28]
    d88e:	f44f 7500 	mov.w	r5, #512	; 0x200
    d892:	6253      	str	r3, [r2, #36]	; 0x24
    d894:	f8df c0a4 	ldr.w	ip, [pc, #164]	; d93c <bt_finalize_init+0x144>
    d898:	4b29      	ldr	r3, [pc, #164]	; (d940 <bt_finalize_init+0x148>)
    d89a:	e9c2 c005 	strd	ip, r0, [r2, #20]
    d89e:	8515      	strh	r5, [r2, #40]	; 0x28
    d8a0:	f44f 5153 	mov.w	r1, #13504	; 0x34c0
    d8a4:	f842 3f10 	str.w	r3, [r2, #16]!
    d8a8:	4821      	ldr	r0, [pc, #132]	; (d930 <bt_finalize_init+0x138>)
    d8aa:	f00a fd1a 	bl	182e2 <z_log_msg_static_create.constprop.0>
    d8ae:	46b5      	mov	sp, r6
	LOG_INF("LMP: version %s (0x%02x) subver 0x%04x", ver_str(bt_dev.lmp_version),
    d8b0:	f894 6071 	ldrb.w	r6, [r4, #113]	; 0x71
    d8b4:	4630      	mov	r0, r6
    d8b6:	f7fe fdf9 	bl	c4ac <ver_str>
    d8ba:	b08a      	sub	sp, #40	; 0x28
    d8bc:	466a      	mov	r2, sp
    d8be:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
    d8c2:	4920      	ldr	r1, [pc, #128]	; (d944 <bt_finalize_init+0x14c>)
    d8c4:	e9c2 6307 	strd	r6, r3, [r2, #28]
    d8c8:	4b1f      	ldr	r3, [pc, #124]	; (d948 <bt_finalize_init+0x150>)
    d8ca:	e9c2 1005 	strd	r1, r0, [r2, #20]
    d8ce:	8495      	strh	r5, [r2, #36]	; 0x24
    d8d0:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
    d8d4:	4816      	ldr	r0, [pc, #88]	; (d930 <bt_finalize_init+0x138>)
    d8d6:	f842 3f10 	str.w	r3, [r2, #16]!
    d8da:	f00a fd02 	bl	182e2 <z_log_msg_static_create.constprop.0>
}
    d8de:	370c      	adds	r7, #12
    d8e0:	46bd      	mov	sp, r7
    d8e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
    d8e6:	4658      	mov	r0, fp
    d8e8:	f7fe fcec 	bl	c2c4 <bt_addr_le_str>
    d8ec:	46ea      	mov	sl, sp
    d8ee:	b08a      	sub	sp, #40	; 0x28
    d8f0:	466a      	mov	r2, sp
    d8f2:	f240 3301 	movw	r3, #769	; 0x301
    d8f6:	e9c2 6505 	strd	r6, r5, [r2, #20]
    d8fa:	61d0      	str	r0, [r2, #28]
    d8fc:	8413      	strh	r3, [r2, #32]
    d8fe:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    d902:	4648      	mov	r0, r9
    d904:	f842 8f10 	str.w	r8, [r2, #16]!
    d908:	f00a fceb 	bl	182e2 <z_log_msg_static_create.constprop.0>
	for (i = 1; i < bt_dev.id_count; i++) {
    d90c:	3501      	adds	r5, #1
    d90e:	46d5      	mov	sp, sl
    d910:	e7aa      	b.n	d868 <bt_finalize_init+0x70>
    d912:	bf00      	nop
    d914:	20008000 	.word	0x20008000
    d918:	200080d4 	.word	0x200080d4
    d91c:	0001e614 	.word	0x0001e614
    d920:	0001d1f2 	.word	0x0001d1f2
    d924:	0001d1f6 	.word	0x0001d1f6
    d928:	03010200 	.word	0x03010200
    d92c:	02000004 	.word	0x02000004
    d930:	0001b898 	.word	0x0001b898
    d934:	01000004 	.word	0x01000004
    d938:	0001d205 	.word	0x0001d205
    d93c:	0001d216 	.word	0x0001d216
    d940:	01000006 	.word	0x01000006
    d944:	0001d254 	.word	0x0001d254
    d948:	01000005 	.word	0x01000005

0000d94c <bt_init>:
{
    d94c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d950:	b088      	sub	sp, #32
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    d952:	4d65      	ldr	r5, [pc, #404]	; (dae8 <bt_init+0x19c>)
{
    d954:	af00      	add	r7, sp, #0
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    d956:	f8d5 315c 	ldr.w	r3, [r5, #348]	; 0x15c
    d95a:	6899      	ldr	r1, [r3, #8]
    d95c:	f011 0101 	ands.w	r1, r1, #1
    d960:	d11a      	bne.n	d998 <bt_init+0x4c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    d962:	f640 4003 	movw	r0, #3075	; 0xc03
    d966:	1d3a      	adds	r2, r7, #4
    d968:	f7ff fa4c 	bl	ce04 <bt_hci_cmd_send_sync>
		if (err) {
    d96c:	4604      	mov	r4, r0
    d96e:	2800      	cmp	r0, #0
    d970:	f040 80b4 	bne.w	dadc <bt_init+0x190>
		hci_reset_complete(rsp);
    d974:	6878      	ldr	r0, [r7, #4]
	uint8_t status = buf->data[0];
    d976:	68c3      	ldr	r3, [r0, #12]
	if (status) {
    d978:	781b      	ldrb	r3, [r3, #0]
    d97a:	b95b      	cbnz	r3, d994 <bt_init+0x48>
    d97c:	f105 03d4 	add.w	r3, r5, #212	; 0xd4
    d980:	e8d3 2faf 	lda	r2, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    d984:	f002 0209 	and.w	r2, r2, #9
    d988:	e8d3 1fef 	ldaex	r1, [r3]
    d98c:	e8c3 2fe4 	stlex	r4, r2, [r3]
    d990:	2c00      	cmp	r4, #0
    d992:	d1f9      	bne.n	d988 <bt_init+0x3c>
		net_buf_unref(rsp);
    d994:	f004 f8ee 	bl	11b74 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    d998:	2100      	movs	r1, #0
    d99a:	f241 0003 	movw	r0, #4099	; 0x1003
    d99e:	1d3a      	adds	r2, r7, #4
    d9a0:	f7ff fa30 	bl	ce04 <bt_hci_cmd_send_sync>
	if (err) {
    d9a4:	4604      	mov	r4, r0
    d9a6:	2800      	cmp	r0, #0
    d9a8:	f040 8098 	bne.w	dadc <bt_init+0x190>
	read_local_features_complete(rsp);
    d9ac:	687e      	ldr	r6, [r7, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    d9ae:	2208      	movs	r2, #8
    d9b0:	68f1      	ldr	r1, [r6, #12]
    d9b2:	484e      	ldr	r0, [pc, #312]	; (daec <bt_init+0x1a0>)
    d9b4:	3101      	adds	r1, #1
    d9b6:	f00a fbfa 	bl	181ae <memcpy>
	net_buf_unref(rsp);
    d9ba:	4630      	mov	r0, r6
    d9bc:	f004 f8da 	bl	11b74 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    d9c0:	4621      	mov	r1, r4
    d9c2:	f241 0001 	movw	r0, #4097	; 0x1001
    d9c6:	1d3a      	adds	r2, r7, #4
    d9c8:	f7ff fa1c 	bl	ce04 <bt_hci_cmd_send_sync>
	if (err) {
    d9cc:	4604      	mov	r4, r0
    d9ce:	2800      	cmp	r0, #0
    d9d0:	f040 8084 	bne.w	dadc <bt_init+0x190>
	read_local_ver_complete(rsp);
    d9d4:	6878      	ldr	r0, [r7, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    d9d6:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
    d9d8:	785a      	ldrb	r2, [r3, #1]
    d9da:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    d9de:	885a      	ldrh	r2, [r3, #2]
    d9e0:	f8a5 2072 	strh.w	r2, [r5, #114]	; 0x72
	bt_dev.lmp_version = rp->lmp_version;
    d9e4:	791a      	ldrb	r2, [r3, #4]
    d9e6:	f885 2071 	strb.w	r2, [r5, #113]	; 0x71
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    d9ea:	f8b3 2007 	ldrh.w	r2, [r3, #7]
    d9ee:	f8a5 2074 	strh.w	r2, [r5, #116]	; 0x74
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    d9f2:	f8b3 3005 	ldrh.w	r3, [r3, #5]
    d9f6:	f8a5 3076 	strh.w	r3, [r5, #118]	; 0x76
	net_buf_unref(rsp);
    d9fa:	f004 f8bb 	bl	11b74 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    d9fe:	4621      	mov	r1, r4
    da00:	f241 0002 	movw	r0, #4098	; 0x1002
    da04:	1d3a      	adds	r2, r7, #4
    da06:	f7ff f9fd 	bl	ce04 <bt_hci_cmd_send_sync>
	if (err) {
    da0a:	4604      	mov	r4, r0
    da0c:	2800      	cmp	r0, #0
    da0e:	d165      	bne.n	dadc <bt_init+0x190>
	read_supported_commands_complete(rsp);
    da10:	687c      	ldr	r4, [r7, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
    da12:	2240      	movs	r2, #64	; 0x40
    da14:	68e1      	ldr	r1, [r4, #12]
    da16:	4836      	ldr	r0, [pc, #216]	; (daf0 <bt_init+0x1a4>)
    da18:	3101      	adds	r1, #1
    da1a:	f00a fbc8 	bl	181ae <memcpy>
	net_buf_unref(rsp);
    da1e:	4620      	mov	r0, r4
    da20:	f004 f8a8 	bl	11b74 <net_buf_unref>
		err = prng_init();
    da24:	f001 f896 	bl	eb54 <prng_init>
		if (err) {
    da28:	4604      	mov	r4, r0
    da2a:	2800      	cmp	r0, #0
    da2c:	d156      	bne.n	dadc <bt_init+0x190>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    da2e:	f895 308a 	ldrb.w	r3, [r5, #138]	; 0x8a
    da32:	069b      	lsls	r3, r3, #26
    da34:	d41c      	bmi.n	da70 <bt_init+0x124>
		LOG_WRN("Controller to host flow control not supported");
    da36:	4b2f      	ldr	r3, [pc, #188]	; (daf4 <bt_init+0x1a8>)
    da38:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    da3c:	61fb      	str	r3, [r7, #28]
    da3e:	2302      	movs	r3, #2
    da40:	482d      	ldr	r0, [pc, #180]	; (daf8 <bt_init+0x1ac>)
    da42:	61bb      	str	r3, [r7, #24]
    da44:	f107 0218 	add.w	r2, r7, #24
    da48:	f00a fc4b 	bl	182e2 <z_log_msg_static_create.constprop.0>
	if (!BT_FEAT_LE(bt_dev.features)) {
    da4c:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
    da50:	065e      	lsls	r6, r3, #25
    da52:	d455      	bmi.n	db00 <bt_init+0x1b4>
		LOG_ERR("Non-LE capable controller detected!");
    da54:	4b29      	ldr	r3, [pc, #164]	; (dafc <bt_init+0x1b0>)
    da56:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    da5a:	61fb      	str	r3, [r7, #28]
    da5c:	2302      	movs	r3, #2
    da5e:	4826      	ldr	r0, [pc, #152]	; (daf8 <bt_init+0x1ac>)
    da60:	61bb      	str	r3, [r7, #24]
    da62:	f107 0218 	add.w	r2, r7, #24
    da66:	f00a fc3c 	bl	182e2 <z_log_msg_static_create.constprop.0>
		return -ENODEV;
    da6a:	f06f 0412 	mvn.w	r4, #18
    da6e:	e035      	b.n	dadc <bt_init+0x190>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    da70:	2107      	movs	r1, #7
    da72:	f640 4033 	movw	r0, #3123	; 0xc33
    da76:	f7ff f98b 	bl	cd90 <bt_hci_cmd_create>
	if (!buf) {
    da7a:	4680      	mov	r8, r0
    da7c:	2800      	cmp	r0, #0
    da7e:	f000 8127 	beq.w	dcd0 <bt_init+0x384>
	return net_buf_simple_add(&buf->b, len);
    da82:	2107      	movs	r1, #7
    da84:	300c      	adds	r0, #12
    da86:	f00b fec4 	bl	19812 <net_buf_simple_add>
	(void)memset(hbs, 0, sizeof(*hbs));
    da8a:	4621      	mov	r1, r4
    da8c:	2207      	movs	r2, #7
    da8e:	4606      	mov	r6, r0
    da90:	f00a fb98 	bl	181c4 <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    da94:	231b      	movs	r3, #27
    da96:	7033      	strb	r3, [r6, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    da98:	2306      	movs	r3, #6
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    da9a:	4622      	mov	r2, r4
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    da9c:	7074      	strb	r4, [r6, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    da9e:	7134      	strb	r4, [r6, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    daa0:	4641      	mov	r1, r8
    daa2:	f640 4033 	movw	r0, #3123	; 0xc33
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    daa6:	70f3      	strb	r3, [r6, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    daa8:	f7ff f9ac 	bl	ce04 <bt_hci_cmd_send_sync>
	if (err) {
    daac:	4604      	mov	r4, r0
    daae:	b9a8      	cbnz	r0, dadc <bt_init+0x190>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    dab0:	2101      	movs	r1, #1
    dab2:	f640 4031 	movw	r0, #3121	; 0xc31
    dab6:	f7ff f96b 	bl	cd90 <bt_hci_cmd_create>
	if (!buf) {
    daba:	4606      	mov	r6, r0
    dabc:	2800      	cmp	r0, #0
    dabe:	f000 8107 	beq.w	dcd0 <bt_init+0x384>
	return net_buf_simple_add_u8(&buf->b, val);
    dac2:	2101      	movs	r1, #1
    dac4:	300c      	adds	r0, #12
    dac6:	f00b feb3 	bl	19830 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    daca:	4622      	mov	r2, r4
    dacc:	4631      	mov	r1, r6
    dace:	f640 4031 	movw	r0, #3121	; 0xc31
    dad2:	f7ff f997 	bl	ce04 <bt_hci_cmd_send_sync>
	if (err) {
    dad6:	4604      	mov	r4, r0
    dad8:	2800      	cmp	r0, #0
    dada:	d0b7      	beq.n	da4c <bt_init+0x100>
}
    dadc:	4620      	mov	r0, r4
    dade:	3720      	adds	r7, #32
    dae0:	46bd      	mov	sp, r7
    dae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dae6:	bf00      	nop
    dae8:	20008000 	.word	0x20008000
    daec:	20008078 	.word	0x20008078
    daf0:	20008080 	.word	0x20008080
    daf4:	0001d27b 	.word	0x0001d27b
    daf8:	0001b898 	.word	0x0001b898
    dafc:	0001d2a9 	.word	0x0001d2a9
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    db00:	2100      	movs	r1, #0
    db02:	f242 0003 	movw	r0, #8195	; 0x2003
    db06:	f107 0208 	add.w	r2, r7, #8
    db0a:	f7ff f97b 	bl	ce04 <bt_hci_cmd_send_sync>
	if (err) {
    db0e:	4604      	mov	r4, r0
    db10:	2800      	cmp	r0, #0
    db12:	d1e3      	bne.n	dadc <bt_init+0x190>
	read_le_features_complete(rsp);
    db14:	68be      	ldr	r6, [r7, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    db16:	2208      	movs	r2, #8
    db18:	68f1      	ldr	r1, [r6, #12]
    db1a:	4894      	ldr	r0, [pc, #592]	; (dd6c <bt_init+0x420>)
    db1c:	3101      	adds	r1, #1
    db1e:	f00a fb46 	bl	181ae <memcpy>
	net_buf_unref(rsp);
    db22:	4630      	mov	r0, r6
    db24:	f004 f826 	bl	11b74 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    db28:	4621      	mov	r1, r4
    db2a:	f242 0002 	movw	r0, #8194	; 0x2002
    db2e:	f107 0208 	add.w	r2, r7, #8
    db32:	f7ff f967 	bl	ce04 <bt_hci_cmd_send_sync>
		if (err) {
    db36:	4604      	mov	r4, r0
    db38:	2800      	cmp	r0, #0
    db3a:	d1cf      	bne.n	dadc <bt_init+0x190>
		le_read_buffer_size_complete(rsp);
    db3c:	68bc      	ldr	r4, [r7, #8]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    db3e:	68e3      	ldr	r3, [r4, #12]
	uint16_t acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    db40:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    db44:	b291      	uxth	r1, r2
	if (!acl_mtu || !rp->le_max_num) {
    db46:	b141      	cbz	r1, db5a <bt_init+0x20e>
    db48:	78d9      	ldrb	r1, [r3, #3]
    db4a:	b131      	cbz	r1, db5a <bt_init+0x20e>
	bt_dev.le.acl_mtu = acl_mtu;
    db4c:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    db50:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    db52:	4887      	ldr	r0, [pc, #540]	; (dd70 <bt_init+0x424>)
    db54:	4611      	mov	r1, r2
    db56:	f00d f81f 	bl	1ab98 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    db5a:	4620      	mov	r0, r4
    db5c:	f004 f80a 	bl	11b74 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    db60:	f895 607c 	ldrb.w	r6, [r5, #124]	; 0x7c
    db64:	f016 0620 	ands.w	r6, r6, #32
    db68:	d118      	bne.n	db9c <bt_init+0x250>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    db6a:	2102      	movs	r1, #2
    db6c:	f640 406d 	movw	r0, #3181	; 0xc6d
    db70:	f7ff f90e 	bl	cd90 <bt_hci_cmd_create>
		if (!buf) {
    db74:	4604      	mov	r4, r0
    db76:	2800      	cmp	r0, #0
    db78:	f000 80aa 	beq.w	dcd0 <bt_init+0x384>
	return net_buf_simple_add(&buf->b, len);
    db7c:	2102      	movs	r1, #2
    db7e:	300c      	adds	r0, #12
    db80:	f00b fe47 	bl	19812 <net_buf_simple_add>
		cp_le->le = 0x01;
    db84:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    db86:	4621      	mov	r1, r4
		cp_le->le = 0x01;
    db88:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    db8a:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    db8c:	4632      	mov	r2, r6
    db8e:	f640 406d 	movw	r0, #3181	; 0xc6d
    db92:	f7ff f937 	bl	ce04 <bt_hci_cmd_send_sync>
		if (err) {
    db96:	4604      	mov	r4, r0
    db98:	2800      	cmp	r0, #0
    db9a:	d19f      	bne.n	dadc <bt_init+0x190>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    db9c:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
    dba0:	071c      	lsls	r4, r3, #28
    dba2:	d513      	bpl.n	dbcc <bt_init+0x280>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    dba4:	2100      	movs	r1, #0
    dba6:	f242 001c 	movw	r0, #8220	; 0x201c
    dbaa:	f107 0208 	add.w	r2, r7, #8
    dbae:	f7ff f929 	bl	ce04 <bt_hci_cmd_send_sync>
		if (err) {
    dbb2:	4604      	mov	r4, r0
    dbb4:	2800      	cmp	r0, #0
    dbb6:	d191      	bne.n	dadc <bt_init+0x190>
		le_read_supp_states_complete(rsp);
    dbb8:	68b8      	ldr	r0, [r7, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    dbba:	68c3      	ldr	r3, [r0, #12]
    dbbc:	f8d3 2001 	ldr.w	r2, [r3, #1]
    dbc0:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    dbc4:	e9c5 2338 	strd	r2, r3, [r5, #224]	; 0xe0
		net_buf_unref(rsp);
    dbc8:	f003 ffd4 	bl	11b74 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    dbcc:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
    dbd0:	0698      	lsls	r0, r3, #26
    dbd2:	d521      	bpl.n	dc18 <bt_init+0x2cc>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    dbd4:	1d39      	adds	r1, r7, #4
    dbd6:	1cb8      	adds	r0, r7, #2
    dbd8:	f7ff f994 	bl	cf04 <hci_le_read_max_data_len>
		if (err) {
    dbdc:	4604      	mov	r4, r0
    dbde:	2800      	cmp	r0, #0
    dbe0:	f47f af7c 	bne.w	dadc <bt_init+0x190>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    dbe4:	2104      	movs	r1, #4
    dbe6:	f242 0024 	movw	r0, #8228	; 0x2024
    dbea:	f7ff f8d1 	bl	cd90 <bt_hci_cmd_create>
		if (!buf) {
    dbee:	4606      	mov	r6, r0
    dbf0:	2800      	cmp	r0, #0
    dbf2:	d06d      	beq.n	dcd0 <bt_init+0x384>
    dbf4:	2104      	movs	r1, #4
    dbf6:	300c      	adds	r0, #12
    dbf8:	f00b fe0b 	bl	19812 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    dbfc:	887b      	ldrh	r3, [r7, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    dbfe:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    dc00:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    dc02:	88bb      	ldrh	r3, [r7, #4]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    dc04:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    dc06:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    dc08:	f242 0024 	movw	r0, #8228	; 0x2024
    dc0c:	f7ff f8fa 	bl	ce04 <bt_hci_cmd_send_sync>
		if (err) {
    dc10:	4604      	mov	r4, r0
    dc12:	2800      	cmp	r0, #0
    dc14:	f47f af62 	bne.w	dadc <bt_init+0x190>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    dc18:	2108      	movs	r1, #8
    dc1a:	f242 0001 	movw	r0, #8193	; 0x2001
    dc1e:	f7ff f8b7 	bl	cd90 <bt_hci_cmd_create>
	if (!buf) {
    dc22:	4604      	mov	r4, r0
    dc24:	2800      	cmp	r0, #0
    dc26:	d053      	beq.n	dcd0 <bt_init+0x384>
    dc28:	2108      	movs	r1, #8
    dc2a:	300c      	adds	r0, #12
    dc2c:	f00b fdf1 	bl	19812 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    dc30:	f895 20d8 	ldrb.w	r2, [r5, #216]	; 0xd8
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    dc34:	f012 0f02 	tst.w	r2, #2
    dc38:	bf14      	ite	ne
    dc3a:	232f      	movne	r3, #47	; 0x2f
    dc3c:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    dc3e:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    dc40:	f895 20d9 	ldrb.w	r2, [r5, #217]	; 0xd9
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    dc44:	bf48      	it	mi
    dc46:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    dc4a:	f012 0f09 	tst.w	r2, #9
	dst[0] = val;
    dc4e:	f04f 0200 	mov.w	r2, #0
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    dc52:	bf18      	it	ne
    dc54:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
    dc58:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    dc5a:	f3c3 2307 	ubfx	r3, r3, #8, #8
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    dc5e:	4621      	mov	r1, r4
    dc60:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    dc62:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    dc64:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    dc66:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    dc68:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    dc6a:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    dc6c:	71c2      	strb	r2, [r0, #7]
    dc6e:	f242 0001 	movw	r0, #8193	; 0x2001
    dc72:	f7ff f8c7 	bl	ce04 <bt_hci_cmd_send_sync>
	if (err) {
    dc76:	4604      	mov	r4, r0
    dc78:	2800      	cmp	r0, #0
    dc7a:	f47f af2f 	bne.w	dadc <bt_init+0x190>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    dc7e:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
	if (bt_dev.le.acl_mtu) {
    dc82:	f8b5 1104 	ldrh.w	r1, [r5, #260]	; 0x104
	if (BT_FEAT_BREDR(bt_dev.features)) {
    dc86:	069a      	lsls	r2, r3, #26
    dc88:	d425      	bmi.n	dcd6 <bt_init+0x38a>
	if (bt_dev.le.acl_mtu) {
    dc8a:	b9d1      	cbnz	r1, dcc2 <bt_init+0x376>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    dc8c:	f241 0005 	movw	r0, #4101	; 0x1005
    dc90:	f107 0208 	add.w	r2, r7, #8
    dc94:	f7ff f8b6 	bl	ce04 <bt_hci_cmd_send_sync>
	if (err) {
    dc98:	4604      	mov	r4, r0
    dc9a:	2800      	cmp	r0, #0
    dc9c:	f47f af1e 	bne.w	dadc <bt_init+0x190>
	if (bt_dev.le.acl_mtu) {
    dca0:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
	read_buffer_size_complete(rsp);
    dca4:	68bc      	ldr	r4, [r7, #8]
	if (bt_dev.le.acl_mtu) {
    dca6:	b94b      	cbnz	r3, dcbc <bt_init+0x370>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    dca8:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    dcaa:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    dcae:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    dcb2:	889a      	ldrh	r2, [r3, #4]
    dcb4:	482e      	ldr	r0, [pc, #184]	; (dd70 <bt_init+0x424>)
    dcb6:	4611      	mov	r1, r2
    dcb8:	f00c ff6e 	bl	1ab98 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    dcbc:	4620      	mov	r0, r4
    dcbe:	f003 ff59 	bl	11b74 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    dcc2:	2108      	movs	r1, #8
    dcc4:	f640 4001 	movw	r0, #3073	; 0xc01
    dcc8:	f7ff f862 	bl	cd90 <bt_hci_cmd_create>
	if (!buf) {
    dccc:	4604      	mov	r4, r0
    dcce:	b990      	cbnz	r0, dcf6 <bt_init+0x3aa>
		return -ENOBUFS;
    dcd0:	f06f 0468 	mvn.w	r4, #104	; 0x68
    dcd4:	e702      	b.n	dadc <bt_init+0x190>
	else if (!bt_dev.le.acl_mtu) {
    dcd6:	2900      	cmp	r1, #0
    dcd8:	d1f3      	bne.n	dcc2 <bt_init+0x376>
		LOG_ERR("ACL BR/EDR buffers not initialized");
    dcda:	4b26      	ldr	r3, [pc, #152]	; (dd74 <bt_init+0x428>)
    dcdc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    dce0:	61fb      	str	r3, [r7, #28]
    dce2:	2302      	movs	r3, #2
    dce4:	4824      	ldr	r0, [pc, #144]	; (dd78 <bt_init+0x42c>)
    dce6:	61bb      	str	r3, [r7, #24]
    dce8:	f107 0218 	add.w	r2, r7, #24
    dcec:	f00a faf9 	bl	182e2 <z_log_msg_static_create.constprop.0>
		return -EIO;
    dcf0:	f06f 0404 	mvn.w	r4, #4
    dcf4:	e6f2      	b.n	dadc <bt_init+0x190>
    dcf6:	2108      	movs	r1, #8
    dcf8:	300c      	adds	r0, #12
    dcfa:	f00b fd8a 	bl	19812 <net_buf_simple_add>
	dst[0] = val;
    dcfe:	2310      	movs	r3, #16
    dd00:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    dd02:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
    dd04:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    dd06:	7043      	strb	r3, [r0, #1]
    dd08:	2602      	movs	r6, #2
    dd0a:	2320      	movs	r3, #32
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    dd0c:	4621      	mov	r1, r4
	dst[0] = val;
    dd0e:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    dd10:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
    dd12:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    dd14:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    dd16:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    dd18:	71c3      	strb	r3, [r0, #7]
    dd1a:	f640 4001 	movw	r0, #3073	; 0xc01
    dd1e:	f7ff f871 	bl	ce04 <bt_hci_cmd_send_sync>
	if (err) {
    dd22:	4604      	mov	r4, r0
    dd24:	2800      	cmp	r0, #0
    dd26:	f47f aed9 	bne.w	dadc <bt_init+0x190>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    dd2a:	4601      	mov	r1, r0
    dd2c:	1d3a      	adds	r2, r7, #4
    dd2e:	f64f 4001 	movw	r0, #64513	; 0xfc01
    dd32:	f7ff f867 	bl	ce04 <bt_hci_cmd_send_sync>
	if (err) {
    dd36:	b318      	cbz	r0, dd80 <bt_init+0x434>
		LOG_WRN("Vendor HCI extensions not available");
    dd38:	4b10      	ldr	r3, [pc, #64]	; (dd7c <bt_init+0x430>)
    dd3a:	e9c7 6306 	strd	r6, r3, [r7, #24]
			LOG_WRN("Failed to read supported vendor features");
    dd3e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    dd42:	480d      	ldr	r0, [pc, #52]	; (dd78 <bt_init+0x42c>)
    dd44:	f107 0218 	add.w	r2, r7, #24
    dd48:	f00a facb 	bl	182e2 <z_log_msg_static_create.constprop.0>
	err = bt_id_init();
    dd4c:	f000 fb6c 	bl	e428 <bt_id_init>
	if (err) {
    dd50:	4604      	mov	r4, r0
    dd52:	2800      	cmp	r0, #0
    dd54:	f47f aec2 	bne.w	dadc <bt_init+0x190>
		err = bt_conn_init();
    dd58:	f001 fdb6 	bl	f8c8 <bt_conn_init>
		if (err) {
    dd5c:	4604      	mov	r4, r0
    dd5e:	2800      	cmp	r0, #0
    dd60:	f47f aebc 	bne.w	dadc <bt_init+0x190>
	bt_finalize_init();
    dd64:	f7ff fd48 	bl	d7f8 <bt_finalize_init>
	return 0;
    dd68:	e6b8      	b.n	dadc <bt_init+0x190>
    dd6a:	bf00      	nop
    dd6c:	200080d8 	.word	0x200080d8
    dd70:	20008108 	.word	0x20008108
    dd74:	0001d2cd 	.word	0x0001d2cd
    dd78:	0001b898 	.word	0x0001b898
    dd7c:	0001d2f0 	.word	0x0001d2f0
	rp.info = (void *)rsp->data;
    dd80:	687b      	ldr	r3, [r7, #4]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
    dd82:	466e      	mov	r6, sp
	rp.info = (void *)rsp->data;
    dd84:	68dc      	ldr	r4, [r3, #12]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
    dd86:	b08a      	sub	sp, #40	; 0x28
    dd88:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    dd8c:	2b03      	cmp	r3, #3
		return plat_str[platform];
    dd8e:	bf96      	itet	ls
    dd90:	4a46      	ldrls	r2, [pc, #280]	; (deac <bt_init+0x560>)
	return "unknown";
    dd92:	4947      	ldrhi	r1, [pc, #284]	; (deb0 <bt_init+0x564>)
		return plat_str[platform];
    dd94:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
    dd98:	466a      	mov	r2, sp
    dd9a:	61d3      	str	r3, [r2, #28]
    dd9c:	f44f 7300 	mov.w	r3, #512	; 0x200
    dda0:	4844      	ldr	r0, [pc, #272]	; (deb4 <bt_init+0x568>)
    dda2:	8413      	strh	r3, [r2, #32]
    dda4:	4b44      	ldr	r3, [pc, #272]	; (deb8 <bt_init+0x56c>)
    dda6:	e9c2 0105 	strd	r0, r1, [r2, #20]
    ddaa:	f842 3f10 	str.w	r3, [r2, #16]!
    ddae:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    ddb2:	4842      	ldr	r0, [pc, #264]	; (debc <bt_init+0x570>)
    ddb4:	f00a fa95 	bl	182e2 <z_log_msg_static_create.constprop.0>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    ddb8:	f8b4 2001 	ldrh.w	r2, [r4, #1]
    ddbc:	46b5      	mov	sp, r6
    ddbe:	2a02      	cmp	r2, #2
	LOG_INF("HW Variant: %s (0x%04x)",
    ddc0:	f8b4 3003 	ldrh.w	r3, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    ddc4:	d14c      	bne.n	de60 <bt_init+0x514>
	if (variant < ARRAY_SIZE(nordic_str)) {
    ddc6:	2b03      	cmp	r3, #3
    ddc8:	d84a      	bhi.n	de60 <bt_init+0x514>
		return nordic_str[variant];
    ddca:	4a3d      	ldr	r2, [pc, #244]	; (dec0 <bt_init+0x574>)
    ddcc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Variant: %s (0x%04x)",
    ddd0:	466e      	mov	r6, sp
    ddd2:	b08a      	sub	sp, #40	; 0x28
    ddd4:	466a      	mov	r2, sp
    ddd6:	61d3      	str	r3, [r2, #28]
    ddd8:	f44f 7300 	mov.w	r3, #512	; 0x200
    dddc:	4839      	ldr	r0, [pc, #228]	; (dec4 <bt_init+0x578>)
    ddde:	8413      	strh	r3, [r2, #32]
    dde0:	4b35      	ldr	r3, [pc, #212]	; (deb8 <bt_init+0x56c>)
    dde2:	e9c2 0105 	strd	r0, r1, [r2, #20]
    dde6:	f842 3f10 	str.w	r3, [r2, #16]!
    ddea:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    ddee:	4833      	ldr	r0, [pc, #204]	; (debc <bt_init+0x570>)
    ddf0:	f00a fa77 	bl	182e2 <z_log_msg_static_create.constprop.0>
    ddf4:	46b5      	mov	sp, r6
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
    ddf6:	7963      	ldrb	r3, [r4, #5]
    ddf8:	f894 c006 	ldrb.w	ip, [r4, #6]
	if (variant < ARRAY_SIZE(var_str)) {
    ddfc:	2b03      	cmp	r3, #3
		return var_str[variant];
    ddfe:	bf98      	it	ls
    de00:	4a31      	ldrls	r2, [pc, #196]	; (dec8 <bt_init+0x57c>)
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
    de02:	f8b4 6007 	ldrh.w	r6, [r4, #7]
    de06:	f8d4 0009 	ldr.w	r0, [r4, #9]
    de0a:	466c      	mov	r4, sp
    de0c:	b08c      	sub	sp, #48	; 0x30
		return var_str[variant];
    de0e:	bf94      	ite	ls
    de10:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	return "unknown";
    de14:	4926      	ldrhi	r1, [pc, #152]	; (deb0 <bt_init+0x564>)
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
    de16:	466a      	mov	r2, sp
    de18:	e9c2 3c07 	strd	r3, ip, [r2, #28]
    de1c:	f44f 7300 	mov.w	r3, #512	; 0x200
    de20:	f8df e0a8 	ldr.w	lr, [pc, #168]	; decc <bt_init+0x580>
    de24:	8593      	strh	r3, [r2, #44]	; 0x2c
    de26:	4b2a      	ldr	r3, [pc, #168]	; (ded0 <bt_init+0x584>)
    de28:	e9c2 e105 	strd	lr, r1, [r2, #20]
    de2c:	e9c2 6009 	strd	r6, r0, [r2, #36]	; 0x24
    de30:	f44f 5173 	mov.w	r1, #15552	; 0x3cc0
    de34:	f842 3f10 	str.w	r3, [r2, #16]!
    de38:	4820      	ldr	r0, [pc, #128]	; (debc <bt_init+0x570>)
    de3a:	f00a fa52 	bl	182e2 <z_log_msg_static_create.constprop.0>
    de3e:	46a5      	mov	sp, r4
	net_buf_unref(rsp);
    de40:	6878      	ldr	r0, [r7, #4]
    de42:	f003 fe97 	bl	11b74 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    de46:	2100      	movs	r1, #0
    de48:	f64f 4002 	movw	r0, #64514	; 0xfc02
    de4c:	1d3a      	adds	r2, r7, #4
    de4e:	f7fe ffd9 	bl	ce04 <bt_hci_cmd_send_sync>
	if (err) {
    de52:	4604      	mov	r4, r0
    de54:	b130      	cbz	r0, de64 <bt_init+0x518>
		LOG_WRN("Failed to read supported vendor commands");
    de56:	4b1f      	ldr	r3, [pc, #124]	; (ded4 <bt_init+0x588>)
			LOG_WRN("Failed to read supported vendor features");
    de58:	61fb      	str	r3, [r7, #28]
    de5a:	2302      	movs	r3, #2
    de5c:	61bb      	str	r3, [r7, #24]
    de5e:	e76e      	b.n	dd3e <bt_init+0x3f2>
		return "unknown";
    de60:	4913      	ldr	r1, [pc, #76]	; (deb0 <bt_init+0x564>)
    de62:	e7b5      	b.n	ddd0 <bt_init+0x484>
	rp.cmds = (void *)rsp->data;
    de64:	687e      	ldr	r6, [r7, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    de66:	2202      	movs	r2, #2
    de68:	68f1      	ldr	r1, [r6, #12]
    de6a:	481b      	ldr	r0, [pc, #108]	; (ded8 <bt_init+0x58c>)
    de6c:	3101      	adds	r1, #1
    de6e:	f00a f99e 	bl	181ae <memcpy>
	net_buf_unref(rsp);
    de72:	4630      	mov	r0, r6
    de74:	f003 fe7e 	bl	11b74 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    de78:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    de7c:	075b      	lsls	r3, r3, #29
    de7e:	f57f af65 	bpl.w	dd4c <bt_init+0x400>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    de82:	4621      	mov	r1, r4
    de84:	f64f 4003 	movw	r0, #64515	; 0xfc03
    de88:	1d3a      	adds	r2, r7, #4
    de8a:	f7fe ffbb 	bl	ce04 <bt_hci_cmd_send_sync>
		if (err) {
    de8e:	b108      	cbz	r0, de94 <bt_init+0x548>
			LOG_WRN("Failed to read supported vendor features");
    de90:	4b12      	ldr	r3, [pc, #72]	; (dedc <bt_init+0x590>)
    de92:	e7e1      	b.n	de58 <bt_init+0x50c>
		memcpy(bt_dev.vs_features, rp.feat->features,
    de94:	2201      	movs	r2, #1
		rp.feat = (void *)rsp->data;
    de96:	687c      	ldr	r4, [r7, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    de98:	4811      	ldr	r0, [pc, #68]	; (dee0 <bt_init+0x594>)
    de9a:	68e1      	ldr	r1, [r4, #12]
    de9c:	4411      	add	r1, r2
    de9e:	f00a f986 	bl	181ae <memcpy>
		net_buf_unref(rsp);
    dea2:	4620      	mov	r0, r4
    dea4:	f003 fe66 	bl	11b74 <net_buf_unref>
    dea8:	e750      	b.n	dd4c <bt_init+0x400>
    deaa:	bf00      	nop
    deac:	0001bd5c 	.word	0x0001bd5c
    deb0:	0001cd06 	.word	0x0001cd06
    deb4:	0001d314 	.word	0x0001d314
    deb8:	01000004 	.word	0x01000004
    debc:	0001b898 	.word	0x0001b898
    dec0:	0001bd4c 	.word	0x0001bd4c
    dec4:	0001d32d 	.word	0x0001d32d
    dec8:	0001bd3c 	.word	0x0001bd3c
    decc:	0001d345 	.word	0x0001d345
    ded0:	01000007 	.word	0x01000007
    ded4:	0001d372 	.word	0x0001d372
    ded8:	200080c1 	.word	0x200080c1
    dedc:	0001d39b 	.word	0x0001d39b
    dee0:	200080c0 	.word	0x200080c0

0000dee4 <init_work>:
{
    dee4:	b510      	push	{r4, lr}
	err = bt_init();
    dee6:	f7ff fd31 	bl	d94c <bt_init>
	if (ready_cb) {
    deea:	4b03      	ldr	r3, [pc, #12]	; (def8 <init_work+0x14>)
    deec:	681b      	ldr	r3, [r3, #0]
    deee:	b113      	cbz	r3, def6 <init_work+0x12>
}
    def0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    def4:	4718      	bx	r3
}
    def6:	bd10      	pop	{r4, pc}
    def8:	20009898 	.word	0x20009898

0000defc <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
    defc:	b5f0      	push	{r4, r5, r6, r7, lr}
    defe:	b08f      	sub	sp, #60	; 0x3c
	int err;

	if (!bt_dev.drv) {
    df00:	4d3b      	ldr	r5, [pc, #236]	; (dff0 <bt_enable+0xf4>)
{
    df02:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    df04:	f8d5 315c 	ldr.w	r3, [r5, #348]	; 0x15c
{
    df08:	af08      	add	r7, sp, #32
	if (!bt_dev.drv) {
    df0a:	b983      	cbnz	r3, df2e <bt_enable+0x32>
		LOG_ERR("No HCI driver registered");
    df0c:	4b39      	ldr	r3, [pc, #228]	; (dff4 <bt_enable+0xf8>)
		return -ENODEV;
    df0e:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("No HCI driver registered");
    df12:	617b      	str	r3, [r7, #20]
    df14:	2302      	movs	r3, #2
    df16:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    df1a:	4837      	ldr	r0, [pc, #220]	; (dff8 <bt_enable+0xfc>)
    df1c:	f107 0210 	add.w	r2, r7, #16
    df20:	613b      	str	r3, [r7, #16]
    df22:	f00a f9de 	bl	182e2 <z_log_msg_static_create.constprop.0>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    df26:	4620      	mov	r0, r4
    df28:	371c      	adds	r7, #28
    df2a:	46bd      	mov	sp, r7
    df2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    df2e:	f06f 0102 	mvn.w	r1, #2
    df32:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
    df36:	f00a f9d7 	bl	182e8 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    df3a:	2101      	movs	r1, #1
    df3c:	f00a f9c6 	bl	182cc <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    df40:	ea10 0401 	ands.w	r4, r0, r1
    df44:	d150      	bne.n	dfe8 <bt_enable+0xec>
	ready_cb = cb;
    df46:	4b2d      	ldr	r3, [pc, #180]	; (dffc <bt_enable+0x100>)
    df48:	601e      	str	r6, [r3, #0]
    df4a:	460a      	mov	r2, r1
    df4c:	f505 7090 	add.w	r0, r5, #288	; 0x120
    df50:	f00c fe22 	bl	1ab98 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
    df54:	f505 70a2 	add.w	r0, r5, #324	; 0x144
    df58:	f00c fdf9 	bl	1ab4e <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    df5c:	2200      	movs	r2, #0
    df5e:	2300      	movs	r3, #0
    df60:	e9cd 2306 	strd	r2, r3, [sp, #24]
    df64:	f06f 0308 	mvn.w	r3, #8
    df68:	f44f 6280 	mov.w	r2, #1024	; 0x400
    df6c:	e9cd 4302 	strd	r4, r3, [sp, #8]
    df70:	e9cd 4400 	strd	r4, r4, [sp]
    df74:	4b22      	ldr	r3, [pc, #136]	; (e000 <bt_enable+0x104>)
    df76:	4923      	ldr	r1, [pc, #140]	; (e004 <bt_enable+0x108>)
    df78:	9404      	str	r4, [sp, #16]
    df7a:	4823      	ldr	r0, [pc, #140]	; (e008 <bt_enable+0x10c>)
    df7c:	f007 f9b4 	bl	152e8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    df80:	4922      	ldr	r1, [pc, #136]	; (e00c <bt_enable+0x110>)
    df82:	4821      	ldr	r0, [pc, #132]	; (e008 <bt_enable+0x10c>)
    df84:	f00c fd54 	bl	1aa30 <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
    df88:	4821      	ldr	r0, [pc, #132]	; (e010 <bt_enable+0x114>)
    df8a:	f00c fec6 	bl	1ad1a <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
    df8e:	f06f 0307 	mvn.w	r3, #7
    df92:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
    df96:	491f      	ldr	r1, [pc, #124]	; (e014 <bt_enable+0x118>)
    df98:	481d      	ldr	r0, [pc, #116]	; (e010 <bt_enable+0x114>)
    df9a:	9400      	str	r4, [sp, #0]
    df9c:	f007 fcb4 	bl	15908 <k_work_queue_start>
    dfa0:	491d      	ldr	r1, [pc, #116]	; (e018 <bt_enable+0x11c>)
    dfa2:	481b      	ldr	r0, [pc, #108]	; (e010 <bt_enable+0x114>)
    dfa4:	f00c fd44 	bl	1aa30 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
    dfa8:	f8d5 315c 	ldr.w	r3, [r5, #348]	; 0x15c
    dfac:	68db      	ldr	r3, [r3, #12]
    dfae:	4798      	blx	r3
	if (err) {
    dfb0:	4604      	mov	r4, r0
    dfb2:	b178      	cbz	r0, dfd4 <bt_enable+0xd8>
		LOG_ERR("HCI driver open failed (%d)", err);
    dfb4:	466d      	mov	r5, sp
    dfb6:	b088      	sub	sp, #32
    dfb8:	462a      	mov	r2, r5
    dfba:	4b18      	ldr	r3, [pc, #96]	; (e01c <bt_enable+0x120>)
    dfbc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    dfc0:	e9c5 3005 	strd	r3, r0, [r5, #20]
    dfc4:	2303      	movs	r3, #3
    dfc6:	480c      	ldr	r0, [pc, #48]	; (dff8 <bt_enable+0xfc>)
    dfc8:	f842 3f10 	str.w	r3, [r2, #16]!
    dfcc:	f00a f989 	bl	182e2 <z_log_msg_static_create.constprop.0>
    dfd0:	46ad      	mov	sp, r5
		return err;
    dfd2:	e7a8      	b.n	df26 <bt_enable+0x2a>
	if (!cb) {
    dfd4:	b91e      	cbnz	r6, dfde <bt_enable+0xe2>
		return bt_init();
    dfd6:	f7ff fcb9 	bl	d94c <bt_init>
    dfda:	4604      	mov	r4, r0
    dfdc:	e7a3      	b.n	df26 <bt_enable+0x2a>
	k_work_submit(&bt_dev.init);
    dfde:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
    dfe2:	f007 fc8b 	bl	158fc <k_work_submit>
	return 0;
    dfe6:	e79e      	b.n	df26 <bt_enable+0x2a>
		return -EALREADY;
    dfe8:	f06f 0477 	mvn.w	r4, #119	; 0x77
    dfec:	e79b      	b.n	df26 <bt_enable+0x2a>
    dfee:	bf00      	nop
    dff0:	20008000 	.word	0x20008000
    dff4:	0001d3c4 	.word	0x0001d3c4
    dff8:	0001b898 	.word	0x0001b898
    dffc:	20009898 	.word	0x20009898
    e000:	0000d531 	.word	0x0000d531
    e004:	2000aca8 	.word	0x2000aca8
    e008:	20009160 	.word	0x20009160
    e00c:	0001d3dd 	.word	0x0001d3dd
    e010:	200091e8 	.word	0x200091e8
    e014:	2000b0a8 	.word	0x2000b0a8
    e018:	0001d3e3 	.word	0x0001d3e3
    e01c:	0001d3e9 	.word	0x0001d3e9

0000e020 <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e020:	4b02      	ldr	r3, [pc, #8]	; (e02c <bt_is_ready+0xc>)
    e022:	e8d3 0faf 	lda	r0, [r3]
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
    e026:	f3c0 0080 	ubfx	r0, r0, #2, #1
    e02a:	4770      	bx	lr
    e02c:	200080d4 	.word	0x200080d4

0000e030 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    e030:	4800      	ldr	r0, [pc, #0]	; (e034 <bt_get_name+0x4>)
    e032:	4770      	bx	lr
    e034:	0001c3aa 	.word	0x0001c3aa

0000e038 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    e038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e03a:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    e03c:	2500      	movs	r5, #0
    e03e:	4f09      	ldr	r7, [pc, #36]	; (e064 <id_find+0x2c>)
    e040:	79fb      	ldrb	r3, [r7, #7]
    e042:	b2ec      	uxtb	r4, r5
    e044:	42a3      	cmp	r3, r4
    e046:	d802      	bhi.n	e04e <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    e048:	f06f 0001 	mvn.w	r0, #1
    e04c:	e009      	b.n	e062 <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
    e04e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    e052:	4630      	mov	r0, r6
    e054:	4439      	add	r1, r7
    e056:	f00a f9f3 	bl	18440 <bt_addr_le_eq>
    e05a:	3501      	adds	r5, #1
    e05c:	2800      	cmp	r0, #0
    e05e:	d0ef      	beq.n	e040 <id_find+0x8>
    e060:	4620      	mov	r0, r4
}
    e062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e064:	20008000 	.word	0x20008000

0000e068 <set_random_address>:
{
    e068:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    e06a:	2206      	movs	r2, #6
    e06c:	4912      	ldr	r1, [pc, #72]	; (e0b8 <set_random_address+0x50>)
    e06e:	4605      	mov	r5, r0
    e070:	f00a f88d 	bl	1818e <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    e074:	b1d8      	cbz	r0, e0ae <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    e076:	2106      	movs	r1, #6
    e078:	f242 0005 	movw	r0, #8197	; 0x2005
    e07c:	f7fe fe88 	bl	cd90 <bt_hci_cmd_create>
	if (!buf) {
    e080:	4604      	mov	r4, r0
    e082:	b1b0      	cbz	r0, e0b2 <set_random_address+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    e084:	2206      	movs	r2, #6
    e086:	4629      	mov	r1, r5
    e088:	300c      	adds	r0, #12
    e08a:	f00b fbc8 	bl	1981e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    e08e:	2200      	movs	r2, #0
    e090:	4621      	mov	r1, r4
    e092:	f242 0005 	movw	r0, #8197	; 0x2005
    e096:	f7fe feb5 	bl	ce04 <bt_hci_cmd_send_sync>
	if (err) {
    e09a:	b948      	cbnz	r0, e0b0 <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
    e09c:	2206      	movs	r2, #6
    e09e:	4629      	mov	r1, r5
    e0a0:	4805      	ldr	r0, [pc, #20]	; (e0b8 <set_random_address+0x50>)
    e0a2:	f00a f884 	bl	181ae <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    e0a6:	2201      	movs	r2, #1
    e0a8:	4b04      	ldr	r3, [pc, #16]	; (e0bc <set_random_address+0x54>)
    e0aa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		return 0;
    e0ae:	2000      	movs	r0, #0
}
    e0b0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    e0b2:	f06f 0068 	mvn.w	r0, #104	; 0x68
    e0b6:	e7fb      	b.n	e0b0 <set_random_address+0x48>
    e0b8:	20008069 	.word	0x20008069
    e0bc:	20008000 	.word	0x20008000

0000e0c0 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    e0c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e0c2:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    e0c4:	460d      	mov	r5, r1
    e0c6:	b179      	cbz	r1, e0e8 <id_create.constprop.0+0x28>
    e0c8:	4628      	mov	r0, r5
    e0ca:	4914      	ldr	r1, [pc, #80]	; (e11c <id_create.constprop.0+0x5c>)
    e0cc:	f00a f9b8 	bl	18440 <bt_addr_le_eq>
    e0d0:	b950      	cbnz	r0, e0e8 <id_create.constprop.0+0x28>
	memcpy(dst, src, sizeof(*dst));
    e0d2:	2207      	movs	r2, #7
    e0d4:	4629      	mov	r1, r5
    e0d6:	4812      	ldr	r0, [pc, #72]	; (e120 <id_create.constprop.0+0x60>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    e0d8:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    e0dc:	4420      	add	r0, r4
    e0de:	f00a f866 	bl	181ae <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
    e0e2:	2000      	movs	r0, #0
}
    e0e4:	b003      	add	sp, #12
    e0e6:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
    e0e8:	4668      	mov	r0, sp
    e0ea:	f00a f8c0 	bl	1826e <bt_addr_le_create_static>
			if (err) {
    e0ee:	2800      	cmp	r0, #0
    e0f0:	d1f8      	bne.n	e0e4 <id_create.constprop.0+0x24>
		} while (id_find(&new_addr) >= 0);
    e0f2:	4668      	mov	r0, sp
    e0f4:	f7ff ffa0 	bl	e038 <id_find>
    e0f8:	2800      	cmp	r0, #0
    e0fa:	daf5      	bge.n	e0e8 <id_create.constprop.0+0x28>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    e0fc:	4b08      	ldr	r3, [pc, #32]	; (e120 <id_create.constprop.0+0x60>)
    e0fe:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    e102:	441c      	add	r4, r3
    e104:	2207      	movs	r2, #7
    e106:	4669      	mov	r1, sp
    e108:	4620      	mov	r0, r4
    e10a:	f00a f850 	bl	181ae <memcpy>
		if (addr) {
    e10e:	2d00      	cmp	r5, #0
    e110:	d0e7      	beq.n	e0e2 <id_create.constprop.0+0x22>
    e112:	2207      	movs	r2, #7
    e114:	4621      	mov	r1, r4
    e116:	4628      	mov	r0, r5
    e118:	e7e1      	b.n	e0de <id_create.constprop.0+0x1e>
    e11a:	bf00      	nop
    e11c:	0001cc7b 	.word	0x0001cc7b
    e120:	20008000 	.word	0x20008000

0000e124 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    e124:	b570      	push	{r4, r5, r6, lr}
    e126:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    e128:	4604      	mov	r4, r0
{
    e12a:	b086      	sub	sp, #24
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    e12c:	b920      	cbnz	r0, e138 <bt_id_create+0x14>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    e12e:	b31d      	cbz	r5, e178 <bt_id_create+0x54>
			return -EINVAL;
    e130:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
    e134:	b006      	add	sp, #24
    e136:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    e138:	4920      	ldr	r1, [pc, #128]	; (e1bc <bt_id_create+0x98>)
    e13a:	f00a f981 	bl	18440 <bt_addr_le_eq>
    e13e:	2800      	cmp	r0, #0
    e140:	d1f5      	bne.n	e12e <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    e142:	7823      	ldrb	r3, [r4, #0]
    e144:	2b01      	cmp	r3, #1
    e146:	d104      	bne.n	e152 <bt_id_create+0x2e>
    e148:	79a3      	ldrb	r3, [r4, #6]
    e14a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e14e:	2bc0      	cmp	r3, #192	; 0xc0
    e150:	d00a      	beq.n	e168 <bt_id_create+0x44>
			LOG_ERR("Only static random identity address supported");
    e152:	4b1b      	ldr	r3, [pc, #108]	; (e1c0 <bt_id_create+0x9c>)
    e154:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e158:	9305      	str	r3, [sp, #20]
    e15a:	2302      	movs	r3, #2
    e15c:	4819      	ldr	r0, [pc, #100]	; (e1c4 <bt_id_create+0xa0>)
    e15e:	aa04      	add	r2, sp, #16
    e160:	9304      	str	r3, [sp, #16]
    e162:	f00a f975 	bl	18450 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
    e166:	e7e3      	b.n	e130 <bt_id_create+0xc>
		if (id_find(addr) >= 0) {
    e168:	4620      	mov	r0, r4
    e16a:	f7ff ff65 	bl	e038 <id_find>
    e16e:	2800      	cmp	r0, #0
    e170:	dbdd      	blt.n	e12e <bt_id_create+0xa>
			return -EALREADY;
    e172:	f06f 0077 	mvn.w	r0, #119	; 0x77
    e176:	e7dd      	b.n	e134 <bt_id_create+0x10>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    e178:	4d13      	ldr	r5, [pc, #76]	; (e1c8 <bt_id_create+0xa4>)
    e17a:	79eb      	ldrb	r3, [r5, #7]
    e17c:	2b01      	cmp	r3, #1
    e17e:	d01a      	beq.n	e1b6 <bt_id_create+0x92>
    e180:	f105 03d4 	add.w	r3, r5, #212	; 0xd4
    e184:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    e188:	07db      	lsls	r3, r3, #31
    e18a:	d50b      	bpl.n	e1a4 <bt_id_create+0x80>
	new_id = bt_dev.id_count;
    e18c:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
    e18e:	4621      	mov	r1, r4
    e190:	4630      	mov	r0, r6
    e192:	f7ff ff95 	bl	e0c0 <id_create.constprop.0>
	if (err) {
    e196:	2800      	cmp	r0, #0
    e198:	d1cc      	bne.n	e134 <bt_id_create+0x10>
		bt_dev.id_count++;
    e19a:	79eb      	ldrb	r3, [r5, #7]
	new_id = bt_dev.id_count;
    e19c:	4630      	mov	r0, r6
		bt_dev.id_count++;
    e19e:	3301      	adds	r3, #1
    e1a0:	71eb      	strb	r3, [r5, #7]
	return new_id;
    e1a2:	e7c7      	b.n	e134 <bt_id_create+0x10>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
    e1a4:	2c00      	cmp	r4, #0
    e1a6:	d0c3      	beq.n	e130 <bt_id_create+0xc>
    e1a8:	4620      	mov	r0, r4
    e1aa:	4904      	ldr	r1, [pc, #16]	; (e1bc <bt_id_create+0x98>)
    e1ac:	f00a f948 	bl	18440 <bt_addr_le_eq>
    e1b0:	2800      	cmp	r0, #0
    e1b2:	d0eb      	beq.n	e18c <bt_id_create+0x68>
    e1b4:	e7bc      	b.n	e130 <bt_id_create+0xc>
		return -ENOMEM;
    e1b6:	f06f 000b 	mvn.w	r0, #11
    e1ba:	e7bb      	b.n	e134 <bt_id_create+0x10>
    e1bc:	0001cc7b 	.word	0x0001cc7b
    e1c0:	0001d4f8 	.word	0x0001d4f8
    e1c4:	0001b8b0 	.word	0x0001b8b0
    e1c8:	20008000 	.word	0x20008000

0000e1cc <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    e1cc:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
    e1ce:	4604      	mov	r4, r0
{
    e1d0:	b088      	sub	sp, #32
	CHECKIF(addr == NULL) {
    e1d2:	b960      	cbnz	r0, e1ee <bt_id_read_public_addr+0x22>
		LOG_WRN("Invalid input parameters");
    e1d4:	4b1a      	ldr	r3, [pc, #104]	; (e240 <bt_id_read_public_addr+0x74>)
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
    e1d6:	9307      	str	r3, [sp, #28]
    e1d8:	2302      	movs	r3, #2
    e1da:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    e1de:	4819      	ldr	r0, [pc, #100]	; (e244 <bt_id_read_public_addr+0x78>)
    e1e0:	aa06      	add	r2, sp, #24
    e1e2:	9306      	str	r3, [sp, #24]
    e1e4:	f00a f934 	bl	18450 <z_log_msg_static_create.constprop.0>
		return 0U;
    e1e8:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    e1ea:	b008      	add	sp, #32
    e1ec:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    e1ee:	2100      	movs	r1, #0
    e1f0:	f241 0009 	movw	r0, #4105	; 0x1009
    e1f4:	aa01      	add	r2, sp, #4
    e1f6:	f7fe fe05 	bl	ce04 <bt_hci_cmd_send_sync>
	if (err) {
    e1fa:	4606      	mov	r6, r0
    e1fc:	b108      	cbz	r0, e202 <bt_id_read_public_addr+0x36>
		LOG_WRN("Failed to read public address");
    e1fe:	4b12      	ldr	r3, [pc, #72]	; (e248 <bt_id_read_public_addr+0x7c>)
    e200:	e7e9      	b.n	e1d6 <bt_id_read_public_addr+0xa>
	rp = (void *)rsp->data;
    e202:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
    e204:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    e206:	68dd      	ldr	r5, [r3, #12]
    e208:	4910      	ldr	r1, [pc, #64]	; (e24c <bt_id_read_public_addr+0x80>)
    e20a:	3501      	adds	r5, #1
    e20c:	4628      	mov	r0, r5
    e20e:	f009 ffbe 	bl	1818e <memcmp>
    e212:	b918      	cbnz	r0, e21c <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
    e214:	9801      	ldr	r0, [sp, #4]
    e216:	f003 fcad 	bl	11b74 <net_buf_unref>
		return 0U;
    e21a:	e7e5      	b.n	e1e8 <bt_id_read_public_addr+0x1c>
    e21c:	2206      	movs	r2, #6
    e21e:	4628      	mov	r0, r5
    e220:	490b      	ldr	r1, [pc, #44]	; (e250 <bt_id_read_public_addr+0x84>)
    e222:	f009 ffb4 	bl	1818e <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    e226:	2800      	cmp	r0, #0
    e228:	d0f4      	beq.n	e214 <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
    e22a:	2206      	movs	r2, #6
    e22c:	4629      	mov	r1, r5
    e22e:	1c60      	adds	r0, r4, #1
    e230:	f009 ffbd 	bl	181ae <memcpy>
	net_buf_unref(rsp);
    e234:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    e236:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
    e238:	f003 fc9c 	bl	11b74 <net_buf_unref>
	return 1U;
    e23c:	2001      	movs	r0, #1
    e23e:	e7d4      	b.n	e1ea <bt_id_read_public_addr+0x1e>
    e240:	0001d526 	.word	0x0001d526
    e244:	0001b8b0 	.word	0x0001b8b0
    e248:	0001d53f 	.word	0x0001d53f
    e24c:	0001cc88 	.word	0x0001cc88
    e250:	0001cc82 	.word	0x0001cc82

0000e254 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    e254:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    e256:	4668      	mov	r0, sp
    e258:	f7ff ffb8 	bl	e1cc <bt_id_read_public_addr>
    e25c:	4b04      	ldr	r3, [pc, #16]	; (e270 <bt_setup_public_id_addr+0x1c>)
    e25e:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    e260:	b118      	cbz	r0, e26a <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
    e262:	4669      	mov	r1, sp
    e264:	2000      	movs	r0, #0
    e266:	f7ff ff2b 	bl	e0c0 <id_create.constprop.0>
}
    e26a:	b003      	add	sp, #12
    e26c:	f85d fb04 	ldr.w	pc, [sp], #4
    e270:	20008000 	.word	0x20008000

0000e274 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    e274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    e278:	4b22      	ldr	r3, [pc, #136]	; (e304 <bt_read_static_addr+0x90>)
{
    e27a:	4607      	mov	r7, r0
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    e27c:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
{
    e280:	4688      	mov	r8, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    e282:	07db      	lsls	r3, r3, #31
{
    e284:	b088      	sub	sp, #32
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    e286:	d40e      	bmi.n	e2a6 <bt_read_static_addr+0x32>
		LOG_WRN("Read Static Addresses command not available");
    e288:	4b1f      	ldr	r3, [pc, #124]	; (e308 <bt_read_static_addr+0x94>)
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
    e28a:	9307      	str	r3, [sp, #28]
		return 0;
    e28c:	2500      	movs	r5, #0
		LOG_WRN("Failed to read static addresses");
    e28e:	2302      	movs	r3, #2
    e290:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    e294:	481d      	ldr	r0, [pc, #116]	; (e30c <bt_read_static_addr+0x98>)
    e296:	aa06      	add	r2, sp, #24
    e298:	9306      	str	r3, [sp, #24]
    e29a:	f00a f8d9 	bl	18450 <z_log_msg_static_create.constprop.0>
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
    e29e:	4628      	mov	r0, r5
    e2a0:	b008      	add	sp, #32
    e2a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    e2a6:	2100      	movs	r1, #0
    e2a8:	f64f 4009 	movw	r0, #64521	; 0xfc09
    e2ac:	aa01      	add	r2, sp, #4
    e2ae:	f7fe fda9 	bl	ce04 <bt_hci_cmd_send_sync>
	if (err) {
    e2b2:	4604      	mov	r4, r0
    e2b4:	b108      	cbz	r0, e2ba <bt_read_static_addr+0x46>
		LOG_WRN("Failed to read static addresses");
    e2b6:	4b16      	ldr	r3, [pc, #88]	; (e310 <bt_read_static_addr+0x9c>)
    e2b8:	e7e7      	b.n	e28a <bt_read_static_addr+0x16>
	rp = (void *)rsp->data;
    e2ba:	9b01      	ldr	r3, [sp, #4]
    e2bc:	68de      	ldr	r6, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
    e2be:	7875      	ldrb	r5, [r6, #1]
    e2c0:	3602      	adds	r6, #2
    e2c2:	4545      	cmp	r5, r8
    e2c4:	bf28      	it	cs
    e2c6:	4645      	movcs	r5, r8
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
    e2c8:	f04f 0816 	mov.w	r8, #22
	for (i = 0; i < cnt; i++) {
    e2cc:	42a5      	cmp	r5, r4
    e2ce:	dc0f      	bgt.n	e2f0 <bt_read_static_addr+0x7c>
	net_buf_unref(rsp);
    e2d0:	9801      	ldr	r0, [sp, #4]
    e2d2:	f003 fc4f 	bl	11b74 <net_buf_unref>
	if (!cnt) {
    e2d6:	2d00      	cmp	r5, #0
    e2d8:	d1e1      	bne.n	e29e <bt_read_static_addr+0x2a>
		LOG_WRN("No static addresses stored in controller");
    e2da:	4b0e      	ldr	r3, [pc, #56]	; (e314 <bt_read_static_addr+0xa0>)
    e2dc:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    e2e0:	9307      	str	r3, [sp, #28]
    e2e2:	2302      	movs	r3, #2
    e2e4:	4809      	ldr	r0, [pc, #36]	; (e30c <bt_read_static_addr+0x98>)
    e2e6:	aa06      	add	r2, sp, #24
    e2e8:	9306      	str	r3, [sp, #24]
    e2ea:	f00a f8b1 	bl	18450 <z_log_msg_static_create.constprop.0>
    e2ee:	e7d6      	b.n	e29e <bt_read_static_addr+0x2a>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
    e2f0:	4631      	mov	r1, r6
    e2f2:	fb08 7004 	mla	r0, r8, r4, r7
    e2f6:	2216      	movs	r2, #22
    e2f8:	f009 ff59 	bl	181ae <memcpy>
	for (i = 0; i < cnt; i++) {
    e2fc:	3401      	adds	r4, #1
    e2fe:	3616      	adds	r6, #22
    e300:	e7e4      	b.n	e2cc <bt_read_static_addr+0x58>
    e302:	bf00      	nop
    e304:	20008000 	.word	0x20008000
    e308:	0001d55d 	.word	0x0001d55d
    e30c:	0001b8b0 	.word	0x0001b8b0
    e310:	0001d589 	.word	0x0001d589
    e314:	0001d5a9 	.word	0x0001d5a9

0000e318 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    e318:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    e31a:	4e15      	ldr	r6, [pc, #84]	; (e370 <bt_setup_random_id_addr+0x58>)
{
    e31c:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    e31e:	79f4      	ldrb	r4, [r6, #7]
    e320:	b92c      	cbnz	r4, e32e <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    e322:	2101      	movs	r1, #1
    e324:	a802      	add	r0, sp, #8
    e326:	f7ff ffa5 	bl	e274 <bt_read_static_addr>
    e32a:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
    e32c:	b9c8      	cbnz	r0, e362 <bt_setup_random_id_addr+0x4a>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
    e32e:	2100      	movs	r1, #0
    e330:	4608      	mov	r0, r1
}
    e332:	b009      	add	sp, #36	; 0x24
    e334:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
    e338:	f7ff bef4 	b.w	e124 <bt_id_create>
    e33c:	ab02      	add	r3, sp, #8
    e33e:	fb07 3105 	mla	r1, r7, r5, r3
    e342:	2206      	movs	r2, #6
    e344:	f10d 0001 	add.w	r0, sp, #1
    e348:	f009 ff31 	bl	181ae <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    e34c:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
    e34e:	4669      	mov	r1, sp
    e350:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
    e352:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    e356:	f7ff feb3 	bl	e0c0 <id_create.constprop.0>
				if (err) {
    e35a:	3401      	adds	r4, #1
    e35c:	b110      	cbz	r0, e364 <bt_setup_random_id_addr+0x4c>
}
    e35e:	b009      	add	sp, #36	; 0x24
    e360:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    e362:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    e364:	79f3      	ldrb	r3, [r6, #7]
    e366:	b2e5      	uxtb	r5, r4
    e368:	42ab      	cmp	r3, r5
    e36a:	d8e7      	bhi.n	e33c <bt_setup_random_id_addr+0x24>
			return 0;
    e36c:	2000      	movs	r0, #0
    e36e:	e7f6      	b.n	e35e <bt_setup_random_id_addr+0x46>
    e370:	20008000 	.word	0x20008000

0000e374 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
    e374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e378:	4690      	mov	r8, r2
    e37a:	460e      	mov	r6, r1
    e37c:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
    e37e:	4602      	mov	r2, r0
    e380:	2800      	cmp	r0, #0
    e382:	d04b      	beq.n	e41c <bt_id_set_adv_own_addr+0xa8>
    e384:	2b00      	cmp	r3, #0
    e386:	d049      	beq.n	e41c <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    e388:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
    e38a:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    e38c:	d531      	bpl.n	e3f2 <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    e38e:	4f25      	ldr	r7, [pc, #148]	; (e424 <bt_id_set_adv_own_addr+0xb0>)
    e390:	f1b8 0f00 	cmp.w	r8, #0
    e394:	d013      	beq.n	e3be <bt_id_set_adv_own_addr+0x4a>
    e396:	0688      	lsls	r0, r1, #26
    e398:	d40a      	bmi.n	e3b0 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    e39a:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    e39e:	5cfb      	ldrb	r3, [r7, r3]
    e3a0:	2b01      	cmp	r3, #1
    e3a2:	d015      	beq.n	e3d0 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
    e3a4:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    e3a6:	06b2      	lsls	r2, r6, #26
    e3a8:	d50f      	bpl.n	e3ca <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    e3aa:	f043 0302 	orr.w	r3, r3, #2
    e3ae:	e00b      	b.n	e3c8 <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    e3b0:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
    e3b4:	0659      	lsls	r1, r3, #25
    e3b6:	d4f0      	bmi.n	e39a <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
    e3b8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    e3bc:	e006      	b.n	e3cc <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    e3be:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    e3c2:	5cfb      	ldrb	r3, [r7, r3]
    e3c4:	2b01      	cmp	r3, #1
    e3c6:	d003      	beq.n	e3d0 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
    e3c8:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
    e3ca:	2000      	movs	r0, #0
}
    e3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    e3d0:	2107      	movs	r1, #7
    e3d2:	fb01 7104 	mla	r1, r1, r4, r7
    e3d6:	4610      	mov	r0, r2
    e3d8:	3101      	adds	r1, #1
    e3da:	f00a f841 	bl	18460 <bt_id_set_adv_random_addr>
				if (err) {
    e3de:	2800      	cmp	r0, #0
    e3e0:	d1f4      	bne.n	e3cc <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
    e3e2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    e3e6:	5d3b      	ldrb	r3, [r7, r4]
    e3e8:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    e3ea:	f1b8 0f00 	cmp.w	r8, #0
    e3ee:	d0ec      	beq.n	e3ca <bt_id_set_adv_own_addr+0x56>
    e3f0:	e7d9      	b.n	e3a6 <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    e3f2:	074b      	lsls	r3, r1, #29
    e3f4:	d50e      	bpl.n	e414 <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    e3f6:	4e0b      	ldr	r6, [pc, #44]	; (e424 <bt_id_set_adv_own_addr+0xb0>)
    e3f8:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
    e3fc:	5df3      	ldrb	r3, [r6, r7]
    e3fe:	2b01      	cmp	r3, #1
    e400:	d1e2      	bne.n	e3c8 <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    e402:	2107      	movs	r1, #7
    e404:	fb11 3104 	smlabb	r1, r1, r4, r3
    e408:	4431      	add	r1, r6
    e40a:	f00a f829 	bl	18460 <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
    e40e:	5df3      	ldrb	r3, [r6, r7]
    e410:	702b      	strb	r3, [r5, #0]
		if (err) {
    e412:	e7db      	b.n	e3cc <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
    e414:	f00a f82c 	bl	18470 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    e418:	2301      	movs	r3, #1
    e41a:	e7f9      	b.n	e410 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
    e41c:	f06f 0015 	mvn.w	r0, #21
    e420:	e7d4      	b.n	e3cc <bt_id_set_adv_own_addr+0x58>
    e422:	bf00      	nop
    e424:	20008000 	.word	0x20008000

0000e428 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    e428:	b530      	push	{r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    e42a:	4d13      	ldr	r5, [pc, #76]	; (e478 <bt_id_init+0x50>)
{
    e42c:	b087      	sub	sp, #28
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    e42e:	79eb      	ldrb	r3, [r5, #7]
    e430:	b11b      	cbz	r3, e43a <bt_id_init+0x12>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    e432:	2400      	movs	r4, #0
}
    e434:	4620      	mov	r0, r4
    e436:	b007      	add	sp, #28
    e438:	bd30      	pop	{r4, r5, pc}
		err = bt_setup_public_id_addr();
    e43a:	f7ff ff0b 	bl	e254 <bt_setup_public_id_addr>
		if (err) {
    e43e:	4604      	mov	r4, r0
    e440:	b150      	cbz	r0, e458 <bt_id_init+0x30>
			LOG_ERR("Unable to set identity address");
    e442:	4b0e      	ldr	r3, [pc, #56]	; (e47c <bt_id_init+0x54>)
			LOG_ERR("Unable to set random address");
    e444:	9305      	str	r3, [sp, #20]
    e446:	2302      	movs	r3, #2
    e448:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e44c:	480c      	ldr	r0, [pc, #48]	; (e480 <bt_id_init+0x58>)
    e44e:	aa04      	add	r2, sp, #16
    e450:	9304      	str	r3, [sp, #16]
    e452:	f009 fffd 	bl	18450 <z_log_msg_static_create.constprop.0>
			return err;
    e456:	e7ed      	b.n	e434 <bt_id_init+0xc>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    e458:	79eb      	ldrb	r3, [r5, #7]
    e45a:	2b00      	cmp	r3, #0
    e45c:	d1e9      	bne.n	e432 <bt_id_init+0xa>
		err = bt_setup_random_id_addr();
    e45e:	f7ff ff5b 	bl	e318 <bt_setup_random_id_addr>
		if (err) {
    e462:	4604      	mov	r4, r0
    e464:	2800      	cmp	r0, #0
    e466:	d1ec      	bne.n	e442 <bt_id_init+0x1a>
		err = set_random_address(&bt_dev.id_addr[0].a);
    e468:	1c68      	adds	r0, r5, #1
    e46a:	f7ff fdfd 	bl	e068 <set_random_address>
		if (err) {
    e46e:	4604      	mov	r4, r0
    e470:	2800      	cmp	r0, #0
    e472:	d0df      	beq.n	e434 <bt_id_init+0xc>
			LOG_ERR("Unable to set random address");
    e474:	4b03      	ldr	r3, [pc, #12]	; (e484 <bt_id_init+0x5c>)
    e476:	e7e5      	b.n	e444 <bt_id_init+0x1c>
    e478:	20008000 	.word	0x20008000
    e47c:	0001d5d2 	.word	0x0001d5d2
    e480:	0001b8b0 	.word	0x0001b8b0
    e484:	0001d5f1 	.word	0x0001d5f1

0000e488 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
    e488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e48c:	460c      	mov	r4, r1
    e48e:	b089      	sub	sp, #36	; 0x24
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    e490:	2120      	movs	r1, #32
{
    e492:	4692      	mov	sl, r2
    e494:	9000      	str	r0, [sp, #0]
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    e496:	f7fe fc7b 	bl	cd90 <bt_hci_cmd_create>
	if (!buf) {
    e49a:	4605      	mov	r5, r0
    e49c:	2800      	cmp	r0, #0
    e49e:	d05b      	beq.n	e558 <hci_set_ad+0xd0>
	return net_buf_simple_add(&buf->b, len);
    e4a0:	2120      	movs	r1, #32
    e4a2:	300c      	adds	r0, #12
    e4a4:	f00b f9b5 	bl	19812 <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
    e4a8:	2220      	movs	r2, #32
    e4aa:	4681      	mov	r9, r0
    e4ac:	2100      	movs	r1, #0
    e4ae:	f009 fe89 	bl	181c4 <memset>
	uint8_t set_data_len = 0;
    e4b2:	2600      	movs	r6, #0

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    e4b4:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    e4b8:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
		for (size_t j = 0; j < ad[i].len; j++) {
    e4bc:	2300      	movs	r3, #0
    e4be:	f8d4 8000 	ldr.w	r8, [r4]
    e4c2:	6862      	ldr	r2, [r4, #4]
    e4c4:	4293      	cmp	r3, r2
    e4c6:	d30c      	bcc.n	e4e2 <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
    e4c8:	3408      	adds	r4, #8
    e4ca:	45a2      	cmp	sl, r4
    e4cc:	d1f6      	bne.n	e4bc <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    e4ce:	2200      	movs	r2, #0
    e4d0:	4629      	mov	r1, r5
    e4d2:	9800      	ldr	r0, [sp, #0]
	*data_len = set_data_len;
    e4d4:	f889 6000 	strb.w	r6, [r9]
}
    e4d8:	b009      	add	sp, #36	; 0x24
    e4da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    e4de:	f7fe bc91 	b.w	ce04 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    e4e2:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    e4e6:	1cb0      	adds	r0, r6, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
    e4e8:	1811      	adds	r1, r2, r0
    e4ea:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
    e4ec:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    e4f0:	d91b      	bls.n	e52a <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    e4f2:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    e4f6:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
    e4fa:	d101      	bne.n	e500 <hci_set_ad+0x78>
    e4fc:	2a00      	cmp	r2, #0
    e4fe:	dc12      	bgt.n	e526 <hci_set_ad+0x9e>
					LOG_ERR("Too big advertising data");
    e500:	4b17      	ldr	r3, [pc, #92]	; (e560 <hci_set_ad+0xd8>)
    e502:	9307      	str	r3, [sp, #28]
    e504:	2302      	movs	r3, #2
    e506:	9306      	str	r3, [sp, #24]
    e508:	2300      	movs	r3, #0
    e50a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e50e:	4815      	ldr	r0, [pc, #84]	; (e564 <hci_set_ad+0xdc>)
    e510:	aa06      	add	r2, sp, #24
    e512:	f7fc f9f3 	bl	a8fc <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
    e516:	4628      	mov	r0, r5
    e518:	f003 fb2c 	bl	11b74 <net_buf_unref>
					return -EINVAL;
    e51c:	f06f 0015 	mvn.w	r0, #21
}
    e520:	b009      	add	sp, #36	; 0x24
    e522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    e526:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    e52a:	b2d7      	uxtb	r7, r2
    e52c:	1c79      	adds	r1, r7, #1
    e52e:	f80b 1006 	strb.w	r1, [fp, r6]
    e532:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
    e534:	b2c9      	uxtb	r1, r1
    e536:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    e53a:	f8d8 1004 	ldr.w	r1, [r8, #4]
    e53e:	fa5b f080 	uxtab	r0, fp, r0
    e542:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    e544:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    e546:	f009 fe32 	bl	181ae <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    e54a:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    e54c:	4437      	add	r7, r6
    e54e:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
    e550:	3301      	adds	r3, #1
    e552:	f108 0808 	add.w	r8, r8, #8
    e556:	e7b4      	b.n	e4c2 <hci_set_ad+0x3a>
		return -ENOBUFS;
    e558:	f06f 0068 	mvn.w	r0, #104	; 0x68
    e55c:	e7e0      	b.n	e520 <hci_set_ad+0x98>
    e55e:	bf00      	nop
    e560:	0001d614 	.word	0x0001d614
    e564:	0001b870 	.word	0x0001b870

0000e568 <adv_is_directed>:
	return memcmp(a, b, sizeof(*a));
    e568:	2207      	movs	r2, #7

	return channel_map;
}

static inline bool adv_is_directed(const struct bt_le_ext_adv *adv)
{
    e56a:	b508      	push	{r3, lr}
    e56c:	4903      	ldr	r1, [pc, #12]	; (e57c <adv_is_directed+0x14>)
    e56e:	3009      	adds	r0, #9
    e570:	f009 fe0d 	bl	1818e <memcmp>
	/* The advertiser is assumed to be directed when the peer address has
	 * been set.
	 */
	return !bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY);
}
    e574:	3800      	subs	r0, #0
    e576:	bf18      	it	ne
    e578:	2001      	movne	r0, #1
    e57a:	bd08      	pop	{r3, pc}
    e57c:	0001cc7b 	.word	0x0001cc7b

0000e580 <le_adv_start_add_conn>:

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    e580:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
    e582:	4b15      	ldr	r3, [pc, #84]	; (e5d8 <le_adv_start_add_conn+0x58>)
    e584:	7802      	ldrb	r2, [r0, #0]
{
    e586:	4604      	mov	r4, r0
	bt_dev.adv_conn_id = adv->id;
    e588:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
{
    e58c:	460d      	mov	r5, r1

	if (!adv_is_directed(adv)) {
    e58e:	f7ff ffeb 	bl	e568 <adv_is_directed>
    e592:	4603      	mov	r3, r0
    e594:	7820      	ldrb	r0, [r4, #0]
    e596:	b96b      	cbnz	r3, e5b4 <le_adv_start_add_conn+0x34>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    e598:	4910      	ldr	r1, [pc, #64]	; (e5dc <le_adv_start_add_conn+0x5c>)
    e59a:	f000 ffb7 	bl	f50c <bt_conn_add_le>
		if (!conn) {
    e59e:	4604      	mov	r4, r0
    e5a0:	b910      	cbnz	r0, e5a8 <le_adv_start_add_conn+0x28>
			return -ENOMEM;
    e5a2:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
    e5a6:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
    e5a8:	2104      	movs	r1, #4
    e5aa:	f000 fe09 	bl	f1c0 <bt_conn_set_state>
		return 0;
    e5ae:	2000      	movs	r0, #0
		*out_conn = conn;
    e5b0:	602c      	str	r4, [r5, #0]
    e5b2:	e7f8      	b.n	e5a6 <le_adv_start_add_conn+0x26>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    e5b4:	f104 0609 	add.w	r6, r4, #9
    e5b8:	4631      	mov	r1, r6
    e5ba:	f000 ffdb 	bl	f574 <bt_conn_exists_le>
    e5be:	b940      	cbnz	r0, e5d2 <le_adv_start_add_conn+0x52>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    e5c0:	7820      	ldrb	r0, [r4, #0]
    e5c2:	4631      	mov	r1, r6
    e5c4:	f000 ffa2 	bl	f50c <bt_conn_add_le>
	if (!conn) {
    e5c8:	4604      	mov	r4, r0
    e5ca:	2800      	cmp	r0, #0
    e5cc:	d0e9      	beq.n	e5a2 <le_adv_start_add_conn+0x22>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
    e5ce:	2105      	movs	r1, #5
    e5d0:	e7eb      	b.n	e5aa <le_adv_start_add_conn+0x2a>
		return -EINVAL;
    e5d2:	f06f 0015 	mvn.w	r0, #21
    e5d6:	e7e6      	b.n	e5a6 <le_adv_start_add_conn+0x26>
    e5d8:	20008000 	.word	0x20008000
    e5dc:	0001cc74 	.word	0x0001cc74

0000e5e0 <valid_adv_param>:
{
    e5e0:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    e5e2:	6843      	ldr	r3, [r0, #4]
{
    e5e4:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    e5e6:	0558      	lsls	r0, r3, #21
    e5e8:	d501      	bpl.n	e5ee <valid_adv_param+0xe>
		return false;
    e5ea:	2000      	movs	r0, #0
}
    e5ec:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    e5ee:	6922      	ldr	r2, [r4, #16]
    e5f0:	b10a      	cbz	r2, e5f6 <valid_adv_param+0x16>
    e5f2:	07d9      	lsls	r1, r3, #31
    e5f4:	d5f9      	bpl.n	e5ea <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    e5f6:	4d19      	ldr	r5, [pc, #100]	; (e65c <valid_adv_param+0x7c>)
    e5f8:	7820      	ldrb	r0, [r4, #0]
    e5fa:	79eb      	ldrb	r3, [r5, #7]
    e5fc:	4283      	cmp	r3, r0
    e5fe:	d9f4      	bls.n	e5ea <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    e600:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    e604:	2207      	movs	r2, #7
    e606:	4916      	ldr	r1, [pc, #88]	; (e660 <valid_adv_param+0x80>)
    e608:	4428      	add	r0, r5
    e60a:	f009 fdc0 	bl	1818e <memcmp>
	if (param->id >= bt_dev.id_count ||
    e60e:	2800      	cmp	r0, #0
    e610:	d0eb      	beq.n	e5ea <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    e612:	6860      	ldr	r0, [r4, #4]
    e614:	07c2      	lsls	r2, r0, #31
    e616:	d406      	bmi.n	e626 <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    e618:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
    e61c:	2b08      	cmp	r3, #8
    e61e:	d802      	bhi.n	e626 <valid_adv_param+0x46>
    e620:	68a3      	ldr	r3, [r4, #8]
    e622:	2b9f      	cmp	r3, #159	; 0x9f
    e624:	d9e1      	bls.n	e5ea <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    e626:	f010 0f30 	tst.w	r0, #48	; 0x30
    e62a:	d002      	beq.n	e632 <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    e62c:	6923      	ldr	r3, [r4, #16]
    e62e:	2b00      	cmp	r3, #0
    e630:	d0db      	beq.n	e5ea <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    e632:	06c3      	lsls	r3, r0, #27
    e634:	d401      	bmi.n	e63a <valid_adv_param+0x5a>
    e636:	6923      	ldr	r3, [r4, #16]
    e638:	b943      	cbnz	r3, e64c <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
    e63a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    e63e:	429a      	cmp	r2, r3
    e640:	d8d3      	bhi.n	e5ea <valid_adv_param+0xa>
    e642:	2a1f      	cmp	r2, #31
    e644:	d9d1      	bls.n	e5ea <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    e646:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    e64a:	d8ce      	bhi.n	e5ea <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    e64c:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    e650:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    e654:	bf18      	it	ne
    e656:	2001      	movne	r0, #1
    e658:	e7c8      	b.n	e5ec <valid_adv_param+0xc>
    e65a:	bf00      	nop
    e65c:	20008000 	.word	0x20008000
    e660:	0001cc7b 	.word	0x0001cc7b

0000e664 <bt_le_adv_lookup_legacy>:
}
    e664:	4800      	ldr	r0, [pc, #0]	; (e668 <bt_le_adv_lookup_legacy+0x4>)
    e666:	4770      	bx	lr
    e668:	20008018 	.word	0x20008018

0000e66c <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    e66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e670:	b093      	sub	sp, #76	; 0x4c
    e672:	9305      	str	r3, [sp, #20]
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
    e674:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
    e676:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
    e67a:	4606      	mov	r6, r0
	bool dir_adv = (param->peer != NULL), scannable = false;
    e67c:	ebba 0403 	subs.w	r4, sl, r3
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    e680:	4892      	ldr	r0, [pc, #584]	; (e8cc <bt_le_adv_start_legacy+0x260>)
    e682:	bf18      	it	ne
    e684:	2401      	movne	r4, #1
	struct bt_conn *conn = NULL;
    e686:	9307      	str	r3, [sp, #28]
    e688:	f009 ff1c 	bl	184c4 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    e68c:	0747      	lsls	r7, r0, #29
{
    e68e:	460d      	mov	r5, r1
    e690:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    e692:	f140 8112 	bpl.w	e8ba <bt_le_adv_start_legacy+0x24e>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    e696:	4608      	mov	r0, r1
    e698:	f7ff ffa2 	bl	e5e0 <valid_adv_param>
    e69c:	b928      	cbnz	r0, e6aa <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
    e69e:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    e6a2:	4620      	mov	r0, r4
    e6a4:	b013      	add	sp, #76	; 0x4c
    e6a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
    e6aa:	4628      	mov	r0, r5
    e6ac:	f009 fef7 	bl	1849e <bt_id_adv_random_addr_check>
    e6b0:	4681      	mov	r9, r0
    e6b2:	2800      	cmp	r0, #0
    e6b4:	d0f3      	beq.n	e69e <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    e6b6:	f106 0810 	add.w	r8, r6, #16
    e6ba:	4640      	mov	r0, r8
    e6bc:	f009 ff02 	bl	184c4 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    e6c0:	f3c0 17c0 	ubfx	r7, r0, #7, #1
    e6c4:	0600      	lsls	r0, r0, #24
    e6c6:	f100 80fb 	bmi.w	e8c0 <bt_le_adv_start_legacy+0x254>
	(void)memset(&set_param, 0, sizeof(set_param));
    e6ca:	220f      	movs	r2, #15
    e6cc:	4639      	mov	r1, r7
    e6ce:	a808      	add	r0, sp, #32
    e6d0:	f009 fd78 	bl	181c4 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    e6d4:	68ab      	ldr	r3, [r5, #8]
	set_param.channel_map  = get_adv_channel_map(param->options);
    e6d6:	6868      	ldr	r0, [r5, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    e6d8:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    e6dc:	68eb      	ldr	r3, [r5, #12]
    e6de:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
    e6e2:	f009 fee0 	bl	184a6 <get_adv_channel_map>
	if (adv->id != param->id) {
    e6e6:	7832      	ldrb	r2, [r6, #0]
    e6e8:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
    e6ea:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
    e6ee:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
    e6f0:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
	if (adv->id != param->id) {
    e6f4:	d004      	beq.n	e700 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    e6f6:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    e6fa:	4874      	ldr	r0, [pc, #464]	; (e8cc <bt_le_adv_start_legacy+0x260>)
    e6fc:	f009 fee5 	bl	184ca <atomic_and>
	adv->id = param->id;
    e700:	782b      	ldrb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
    e702:	4a73      	ldr	r2, [pc, #460]	; (e8d0 <bt_le_adv_start_legacy+0x264>)
	adv->id = param->id;
    e704:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
    e706:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
    e70a:	4630      	mov	r0, r6
    e70c:	4622      	mov	r2, r4
    e70e:	6869      	ldr	r1, [r5, #4]
    e710:	f10d 0325 	add.w	r3, sp, #37	; 0x25
    e714:	f7ff fe2e 	bl	e374 <bt_id_set_adv_own_addr>
	if (err) {
    e718:	4604      	mov	r4, r0
    e71a:	2800      	cmp	r0, #0
    e71c:	d1c1      	bne.n	e6a2 <bt_le_adv_start_legacy+0x36>
	memcpy(dst, src, sizeof(*dst));
    e71e:	2207      	movs	r2, #7
		bt_addr_le_copy(&adv->target_addr, param->peer);
    e720:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
    e724:	f1ba 0f00 	cmp.w	sl, #0
    e728:	d013      	beq.n	e752 <bt_le_adv_start_legacy+0xe6>
    e72a:	6929      	ldr	r1, [r5, #16]
    e72c:	f009 fd3f 	bl	181ae <memcpy>
	name_type = get_adv_name_type_param(param);
    e730:	4628      	mov	r0, r5
    e732:	f009 ff5a 	bl	185ea <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    e736:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
    e738:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    e73a:	07d9      	lsls	r1, r3, #31
    e73c:	d416      	bmi.n	e76c <bt_le_adv_start_legacy+0x100>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
    e73e:	059b      	lsls	r3, r3, #22
    e740:	d403      	bmi.n	e74a <bt_le_adv_start_legacy+0xde>
    e742:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    e744:	b90b      	cbnz	r3, e74a <bt_le_adv_start_legacy+0xde>
    e746:	2f02      	cmp	r7, #2
    e748:	d15a      	bne.n	e800 <bt_le_adv_start_legacy+0x194>
		set_param.type = BT_HCI_ADV_SCAN_IND;
    e74a:	2302      	movs	r3, #2
    e74c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    e750:	e01a      	b.n	e788 <bt_le_adv_start_legacy+0x11c>
    e752:	4960      	ldr	r1, [pc, #384]	; (e8d4 <bt_le_adv_start_legacy+0x268>)
    e754:	f009 fd2b 	bl	181ae <memcpy>
	name_type = get_adv_name_type_param(param);
    e758:	4628      	mov	r0, r5
    e75a:	f009 ff46 	bl	185ea <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    e75e:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
    e760:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    e762:	07da      	lsls	r2, r3, #31
    e764:	d5eb      	bpl.n	e73e <bt_le_adv_start_legacy+0xd2>
			set_param.type = BT_HCI_ADV_IND;
    e766:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
    e76a:	e00d      	b.n	e788 <bt_le_adv_start_legacy+0x11c>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
    e76c:	f013 0f10 	tst.w	r3, #16
    e770:	bf0c      	ite	eq
    e772:	2301      	moveq	r3, #1
    e774:	2304      	movne	r3, #4
    e776:	2207      	movs	r2, #7
    e778:	6929      	ldr	r1, [r5, #16]
    e77a:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    e77e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bool dir_adv = (param->peer != NULL), scannable = false;
    e782:	46a1      	mov	r9, r4
    e784:	f009 fd13 	bl	181ae <memcpy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    e788:	210f      	movs	r1, #15
    e78a:	f242 0006 	movw	r0, #8198	; 0x2006
    e78e:	f7fe faff 	bl	cd90 <bt_hci_cmd_create>
	if (!buf) {
    e792:	4604      	mov	r4, r0
    e794:	2800      	cmp	r0, #0
    e796:	f000 8096 	beq.w	e8c6 <bt_le_adv_start_legacy+0x25a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    e79a:	220f      	movs	r2, #15
    e79c:	a908      	add	r1, sp, #32
    e79e:	300c      	adds	r0, #12
    e7a0:	f00b f83d 	bl	1981e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    e7a4:	4621      	mov	r1, r4
    e7a6:	2200      	movs	r2, #0
    e7a8:	f242 0006 	movw	r0, #8198	; 0x2006
    e7ac:	f7fe fb2a 	bl	ce04 <bt_hci_cmd_send_sync>
	if (err) {
    e7b0:	4604      	mov	r4, r0
    e7b2:	2800      	cmp	r0, #0
    e7b4:	f47f af75 	bne.w	e6a2 <bt_le_adv_start_legacy+0x36>
	if (!dir_adv) {
    e7b8:	f1ba 0f00 	cmp.w	sl, #0
    e7bc:	d026      	beq.n	e80c <bt_le_adv_start_legacy+0x1a0>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    e7be:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    e7c0:	07dc      	lsls	r4, r3, #31
    e7c2:	d431      	bmi.n	e828 <bt_le_adv_start_legacy+0x1bc>
	return bt_le_adv_set_enable_legacy(adv, enable);
    e7c4:	2101      	movs	r1, #1
    e7c6:	4630      	mov	r0, r6
    e7c8:	f009 ff1f 	bl	1860a <bt_le_adv_set_enable_legacy>
	if (err) {
    e7cc:	4604      	mov	r4, r0
    e7ce:	2800      	cmp	r0, #0
    e7d0:	d06b      	beq.n	e8aa <bt_le_adv_start_legacy+0x23e>
		LOG_ERR("Failed to start advertiser");
    e7d2:	4b41      	ldr	r3, [pc, #260]	; (e8d8 <bt_le_adv_start_legacy+0x26c>)
    e7d4:	9311      	str	r3, [sp, #68]	; 0x44
    e7d6:	2302      	movs	r3, #2
    e7d8:	9310      	str	r3, [sp, #64]	; 0x40
    e7da:	2300      	movs	r3, #0
    e7dc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e7e0:	483e      	ldr	r0, [pc, #248]	; (e8dc <bt_le_adv_start_legacy+0x270>)
    e7e2:	aa10      	add	r2, sp, #64	; 0x40
    e7e4:	f7fc f88a 	bl	a8fc <z_impl_z_log_msg_static_create>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    e7e8:	9d07      	ldr	r5, [sp, #28]
    e7ea:	2d00      	cmp	r5, #0
    e7ec:	f43f af59 	beq.w	e6a2 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    e7f0:	4628      	mov	r0, r5
    e7f2:	2100      	movs	r1, #0
    e7f4:	f000 fce4 	bl	f1c0 <bt_conn_set_state>
			bt_conn_unref(conn);
    e7f8:	4628      	mov	r0, r5
    e7fa:	f009 ff74 	bl	186e6 <bt_conn_unref>
    e7fe:	e750      	b.n	e6a2 <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    e800:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
    e802:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    e806:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    e80a:	e7bd      	b.n	e788 <bt_le_adv_start_legacy+0x11c>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    e80c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    e80e:	4659      	mov	r1, fp
    e810:	9300      	str	r3, [sp, #0]
    e812:	4630      	mov	r0, r6
    e814:	e9cd 9701 	strd	r9, r7, [sp, #4]
    e818:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    e81a:	9a05      	ldr	r2, [sp, #20]
    e81c:	f009 fe73 	bl	18506 <le_adv_update.constprop.0>
		if (err) {
    e820:	4604      	mov	r4, r0
    e822:	2800      	cmp	r0, #0
    e824:	d0cb      	beq.n	e7be <bt_le_adv_start_legacy+0x152>
    e826:	e73c      	b.n	e6a2 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
    e828:	4630      	mov	r0, r6
    e82a:	a907      	add	r1, sp, #28
    e82c:	f7ff fea8 	bl	e580 <le_adv_start_add_conn>
		if (err) {
    e830:	4604      	mov	r4, r0
    e832:	2800      	cmp	r0, #0
    e834:	d0c6      	beq.n	e7c4 <bt_le_adv_start_legacy+0x158>
			if (err == -ENOMEM && !dir_adv &&
    e836:	f110 0f0c 	cmn.w	r0, #12
    e83a:	f47f af32 	bne.w	e6a2 <bt_le_adv_start_legacy+0x36>
    e83e:	f1ba 0f00 	cmp.w	sl, #0
    e842:	f47f af2e 	bne.w	e6a2 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    e846:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
    e848:	0798      	lsls	r0, r3, #30
    e84a:	f53f af2a 	bmi.w	e6a2 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    e84e:	686c      	ldr	r4, [r5, #4]
    e850:	f084 0402 	eor.w	r4, r4, #2
    e854:	f3c4 0440 	ubfx	r4, r4, #1, #1
    e858:	f004 0201 	and.w	r2, r4, #1
    e85c:	210e      	movs	r1, #14
    e85e:	4640      	mov	r0, r8
    e860:	f009 fe3e 	bl	184e0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
    e864:	1e7b      	subs	r3, r7, #1
    e866:	425a      	negs	r2, r3
    e868:	415a      	adcs	r2, r3
    e86a:	2108      	movs	r1, #8
    e86c:	4640      	mov	r0, r8
    e86e:	f009 fe37 	bl	184e0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
    e872:	1eb9      	subs	r1, r7, #2
    e874:	424a      	negs	r2, r1
    e876:	414a      	adcs	r2, r1
    e878:	4640      	mov	r0, r8
    e87a:	2109      	movs	r1, #9
    e87c:	f009 fe30 	bl	184e0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    e880:	686a      	ldr	r2, [r5, #4]
    e882:	210a      	movs	r1, #10
    e884:	4640      	mov	r0, r8
    e886:	f002 0201 	and.w	r2, r2, #1
    e88a:	f009 fe29 	bl	184e0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    e88e:	464a      	mov	r2, r9
    e890:	210b      	movs	r1, #11
    e892:	4640      	mov	r0, r8
    e894:	f009 fe24 	bl	184e0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    e898:	686a      	ldr	r2, [r5, #4]
    e89a:	210d      	movs	r1, #13
    e89c:	4640      	mov	r0, r8
    e89e:	f3c2 0280 	ubfx	r2, r2, #2, #1
    e8a2:	f009 fe1d 	bl	184e0 <atomic_set_bit_to>
	return 0;
    e8a6:	2400      	movs	r4, #0
    e8a8:	e6fb      	b.n	e6a2 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    e8aa:	9807      	ldr	r0, [sp, #28]
    e8ac:	b108      	cbz	r0, e8b2 <bt_le_adv_start_legacy+0x246>
		bt_conn_unref(conn);
    e8ae:	f009 ff1a 	bl	186e6 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    e8b2:	f1ba 0f00 	cmp.w	sl, #0
    e8b6:	d1cf      	bne.n	e858 <bt_le_adv_start_legacy+0x1ec>
    e8b8:	e7c9      	b.n	e84e <bt_le_adv_start_legacy+0x1e2>
		return -EAGAIN;
    e8ba:	f06f 040a 	mvn.w	r4, #10
    e8be:	e6f0      	b.n	e6a2 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
    e8c0:	f06f 0477 	mvn.w	r4, #119	; 0x77
    e8c4:	e6ed      	b.n	e6a2 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
    e8c6:	f06f 0468 	mvn.w	r4, #104	; 0x68
    e8ca:	e6ea      	b.n	e6a2 <bt_le_adv_start_legacy+0x36>
    e8cc:	200080d4 	.word	0x200080d4
    e8d0:	20008000 	.word	0x20008000
    e8d4:	0001cc7b 	.word	0x0001cc7b
    e8d8:	0001d62d 	.word	0x0001d62d
    e8dc:	0001b870 	.word	0x0001b870

0000e8e0 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    e8e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e8e2:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    e8e4:	9a06      	ldr	r2, [sp, #24]
{
    e8e6:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    e8e8:	e9cd 3200 	strd	r3, r2, [sp]
    e8ec:	462b      	mov	r3, r5
    e8ee:	460a      	mov	r2, r1
    e8f0:	4601      	mov	r1, r0
    e8f2:	4811      	ldr	r0, [pc, #68]	; (e938 <bt_le_adv_start+0x58>)
    e8f4:	f7ff feba 	bl	e66c <bt_le_adv_start_legacy>
    e8f8:	4621      	mov	r1, r4
    e8fa:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
    e8fc:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
    e8fe:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
    e902:	429d      	cmp	r5, r3
    e904:	d102      	bne.n	e90c <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
    e906:	4630      	mov	r0, r6
    e908:	b002      	add	sp, #8
    e90a:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
    e90c:	880a      	ldrh	r2, [r1, #0]
    e90e:	4282      	cmp	r2, r0
    e910:	d104      	bne.n	e91c <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
    e912:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
    e914:	b112      	cbz	r2, e91c <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
    e916:	7812      	ldrb	r2, [r2, #0]
    e918:	07d2      	lsls	r2, r2, #31
    e91a:	d402      	bmi.n	e922 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
    e91c:	3301      	adds	r3, #1
    e91e:	3108      	adds	r1, #8
    e920:	e7ef      	b.n	e902 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
    e922:	4906      	ldr	r1, [pc, #24]	; (e93c <bt_le_adv_start+0x5c>)
    e924:	4806      	ldr	r0, [pc, #24]	; (e940 <bt_le_adv_start+0x60>)
    e926:	f00c f9fe 	bl	1ad26 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
    e92a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    e92e:	2300      	movs	r3, #0
    e930:	4803      	ldr	r0, [pc, #12]	; (e940 <bt_le_adv_start+0x60>)
    e932:	f007 f8bd 	bl	15ab0 <k_work_reschedule>
    e936:	e7e6      	b.n	e906 <bt_le_adv_start+0x26>
    e938:	20008018 	.word	0x20008018
    e93c:	0000e9bd 	.word	0x0000e9bd
    e940:	20008030 	.word	0x20008030

0000e944 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    e944:	b510      	push	{r4, lr}
	if (!adv) {
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
    e946:	4819      	ldr	r0, [pc, #100]	; (e9ac <bt_le_adv_stop+0x68>)
    e948:	f009 fe84 	bl	18654 <bt_le_lim_adv_cancel_timeout>
    e94c:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
    e950:	4817      	ldr	r0, [pc, #92]	; (e9b0 <bt_le_adv_stop+0x6c>)
    e952:	f009 fdba 	bl	184ca <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    e956:	4816      	ldr	r0, [pc, #88]	; (e9b0 <bt_le_adv_stop+0x6c>)
    e958:	f009 fdb4 	bl	184c4 <atomic_get>
    e95c:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    e95e:	061a      	lsls	r2, r3, #24
    e960:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    e964:	d521      	bpl.n	e9aa <bt_le_adv_stop+0x66>
    e966:	4812      	ldr	r0, [pc, #72]	; (e9b0 <bt_le_adv_stop+0x6c>)
    e968:	f009 fdac 	bl	184c4 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    e96c:	0543      	lsls	r3, r0, #21
    e96e:	d512      	bpl.n	e996 <bt_le_adv_stop+0x52>
	if (!adv_is_directed(adv)) {
    e970:	480e      	ldr	r0, [pc, #56]	; (e9ac <bt_le_adv_stop+0x68>)
    e972:	f7ff fdf9 	bl	e568 <adv_is_directed>
    e976:	4b0f      	ldr	r3, [pc, #60]	; (e9b4 <bt_le_adv_stop+0x70>)
    e978:	b998      	cbnz	r0, e9a2 <bt_le_adv_stop+0x5e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    e97a:	2204      	movs	r2, #4
    e97c:	490e      	ldr	r1, [pc, #56]	; (e9b8 <bt_le_adv_stop+0x74>)
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    e97e:	7e18      	ldrb	r0, [r3, #24]
    e980:	f000 fe28 	bl	f5d4 <bt_conn_lookup_state_le>
    e984:	4604      	mov	r4, r0
	if (conn) {
    e986:	b130      	cbz	r0, e996 <bt_le_adv_stop+0x52>
		conn->err = status;
    e988:	2100      	movs	r1, #0
    e98a:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    e98c:	f000 fc18 	bl	f1c0 <bt_conn_set_state>
		bt_conn_unref(conn);
    e990:	4620      	mov	r0, r4
    e992:	f009 fea8 	bl	186e6 <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    e996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
    e99a:	2100      	movs	r1, #0
    e99c:	4803      	ldr	r0, [pc, #12]	; (e9ac <bt_le_adv_stop+0x68>)
    e99e:	f009 be34 	b.w	1860a <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    e9a2:	2205      	movs	r2, #5
    e9a4:	f103 0121 	add.w	r1, r3, #33	; 0x21
    e9a8:	e7e9      	b.n	e97e <bt_le_adv_stop+0x3a>
}
    e9aa:	bd10      	pop	{r4, pc}
    e9ac:	20008018 	.word	0x20008018
    e9b0:	20008028 	.word	0x20008028
    e9b4:	20008000 	.word	0x20008000
    e9b8:	0001cc74 	.word	0x0001cc74

0000e9bc <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
    e9bc:	b598      	push	{r3, r4, r7, lr}
    e9be:	af00      	add	r7, sp, #0
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
    e9c0:	f7ff ffc0 	bl	e944 <bt_le_adv_stop>
#endif
	if (err) {
    e9c4:	b178      	cbz	r0, e9e6 <adv_timeout+0x2a>
		LOG_WRN("Failed to stop advertising: %d", err);
    e9c6:	466c      	mov	r4, sp
    e9c8:	b088      	sub	sp, #32
    e9ca:	466a      	mov	r2, sp
    e9cc:	4b07      	ldr	r3, [pc, #28]	; (e9ec <adv_timeout+0x30>)
    e9ce:	e9c2 3005 	strd	r3, r0, [r2, #20]
    e9d2:	2303      	movs	r3, #3
    e9d4:	f842 3f10 	str.w	r3, [r2, #16]!
    e9d8:	2300      	movs	r3, #0
    e9da:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    e9de:	4804      	ldr	r0, [pc, #16]	; (e9f0 <adv_timeout+0x34>)
    e9e0:	f7fb ff8c 	bl	a8fc <z_impl_z_log_msg_static_create>
    e9e4:	46a5      	mov	sp, r4
	}
}
    e9e6:	46bd      	mov	sp, r7
    e9e8:	bd98      	pop	{r3, r4, r7, pc}
    e9ea:	bf00      	nop
    e9ec:	0001d648 	.word	0x0001d648
    e9f0:	0001b870 	.word	0x0001b870

0000e9f4 <bt_le_adv_resume>:
{
    e9f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    e9f6:	b083      	sub	sp, #12
    e9f8:	4837      	ldr	r0, [pc, #220]	; (ead8 <bt_le_adv_resume+0xe4>)
    e9fa:	af00      	add	r7, sp, #0
    e9fc:	f009 fd62 	bl	184c4 <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    ea00:	f410 4f80 	tst.w	r0, #16384	; 0x4000
    ea04:	4c34      	ldr	r4, [pc, #208]	; (ead8 <bt_le_adv_resume+0xe4>)
    ea06:	d041      	beq.n	ea8c <bt_le_adv_resume+0x98>
    ea08:	4620      	mov	r0, r4
    ea0a:	f009 fd5b 	bl	184c4 <atomic_get>
    ea0e:	0603      	lsls	r3, r0, #24
    ea10:	d43c      	bmi.n	ea8c <bt_le_adv_resume+0x98>
    ea12:	4620      	mov	r0, r4
    ea14:	f009 fd56 	bl	184c4 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    ea18:	0546      	lsls	r6, r0, #21
    ea1a:	d537      	bpl.n	ea8c <bt_le_adv_resume+0x98>
	err = le_adv_start_add_conn(adv, &conn);
    ea1c:	1d39      	adds	r1, r7, #4
    ea1e:	f1a4 0010 	sub.w	r0, r4, #16
    ea22:	f7ff fdad 	bl	e580 <le_adv_start_add_conn>
	if (err) {
    ea26:	bb88      	cbnz	r0, ea8c <bt_le_adv_resume+0x98>
		bool dir_adv = adv_is_directed(adv);
    ea28:	f1a4 0010 	sub.w	r0, r4, #16
    ea2c:	f7ff fd9c 	bl	e568 <adv_is_directed>
    ea30:	4602      	mov	r2, r0
    ea32:	4620      	mov	r0, r4
    ea34:	f009 fd46 	bl	184c4 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    ea38:	f3c0 3180 	ubfx	r1, r0, #14, #1
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    ea3c:	4620      	mov	r0, r4
    ea3e:	f009 fd41 	bl	184c4 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST)) {
    ea42:	f081 0101 	eor.w	r1, r1, #1
	if (atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    ea46:	0545      	lsls	r5, r0, #21
	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST)) {
    ea48:	ea4f 0141 	mov.w	r1, r1, lsl #1
    ea4c:	4822      	ldr	r0, [pc, #136]	; (ead8 <bt_le_adv_resume+0xe4>)
		options |= BT_LE_ADV_OPT_CONNECTABLE;
    ea4e:	bf48      	it	mi
    ea50:	f041 0101 	orrmi.w	r1, r1, #1
    ea54:	f009 fd36 	bl	184c4 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
    ea58:	0480      	lsls	r0, r0, #18
		options |= BT_LE_ADV_OPT_USE_IDENTITY;
    ea5a:	bf48      	it	mi
    ea5c:	f041 0104 	orrmi.w	r1, r1, #4
		err = bt_id_set_adv_own_addr(adv, options, dir_adv, &own_addr_type);
    ea60:	481e      	ldr	r0, [pc, #120]	; (eadc <bt_le_adv_resume+0xe8>)
    ea62:	1cfb      	adds	r3, r7, #3
    ea64:	f7ff fc86 	bl	e374 <bt_id_set_adv_own_addr>
		if (err) {
    ea68:	4605      	mov	r5, r0
    ea6a:	b190      	cbz	r0, ea92 <bt_le_adv_resume+0x9e>
			LOG_ERR("Controller cannot resume connectable advertising (%d)", err);
    ea6c:	466c      	mov	r4, sp
    ea6e:	b088      	sub	sp, #32
    ea70:	466a      	mov	r2, sp
    ea72:	4b1b      	ldr	r3, [pc, #108]	; (eae0 <bt_le_adv_resume+0xec>)
    ea74:	e9c2 3005 	strd	r3, r0, [r2, #20]
    ea78:	2303      	movs	r3, #3
    ea7a:	f842 3f10 	str.w	r3, [r2, #16]!
    ea7e:	2300      	movs	r3, #0
    ea80:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ea84:	4817      	ldr	r0, [pc, #92]	; (eae4 <bt_le_adv_resume+0xf0>)
    ea86:	f7fb ff39 	bl	a8fc <z_impl_z_log_msg_static_create>
    ea8a:	46a5      	mov	sp, r4
}
    ea8c:	370c      	adds	r7, #12
    ea8e:	46bd      	mov	sp, r7
    ea90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_le_adv_set_enable_legacy(adv, enable);
    ea92:	2101      	movs	r1, #1
    ea94:	4811      	ldr	r0, [pc, #68]	; (eadc <bt_le_adv_resume+0xe8>)
    ea96:	f009 fdb8 	bl	1860a <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
    ea9a:	687e      	ldr	r6, [r7, #4]
	if (err) {
    ea9c:	b918      	cbnz	r0, eaa6 <bt_le_adv_resume+0xb2>
	bt_conn_unref(conn);
    ea9e:	4630      	mov	r0, r6
    eaa0:	f009 fe21 	bl	186e6 <bt_conn_unref>
	if (persist_paused) {
    eaa4:	e7f2      	b.n	ea8c <bt_le_adv_resume+0x98>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    eaa6:	4629      	mov	r1, r5
    eaa8:	4630      	mov	r0, r6
    eaaa:	f000 fb89 	bl	f1c0 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    eaae:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
    eab2:	4809      	ldr	r0, [pc, #36]	; (ead8 <bt_le_adv_resume+0xe4>)
    eab4:	f009 fd09 	bl	184ca <atomic_and>
    eab8:	4605      	mov	r5, r0
	bt_conn_unref(conn);
    eaba:	4630      	mov	r0, r6
    eabc:	f009 fe13 	bl	186e6 <bt_conn_unref>
	if (persist_paused) {
    eac0:	046b      	lsls	r3, r5, #17
    eac2:	d5e3      	bpl.n	ea8c <bt_le_adv_resume+0x98>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    eac4:	e8d4 3fef 	ldaex	r3, [r4]
    eac8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    eacc:	e8c4 3fe2 	stlex	r2, r3, [r4]
    ead0:	2a00      	cmp	r2, #0
    ead2:	d0db      	beq.n	ea8c <bt_le_adv_resume+0x98>
    ead4:	e7f6      	b.n	eac4 <bt_le_adv_resume+0xd0>
    ead6:	bf00      	nop
    ead8:	20008028 	.word	0x20008028
    eadc:	20008018 	.word	0x20008018
    eae0:	0001d667 	.word	0x0001d667
    eae4:	0001b870 	.word	0x0001b870

0000eae8 <prng_reseed.constprop.0>:
#include <zephyr/logging/log.h>
LOG_MODULE_REGISTER(bt_host_crypto);

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
    eae8:	b530      	push	{r4, r5, lr}
    eaea:	b093      	sub	sp, #76	; 0x4c
{
	uint8_t seed[32];
	int64_t extra;
	int ret;

	ret = bt_hci_le_rand(seed, sizeof(seed));
    eaec:	2120      	movs	r1, #32
    eaee:	a80a      	add	r0, sp, #40	; 0x28
    eaf0:	f7fe fa30 	bl	cf54 <bt_hci_le_rand>
	if (ret) {
    eaf4:	4604      	mov	r4, r0
    eaf6:	bb18      	cbnz	r0, eb40 <prng_reseed.constprop.0+0x58>
	return z_impl_k_uptime_ticks();
    eaf8:	f00c fab1 	bl	1b05e <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
    eafc:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    eb00:	fba0 2305 	umull	r2, r3, r0, r5
    eb04:	fb05 3101 	mla	r1, r5, r1, r3
		return ret;
	}

	extra = k_uptime_get();

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
    eb08:	2308      	movs	r3, #8
    eb0a:	0bd2      	lsrs	r2, r2, #15
    eb0c:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
    eb10:	0bc9      	lsrs	r1, r1, #15
	extra = k_uptime_get();
    eb12:	e9cd 2102 	strd	r2, r1, [sp, #8]
	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
    eb16:	9300      	str	r3, [sp, #0]
    eb18:	2220      	movs	r2, #32
    eb1a:	480b      	ldr	r0, [pc, #44]	; (eb48 <prng_reseed.constprop.0+0x60>)
    eb1c:	446b      	add	r3, sp
    eb1e:	a90a      	add	r1, sp, #40	; 0x28
    eb20:	f009 fa47 	bl	17fb2 <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
    eb24:	b960      	cbnz	r0, eb40 <prng_reseed.constprop.0+0x58>
		LOG_ERR("Failed to re-seed PRNG");
    eb26:	4b09      	ldr	r3, [pc, #36]	; (eb4c <prng_reseed.constprop.0+0x64>)
    eb28:	9309      	str	r3, [sp, #36]	; 0x24
    eb2a:	2302      	movs	r3, #2
    eb2c:	9308      	str	r3, [sp, #32]
    eb2e:	4623      	mov	r3, r4
    eb30:	f06f 0404 	mvn.w	r4, #4
    eb34:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    eb38:	4805      	ldr	r0, [pc, #20]	; (eb50 <prng_reseed.constprop.0+0x68>)
    eb3a:	aa08      	add	r2, sp, #32
    eb3c:	f7fb fede 	bl	a8fc <z_impl_z_log_msg_static_create>
		return -EIO;
	}

	return 0;
}
    eb40:	4620      	mov	r0, r4
    eb42:	b013      	add	sp, #76	; 0x4c
    eb44:	bd30      	pop	{r4, r5, pc}
    eb46:	bf00      	nop
    eb48:	20009290 	.word	0x20009290
    eb4c:	0001d6a4 	.word	0x0001d6a4
    eb50:	0001b8a8 	.word	0x0001b8a8

0000eb54 <prng_init>:

int prng_init(void)
{
    eb54:	b510      	push	{r4, lr}
    eb56:	b088      	sub	sp, #32
	uint8_t perso[8];
	int ret;

	ret = bt_hci_le_rand(perso, sizeof(perso));
    eb58:	2108      	movs	r1, #8
    eb5a:	4668      	mov	r0, sp
    eb5c:	f7fe f9fa 	bl	cf54 <bt_hci_le_rand>
	if (ret) {
    eb60:	4604      	mov	r4, r0
    eb62:	b990      	cbnz	r0, eb8a <prng_init+0x36>
		return ret;
	}

	ret = tc_hmac_prng_init(&prng, perso, sizeof(perso));
    eb64:	2208      	movs	r2, #8
    eb66:	4669      	mov	r1, sp
    eb68:	480b      	ldr	r0, [pc, #44]	; (eb98 <prng_init+0x44>)
    eb6a:	f009 fa02 	bl	17f72 <tc_hmac_prng_init>
	if (ret == TC_CRYPTO_FAIL) {
    eb6e:	b978      	cbnz	r0, eb90 <prng_init+0x3c>
		LOG_ERR("Failed to initialize PRNG");
    eb70:	4b0a      	ldr	r3, [pc, #40]	; (eb9c <prng_init+0x48>)
    eb72:	9307      	str	r3, [sp, #28]
    eb74:	2302      	movs	r3, #2
    eb76:	9306      	str	r3, [sp, #24]
    eb78:	4623      	mov	r3, r4
		return -EIO;
    eb7a:	f06f 0404 	mvn.w	r4, #4
    eb7e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    eb82:	4807      	ldr	r0, [pc, #28]	; (eba0 <prng_init+0x4c>)
    eb84:	aa06      	add	r2, sp, #24
    eb86:	f7fb feb9 	bl	a8fc <z_impl_z_log_msg_static_create>
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
    eb8a:	4620      	mov	r0, r4
    eb8c:	b008      	add	sp, #32
    eb8e:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
    eb90:	f7ff ffaa 	bl	eae8 <prng_reseed.constprop.0>
    eb94:	4604      	mov	r4, r0
    eb96:	e7f8      	b.n	eb8a <prng_init+0x36>
    eb98:	20009290 	.word	0x20009290
    eb9c:	0001d6bb 	.word	0x0001d6bb
    eba0:	0001b8a8 	.word	0x0001b8a8

0000eba4 <bt_rand>:

#if defined(CONFIG_BT_HOST_CRYPTO_PRNG)
int bt_rand(void *buf, size_t len)
{
    eba4:	b538      	push	{r3, r4, r5, lr}
    eba6:	460d      	mov	r5, r1
	int ret;

	CHECKIF(buf == NULL || len == 0) {
    eba8:	4604      	mov	r4, r0
    ebaa:	b198      	cbz	r0, ebd4 <bt_rand+0x30>
    ebac:	b191      	cbz	r1, ebd4 <bt_rand+0x30>
		return -EINVAL;
	}

	ret = tc_hmac_prng_generate(buf, len, &prng);
    ebae:	4a0b      	ldr	r2, [pc, #44]	; (ebdc <bt_rand+0x38>)
    ebb0:	f009 fa18 	bl	17fe4 <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
    ebb4:	1c43      	adds	r3, r0, #1
    ebb6:	d107      	bne.n	ebc8 <bt_rand+0x24>
		ret = prng_reseed(&prng);
    ebb8:	f7ff ff96 	bl	eae8 <prng_reseed.constprop.0>
		if (ret) {
    ebbc:	b948      	cbnz	r0, ebd2 <bt_rand+0x2e>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
    ebbe:	4629      	mov	r1, r5
    ebc0:	4620      	mov	r0, r4
    ebc2:	4a06      	ldr	r2, [pc, #24]	; (ebdc <bt_rand+0x38>)
    ebc4:	f009 fa0e 	bl	17fe4 <tc_hmac_prng_generate>

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
	}

	return -EIO;
    ebc8:	2801      	cmp	r0, #1
    ebca:	bf0c      	ite	eq
    ebcc:	2000      	moveq	r0, #0
    ebce:	f06f 0004 	mvnne.w	r0, #4
}
    ebd2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    ebd4:	f06f 0015 	mvn.w	r0, #21
    ebd8:	e7fb      	b.n	ebd2 <bt_rand+0x2e>
    ebda:	bf00      	nop
    ebdc:	20009290 	.word	0x20009290

0000ebe0 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
    ebe0:	b570      	push	{r4, r5, r6, lr}
    ebe2:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    ebe4:	4b0a      	ldr	r3, [pc, #40]	; (ec10 <notify_connected+0x30>)
    ebe6:	681d      	ldr	r5, [r3, #0]
    ebe8:	b925      	cbnz	r5, ebf4 <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    ebea:	4d0a      	ldr	r5, [pc, #40]	; (ec14 <notify_connected+0x34>)
    ebec:	4e0a      	ldr	r6, [pc, #40]	; (ec18 <notify_connected+0x38>)
    ebee:	42b5      	cmp	r5, r6
    ebf0:	d307      	bcc.n	ec02 <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    ebf2:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
    ebf4:	682b      	ldr	r3, [r5, #0]
    ebf6:	b113      	cbz	r3, ebfe <notify_connected+0x1e>
			cb->connected(conn, conn->err);
    ebf8:	4620      	mov	r0, r4
    ebfa:	7a61      	ldrb	r1, [r4, #9]
    ebfc:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    ebfe:	692d      	ldr	r5, [r5, #16]
    ec00:	e7f2      	b.n	ebe8 <notify_connected+0x8>
		if (cb->connected) {
    ec02:	682b      	ldr	r3, [r5, #0]
    ec04:	b113      	cbz	r3, ec0c <notify_connected+0x2c>
			cb->connected(conn, conn->err);
    ec06:	4620      	mov	r0, r4
    ec08:	7a61      	ldrb	r1, [r4, #9]
    ec0a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    ec0c:	3514      	adds	r5, #20
    ec0e:	e7ee      	b.n	ebee <notify_connected+0xe>
    ec10:	200098cc 	.word	0x200098cc
    ec14:	0001b830 	.word	0x0001b830
    ec18:	0001b830 	.word	0x0001b830

0000ec1c <bt_conn_create_pdu_timeout.part.0>:
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
    ec1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_WRN("Unable to allocate buffer within timeout");
    ec1e:	4b07      	ldr	r3, [pc, #28]	; (ec3c <bt_conn_create_pdu_timeout.part.0+0x20>)
    ec20:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    ec24:	9305      	str	r3, [sp, #20]
    ec26:	2302      	movs	r3, #2
    ec28:	4805      	ldr	r0, [pc, #20]	; (ec40 <bt_conn_create_pdu_timeout.part.0+0x24>)
    ec2a:	aa04      	add	r2, sp, #16
    ec2c:	9304      	str	r3, [sp, #16]
    ec2e:	f009 fd14 	bl	1865a <z_log_msg_static_create.constprop.0>
}
    ec32:	2000      	movs	r0, #0
    ec34:	b007      	add	sp, #28
    ec36:	f85d fb04 	ldr.w	pc, [sp], #4
    ec3a:	bf00      	nop
    ec3c:	0001d6e4 	.word	0x0001d6e4
    ec40:	0001b880 	.word	0x0001b880

0000ec44 <tx_notify>:
{
    ec44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ec48:	4604      	mov	r4, r0
	tx->cb = NULL;
    ec4a:	f04f 0800 	mov.w	r8, #0
	k_fifo_put(&free_tx, tx);
    ec4e:	4f14      	ldr	r7, [pc, #80]	; (eca0 <tx_notify+0x5c>)
	__asm__ volatile(
    ec50:	f04f 0220 	mov.w	r2, #32
    ec54:	f3ef 8311 	mrs	r3, BASEPRI
    ec58:	f382 8812 	msr	BASEPRI_MAX, r2
    ec5c:	f3bf 8f6f 	isb	sy
	return list->head;
    ec60:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
    ec62:	b929      	cbnz	r1, ec70 <tx_notify+0x2c>
	__asm__ volatile(
    ec64:	f383 8811 	msr	BASEPRI, r3
    ec68:	f3bf 8f6f 	isb	sy
}
    ec6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ec70:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
    ec72:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ec74:	4281      	cmp	r1, r0
	list->tail = node;
    ec76:	bf08      	it	eq
    ec78:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
    ec7a:	6222      	str	r2, [r4, #32]
    ec7c:	f383 8811 	msr	BASEPRI, r3
    ec80:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
    ec84:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	k_fifo_put(&free_tx, tx);
    ec88:	4638      	mov	r0, r7
	tx->user_data = NULL;
    ec8a:	e9c1 8801 	strd	r8, r8, [r1, #4]
	tx->pending_no_cb = 0U;
    ec8e:	f8c1 800c 	str.w	r8, [r1, #12]
	k_fifo_put(&free_tx, tx);
    ec92:	f00b ff68 	bl	1ab66 <k_queue_append>
		cb(conn, user_data, 0);
    ec96:	2200      	movs	r2, #0
    ec98:	4631      	mov	r1, r6
    ec9a:	4620      	mov	r0, r4
    ec9c:	47a8      	blx	r5
	while (1) {
    ec9e:	e7d7      	b.n	ec50 <tx_notify+0xc>
    eca0:	200086a0 	.word	0x200086a0

0000eca4 <conn_tx_destroy>:
	tx->cb = NULL;
    eca4:	2200      	movs	r2, #0
{
    eca6:	b570      	push	{r4, r5, r6, lr}
    eca8:	4604      	mov	r4, r0
	void *user_data = tx->user_data;
    ecaa:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
    ecae:	60ca      	str	r2, [r1, #12]
	tx->user_data = NULL;
    ecb0:	e9c1 2201 	strd	r2, r2, [r1, #4]
	k_fifo_put(&free_tx, tx);
    ecb4:	4805      	ldr	r0, [pc, #20]	; (eccc <conn_tx_destroy+0x28>)
    ecb6:	f00b ff56 	bl	1ab66 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
    ecba:	4631      	mov	r1, r6
    ecbc:	4620      	mov	r0, r4
    ecbe:	462b      	mov	r3, r5
}
    ecc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
    ecc4:	f06f 026d 	mvn.w	r2, #109	; 0x6d
    ecc8:	4718      	bx	r3
    ecca:	bf00      	nop
    eccc:	200086a0 	.word	0x200086a0

0000ecd0 <send_frag>:
{
    ecd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ecd4:	b083      	sub	sp, #12
	if (bt_dev.le.acl_mtu) {
    ecd6:	f8df 91a8 	ldr.w	r9, [pc, #424]	; ee80 <send_frag+0x1b0>
{
    ecda:	4698      	mov	r8, r3
	if (bt_dev.le.acl_mtu) {
    ecdc:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
{
    ece0:	4604      	mov	r4, r0
	return NULL;
    ece2:	2b00      	cmp	r3, #0
{
    ece4:	af00      	add	r7, sp, #0
	return NULL;
    ece6:	f509 7084 	add.w	r0, r9, #264	; 0x108
{
    ecea:	460d      	mov	r5, r1
	return NULL;
    ecec:	bf08      	it	eq
    ecee:	2000      	moveq	r0, #0
{
    ecf0:	4616      	mov	r6, r2
	return z_impl_k_sem_take(sem, timeout);
    ecf2:	2200      	movs	r2, #0
    ecf4:	2300      	movs	r3, #0
    ecf6:	f006 fcab 	bl	15650 <z_impl_k_sem_take>
	if (k_sem_take(bt_conn_get_pkts(conn), K_NO_WAIT)) {
    ecfa:	2800      	cmp	r0, #0
    ecfc:	f040 80bd 	bne.w	ee7a <send_frag+0x1aa>
	if (frag) {
    ed00:	2e00      	cmp	r6, #0
    ed02:	f000 8090 	beq.w	ee26 <send_frag+0x156>
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    ed06:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    ed0a:	f106 0b0c 	add.w	fp, r6, #12
    ed0e:	4658      	mov	r0, fp
    ed10:	607b      	str	r3, [r7, #4]
    ed12:	f00a fdc2 	bl	1989a <net_buf_simple_tailroom>
    ed16:	687b      	ldr	r3, [r7, #4]
    ed18:	4298      	cmp	r0, r3
    ed1a:	d97f      	bls.n	ee1c <send_frag+0x14c>
	return bt_dev.le.acl_mtu;
    ed1c:	f8b9 2104 	ldrh.w	r2, [r9, #260]	; 0x104
	return net_buf_simple_add_mem(&buf->b, mem, len);
    ed20:	f855 1f0c 	ldr.w	r1, [r5, #12]!
    ed24:	4658      	mov	r0, fp
    ed26:	607a      	str	r2, [r7, #4]
    ed28:	f00a fd79 	bl	1981e <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    ed2c:	687a      	ldr	r2, [r7, #4]
    ed2e:	4628      	mov	r0, r5
    ed30:	4611      	mov	r1, r2
    ed32:	f00a fd96 	bl	19862 <net_buf_simple_pull>
	if (conn->state != BT_CONN_CONNECTED) {
    ed36:	7aa3      	ldrb	r3, [r4, #10]
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    ed38:	69b5      	ldr	r5, [r6, #24]
	if (conn->state != BT_CONN_CONNECTED) {
    ed3a:	2b07      	cmp	r3, #7
    ed3c:	f040 809a 	bne.w	ee74 <send_frag+0x1a4>
	__asm__ volatile(
    ed40:	f04f 0320 	mov.w	r3, #32
    ed44:	f3ef 8211 	mrs	r2, BASEPRI
    ed48:	f383 8812 	msr	BASEPRI_MAX, r3
    ed4c:	f3bf 8f6f 	isb	sy
	if (tx) {
    ed50:	2d00      	cmp	r5, #0
    ed52:	d073      	beq.n	ee3c <send_frag+0x16c>
	parent->next = child;
    ed54:	2300      	movs	r3, #0
    ed56:	602b      	str	r3, [r5, #0]
	return list->tail;
    ed58:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
    ed5a:	2b00      	cmp	r3, #0
    ed5c:	d16b      	bne.n	ee36 <send_frag+0x166>
	list->head = node;
    ed5e:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    ed62:	f382 8811 	msr	BASEPRI, r2
    ed66:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    ed6a:	2104      	movs	r1, #4
    ed6c:	f106 000c 	add.w	r0, r6, #12
    ed70:	f00a fd66 	bl	19840 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    ed74:	8823      	ldrh	r3, [r4, #0]
    ed76:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
    ed7a:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
    ed7e:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    ed82:	8a33      	ldrh	r3, [r6, #16]
    ed84:	3b04      	subs	r3, #4
    ed86:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    ed88:	2302      	movs	r3, #2
	return bt_send(buf);
    ed8a:	4630      	mov	r0, r6
    ed8c:	7633      	strb	r3, [r6, #24]
    ed8e:	f7fe fab5 	bl	d2fc <bt_send>
	if (err) {
    ed92:	4680      	mov	r8, r0
    ed94:	2800      	cmp	r0, #0
    ed96:	d03c      	beq.n	ee12 <send_frag+0x142>
		LOG_ERR("Unable to send to driver (err %d)", err);
    ed98:	46eb      	mov	fp, sp
    ed9a:	b088      	sub	sp, #32
    ed9c:	466a      	mov	r2, sp
    ed9e:	4b39      	ldr	r3, [pc, #228]	; (ee84 <send_frag+0x1b4>)
    eda0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    eda4:	e9c2 3005 	strd	r3, r0, [r2, #20]
    eda8:	2303      	movs	r3, #3
    edaa:	4837      	ldr	r0, [pc, #220]	; (ee88 <send_frag+0x1b8>)
    edac:	f842 3f10 	str.w	r3, [r2, #16]!
    edb0:	f009 fc53 	bl	1865a <z_log_msg_static_create.constprop.0>
    edb4:	46dd      	mov	sp, fp
	__asm__ volatile(
    edb6:	f04f 0320 	mov.w	r3, #32
    edba:	f3ef 8111 	mrs	r1, BASEPRI
    edbe:	f383 8812 	msr	BASEPRI_MAX, r3
    edc2:	f3bf 8f6f 	isb	sy
		if (tx) {
    edc6:	2d00      	cmp	r5, #0
    edc8:	d04e      	beq.n	ee68 <send_frag+0x198>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    edca:	2200      	movs	r2, #0
	return list->head;
    edcc:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    edce:	b15b      	cbz	r3, ede8 <send_frag+0x118>
    edd0:	429d      	cmp	r5, r3
    edd2:	d146      	bne.n	ee62 <send_frag+0x192>
	return node->next;
    edd4:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
    edd6:	2a00      	cmp	r2, #0
    edd8:	d13d      	bne.n	ee56 <send_frag+0x186>
    edda:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
    eddc:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    edde:	4295      	cmp	r5, r2
    ede0:	d100      	bne.n	ede4 <send_frag+0x114>
	list->tail = node;
    ede2:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    ede4:	2300      	movs	r3, #0
    ede6:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    ede8:	f381 8811 	msr	BASEPRI, r1
    edec:	f3bf 8f6f 	isb	sy
		err = -EIO;
    edf0:	f06f 0804 	mvn.w	r8, #4
	if (bt_dev.le.acl_mtu) {
    edf4:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
	return NULL;
    edf8:	4824      	ldr	r0, [pc, #144]	; (ee8c <send_frag+0x1bc>)
    edfa:	2b00      	cmp	r3, #0
    edfc:	bf08      	it	eq
    edfe:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
    ee00:	f006 fc00 	bl	15604 <z_impl_k_sem_give>
	if (tx) {
    ee04:	b12d      	cbz	r5, ee12 <send_frag+0x142>
		tx_data(buf)->tx = NULL;
    ee06:	2300      	movs	r3, #0
		conn_tx_destroy(conn, tx);
    ee08:	4629      	mov	r1, r5
    ee0a:	4620      	mov	r0, r4
		tx_data(buf)->tx = NULL;
    ee0c:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
    ee0e:	f7ff ff49 	bl	eca4 <conn_tx_destroy>
}
    ee12:	4640      	mov	r0, r8
    ee14:	370c      	adds	r7, #12
    ee16:	46bd      	mov	sp, r7
    ee18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_tailroom(&buf->b);
    ee1c:	4658      	mov	r0, fp
    ee1e:	f00a fd3c 	bl	1989a <net_buf_simple_tailroom>
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    ee22:	b282      	uxth	r2, r0
    ee24:	e77c      	b.n	ed20 <send_frag+0x50>
		buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    ee26:	2200      	movs	r2, #0
    ee28:	2300      	movs	r3, #0
    ee2a:	f104 0038 	add.w	r0, r4, #56	; 0x38
    ee2e:	f00a fc95 	bl	1975c <net_buf_get>
    ee32:	4606      	mov	r6, r0
		frag = buf;
    ee34:	e77f      	b.n	ed36 <send_frag+0x66>
    ee36:	601d      	str	r5, [r3, #0]
	list->tail = node;
    ee38:	61a5      	str	r5, [r4, #24]
}
    ee3a:	e792      	b.n	ed62 <send_frag+0x92>
	return list->tail;
    ee3c:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    ee3e:	b133      	cbz	r3, ee4e <send_frag+0x17e>
			pending_no_cb = &tail_tx->pending_no_cb;
    ee40:	f103 0a0c 	add.w	sl, r3, #12
    ee44:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    ee46:	3301      	adds	r3, #1
    ee48:	f8ca 3000 	str.w	r3, [sl]
    ee4c:	e789      	b.n	ed62 <send_frag+0x92>
			pending_no_cb = &conn->pending_no_cb;
    ee4e:	69e3      	ldr	r3, [r4, #28]
    ee50:	f104 0a1c 	add.w	sl, r4, #28
    ee54:	e7f7      	b.n	ee46 <send_frag+0x176>
	parent->next = child;
    ee56:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    ee58:	69a3      	ldr	r3, [r4, #24]
    ee5a:	429d      	cmp	r5, r3
	list->tail = node;
    ee5c:	bf08      	it	eq
    ee5e:	61a2      	streq	r2, [r4, #24]
}
    ee60:	e7c0      	b.n	ede4 <send_frag+0x114>
	return node->next;
    ee62:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ee64:	681b      	ldr	r3, [r3, #0]
    ee66:	e7b2      	b.n	edce <send_frag+0xfe>
			(*pending_no_cb)--;
    ee68:	f8da 3000 	ldr.w	r3, [sl]
    ee6c:	3b01      	subs	r3, #1
    ee6e:	f8ca 3000 	str.w	r3, [sl]
    ee72:	e7b9      	b.n	ede8 <send_frag+0x118>
		err = -ENOTCONN;
    ee74:	f06f 087f 	mvn.w	r8, #127	; 0x7f
    ee78:	e7bc      	b.n	edf4 <send_frag+0x124>
		return -ENOBUFS;
    ee7a:	f06f 0868 	mvn.w	r8, #104	; 0x68
    ee7e:	e7c8      	b.n	ee12 <send_frag+0x142>
    ee80:	20008000 	.word	0x20008000
    ee84:	0001d0ef 	.word	0x0001d0ef
    ee88:	0001b880 	.word	0x0001b880
    ee8c:	20008108 	.word	0x20008108

0000ee90 <bt_conn_get_pkts>:
	if (bt_dev.le.acl_mtu) {
    ee90:	4804      	ldr	r0, [pc, #16]	; (eea4 <bt_conn_get_pkts+0x14>)
    ee92:	f8b0 3104 	ldrh.w	r3, [r0, #260]	; 0x104
	return NULL;
    ee96:	f500 7084 	add.w	r0, r0, #264	; 0x108
    ee9a:	2b00      	cmp	r3, #0
}
    ee9c:	bf08      	it	eq
    ee9e:	2000      	moveq	r0, #0
    eea0:	4770      	bx	lr
    eea2:	bf00      	nop
    eea4:	20008000 	.word	0x20008000

0000eea8 <bt_conn_new>:
{
    eea8:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
    eeaa:	2200      	movs	r2, #0
    eeac:	4604      	mov	r4, r0
    eeae:	428a      	cmp	r2, r1
    eeb0:	d102      	bne.n	eeb8 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
    eeb2:	2400      	movs	r4, #0
}
    eeb4:	4620      	mov	r0, r4
    eeb6:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    eeb8:	2001      	movs	r0, #1
    eeba:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
    eebe:	e8d3 5fef 	ldaex	r5, [r3]
    eec2:	2d00      	cmp	r5, #0
    eec4:	d104      	bne.n	eed0 <bt_conn_new+0x28>
    eec6:	e8c3 0fec 	stlex	ip, r0, [r3]
    eeca:	f1bc 0f00 	cmp.w	ip, #0
    eece:	d1f6      	bne.n	eebe <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
    eed0:	d002      	beq.n	eed8 <bt_conn_new+0x30>
    eed2:	34c0      	adds	r4, #192	; 0xc0
	for (i = 0; i < size; i++) {
    eed4:	4402      	add	r2, r0
    eed6:	e7ea      	b.n	eeae <bt_conn_new+0x6>
	if (!conn) {
    eed8:	2c00      	cmp	r4, #0
    eeda:	d0ea      	beq.n	eeb2 <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
    eedc:	22bc      	movs	r2, #188	; 0xbc
    eede:	2100      	movs	r1, #0
    eee0:	4620      	mov	r0, r4
    eee2:	f009 f96f 	bl	181c4 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
    eee6:	f104 0058 	add.w	r0, r4, #88	; 0x58
    eeea:	4904      	ldr	r1, [pc, #16]	; (eefc <bt_conn_new+0x54>)
    eeec:	f00b ff1b 	bl	1ad26 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
    eef0:	4903      	ldr	r1, [pc, #12]	; (ef00 <bt_conn_new+0x58>)
    eef2:	f104 0028 	add.w	r0, r4, #40	; 0x28
    eef6:	f00b fed2 	bl	1ac9e <k_work_init>
	return conn;
    eefa:	e7db      	b.n	eeb4 <bt_conn_new+0xc>
    eefc:	0000f681 	.word	0x0000f681
    ef00:	00018661 	.word	0x00018661

0000ef04 <bt_conn_recv>:
{
    ef04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ef08:	4616      	mov	r6, r2
    ef0a:	b086      	sub	sp, #24
    ef0c:	af00      	add	r7, sp, #0
    ef0e:	4604      	mov	r4, r0
    ef10:	460d      	mov	r5, r1
	tx_notify(conn);
    ef12:	f7ff fe97 	bl	ec44 <tx_notify>
	switch (flags) {
    ef16:	2e01      	cmp	r6, #1
    ef18:	d030      	beq.n	ef7c <bt_conn_recv+0x78>
    ef1a:	2e02      	cmp	r6, #2
    ef1c:	d16a      	bne.n	eff4 <bt_conn_recv+0xf0>
		if (conn->rx) {
    ef1e:	6923      	ldr	r3, [r4, #16]
    ef20:	b163      	cbz	r3, ef3c <bt_conn_recv+0x38>
			LOG_ERR("Unexpected first L2CAP frame");
    ef22:	4b40      	ldr	r3, [pc, #256]	; (f024 <bt_conn_recv+0x120>)
    ef24:	4840      	ldr	r0, [pc, #256]	; (f028 <bt_conn_recv+0x124>)
    ef26:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ef2a:	e9c7 6304 	strd	r6, r3, [r7, #16]
    ef2e:	f107 0210 	add.w	r2, r7, #16
    ef32:	f009 fb92 	bl	1865a <z_log_msg_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
    ef36:	4620      	mov	r0, r4
    ef38:	f009 fb95 	bl	18666 <bt_conn_reset_rx_state>
		conn->rx = buf;
    ef3c:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
    ef3e:	6921      	ldr	r1, [r4, #16]
    ef40:	8a08      	ldrh	r0, [r1, #16]
    ef42:	2801      	cmp	r0, #1
    ef44:	d930      	bls.n	efa8 <bt_conn_recv+0xa4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    ef46:	68cb      	ldr	r3, [r1, #12]
    ef48:	881b      	ldrh	r3, [r3, #0]
    ef4a:	3304      	adds	r3, #4
    ef4c:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
    ef4e:	4298      	cmp	r0, r3
    ef50:	d32a      	bcc.n	efa8 <bt_conn_recv+0xa4>
	if (conn->rx->len > acl_total_len) {
    ef52:	d95f      	bls.n	f014 <bt_conn_recv+0x110>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
    ef54:	466d      	mov	r5, sp
    ef56:	b088      	sub	sp, #32
    ef58:	466a      	mov	r2, sp
    ef5a:	61d3      	str	r3, [r2, #28]
    ef5c:	2304      	movs	r3, #4
    ef5e:	4933      	ldr	r1, [pc, #204]	; (f02c <bt_conn_recv+0x128>)
    ef60:	e9c2 1005 	strd	r1, r0, [r2, #20]
    ef64:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    ef68:	482f      	ldr	r0, [pc, #188]	; (f028 <bt_conn_recv+0x124>)
    ef6a:	f842 3f10 	str.w	r3, [r2, #16]!
    ef6e:	f009 fb74 	bl	1865a <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
    ef72:	4620      	mov	r0, r4
    ef74:	46ad      	mov	sp, r5
    ef76:	f009 fb76 	bl	18666 <bt_conn_reset_rx_state>
		return;
    ef7a:	e015      	b.n	efa8 <bt_conn_recv+0xa4>
		if (!conn->rx) {
    ef7c:	6920      	ldr	r0, [r4, #16]
    ef7e:	b970      	cbnz	r0, ef9e <bt_conn_recv+0x9a>
			LOG_ERR("Unexpected L2CAP continuation");
    ef80:	4b2b      	ldr	r3, [pc, #172]	; (f030 <bt_conn_recv+0x12c>)
    ef82:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ef86:	617b      	str	r3, [r7, #20]
    ef88:	2302      	movs	r3, #2
    ef8a:	4827      	ldr	r0, [pc, #156]	; (f028 <bt_conn_recv+0x124>)
    ef8c:	613b      	str	r3, [r7, #16]
    ef8e:	f107 0210 	add.w	r2, r7, #16
    ef92:	f009 fb62 	bl	1865a <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
    ef96:	4620      	mov	r0, r4
    ef98:	f009 fb65 	bl	18666 <bt_conn_reset_rx_state>
    ef9c:	e001      	b.n	efa2 <bt_conn_recv+0x9e>
		if (!buf->len) {
    ef9e:	8a2e      	ldrh	r6, [r5, #16]
    efa0:	b936      	cbnz	r6, efb0 <bt_conn_recv+0xac>
		net_buf_unref(buf);
    efa2:	4628      	mov	r0, r5
    efa4:	f002 fde6 	bl	11b74 <net_buf_unref>
}
    efa8:	3718      	adds	r7, #24
    efaa:	46bd      	mov	sp, r7
    efac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    efb0:	300c      	adds	r0, #12
    efb2:	f00a fc72 	bl	1989a <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    efb6:	4286      	cmp	r6, r0
    efb8:	d912      	bls.n	efe0 <bt_conn_recv+0xdc>
			LOG_ERR("Not enough buffer space for L2CAP data");
    efba:	4b1e      	ldr	r3, [pc, #120]	; (f034 <bt_conn_recv+0x130>)
    efbc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    efc0:	617b      	str	r3, [r7, #20]
    efc2:	2302      	movs	r3, #2
    efc4:	4818      	ldr	r0, [pc, #96]	; (f028 <bt_conn_recv+0x124>)
    efc6:	613b      	str	r3, [r7, #16]
    efc8:	f107 0210 	add.w	r2, r7, #16
    efcc:	f009 fb45 	bl	1865a <z_log_msg_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
    efd0:	2200      	movs	r2, #0
    efd2:	4620      	mov	r0, r4
    efd4:	6921      	ldr	r1, [r4, #16]
    efd6:	f000 fd91 	bl	fafc <bt_l2cap_recv>
			conn->rx = NULL;
    efda:	2300      	movs	r3, #0
    efdc:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
    efde:	e7e0      	b.n	efa2 <bt_conn_recv+0x9e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    efe0:	6920      	ldr	r0, [r4, #16]
    efe2:	8a2a      	ldrh	r2, [r5, #16]
    efe4:	68e9      	ldr	r1, [r5, #12]
    efe6:	300c      	adds	r0, #12
    efe8:	f00a fc19 	bl	1981e <net_buf_simple_add_mem>
		net_buf_unref(buf);
    efec:	4628      	mov	r0, r5
    efee:	f002 fdc1 	bl	11b74 <net_buf_unref>
		break;
    eff2:	e7a4      	b.n	ef3e <bt_conn_recv+0x3a>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
    eff4:	46e8      	mov	r8, sp
    eff6:	b088      	sub	sp, #32
    eff8:	466a      	mov	r2, sp
    effa:	4b0f      	ldr	r3, [pc, #60]	; (f038 <bt_conn_recv+0x134>)
    effc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (flags) {
    f000:	e9c2 3605 	strd	r3, r6, [r2, #20]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
    f004:	2303      	movs	r3, #3
    f006:	4808      	ldr	r0, [pc, #32]	; (f028 <bt_conn_recv+0x124>)
    f008:	f842 3f10 	str.w	r3, [r2, #16]!
    f00c:	f009 fb25 	bl	1865a <z_log_msg_static_create.constprop.0>
    f010:	46c5      	mov	sp, r8
    f012:	e7c0      	b.n	ef96 <bt_conn_recv+0x92>
	conn->rx = NULL;
    f014:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf, true);
    f016:	2201      	movs	r2, #1
    f018:	4620      	mov	r0, r4
	conn->rx = NULL;
    f01a:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
    f01c:	f000 fd6e 	bl	fafc <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
    f020:	e7c2      	b.n	efa8 <bt_conn_recv+0xa4>
    f022:	bf00      	nop
    f024:	0001d70d 	.word	0x0001d70d
    f028:	0001b880 	.word	0x0001b880
    f02c:	0001d78d 	.word	0x0001d78d
    f030:	0001d72a 	.word	0x0001d72a
    f034:	0001d748 	.word	0x0001d748
    f038:	0001d76f 	.word	0x0001d76f

0000f03c <bt_conn_send_cb>:
{
    f03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f040:	4698      	mov	r8, r3
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
    f042:	7acb      	ldrb	r3, [r1, #11]
{
    f044:	4606      	mov	r6, r0
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
    f046:	2b07      	cmp	r3, #7
{
    f048:	460d      	mov	r5, r1
    f04a:	4617      	mov	r7, r2
    f04c:	b086      	sub	sp, #24
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
    f04e:	d80e      	bhi.n	f06e <bt_conn_send_cb+0x32>
		LOG_ERR("not enough room in user_data");
    f050:	4b2c      	ldr	r3, [pc, #176]	; (f104 <bt_conn_send_cb+0xc8>)
    f052:	482d      	ldr	r0, [pc, #180]	; (f108 <bt_conn_send_cb+0xcc>)
    f054:	9305      	str	r3, [sp, #20]
    f056:	2302      	movs	r3, #2
    f058:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f05c:	aa04      	add	r2, sp, #16
    f05e:	9304      	str	r3, [sp, #16]
    f060:	f009 fafb 	bl	1865a <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    f064:	f06f 0015 	mvn.w	r0, #21
}
    f068:	b006      	add	sp, #24
    f06a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->state != BT_CONN_CONNECTED) {
    f06e:	7a83      	ldrb	r3, [r0, #10]
    f070:	2b07      	cmp	r3, #7
    f072:	d00c      	beq.n	f08e <bt_conn_send_cb+0x52>
		LOG_ERR("not connected!");
    f074:	4b25      	ldr	r3, [pc, #148]	; (f10c <bt_conn_send_cb+0xd0>)
    f076:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f07a:	9305      	str	r3, [sp, #20]
    f07c:	2302      	movs	r3, #2
    f07e:	4822      	ldr	r0, [pc, #136]	; (f108 <bt_conn_send_cb+0xcc>)
    f080:	aa04      	add	r2, sp, #16
    f082:	9304      	str	r3, [sp, #16]
    f084:	f009 fae9 	bl	1865a <z_log_msg_static_create.constprop.0>
		return -ENOTCONN;
    f088:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f08c:	e7ec      	b.n	f068 <bt_conn_send_cb+0x2c>
	if (cb) {
    f08e:	2a00      	cmp	r2, #0
    f090:	d033      	beq.n	f0fa <bt_conn_send_cb+0xbe>
	return z_impl_z_current_get();
    f092:	f006 ffef 	bl	16074 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    f096:	4b1e      	ldr	r3, [pc, #120]	; (f110 <bt_conn_send_cb+0xd4>)
    f098:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    f09a:	481e      	ldr	r0, [pc, #120]	; (f114 <bt_conn_send_cb+0xd8>)
    f09c:	bf07      	ittee	eq
    f09e:	2200      	moveq	r2, #0
    f0a0:	2300      	moveq	r3, #0
    f0a2:	f04f 32ff 	movne.w	r2, #4294967295
    f0a6:	f04f 33ff 	movne.w	r3, #4294967295
    f0aa:	f006 fa77 	bl	1559c <z_impl_k_queue_get>
    f0ae:	4604      	mov	r4, r0
		if (!tx) {
    f0b0:	b328      	cbz	r0, f0fe <bt_conn_send_cb+0xc2>
		if (conn->state != BT_CONN_CONNECTED) {
    f0b2:	7ab3      	ldrb	r3, [r6, #10]
    f0b4:	2b07      	cmp	r3, #7
    f0b6:	d012      	beq.n	f0de <bt_conn_send_cb+0xa2>
			LOG_WRN("Disconnected while allocating context");
    f0b8:	4b17      	ldr	r3, [pc, #92]	; (f118 <bt_conn_send_cb+0xdc>)
    f0ba:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    f0be:	9305      	str	r3, [sp, #20]
    f0c0:	2302      	movs	r3, #2
    f0c2:	4811      	ldr	r0, [pc, #68]	; (f108 <bt_conn_send_cb+0xcc>)
    f0c4:	aa04      	add	r2, sp, #16
    f0c6:	9304      	str	r3, [sp, #16]
    f0c8:	f009 fac7 	bl	1865a <z_log_msg_static_create.constprop.0>
	tx->cb = NULL;
    f0cc:	2300      	movs	r3, #0
	k_fifo_put(&free_tx, tx);
    f0ce:	4621      	mov	r1, r4
	tx->user_data = NULL;
    f0d0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	k_fifo_put(&free_tx, tx);
    f0d4:	480f      	ldr	r0, [pc, #60]	; (f114 <bt_conn_send_cb+0xd8>)
	tx->pending_no_cb = 0U;
    f0d6:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
    f0d8:	f00b fd45 	bl	1ab66 <k_queue_append>
}
    f0dc:	e7d4      	b.n	f088 <bt_conn_send_cb+0x4c>
		tx->pending_no_cb = 0U;
    f0de:	2300      	movs	r3, #0
		tx->user_data = user_data;
    f0e0:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    f0e4:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    f0e6:	61ac      	str	r4, [r5, #24]
	tx_data(buf)->is_cont = false;
    f0e8:	2400      	movs	r4, #0
	net_buf_put(&conn->tx_queue, buf);
    f0ea:	f106 0038 	add.w	r0, r6, #56	; 0x38
    f0ee:	4629      	mov	r1, r5
	tx_data(buf)->is_cont = false;
    f0f0:	772c      	strb	r4, [r5, #28]
	net_buf_put(&conn->tx_queue, buf);
    f0f2:	f00a fb62 	bl	197ba <net_buf_put>
	return 0;
    f0f6:	4620      	mov	r0, r4
    f0f8:	e7b6      	b.n	f068 <bt_conn_send_cb+0x2c>
    f0fa:	4614      	mov	r4, r2
    f0fc:	e7f3      	b.n	f0e6 <bt_conn_send_cb+0xaa>
			return -ENOBUFS;
    f0fe:	f06f 0068 	mvn.w	r0, #104	; 0x68
    f102:	e7b1      	b.n	f068 <bt_conn_send_cb+0x2c>
    f104:	0001d7a8 	.word	0x0001d7a8
    f108:	0001b880 	.word	0x0001b880
    f10c:	0001d7c5 	.word	0x0001d7c5
    f110:	200096b8 	.word	0x200096b8
    f114:	200086a0 	.word	0x200086a0
    f118:	0001d7d4 	.word	0x0001d7d4

0000f11c <bt_conn_prepare_events>:
{
    f11c:	b570      	push	{r4, r5, r6, lr}
    f11e:	4604      	mov	r4, r0
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
    f120:	481f      	ldr	r0, [pc, #124]	; (f1a0 <bt_conn_prepare_events+0x84>)
    f122:	f00c f93b 	bl	1b39c <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    f126:	4620      	mov	r0, r4
    f128:	2200      	movs	r2, #0
    f12a:	2101      	movs	r1, #1
    f12c:	4b1c      	ldr	r3, [pc, #112]	; (f1a0 <bt_conn_prepare_events+0x84>)
    f12e:	f00c f918 	bl	1b362 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f132:	4b1c      	ldr	r3, [pc, #112]	; (f1a4 <bt_conn_prepare_events+0x88>)
		if (!conn_prepare_events(conn, &events[ev_count])) {
    f134:	f104 0014 	add.w	r0, r4, #20
    f138:	e8d3 2faf 	lda	r2, [r3]
	if (!atomic_get(&conn->ref)) {
    f13c:	b90a      	cbnz	r2, f142 <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    f13e:	2001      	movs	r0, #1
}
    f140:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    f142:	f1a3 01bc 	sub.w	r1, r3, #188	; 0xbc
    f146:	f813 3cb2 	ldrb.w	r3, [r3, #-178]
    f14a:	b973      	cbnz	r3, f16a <bt_conn_prepare_events+0x4e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    f14c:	1d0b      	adds	r3, r1, #4
    f14e:	e8d3 2fef 	ldaex	r2, [r3]
    f152:	f022 0540 	bic.w	r5, r2, #64	; 0x40
    f156:	e8c3 5fe6 	stlex	r6, r5, [r3]
    f15a:	2e00      	cmp	r6, #0
    f15c:	d1f7      	bne.n	f14e <bt_conn_prepare_events+0x32>
    f15e:	0653      	lsls	r3, r2, #25
    f160:	d503      	bpl.n	f16a <bt_conn_prepare_events+0x4e>
		conn_cleanup(conn);
    f162:	4608      	mov	r0, r1
    f164:	f009 fa88 	bl	18678 <conn_cleanup>
		return -ENOTCONN;
    f168:	e7e9      	b.n	f13e <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
    f16a:	7a8b      	ldrb	r3, [r1, #10]
    f16c:	2b07      	cmp	r3, #7
    f16e:	d1e6      	bne.n	f13e <bt_conn_prepare_events+0x22>
	if (bt_dev.le.acl_mtu) {
    f170:	4b0d      	ldr	r3, [pc, #52]	; (f1a8 <bt_conn_prepare_events+0x8c>)
    f172:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
    f176:	2a00      	cmp	r2, #0
    f178:	d0e1      	beq.n	f13e <bt_conn_prepare_events+0x22>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
    f17a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (packets_waiting && !buffers_available) {
    f17e:	6b89      	ldr	r1, [r1, #56]	; 0x38
    f180:	b151      	cbz	r1, f198 <bt_conn_prepare_events+0x7c>
    f182:	b94a      	cbnz	r2, f198 <bt_conn_prepare_events+0x7c>
		k_poll_event_init(&events[0],
    f184:	2102      	movs	r1, #2
    f186:	f503 7384 	add.w	r3, r3, #264	; 0x108
		k_poll_event_init(&events[0],
    f18a:	f00c f8ea 	bl	1b362 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    f18e:	2301      	movs	r3, #1
			ev_count++;
    f190:	2002      	movs	r0, #2
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    f192:	f884 3020 	strb.w	r3, [r4, #32]
	return ev_count;
    f196:	e7d3      	b.n	f140 <bt_conn_prepare_events+0x24>
		k_poll_event_init(&events[0],
    f198:	2200      	movs	r2, #0
    f19a:	2104      	movs	r1, #4
    f19c:	4b03      	ldr	r3, [pc, #12]	; (f1ac <bt_conn_prepare_events+0x90>)
    f19e:	e7f4      	b.n	f18a <bt_conn_prepare_events+0x6e>
    f1a0:	2000830c 	.word	0x2000830c
    f1a4:	20009484 	.word	0x20009484
    f1a8:	20008000 	.word	0x20008000
    f1ac:	20009400 	.word	0x20009400

0000f1b0 <bt_conn_lookup_handle>:
{
    f1b0:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    f1b2:	2101      	movs	r1, #1
    f1b4:	4801      	ldr	r0, [pc, #4]	; (f1bc <bt_conn_lookup_handle+0xc>)
    f1b6:	f009 baaa 	b.w	1870e <conn_lookup_handle>
    f1ba:	bf00      	nop
    f1bc:	200093c8 	.word	0x200093c8

0000f1c0 <bt_conn_set_state>:
{
    f1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
    f1c4:	7a86      	ldrb	r6, [r0, #10]
{
    f1c6:	4604      	mov	r4, r0
	if (conn->state == state) {
    f1c8:	428e      	cmp	r6, r1
{
    f1ca:	460d      	mov	r5, r1
    f1cc:	af00      	add	r7, sp, #0
	if (conn->state == state) {
    f1ce:	d119      	bne.n	f204 <bt_conn_set_state+0x44>
	switch (state) {
    f1d0:	2e08      	cmp	r6, #8
    f1d2:	bf98      	it	ls
    f1d4:	4b70      	ldrls	r3, [pc, #448]	; (f398 <bt_conn_set_state+0x1d8>)
		LOG_WRN("no transition %s", state2str(state));
    f1d6:	466c      	mov	r4, sp
    f1d8:	b088      	sub	sp, #32
    f1da:	bf94      	ite	ls
    f1dc:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
	if (conn->state == state) {
    f1e0:	4b6e      	ldrhi	r3, [pc, #440]	; (f39c <bt_conn_set_state+0x1dc>)
		LOG_WRN("no transition %s", state2str(state));
    f1e2:	466a      	mov	r2, sp
    f1e4:	496e      	ldr	r1, [pc, #440]	; (f3a0 <bt_conn_set_state+0x1e0>)
    f1e6:	e9c2 1305 	strd	r1, r3, [r2, #20]
    f1ea:	f44f 7300 	mov.w	r3, #512	; 0x200
    f1ee:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
    f1f2:	8393      	strh	r3, [r2, #28]
    f1f4:	4b6b      	ldr	r3, [pc, #428]	; (f3a4 <bt_conn_set_state+0x1e4>)
    f1f6:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_WRN("no valid (%u) state was set", state);
    f1fa:	486b      	ldr	r0, [pc, #428]	; (f3a8 <bt_conn_set_state+0x1e8>)
    f1fc:	f009 fa2d 	bl	1865a <z_log_msg_static_create.constprop.0>
    f200:	46a5      	mov	sp, r4
    f202:	e04b      	b.n	f29c <bt_conn_set_state+0xdc>
	conn->state = state;
    f204:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
    f206:	b926      	cbnz	r6, f212 <bt_conn_set_state+0x52>
		if (conn->type != BT_CONN_TYPE_ISO) {
    f208:	7883      	ldrb	r3, [r0, #2]
    f20a:	2b08      	cmp	r3, #8
    f20c:	d001      	beq.n	f212 <bt_conn_set_state+0x52>
			bt_conn_ref(conn);
    f20e:	f009 fa56 	bl	186be <bt_conn_ref>
	switch (conn->state) {
    f212:	7aa3      	ldrb	r3, [r4, #10]
    f214:	2b08      	cmp	r3, #8
    f216:	f200 80ba 	bhi.w	f38e <bt_conn_set_state+0x1ce>
    f21a:	e8df f003 	tbb	[pc, r3]
    f21e:	0542      	.short	0x0542
    f220:	3f3f3f3f 	.word	0x3f3f3f3f
    f224:	243f      	.short	0x243f
    f226:	3f          	.byte	0x3f
    f227:	00          	.byte	0x00
		tx->pending_no_cb = 0U;
    f228:	f04f 0800 	mov.w	r8, #0
	if (bt_dev.le.acl_mtu) {
    f22c:	4d5f      	ldr	r5, [pc, #380]	; (f3ac <bt_conn_set_state+0x1ec>)
	return NULL;
    f22e:	f505 7684 	add.w	r6, r5, #264	; 0x108
	__asm__ volatile(
    f232:	f04f 0220 	mov.w	r2, #32
    f236:	f3ef 8311 	mrs	r3, BASEPRI
    f23a:	f382 8812 	msr	BASEPRI_MAX, r2
    f23e:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    f242:	69e2      	ldr	r2, [r4, #28]
    f244:	2a00      	cmp	r2, #0
    f246:	d07d      	beq.n	f344 <bt_conn_set_state+0x184>
			conn->pending_no_cb--;
    f248:	3a01      	subs	r2, #1
    f24a:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
    f24c:	f383 8811 	msr	BASEPRI, r3
    f250:	f3bf 8f6f 	isb	sy
	if (bt_dev.le.acl_mtu) {
    f254:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
	return NULL;
    f258:	2b00      	cmp	r3, #0
    f25a:	bf14      	ite	ne
    f25c:	4630      	movne	r0, r6
    f25e:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
    f260:	f006 f9d0 	bl	15604 <z_impl_k_sem_give>
}
    f264:	e7e5      	b.n	f232 <bt_conn_set_state+0x72>
		if (conn->type == BT_CONN_TYPE_SCO) {
    f266:	78a3      	ldrb	r3, [r4, #2]
    f268:	2b04      	cmp	r3, #4
    f26a:	d017      	beq.n	f29c <bt_conn_set_state+0xdc>
	z_impl_k_queue_init(queue);
    f26c:	f104 0038 	add.w	r0, r4, #56	; 0x38
    f270:	f00b fc6d 	bl	1ab4e <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    f274:	2100      	movs	r1, #0
    f276:	484e      	ldr	r0, [pc, #312]	; (f3b0 <bt_conn_set_state+0x1f0>)
    f278:	f007 f9cc 	bl	16614 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    f27c:	2300      	movs	r3, #0
	list->tail = NULL;
    f27e:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    f282:	78e3      	ldrb	r3, [r4, #3]
    f284:	2b01      	cmp	r3, #1
    f286:	d109      	bne.n	f29c <bt_conn_set_state+0xdc>
			conn->le.conn_param_retry_countdown =
    f288:	2303      	movs	r3, #3
			k_work_schedule(&conn->deferred_work,
    f28a:	f44f 3220 	mov.w	r2, #163840	; 0x28000
			conn->le.conn_param_retry_countdown =
    f28e:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
    f292:	f104 0058 	add.w	r0, r4, #88	; 0x58
    f296:	2300      	movs	r3, #0
    f298:	f006 fbd6 	bl	15a48 <k_work_schedule>
}
    f29c:	46bd      	mov	sp, r7
    f29e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
    f2a2:	78a3      	ldrb	r3, [r4, #2]
    f2a4:	2b04      	cmp	r3, #4
    f2a6:	d103      	bne.n	f2b0 <bt_conn_set_state+0xf0>
			bt_conn_unref(conn);
    f2a8:	4620      	mov	r0, r4
    f2aa:	f009 fa1c 	bl	186e6 <bt_conn_unref>
			break;
    f2ae:	e7f5      	b.n	f29c <bt_conn_set_state+0xdc>
		switch (old_state) {
    f2b0:	2e08      	cmp	r6, #8
    f2b2:	d8f3      	bhi.n	f29c <bt_conn_set_state+0xdc>
    f2b4:	a301      	add	r3, pc, #4	; (adr r3, f2bc <bt_conn_set_state+0xfc>)
    f2b6:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
    f2ba:	bf00      	nop
    f2bc:	0000f32d 	.word	0x0000f32d
    f2c0:	0000f2e1 	.word	0x0000f2e1
    f2c4:	0000f31f 	.word	0x0000f31f
    f2c8:	0000f2a9 	.word	0x0000f2a9
    f2cc:	0000f2a9 	.word	0x0000f2a9
    f2d0:	0000f31f 	.word	0x0000f31f
    f2d4:	0000f31f 	.word	0x0000f31f
    f2d8:	0000f32d 	.word	0x0000f32d
    f2dc:	0000f32d 	.word	0x0000f32d
			tx_notify(conn);
    f2e0:	4620      	mov	r0, r4
    f2e2:	f7ff fcaf 	bl	ec44 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
    f2e6:	78a3      	ldrb	r3, [r4, #2]
    f2e8:	2b01      	cmp	r3, #1
    f2ea:	d10a      	bne.n	f302 <bt_conn_set_state+0x142>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
    f2ec:	f104 0558 	add.w	r5, r4, #88	; 0x58
    f2f0:	4628      	mov	r0, r5
    f2f2:	f00b fd24 	bl	1ad3e <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
    f2f6:	f010 0f0c 	tst.w	r0, #12
    f2fa:	d002      	beq.n	f302 <bt_conn_set_state+0x142>
				k_work_cancel_delayable(&conn->deferred_work);
    f2fc:	4628      	mov	r0, r5
    f2fe:	f00b fd20 	bl	1ad42 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    f302:	3404      	adds	r4, #4
    f304:	e8d4 3fef 	ldaex	r3, [r4]
    f308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f30c:	e8c4 3fe2 	stlex	r2, r3, [r4]
    f310:	2a00      	cmp	r2, #0
    f312:	d1f7      	bne.n	f304 <bt_conn_set_state+0x144>
    f314:	2100      	movs	r1, #0
    f316:	4826      	ldr	r0, [pc, #152]	; (f3b0 <bt_conn_set_state+0x1f0>)
    f318:	f007 f97c 	bl	16614 <z_impl_k_poll_signal_raise>
    f31c:	e7be      	b.n	f29c <bt_conn_set_state+0xdc>
			if (conn->err) {
    f31e:	7a63      	ldrb	r3, [r4, #9]
    f320:	2b00      	cmp	r3, #0
    f322:	d0c1      	beq.n	f2a8 <bt_conn_set_state+0xe8>
				notify_connected(conn);
    f324:	4620      	mov	r0, r4
    f326:	f7ff fc5b 	bl	ebe0 <notify_connected>
    f32a:	e7bd      	b.n	f2a8 <bt_conn_set_state+0xe8>
			LOG_WRN("Invalid (%u) old state", state);
    f32c:	466c      	mov	r4, sp
    f32e:	b088      	sub	sp, #32
    f330:	466a      	mov	r2, sp
    f332:	4b20      	ldr	r3, [pc, #128]	; (f3b4 <bt_conn_set_state+0x1f4>)
		LOG_WRN("no valid (%u) state was set", state);
    f334:	e9c2 3505 	strd	r3, r5, [r2, #20]
    f338:	2303      	movs	r3, #3
    f33a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    f33e:	f842 3f10 	str.w	r3, [r2, #16]!
    f342:	e75a      	b.n	f1fa <bt_conn_set_state+0x3a>
	return list->head;
    f344:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
    f346:	b921      	cbnz	r1, f352 <bt_conn_set_state+0x192>
    f348:	f383 8811 	msr	BASEPRI, r3
    f34c:	f3bf 8f6f 	isb	sy
		if (!node) {
    f350:	e7a4      	b.n	f29c <bt_conn_set_state+0xdc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    f352:	69a0      	ldr	r0, [r4, #24]
	return node->next;
    f354:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    f356:	4281      	cmp	r1, r0
	list->tail = node;
    f358:	bf08      	it	eq
    f35a:	61a2      	streq	r2, [r4, #24]
	list->head = node;
    f35c:	6162      	str	r2, [r4, #20]
    f35e:	f383 8811 	msr	BASEPRI, r3
    f362:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    f366:	f04f 0220 	mov.w	r2, #32
    f36a:	f3ef 8311 	mrs	r3, BASEPRI
    f36e:	f382 8812 	msr	BASEPRI_MAX, r2
    f372:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    f376:	68ca      	ldr	r2, [r1, #12]
    f378:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    f37a:	f8c1 800c 	str.w	r8, [r1, #12]
	__asm__ volatile(
    f37e:	f383 8811 	msr	BASEPRI, r3
    f382:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
    f386:	4620      	mov	r0, r4
    f388:	f7ff fc8c 	bl	eca4 <conn_tx_destroy>
    f38c:	e762      	b.n	f254 <bt_conn_set_state+0x94>
		LOG_WRN("no valid (%u) state was set", state);
    f38e:	466c      	mov	r4, sp
    f390:	b088      	sub	sp, #32
    f392:	466a      	mov	r2, sp
    f394:	4b08      	ldr	r3, [pc, #32]	; (f3b8 <bt_conn_set_state+0x1f8>)
    f396:	e7cd      	b.n	f334 <bt_conn_set_state+0x174>
    f398:	0001bdfc 	.word	0x0001bdfc
    f39c:	0001d7fa 	.word	0x0001d7fa
    f3a0:	0001d804 	.word	0x0001d804
    f3a4:	01000003 	.word	0x01000003
    f3a8:	0001b880 	.word	0x0001b880
    f3ac:	20008000 	.word	0x20008000
    f3b0:	2000830c 	.word	0x2000830c
    f3b4:	0001d815 	.word	0x0001d815
    f3b8:	0001d82c 	.word	0x0001d82c

0000f3bc <bt_conn_index>:
		index = conn - acl_conns;
    f3bc:	4b03      	ldr	r3, [pc, #12]	; (f3cc <bt_conn_index+0x10>)
    f3be:	1ac0      	subs	r0, r0, r3
    f3c0:	4b03      	ldr	r3, [pc, #12]	; (f3d0 <bt_conn_index+0x14>)
    f3c2:	1180      	asrs	r0, r0, #6
    f3c4:	4358      	muls	r0, r3
}
    f3c6:	b2c0      	uxtb	r0, r0
    f3c8:	4770      	bx	lr
    f3ca:	bf00      	nop
    f3cc:	200093c8 	.word	0x200093c8
    f3d0:	aaaaaaab 	.word	0xaaaaaaab

0000f3d4 <bt_conn_create_pdu_timeout>:
{
    f3d4:	b538      	push	{r3, r4, r5, lr}
    f3d6:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    f3d8:	4908      	ldr	r1, [pc, #32]	; (f3fc <bt_conn_create_pdu_timeout+0x28>)
    f3da:	2800      	cmp	r0, #0
    f3dc:	bf08      	it	eq
    f3de:	4608      	moveq	r0, r1
    f3e0:	f00a f9b7 	bl	19752 <net_buf_alloc_fixed>
	if (!buf) {
    f3e4:	4604      	mov	r4, r0
    f3e6:	b918      	cbnz	r0, f3f0 <bt_conn_create_pdu_timeout+0x1c>
}
    f3e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f3ec:	f7ff bc16 	b.w	ec1c <bt_conn_create_pdu_timeout.part.0>
	net_buf_simple_reserve(&buf->b, reserve);
    f3f0:	1d69      	adds	r1, r5, #5
    f3f2:	300c      	adds	r0, #12
    f3f4:	f00a fa09 	bl	1980a <net_buf_simple_reserve>
    f3f8:	4620      	mov	r0, r4
    f3fa:	bd38      	pop	{r3, r4, r5, pc}
    f3fc:	200086e4 	.word	0x200086e4

0000f400 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
    f400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f402:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    f404:	1d03      	adds	r3, r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f406:	e8d3 2faf 	lda	r2, [r3]
    f40a:	0592      	lsls	r2, r2, #22
    f40c:	d515      	bpl.n	f43a <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
    f40e:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    f412:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
    f416:	4291      	cmp	r1, r2
    f418:	d80f      	bhi.n	f43a <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
    f41a:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
    f41e:	4291      	cmp	r1, r2
    f420:	d30b      	bcc.n	f43a <notify_le_param_updated+0x3a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
    f422:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
    f426:	4291      	cmp	r1, r2
    f428:	d107      	bne.n	f43a <notify_le_param_updated+0x3a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    f42a:	e8d3 1fef 	ldaex	r1, [r3]
    f42e:	f421 7100 	bic.w	r1, r1, #512	; 0x200
    f432:	e8c3 1fe2 	stlex	r2, r1, [r3]
    f436:	2a00      	cmp	r2, #0
    f438:	d1f7      	bne.n	f42a <notify_le_param_updated+0x2a>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    f43a:	4b10      	ldr	r3, [pc, #64]	; (f47c <notify_le_param_updated+0x7c>)
    f43c:	681d      	ldr	r5, [r3, #0]
    f43e:	b925      	cbnz	r5, f44a <notify_le_param_updated+0x4a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    f440:	4d0f      	ldr	r5, [pc, #60]	; (f480 <notify_le_param_updated+0x80>)
    f442:	4f10      	ldr	r7, [pc, #64]	; (f484 <notify_le_param_updated+0x84>)
    f444:	42bd      	cmp	r5, r7
    f446:	d30c      	bcc.n	f462 <notify_le_param_updated+0x62>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
    f448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
    f44a:	68ee      	ldr	r6, [r5, #12]
    f44c:	b13e      	cbz	r6, f45e <notify_le_param_updated+0x5e>
			cb->le_param_updated(conn, conn->le.interval,
    f44e:	4620      	mov	r0, r4
    f450:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    f454:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    f458:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    f45c:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    f45e:	692d      	ldr	r5, [r5, #16]
    f460:	e7ed      	b.n	f43e <notify_le_param_updated+0x3e>
		if (cb->le_param_updated) {
    f462:	68ee      	ldr	r6, [r5, #12]
    f464:	b13e      	cbz	r6, f476 <notify_le_param_updated+0x76>
			cb->le_param_updated(conn, conn->le.interval,
    f466:	4620      	mov	r0, r4
    f468:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    f46c:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    f470:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    f474:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    f476:	3514      	adds	r5, #20
    f478:	e7e4      	b.n	f444 <notify_le_param_updated+0x44>
    f47a:	bf00      	nop
    f47c:	200098cc 	.word	0x200098cc
    f480:	0001b830 	.word	0x0001b830
    f484:	0001b830 	.word	0x0001b830

0000f488 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    f488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f48c:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    f48e:	4608      	mov	r0, r1
{
    f490:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
    f492:	f008 ff95 	bl	183c0 <bt_le_conn_params_valid>
    f496:	4605      	mov	r5, r0
    f498:	b918      	cbnz	r0, f4a2 <le_param_req+0x1a>
		return false;
    f49a:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
    f49c:	4628      	mov	r0, r5
    f49e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    f4a2:	4b13      	ldr	r3, [pc, #76]	; (f4f0 <le_param_req+0x68>)
    f4a4:	681e      	ldr	r6, [r3, #0]
    f4a6:	b946      	cbnz	r6, f4ba <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    f4a8:	4e12      	ldr	r6, [pc, #72]	; (f4f4 <le_param_req+0x6c>)
    f4aa:	f8df 804c 	ldr.w	r8, [pc, #76]	; f4f8 <le_param_req+0x70>
    f4ae:	4546      	cmp	r6, r8
    f4b0:	d2f4      	bcs.n	f49c <le_param_req+0x14>
		if (!cb->le_param_req) {
    f4b2:	68b3      	ldr	r3, [r6, #8]
    f4b4:	b983      	cbnz	r3, f4d8 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    f4b6:	3614      	adds	r6, #20
    f4b8:	e7f9      	b.n	f4ae <le_param_req+0x26>
		if (!cb->le_param_req) {
    f4ba:	68b3      	ldr	r3, [r6, #8]
    f4bc:	b90b      	cbnz	r3, f4c2 <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
    f4be:	6936      	ldr	r6, [r6, #16]
    f4c0:	e7f1      	b.n	f4a6 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
    f4c2:	4621      	mov	r1, r4
    f4c4:	4638      	mov	r0, r7
    f4c6:	4798      	blx	r3
    f4c8:	2800      	cmp	r0, #0
    f4ca:	d0e6      	beq.n	f49a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    f4cc:	4620      	mov	r0, r4
    f4ce:	f008 ff77 	bl	183c0 <bt_le_conn_params_valid>
    f4d2:	2800      	cmp	r0, #0
    f4d4:	d1f3      	bne.n	f4be <le_param_req+0x36>
    f4d6:	e7e0      	b.n	f49a <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
    f4d8:	4621      	mov	r1, r4
    f4da:	4638      	mov	r0, r7
    f4dc:	4798      	blx	r3
    f4de:	2800      	cmp	r0, #0
    f4e0:	d0db      	beq.n	f49a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    f4e2:	4620      	mov	r0, r4
    f4e4:	f008 ff6c 	bl	183c0 <bt_le_conn_params_valid>
    f4e8:	2800      	cmp	r0, #0
    f4ea:	d1e4      	bne.n	f4b6 <le_param_req+0x2e>
    f4ec:	e7d5      	b.n	f49a <le_param_req+0x12>
    f4ee:	bf00      	nop
    f4f0:	200098cc 	.word	0x200098cc
    f4f4:	0001b830 	.word	0x0001b830
    f4f8:	0001b830 	.word	0x0001b830

0000f4fc <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
    f4fc:	4b02      	ldr	r3, [pc, #8]	; (f508 <bt_conn_cb_register+0xc>)
    f4fe:	681a      	ldr	r2, [r3, #0]
	callback_list = cb;
    f500:	6018      	str	r0, [r3, #0]
	cb->_next = callback_list;
    f502:	6102      	str	r2, [r0, #16]
}
    f504:	4770      	bx	lr
    f506:	bf00      	nop
    f508:	200098cc 	.word	0x200098cc

0000f50c <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    f50c:	b570      	push	{r4, r5, r6, lr}
    f50e:	4606      	mov	r6, r0
    f510:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    f512:	4809      	ldr	r0, [pc, #36]	; (f538 <bt_conn_add_le+0x2c>)
    f514:	2101      	movs	r1, #1
    f516:	f7ff fcc7 	bl	eea8 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
    f51a:	4604      	mov	r4, r0
    f51c:	b150      	cbz	r0, f534 <bt_conn_add_le+0x28>
		return NULL;
	}

	conn->id = id;
    f51e:	7206      	strb	r6, [r0, #8]
    f520:	2207      	movs	r2, #7
    f522:	4629      	mov	r1, r5
    f524:	3088      	adds	r0, #136	; 0x88
    f526:	f008 fe42 	bl	181ae <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    f52a:	2301      	movs	r3, #1
    f52c:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    f52e:	4b03      	ldr	r3, [pc, #12]	; (f53c <bt_conn_add_le+0x30>)
    f530:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    f534:	4620      	mov	r0, r4
    f536:	bd70      	pop	{r4, r5, r6, pc}
    f538:	200093c8 	.word	0x200093c8
    f53c:	00280018 	.word	0x00280018

0000f540 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    f540:	b570      	push	{r4, r5, r6, lr}
    f542:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    f544:	480a      	ldr	r0, [pc, #40]	; (f570 <bt_conn_lookup_addr_le+0x30>)
{
    f546:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    f548:	f009 f8b9 	bl	186be <bt_conn_ref>
    f54c:	4604      	mov	r4, r0

		if (!conn) {
    f54e:	b120      	cbz	r0, f55a <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    f550:	7883      	ldrb	r3, [r0, #2]
    f552:	2b01      	cmp	r3, #1
    f554:	d004      	beq.n	f560 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
    f556:	f009 f8c6 	bl	186e6 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    f55a:	2400      	movs	r4, #0
}
    f55c:	4620      	mov	r0, r4
    f55e:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    f560:	4632      	mov	r2, r6
    f562:	4629      	mov	r1, r5
    f564:	f009 f8fe 	bl	18764 <bt_conn_is_peer_addr_le>
    f568:	2800      	cmp	r0, #0
    f56a:	d1f7      	bne.n	f55c <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
    f56c:	4620      	mov	r0, r4
    f56e:	e7f2      	b.n	f556 <bt_conn_lookup_addr_le+0x16>
    f570:	200093c8 	.word	0x200093c8

0000f574 <bt_conn_exists_le>:
{
    f574:	b5b0      	push	{r4, r5, r7, lr}
    f576:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    f578:	f7ff ffe2 	bl	f540 <bt_conn_lookup_addr_le>
	if (conn) {
    f57c:	4604      	mov	r4, r0
    f57e:	b1e8      	cbz	r0, f5bc <bt_conn_exists_le+0x48>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
    f580:	7a83      	ldrb	r3, [r0, #10]
    f582:	466d      	mov	r5, sp
    f584:	2b08      	cmp	r3, #8
    f586:	bf98      	it	ls
    f588:	4a0d      	ldrls	r2, [pc, #52]	; (f5c0 <bt_conn_exists_le+0x4c>)
    f58a:	b088      	sub	sp, #32
    f58c:	bf94      	ite	ls
    f58e:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
    f592:	4b0c      	ldrhi	r3, [pc, #48]	; (f5c4 <bt_conn_exists_le+0x50>)
    f594:	466a      	mov	r2, sp
    f596:	490c      	ldr	r1, [pc, #48]	; (f5c8 <bt_conn_exists_le+0x54>)
    f598:	480c      	ldr	r0, [pc, #48]	; (f5cc <bt_conn_exists_le+0x58>)
    f59a:	e9c2 1305 	strd	r1, r3, [r2, #20]
    f59e:	f44f 7300 	mov.w	r3, #512	; 0x200
    f5a2:	8393      	strh	r3, [r2, #28]
    f5a4:	4b0a      	ldr	r3, [pc, #40]	; (f5d0 <bt_conn_exists_le+0x5c>)
    f5a6:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
    f5aa:	f842 3f10 	str.w	r3, [r2, #16]!
    f5ae:	f009 f854 	bl	1865a <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
    f5b2:	4620      	mov	r0, r4
    f5b4:	46ad      	mov	sp, r5
    f5b6:	f009 f896 	bl	186e6 <bt_conn_unref>
		return true;
    f5ba:	2001      	movs	r0, #1
}
    f5bc:	46bd      	mov	sp, r7
    f5be:	bdb0      	pop	{r4, r5, r7, pc}
    f5c0:	0001bdfc 	.word	0x0001bdfc
    f5c4:	0001d7fa 	.word	0x0001d7fa
    f5c8:	0001d848 	.word	0x0001d848
    f5cc:	0001b880 	.word	0x0001b880
    f5d0:	01000003 	.word	0x01000003

0000f5d4 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    f5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f5d6:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    f5d8:	480e      	ldr	r0, [pc, #56]	; (f614 <bt_conn_lookup_state_le+0x40>)
{
    f5da:	460e      	mov	r6, r1
    f5dc:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    f5de:	f009 f86e 	bl	186be <bt_conn_ref>

		if (!conn) {
    f5e2:	4604      	mov	r4, r0
    f5e4:	b120      	cbz	r0, f5f0 <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    f5e6:	7883      	ldrb	r3, [r0, #2]
    f5e8:	2b01      	cmp	r3, #1
    f5ea:	d003      	beq.n	f5f4 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
    f5ec:	f009 f87b 	bl	186e6 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    f5f0:	2400      	movs	r4, #0
    f5f2:	e00d      	b.n	f610 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    f5f4:	b136      	cbz	r6, f604 <bt_conn_lookup_state_le+0x30>
    f5f6:	4632      	mov	r2, r6
    f5f8:	4629      	mov	r1, r5
    f5fa:	f009 f8b3 	bl	18764 <bt_conn_is_peer_addr_le>
    f5fe:	b908      	cbnz	r0, f604 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
    f600:	4620      	mov	r0, r4
    f602:	e7f3      	b.n	f5ec <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
    f604:	7aa3      	ldrb	r3, [r4, #10]
    f606:	42bb      	cmp	r3, r7
    f608:	d1fa      	bne.n	f600 <bt_conn_lookup_state_le+0x2c>
    f60a:	7a23      	ldrb	r3, [r4, #8]
    f60c:	42ab      	cmp	r3, r5
    f60e:	d1f7      	bne.n	f600 <bt_conn_lookup_state_le+0x2c>
}
    f610:	4620      	mov	r0, r4
    f612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f614:	200093c8 	.word	0x200093c8

0000f618 <send_conn_le_param_update>:
{
    f618:	b538      	push	{r3, r4, r5, lr}
    f61a:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    f61c:	4608      	mov	r0, r1
{
    f61e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    f620:	f008 fece 	bl	183c0 <bt_le_conn_params_valid>
    f624:	b338      	cbz	r0, f676 <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    f626:	4b15      	ldr	r3, [pc, #84]	; (f67c <send_conn_le_param_update+0x64>)
    f628:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
    f62c:	0799      	lsls	r1, r3, #30
    f62e:	d407      	bmi.n	f640 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
    f630:	78e3      	ldrb	r3, [r4, #3]
    f632:	b173      	cbz	r3, f652 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
    f634:	4629      	mov	r1, r5
    f636:	4620      	mov	r0, r4
}
    f638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    f63c:	f000 ba9c 	b.w	fb78 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    f640:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
    f644:	079a      	lsls	r2, r3, #30
    f646:	d5f3      	bpl.n	f630 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f648:	1d23      	adds	r3, r4, #4
    f64a:	e8d3 3faf 	lda	r3, [r3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    f64e:	055b      	lsls	r3, r3, #21
    f650:	d4ee      	bmi.n	f630 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    f652:	4629      	mov	r1, r5
    f654:	4620      	mov	r0, r4
    f656:	f009 f8a5 	bl	187a4 <bt_conn_le_conn_update>
		if (rc == 0) {
    f65a:	b958      	cbnz	r0, f674 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
    f65c:	882b      	ldrh	r3, [r5, #0]
    f65e:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
    f662:	886b      	ldrh	r3, [r5, #2]
    f664:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
    f668:	88ab      	ldrh	r3, [r5, #4]
    f66a:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    f66e:	88eb      	ldrh	r3, [r5, #6]
    f670:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    f674:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    f676:	f06f 0015 	mvn.w	r0, #21
    f67a:	e7fb      	b.n	f674 <send_conn_le_param_update+0x5c>
    f67c:	20008000 	.word	0x20008000

0000f680 <deferred_work>:
{
    f680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f684:	b082      	sub	sp, #8
	if (conn->state == BT_CONN_DISCONNECTED) {
    f686:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
    f68a:	4604      	mov	r4, r0
    f68c:	af00      	add	r7, sp, #0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
    f68e:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    f692:	bb0b      	cbnz	r3, f6d8 <deferred_work+0x58>
		bt_l2cap_disconnected(conn);
    f694:	4630      	mov	r0, r6
    f696:	f009 f8e2 	bl	1885e <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    f69a:	4b38      	ldr	r3, [pc, #224]	; (f77c <deferred_work+0xfc>)
    f69c:	681d      	ldr	r5, [r3, #0]
    f69e:	b95d      	cbnz	r5, f6b8 <deferred_work+0x38>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    f6a0:	4d37      	ldr	r5, [pc, #220]	; (f780 <deferred_work+0x100>)
    f6a2:	f8df 80e0 	ldr.w	r8, [pc, #224]	; f784 <deferred_work+0x104>
    f6a6:	4545      	cmp	r5, r8
    f6a8:	d30e      	bcc.n	f6c8 <deferred_work+0x48>
		bt_conn_unref(conn);
    f6aa:	4630      	mov	r0, r6
    f6ac:	f009 f81b 	bl	186e6 <bt_conn_unref>
}
    f6b0:	3708      	adds	r7, #8
    f6b2:	46bd      	mov	sp, r7
    f6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cb->disconnected) {
    f6b8:	686b      	ldr	r3, [r5, #4]
    f6ba:	b11b      	cbz	r3, f6c4 <deferred_work+0x44>
			cb->disconnected(conn, conn->err);
    f6bc:	4630      	mov	r0, r6
    f6be:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    f6c2:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    f6c4:	692d      	ldr	r5, [r5, #16]
    f6c6:	e7ea      	b.n	f69e <deferred_work+0x1e>
		if (cb->disconnected) {
    f6c8:	686b      	ldr	r3, [r5, #4]
    f6ca:	b11b      	cbz	r3, f6d4 <deferred_work+0x54>
			cb->disconnected(conn, conn->err);
    f6cc:	4630      	mov	r0, r6
    f6ce:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    f6d2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    f6d4:	3514      	adds	r5, #20
    f6d6:	e7e6      	b.n	f6a6 <deferred_work+0x26>
	if (conn->type != BT_CONN_TYPE_LE) {
    f6d8:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    f6dc:	2b01      	cmp	r3, #1
    f6de:	d1e7      	bne.n	f6b0 <deferred_work+0x30>
	if (atomic_test_and_clear_bit(conn->flags,
    f6e0:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    f6e4:	e8d5 3fef 	ldaex	r3, [r5]
    f6e8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    f6ec:	e8c5 2fe1 	stlex	r1, r2, [r5]
    f6f0:	2900      	cmp	r1, #0
    f6f2:	d1f7      	bne.n	f6e4 <deferred_work+0x64>
    f6f4:	0599      	lsls	r1, r3, #22
    f6f6:	d529      	bpl.n	f74c <deferred_work+0xcc>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    f6f8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		err = send_conn_le_param_update(conn, param);
    f6fa:	4639      	mov	r1, r7
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    f6fc:	603b      	str	r3, [r7, #0]
    f6fe:	6d23      	ldr	r3, [r4, #80]	; 0x50
		err = send_conn_le_param_update(conn, param);
    f700:	4630      	mov	r0, r6
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    f702:	607b      	str	r3, [r7, #4]
		err = send_conn_le_param_update(conn, param);
    f704:	f7ff ff88 	bl	f618 <send_conn_le_param_update>
		if (!err) {
    f708:	b980      	cbnz	r0, f72c <deferred_work+0xac>
    f70a:	e8d5 3fef 	ldaex	r3, [r5]
    f70e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    f712:	e8c5 3fe2 	stlex	r2, r3, [r5]
    f716:	2a00      	cmp	r2, #0
    f718:	d1f7      	bne.n	f70a <deferred_work+0x8a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    f71a:	e8d5 3fef 	ldaex	r3, [r5]
    f71e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f722:	e8c5 3fe2 	stlex	r2, r3, [r5]
    f726:	2a00      	cmp	r2, #0
    f728:	d0c2      	beq.n	f6b0 <deferred_work+0x30>
    f72a:	e7f6      	b.n	f71a <deferred_work+0x9a>
			LOG_WRN("Send LE param update failed (err %d)", err);
    f72c:	466c      	mov	r4, sp
    f72e:	b088      	sub	sp, #32
    f730:	466a      	mov	r2, sp
    f732:	4b15      	ldr	r3, [pc, #84]	; (f788 <deferred_work+0x108>)
			LOG_WRN("Send auto LE param update failed (err %d)",
    f734:	e9c2 3005 	strd	r3, r0, [r2, #20]
    f738:	2303      	movs	r3, #3
    f73a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    f73e:	4813      	ldr	r0, [pc, #76]	; (f78c <deferred_work+0x10c>)
    f740:	f842 3f10 	str.w	r3, [r2, #16]!
    f744:	f008 ff89 	bl	1865a <z_log_msg_static_create.constprop.0>
    f748:	46a5      	mov	sp, r4
    f74a:	e7e6      	b.n	f71a <deferred_work+0x9a>
		param = BT_LE_CONN_PARAM(
    f74c:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
    f750:	4a0f      	ldr	r2, [pc, #60]	; (f790 <deferred_work+0x110>)
		err = send_conn_le_param_update(conn, param);
    f752:	4639      	mov	r1, r7
    f754:	4630      	mov	r0, r6
		param = BT_LE_CONN_PARAM(
    f756:	e9c7 2300 	strd	r2, r3, [r7]
		err = send_conn_le_param_update(conn, param);
    f75a:	f7ff ff5d 	bl	f618 <send_conn_le_param_update>
		if (!err) {
    f75e:	b940      	cbnz	r0, f772 <deferred_work+0xf2>
    f760:	e8d5 3fef 	ldaex	r3, [r5]
    f764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    f768:	e8c5 3fe2 	stlex	r2, r3, [r5]
    f76c:	2a00      	cmp	r2, #0
    f76e:	d0d4      	beq.n	f71a <deferred_work+0x9a>
    f770:	e7f6      	b.n	f760 <deferred_work+0xe0>
			LOG_WRN("Send auto LE param update failed (err %d)",
    f772:	466c      	mov	r4, sp
    f774:	b088      	sub	sp, #32
    f776:	466a      	mov	r2, sp
    f778:	4b06      	ldr	r3, [pc, #24]	; (f794 <deferred_work+0x114>)
    f77a:	e7db      	b.n	f734 <deferred_work+0xb4>
    f77c:	200098cc 	.word	0x200098cc
    f780:	0001b830 	.word	0x0001b830
    f784:	0001b830 	.word	0x0001b830
    f788:	0001d86b 	.word	0x0001d86b
    f78c:	0001b880 	.word	0x0001b880
    f790:	00280018 	.word	0x00280018
    f794:	0001d890 	.word	0x0001d890

0000f798 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
    f798:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    f79a:	4801      	ldr	r0, [pc, #4]	; (f7a0 <bt_conn_create_frag_timeout+0x8>)
    f79c:	f7ff be1a 	b.w	f3d4 <bt_conn_create_pdu_timeout>
    f7a0:	20008768 	.word	0x20008768

0000f7a4 <bt_conn_process_tx>:
{
    f7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    f7a8:	7a83      	ldrb	r3, [r0, #10]
{
    f7aa:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    f7ac:	b973      	cbnz	r3, f7cc <bt_conn_process_tx+0x28>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    f7ae:	1d03      	adds	r3, r0, #4
    f7b0:	e8d3 2fef 	ldaex	r2, [r3]
    f7b4:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    f7b8:	e8c3 1fe4 	stlex	r4, r1, [r3]
    f7bc:	2c00      	cmp	r4, #0
    f7be:	d1f7      	bne.n	f7b0 <bt_conn_process_tx+0xc>
    f7c0:	0653      	lsls	r3, r2, #25
    f7c2:	d503      	bpl.n	f7cc <bt_conn_process_tx+0x28>
}
    f7c4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		conn_cleanup(conn);
    f7c8:	f008 bf56 	b.w	18678 <conn_cleanup>
	return z_impl_k_queue_peek_head(queue);
    f7cc:	f105 0038 	add.w	r0, r5, #56	; 0x38
    f7d0:	f00b f9de 	bl	1ab90 <z_impl_k_queue_peek_head>
	BT_ASSERT(buf);
    f7d4:	4604      	mov	r4, r0
    f7d6:	b960      	cbnz	r0, f7f2 <bt_conn_process_tx+0x4e>
    f7d8:	f44f 735d 	mov.w	r3, #884	; 0x374
    f7dc:	4a32      	ldr	r2, [pc, #200]	; (f8a8 <bt_conn_process_tx+0x104>)
    f7de:	4933      	ldr	r1, [pc, #204]	; (f8ac <bt_conn_process_tx+0x108>)
    f7e0:	4833      	ldr	r0, [pc, #204]	; (f8b0 <bt_conn_process_tx+0x10c>)
    f7e2:	f007 fb0b 	bl	16dfc <assert_print>
    f7e6:	4040      	eors	r0, r0
    f7e8:	f380 8811 	msr	BASEPRI, r0
    f7ec:	f04f 0003 	mov.w	r0, #3
    f7f0:	df02      	svc	2
	buf = net_buf_ref(buf);
    f7f2:	4620      	mov	r0, r4
    f7f4:	f009 ffe3 	bl	197be <net_buf_ref>
	return bt_dev.le.acl_mtu;
    f7f8:	f8df 90b8 	ldr.w	r9, [pc, #184]	; f8b4 <bt_conn_process_tx+0x110>
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
    f7fc:	8a02      	ldrh	r2, [r0, #16]
    f7fe:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
	buf = net_buf_ref(buf);
    f802:	4604      	mov	r4, r0
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
    f804:	429a      	cmp	r2, r3
    f806:	7f02      	ldrb	r2, [r0, #28]
    f808:	d807      	bhi.n	f81a <bt_conn_process_tx+0x76>
    f80a:	b932      	cbnz	r2, f81a <bt_conn_process_tx+0x76>
		return send_frag(conn, buf, NULL, FRAG_SINGLE);
    f80c:	2302      	movs	r3, #2
	return send_frag(conn, buf, NULL, FRAG_END);
    f80e:	4621      	mov	r1, r4
    f810:	4628      	mov	r0, r5
    f812:	f7ff fa5d 	bl	ecd0 <send_frag>
    f816:	4606      	mov	r6, r0
    f818:	e030      	b.n	f87c <bt_conn_process_tx+0xd8>
	if (tx_data(buf)->is_cont) {
    f81a:	4617      	mov	r7, r2
		frag = bt_conn_create_frag(0);
    f81c:	f04f 0a00 	mov.w	sl, #0
	while (buf->len > conn_mtu(conn)) {
    f820:	8a22      	ldrh	r2, [r4, #16]
    f822:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
    f826:	429a      	cmp	r2, r3
    f828:	d804      	bhi.n	f834 <bt_conn_process_tx+0x90>
	tx_data(buf)->is_cont = true;
    f82a:	2301      	movs	r3, #1
	return send_frag(conn, buf, NULL, FRAG_END);
    f82c:	2200      	movs	r2, #0
	tx_data(buf)->is_cont = true;
    f82e:	7723      	strb	r3, [r4, #28]
	return send_frag(conn, buf, NULL, FRAG_END);
    f830:	2303      	movs	r3, #3
    f832:	e7ec      	b.n	f80e <bt_conn_process_tx+0x6a>
		frag = bt_conn_create_frag(0);
    f834:	f04f 33ff 	mov.w	r3, #4294967295
    f838:	f04f 32ff 	mov.w	r2, #4294967295
    f83c:	2000      	movs	r0, #0
    f83e:	f7ff ffab 	bl	f798 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    f842:	7aab      	ldrb	r3, [r5, #10]
		frag = bt_conn_create_frag(0);
    f844:	4680      	mov	r8, r0
	if (conn->state != BT_CONN_CONNECTED) {
    f846:	2b07      	cmp	r3, #7
    f848:	d006      	beq.n	f858 <bt_conn_process_tx+0xb4>
		net_buf_unref(frag);
    f84a:	f002 f993 	bl	11b74 <net_buf_unref>
	net_buf_unref(buf);
    f84e:	4620      	mov	r0, r4
}
    f850:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	net_buf_unref(buf);
    f854:	f002 b98e 	b.w	11b74 <net_buf_unref>
		err = send_frag(conn, buf, frag, flags);
    f858:	4602      	mov	r2, r0
	tx_data(frag)->tx = NULL;
    f85a:	f8c0 a018 	str.w	sl, [r0, #24]
	tx_data(frag)->is_cont = false;
    f85e:	f880 a01c 	strb.w	sl, [r0, #28]
		err = send_frag(conn, buf, frag, flags);
    f862:	463b      	mov	r3, r7
    f864:	4621      	mov	r1, r4
    f866:	4628      	mov	r0, r5
    f868:	f7ff fa32 	bl	ecd0 <send_frag>
		if (err) {
    f86c:	4606      	mov	r6, r0
    f86e:	b1b8      	cbz	r0, f8a0 <bt_conn_process_tx+0xfc>
			tx_data(buf)->is_cont = flags != FRAG_START;
    f870:	f007 0701 	and.w	r7, r7, #1
			net_buf_unref(frag);
    f874:	4640      	mov	r0, r8
			tx_data(buf)->is_cont = flags != FRAG_START;
    f876:	7727      	strb	r7, [r4, #28]
			net_buf_unref(frag);
    f878:	f002 f97c 	bl	11b74 <net_buf_unref>
	net_buf_unref(buf);
    f87c:	4620      	mov	r0, r4
    f87e:	f002 f979 	bl	11b74 <net_buf_unref>
	if (err  == -EIO) {
    f882:	3605      	adds	r6, #5
    f884:	d10e      	bne.n	f8a4 <bt_conn_process_tx+0x100>
		tx_data(buf)->tx = NULL;
    f886:	2300      	movs	r3, #0
		struct bt_conn_tx *tx = tx_data(buf)->tx;
    f888:	69a6      	ldr	r6, [r4, #24]
		net_buf_unref(buf);
    f88a:	4620      	mov	r0, r4
		tx_data(buf)->tx = NULL;
    f88c:	61a3      	str	r3, [r4, #24]
		net_buf_unref(buf);
    f88e:	f002 f971 	bl	11b74 <net_buf_unref>
		if (tx) {
    f892:	b13e      	cbz	r6, f8a4 <bt_conn_process_tx+0x100>
			conn_tx_destroy(conn, tx);
    f894:	4631      	mov	r1, r6
    f896:	4628      	mov	r0, r5
}
    f898:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			conn_tx_destroy(conn, tx);
    f89c:	f7ff ba02 	b.w	eca4 <conn_tx_destroy>
		flags = FRAG_CONT;
    f8a0:	2701      	movs	r7, #1
    f8a2:	e7bd      	b.n	f820 <bt_conn_process_tx+0x7c>
}
    f8a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f8a8:	0001d8ba 	.word	0x0001d8ba
    f8ac:	0001de60 	.word	0x0001de60
    f8b0:	0001ce6a 	.word	0x0001ce6a
    f8b4:	20008000 	.word	0x20008000

0000f8b8 <bt_conn_lookup_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
    f8b8:	b910      	cbnz	r0, f8c0 <bt_conn_lookup_index+0x8>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
    f8ba:	4802      	ldr	r0, [pc, #8]	; (f8c4 <bt_conn_lookup_index+0xc>)
    f8bc:	f008 beff 	b.w	186be <bt_conn_ref>
}
    f8c0:	2000      	movs	r0, #0
    f8c2:	4770      	bx	lr
    f8c4:	200093c8 	.word	0x200093c8

0000f8c8 <bt_conn_init>:

int bt_conn_init(void)
{
    f8c8:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
    f8ca:	480c      	ldr	r0, [pc, #48]	; (f8fc <bt_conn_init+0x34>)
    f8cc:	f00b f93f 	bl	1ab4e <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    f8d0:	490b      	ldr	r1, [pc, #44]	; (f900 <bt_conn_init+0x38>)
    f8d2:	480a      	ldr	r0, [pc, #40]	; (f8fc <bt_conn_init+0x34>)
    f8d4:	f00b f947 	bl	1ab66 <k_queue_append>
    f8d8:	490a      	ldr	r1, [pc, #40]	; (f904 <bt_conn_init+0x3c>)
    f8da:	4808      	ldr	r0, [pc, #32]	; (f8fc <bt_conn_init+0x34>)
    f8dc:	f00b f943 	bl	1ab66 <k_queue_append>
    f8e0:	4909      	ldr	r1, [pc, #36]	; (f908 <bt_conn_init+0x40>)
    f8e2:	4806      	ldr	r0, [pc, #24]	; (f8fc <bt_conn_init+0x34>)
    f8e4:	f00b f93f 	bl	1ab66 <k_queue_append>
	}

	bt_att_init();
    f8e8:	f001 f8c2 	bl	10a70 <bt_att_init>

	err = bt_smp_init();
    f8ec:	f009 ff2e 	bl	1974c <bt_smp_init>
	if (err) {
    f8f0:	4604      	mov	r4, r0
    f8f2:	b908      	cbnz	r0, f8f8 <bt_conn_init+0x30>
		return err;
	}

	bt_l2cap_init();
    f8f4:	f008 fff0 	bl	188d8 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    f8f8:	4620      	mov	r0, r4
    f8fa:	bd10      	pop	{r4, pc}
    f8fc:	200086a0 	.word	0x200086a0
    f900:	2000989c 	.word	0x2000989c
    f904:	200098ac 	.word	0x200098ac
    f908:	200098bc 	.word	0x200098bc

0000f90c <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    f90c:	b580      	push	{r7, lr}
    f90e:	af00      	add	r7, sp, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
    f910:	b088      	sub	sp, #32
    f912:	466a      	mov	r2, sp
    f914:	4b06      	ldr	r3, [pc, #24]	; (f930 <l2cap_create_le_sig_pdu.part.0+0x24>)
    f916:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f91a:	e9c2 3005 	strd	r3, r0, [r2, #20]
    f91e:	2303      	movs	r3, #3
    f920:	4804      	ldr	r0, [pc, #16]	; (f934 <l2cap_create_le_sig_pdu.part.0+0x28>)
    f922:	f842 3f10 	str.w	r3, [r2, #16]!
    f926:	f008 ff66 	bl	187f6 <z_log_msg_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
    f92a:	2000      	movs	r0, #0
    f92c:	46bd      	mov	sp, r7
    f92e:	bd80      	pop	{r7, pc}
    f930:	0001d963 	.word	0x0001d963
    f934:	0001b8b8 	.word	0x0001b8b8

0000f938 <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
    f938:	b580      	push	{r7, lr}
    f93a:	af00      	add	r7, sp, #0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);
    f93c:	b088      	sub	sp, #32
    f93e:	466a      	mov	r2, sp
    f940:	4b07      	ldr	r3, [pc, #28]	; (f960 <l2cap_accept.part.0+0x28>)
    f942:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f946:	e9c2 3005 	strd	r3, r0, [r2, #20]
    f94a:	2303      	movs	r3, #3
    f94c:	4805      	ldr	r0, [pc, #20]	; (f964 <l2cap_accept.part.0+0x2c>)
    f94e:	f842 3f10 	str.w	r3, [r2, #16]!
    f952:	f008 ff50 	bl	187f6 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
    f956:	f06f 000b 	mvn.w	r0, #11
    f95a:	46bd      	mov	sp, r7
    f95c:	bd80      	pop	{r7, pc}
    f95e:	bf00      	nop
    f960:	0001d98b 	.word	0x0001d98b
    f964:	0001b8b8 	.word	0x0001b8b8

0000f968 <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
    f968:	4b04      	ldr	r3, [pc, #16]	; (f97c <l2cap_accept+0x14>)
    f96a:	681a      	ldr	r2, [r3, #0]
    f96c:	b10a      	cbz	r2, f972 <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    f96e:	f7ff bfe3 	b.w	f938 <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
    f972:	4803      	ldr	r0, [pc, #12]	; (f980 <l2cap_accept+0x18>)
    f974:	6058      	str	r0, [r3, #4]
}
    f976:	4610      	mov	r0, r2
		*chan = &l2cap->chan.chan;
    f978:	600b      	str	r3, [r1, #0]
}
    f97a:	4770      	bx	lr
    f97c:	200098d0 	.word	0x200098d0
    f980:	0001be40 	.word	0x0001be40

0000f984 <bt_l2cap_connected>:
{
    f984:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f986:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    f988:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    f98a:	4d1f      	ldr	r5, [pc, #124]	; (fa08 <bt_l2cap_connected+0x84>)
    f98c:	4f1f      	ldr	r7, [pc, #124]	; (fa0c <bt_l2cap_connected+0x88>)
    f98e:	42bd      	cmp	r5, r7
    f990:	d301      	bcc.n	f996 <bt_l2cap_connected+0x12>
}
    f992:	b003      	add	sp, #12
    f994:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
    f996:	4620      	mov	r0, r4
    f998:	686b      	ldr	r3, [r5, #4]
    f99a:	a901      	add	r1, sp, #4
    f99c:	4798      	blx	r3
    f99e:	2800      	cmp	r0, #0
    f9a0:	db2c      	blt.n	f9fc <bt_l2cap_connected+0x78>
		le_chan = BT_L2CAP_LE_CHAN(chan);
    f9a2:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
    f9a4:	882a      	ldrh	r2, [r5, #0]
    f9a6:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
    f9a8:	849a      	strh	r2, [r3, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    f9aa:	68a8      	ldr	r0, [r5, #8]
    f9ac:	f103 0210 	add.w	r2, r3, #16
    f9b0:	e8d2 1fef 	ldaex	r1, [r2]
    f9b4:	e8c2 6fec 	stlex	ip, r6, [r2]
    f9b8:	f1bc 0f00 	cmp.w	ip, #0
    f9bc:	d1f8      	bne.n	f9b0 <bt_l2cap_connected+0x2c>
	parent->next = child;
    f9be:	609e      	str	r6, [r3, #8]
	return list->tail;
    f9c0:	6d61      	ldr	r1, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
    f9c2:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
    f9c6:	b9d9      	cbnz	r1, fa00 <bt_l2cap_connected+0x7c>
	list->head = node;
    f9c8:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
	chan->conn = conn;
    f9cc:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
    f9ce:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
    f9d0:	9801      	ldr	r0, [sp, #4]
    f9d2:	6843      	ldr	r3, [r0, #4]
    f9d4:	681b      	ldr	r3, [r3, #0]
    f9d6:	b103      	cbz	r3, f9da <bt_l2cap_connected+0x56>
			chan->ops->connected(chan);
    f9d8:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    f9da:	9b01      	ldr	r3, [sp, #4]
    f9dc:	3310      	adds	r3, #16
    f9de:	e8d3 1fef 	ldaex	r1, [r3]
    f9e2:	f041 0101 	orr.w	r1, r1, #1
    f9e6:	e8c3 1fe2 	stlex	r2, r1, [r3]
    f9ea:	2a00      	cmp	r2, #0
    f9ec:	d1f7      	bne.n	f9de <bt_l2cap_connected+0x5a>
		if (chan->ops->status) {
    f9ee:	9801      	ldr	r0, [sp, #4]
    f9f0:	6843      	ldr	r3, [r0, #4]
    f9f2:	69db      	ldr	r3, [r3, #28]
    f9f4:	b113      	cbz	r3, f9fc <bt_l2cap_connected+0x78>
			chan->ops->status(chan, chan->status);
    f9f6:	f100 0110 	add.w	r1, r0, #16
    f9fa:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    f9fc:	350c      	adds	r5, #12
    f9fe:	e7c6      	b.n	f98e <bt_l2cap_connected+0xa>
	parent->next = child;
    fa00:	600a      	str	r2, [r1, #0]
	list->tail = node;
    fa02:	6562      	str	r2, [r4, #84]	; 0x54
}
    fa04:	e7e2      	b.n	f9cc <bt_l2cap_connected+0x48>
    fa06:	bf00      	nop
    fa08:	0001b80c 	.word	0x0001b80c
    fa0c:	0001b830 	.word	0x0001b830

0000fa10 <l2cap_recv>:
{
    fa10:	b5f0      	push	{r4, r5, r6, r7, lr}
    fa12:	b089      	sub	sp, #36	; 0x24
	if (buf->len < sizeof(*hdr)) {
    fa14:	8a0b      	ldrh	r3, [r1, #16]
{
    fa16:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
    fa18:	2b03      	cmp	r3, #3
{
    fa1a:	460d      	mov	r5, r1
    fa1c:	af02      	add	r7, sp, #8
	if (buf->len < sizeof(*hdr)) {
    fa1e:	d80b      	bhi.n	fa38 <l2cap_recv+0x28>
		LOG_ERR("Too small L2CAP signaling PDU");
    fa20:	4b30      	ldr	r3, [pc, #192]	; (fae4 <l2cap_recv+0xd4>)
		LOG_ERR("Invalid ident value in L2CAP PDU");
    fa22:	617b      	str	r3, [r7, #20]
    fa24:	2302      	movs	r3, #2
    fa26:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    fa2a:	482f      	ldr	r0, [pc, #188]	; (fae8 <l2cap_recv+0xd8>)
    fa2c:	613b      	str	r3, [r7, #16]
    fa2e:	f107 0210 	add.w	r2, r7, #16
    fa32:	f008 fee0 	bl	187f6 <z_log_msg_static_create.constprop.0>
		return 0;
    fa36:	e019      	b.n	fa6c <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
    fa38:	2104      	movs	r1, #4
    fa3a:	f105 000c 	add.w	r0, r5, #12
    fa3e:	f009 ff18 	bl	19872 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    fa42:	8a29      	ldrh	r1, [r5, #16]
	len = sys_le16_to_cpu(hdr->len);
    fa44:	8843      	ldrh	r3, [r0, #2]
    fa46:	4604      	mov	r4, r0
	if (buf->len != len) {
    fa48:	4299      	cmp	r1, r3
    fa4a:	d013      	beq.n	fa74 <l2cap_recv+0x64>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    fa4c:	466c      	mov	r4, sp
    fa4e:	b088      	sub	sp, #32
    fa50:	aa02      	add	r2, sp, #8
    fa52:	61d3      	str	r3, [r2, #28]
    fa54:	2304      	movs	r3, #4
    fa56:	4825      	ldr	r0, [pc, #148]	; (faec <l2cap_recv+0xdc>)
    fa58:	e9c2 0105 	strd	r0, r1, [r2, #20]
    fa5c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    fa60:	4821      	ldr	r0, [pc, #132]	; (fae8 <l2cap_recv+0xd8>)
    fa62:	f842 3f10 	str.w	r3, [r2, #16]!
    fa66:	f008 fec6 	bl	187f6 <z_log_msg_static_create.constprop.0>
    fa6a:	46a5      	mov	sp, r4
}
    fa6c:	2000      	movs	r0, #0
    fa6e:	371c      	adds	r7, #28
    fa70:	46bd      	mov	sp, r7
    fa72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
    fa74:	7843      	ldrb	r3, [r0, #1]
    fa76:	b90b      	cbnz	r3, fa7c <l2cap_recv+0x6c>
		LOG_ERR("Invalid ident value in L2CAP PDU");
    fa78:	4b1d      	ldr	r3, [pc, #116]	; (faf0 <l2cap_recv+0xe0>)
    fa7a:	e7d2      	b.n	fa22 <l2cap_recv+0x12>
	switch (hdr->code) {
    fa7c:	7803      	ldrb	r3, [r0, #0]
    fa7e:	2b01      	cmp	r3, #1
    fa80:	d0f4      	beq.n	fa6c <l2cap_recv+0x5c>
    fa82:	2b13      	cmp	r3, #19
    fa84:	d103      	bne.n	fa8e <l2cap_recv+0x7e>
	if (buf->len < sizeof(*rsp)) {
    fa86:	2901      	cmp	r1, #1
    fa88:	d8f0      	bhi.n	fa6c <l2cap_recv+0x5c>
		LOG_ERR("Too small LE conn param rsp");
    fa8a:	4b1a      	ldr	r3, [pc, #104]	; (faf4 <l2cap_recv+0xe4>)
    fa8c:	e7c9      	b.n	fa22 <l2cap_recv+0x12>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
    fa8e:	466d      	mov	r5, sp
    fa90:	b088      	sub	sp, #32
    fa92:	aa02      	add	r2, sp, #8
    fa94:	4918      	ldr	r1, [pc, #96]	; (faf8 <l2cap_recv+0xe8>)
    fa96:	4814      	ldr	r0, [pc, #80]	; (fae8 <l2cap_recv+0xd8>)
	switch (hdr->code) {
    fa98:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
    fa9c:	2303      	movs	r3, #3
    fa9e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    faa2:	f842 3f10 	str.w	r3, [r2, #16]!
    faa6:	f008 fea6 	bl	187f6 <z_log_msg_static_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    faaa:	2202      	movs	r2, #2
    faac:	46ad      	mov	sp, r5
    faae:	7861      	ldrb	r1, [r4, #1]
    fab0:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
    fab2:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    fab4:	f008 fea2 	bl	187fc <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    fab8:	4604      	mov	r4, r0
    faba:	2800      	cmp	r0, #0
    fabc:	d0d6      	beq.n	fa6c <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
    fabe:	2102      	movs	r1, #2
    fac0:	300c      	adds	r0, #12
    fac2:	f009 fea6 	bl	19812 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    fac6:	2300      	movs	r3, #0
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    fac8:	4622      	mov	r2, r4
    faca:	7003      	strb	r3, [r0, #0]
    facc:	7043      	strb	r3, [r0, #1]
    face:	2105      	movs	r1, #5
    fad0:	4628      	mov	r0, r5
    fad2:	9300      	str	r3, [sp, #0]
    fad4:	f008 fede 	bl	18894 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
    fad8:	2800      	cmp	r0, #0
    fada:	d0c7      	beq.n	fa6c <l2cap_recv+0x5c>
		net_buf_unref(buf);
    fadc:	4620      	mov	r0, r4
    fade:	f002 f849 	bl	11b74 <net_buf_unref>
    fae2:	e7c3      	b.n	fa6c <l2cap_recv+0x5c>
    fae4:	0001d9b2 	.word	0x0001d9b2
    fae8:	0001b8b8 	.word	0x0001b8b8
    faec:	0001d9d0 	.word	0x0001d9d0
    faf0:	0001d9f1 	.word	0x0001d9f1
    faf4:	0001da12 	.word	0x0001da12
    faf8:	0001da2e 	.word	0x0001da2e

0000fafc <bt_l2cap_recv>:
{
    fafc:	b5b0      	push	{r4, r5, r7, lr}
    fafe:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
    fb00:	8a0b      	ldrh	r3, [r1, #16]
{
    fb02:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
    fb04:	2b03      	cmp	r3, #3
{
    fb06:	460c      	mov	r4, r1
    fb08:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
    fb0a:	d810      	bhi.n	fb2e <bt_l2cap_recv+0x32>
		LOG_ERR("Too small L2CAP PDU received");
    fb0c:	4b17      	ldr	r3, [pc, #92]	; (fb6c <bt_l2cap_recv+0x70>)
    fb0e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    fb12:	617b      	str	r3, [r7, #20]
    fb14:	2302      	movs	r3, #2
    fb16:	4816      	ldr	r0, [pc, #88]	; (fb70 <bt_l2cap_recv+0x74>)
    fb18:	f107 0210 	add.w	r2, r7, #16
    fb1c:	613b      	str	r3, [r7, #16]
    fb1e:	f008 fe6a 	bl	187f6 <z_log_msg_static_create.constprop.0>
	net_buf_unref(buf);
    fb22:	4620      	mov	r0, r4
    fb24:	f002 f826 	bl	11b74 <net_buf_unref>
}
    fb28:	3718      	adds	r7, #24
    fb2a:	46bd      	mov	sp, r7
    fb2c:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    fb2e:	2104      	movs	r1, #4
    fb30:	f104 000c 	add.w	r0, r4, #12
    fb34:	f009 fe9d 	bl	19872 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    fb38:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    fb3a:	4628      	mov	r0, r5
    fb3c:	f008 fec3 	bl	188c6 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    fb40:	b978      	cbnz	r0, fb62 <bt_l2cap_recv+0x66>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
    fb42:	466d      	mov	r5, sp
    fb44:	b088      	sub	sp, #32
    fb46:	466a      	mov	r2, sp
    fb48:	4b0a      	ldr	r3, [pc, #40]	; (fb74 <bt_l2cap_recv+0x78>)
    fb4a:	4809      	ldr	r0, [pc, #36]	; (fb70 <bt_l2cap_recv+0x74>)
    fb4c:	e9c2 3105 	strd	r3, r1, [r2, #20]
    fb50:	2303      	movs	r3, #3
    fb52:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    fb56:	f842 3f10 	str.w	r3, [r2, #16]!
    fb5a:	f008 fe4c 	bl	187f6 <z_log_msg_static_create.constprop.0>
    fb5e:	46ad      	mov	sp, r5
		net_buf_unref(buf);
    fb60:	e7df      	b.n	fb22 <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
    fb62:	6843      	ldr	r3, [r0, #4]
    fb64:	4621      	mov	r1, r4
    fb66:	695b      	ldr	r3, [r3, #20]
    fb68:	4798      	blx	r3
    fb6a:	e7da      	b.n	fb22 <bt_l2cap_recv+0x26>
    fb6c:	0001da56 	.word	0x0001da56
    fb70:	0001b8b8 	.word	0x0001b8b8
    fb74:	0001da73 	.word	0x0001da73

0000fb78 <bt_l2cap_update_conn_param>:
{
    fb78:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
    fb7a:	4b17      	ldr	r3, [pc, #92]	; (fbd8 <bt_l2cap_update_conn_param+0x60>)
{
    fb7c:	460e      	mov	r6, r1
	ident++;
    fb7e:	7819      	ldrb	r1, [r3, #0]
{
    fb80:	4605      	mov	r5, r0
	ident++;
    fb82:	3101      	adds	r1, #1
    fb84:	b2c9      	uxtb	r1, r1
    fb86:	2901      	cmp	r1, #1
    fb88:	bf38      	it	cc
    fb8a:	2101      	movcc	r1, #1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    fb8c:	2208      	movs	r2, #8
    fb8e:	2012      	movs	r0, #18
	ident++;
    fb90:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    fb92:	f008 fe33 	bl	187fc <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    fb96:	4604      	mov	r4, r0
    fb98:	b1d0      	cbz	r0, fbd0 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
    fb9a:	2108      	movs	r1, #8
    fb9c:	300c      	adds	r0, #12
    fb9e:	f009 fe38 	bl	19812 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    fba2:	8833      	ldrh	r3, [r6, #0]
    fba4:	4622      	mov	r2, r4
    fba6:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    fba8:	8873      	ldrh	r3, [r6, #2]
    fbaa:	2105      	movs	r1, #5
    fbac:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    fbae:	88b3      	ldrh	r3, [r6, #4]
    fbb0:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    fbb2:	88f3      	ldrh	r3, [r6, #6]
    fbb4:	80c3      	strh	r3, [r0, #6]
    fbb6:	2300      	movs	r3, #0
    fbb8:	4628      	mov	r0, r5
    fbba:	9300      	str	r3, [sp, #0]
    fbbc:	f008 fe6a 	bl	18894 <bt_l2cap_send_cb>
	if (err) {
    fbc0:	4605      	mov	r5, r0
    fbc2:	b110      	cbz	r0, fbca <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
    fbc4:	4620      	mov	r0, r4
    fbc6:	f001 ffd5 	bl	11b74 <net_buf_unref>
}
    fbca:	4628      	mov	r0, r5
    fbcc:	b002      	add	sp, #8
    fbce:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    fbd0:	f06f 050b 	mvn.w	r5, #11
    fbd4:	e7f9      	b.n	fbca <bt_l2cap_update_conn_param+0x52>
    fbd6:	bf00      	nop
    fbd8:	20009c87 	.word	0x20009c87

0000fbdc <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
    fbdc:	2823      	cmp	r0, #35	; 0x23
    fbde:	d81f      	bhi.n	fc20 <att_op_get_type+0x44>
    fbe0:	281a      	cmp	r0, #26
    fbe2:	d804      	bhi.n	fbee <att_op_get_type+0x12>
    fbe4:	1e43      	subs	r3, r0, #1
    fbe6:	2b18      	cmp	r3, #24
    fbe8:	d90e      	bls.n	fc08 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    fbea:	2006      	movs	r0, #6
    fbec:	4770      	bx	lr
	switch (op) {
    fbee:	f1a0 031b 	sub.w	r3, r0, #27
    fbf2:	2b08      	cmp	r3, #8
    fbf4:	d81e      	bhi.n	fc34 <att_op_get_type+0x58>
    fbf6:	e8df f003 	tbb	[pc, r3]
    fbfa:	1d05      	.short	0x1d05
    fbfc:	191d231b 	.word	0x191d231b
    fc00:	1d25      	.short	0x1d25
    fc02:	05          	.byte	0x05
    fc03:	00          	.byte	0x00
		return ATT_NOTIFICATION;
    fc04:	2003      	movs	r0, #3
    fc06:	4770      	bx	lr
    fc08:	2301      	movs	r3, #1
	switch (op) {
    fc0a:	4a0f      	ldr	r2, [pc, #60]	; (fc48 <att_op_get_type+0x6c>)
    fc0c:	4083      	lsls	r3, r0
    fc0e:	401a      	ands	r2, r3
    fc10:	b9c2      	cbnz	r2, fc44 <att_op_get_type+0x68>
    fc12:	4a0e      	ldr	r2, [pc, #56]	; (fc4c <att_op_get_type+0x70>)
    fc14:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
    fc16:	2a00      	cmp	r2, #0
    fc18:	bf14      	ite	ne
    fc1a:	2001      	movne	r0, #1
    fc1c:	2006      	moveq	r0, #6
    fc1e:	4770      	bx	lr
	switch (op) {
    fc20:	f000 037f 	and.w	r3, r0, #127	; 0x7f
    fc24:	2b52      	cmp	r3, #82	; 0x52
    fc26:	d105      	bne.n	fc34 <att_op_get_type+0x58>
		return ATT_COMMAND;
    fc28:	2000      	movs	r0, #0
}
    fc2a:	4770      	bx	lr
		return ATT_REQUEST;
    fc2c:	2001      	movs	r0, #1
    fc2e:	4770      	bx	lr
		return ATT_INDICATION;
    fc30:	2005      	movs	r0, #5
    fc32:	4770      	bx	lr
		return ATT_COMMAND;
    fc34:	f010 0f40 	tst.w	r0, #64	; 0x40
    fc38:	bf0c      	ite	eq
    fc3a:	2006      	moveq	r0, #6
    fc3c:	2000      	movne	r0, #0
    fc3e:	4770      	bx	lr
	switch (op) {
    fc40:	2004      	movs	r0, #4
    fc42:	4770      	bx	lr
		return ATT_RESPONSE;
    fc44:	2002      	movs	r0, #2
    fc46:	4770      	bx	lr
    fc48:	028aaaaa 	.word	0x028aaaaa
    fc4c:	01455554 	.word	0x01455554

0000fc50 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    fc50:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    fc52:	3804      	subs	r0, #4
    fc54:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    fc56:	a901      	add	r1, sp, #4
    fc58:	4802      	ldr	r0, [pc, #8]	; (fc64 <bt_att_released+0x14>)
    fc5a:	f00a feba 	bl	1a9d2 <k_mem_slab_free>
}
    fc5e:	b003      	add	sp, #12
    fc60:	f85d fb04 	ldr.w	pc, [sp], #4
    fc64:	200085f8 	.word	0x200085f8

0000fc68 <tx_meta_data_free>:
{
    fc68:	b510      	push	{r4, lr}
    fc6a:	4604      	mov	r4, r0
	(void)memset(data, 0, sizeof(*data));
    fc6c:	2100      	movs	r1, #0
    fc6e:	2214      	movs	r2, #20
    fc70:	f008 faa8 	bl	181c4 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
    fc74:	4621      	mov	r1, r4
}
    fc76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
    fc7a:	4801      	ldr	r0, [pc, #4]	; (fc80 <tx_meta_data_free+0x18>)
    fc7c:	f00a bf73 	b.w	1ab66 <k_queue_append>
    fc80:	20008688 	.word	0x20008688

0000fc84 <find_type_cb>:
{
    fc84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fc88:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
    fc8a:	f8d2 a000 	ldr.w	sl, [r2]
{
    fc8e:	af02      	add	r7, sp, #8
	struct bt_conn *conn = chan->chan.chan.conn;
    fc90:	f8da 3004 	ldr.w	r3, [sl, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    fc94:	2500      	movs	r5, #0
	struct bt_conn *conn = chan->chan.chan.conn;
    fc96:	607b      	str	r3, [r7, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    fc98:	f642 0301 	movw	r3, #10241	; 0x2801
{
    fc9c:	4680      	mov	r8, r0
    fc9e:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    fca0:	6800      	ldr	r0, [r0, #0]
    fca2:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
    fca6:	85fb      	strh	r3, [r7, #46]	; 0x2e
    fca8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
{
    fcac:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    fcae:	f008 fa95 	bl	181dc <bt_uuid_cmp>
    fcb2:	2800      	cmp	r0, #0
    fcb4:	d070      	beq.n	fd98 <find_type_cb+0x114>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    fcb6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    fcba:	f8d8 0000 	ldr.w	r0, [r8]
    fcbe:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
    fcc2:	85fb      	strh	r3, [r7, #46]	; 0x2e
    fcc4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
    fcc8:	f008 fa88 	bl	181dc <bt_uuid_cmp>
    fccc:	b138      	cbz	r0, fcde <find_type_cb+0x5a>
		if (data->group &&
    fcce:	68a3      	ldr	r3, [r4, #8]
    fcd0:	b11b      	cbz	r3, fcda <find_type_cb+0x56>
    fcd2:	885a      	ldrh	r2, [r3, #2]
    fcd4:	42b2      	cmp	r2, r6
    fcd6:	d200      	bcs.n	fcda <find_type_cb+0x56>
	data->group->end_handle = sys_cpu_to_le16(handle);
    fcd8:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    fcda:	2001      	movs	r0, #1
    fcdc:	e009      	b.n	fcf2 <find_type_cb+0x6e>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    fcde:	6861      	ldr	r1, [r4, #4]
    fce0:	4608      	mov	r0, r1
    fce2:	f008 fe04 	bl	188ee <net_buf_frags_len>
    fce6:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
    fcea:	1a1b      	subs	r3, r3, r0
    fcec:	2b03      	cmp	r3, #3
    fcee:	d804      	bhi.n	fcfa <find_type_cb+0x76>
		return BT_GATT_ITER_STOP;
    fcf0:	2000      	movs	r0, #0
}
    fcf2:	3744      	adds	r7, #68	; 0x44
    fcf4:	46bd      	mov	sp, r7
    fcf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
    fcfa:	4608      	mov	r0, r1
    fcfc:	f009 fd63 	bl	197c6 <net_buf_frag_last>
    fd00:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    fd02:	6860      	ldr	r0, [r4, #4]
    fd04:	f008 fdf3 	bl	188ee <net_buf_frags_len>
    fd08:	f8ba b02a 	ldrh.w	fp, [sl, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
    fd0c:	f105 090c 	add.w	r9, r5, #12
    fd10:	ebab 0b00 	sub.w	fp, fp, r0
    fd14:	4648      	mov	r0, r9
    fd16:	f009 fdc0 	bl	1989a <net_buf_simple_tailroom>
    fd1a:	4558      	cmp	r0, fp
    fd1c:	d93f      	bls.n	fd9e <find_type_cb+0x11a>
    fd1e:	6860      	ldr	r0, [r4, #4]
    fd20:	f008 fde5 	bl	188ee <net_buf_frags_len>
    fd24:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
    fd28:	1a18      	subs	r0, r3, r0
	if (!len) {
    fd2a:	b970      	cbnz	r0, fd4a <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    fd2c:	6863      	ldr	r3, [r4, #4]
    fd2e:	7a98      	ldrb	r0, [r3, #10]
    fd30:	f001 fe5e 	bl	119f0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
    fd34:	2200      	movs	r2, #0
    fd36:	2300      	movs	r3, #0
    fd38:	f009 fd0b 	bl	19752 <net_buf_alloc_fixed>
		if (!frag) {
    fd3c:	4605      	mov	r5, r0
    fd3e:	2800      	cmp	r0, #0
    fd40:	d0d6      	beq.n	fcf0 <find_type_cb+0x6c>
		net_buf_frag_add(data->buf, frag);
    fd42:	4601      	mov	r1, r0
    fd44:	6860      	ldr	r0, [r4, #4]
    fd46:	f009 fd4f 	bl	197e8 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    fd4a:	2300      	movs	r3, #0
    fd4c:	9300      	str	r3, [sp, #0]
    fd4e:	4641      	mov	r1, r8
    fd50:	f8d8 a004 	ldr.w	sl, [r8, #4]
    fd54:	2310      	movs	r3, #16
    fd56:	6878      	ldr	r0, [r7, #4]
    fd58:	f107 0208 	add.w	r2, r7, #8
    fd5c:	47d0      	blx	sl
	if (read < 0) {
    fd5e:	f1b0 0800 	subs.w	r8, r0, #0
    fd62:	db19      	blt.n	fd98 <find_type_cb+0x114>
	if (read != data->value_len) {
    fd64:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    fd66:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
    fd68:	4542      	cmp	r2, r8
    fd6a:	d03f      	beq.n	fdec <find_type_cb+0x168>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    fd6c:	4601      	mov	r1, r0
    fd6e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
    fd72:	f008 fa61 	bl	18238 <bt_uuid_create>
    fd76:	b9b0      	cbnz	r0, fda6 <find_type_cb+0x122>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
    fd78:	466d      	mov	r5, sp
    fd7a:	b088      	sub	sp, #32
    fd7c:	7c23      	ldrb	r3, [r4, #16]
    fd7e:	aa02      	add	r2, sp, #8
    fd80:	491d      	ldr	r1, [pc, #116]	; (fdf8 <find_type_cb+0x174>)
    fd82:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unable to create UUID: size %d", read);
    fd86:	2303      	movs	r3, #3
    fd88:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    fd8c:	481b      	ldr	r0, [pc, #108]	; (fdfc <find_type_cb+0x178>)
    fd8e:	f842 3f10 	str.w	r3, [r2, #16]!
    fd92:	f008 fe97 	bl	18ac4 <z_log_msg_static_create.constprop.0>
    fd96:	46ad      	mov	sp, r5
	data->group = NULL;
    fd98:	2300      	movs	r3, #0
    fd9a:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
    fd9c:	e79d      	b.n	fcda <find_type_cb+0x56>
	return net_buf_simple_tailroom(&buf->b);
    fd9e:	4648      	mov	r0, r9
    fda0:	f009 fd7b 	bl	1989a <net_buf_simple_tailroom>
    fda4:	e7c1      	b.n	fd2a <find_type_cb+0xa6>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    fda6:	fa5f f288 	uxtb.w	r2, r8
    fdaa:	f107 0108 	add.w	r1, r7, #8
    fdae:	f107 0018 	add.w	r0, r7, #24
    fdb2:	f008 fa41 	bl	18238 <bt_uuid_create>
    fdb6:	b930      	cbnz	r0, fdc6 <find_type_cb+0x142>
			LOG_WRN("Unable to create UUID: size %d", read);
    fdb8:	466d      	mov	r5, sp
    fdba:	b088      	sub	sp, #32
    fdbc:	aa02      	add	r2, sp, #8
    fdbe:	4b10      	ldr	r3, [pc, #64]	; (fe00 <find_type_cb+0x17c>)
    fdc0:	e9c2 3805 	strd	r3, r8, [r2, #20]
    fdc4:	e7df      	b.n	fd86 <find_type_cb+0x102>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    fdc6:	f107 0118 	add.w	r1, r7, #24
    fdca:	f107 002c 	add.w	r0, r7, #44	; 0x2c
    fdce:	f008 fa05 	bl	181dc <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    fdd2:	2800      	cmp	r0, #0
    fdd4:	d1e0      	bne.n	fd98 <find_type_cb+0x114>
	data->err = 0x00;
    fdd6:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
    fdd8:	2104      	movs	r1, #4
    fdda:	7463      	strb	r3, [r4, #17]
    fddc:	f105 000c 	add.w	r0, r5, #12
    fde0:	f009 fd17 	bl	19812 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
    fde4:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    fde6:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    fde8:	68a3      	ldr	r3, [r4, #8]
    fdea:	e775      	b.n	fcd8 <find_type_cb+0x54>
	} else if (memcmp(data->value, uuid, read)) {
    fdec:	f107 0108 	add.w	r1, r7, #8
    fdf0:	f008 f9cd 	bl	1818e <memcmp>
    fdf4:	e7ed      	b.n	fdd2 <find_type_cb+0x14e>
    fdf6:	bf00      	nop
    fdf8:	0001daaf 	.word	0x0001daaf
    fdfc:	0001b878 	.word	0x0001b878
    fe00:	0001dace 	.word	0x0001dace

0000fe04 <chan_send>:
{
    fe04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fe08:	4606      	mov	r6, r0
    fe0a:	460c      	mov	r4, r1
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
    fe0c:	f8d1 9018 	ldr.w	r9, [r1, #24]
	hdr = (void *)buf->data;
    fe10:	68cb      	ldr	r3, [r1, #12]
{
    fe12:	b089      	sub	sp, #36	; 0x24
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
    fe14:	2102      	movs	r1, #2
    fe16:	3034      	adds	r0, #52	; 0x34
    fe18:	f008 fd83 	bl	18922 <atomic_test_bit>
    fe1c:	b970      	cbnz	r0, fe3c <chan_send+0x38>
		return -EINVAL;
    fe1e:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("ATT channel not connected");
    fe22:	4b2e      	ldr	r3, [pc, #184]	; (fedc <chan_send+0xd8>)
    fe24:	482e      	ldr	r0, [pc, #184]	; (fee0 <chan_send+0xdc>)
    fe26:	e9cd 1306 	strd	r1, r3, [sp, #24]
    fe2a:	aa06      	add	r2, sp, #24
    fe2c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    fe30:	f008 fe48 	bl	18ac4 <z_log_msg_static_create.constprop.0>
}
    fe34:	4628      	mov	r0, r5
    fe36:	b009      	add	sp, #36	; 0x24
    fe38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    fe3c:	781b      	ldrb	r3, [r3, #0]
    fe3e:	2bd2      	cmp	r3, #210	; 0xd2
    fe40:	d117      	bne.n	fe72 <chan_send+0x6e>
		err = bt_smp_sign(chan->att->conn, buf);
    fe42:	6833      	ldr	r3, [r6, #0]
    fe44:	4621      	mov	r1, r4
    fe46:	6818      	ldr	r0, [r3, #0]
    fe48:	f009 fc7d 	bl	19746 <bt_smp_sign>
		if (err) {
    fe4c:	4605      	mov	r5, r0
    fe4e:	b180      	cbz	r0, fe72 <chan_send+0x6e>
			LOG_ERR("Error signing data");
    fe50:	4b24      	ldr	r3, [pc, #144]	; (fee4 <chan_send+0xe0>)
    fe52:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    fe56:	9307      	str	r3, [sp, #28]
    fe58:	2302      	movs	r3, #2
    fe5a:	aa06      	add	r2, sp, #24
    fe5c:	4820      	ldr	r0, [pc, #128]	; (fee0 <chan_send+0xdc>)
    fe5e:	9306      	str	r3, [sp, #24]
    fe60:	f008 fe30 	bl	18ac4 <z_log_msg_static_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
    fe64:	69a0      	ldr	r0, [r4, #24]
    fe66:	f7ff feff 	bl	fc68 <tx_meta_data_free>
			net_buf_unref(buf);
    fe6a:	4620      	mov	r0, r4
    fe6c:	f001 fe82 	bl	11b74 <net_buf_unref>
			return err;
    fe70:	e7e0      	b.n	fe34 <chan_send+0x30>
	state->offset = net_buf_simple_headroom(buf);
    fe72:	f104 000c 	add.w	r0, r4, #12
    fe76:	f009 fd0c 	bl	19892 <net_buf_simple_headroom>
	state->len = buf->len;
    fe7a:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	data->att_chan = chan;
    fe7e:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    fe82:	6833      	ldr	r3, [r6, #0]
	state->offset = net_buf_simple_headroom(buf);
    fe84:	4607      	mov	r7, r0
    fe86:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
    fe88:	68e3      	ldr	r3, [r4, #12]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    fe8a:	2104      	movs	r1, #4
	const att_type_t op_type = att_op_get_type(buf->data[0]);
    fe8c:	7818      	ldrb	r0, [r3, #0]
    fe8e:	f7ff fea5 	bl	fbdc <att_op_get_type>
	switch (op_type) {
    fe92:	2805      	cmp	r0, #5
    fe94:	bf98      	it	ls
    fe96:	4b14      	ldrls	r3, [pc, #80]	; (fee8 <chan_send+0xe4>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    fe98:	4622      	mov	r2, r4
    fe9a:	bf94      	ite	ls
    fe9c:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
    fea0:	4b12      	ldrhi	r3, [pc, #72]	; (feec <chan_send+0xe8>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    fea2:	4628      	mov	r0, r5
    fea4:	f8cd 9000 	str.w	r9, [sp]
    fea8:	f008 fcf4 	bl	18894 <bt_l2cap_send_cb>
	if (err) {
    feac:	4605      	mov	r5, r0
    feae:	2800      	cmp	r0, #0
    feb0:	d0c0      	beq.n	fe34 <chan_send+0x30>
		if (err == -ENOBUFS) {
    feb2:	f110 0f69 	cmn.w	r0, #105	; 0x69
    feb6:	d109      	bne.n	fecc <chan_send+0xc8>
			LOG_ERR("Ran out of TX buffers or contexts.");
    feb8:	4b0d      	ldr	r3, [pc, #52]	; (fef0 <chan_send+0xec>)
    feba:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    febe:	9307      	str	r3, [sp, #28]
    fec0:	2302      	movs	r3, #2
    fec2:	4807      	ldr	r0, [pc, #28]	; (fee0 <chan_send+0xdc>)
    fec4:	aa06      	add	r2, sp, #24
    fec6:	9306      	str	r3, [sp, #24]
    fec8:	f008 fdfc 	bl	18ac4 <z_log_msg_static_create.constprop.0>
	buf->data = buf->__buf + state->offset;
    fecc:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
    fece:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
    fed2:	fa13 f787 	uxtah	r7, r3, r7
    fed6:	60e7      	str	r7, [r4, #12]
}
    fed8:	e7ac      	b.n	fe34 <chan_send+0x30>
    feda:	bf00      	nop
    fedc:	0001daed 	.word	0x0001daed
    fee0:	0001b878 	.word	0x0001b878
    fee4:	0001db07 	.word	0x0001db07
    fee8:	0001be68 	.word	0x0001be68
    feec:	00018ea9 	.word	0x00018ea9
    fef0:	0001db1a 	.word	0x0001db1a

0000fef4 <att_get>:
{
    fef4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    fef6:	7a83      	ldrb	r3, [r0, #10]
    fef8:	2b07      	cmp	r3, #7
    fefa:	d00d      	beq.n	ff18 <att_get+0x24>
		LOG_WRN("Not connected");
    fefc:	4b13      	ldr	r3, [pc, #76]	; (ff4c <att_get+0x58>)
    fefe:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    ff02:	9305      	str	r3, [sp, #20]
    ff04:	2302      	movs	r3, #2
    ff06:	aa04      	add	r2, sp, #16
    ff08:	9304      	str	r3, [sp, #16]
		LOG_ERR("Unable to find ATT channel");
    ff0a:	4811      	ldr	r0, [pc, #68]	; (ff50 <att_get+0x5c>)
    ff0c:	f008 fdda 	bl	18ac4 <z_log_msg_static_create.constprop.0>
		return NULL;
    ff10:	2000      	movs	r0, #0
}
    ff12:	b007      	add	sp, #28
    ff14:	f85d fb04 	ldr.w	pc, [sp], #4
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    ff18:	2104      	movs	r1, #4
    ff1a:	f008 fcd4 	bl	188c6 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    ff1e:	4603      	mov	r3, r0
    ff20:	b938      	cbnz	r0, ff32 <att_get+0x3e>
		LOG_ERR("Unable to find ATT channel");
    ff22:	4b0c      	ldr	r3, [pc, #48]	; (ff54 <att_get+0x60>)
    ff24:	9305      	str	r3, [sp, #20]
    ff26:	2302      	movs	r3, #2
    ff28:	9304      	str	r3, [sp, #16]
    ff2a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ff2e:	aa04      	add	r2, sp, #16
    ff30:	e7eb      	b.n	ff0a <att_get+0x16>
	if (!atomic_test_bit(att_chan->flags, ATT_CONNECTED)) {
    ff32:	2102      	movs	r1, #2
    ff34:	3030      	adds	r0, #48	; 0x30
    ff36:	f008 fcf4 	bl	18922 <atomic_test_bit>
    ff3a:	b918      	cbnz	r0, ff44 <att_get+0x50>
		LOG_ERR("ATT channel not connected");
    ff3c:	4b06      	ldr	r3, [pc, #24]	; (ff58 <att_get+0x64>)
    ff3e:	e9cd 1304 	strd	r1, r3, [sp, #16]
    ff42:	e7f2      	b.n	ff2a <att_get+0x36>
	return att_chan->att;
    ff44:	f853 0c04 	ldr.w	r0, [r3, #-4]
    ff48:	e7e3      	b.n	ff12 <att_get+0x1e>
    ff4a:	bf00      	nop
    ff4c:	0001db3d 	.word	0x0001db3d
    ff50:	0001b878 	.word	0x0001b878
    ff54:	0001db4b 	.word	0x0001db4b
    ff58:	0001daed 	.word	0x0001daed

0000ff5c <bt_att_connected>:
{
    ff5c:	b510      	push	{r4, lr}
    ff5e:	4604      	mov	r4, r0
    ff60:	f100 0330 	add.w	r3, r0, #48	; 0x30
    ff64:	e8d3 1fef 	ldaex	r1, [r3]
    ff68:	f041 0104 	orr.w	r1, r1, #4
    ff6c:	e8c3 1fe2 	stlex	r2, r1, [r3]
    ff70:	2a00      	cmp	r2, #0
    ff72:	d1f7      	bne.n	ff64 <bt_att_connected+0x8>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    ff74:	2317      	movs	r3, #23
	att_chan_mtu_updated(att_chan);
    ff76:	1f20      	subs	r0, r4, #4
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    ff78:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    ff7a:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
    ff7c:	f008 fd5f 	bl	18a3e <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    ff80:	f104 0054 	add.w	r0, r4, #84	; 0x54
    ff84:	4903      	ldr	r1, [pc, #12]	; (ff94 <bt_att_connected+0x38>)
    ff86:	f00a fece 	bl	1ad26 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
    ff8a:	6820      	ldr	r0, [r4, #0]
}
    ff8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
    ff90:	f001 bcc0 	b.w	11914 <bt_gatt_connected>
    ff94:	00010c79 	.word	0x00010c79

0000ff98 <read_group_cb>:
{
    ff98:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    ff9c:	f04f 0800 	mov.w	r8, #0
    ffa0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
    ffa4:	4605      	mov	r5, r0
    ffa6:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    ffa8:	6800      	ldr	r0, [r0, #0]
    ffaa:	a902      	add	r1, sp, #8
{
    ffac:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
    ffae:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    ffb0:	f88d 8008 	strb.w	r8, [sp, #8]
    ffb4:	f8ad 300a 	strh.w	r3, [sp, #10]
    ffb8:	f008 f910 	bl	181dc <bt_uuid_cmp>
    ffbc:	b1a0      	cbz	r0, ffe8 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    ffbe:	f642 0301 	movw	r3, #10241	; 0x2801
    ffc2:	6828      	ldr	r0, [r5, #0]
    ffc4:	a903      	add	r1, sp, #12
    ffc6:	f88d 800c 	strb.w	r8, [sp, #12]
    ffca:	f8ad 300e 	strh.w	r3, [sp, #14]
    ffce:	f008 f905 	bl	181dc <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    ffd2:	b148      	cbz	r0, ffe8 <read_group_cb+0x50>
		if (data->group &&
    ffd4:	6923      	ldr	r3, [r4, #16]
    ffd6:	b11b      	cbz	r3, ffe0 <read_group_cb+0x48>
    ffd8:	885a      	ldrh	r2, [r3, #2]
    ffda:	42b2      	cmp	r2, r6
    ffdc:	d200      	bcs.n	ffe0 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    ffde:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    ffe0:	2001      	movs	r0, #1
}
    ffe2:	b004      	add	sp, #16
    ffe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    ffe8:	6861      	ldr	r1, [r4, #4]
    ffea:	6828      	ldr	r0, [r5, #0]
    ffec:	f008 f8f6 	bl	181dc <bt_uuid_cmp>
    fff0:	b110      	cbz	r0, fff8 <read_group_cb+0x60>
		data->group = NULL;
    fff2:	2300      	movs	r3, #0
    fff4:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    fff6:	e7f3      	b.n	ffe0 <read_group_cb+0x48>
	if (data->rsp->len &&
    fff8:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    fffa:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
    fffc:	781a      	ldrb	r2, [r3, #0]
    fffe:	b132      	cbz	r2, 1000e <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xe>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   10000:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   10002:	8a01      	ldrh	r1, [r0, #16]
   10004:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   10006:	4293      	cmp	r3, r2
   10008:	da01      	bge.n	1000e <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xe>
		return BT_GATT_ITER_STOP;
   1000a:	2000      	movs	r0, #0
   1000c:	e7e9      	b.n	ffe2 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1000e:	2104      	movs	r1, #4
   10010:	300c      	adds	r0, #12
   10012:	f009 fbfe 	bl	19812 <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   10016:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   10018:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1001a:	6923      	ldr	r3, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1001c:	4629      	mov	r1, r5
	data->group->end_handle = sys_cpu_to_le16(handle);
   1001e:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   10020:	4b07      	ldr	r3, [pc, #28]	; (10040 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x40>)
   10022:	9401      	str	r4, [sp, #4]
   10024:	9300      	str	r3, [sp, #0]
   10026:	4638      	mov	r0, r7
   10028:	2300      	movs	r3, #0
   1002a:	68a2      	ldr	r2, [r4, #8]
   1002c:	f008 fd8c 	bl	18b48 <att_chan_read>
	if (read < 0) {
   10030:	2800      	cmp	r0, #0
   10032:	dbea      	blt.n	1000a <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xa>
	if (!data->group) {
   10034:	6920      	ldr	r0, [r4, #16]
   10036:	3800      	subs	r0, #0
   10038:	bf18      	it	ne
   1003a:	2001      	movne	r0, #1
   1003c:	e7d1      	b.n	ffe2 <read_group_cb+0x4a>
   1003e:	bf00      	nop
   10040:	00018aa5 	.word	0x00018aa5

00010044 <read_type_cb>:
{
   10044:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   10048:	6817      	ldr	r7, [r2, #0]
{
   1004a:	4605      	mov	r5, r0
   1004c:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1004e:	6800      	ldr	r0, [r0, #0]
   10050:	6851      	ldr	r1, [r2, #4]
{
   10052:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   10054:	687e      	ldr	r6, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   10056:	f008 f8c1 	bl	181dc <bt_uuid_cmp>
   1005a:	4681      	mov	r9, r0
   1005c:	2800      	cmp	r0, #0
   1005e:	d13c      	bne.n	100da <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   10060:	4630      	mov	r0, r6
   10062:	2295      	movs	r2, #149	; 0x95
   10064:	4629      	mov	r1, r5
   10066:	f009 fa6c 	bl	19542 <bt_gatt_check_perm>
   1006a:	4606      	mov	r6, r0
   1006c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1006e:	b140      	cbz	r0, 10082 <read_type_cb+0x3e>
		if (data->rsp->len) {
   10070:	68e3      	ldr	r3, [r4, #12]
   10072:	781b      	ldrb	r3, [r3, #0]
   10074:	b10b      	cbz	r3, 1007a <read_type_cb+0x36>
			data->err = 0x00;
   10076:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   1007a:	2000      	movs	r0, #0
}
   1007c:	b003      	add	sp, #12
   1007e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   10082:	68a0      	ldr	r0, [r4, #8]
   10084:	f009 fb9f 	bl	197c6 <net_buf_frag_last>
   10088:	2102      	movs	r1, #2
   1008a:	300c      	adds	r0, #12
   1008c:	f009 fbc1 	bl	19812 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   10090:	4b13      	ldr	r3, [pc, #76]	; (100e0 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   10092:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   10094:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   10098:	9300      	str	r3, [sp, #0]
   1009a:	9401      	str	r4, [sp, #4]
   1009c:	4633      	mov	r3, r6
   1009e:	4629      	mov	r1, r5
   100a0:	4638      	mov	r0, r7
   100a2:	68a2      	ldr	r2, [r4, #8]
   100a4:	f008 fd50 	bl	18b48 <att_chan_read>
	if (read < 0) {
   100a8:	2800      	cmp	r0, #0
   100aa:	da07      	bge.n	100bc <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   100ac:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   100b0:	bf32      	itee	cc
   100b2:	200e      	movcc	r0, #14
		return -err;
   100b4:	4240      	negcs	r0, r0
   100b6:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   100b8:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   100ba:	e7de      	b.n	1007a <read_type_cb+0x36>
	if (!data->item) {
   100bc:	6923      	ldr	r3, [r4, #16]
   100be:	2b00      	cmp	r3, #0
   100c0:	d0db      	beq.n	1007a <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   100c2:	68a0      	ldr	r0, [r4, #8]
   100c4:	f008 fc13 	bl	188ee <net_buf_frags_len>
   100c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   100ca:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   100cc:	68e3      	ldr	r3, [r4, #12]
   100ce:	781b      	ldrb	r3, [r3, #0]
   100d0:	4298      	cmp	r0, r3
   100d2:	bf94      	ite	ls
   100d4:	2000      	movls	r0, #0
   100d6:	2001      	movhi	r0, #1
   100d8:	e7d0      	b.n	1007c <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   100da:	2001      	movs	r0, #1
   100dc:	e7ce      	b.n	1007c <read_type_cb+0x38>
   100de:	bf00      	nop
   100e0:	000188ff 	.word	0x000188ff

000100e4 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   100e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   100e8:	b082      	sub	sp, #8
   100ea:	af00      	add	r7, sp, #0
   100ec:	4604      	mov	r4, r0
   100ee:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   100f0:	2200      	movs	r2, #0
   100f2:	2300      	movs	r3, #0
   100f4:	4639      	mov	r1, r7
   100f6:	4838      	ldr	r0, [pc, #224]	; (101d8 <bt_att_accept+0xf4>)
   100f8:	f005 f898 	bl	1522c <k_mem_slab_alloc>
   100fc:	4605      	mov	r5, r0
   100fe:	b1a8      	cbz	r0, 1012c <bt_att_accept+0x48>
		LOG_ERR("No available ATT context for conn %p", conn);
   10100:	466d      	mov	r5, sp
   10102:	b088      	sub	sp, #32
   10104:	466a      	mov	r2, sp
   10106:	4b35      	ldr	r3, [pc, #212]	; (101dc <bt_att_accept+0xf8>)
   10108:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1010c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   10110:	2303      	movs	r3, #3
   10112:	4833      	ldr	r0, [pc, #204]	; (101e0 <bt_att_accept+0xfc>)
   10114:	f842 3f10 	str.w	r3, [r2, #16]!
   10118:	f008 fcd4 	bl	18ac4 <z_log_msg_static_create.constprop.0>
   1011c:	46ad      	mov	sp, r5
		return -ENOMEM;
   1011e:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   10122:	4628      	mov	r0, r5
   10124:	3708      	adds	r7, #8
   10126:	46bd      	mov	sp, r7
   10128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_z_current_get();
   1012c:	f005 ffa2 	bl	16074 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   10130:	4b2c      	ldr	r3, [pc, #176]	; (101e4 <bt_att_accept+0x100>)
	(void)memset(att, 0, sizeof(*att));
   10132:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   10134:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
   10136:	222c      	movs	r2, #44	; 0x2c
   10138:	6838      	ldr	r0, [r7, #0]
   1013a:	f008 f843 	bl	181c4 <memset>
	att->conn = conn;
   1013e:	683b      	ldr	r3, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   10140:	2200      	movs	r2, #0
	att->conn = conn;
   10142:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
   10144:	683c      	ldr	r4, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   10146:	2300      	movs	r3, #0
	list->tail = NULL;
   10148:	e9c4 5501 	strd	r5, r5, [r4, #4]
   1014c:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
   10150:	4825      	ldr	r0, [pc, #148]	; (101e8 <bt_att_accept+0x104>)
   10152:	1d39      	adds	r1, r7, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   10154:	607d      	str	r5, [r7, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   10156:	f005 f869 	bl	1522c <k_mem_slab_alloc>
   1015a:	4605      	mov	r5, r0
   1015c:	b180      	cbz	r0, 10180 <bt_att_accept+0x9c>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   1015e:	6823      	ldr	r3, [r4, #0]
   10160:	466c      	mov	r4, sp
   10162:	b088      	sub	sp, #32
   10164:	466a      	mov	r2, sp
   10166:	4921      	ldr	r1, [pc, #132]	; (101ec <bt_att_accept+0x108>)
   10168:	481d      	ldr	r0, [pc, #116]	; (101e0 <bt_att_accept+0xfc>)
   1016a:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1016e:	2303      	movs	r3, #3
   10170:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   10174:	f842 3f10 	str.w	r3, [r2, #16]!
   10178:	f008 fca4 	bl	18ac4 <z_log_msg_static_create.constprop.0>
   1017c:	46a5      	mov	sp, r4
	if (!chan) {
   1017e:	e7ce      	b.n	1011e <bt_att_accept+0x3a>
	(void)memset(chan, 0, sizeof(*chan));
   10180:	4601      	mov	r1, r0
   10182:	2290      	movs	r2, #144	; 0x90
   10184:	6878      	ldr	r0, [r7, #4]
   10186:	f008 f81d 	bl	181c4 <memset>
	chan->chan.chan.ops = &ops;
   1018a:	6878      	ldr	r0, [r7, #4]
   1018c:	4b18      	ldr	r3, [pc, #96]	; (101f0 <bt_att_accept+0x10c>)
   1018e:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   10190:	303c      	adds	r0, #60	; 0x3c
   10192:	f00a fcdc 	bl	1ab4e <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   10196:	687b      	ldr	r3, [r7, #4]
   10198:	3334      	adds	r3, #52	; 0x34
   1019a:	e8d3 2fef 	ldaex	r2, [r3]
   1019e:	e8c3 5fe1 	stlex	r1, r5, [r3]
   101a2:	2900      	cmp	r1, #0
   101a4:	d1f9      	bne.n	1019a <bt_att_accept+0xb6>
	chan->att = att;
   101a6:	687b      	ldr	r3, [r7, #4]
   101a8:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   101aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
	att_chan_attach(att, chan);
   101ac:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
   101b0:	b91b      	cbnz	r3, 101ba <bt_att_accept+0xd6>
   101b2:	f104 000c 	add.w	r0, r4, #12
   101b6:	f00a fcca 	bl	1ab4e <z_impl_k_queue_init>
	return list->head;
   101ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
	sys_slist_prepend(&att->chans, &chan->node);
   101bc:	f108 0388 	add.w	r3, r8, #136	; 0x88
	parent->next = child;
   101c0:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
Z_GENLIST_PREPEND(slist, snode)
   101c4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	list->head = node;
   101c6:	6263      	str	r3, [r4, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   101c8:	b902      	cbnz	r2, 101cc <bt_att_accept+0xe8>
	list->tail = node;
   101ca:	62a3      	str	r3, [r4, #40]	; 0x28
	return chan;
   101cc:	687b      	ldr	r3, [r7, #4]
	if (!chan) {
   101ce:	2b00      	cmp	r3, #0
   101d0:	d0a5      	beq.n	1011e <bt_att_accept+0x3a>
	*ch = &chan->chan.chan;
   101d2:	3304      	adds	r3, #4
   101d4:	6033      	str	r3, [r6, #0]
	return 0;
   101d6:	e7a4      	b.n	10122 <bt_att_accept+0x3e>
   101d8:	200085dc 	.word	0x200085dc
   101dc:	0001db66 	.word	0x0001db66
   101e0:	0001b878 	.word	0x0001b878
   101e4:	2000993c 	.word	0x2000993c
   101e8:	200085f8 	.word	0x200085f8
   101ec:	0001db8b 	.word	0x0001db8b
   101f0:	2000831c 	.word	0x2000831c

000101f4 <bt_att_chan_create_pdu>:
{
   101f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   101f8:	b086      	sub	sp, #24
   101fa:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   101fc:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   101fe:	1c53      	adds	r3, r2, #1
   10200:	428b      	cmp	r3, r1
{
   10202:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   10204:	d915      	bls.n	10232 <bt_att_chan_create_pdu+0x3e>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   10206:	466c      	mov	r4, sp
   10208:	b088      	sub	sp, #32
   1020a:	466a      	mov	r2, sp
   1020c:	482d      	ldr	r0, [pc, #180]	; (102c4 <bt_att_chan_create_pdu+0xd0>)
   1020e:	61d3      	str	r3, [r2, #28]
   10210:	2304      	movs	r3, #4
   10212:	e9c2 0105 	strd	r0, r1, [r2, #20]
   10216:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1021a:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1021e:	482a      	ldr	r0, [pc, #168]	; (102c8 <bt_att_chan_create_pdu+0xd4>)
   10220:	f008 fc50 	bl	18ac4 <z_log_msg_static_create.constprop.0>
   10224:	46a5      	mov	sp, r4
		return NULL;
   10226:	2400      	movs	r4, #0
}
   10228:	4620      	mov	r0, r4
   1022a:	3718      	adds	r7, #24
   1022c:	46bd      	mov	sp, r7
   1022e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
   10232:	4628      	mov	r0, r5
   10234:	f7ff fcd2 	bl	fbdc <att_op_get_type>
   10238:	2802      	cmp	r0, #2
   1023a:	d019      	beq.n	10270 <bt_att_chan_create_pdu+0x7c>
   1023c:	2804      	cmp	r0, #4
   1023e:	d017      	beq.n	10270 <bt_att_chan_create_pdu+0x7c>
		timeout = K_FOREVER;
   10240:	f04f 38ff 	mov.w	r8, #4294967295
   10244:	f04f 39ff 	mov.w	r9, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   10248:	2100      	movs	r1, #0
   1024a:	4642      	mov	r2, r8
   1024c:	464b      	mov	r3, r9
   1024e:	4608      	mov	r0, r1
   10250:	f008 fb1d 	bl	1888e <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   10254:	4604      	mov	r4, r0
   10256:	b980      	cbnz	r0, 1027a <bt_att_chan_create_pdu+0x86>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   10258:	466c      	mov	r4, sp
   1025a:	b088      	sub	sp, #32
   1025c:	466a      	mov	r2, sp
   1025e:	4b1b      	ldr	r3, [pc, #108]	; (102cc <bt_att_chan_create_pdu+0xd8>)
   10260:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10264:	e9c2 3505 	strd	r3, r5, [r2, #20]
   10268:	2303      	movs	r3, #3
   1026a:	f842 3f10 	str.w	r3, [r2, #16]!
   1026e:	e7d6      	b.n	1021e <bt_att_chan_create_pdu+0x2a>
	switch (att_op_get_type(op)) {
   10270:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   10274:	f04f 0900 	mov.w	r9, #0
   10278:	e7e6      	b.n	10248 <bt_att_chan_create_pdu+0x54>
	return z_impl_z_current_get();
   1027a:	f005 fefb 	bl	16074 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1027e:	4b14      	ldr	r3, [pc, #80]	; (102d0 <bt_att_chan_create_pdu+0xdc>)
   10280:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   10282:	4814      	ldr	r0, [pc, #80]	; (102d4 <bt_att_chan_create_pdu+0xe0>)
   10284:	bf07      	ittee	eq
   10286:	2200      	moveq	r2, #0
   10288:	2300      	moveq	r3, #0
   1028a:	4642      	movne	r2, r8
   1028c:	464b      	movne	r3, r9
   1028e:	f005 f985 	bl	1559c <z_impl_k_queue_get>
	if (!data) {
   10292:	b970      	cbnz	r0, 102b2 <bt_att_chan_create_pdu+0xbe>
		LOG_WRN("Unable to allocate ATT TX meta");
   10294:	4b10      	ldr	r3, [pc, #64]	; (102d8 <bt_att_chan_create_pdu+0xe4>)
   10296:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1029a:	617b      	str	r3, [r7, #20]
   1029c:	2302      	movs	r3, #2
   1029e:	480a      	ldr	r0, [pc, #40]	; (102c8 <bt_att_chan_create_pdu+0xd4>)
   102a0:	f107 0210 	add.w	r2, r7, #16
   102a4:	613b      	str	r3, [r7, #16]
   102a6:	f008 fc0d 	bl	18ac4 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   102aa:	4620      	mov	r0, r4
   102ac:	f001 fc62 	bl	11b74 <net_buf_unref>
		return NULL;
   102b0:	e7b9      	b.n	10226 <bt_att_chan_create_pdu+0x32>
	bt_att_tx_meta_data(buf) = data;
   102b2:	61a0      	str	r0, [r4, #24]
   102b4:	2101      	movs	r1, #1
   102b6:	f104 000c 	add.w	r0, r4, #12
   102ba:	f009 faaa 	bl	19812 <net_buf_simple_add>
	hdr->code = op;
   102be:	7005      	strb	r5, [r0, #0]
	return buf;
   102c0:	e7b2      	b.n	10228 <bt_att_chan_create_pdu+0x34>
   102c2:	bf00      	nop
   102c4:	0001dbb0 	.word	0x0001dbb0
   102c8:	0001b878 	.word	0x0001b878
   102cc:	0001d963 	.word	0x0001d963
   102d0:	200096b8 	.word	0x200096b8
   102d4:	20008688 	.word	0x20008688
   102d8:	0001dbd5 	.word	0x0001dbd5

000102dc <bt_att_recv>:
{
   102dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   102e0:	b087      	sub	sp, #28
	if (buf->len < sizeof(*hdr)) {
   102e2:	8a0b      	ldrh	r3, [r1, #16]
{
   102e4:	4682      	mov	sl, r0
   102e6:	460c      	mov	r4, r1
   102e8:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   102ea:	b97b      	cbnz	r3, 1030c <bt_att_recv+0x30>
		LOG_ERR("Too small ATT PDU received");
   102ec:	4b4c      	ldr	r3, [pc, #304]	; (10420 <bt_att_recv+0x144>)
   102ee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   102f2:	617b      	str	r3, [r7, #20]
   102f4:	2302      	movs	r3, #2
   102f6:	f107 0210 	add.w	r2, r7, #16
   102fa:	613b      	str	r3, [r7, #16]
			LOG_WRN("Ignoring unexpected request");
   102fc:	4849      	ldr	r0, [pc, #292]	; (10424 <bt_att_recv+0x148>)
   102fe:	f008 fbe1 	bl	18ac4 <z_log_msg_static_create.constprop.0>
}
   10302:	2000      	movs	r0, #0
   10304:	371c      	adds	r7, #28
   10306:	46bd      	mov	sp, r7
   10308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1030c:	2101      	movs	r1, #1
   1030e:	f104 000c 	add.w	r0, r4, #12
   10312:	f009 faae 	bl	19872 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   10316:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   1031a:	4605      	mov	r5, r0
   1031c:	2b00      	cmp	r3, #0
   1031e:	d0f0      	beq.n	10302 <bt_att_recv+0x26>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   10320:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   10322:	7801      	ldrb	r1, [r0, #0]
   10324:	f8df 8100 	ldr.w	r8, [pc, #256]	; 10428 <bt_att_recv+0x14c>
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   10328:	f1aa 0604 	sub.w	r6, sl, #4
		if (hdr->code == handlers[i].op) {
   1032c:	f818 0033 	ldrb.w	r0, [r8, r3, lsl #3]
   10330:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   10334:	4288      	cmp	r0, r1
   10336:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   1033a:	d114      	bne.n	10366 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   1033c:	f892 9002 	ldrb.w	r9, [r2, #2]
   10340:	f1b9 0f01 	cmp.w	r9, #1
   10344:	d131      	bne.n	103aa <bt_att_recv+0xce>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   10346:	2100      	movs	r1, #0
   10348:	f10a 0030 	add.w	r0, sl, #48	; 0x30
   1034c:	f008 fcad 	bl	18caa <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   10350:	2800      	cmp	r0, #0
   10352:	d035      	beq.n	103c0 <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected request");
   10354:	4b35      	ldr	r3, [pc, #212]	; (1042c <bt_att_recv+0x150>)
   10356:	617b      	str	r3, [r7, #20]
   10358:	2302      	movs	r3, #2
   1035a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1035e:	613b      	str	r3, [r7, #16]
   10360:	f107 0210 	add.w	r2, r7, #16
   10364:	e7ca      	b.n	102fc <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   10366:	3301      	adds	r3, #1
   10368:	2b0e      	cmp	r3, #14
   1036a:	d1df      	bne.n	1032c <bt_att_recv+0x50>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   1036c:	466c      	mov	r4, sp
   1036e:	b088      	sub	sp, #32
   10370:	466a      	mov	r2, sp
   10372:	4b2f      	ldr	r3, [pc, #188]	; (10430 <bt_att_recv+0x154>)
   10374:	482b      	ldr	r0, [pc, #172]	; (10424 <bt_att_recv+0x148>)
   10376:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1037a:	2303      	movs	r3, #3
   1037c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   10380:	f842 3f10 	str.w	r3, [r2, #16]!
   10384:	f008 fb9e 	bl	18ac4 <z_log_msg_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   10388:	7829      	ldrb	r1, [r5, #0]
   1038a:	46a5      	mov	sp, r4
   1038c:	4608      	mov	r0, r1
   1038e:	f7ff fc25 	bl	fbdc <att_op_get_type>
   10392:	2800      	cmp	r0, #0
   10394:	d0b5      	beq.n	10302 <bt_att_recv+0x26>
   10396:	2805      	cmp	r0, #5
   10398:	d0b3      	beq.n	10302 <bt_att_recv+0x26>
	if (!req) {
   1039a:	2900      	cmp	r1, #0
   1039c:	d0b1      	beq.n	10302 <bt_att_recv+0x26>
   1039e:	2306      	movs	r3, #6
   103a0:	2200      	movs	r2, #0
   103a2:	4630      	mov	r0, r6
   103a4:	f008 fddb 	bl	18f5e <send_err_rsp.part.0>
   103a8:	e7ab      	b.n	10302 <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
   103aa:	f1b9 0f05 	cmp.w	r9, #5
   103ae:	d107      	bne.n	103c0 <bt_att_recv+0xe4>
			   atomic_test_and_set_bit(att_chan->flags,
   103b0:	2101      	movs	r1, #1
   103b2:	f10a 0030 	add.w	r0, sl, #48	; 0x30
   103b6:	f008 fc78 	bl	18caa <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   103ba:	b108      	cbz	r0, 103c0 <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected indication");
   103bc:	4b1d      	ldr	r3, [pc, #116]	; (10434 <bt_att_recv+0x158>)
   103be:	e7ca      	b.n	10356 <bt_att_recv+0x7a>
	if (buf->len < handler->expect_len) {
   103c0:	44d8      	add	r8, fp
   103c2:	8a23      	ldrh	r3, [r4, #16]
   103c4:	f898 2001 	ldrb.w	r2, [r8, #1]
   103c8:	429a      	cmp	r2, r3
   103ca:	d916      	bls.n	103fa <bt_att_recv+0x11e>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   103cc:	46e9      	mov	r9, sp
   103ce:	b088      	sub	sp, #32
   103d0:	466a      	mov	r2, sp
   103d2:	7829      	ldrb	r1, [r5, #0]
   103d4:	2404      	movs	r4, #4
   103d6:	4818      	ldr	r0, [pc, #96]	; (10438 <bt_att_recv+0x15c>)
   103d8:	61d1      	str	r1, [r2, #28]
   103da:	e9c2 0305 	strd	r0, r3, [r2, #20]
   103de:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   103e2:	4810      	ldr	r0, [pc, #64]	; (10424 <bt_att_recv+0x148>)
   103e4:	f842 4f10 	str.w	r4, [r2, #16]!
   103e8:	f008 fb6c 	bl	18ac4 <z_log_msg_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   103ec:	f898 3002 	ldrb.w	r3, [r8, #2]
   103f0:	46cd      	mov	sp, r9
   103f2:	2b01      	cmp	r3, #1
   103f4:	d185      	bne.n	10302 <bt_att_recv+0x26>
		err = BT_ATT_ERR_INVALID_PDU;
   103f6:	4623      	mov	r3, r4
   103f8:	e00c      	b.n	10414 <bt_att_recv+0x138>
		err = handler->func(att_chan, buf);
   103fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
   103fe:	4621      	mov	r1, r4
   10400:	4630      	mov	r0, r6
   10402:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   10404:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   10408:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   1040a:	f47f af7a 	bne.w	10302 <bt_att_recv+0x26>
   1040e:	2800      	cmp	r0, #0
   10410:	f43f af77 	beq.w	10302 <bt_att_recv+0x26>
		send_err_rsp(att_chan, hdr->code, 0, err);
   10414:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   10416:	2900      	cmp	r1, #0
   10418:	f43f af73 	beq.w	10302 <bt_att_recv+0x26>
   1041c:	e7c0      	b.n	103a0 <bt_att_recv+0xc4>
   1041e:	bf00      	nop
   10420:	0001dbf4 	.word	0x0001dbf4
   10424:	0001b878 	.word	0x0001b878
   10428:	0001be80 	.word	0x0001be80
   1042c:	0001dc29 	.word	0x0001dc29
   10430:	0001dc0f 	.word	0x0001dc0f
   10434:	0001dc45 	.word	0x0001dc45
   10438:	0001dc64 	.word	0x0001dc64

0001043c <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1043c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1043e:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   10440:	6803      	ldr	r3, [r0, #0]
   10442:	460d      	mov	r5, r1
   10444:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   10446:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   10448:	bf18      	it	ne
   1044a:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1044c:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1044e:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   10450:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   10452:	f009 f916 	bl	19682 <bt_gatt_change_aware>
   10456:	b948      	cbnz	r0, 1046c <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   10458:	2105      	movs	r1, #5
   1045a:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1045e:	f008 fc24 	bl	18caa <atomic_test_and_set_bit>
   10462:	2800      	cmp	r0, #0
   10464:	d048      	beq.n	104f8 <att_write_rsp.constprop.0+0xbc>
			return 0;
   10466:	2000      	movs	r0, #0
}
   10468:	b007      	add	sp, #28
   1046a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   1046c:	2e00      	cmp	r6, #0
   1046e:	d045      	beq.n	104fc <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   10470:	2218      	movs	r2, #24
   10472:	2100      	movs	r1, #0
   10474:	4668      	mov	r0, sp
   10476:	f007 fea5 	bl	181c4 <memset>
	if (rsp) {
   1047a:	bb67      	cbnz	r7, 104d6 <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   1047c:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1047e:	4631      	mov	r1, r6
	data.conn = chan->att->conn;
   10480:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   10482:	4630      	mov	r0, r6
	data.conn = chan->att->conn;
   10484:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   10486:	2300      	movs	r3, #0
   10488:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   1048c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1048e:	4a1c      	ldr	r2, [pc, #112]	; (10500 <att_write_rsp.constprop.0+0xc4>)
	data.value = value;
   10490:	9303      	str	r3, [sp, #12]
	data.len = len;
   10492:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
	data.req = req;
   10496:	f88d 5008 	strb.w	r5, [sp, #8]
	data.len = len;
   1049a:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1049e:	2301      	movs	r3, #1
   104a0:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   104a4:	466b      	mov	r3, sp
   104a6:	f008 fa73 	bl	18990 <bt_gatt_foreach_attr>
	if (data.err) {
   104aa:	f89d 3014 	ldrb.w	r3, [sp, #20]
   104ae:	b1e3      	cbz	r3, 104ea <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   104b0:	2f00      	cmp	r7, #0
   104b2:	d0d8      	beq.n	10466 <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   104b4:	9b01      	ldr	r3, [sp, #4]
   104b6:	6998      	ldr	r0, [r3, #24]
   104b8:	f7ff fbd6 	bl	fc68 <tx_meta_data_free>
			net_buf_unref(data.buf);
   104bc:	9801      	ldr	r0, [sp, #4]
   104be:	f001 fb59 	bl	11b74 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   104c2:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   104c6:	2d00      	cmp	r5, #0
   104c8:	d0cd      	beq.n	10466 <att_write_rsp.constprop.0+0x2a>
   104ca:	4632      	mov	r2, r6
   104cc:	4629      	mov	r1, r5
   104ce:	4620      	mov	r0, r4
   104d0:	f008 fd45 	bl	18f5e <send_err_rsp.part.0>
   104d4:	e7c7      	b.n	10466 <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   104d6:	2200      	movs	r2, #0
   104d8:	4639      	mov	r1, r7
   104da:	4620      	mov	r0, r4
   104dc:	f7ff fe8a 	bl	101f4 <bt_att_chan_create_pdu>
   104e0:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   104e2:	2800      	cmp	r0, #0
   104e4:	d1ca      	bne.n	1047c <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   104e6:	200e      	movs	r0, #14
   104e8:	e7be      	b.n	10468 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   104ea:	9901      	ldr	r1, [sp, #4]
   104ec:	2900      	cmp	r1, #0
   104ee:	d0ba      	beq.n	10466 <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   104f0:	4620      	mov	r0, r4
   104f2:	f008 fb1b 	bl	18b2c <bt_att_chan_send_rsp>
   104f6:	e7b6      	b.n	10466 <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   104f8:	2012      	movs	r0, #18
   104fa:	e7b5      	b.n	10468 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   104fc:	2001      	movs	r0, #1
   104fe:	e7b3      	b.n	10468 <att_write_rsp.constprop.0+0x2c>
   10500:	0001892f 	.word	0x0001892f

00010504 <bt_att_create_pdu>:
{
   10504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10506:	af00      	add	r7, sp, #0
   10508:	460e      	mov	r6, r1
   1050a:	4615      	mov	r5, r2
	att = att_get(conn);
   1050c:	f7ff fcf2 	bl	fef4 <att_get>
	if (!att) {
   10510:	b1e0      	cbz	r0, 1054c <bt_att_create_pdu+0x48>
	return list->head;
   10512:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   10514:	4618      	mov	r0, r3
   10516:	b11b      	cbz	r3, 10520 <bt_att_create_pdu+0x1c>
	return node->next;
   10518:	f850 3988 	ldr.w	r3, [r0], #-136
   1051c:	b103      	cbz	r3, 10520 <bt_att_create_pdu+0x1c>
   1051e:	3b88      	subs	r3, #136	; 0x88
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   10520:	1c6c      	adds	r4, r5, #1
   10522:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   10524:	b118      	cbz	r0, 1052e <bt_att_create_pdu+0x2a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   10526:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   10528:	42a1      	cmp	r1, r4
   1052a:	d219      	bcs.n	10560 <bt_att_create_pdu+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1052c:	b983      	cbnz	r3, 10550 <bt_att_create_pdu+0x4c>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   1052e:	466d      	mov	r5, sp
   10530:	b088      	sub	sp, #32
   10532:	466a      	mov	r2, sp
   10534:	4b0e      	ldr	r3, [pc, #56]	; (10570 <bt_att_create_pdu+0x6c>)
   10536:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1053a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1053e:	2303      	movs	r3, #3
   10540:	480c      	ldr	r0, [pc, #48]	; (10574 <bt_att_create_pdu+0x70>)
   10542:	f842 3f10 	str.w	r3, [r2, #16]!
   10546:	f008 fabd 	bl	18ac4 <z_log_msg_static_create.constprop.0>
   1054a:	46ad      	mov	sp, r5
		return NULL;
   1054c:	2000      	movs	r0, #0
   1054e:	e00b      	b.n	10568 <bt_att_create_pdu+0x64>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   10550:	4618      	mov	r0, r3
   10552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   10556:	b14b      	cbz	r3, 1056c <bt_att_create_pdu+0x68>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   10558:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1055a:	3b88      	subs	r3, #136	; 0x88
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1055c:	428a      	cmp	r2, r1
   1055e:	d8f7      	bhi.n	10550 <bt_att_create_pdu+0x4c>
		return bt_att_chan_create_pdu(chan, op, len);
   10560:	462a      	mov	r2, r5
   10562:	4631      	mov	r1, r6
   10564:	f7ff fe46 	bl	101f4 <bt_att_chan_create_pdu>
}
   10568:	46bd      	mov	sp, r7
   1056a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1056c:	4614      	mov	r4, r2
   1056e:	e7da      	b.n	10526 <bt_att_create_pdu+0x22>
   10570:	0001dc83 	.word	0x0001dc83
   10574:	0001b878 	.word	0x0001b878

00010578 <att_read_group_req>:
{
   10578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1057c:	8a0e      	ldrh	r6, [r1, #16]
{
   1057e:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   10580:	3e04      	subs	r6, #4
   10582:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   10584:	2e02      	cmp	r6, #2
{
   10586:	4608      	mov	r0, r1
   10588:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   1058a:	d001      	beq.n	10590 <att_read_group_req+0x18>
   1058c:	2e10      	cmp	r6, #16
   1058e:	d16a      	bne.n	10666 <att_read_group_req+0xee>
   10590:	2104      	movs	r1, #4
   10592:	300c      	adds	r0, #12
   10594:	f009 f96d 	bl	19872 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   10598:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   1059c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1059e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   105a0:	1d01      	adds	r1, r0, #4
   105a2:	4632      	mov	r2, r6
   105a4:	4640      	mov	r0, r8
   105a6:	f007 fe47 	bl	18238 <bt_uuid_create>
   105aa:	2800      	cmp	r0, #0
   105ac:	d05d      	beq.n	1066a <att_read_group_req+0xf2>
	if (!start || !end) {
   105ae:	2d00      	cmp	r5, #0
   105b0:	d03a      	beq.n	10628 <att_read_group_req+0xb0>
   105b2:	2600      	movs	r6, #0
   105b4:	2f00      	cmp	r7, #0
   105b6:	d036      	beq.n	10626 <att_read_group_req+0xae>
	if (start > end) {
   105b8:	42bd      	cmp	r5, r7
   105ba:	d835      	bhi.n	10628 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   105bc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   105c0:	4640      	mov	r0, r8
   105c2:	a901      	add	r1, sp, #4
   105c4:	f88d 6004 	strb.w	r6, [sp, #4]
   105c8:	f8ad 3006 	strh.w	r3, [sp, #6]
   105cc:	f007 fe06 	bl	181dc <bt_uuid_cmp>
   105d0:	bb70      	cbnz	r0, 10630 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   105d2:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   105d4:	2214      	movs	r2, #20
   105d6:	2100      	movs	r1, #0
   105d8:	a807      	add	r0, sp, #28
   105da:	f007 fdf3 	bl	181c4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   105de:	2201      	movs	r2, #1
   105e0:	2111      	movs	r1, #17
   105e2:	4630      	mov	r0, r6
   105e4:	f7ff ff8e 	bl	10504 <bt_att_create_pdu>
   105e8:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   105ea:	2800      	cmp	r0, #0
   105ec:	d03d      	beq.n	1066a <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   105ee:	2101      	movs	r1, #1
   105f0:	300c      	adds	r0, #12
	data.uuid = uuid;
   105f2:	e9cd 4807 	strd	r4, r8, [sp, #28]
   105f6:	f009 f90c 	bl	19812 <net_buf_simple_add>
	data.rsp->len = 0U;
   105fa:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   105fc:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   105fe:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   10600:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   10602:	4a1b      	ldr	r2, [pc, #108]	; (10670 <att_read_group_req+0xf8>)
	data.group = NULL;
   10604:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   10606:	4628      	mov	r0, r5
   10608:	ab07      	add	r3, sp, #28
   1060a:	f008 f9c1 	bl	18990 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1060e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10610:	781b      	ldrb	r3, [r3, #0]
   10612:	bb1b      	cbnz	r3, 1065c <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   10614:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10616:	6998      	ldr	r0, [r3, #24]
   10618:	f7ff fb26 	bl	fc68 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1061c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1061e:	f001 faa9 	bl	11b74 <net_buf_unref>
	if (!req) {
   10622:	230a      	movs	r3, #10
   10624:	e001      	b.n	1062a <att_read_group_req+0xb2>
			*err = 0U;
   10626:	463d      	mov	r5, r7
	if (!req) {
   10628:	2301      	movs	r3, #1
   1062a:	462a      	mov	r2, r5
   1062c:	2110      	movs	r1, #16
   1062e:	e00e      	b.n	1064e <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   10630:	f642 0301 	movw	r3, #10241	; 0x2801
   10634:	4640      	mov	r0, r8
   10636:	a907      	add	r1, sp, #28
   10638:	f88d 601c 	strb.w	r6, [sp, #28]
   1063c:	f8ad 301e 	strh.w	r3, [sp, #30]
   10640:	f007 fdcc 	bl	181dc <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   10644:	2800      	cmp	r0, #0
   10646:	d0c4      	beq.n	105d2 <att_read_group_req+0x5a>
	if (!req) {
   10648:	2310      	movs	r3, #16
   1064a:	462a      	mov	r2, r5
   1064c:	4619      	mov	r1, r3
   1064e:	4620      	mov	r0, r4
   10650:	f008 fc85 	bl	18f5e <send_err_rsp.part.0>
		return 0;
   10654:	2000      	movs	r0, #0
}
   10656:	b00c      	add	sp, #48	; 0x30
   10658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   1065c:	4620      	mov	r0, r4
   1065e:	9909      	ldr	r1, [sp, #36]	; 0x24
   10660:	f008 fa64 	bl	18b2c <bt_att_chan_send_rsp>
	return 0;
   10664:	e7f6      	b.n	10654 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   10666:	2004      	movs	r0, #4
   10668:	e7f5      	b.n	10656 <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   1066a:	200e      	movs	r0, #14
   1066c:	e7f3      	b.n	10656 <att_read_group_req+0xde>
   1066e:	bf00      	nop
   10670:	0000ff99 	.word	0x0000ff99

00010674 <att_read_mult_vl_req>:
{
   10674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   10678:	6846      	ldr	r6, [r0, #4]
{
   1067a:	4604      	mov	r4, r0
   1067c:	460d      	mov	r5, r1
   1067e:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   10680:	2101      	movs	r1, #1
   10682:	4630      	mov	r0, r6
   10684:	f008 fffd 	bl	19682 <bt_gatt_change_aware>
   10688:	b950      	cbnz	r0, 106a0 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1068a:	2105      	movs	r1, #5
   1068c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   10690:	f008 fb0b 	bl	18caa <atomic_test_and_set_bit>
   10694:	2800      	cmp	r0, #0
   10696:	d13b      	bne.n	10710 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   10698:	2012      	movs	r0, #18
}
   1069a:	b005      	add	sp, #20
   1069c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   106a0:	2210      	movs	r2, #16
   106a2:	2100      	movs	r1, #0
   106a4:	4668      	mov	r0, sp
   106a6:	f007 fd8d 	bl	181c4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   106aa:	2200      	movs	r2, #0
   106ac:	2121      	movs	r1, #33	; 0x21
   106ae:	4630      	mov	r0, r6
   106b0:	f7ff ff28 	bl	10504 <bt_att_create_pdu>
   106b4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   106b6:	b368      	cbz	r0, 10714 <att_read_mult_vl_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   106b8:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   106bc:	f8df 9058 	ldr.w	r9, [pc, #88]	; 10718 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   106c0:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   106c2:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   106c6:	8a2b      	ldrh	r3, [r5, #16]
   106c8:	2b01      	cmp	r3, #1
   106ca:	d804      	bhi.n	106d6 <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   106cc:	4620      	mov	r0, r4
   106ce:	9902      	ldr	r1, [sp, #8]
   106d0:	f008 fa2c 	bl	18b2c <bt_att_chan_send_rsp>
	return 0;
   106d4:	e01c      	b.n	10710 <att_read_mult_vl_req+0x9c>
   106d6:	4638      	mov	r0, r7
   106d8:	f009 f8d3 	bl	19882 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   106dc:	466b      	mov	r3, sp
   106de:	464a      	mov	r2, r9
   106e0:	4601      	mov	r1, r0
   106e2:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   106e4:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   106e8:	f008 f952 	bl	18990 <bt_gatt_foreach_attr>
		if (data.err) {
   106ec:	f89d 300c 	ldrb.w	r3, [sp, #12]
   106f0:	2b00      	cmp	r3, #0
   106f2:	d0e8      	beq.n	106c6 <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   106f4:	9b02      	ldr	r3, [sp, #8]
   106f6:	6998      	ldr	r0, [r3, #24]
   106f8:	f7ff fab6 	bl	fc68 <tx_meta_data_free>
			net_buf_unref(data.buf);
   106fc:	9802      	ldr	r0, [sp, #8]
   106fe:	f001 fa39 	bl	11b74 <net_buf_unref>
	if (!req) {
   10702:	4632      	mov	r2, r6
   10704:	2120      	movs	r1, #32
   10706:	4620      	mov	r0, r4
   10708:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1070c:	f008 fc27 	bl	18f5e <send_err_rsp.part.0>
			return 0;
   10710:	2000      	movs	r0, #0
   10712:	e7c2      	b.n	1069a <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   10714:	200e      	movs	r0, #14
   10716:	e7c0      	b.n	1069a <att_read_mult_vl_req+0x26>
   10718:	00018d13 	.word	0x00018d13

0001071c <att_read_mult_req>:
{
   1071c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   10720:	6846      	ldr	r6, [r0, #4]
{
   10722:	4604      	mov	r4, r0
   10724:	460d      	mov	r5, r1
   10726:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   10728:	2101      	movs	r1, #1
   1072a:	4630      	mov	r0, r6
   1072c:	f008 ffa9 	bl	19682 <bt_gatt_change_aware>
   10730:	b950      	cbnz	r0, 10748 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   10732:	2105      	movs	r1, #5
   10734:	f104 0034 	add.w	r0, r4, #52	; 0x34
   10738:	f008 fab7 	bl	18caa <atomic_test_and_set_bit>
   1073c:	2800      	cmp	r0, #0
   1073e:	d13b      	bne.n	107b8 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   10740:	2012      	movs	r0, #18
}
   10742:	b005      	add	sp, #20
   10744:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   10748:	2210      	movs	r2, #16
   1074a:	2100      	movs	r1, #0
   1074c:	4668      	mov	r0, sp
   1074e:	f007 fd39 	bl	181c4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   10752:	2200      	movs	r2, #0
   10754:	210f      	movs	r1, #15
   10756:	4630      	mov	r0, r6
   10758:	f7ff fed4 	bl	10504 <bt_att_create_pdu>
   1075c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1075e:	b368      	cbz	r0, 107bc <att_read_mult_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   10760:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   10764:	f8df 9058 	ldr.w	r9, [pc, #88]	; 107c0 <att_read_mult_req+0xa4>
	data.chan = chan;
   10768:	9400      	str	r4, [sp, #0]
   1076a:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   1076e:	8a2b      	ldrh	r3, [r5, #16]
   10770:	2b01      	cmp	r3, #1
   10772:	d804      	bhi.n	1077e <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   10774:	4620      	mov	r0, r4
   10776:	9902      	ldr	r1, [sp, #8]
   10778:	f008 f9d8 	bl	18b2c <bt_att_chan_send_rsp>
	return 0;
   1077c:	e01c      	b.n	107b8 <att_read_mult_req+0x9c>
   1077e:	4638      	mov	r0, r7
   10780:	f009 f87f 	bl	19882 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   10784:	466b      	mov	r3, sp
   10786:	464a      	mov	r2, r9
   10788:	4601      	mov	r1, r0
   1078a:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1078c:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   10790:	f008 f8fe 	bl	18990 <bt_gatt_foreach_attr>
		if (data.err) {
   10794:	f89d 300c 	ldrb.w	r3, [sp, #12]
   10798:	2b00      	cmp	r3, #0
   1079a:	d0e8      	beq.n	1076e <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1079c:	9b02      	ldr	r3, [sp, #8]
   1079e:	6998      	ldr	r0, [r3, #24]
   107a0:	f7ff fa62 	bl	fc68 <tx_meta_data_free>
			net_buf_unref(data.buf);
   107a4:	9802      	ldr	r0, [sp, #8]
   107a6:	f001 f9e5 	bl	11b74 <net_buf_unref>
	if (!req) {
   107aa:	4632      	mov	r2, r6
   107ac:	210e      	movs	r1, #14
   107ae:	4620      	mov	r0, r4
   107b0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   107b4:	f008 fbd3 	bl	18f5e <send_err_rsp.part.0>
			return 0;
   107b8:	2000      	movs	r0, #0
   107ba:	e7c2      	b.n	10742 <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   107bc:	200e      	movs	r0, #14
   107be:	e7c0      	b.n	10742 <att_read_mult_req+0x26>
   107c0:	00018ccd 	.word	0x00018ccd

000107c4 <att_read_rsp>:
{
   107c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   107c8:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   107cc:	4604      	mov	r4, r0
   107ce:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   107d0:	4640      	mov	r0, r8
   107d2:	2101      	movs	r1, #1
{
   107d4:	4617      	mov	r7, r2
   107d6:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   107d8:	f008 ff53 	bl	19682 <bt_gatt_change_aware>
   107dc:	b948      	cbnz	r0, 107f2 <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   107de:	2105      	movs	r1, #5
   107e0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   107e4:	f008 fa61 	bl	18caa <atomic_test_and_set_bit>
   107e8:	bb78      	cbnz	r0, 1084a <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   107ea:	2012      	movs	r0, #18
}
   107ec:	b004      	add	sp, #16
   107ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   107f2:	b38d      	cbz	r5, 10858 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   107f4:	2210      	movs	r2, #16
   107f6:	2100      	movs	r1, #0
   107f8:	4668      	mov	r0, sp
   107fa:	f007 fce3 	bl	181c4 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   107fe:	2200      	movs	r2, #0
   10800:	4639      	mov	r1, r7
   10802:	4640      	mov	r0, r8
   10804:	f7ff fe7e 	bl	10504 <bt_att_create_pdu>
   10808:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1080a:	b338      	cbz	r0, 1085c <att_read_rsp+0x98>
	data.offset = offset;
   1080c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   10810:	4629      	mov	r1, r5
	data.offset = offset;
   10812:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   10816:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   10818:	4628      	mov	r0, r5
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1081a:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1081e:	4a10      	ldr	r2, [pc, #64]	; (10860 <att_read_rsp+0x9c>)
   10820:	466b      	mov	r3, sp
	data.chan = chan;
   10822:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   10824:	f008 f8b4 	bl	18990 <bt_gatt_foreach_attr>
	if (data.err) {
   10828:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1082c:	b17b      	cbz	r3, 1084e <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1082e:	9b02      	ldr	r3, [sp, #8]
   10830:	6998      	ldr	r0, [r3, #24]
   10832:	f7ff fa19 	bl	fc68 <tx_meta_data_free>
		net_buf_unref(data.buf);
   10836:	9802      	ldr	r0, [sp, #8]
   10838:	f001 f99c 	bl	11b74 <net_buf_unref>
	if (!req) {
   1083c:	462a      	mov	r2, r5
   1083e:	4631      	mov	r1, r6
   10840:	4620      	mov	r0, r4
   10842:	f89d 300c 	ldrb.w	r3, [sp, #12]
   10846:	f008 fb8a 	bl	18f5e <send_err_rsp.part.0>
			return 0;
   1084a:	2000      	movs	r0, #0
   1084c:	e7ce      	b.n	107ec <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   1084e:	4620      	mov	r0, r4
   10850:	9902      	ldr	r1, [sp, #8]
   10852:	f008 f96b 	bl	18b2c <bt_att_chan_send_rsp>
	return 0;
   10856:	e7f8      	b.n	1084a <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   10858:	2001      	movs	r0, #1
   1085a:	e7c7      	b.n	107ec <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   1085c:	200e      	movs	r0, #14
   1085e:	e7c5      	b.n	107ec <att_read_rsp+0x28>
   10860:	00018ccd 	.word	0x00018ccd

00010864 <att_read_type_req>:
{
   10864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   10868:	8a0d      	ldrh	r5, [r1, #16]
{
   1086a:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   1086c:	3d04      	subs	r5, #4
   1086e:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   10870:	2d02      	cmp	r5, #2
{
   10872:	4608      	mov	r0, r1
   10874:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   10876:	d001      	beq.n	1087c <att_read_type_req+0x18>
   10878:	2d10      	cmp	r5, #16
   1087a:	d150      	bne.n	1091e <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   1087c:	2104      	movs	r1, #4
   1087e:	300c      	adds	r0, #12
   10880:	f008 fff7 	bl	19872 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   10884:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   10888:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1088a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1088c:	1d01      	adds	r1, r0, #4
   1088e:	462a      	mov	r2, r5
   10890:	4640      	mov	r0, r8
   10892:	f007 fcd1 	bl	18238 <bt_uuid_create>
   10896:	b188      	cbz	r0, 108bc <att_read_type_req+0x58>
	if (!start || !end) {
   10898:	b19e      	cbz	r6, 108c2 <att_read_type_req+0x5e>
   1089a:	b18f      	cbz	r7, 108c0 <att_read_type_req+0x5c>
	if (start > end) {
   1089c:	42b7      	cmp	r7, r6
   1089e:	d310      	bcc.n	108c2 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   108a0:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   108a2:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   108a4:	2100      	movs	r1, #0
   108a6:	eb0d 0002 	add.w	r0, sp, r2
   108aa:	f007 fc8b 	bl	181c4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   108ae:	2201      	movs	r2, #1
   108b0:	2109      	movs	r1, #9
   108b2:	4628      	mov	r0, r5
   108b4:	f7ff fe26 	bl	10504 <bt_att_create_pdu>
   108b8:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   108ba:	b960      	cbnz	r0, 108d6 <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   108bc:	200e      	movs	r0, #14
   108be:	e007      	b.n	108d0 <att_read_type_req+0x6c>
			*err = 0U;
   108c0:	463e      	mov	r6, r7
	if (!req) {
   108c2:	2301      	movs	r3, #1
   108c4:	4632      	mov	r2, r6
   108c6:	2108      	movs	r1, #8
   108c8:	4620      	mov	r0, r4
   108ca:	f008 fb48 	bl	18f5e <send_err_rsp.part.0>
		return 0;
   108ce:	2000      	movs	r0, #0
}
   108d0:	b00c      	add	sp, #48	; 0x30
   108d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   108d6:	2101      	movs	r1, #1
   108d8:	300c      	adds	r0, #12
	data.uuid = uuid;
   108da:	e9cd 4806 	strd	r4, r8, [sp, #24]
   108de:	f008 ff98 	bl	19812 <net_buf_simple_add>
	data.rsp->len = 0U;
   108e2:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   108e4:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   108e6:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   108e8:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   108ea:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   108ec:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   108f0:	4630      	mov	r0, r6
   108f2:	ab06      	add	r3, sp, #24
   108f4:	4a0b      	ldr	r2, [pc, #44]	; (10924 <att_read_type_req+0xc0>)
   108f6:	f008 f84b 	bl	18990 <bt_gatt_foreach_attr>
	if (data.err) {
   108fa:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   108fe:	b14b      	cbz	r3, 10914 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   10900:	9b08      	ldr	r3, [sp, #32]
   10902:	6998      	ldr	r0, [r3, #24]
   10904:	f7ff f9b0 	bl	fc68 <tx_meta_data_free>
		net_buf_unref(data.buf);
   10908:	9808      	ldr	r0, [sp, #32]
   1090a:	f001 f933 	bl	11b74 <net_buf_unref>
	if (!req) {
   1090e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   10912:	e7d7      	b.n	108c4 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   10914:	4620      	mov	r0, r4
   10916:	9908      	ldr	r1, [sp, #32]
   10918:	f008 f908 	bl	18b2c <bt_att_chan_send_rsp>
	return 0;
   1091c:	e7d7      	b.n	108ce <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   1091e:	2004      	movs	r0, #4
   10920:	e7d6      	b.n	108d0 <att_read_type_req+0x6c>
   10922:	bf00      	nop
   10924:	00010045 	.word	0x00010045

00010928 <att_find_type_req>:
{
   10928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1092c:	460f      	mov	r7, r1
   1092e:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   10930:	2106      	movs	r1, #6
   10932:	b086      	sub	sp, #24
   10934:	f107 000c 	add.w	r0, r7, #12
   10938:	f008 ff9b 	bl	19872 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1093c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1093e:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   10942:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   10944:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   10948:	b1c5      	cbz	r5, 1097c <att_find_type_req+0x54>
   1094a:	2300      	movs	r3, #0
   1094c:	f1b8 0f00 	cmp.w	r8, #0
   10950:	d013      	beq.n	1097a <att_find_type_req+0x52>
	if (start > end) {
   10952:	4545      	cmp	r5, r8
   10954:	d812      	bhi.n	1097c <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   10956:	f88d 3000 	strb.w	r3, [sp]
   1095a:	f88d 3004 	strb.w	r3, [sp, #4]
   1095e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   10962:	4668      	mov	r0, sp
   10964:	a901      	add	r1, sp, #4
   10966:	f8ad 2002 	strh.w	r2, [sp, #2]
   1096a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1096e:	f007 fc35 	bl	181dc <bt_uuid_cmp>
   10972:	4606      	mov	r6, r0
   10974:	b160      	cbz	r0, 10990 <att_find_type_req+0x68>
	if (!req) {
   10976:	230a      	movs	r3, #10
   10978:	e001      	b.n	1097e <att_find_type_req+0x56>
			*err = 0U;
   1097a:	4645      	mov	r5, r8
	if (!req) {
   1097c:	2301      	movs	r3, #1
   1097e:	462a      	mov	r2, r5
   10980:	2106      	movs	r1, #6
   10982:	4620      	mov	r0, r4
   10984:	f008 faeb 	bl	18f5e <send_err_rsp.part.0>
		return 0;
   10988:	2000      	movs	r0, #0
}
   1098a:	b006      	add	sp, #24
   1098c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   10990:	f8d4 a004 	ldr.w	sl, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   10994:	4601      	mov	r1, r0
   10996:	2214      	movs	r2, #20
   10998:	a801      	add	r0, sp, #4
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1099a:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   1099c:	f007 fc12 	bl	181c4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   109a0:	4632      	mov	r2, r6
   109a2:	2107      	movs	r1, #7
   109a4:	4650      	mov	r0, sl
   109a6:	f7ff fdad 	bl	10504 <bt_att_create_pdu>
   109aa:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   109ac:	b1f8      	cbz	r0, 109ee <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   109ae:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   109b0:	4641      	mov	r1, r8
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   109b2:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   109b6:	4628      	mov	r0, r5
   109b8:	ab01      	add	r3, sp, #4
   109ba:	4a0e      	ldr	r2, [pc, #56]	; (109f4 <att_find_type_req+0xcc>)
	data.value = value;
   109bc:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.chan = chan;
   109c0:	9401      	str	r4, [sp, #4]
	data.value_len = value_len;
   109c2:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   109c6:	f007 ffe3 	bl	18990 <bt_gatt_foreach_attr>
	if (data.err) {
   109ca:	f89d 3015 	ldrb.w	r3, [sp, #21]
   109ce:	b14b      	cbz	r3, 109e4 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   109d0:	9b02      	ldr	r3, [sp, #8]
   109d2:	6998      	ldr	r0, [r3, #24]
   109d4:	f7ff f948 	bl	fc68 <tx_meta_data_free>
		net_buf_unref(data.buf);
   109d8:	9802      	ldr	r0, [sp, #8]
   109da:	f001 f8cb 	bl	11b74 <net_buf_unref>
	if (!req) {
   109de:	f89d 3015 	ldrb.w	r3, [sp, #21]
   109e2:	e7cc      	b.n	1097e <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   109e4:	4620      	mov	r0, r4
   109e6:	9902      	ldr	r1, [sp, #8]
   109e8:	f008 f8a0 	bl	18b2c <bt_att_chan_send_rsp>
	return 0;
   109ec:	e7cc      	b.n	10988 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   109ee:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   109f0:	e7cb      	b.n	1098a <att_find_type_req+0x62>
   109f2:	bf00      	nop
   109f4:	0000fc85 	.word	0x0000fc85

000109f8 <att_find_info_req>:
{
   109f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   109fa:	68cb      	ldr	r3, [r1, #12]
{
   109fc:	4604      	mov	r4, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   109fe:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   10a00:	885e      	ldrh	r6, [r3, #2]
{
   10a02:	b085      	sub	sp, #20
	if (!start || !end) {
   10a04:	b195      	cbz	r5, 10a2c <att_find_info_req+0x34>
   10a06:	b186      	cbz	r6, 10a2a <att_find_info_req+0x32>
	if (start > end) {
   10a08:	42b5      	cmp	r5, r6
   10a0a:	d80f      	bhi.n	10a2c <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   10a0c:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   10a0e:	2210      	movs	r2, #16
   10a10:	2100      	movs	r1, #0
   10a12:	4668      	mov	r0, sp
   10a14:	f007 fbd6 	bl	181c4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   10a18:	2200      	movs	r2, #0
   10a1a:	2105      	movs	r1, #5
   10a1c:	4638      	mov	r0, r7
   10a1e:	f7ff fd71 	bl	10504 <bt_att_create_pdu>
   10a22:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   10a24:	b958      	cbnz	r0, 10a3e <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   10a26:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   10a28:	e007      	b.n	10a3a <att_find_info_req+0x42>
			*err = 0U;
   10a2a:	4635      	mov	r5, r6
	if (!req) {
   10a2c:	2301      	movs	r3, #1
   10a2e:	462a      	mov	r2, r5
   10a30:	2104      	movs	r1, #4
   10a32:	4620      	mov	r0, r4
   10a34:	f008 fa93 	bl	18f5e <send_err_rsp.part.0>
		return 0;
   10a38:	2000      	movs	r0, #0
}
   10a3a:	b005      	add	sp, #20
   10a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   10a3e:	466b      	mov	r3, sp
   10a40:	4631      	mov	r1, r6
   10a42:	4628      	mov	r0, r5
   10a44:	4a09      	ldr	r2, [pc, #36]	; (10a6c <att_find_info_req+0x74>)
	data.chan = chan;
   10a46:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   10a48:	f007 ffa2 	bl	18990 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   10a4c:	9b02      	ldr	r3, [sp, #8]
   10a4e:	b943      	cbnz	r3, 10a62 <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   10a50:	9b01      	ldr	r3, [sp, #4]
   10a52:	6998      	ldr	r0, [r3, #24]
   10a54:	f7ff f908 	bl	fc68 <tx_meta_data_free>
		net_buf_unref(data.buf);
   10a58:	9801      	ldr	r0, [sp, #4]
   10a5a:	f001 f88b 	bl	11b74 <net_buf_unref>
	if (!req) {
   10a5e:	230a      	movs	r3, #10
   10a60:	e7e5      	b.n	10a2e <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   10a62:	4620      	mov	r0, r4
   10a64:	9901      	ldr	r1, [sp, #4]
   10a66:	f008 f861 	bl	18b2c <bt_att_chan_send_rsp>
	return 0;
   10a6a:	e7e5      	b.n	10a38 <att_find_info_req+0x40>
   10a6c:	000189a7 	.word	0x000189a7

00010a70 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   10a70:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   10a72:	4c0b      	ldr	r4, [pc, #44]	; (10aa0 <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   10a74:	4d0b      	ldr	r5, [pc, #44]	; (10aa4 <bt_att_init+0x34>)
   10a76:	4620      	mov	r0, r4
   10a78:	f00a f869 	bl	1ab4e <z_impl_k_queue_init>
   10a7c:	4629      	mov	r1, r5
   10a7e:	4620      	mov	r0, r4
   10a80:	f00a f871 	bl	1ab66 <k_queue_append>
   10a84:	4620      	mov	r0, r4
   10a86:	f105 0114 	add.w	r1, r5, #20
   10a8a:	f00a f86c 	bl	1ab66 <k_queue_append>
   10a8e:	4620      	mov	r0, r4
   10a90:	f105 0128 	add.w	r1, r5, #40	; 0x28
   10a94:	f00a f867 	bl	1ab66 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   10a98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   10a9c:	f000 bad6 	b.w	1104c <bt_gatt_init>
   10aa0:	20008688 	.word	0x20008688
   10aa4:	20009900 	.word	0x20009900

00010aa8 <bt_att_req_alloc>:
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
	struct bt_att_req *req = NULL;
   10aa8:	2300      	movs	r3, #0
{
   10aaa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10aac:	4605      	mov	r5, r0
   10aae:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   10ab0:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   10ab2:	f005 fadf 	bl	16074 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   10ab6:	4b0b      	ldr	r3, [pc, #44]	; (10ae4 <bt_att_req_alloc+0x3c>)
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   10ab8:	a901      	add	r1, sp, #4
	if (k_current_get() == att_handle_rsp_thread) {
   10aba:	681b      	ldr	r3, [r3, #0]
   10abc:	4283      	cmp	r3, r0
		timeout = K_NO_WAIT;
   10abe:	bf04      	itt	eq
   10ac0:	2500      	moveq	r5, #0
   10ac2:	462c      	moveq	r4, r5
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   10ac4:	462a      	mov	r2, r5
   10ac6:	4623      	mov	r3, r4
   10ac8:	4807      	ldr	r0, [pc, #28]	; (10ae8 <bt_att_req_alloc+0x40>)
   10aca:	f004 fbaf 	bl	1522c <k_mem_slab_alloc>
   10ace:	4601      	mov	r1, r0
   10ad0:	b930      	cbnz	r0, 10ae0 <bt_att_req_alloc+0x38>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   10ad2:	2210      	movs	r2, #16
   10ad4:	9801      	ldr	r0, [sp, #4]
   10ad6:	f007 fb75 	bl	181c4 <memset>

	return req;
   10ada:	9801      	ldr	r0, [sp, #4]
}
   10adc:	b003      	add	sp, #12
   10ade:	bd30      	pop	{r4, r5, pc}
		return NULL;
   10ae0:	2000      	movs	r0, #0
   10ae2:	e7fb      	b.n	10adc <bt_att_req_alloc+0x34>
   10ae4:	2000993c 	.word	0x2000993c
   10ae8:	20008614 	.word	0x20008614

00010aec <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   10aec:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   10aee:	6883      	ldr	r3, [r0, #8]
{
   10af0:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   10af2:	b14b      	cbz	r3, 10b08 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   10af4:	6998      	ldr	r0, [r3, #24]
   10af6:	f7ff f8b7 	bl	fc68 <tx_meta_data_free>
		net_buf_unref(req->buf);
   10afa:	9b01      	ldr	r3, [sp, #4]
   10afc:	6898      	ldr	r0, [r3, #8]
   10afe:	f001 f839 	bl	11b74 <net_buf_unref>
		req->buf = NULL;
   10b02:	2200      	movs	r2, #0
   10b04:	9b01      	ldr	r3, [sp, #4]
   10b06:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   10b08:	4803      	ldr	r0, [pc, #12]	; (10b18 <bt_att_req_free+0x2c>)
   10b0a:	a901      	add	r1, sp, #4
   10b0c:	f009 ff61 	bl	1a9d2 <k_mem_slab_free>
}
   10b10:	b003      	add	sp, #12
   10b12:	f85d fb04 	ldr.w	pc, [sp], #4
   10b16:	bf00      	nop
   10b18:	20008614 	.word	0x20008614

00010b1c <att_handle_rsp>:
{
   10b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10b20:	4604      	mov	r4, r0
   10b22:	b088      	sub	sp, #32
	k_work_cancel_delayable(&chan->timeout_work);
   10b24:	3058      	adds	r0, #88	; 0x58
{
   10b26:	460e      	mov	r6, r1
   10b28:	4617      	mov	r7, r2
   10b2a:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   10b2c:	f00a f909 	bl	1ad42 <k_work_cancel_delayable>
	if (!chan->req) {
   10b30:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   10b32:	b980      	cbnz	r0, 10b56 <att_handle_rsp+0x3a>
		LOG_WRN("No pending ATT request");
   10b34:	4b19      	ldr	r3, [pc, #100]	; (10b9c <att_handle_rsp+0x80>)
   10b36:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   10b3a:	9307      	str	r3, [sp, #28]
   10b3c:	2302      	movs	r3, #2
   10b3e:	4818      	ldr	r0, [pc, #96]	; (10ba0 <att_handle_rsp+0x84>)
   10b40:	aa06      	add	r2, sp, #24
   10b42:	9306      	str	r3, [sp, #24]
   10b44:	f007 ffbe 	bl	18ac4 <z_log_msg_static_create.constprop.0>
	att_req_send_process(chan->att);
   10b48:	6820      	ldr	r0, [r4, #0]
   10b4a:	f008 f943 	bl	18dd4 <att_req_send_process>
}
   10b4e:	2000      	movs	r0, #0
   10b50:	b008      	add	sp, #32
   10b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   10b56:	4b13      	ldr	r3, [pc, #76]	; (10ba4 <att_handle_rsp+0x88>)
   10b58:	f04f 0800 	mov.w	r8, #0
   10b5c:	4298      	cmp	r0, r3
   10b5e:	d102      	bne.n	10b66 <att_handle_rsp+0x4a>
		chan->req = NULL;
   10b60:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
   10b64:	e7f0      	b.n	10b48 <att_handle_rsp+0x2c>
	func = chan->req->func;
   10b66:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   10b6a:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   10b6e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   10b70:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
   10b74:	f7ff ffba 	bl	10aec <bt_att_req_free>
	att_req_send_process(chan->att);
   10b78:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   10b7a:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
	att_req_send_process(chan->att);
   10b7e:	f008 f929 	bl	18dd4 <att_req_send_process>
	if (func) {
   10b82:	f1b9 0f00 	cmp.w	r9, #0
   10b86:	d0e2      	beq.n	10b4e <att_handle_rsp+0x32>
		func(chan->att->conn, err, pdu, len, params);
   10b88:	6820      	ldr	r0, [r4, #0]
   10b8a:	f8cd a000 	str.w	sl, [sp]
   10b8e:	463b      	mov	r3, r7
   10b90:	4632      	mov	r2, r6
   10b92:	4629      	mov	r1, r5
   10b94:	6800      	ldr	r0, [r0, #0]
   10b96:	47c8      	blx	r9
   10b98:	e7d9      	b.n	10b4e <att_handle_rsp+0x32>
   10b9a:	bf00      	nop
   10b9c:	0001dc9e 	.word	0x0001dc9e
   10ba0:	0001b878 	.word	0x0001b878
   10ba4:	20009940 	.word	0x20009940

00010ba8 <bt_att_disconnected>:
{
   10ba8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   10bac:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   10bb0:	4604      	mov	r4, r0
	if (!att_chan->att) {
   10bb2:	2e00      	cmp	r6, #0
   10bb4:	d05a      	beq.n	10c6c <bt_att_disconnected+0xc4>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   10bb6:	f100 0184 	add.w	r1, r0, #132	; 0x84
   10bba:	f106 0024 	add.w	r0, r6, #36	; 0x24
   10bbe:	f008 f84e 	bl	18c5e <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   10bc2:	1f27      	subs	r7, r4, #4
   10bc4:	f104 0838 	add.w	r8, r4, #56	; 0x38
   10bc8:	2200      	movs	r2, #0
   10bca:	2300      	movs	r3, #0
   10bcc:	4640      	mov	r0, r8
   10bce:	f008 fdc5 	bl	1975c <net_buf_get>
   10bd2:	4605      	mov	r5, r0
   10bd4:	bb48      	cbnz	r0, 10c2a <bt_att_disconnected+0x82>
	if (chan->req) {
   10bd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10bd8:	b12b      	cbz	r3, 10be6 <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   10bda:	4602      	mov	r2, r0
   10bdc:	4601      	mov	r1, r0
   10bde:	230e      	movs	r3, #14
   10be0:	4638      	mov	r0, r7
   10be2:	f7ff ff9b 	bl	10b1c <att_handle_rsp>
	chan->att = NULL;
   10be6:	2300      	movs	r3, #0
	atomic_clear_bit(chan->flags, ATT_CONNECTED);
   10be8:	2102      	movs	r1, #2
	chan->att = NULL;
   10bea:	f844 3c04 	str.w	r3, [r4, #-4]
	atomic_clear_bit(chan->flags, ATT_CONNECTED);
   10bee:	f104 0030 	add.w	r0, r4, #48	; 0x30
   10bf2:	f008 f84d 	bl	18c90 <atomic_clear_bit>
	if (!sys_slist_is_empty(&att->chans)) {
   10bf6:	6a73      	ldr	r3, [r6, #36]	; 0x24
   10bf8:	2b00      	cmp	r3, #0
   10bfa:	d137      	bne.n	10c6c <bt_att_disconnected+0xc4>
	att_reset(att);
   10bfc:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   10bfe:	9803      	ldr	r0, [sp, #12]
   10c00:	2200      	movs	r2, #0
   10c02:	2300      	movs	r3, #0
   10c04:	300c      	adds	r0, #12
   10c06:	f008 fda9 	bl	1975c <net_buf_get>
   10c0a:	4605      	mov	r5, r0
   10c0c:	b9a0      	cbnz	r0, 10c38 <bt_att_disconnected+0x90>
	while (!sys_slist_is_empty(&att->reqs)) {
   10c0e:	9803      	ldr	r0, [sp, #12]
	return list->head;
   10c10:	6845      	ldr	r5, [r0, #4]
   10c12:	b9c5      	cbnz	r5, 10c46 <bt_att_disconnected+0x9e>
	att->conn = NULL;
   10c14:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   10c16:	a903      	add	r1, sp, #12
   10c18:	4816      	ldr	r0, [pc, #88]	; (10c74 <bt_att_disconnected+0xcc>)
   10c1a:	f009 feda 	bl	1a9d2 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   10c1e:	6820      	ldr	r0, [r4, #0]
}
   10c20:	b004      	add	sp, #16
   10c22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   10c26:	f000 be99 	b.w	1195c <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   10c2a:	69a8      	ldr	r0, [r5, #24]
   10c2c:	f7ff f81c 	bl	fc68 <tx_meta_data_free>
		net_buf_unref(buf);
   10c30:	4628      	mov	r0, r5
   10c32:	f000 ff9f 	bl	11b74 <net_buf_unref>
   10c36:	e7c7      	b.n	10bc8 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   10c38:	69a8      	ldr	r0, [r5, #24]
   10c3a:	f7ff f815 	bl	fc68 <tx_meta_data_free>
		net_buf_unref(buf);
   10c3e:	4628      	mov	r0, r5
   10c40:	f000 ff98 	bl	11b74 <net_buf_unref>
   10c44:	e7db      	b.n	10bfe <bt_att_disconnected+0x56>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10c46:	6882      	ldr	r2, [r0, #8]
	return node->next;
   10c48:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10c4a:	4295      	cmp	r5, r2
	list->head = node;
   10c4c:	6043      	str	r3, [r0, #4]
	list->tail = node;
   10c4e:	bf08      	it	eq
   10c50:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   10c52:	686e      	ldr	r6, [r5, #4]
   10c54:	b136      	cbz	r6, 10c64 <bt_att_disconnected+0xbc>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   10c56:	68eb      	ldr	r3, [r5, #12]
   10c58:	210e      	movs	r1, #14
   10c5a:	9300      	str	r3, [sp, #0]
   10c5c:	2300      	movs	r3, #0
   10c5e:	6800      	ldr	r0, [r0, #0]
   10c60:	461a      	mov	r2, r3
   10c62:	47b0      	blx	r6
		bt_att_req_free(req);
   10c64:	4628      	mov	r0, r5
   10c66:	f7ff ff41 	bl	10aec <bt_att_req_free>
   10c6a:	e7d0      	b.n	10c0e <bt_att_disconnected+0x66>
}
   10c6c:	b004      	add	sp, #16
   10c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10c72:	bf00      	nop
   10c74:	200085dc 	.word	0x200085dc

00010c78 <att_timeout>:
{
   10c78:	b510      	push	{r4, lr}
   10c7a:	4604      	mov	r4, r0
   10c7c:	b086      	sub	sp, #24
	LOG_ERR("ATT Timeout");
   10c7e:	4b08      	ldr	r3, [pc, #32]	; (10ca0 <att_timeout+0x28>)
   10c80:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10c84:	9305      	str	r3, [sp, #20]
   10c86:	2302      	movs	r3, #2
   10c88:	4806      	ldr	r0, [pc, #24]	; (10ca4 <att_timeout+0x2c>)
   10c8a:	aa04      	add	r2, sp, #16
   10c8c:	9304      	str	r3, [sp, #16]
   10c8e:	f007 ff19 	bl	18ac4 <z_log_msg_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   10c92:	f1a4 0054 	sub.w	r0, r4, #84	; 0x54
}
   10c96:	b006      	add	sp, #24
   10c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   10c9c:	f7ff bf84 	b.w	10ba8 <bt_att_disconnected>
   10ca0:	0001dcb5 	.word	0x0001dcb5
   10ca4:	0001b878 	.word	0x0001b878

00010ca8 <find_cf_cfg>:
	}
#endif	/* CONFIG_BT_SETTINGS */
}

static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   10ca8:	b508      	push	{r3, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   10caa:	b930      	cbnz	r0, 10cba <find_cf_cfg+0x12>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   10cac:	4907      	ldr	r1, [pc, #28]	; (10ccc <find_cf_cfg+0x24>)
   10cae:	4808      	ldr	r0, [pc, #32]	; (10cd0 <find_cf_cfg+0x28>)
   10cb0:	f008 fad1 	bl	19256 <bt_addr_le_eq>
   10cb4:	b138      	cbz	r0, 10cc6 <find_cf_cfg+0x1e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   10cb6:	4807      	ldr	r0, [pc, #28]	; (10cd4 <find_cf_cfg+0x2c>)
			return cfg;
		}
	}

	return NULL;
}
   10cb8:	bd08      	pop	{r3, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   10cba:	4a05      	ldr	r2, [pc, #20]	; (10cd0 <find_cf_cfg+0x28>)
   10cbc:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   10cc0:	f007 fd50 	bl	18764 <bt_conn_is_peer_addr_le>
   10cc4:	e7f6      	b.n	10cb4 <find_cf_cfg+0xc>
	return NULL;
   10cc6:	2000      	movs	r0, #0
   10cc8:	e7f6      	b.n	10cb8 <find_cf_cfg+0x10>
   10cca:	bf00      	nop
   10ccc:	0001cc7b 	.word	0x0001cc7b
   10cd0:	20009969 	.word	0x20009969
   10cd4:	20009968 	.word	0x20009968

00010cd8 <find_sc_cfg>:
{
   10cd8:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
   10cda:	4c06      	ldr	r4, [pc, #24]	; (10cf4 <find_sc_cfg+0x1c>)
   10cdc:	7823      	ldrb	r3, [r4, #0]
   10cde:	4283      	cmp	r3, r0
   10ce0:	d103      	bne.n	10cea <find_sc_cfg+0x12>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   10ce2:	1c60      	adds	r0, r4, #1
   10ce4:	f008 fab7 	bl	19256 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   10ce8:	b908      	cbnz	r0, 10cee <find_sc_cfg+0x16>
	return NULL;
   10cea:	2000      	movs	r0, #0
}
   10cec:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   10cee:	4620      	mov	r0, r4
   10cf0:	e7fc      	b.n	10cec <find_sc_cfg+0x14>
   10cf2:	bf00      	nop
   10cf4:	20009bce 	.word	0x20009bce

00010cf8 <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   10cf8:	b510      	push	{r4, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   10cfa:	1c4a      	adds	r2, r1, #1
{
   10cfc:	460c      	mov	r4, r1
		if (conn) {
   10cfe:	b138      	cbz	r0, 10d10 <find_ccc_cfg+0x18>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   10d00:	7809      	ldrb	r1, [r1, #0]
   10d02:	f007 fd2f 	bl	18764 <bt_conn_is_peer_addr_le>
   10d06:	b108      	cbz	r0, 10d0c <find_ccc_cfg+0x14>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   10d08:	4620      	mov	r0, r4
			return cfg;
		}
	}

	return NULL;
}
   10d0a:	bd10      	pop	{r4, pc}
	return NULL;
   10d0c:	2000      	movs	r0, #0
   10d0e:	e7fc      	b.n	10d0a <find_ccc_cfg+0x12>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   10d10:	4610      	mov	r0, r2
   10d12:	4902      	ldr	r1, [pc, #8]	; (10d1c <find_ccc_cfg+0x24>)
   10d14:	f008 fa9f 	bl	19256 <bt_addr_le_eq>
   10d18:	e7f5      	b.n	10d06 <find_ccc_cfg+0xe>
   10d1a:	bf00      	nop
   10d1c:	0001cc7b 	.word	0x0001cc7b

00010d20 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   10d20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10d24:	b087      	sub	sp, #28
   10d26:	461e      	mov	r6, r3
   10d28:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   10d2c:	4681      	mov	r9, r0
   10d2e:	460f      	mov	r7, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   10d30:	f8d1 800c 	ldr.w	r8, [r1, #12]
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   10d34:	2b00      	cmp	r3, #0
   10d36:	d14b      	bne.n	10dd0 <bt_gatt_attr_write_ccc+0xb0>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   10d38:	1e73      	subs	r3, r6, #1
   10d3a:	2b01      	cmp	r3, #1
   10d3c:	d84b      	bhi.n	10dd6 <bt_gatt_attr_write_ccc+0xb6>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   10d3e:	2e01      	cmp	r6, #1
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   10d40:	4641      	mov	r1, r8
		value = *(uint8_t *)buf;
   10d42:	7815      	ldrb	r5, [r2, #0]
   10d44:	bf18      	it	ne
   10d46:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   10d48:	f7ff ffd6 	bl	10cf8 <find_ccc_cfg>
	if (!cfg) {
   10d4c:	4604      	mov	r4, r0
   10d4e:	b9f0      	cbnz	r0, 10d8e <bt_gatt_attr_write_ccc+0x6e>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behaviorally the same as no written CCC.
		 */
		if (!value) {
   10d50:	b91d      	cbnz	r5, 10d5a <bt_gatt_attr_write_ccc+0x3a>
			return len;
   10d52:	4630      	mov	r0, r6
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   10d54:	b007      	add	sp, #28
   10d56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   10d5a:	4641      	mov	r1, r8
   10d5c:	f7ff ffcc 	bl	10cf8 <find_ccc_cfg>
		if (!cfg) {
   10d60:	4604      	mov	r4, r0
   10d62:	b960      	cbnz	r0, 10d7e <bt_gatt_attr_write_ccc+0x5e>
			LOG_WRN("No space to store CCC cfg");
   10d64:	4b1d      	ldr	r3, [pc, #116]	; (10ddc <bt_gatt_attr_write_ccc+0xbc>)
   10d66:	481e      	ldr	r0, [pc, #120]	; (10de0 <bt_gatt_attr_write_ccc+0xc0>)
   10d68:	9305      	str	r3, [sp, #20]
   10d6a:	2302      	movs	r3, #2
   10d6c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   10d70:	aa04      	add	r2, sp, #16
   10d72:	9304      	str	r3, [sp, #16]
   10d74:	f008 fa85 	bl	19282 <z_log_msg_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   10d78:	f06f 0010 	mvn.w	r0, #16
   10d7c:	e7ea      	b.n	10d54 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   10d7e:	f109 0188 	add.w	r1, r9, #136	; 0x88
   10d82:	3001      	adds	r0, #1
   10d84:	f008 fa7a 	bl	1927c <bt_addr_le_copy>
		cfg->id = conn->id;
   10d88:	f899 3008 	ldrb.w	r3, [r9, #8]
   10d8c:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   10d8e:	f8d8 3010 	ldr.w	r3, [r8, #16]
   10d92:	b98b      	cbnz	r3, 10db8 <bt_gatt_attr_write_ccc+0x98>
	cfg->value = value;
   10d94:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   10d96:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   10d9a:	42ab      	cmp	r3, r5
   10d9c:	d003      	beq.n	10da6 <bt_gatt_attr_write_ccc+0x86>
		gatt_ccc_changed(attr, ccc);
   10d9e:	4641      	mov	r1, r8
   10da0:	4638      	mov	r0, r7
   10da2:	f008 f9e4 	bl	1916e <gatt_ccc_changed>
	if (!value) {
   10da6:	2d00      	cmp	r5, #0
   10da8:	d1d3      	bne.n	10d52 <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   10daa:	490e      	ldr	r1, [pc, #56]	; (10de4 <bt_gatt_attr_write_ccc+0xc4>)
   10dac:	1c60      	adds	r0, r4, #1
   10dae:	f008 fa65 	bl	1927c <bt_addr_le_copy>
	cfg->id = 0U;
   10db2:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   10db4:	8125      	strh	r5, [r4, #8]
}
   10db6:	e7cc      	b.n	10d52 <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   10db8:	462a      	mov	r2, r5
   10dba:	4639      	mov	r1, r7
   10dbc:	4648      	mov	r0, r9
   10dbe:	4798      	blx	r3
		if (write < 0) {
   10dc0:	2800      	cmp	r0, #0
   10dc2:	dbc7      	blt.n	10d54 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   10dc4:	3801      	subs	r0, #1
   10dc6:	2801      	cmp	r0, #1
   10dc8:	d9e4      	bls.n	10d94 <bt_gatt_attr_write_ccc+0x74>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   10dca:	f06f 000d 	mvn.w	r0, #13
   10dce:	e7c1      	b.n	10d54 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   10dd0:	f06f 0006 	mvn.w	r0, #6
   10dd4:	e7be      	b.n	10d54 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   10dd6:	f06f 000c 	mvn.w	r0, #12
   10dda:	e7bb      	b.n	10d54 <bt_gatt_attr_write_ccc+0x34>
   10ddc:	0001dcc8 	.word	0x0001dcc8
   10de0:	0001b890 	.word	0x0001b890
   10de4:	0001cc7b 	.word	0x0001cc7b

00010de8 <clear_cf_cfg>:
{
   10de8:	b510      	push	{r4, lr}
   10dea:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   10dec:	4909      	ldr	r1, [pc, #36]	; (10e14 <clear_cf_cfg+0x2c>)
   10dee:	3001      	adds	r0, #1
   10df0:	f008 fa44 	bl	1927c <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   10df4:	f104 0008 	add.w	r0, r4, #8
   10df8:	2201      	movs	r2, #1
   10dfa:	2100      	movs	r1, #0
   10dfc:	f007 f9e2 	bl	181c4 <memset>
   10e00:	2300      	movs	r3, #0
   10e02:	340c      	adds	r4, #12
   10e04:	e8d4 2fef 	ldaex	r2, [r4]
   10e08:	e8c4 3fe1 	stlex	r1, r3, [r4]
   10e0c:	2900      	cmp	r1, #0
   10e0e:	d1f9      	bne.n	10e04 <clear_cf_cfg+0x1c>
}
   10e10:	bd10      	pop	{r4, pc}
   10e12:	bf00      	nop
   10e14:	0001cc7b 	.word	0x0001cc7b

00010e18 <sc_save>:
{
   10e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10e1c:	b086      	sub	sp, #24
   10e1e:	4680      	mov	r8, r0
   10e20:	460f      	mov	r7, r1
   10e22:	4616      	mov	r6, r2
   10e24:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   10e26:	f7ff ff57 	bl	10cd8 <find_sc_cfg>
	if (!cfg) {
   10e2a:	4604      	mov	r4, r0
   10e2c:	b9b0      	cbnz	r0, 10e5c <sc_save+0x44>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   10e2e:	4912      	ldr	r1, [pc, #72]	; (10e78 <sc_save+0x60>)
   10e30:	f7ff ff52 	bl	10cd8 <find_sc_cfg>
		if (!cfg) {
   10e34:	4604      	mov	r4, r0
   10e36:	b960      	cbnz	r0, 10e52 <sc_save+0x3a>
			LOG_ERR("unable to save SC: no cfg left");
   10e38:	4b10      	ldr	r3, [pc, #64]	; (10e7c <sc_save+0x64>)
   10e3a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10e3e:	9305      	str	r3, [sp, #20]
   10e40:	2302      	movs	r3, #2
   10e42:	480f      	ldr	r0, [pc, #60]	; (10e80 <sc_save+0x68>)
   10e44:	aa04      	add	r2, sp, #16
   10e46:	9304      	str	r3, [sp, #16]
   10e48:	f008 fa1b 	bl	19282 <z_log_msg_static_create.constprop.0>
}
   10e4c:	b006      	add	sp, #24
   10e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   10e52:	4639      	mov	r1, r7
		cfg->id = id;
   10e54:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   10e58:	f008 fa10 	bl	1927c <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   10e5c:	8922      	ldrh	r2, [r4, #8]
   10e5e:	8963      	ldrh	r3, [r4, #10]
   10e60:	b91a      	cbnz	r2, 10e6a <sc_save+0x52>
   10e62:	b92b      	cbnz	r3, 10e70 <sc_save+0x58>
		cfg->data.start = start;
   10e64:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   10e66:	8165      	strh	r5, [r4, #10]
   10e68:	e7f0      	b.n	10e4c <sc_save+0x34>
	if (new_start >= *start && new_end <= *end) {
   10e6a:	4296      	cmp	r6, r2
		*start = new_start;
   10e6c:	bf38      	it	cc
   10e6e:	8126      	strhcc	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
   10e70:	429d      	cmp	r5, r3
   10e72:	d9eb      	bls.n	10e4c <sc_save+0x34>
   10e74:	e7f7      	b.n	10e66 <sc_save+0x4e>
   10e76:	bf00      	nop
   10e78:	0001cc7b 	.word	0x0001cc7b
   10e7c:	0001dce2 	.word	0x0001dce2
   10e80:	0001b890 	.word	0x0001b890

00010e84 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   10e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   10e88:	4b23      	ldr	r3, [pc, #140]	; (10f18 <disconnected_cb+0x94>)
{
   10e8a:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   10e8c:	6882      	ldr	r2, [r0, #8]
{
   10e8e:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   10e90:	429a      	cmp	r2, r3
   10e92:	d102      	bne.n	10e9a <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   10e94:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   10e96:	8963      	ldrh	r3, [r4, #10]
   10e98:	bb33      	cbnz	r3, 10ee8 <disconnected_cb+0x64>

		LOG_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   10e9a:	2001      	movs	r0, #1
   10e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
   10ea0:	f007 fc21 	bl	186e6 <bt_conn_unref>
		ccc->value = 0U;
   10ea4:	2100      	movs	r1, #0
		if (ccc->cfg_changed) {
   10ea6:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   10ea8:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   10eaa:	2b00      	cmp	r3, #0
   10eac:	d0f5      	beq.n	10e9a <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   10eae:	4638      	mov	r0, r7
   10eb0:	4798      	blx	r3
   10eb2:	e7f2      	b.n	10e9a <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   10eb4:	f105 0888 	add.w	r8, r5, #136	; 0x88
   10eb8:	4641      	mov	r1, r8
   10eba:	7a28      	ldrb	r0, [r5, #8]
   10ebc:	f007 fabe 	bl	1843c <bt_addr_le_is_bonded>
   10ec0:	b968      	cbnz	r0, 10ede <disconnected_cb+0x5a>
				if (ccc == &sc_ccc) {
   10ec2:	4b16      	ldr	r3, [pc, #88]	; (10f1c <disconnected_cb+0x98>)
   10ec4:	429c      	cmp	r4, r3
   10ec6:	d102      	bne.n	10ece <disconnected_cb+0x4a>
					sc_clear(conn);
   10ec8:	4628      	mov	r0, r5
   10eca:	f008 f9dd 	bl	19288 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   10ece:	4630      	mov	r0, r6
   10ed0:	4913      	ldr	r1, [pc, #76]	; (10f20 <disconnected_cb+0x9c>)
   10ed2:	f008 f9d3 	bl	1927c <bt_addr_le_copy>
	cfg->id = 0U;
   10ed6:	2300      	movs	r3, #0
   10ed8:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   10eda:	8123      	strh	r3, [r4, #8]
}
   10edc:	e7e2      	b.n	10ea4 <disconnected_cb+0x20>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   10ede:	4641      	mov	r1, r8
   10ee0:	4630      	mov	r0, r6
   10ee2:	f008 f9cb 	bl	1927c <bt_addr_le_copy>
   10ee6:	e7dd      	b.n	10ea4 <disconnected_cb+0x20>
		if (!cfg->value) {
   10ee8:	8923      	ldrh	r3, [r4, #8]
   10eea:	2b00      	cmp	r3, #0
   10eec:	d0da      	beq.n	10ea4 <disconnected_cb+0x20>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   10eee:	4626      	mov	r6, r4
   10ef0:	f816 1b01 	ldrb.w	r1, [r6], #1
   10ef4:	4628      	mov	r0, r5
   10ef6:	4632      	mov	r2, r6
   10ef8:	f007 fc34 	bl	18764 <bt_conn_is_peer_addr_le>
   10efc:	2800      	cmp	r0, #0
   10efe:	d1d9      	bne.n	10eb4 <disconnected_cb+0x30>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   10f00:	4631      	mov	r1, r6
   10f02:	7820      	ldrb	r0, [r4, #0]
   10f04:	f7fe fb1c 	bl	f540 <bt_conn_lookup_addr_le>
			if (tmp) {
   10f08:	2800      	cmp	r0, #0
   10f0a:	d0cb      	beq.n	10ea4 <disconnected_cb+0x20>
				if (tmp->state == BT_CONN_CONNECTED) {
   10f0c:	7a83      	ldrb	r3, [r0, #10]
   10f0e:	2b07      	cmp	r3, #7
   10f10:	d1c6      	bne.n	10ea0 <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
   10f12:	f007 fbe8 	bl	186e6 <bt_conn_unref>
	if (!value_used) {
   10f16:	e7c0      	b.n	10e9a <disconnected_cb+0x16>
   10f18:	00010d21 	.word	0x00010d21
   10f1c:	2000835c 	.word	0x2000835c
   10f20:	0001cc7b 	.word	0x0001cc7b

00010f24 <read_ppcp>:
{
   10f24:	b513      	push	{r0, r1, r4, lr}
   10f26:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   10f28:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
{
   10f2c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   10f30:	4c09      	ldr	r4, [pc, #36]	; (10f58 <read_ppcp+0x34>)
	if (offset > value_len) {
   10f32:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   10f34:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   10f38:	d80b      	bhi.n	10f52 <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
   10f3a:	f1c1 0408 	rsb	r4, r1, #8
   10f3e:	429c      	cmp	r4, r3
   10f40:	bfa8      	it	ge
   10f42:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   10f44:	4469      	add	r1, sp
   10f46:	4622      	mov	r2, r4
   10f48:	f007 f931 	bl	181ae <memcpy>
}
   10f4c:	4620      	mov	r0, r4
   10f4e:	b002      	add	sp, #8
   10f50:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   10f52:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   10f56:	e7f9      	b.n	10f4c <read_ppcp+0x28>
   10f58:	00280018 	.word	0x00280018

00010f5c <cf_write>:
{
   10f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10f60:	b086      	sub	sp, #24
   10f62:	461f      	mov	r7, r3
   10f64:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   10f68:	4606      	mov	r6, r0
	if (offset > sizeof(cfg->data)) {
   10f6a:	2b01      	cmp	r3, #1
{
   10f6c:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   10f6e:	d83a      	bhi.n	10fe6 <cf_write+0x8a>
	if (offset + len > sizeof(cfg->data)) {
   10f70:	443b      	add	r3, r7
   10f72:	2b01      	cmp	r3, #1
   10f74:	463d      	mov	r5, r7
   10f76:	dc39      	bgt.n	10fec <cf_write+0x90>
	cfg = find_cf_cfg(conn);
   10f78:	f7ff fe96 	bl	10ca8 <find_cf_cfg>
	if (!cfg) {
   10f7c:	4604      	mov	r4, r0
   10f7e:	b998      	cbnz	r0, 10fa8 <cf_write+0x4c>
		cfg = find_cf_cfg(NULL);
   10f80:	f7ff fe92 	bl	10ca8 <find_cf_cfg>
	if (!cfg) {
   10f84:	4604      	mov	r4, r0
   10f86:	b978      	cbnz	r0, 10fa8 <cf_write+0x4c>
		LOG_WRN("No space to store Client Supported Features");
   10f88:	4b1b      	ldr	r3, [pc, #108]	; (10ff8 <cf_write+0x9c>)
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   10f8a:	f06f 0510 	mvn.w	r5, #16
		LOG_WRN("No space to store Client Supported Features");
   10f8e:	9305      	str	r3, [sp, #20]
   10f90:	2302      	movs	r3, #2
   10f92:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   10f96:	4819      	ldr	r0, [pc, #100]	; (10ffc <cf_write+0xa0>)
   10f98:	aa04      	add	r2, sp, #16
   10f9a:	9304      	str	r3, [sp, #16]
   10f9c:	f008 f971 	bl	19282 <z_log_msg_static_create.constprop.0>
}
   10fa0:	4628      	mov	r0, r5
   10fa2:	b006      	add	sp, #24
   10fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   10fa8:	b197      	cbz	r7, 10fd0 <cf_write+0x74>
		    !(value[i / 8] & BIT(i % 8))) {
   10faa:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   10fac:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   10fae:	f898 2000 	ldrb.w	r2, [r8]
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   10fb2:	fa21 f003 	lsr.w	r0, r1, r3
   10fb6:	07c7      	lsls	r7, r0, #31
   10fb8:	d503      	bpl.n	10fc2 <cf_write+0x66>
		    !(value[i / 8] & BIT(i % 8))) {
   10fba:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   10fbe:	07c0      	lsls	r0, r0, #31
   10fc0:	d517      	bpl.n	10ff2 <cf_write+0x96>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   10fc2:	3301      	adds	r3, #1
   10fc4:	2b03      	cmp	r3, #3
   10fc6:	d1f4      	bne.n	10fb2 <cf_write+0x56>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   10fc8:	f002 0207 	and.w	r2, r2, #7
   10fcc:	4311      	orrs	r1, r2
   10fce:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   10fd0:	1c60      	adds	r0, r4, #1
   10fd2:	f106 0188 	add.w	r1, r6, #136	; 0x88
   10fd6:	f008 f951 	bl	1927c <bt_addr_le_copy>
	cfg->id = conn->id;
   10fda:	7a33      	ldrb	r3, [r6, #8]
	bool changed = set_change_aware_no_store(cfg, aware);
   10fdc:	4620      	mov	r0, r4
	cfg->id = conn->id;
   10fde:	7023      	strb	r3, [r4, #0]
	bool changed = set_change_aware_no_store(cfg, aware);
   10fe0:	f008 fa1d 	bl	1941e <set_change_aware_no_store.constprop.0.isra.0>
	return len;
   10fe4:	e7dc      	b.n	10fa0 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   10fe6:	f06f 0506 	mvn.w	r5, #6
   10fea:	e7d9      	b.n	10fa0 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   10fec:	f06f 050c 	mvn.w	r5, #12
   10ff0:	e7d6      	b.n	10fa0 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   10ff2:	f06f 0512 	mvn.w	r5, #18
   10ff6:	e7d3      	b.n	10fa0 <cf_write+0x44>
   10ff8:	0001dd01 	.word	0x0001dd01
   10ffc:	0001b890 	.word	0x0001b890

00011000 <sc_indicate_rsp>:
{
   11000:	b510      	push	{r4, lr}
   11002:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11004:	4810      	ldr	r0, [pc, #64]	; (11048 <sc_indicate_rsp+0x48>)
   11006:	e8d0 3fef 	ldaex	r3, [r0]
   1100a:	f023 0302 	bic.w	r3, r3, #2
   1100e:	e8c0 3fe2 	stlex	r2, r3, [r0]
   11012:	2a00      	cmp	r2, #0
   11014:	d1f7      	bne.n	11006 <sc_indicate_rsp+0x6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11016:	e8d0 3faf 	lda	r3, [r0]
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1101a:	07da      	lsls	r2, r3, #31
   1101c:	d504      	bpl.n	11028 <sc_indicate_rsp+0x28>
	k_work_reschedule(&gatt_sc.work, timeout);
   1101e:	2200      	movs	r2, #0
   11020:	2300      	movs	r3, #0
   11022:	3830      	subs	r0, #48	; 0x30
   11024:	f004 fd44 	bl	15ab0 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   11028:	4620      	mov	r0, r4
   1102a:	f008 f878 	bl	1911e <bt_att_fixed_chan_only>
   1102e:	b150      	cbz	r0, 11046 <sc_indicate_rsp+0x46>
		cfg = find_cf_cfg(conn);
   11030:	4620      	mov	r0, r4
   11032:	f7ff fe39 	bl	10ca8 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   11036:	b130      	cbz	r0, 11046 <sc_indicate_rsp+0x46>
   11038:	7a03      	ldrb	r3, [r0, #8]
   1103a:	07db      	lsls	r3, r3, #31
   1103c:	d503      	bpl.n	11046 <sc_indicate_rsp+0x46>
}
   1103e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bool changed = set_change_aware_no_store(cfg, aware);
   11042:	f008 b9ec 	b.w	1941e <set_change_aware_no_store.constprop.0.isra.0>
}
   11046:	bd10      	pop	{r4, pc}
   11048:	20009540 	.word	0x20009540

0001104c <bt_gatt_init>:
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1104c:	2101      	movs	r1, #1
{
   1104e:	b510      	push	{r4, lr}
   11050:	4816      	ldr	r0, [pc, #88]	; (110ac <bt_gatt_init+0x60>)
   11052:	f008 f908 	bl	19266 <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_INITIALIZED)) {
   11056:	07c3      	lsls	r3, r0, #31
   11058:	d427      	bmi.n	110aa <bt_gatt_init+0x5e>
   1105a:	2102      	movs	r1, #2
   1105c:	4813      	ldr	r0, [pc, #76]	; (110ac <bt_gatt_init+0x60>)
   1105e:	f008 f902 	bl	19266 <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_SERVICE_INITIALIZED)) {
   11062:	4008      	ands	r0, r1
   11064:	d107      	bne.n	11076 <bt_gatt_init+0x2a>
   11066:	4912      	ldr	r1, [pc, #72]	; (110b0 <bt_gatt_init+0x64>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   11068:	4a12      	ldr	r2, [pc, #72]	; (110b4 <bt_gatt_init+0x68>)
   1106a:	880b      	ldrh	r3, [r1, #0]
   1106c:	4c12      	ldr	r4, [pc, #72]	; (110b8 <bt_gatt_init+0x6c>)
   1106e:	42a2      	cmp	r2, r4
   11070:	d315      	bcc.n	1109e <bt_gatt_init+0x52>
   11072:	b100      	cbz	r0, 11076 <bt_gatt_init+0x2a>
   11074:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   11076:	2200      	movs	r2, #0
   11078:	4b10      	ldr	r3, [pc, #64]	; (110bc <bt_gatt_init+0x70>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1107a:	4911      	ldr	r1, [pc, #68]	; (110c0 <bt_gatt_init+0x74>)
   1107c:	4811      	ldr	r0, [pc, #68]	; (110c4 <bt_gatt_init+0x78>)
	list->tail = NULL;
   1107e:	e9c3 2200 	strd	r2, r2, [r3]
   11082:	f009 fe50 	bl	1ad26 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   11086:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1108a:	2300      	movs	r3, #0
   1108c:	480d      	ldr	r0, [pc, #52]	; (110c4 <bt_gatt_init+0x78>)
   1108e:	f7fb f973 	bl	c378 <bt_long_wq_schedule>
}
   11092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   11096:	490c      	ldr	r1, [pc, #48]	; (110c8 <bt_gatt_init+0x7c>)
   11098:	480c      	ldr	r0, [pc, #48]	; (110cc <bt_gatt_init+0x80>)
   1109a:	f009 be44 	b.w	1ad26 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   1109e:	6850      	ldr	r0, [r2, #4]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   110a0:	3208      	adds	r2, #8
		last_static_handle += svc->attr_count;
   110a2:	4403      	add	r3, r0
   110a4:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   110a6:	2001      	movs	r0, #1
   110a8:	e7e1      	b.n	1106e <bt_gatt_init+0x22>
}
   110aa:	bd10      	pop	{r4, pc}
   110ac:	20009978 	.word	0x20009978
   110b0:	20009bda 	.word	0x20009bda
   110b4:	0001b830 	.word	0x0001b830
   110b8:	0001b848 	.word	0x0001b848
   110bc:	2000997c 	.word	0x2000997c
   110c0:	000112e1 	.word	0x000112e1
   110c4:	20009498 	.word	0x20009498
   110c8:	00011501 	.word	0x00011501
   110cc:	20009510 	.word	0x20009510

000110d0 <bt_gatt_attr_get_handle>:
	if (!attr) {
   110d0:	4603      	mov	r3, r0
{
   110d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   110d6:	b148      	cbz	r0, 110ec <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   110d8:	8a00      	ldrh	r0, [r0, #16]
   110da:	b938      	cbnz	r0, 110ec <bt_gatt_attr_get_handle+0x1c>
	uint16_t handle = 1;
   110dc:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   110de:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   110e2:	4911      	ldr	r1, [pc, #68]	; (11128 <bt_gatt_attr_get_handle+0x58>)
   110e4:	f8df e044 	ldr.w	lr, [pc, #68]	; 1112c <bt_gatt_attr_get_handle+0x5c>
   110e8:	4571      	cmp	r1, lr
   110ea:	d301      	bcc.n	110f0 <bt_gatt_attr_get_handle+0x20>
}
   110ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   110f0:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   110f4:	42bb      	cmp	r3, r7
   110f6:	d304      	bcc.n	11102 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   110f8:	fb0c 7206 	mla	r2, ip, r6, r7
   110fc:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   110fe:	4293      	cmp	r3, r2
   11100:	d90e      	bls.n	11120 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   11102:	4434      	add	r4, r6
   11104:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   11106:	4614      	mov	r4, r2
   11108:	3108      	adds	r1, #8
   1110a:	e7ed      	b.n	110e8 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   1110c:	fb0c 7805 	mla	r8, ip, r5, r7
   11110:	4543      	cmp	r3, r8
   11112:	d007      	beq.n	11124 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   11114:	3501      	adds	r5, #1
   11116:	1962      	adds	r2, r4, r5
   11118:	42b5      	cmp	r5, r6
   1111a:	b292      	uxth	r2, r2
   1111c:	d1f6      	bne.n	1110c <bt_gatt_attr_get_handle+0x3c>
   1111e:	e7f2      	b.n	11106 <bt_gatt_attr_get_handle+0x36>
   11120:	2500      	movs	r5, #0
   11122:	e7f8      	b.n	11116 <bt_gatt_attr_get_handle+0x46>
   11124:	4610      	mov	r0, r2
   11126:	e7e1      	b.n	110ec <bt_gatt_attr_get_handle+0x1c>
   11128:	0001b830 	.word	0x0001b830
   1112c:	0001b848 	.word	0x0001b848

00011130 <bt_gatt_foreach_attr_type>:
{
   11130:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11134:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   11136:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   1113a:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   1113e:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   11140:	2d00      	cmp	r5, #0
   11142:	bf08      	it	eq
   11144:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   11146:	4b24      	ldr	r3, [pc, #144]	; (111d8 <bt_gatt_foreach_attr_type+0xa8>)
{
   11148:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1114a:	881b      	ldrh	r3, [r3, #0]
{
   1114c:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   1114e:	4283      	cmp	r3, r0
   11150:	d23c      	bcs.n	111cc <bt_gatt_foreach_attr_type+0x9c>
}
   11152:	b003      	add	sp, #12
   11154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   11158:	6873      	ldr	r3, [r6, #4]
   1115a:	4423      	add	r3, r4
   1115c:	42bb      	cmp	r3, r7
   1115e:	d232      	bcs.n	111c6 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   11160:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   11162:	3608      	adds	r6, #8
   11164:	4b1d      	ldr	r3, [pc, #116]	; (111dc <bt_gatt_foreach_attr_type+0xac>)
   11166:	429e      	cmp	r6, r3
   11168:	d3f6      	bcc.n	11158 <bt_gatt_foreach_attr_type+0x28>
   1116a:	e7f2      	b.n	11152 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1116c:	4640      	mov	r0, r8
   1116e:	5889      	ldr	r1, [r1, r2]
   11170:	9301      	str	r3, [sp, #4]
   11172:	f007 f833 	bl	181dc <bt_uuid_cmp>
   11176:	9b01      	ldr	r3, [sp, #4]
   11178:	b190      	cbz	r0, 111a0 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1117a:	3401      	adds	r4, #1
   1117c:	f10a 0a01 	add.w	sl, sl, #1
   11180:	b2a4      	uxth	r4, r4
   11182:	6873      	ldr	r3, [r6, #4]
   11184:	4553      	cmp	r3, sl
   11186:	d9ec      	bls.n	11162 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   11188:	9b00      	ldr	r3, [sp, #0]
   1118a:	429c      	cmp	r4, r3
   1118c:	d8e1      	bhi.n	11152 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   1118e:	42bc      	cmp	r4, r7
				if (gatt_foreach_iter(&static_svc->attrs[i],
   11190:	6831      	ldr	r1, [r6, #0]
	if (handle < start_handle) {
   11192:	d3f2      	bcc.n	1117a <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   11194:	fb0b f20a 	mul.w	r2, fp, sl
   11198:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1119a:	f1b8 0f00 	cmp.w	r8, #0
   1119e:	d1e5      	bne.n	1116c <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   111a0:	f1b9 0f00 	cmp.w	r9, #0
   111a4:	d10b      	bne.n	111be <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   111a6:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   111a8:	4618      	mov	r0, r3
	*num_matches -= 1;
   111aa:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   111ac:	4621      	mov	r1, r4
   111ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   111b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   111b2:	4798      	blx	r3
	if (!*num_matches) {
   111b4:	2d00      	cmp	r5, #0
   111b6:	d0cc      	beq.n	11152 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   111b8:	2800      	cmp	r0, #0
   111ba:	d1de      	bne.n	1117a <bt_gatt_foreach_attr_type+0x4a>
   111bc:	e7c9      	b.n	11152 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   111be:	68da      	ldr	r2, [r3, #12]
   111c0:	4591      	cmp	r9, r2
   111c2:	d1da      	bne.n	1117a <bt_gatt_foreach_attr_type+0x4a>
   111c4:	e7ef      	b.n	111a6 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   111c6:	f04f 0a00 	mov.w	sl, #0
   111ca:	e7da      	b.n	11182 <bt_gatt_foreach_attr_type+0x52>
		uint16_t handle = 1;
   111cc:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   111ce:	f04f 0b14 	mov.w	fp, #20
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   111d2:	4e03      	ldr	r6, [pc, #12]	; (111e0 <bt_gatt_foreach_attr_type+0xb0>)
   111d4:	e7c6      	b.n	11164 <bt_gatt_foreach_attr_type+0x34>
   111d6:	bf00      	nop
   111d8:	20009bda 	.word	0x20009bda
   111dc:	0001b848 	.word	0x0001b848
   111e0:	0001b830 	.word	0x0001b830

000111e4 <db_hash_gen>:
{
   111e4:	b510      	push	{r4, lr}
	uint8_t key[16] = {};
   111e6:	2400      	movs	r4, #0
{
   111e8:	b0ce      	sub	sp, #312	; 0x138
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   111ea:	4669      	mov	r1, sp
   111ec:	aa22      	add	r2, sp, #136	; 0x88
   111ee:	a80a      	add	r0, sp, #40	; 0x28
	uint8_t key[16] = {};
   111f0:	e9cd 4400 	strd	r4, r4, [sp]
   111f4:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   111f8:	f006 fc50 	bl	17a9c <tc_cmac_setup>
   111fc:	b958      	cbnz	r0, 11216 <db_hash_gen+0x32>
		LOG_ERR("Unable to setup AES CMAC");
   111fe:	4b15      	ldr	r3, [pc, #84]	; (11254 <db_hash_gen+0x70>)
		LOG_ERR("Unable to calculate hash");
   11200:	9309      	str	r3, [sp, #36]	; 0x24
   11202:	2302      	movs	r3, #2
   11204:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11208:	4813      	ldr	r0, [pc, #76]	; (11258 <db_hash_gen+0x74>)
   1120a:	aa08      	add	r2, sp, #32
   1120c:	9308      	str	r3, [sp, #32]
   1120e:	f008 f838 	bl	19282 <z_log_msg_static_create.constprop.0>
}
   11212:	b04e      	add	sp, #312	; 0x138
   11214:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   11216:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1121a:	2001      	movs	r0, #1
   1121c:	4a0f      	ldr	r2, [pc, #60]	; (1125c <db_hash_gen+0x78>)
   1121e:	ab0a      	add	r3, sp, #40	; 0x28
   11220:	f008 f984 	bl	1952c <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   11224:	480e      	ldr	r0, [pc, #56]	; (11260 <db_hash_gen+0x7c>)
   11226:	a90a      	add	r1, sp, #40	; 0x28
   11228:	f006 fccd 	bl	17bc6 <tc_cmac_final>
   1122c:	b908      	cbnz	r0, 11232 <db_hash_gen+0x4e>
		LOG_ERR("Unable to calculate hash");
   1122e:	4b0d      	ldr	r3, [pc, #52]	; (11264 <db_hash_gen+0x80>)
   11230:	e7e6      	b.n	11200 <db_hash_gen+0x1c>
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   11232:	4621      	mov	r1, r4
   11234:	4b0a      	ldr	r3, [pc, #40]	; (11260 <db_hash_gen+0x7c>)
   11236:	f103 0210 	add.w	r2, r3, #16
		uint8_t tmp = ((uint8_t *)buf)[i];
   1123a:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1123c:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   11240:	3101      	adds	r1, #1
   11242:	2908      	cmp	r1, #8
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   11244:	f803 4b01 	strb.w	r4, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   11248:	7010      	strb	r0, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   1124a:	d1f6      	bne.n	1123a <db_hash_gen+0x56>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1124c:	4806      	ldr	r0, [pc, #24]	; (11268 <db_hash_gen+0x84>)
   1124e:	f008 f80a 	bl	19266 <atomic_or>
   11252:	e7de      	b.n	11212 <db_hash_gen+0x2e>
   11254:	0001dd2d 	.word	0x0001dd2d
   11258:	0001b890 	.word	0x0001b890
   1125c:	000191b1 	.word	0x000191b1
   11260:	20009488 	.word	0x20009488
   11264:	0001dd46 	.word	0x0001dd46
   11268:	20009540 	.word	0x20009540

0001126c <db_hash_read>:
{
   1126c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1126e:	4919      	ldr	r1, [pc, #100]	; (112d4 <db_hash_read+0x68>)
{
   11270:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   11272:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   11276:	4615      	mov	r5, r2
   11278:	461f      	mov	r7, r3
   1127a:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1127e:	f009 fd74 	bl	1ad6a <k_work_cancel_delayable_sync>
   11282:	4b15      	ldr	r3, [pc, #84]	; (112d8 <db_hash_read+0x6c>)
   11284:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   11288:	0719      	lsls	r1, r3, #28
   1128a:	d401      	bmi.n	11290 <db_hash_read+0x24>
		db_hash_gen();
   1128c:	f7ff ffaa 	bl	111e4 <db_hash_gen>
	cfg = find_cf_cfg(conn);
   11290:	4620      	mov	r0, r4
   11292:	f7ff fd09 	bl	10ca8 <find_cf_cfg>
	if (cfg &&
   11296:	b150      	cbz	r0, 112ae <db_hash_read+0x42>
   11298:	7a03      	ldrb	r3, [r0, #8]
   1129a:	07da      	lsls	r2, r3, #31
   1129c:	d507      	bpl.n	112ae <db_hash_read+0x42>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1129e:	300c      	adds	r0, #12
   112a0:	e8d0 3faf 	lda	r3, [r0]
	    CF_ROBUST_CACHING(cfg) &&
   112a4:	07db      	lsls	r3, r3, #31
   112a6:	d402      	bmi.n	112ae <db_hash_read+0x42>
   112a8:	2102      	movs	r1, #2
   112aa:	f007 ffdc 	bl	19266 <atomic_or>
	if (offset > value_len) {
   112ae:	2e10      	cmp	r6, #16
   112b0:	d80c      	bhi.n	112cc <db_hash_read+0x60>
	len = MIN(buf_len, value_len - offset);
   112b2:	f1c6 0410 	rsb	r4, r6, #16
   112b6:	42bc      	cmp	r4, r7
   112b8:	bfa8      	it	ge
   112ba:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   112bc:	4907      	ldr	r1, [pc, #28]	; (112dc <db_hash_read+0x70>)
   112be:	4622      	mov	r2, r4
   112c0:	4628      	mov	r0, r5
   112c2:	4431      	add	r1, r6
   112c4:	f006 ff73 	bl	181ae <memcpy>
}
   112c8:	4620      	mov	r0, r4
   112ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   112cc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   112d0:	e7fa      	b.n	112c8 <db_hash_read+0x5c>
   112d2:	bf00      	nop
   112d4:	200094c8 	.word	0x200094c8
   112d8:	20009540 	.word	0x20009540
   112dc:	20009488 	.word	0x20009488

000112e0 <db_hash_process>:
   112e0:	4b03      	ldr	r3, [pc, #12]	; (112f0 <db_hash_process+0x10>)
   112e2:	e8d3 3faf 	lda	r3, [r3]
	if (new_hash) {
   112e6:	071b      	lsls	r3, r3, #28
   112e8:	d401      	bmi.n	112ee <db_hash_process+0xe>
		db_hash_gen();
   112ea:	f7ff bf7b 	b.w	111e4 <db_hash_gen>
}
   112ee:	4770      	bx	lr
   112f0:	20009540 	.word	0x20009540

000112f4 <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   112f4:	2300      	movs	r3, #0
{
   112f6:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   112f8:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   112fa:	f7ff fee9 	bl	110d0 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   112fe:	1c41      	adds	r1, r0, #1
   11300:	b289      	uxth	r1, r1
   11302:	4608      	mov	r0, r1
   11304:	4a03      	ldr	r2, [pc, #12]	; (11314 <bt_gatt_attr_next+0x20>)
   11306:	ab01      	add	r3, sp, #4
   11308:	f008 f910 	bl	1952c <bt_gatt_foreach_attr>
}
   1130c:	9801      	ldr	r0, [sp, #4]
   1130e:	b003      	add	sp, #12
   11310:	f85d fb04 	ldr.w	pc, [sp], #4
   11314:	00019169 	.word	0x00019169

00011318 <gatt_indicate>:
{
   11318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1131c:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1131e:	6851      	ldr	r1, [r2, #4]
{
   11320:	4680      	mov	r8, r0
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   11322:	8a4f      	ldrh	r7, [r1, #18]
{
   11324:	4615      	mov	r5, r2
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   11326:	f017 0714 	ands.w	r7, r7, #20
{
   1132a:	b086      	sub	sp, #24
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   1132c:	d00f      	beq.n	1134e <gatt_indicate+0x36>
		LOG_WRN("Link is not encrypted");
   1132e:	4b33      	ldr	r3, [pc, #204]	; (113fc <gatt_indicate+0xe4>)
		return -EPERM;
   11330:	f04f 35ff 	mov.w	r5, #4294967295
		LOG_WRN("Link is not encrypted");
   11334:	9305      	str	r3, [sp, #20]
   11336:	2302      	movs	r3, #2
   11338:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1133c:	4830      	ldr	r0, [pc, #192]	; (11400 <gatt_indicate+0xe8>)
   1133e:	aa04      	add	r2, sp, #16
   11340:	9304      	str	r3, [sp, #16]
   11342:	f007 ff9e 	bl	19282 <z_log_msg_static_create.constprop.0>
}
   11346:	4628      	mov	r0, r5
   11348:	b006      	add	sp, #24
   1134a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   1134e:	2202      	movs	r2, #2
   11350:	f008 f913 	bl	1957a <bt_gatt_is_subscribed>
   11354:	b960      	cbnz	r0, 11370 <gatt_indicate+0x58>
			LOG_WRN("Device is not subscribed to characteristic");
   11356:	4b2b      	ldr	r3, [pc, #172]	; (11404 <gatt_indicate+0xec>)
   11358:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1135c:	9305      	str	r3, [sp, #20]
   1135e:	2302      	movs	r3, #2
   11360:	4827      	ldr	r0, [pc, #156]	; (11400 <gatt_indicate+0xe8>)
   11362:	aa04      	add	r2, sp, #16
   11364:	9304      	str	r3, [sp, #16]
			return -EINVAL;
   11366:	f06f 0515 	mvn.w	r5, #21
			LOG_WRN("Device is not subscribed to characteristic");
   1136a:	f007 ff8a 	bl	19282 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1136e:	e7ea      	b.n	11346 <gatt_indicate+0x2e>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   11370:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   11374:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   11376:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   11378:	f7ff fb96 	bl	10aa8 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1137c:	3602      	adds	r6, #2
	if (!req) {
   1137e:	4604      	mov	r4, r0
   11380:	b1b0      	cbz	r0, 113b0 <gatt_indicate+0x98>
	req->func = func;
   11382:	4b21      	ldr	r3, [pc, #132]	; (11408 <gatt_indicate+0xf0>)
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   11384:	4632      	mov	r2, r6
	req->func = func;
   11386:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   11388:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1138a:	211d      	movs	r1, #29
   1138c:	4640      	mov	r0, r8
   1138e:	f7ff f8b9 	bl	10504 <bt_att_create_pdu>
	if (!buf) {
   11392:	4606      	mov	r6, r0
   11394:	b978      	cbnz	r0, 113b6 <gatt_indicate+0x9e>
		LOG_WRN("No buffer available to send indication");
   11396:	4b1d      	ldr	r3, [pc, #116]	; (1140c <gatt_indicate+0xf4>)
   11398:	4819      	ldr	r0, [pc, #100]	; (11400 <gatt_indicate+0xe8>)
   1139a:	9305      	str	r3, [sp, #20]
   1139c:	2302      	movs	r3, #2
   1139e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   113a2:	aa04      	add	r2, sp, #16
   113a4:	9304      	str	r3, [sp, #16]
   113a6:	f007 ff6c 	bl	19282 <z_log_msg_static_create.constprop.0>
		bt_att_req_free(req);
   113aa:	4620      	mov	r0, r4
   113ac:	f7ff fb9e 	bl	10aec <bt_att_req_free>
		return -ENOMEM;
   113b0:	f06f 050b 	mvn.w	r5, #11
   113b4:	e7c7      	b.n	11346 <gatt_indicate+0x2e>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   113b6:	2301      	movs	r3, #1
   113b8:	463a      	mov	r2, r7
   113ba:	4639      	mov	r1, r7
	return net_buf_simple_add(&buf->b, len);
   113bc:	f106 0a0c 	add.w	sl, r6, #12
   113c0:	f007 fecb 	bl	1915a <bt_att_set_tx_meta_data>
   113c4:	2102      	movs	r1, #2
   113c6:	4650      	mov	r0, sl
   113c8:	f008 fa23 	bl	19812 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   113cc:	4607      	mov	r7, r0
   113ce:	f827 9b02 	strh.w	r9, [r7], #2
   113d2:	8aa9      	ldrh	r1, [r5, #20]
   113d4:	4650      	mov	r0, sl
   113d6:	f008 fa1c 	bl	19812 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   113da:	8aaa      	ldrh	r2, [r5, #20]
   113dc:	6929      	ldr	r1, [r5, #16]
   113de:	4638      	mov	r0, r7
   113e0:	f006 fee5 	bl	181ae <memcpy>
	err = bt_att_req_send(conn, req);
   113e4:	4621      	mov	r1, r4
   113e6:	4640      	mov	r0, r8
	req->buf = buf;
   113e8:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   113ea:	f007 fe83 	bl	190f4 <bt_att_req_send>
	if (err) {
   113ee:	4605      	mov	r5, r0
   113f0:	2800      	cmp	r0, #0
   113f2:	d0a8      	beq.n	11346 <gatt_indicate+0x2e>
		bt_att_req_free(req);
   113f4:	4620      	mov	r0, r4
   113f6:	f7ff fb79 	bl	10aec <bt_att_req_free>
   113fa:	e7a4      	b.n	11346 <gatt_indicate+0x2e>
   113fc:	0001dd5f 	.word	0x0001dd5f
   11400:	0001b890 	.word	0x0001b890
   11404:	0001dd75 	.word	0x0001dd75
   11408:	00019183 	.word	0x00019183
   1140c:	0001dda0 	.word	0x0001dda0

00011410 <bt_gatt_indicate>:
{
   11410:	b530      	push	{r4, r5, lr}
   11412:	4604      	mov	r4, r0
   11414:	460d      	mov	r5, r1
   11416:	b08b      	sub	sp, #44	; 0x2c
   11418:	4b36      	ldr	r3, [pc, #216]	; (114f4 <bt_gatt_indicate+0xe4>)
   1141a:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1141e:	075a      	lsls	r2, r3, #29
   11420:	d561      	bpl.n	114e6 <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   11422:	b110      	cbz	r0, 1142a <bt_gatt_indicate+0x1a>
   11424:	7a83      	ldrb	r3, [r0, #10]
   11426:	2b07      	cmp	r3, #7
   11428:	d160      	bne.n	114ec <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   1142a:	6868      	ldr	r0, [r5, #4]
   1142c:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1142e:	f7ff fe4f 	bl	110d0 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   11432:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   11434:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   11438:	b33a      	cbz	r2, 1148a <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1143a:	a905      	add	r1, sp, #20
   1143c:	9102      	str	r1, [sp, #8]
   1143e:	492e      	ldr	r1, [pc, #184]	; (114f8 <bt_gatt_indicate+0xe8>)
	found->attr = NULL;
   11440:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   11442:	9101      	str	r1, [sp, #4]
   11444:	2101      	movs	r1, #1
   11446:	9100      	str	r1, [sp, #0]
   11448:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1144c:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1144e:	f7ff fe6f 	bl	11130 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   11452:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   11454:	b91b      	cbnz	r3, 1145e <bt_gatt_indicate+0x4e>
			return -ENOENT;
   11456:	f06f 0001 	mvn.w	r0, #1
}
   1145a:	b00b      	add	sp, #44	; 0x2c
   1145c:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1145e:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   11460:	9b05      	ldr	r3, [sp, #20]
   11462:	a904      	add	r1, sp, #16
   11464:	6818      	ldr	r0, [r3, #0]
   11466:	2300      	movs	r3, #0
   11468:	f88d 3010 	strb.w	r3, [sp, #16]
   1146c:	f642 0303 	movw	r3, #10243	; 0x2803
   11470:	f8ad 3012 	strh.w	r3, [sp, #18]
   11474:	f006 feb2 	bl	181dc <bt_uuid_cmp>
   11478:	b970      	cbnz	r0, 11498 <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1147a:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1147c:	68c3      	ldr	r3, [r0, #12]
   1147e:	799b      	ldrb	r3, [r3, #6]
   11480:	069b      	lsls	r3, r3, #26
   11482:	d405      	bmi.n	11490 <bt_gatt_indicate+0x80>
			return -EINVAL;
   11484:	f06f 0015 	mvn.w	r0, #21
   11488:	e7e7      	b.n	1145a <bt_gatt_indicate+0x4a>
		if (!data.handle) {
   1148a:	2800      	cmp	r0, #0
   1148c:	d1e8      	bne.n	11460 <bt_gatt_indicate+0x50>
   1148e:	e7e2      	b.n	11456 <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   11490:	f007 fffe 	bl	19490 <bt_gatt_attr_value_handle>
   11494:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   11498:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1149c:	b13c      	cbz	r4, 114ae <bt_gatt_indicate+0x9e>
		params->_ref = 1;
   1149e:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   114a0:	4601      	mov	r1, r0
   114a2:	462a      	mov	r2, r5
   114a4:	4620      	mov	r0, r4
		params->_ref = 1;
   114a6:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   114a8:	f7ff ff36 	bl	11318 <gatt_indicate>
   114ac:	e7d5      	b.n	1145a <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
   114ae:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   114b2:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   114b4:	2302      	movs	r3, #2
   114b6:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   114ba:	f642 1302 	movw	r3, #10498	; 0x2902
   114be:	f8ad 3012 	strh.w	r3, [sp, #18]
   114c2:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   114c4:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   114c6:	9302      	str	r3, [sp, #8]
   114c8:	4b0c      	ldr	r3, [pc, #48]	; (114fc <bt_gatt_indicate+0xec>)
   114ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
   114ce:	9301      	str	r3, [sp, #4]
   114d0:	2301      	movs	r3, #1
   114d2:	aa04      	add	r2, sp, #16
   114d4:	9300      	str	r3, [sp, #0]
   114d6:	4623      	mov	r3, r4
	data.ind_params = params;
   114d8:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   114da:	f88d 4010 	strb.w	r4, [sp, #16]
   114de:	f7ff fe27 	bl	11130 <bt_gatt_foreach_attr_type>
	return data.err;
   114e2:	9807      	ldr	r0, [sp, #28]
   114e4:	e7b9      	b.n	1145a <bt_gatt_indicate+0x4a>
		return -EAGAIN;
   114e6:	f06f 000a 	mvn.w	r0, #10
   114ea:	e7b6      	b.n	1145a <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
   114ec:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   114f0:	e7b3      	b.n	1145a <bt_gatt_indicate+0x4a>
   114f2:	bf00      	nop
   114f4:	200080d4 	.word	0x200080d4
   114f8:	000191a9 	.word	0x000191a9
   114fc:	00011805 	.word	0x00011805

00011500 <sc_process>:
{
   11500:	4603      	mov	r3, r0
   11502:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   11504:	f850 2c08 	ldr.w	r2, [r0, #-8]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   11508:	f1a0 0120 	sub.w	r1, r0, #32
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1150c:	9201      	str	r2, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1150e:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11512:	e8d4 2fef 	ldaex	r2, [r4]
   11516:	f022 0201 	bic.w	r2, r2, #1
   1151a:	e8c4 2fe0 	stlex	r0, r2, [r4]
   1151e:	2800      	cmp	r0, #0
   11520:	d1f7      	bne.n	11512 <sc_process+0x12>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   11522:	4a0d      	ldr	r2, [pc, #52]	; (11558 <sc_process+0x58>)
	sc->start = 0U;
   11524:	2000      	movs	r0, #0
	sc->params.attr = &_1_gatt_svc.attrs[2];
   11526:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   1152a:	4a0c      	ldr	r2, [pc, #48]	; (1155c <sc_process+0x5c>)
	sc->start = 0U;
   1152c:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->params.func = sc_indicate_rsp;
   11530:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   11534:	aa01      	add	r2, sp, #4
   11536:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   1153a:	2204      	movs	r2, #4
	sc->end = 0U;
   1153c:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   11540:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   11544:	f7ff ff64 	bl	11410 <bt_gatt_indicate>
   11548:	b918      	cbnz	r0, 11552 <sc_process+0x52>
   1154a:	2102      	movs	r1, #2
   1154c:	4620      	mov	r0, r4
   1154e:	f007 fe8a 	bl	19266 <atomic_or>
}
   11552:	b002      	add	sp, #8
   11554:	bd10      	pop	{r4, pc}
   11556:	bf00      	nop
   11558:	0001bf18 	.word	0x0001bf18
   1155c:	00011001 	.word	0x00011001

00011560 <update_ccc>:
{
   11560:	b5f0      	push	{r4, r5, r6, r7, lr}
   11562:	b089      	sub	sp, #36	; 0x24
	if (attr->write != bt_gatt_attr_write_ccc) {
   11564:	4b31      	ldr	r3, [pc, #196]	; (1162c <update_ccc+0xcc>)
	struct bt_conn *conn = data->conn;
   11566:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   11568:	6882      	ldr	r2, [r0, #8]
{
   1156a:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1156c:	429a      	cmp	r2, r3
{
   1156e:	af00      	add	r7, sp, #0
	if (attr->write != bt_gatt_attr_write_ccc) {
   11570:	d11e      	bne.n	115b0 <update_ccc+0x50>
	ccc = attr->user_data;
   11572:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   11574:	8933      	ldrh	r3, [r6, #8]
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   11576:	1c72      	adds	r2, r6, #1
		if (!cfg->value ||
   11578:	b1d3      	cbz	r3, 115b0 <update_ccc+0x50>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1157a:	4628      	mov	r0, r5
   1157c:	7831      	ldrb	r1, [r6, #0]
   1157e:	f007 f8f1 	bl	18764 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   11582:	b1a8      	cbz	r0, 115b0 <update_ccc+0x50>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   11584:	f44f 7295 	mov.w	r2, #298	; 0x12a
   11588:	4621      	mov	r1, r4
   1158a:	4628      	mov	r0, r5
   1158c:	f007 ffd9 	bl	19542 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   11590:	2803      	cmp	r0, #3
   11592:	d111      	bne.n	115b8 <update_ccc+0x58>
				LOG_WRN("CCC %p not writable", attr);
   11594:	466d      	mov	r5, sp
   11596:	b088      	sub	sp, #32
   11598:	466a      	mov	r2, sp
   1159a:	4b25      	ldr	r3, [pc, #148]	; (11630 <update_ccc+0xd0>)
   1159c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   115a0:	e9c2 3405 	strd	r3, r4, [r2, #20]
   115a4:	f842 0f10 	str.w	r0, [r2, #16]!
   115a8:	4822      	ldr	r0, [pc, #136]	; (11634 <update_ccc+0xd4>)
   115aa:	f007 fe6a 	bl	19282 <z_log_msg_static_create.constprop.0>
   115ae:	46ad      	mov	sp, r5
}
   115b0:	2001      	movs	r0, #1
   115b2:	3724      	adds	r7, #36	; 0x24
   115b4:	46bd      	mov	sp, r7
   115b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gatt_ccc_changed(attr, ccc);
   115b8:	4631      	mov	r1, r6
   115ba:	4620      	mov	r0, r4
   115bc:	f007 fdd7 	bl	1916e <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   115c0:	4b1d      	ldr	r3, [pc, #116]	; (11638 <update_ccc+0xd8>)
   115c2:	429e      	cmp	r6, r3
   115c4:	d1f4      	bne.n	115b0 <update_ccc+0x50>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   115c6:	7a28      	ldrb	r0, [r5, #8]
   115c8:	f105 0188 	add.w	r1, r5, #136	; 0x88
   115cc:	f7ff fb84 	bl	10cd8 <find_sc_cfg>
	if (!cfg) {
   115d0:	2800      	cmp	r0, #0
   115d2:	d0ed      	beq.n	115b0 <update_ccc+0x50>
	if (!(cfg->data.start || cfg->data.end)) {
   115d4:	8902      	ldrh	r2, [r0, #8]
   115d6:	8943      	ldrh	r3, [r0, #10]
   115d8:	ea52 0103 	orrs.w	r1, r2, r3
   115dc:	d0e8      	beq.n	115b0 <update_ccc+0x50>
	index = bt_conn_index(conn);
   115de:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   115e0:	80ba      	strh	r2, [r7, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   115e2:	80fb      	strh	r3, [r7, #6]
	index = bt_conn_index(conn);
   115e4:	f7fd feea 	bl	f3bc <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   115e8:	2318      	movs	r3, #24
   115ea:	4914      	ldr	r1, [pc, #80]	; (1163c <update_ccc+0xdc>)
   115ec:	4a14      	ldr	r2, [pc, #80]	; (11640 <update_ccc+0xe0>)
   115ee:	fb03 1300 	mla	r3, r3, r0, r1
   115f2:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   115f4:	4a13      	ldr	r2, [pc, #76]	; (11644 <update_ccc+0xe4>)
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   115f6:	b200      	sxth	r0, r0
	sc_restore_params[index].func = sc_restore_rsp;
   115f8:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   115fa:	1d3a      	adds	r2, r7, #4
   115fc:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   115fe:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   11600:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   11604:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   11608:	4628      	mov	r0, r5
	sc_restore_params[index].len = sizeof(sc_range);
   1160a:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1160c:	f7ff ff00 	bl	11410 <bt_gatt_indicate>
   11610:	2800      	cmp	r0, #0
   11612:	d0cd      	beq.n	115b0 <update_ccc+0x50>
		LOG_ERR("SC restore indication failed");
   11614:	4b0c      	ldr	r3, [pc, #48]	; (11648 <update_ccc+0xe8>)
   11616:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1161a:	61fb      	str	r3, [r7, #28]
   1161c:	2302      	movs	r3, #2
   1161e:	4805      	ldr	r0, [pc, #20]	; (11634 <update_ccc+0xd4>)
   11620:	f107 0218 	add.w	r2, r7, #24
   11624:	61bb      	str	r3, [r7, #24]
   11626:	f007 fe2c 	bl	19282 <z_log_msg_static_create.constprop.0>
   1162a:	e7c1      	b.n	115b0 <update_ccc+0x50>
   1162c:	00010d21 	.word	0x00010d21
   11630:	0001ddc7 	.word	0x0001ddc7
   11634:	0001b890 	.word	0x0001b890
   11638:	2000835c 	.word	0x2000835c
   1163c:	20009950 	.word	0x20009950
   11640:	0001bf18 	.word	0x0001bf18
   11644:	00019427 	.word	0x00019427
   11648:	0001dddb 	.word	0x0001dddb

0001164c <gatt_notify>:
{
   1164c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11650:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   11652:	6851      	ldr	r1, [r2, #4]
{
   11654:	4607      	mov	r7, r0
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   11656:	8a4b      	ldrh	r3, [r1, #18]
{
   11658:	4614      	mov	r4, r2
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   1165a:	f003 0314 	and.w	r3, r3, #20
{
   1165e:	b087      	sub	sp, #28
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   11660:	b173      	cbz	r3, 11680 <gatt_notify+0x34>
		LOG_WRN("Link is not encrypted");
   11662:	4b2a      	ldr	r3, [pc, #168]	; (1170c <gatt_notify+0xc0>)
   11664:	482a      	ldr	r0, [pc, #168]	; (11710 <gatt_notify+0xc4>)
   11666:	9305      	str	r3, [sp, #20]
   11668:	2302      	movs	r3, #2
   1166a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1166e:	aa04      	add	r2, sp, #16
   11670:	9304      	str	r3, [sp, #16]
   11672:	f007 fe06 	bl	19282 <z_log_msg_static_create.constprop.0>
		return -EPERM;
   11676:	f04f 30ff 	mov.w	r0, #4294967295
}
   1167a:	b007      	add	sp, #28
   1167c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   11680:	2201      	movs	r2, #1
   11682:	f007 ff7a 	bl	1957a <bt_gatt_is_subscribed>
   11686:	b960      	cbnz	r0, 116a2 <gatt_notify+0x56>
			LOG_WRN("Device is not subscribed to characteristic");
   11688:	4b22      	ldr	r3, [pc, #136]	; (11714 <gatt_notify+0xc8>)
   1168a:	4821      	ldr	r0, [pc, #132]	; (11710 <gatt_notify+0xc4>)
   1168c:	9305      	str	r3, [sp, #20]
   1168e:	2302      	movs	r3, #2
   11690:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11694:	aa04      	add	r2, sp, #16
   11696:	9304      	str	r3, [sp, #16]
   11698:	f007 fdf3 	bl	19282 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1169c:	f06f 0015 	mvn.w	r0, #21
   116a0:	e7eb      	b.n	1167a <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   116a2:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   116a4:	211b      	movs	r1, #27
   116a6:	4638      	mov	r0, r7
   116a8:	3202      	adds	r2, #2
   116aa:	f7fe ff2b 	bl	10504 <bt_att_create_pdu>
	if (!buf) {
   116ae:	4605      	mov	r5, r0
   116b0:	b960      	cbnz	r0, 116cc <gatt_notify+0x80>
		LOG_WRN("No buffer available to send notification");
   116b2:	4b19      	ldr	r3, [pc, #100]	; (11718 <gatt_notify+0xcc>)
   116b4:	4816      	ldr	r0, [pc, #88]	; (11710 <gatt_notify+0xc4>)
   116b6:	9305      	str	r3, [sp, #20]
   116b8:	2302      	movs	r3, #2
   116ba:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   116be:	aa04      	add	r2, sp, #16
   116c0:	9304      	str	r3, [sp, #16]
   116c2:	f007 fdde 	bl	19282 <z_log_msg_static_create.constprop.0>
		return -ENOMEM;
   116c6:	f06f 000b 	mvn.w	r0, #11
   116ca:	e7d6      	b.n	1167a <gatt_notify+0x2e>
   116cc:	f100 090c 	add.w	r9, r0, #12
   116d0:	2102      	movs	r1, #2
   116d2:	4648      	mov	r0, r9
   116d4:	f008 f89d 	bl	19812 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   116d8:	4606      	mov	r6, r0
   116da:	f826 8b02 	strh.w	r8, [r6], #2
   116de:	89a1      	ldrh	r1, [r4, #12]
   116e0:	4648      	mov	r0, r9
   116e2:	f008 f896 	bl	19812 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   116e6:	89a2      	ldrh	r2, [r4, #12]
   116e8:	68a1      	ldr	r1, [r4, #8]
   116ea:	4630      	mov	r0, r6
   116ec:	f006 fd5f 	bl	181ae <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   116f0:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   116f4:	4628      	mov	r0, r5
   116f6:	2301      	movs	r3, #1
   116f8:	f007 fd2f 	bl	1915a <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   116fc:	4629      	mov	r1, r5
   116fe:	4638      	mov	r0, r7
}
   11700:	b007      	add	sp, #28
   11702:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   11706:	f007 bcb7 	b.w	19078 <bt_att_send>
   1170a:	bf00      	nop
   1170c:	0001dd5f 	.word	0x0001dd5f
   11710:	0001b890 	.word	0x0001b890
   11714:	0001dd75 	.word	0x0001dd75
   11718:	0001ddf8 	.word	0x0001ddf8

0001171c <bt_gatt_notify_cb>:
{
   1171c:	b530      	push	{r4, r5, lr}
   1171e:	4604      	mov	r4, r0
   11720:	460d      	mov	r5, r1
   11722:	b08b      	sub	sp, #44	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11724:	4b34      	ldr	r3, [pc, #208]	; (117f8 <bt_gatt_notify_cb+0xdc>)
   11726:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1172a:	075a      	lsls	r2, r3, #29
   1172c:	d55d      	bpl.n	117ea <bt_gatt_notify_cb+0xce>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1172e:	b110      	cbz	r0, 11736 <bt_gatt_notify_cb+0x1a>
   11730:	7a83      	ldrb	r3, [r0, #10]
   11732:	2b07      	cmp	r3, #7
   11734:	d15c      	bne.n	117f0 <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
   11736:	6868      	ldr	r0, [r5, #4]
   11738:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1173a:	f7ff fcc9 	bl	110d0 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1173e:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   11740:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   11744:	b33a      	cbz	r2, 11796 <bt_gatt_notify_cb+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   11746:	a905      	add	r1, sp, #20
   11748:	9102      	str	r1, [sp, #8]
   1174a:	492c      	ldr	r1, [pc, #176]	; (117fc <bt_gatt_notify_cb+0xe0>)
	found->attr = NULL;
   1174c:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1174e:	9101      	str	r1, [sp, #4]
   11750:	2101      	movs	r1, #1
   11752:	9100      	str	r1, [sp, #0]
   11754:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   11758:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1175a:	f7ff fce9 	bl	11130 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1175e:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   11760:	b91b      	cbnz	r3, 1176a <bt_gatt_notify_cb+0x4e>
			return -ENOENT;
   11762:	f06f 0001 	mvn.w	r0, #1
}
   11766:	b00b      	add	sp, #44	; 0x2c
   11768:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1176a:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1176c:	9b05      	ldr	r3, [sp, #20]
   1176e:	a904      	add	r1, sp, #16
   11770:	6818      	ldr	r0, [r3, #0]
   11772:	2300      	movs	r3, #0
   11774:	f88d 3010 	strb.w	r3, [sp, #16]
   11778:	f642 0303 	movw	r3, #10243	; 0x2803
   1177c:	f8ad 3012 	strh.w	r3, [sp, #18]
   11780:	f006 fd2c 	bl	181dc <bt_uuid_cmp>
   11784:	b970      	cbnz	r0, 117a4 <bt_gatt_notify_cb+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   11786:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   11788:	68c3      	ldr	r3, [r0, #12]
   1178a:	799b      	ldrb	r3, [r3, #6]
   1178c:	06db      	lsls	r3, r3, #27
   1178e:	d405      	bmi.n	1179c <bt_gatt_notify_cb+0x80>
			return -EINVAL;
   11790:	f06f 0015 	mvn.w	r0, #21
   11794:	e7e7      	b.n	11766 <bt_gatt_notify_cb+0x4a>
		if (!data.handle) {
   11796:	2800      	cmp	r0, #0
   11798:	d1e8      	bne.n	1176c <bt_gatt_notify_cb+0x50>
   1179a:	e7e2      	b.n	11762 <bt_gatt_notify_cb+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1179c:	f007 fe78 	bl	19490 <bt_gatt_attr_value_handle>
   117a0:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   117a4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   117a8:	b12c      	cbz	r4, 117b6 <bt_gatt_notify_cb+0x9a>
		return gatt_notify(conn, data.handle, params);
   117aa:	4601      	mov	r1, r0
   117ac:	462a      	mov	r2, r5
   117ae:	4620      	mov	r0, r4
   117b0:	f7ff ff4c 	bl	1164c <gatt_notify>
   117b4:	e7d7      	b.n	11766 <bt_gatt_notify_cb+0x4a>
	data.err = -ENOTCONN;
   117b6:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   117ba:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
   117be:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   117c0:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   117c2:	f8ad 2012 	strh.w	r2, [sp, #18]
   117c6:	aa05      	add	r2, sp, #20
   117c8:	9202      	str	r2, [sp, #8]
   117ca:	4a0d      	ldr	r2, [pc, #52]	; (11800 <bt_gatt_notify_cb+0xe4>)
	data.type = BT_GATT_CCC_NOTIFY;
   117cc:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   117d0:	e9cd 3200 	strd	r3, r2, [sp]
   117d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   117d8:	4623      	mov	r3, r4
   117da:	aa04      	add	r2, sp, #16
	data.nfy_params = params;
   117dc:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   117de:	f88d 4010 	strb.w	r4, [sp, #16]
   117e2:	f7ff fca5 	bl	11130 <bt_gatt_foreach_attr_type>
	return data.err;
   117e6:	9807      	ldr	r0, [sp, #28]
   117e8:	e7bd      	b.n	11766 <bt_gatt_notify_cb+0x4a>
		return -EAGAIN;
   117ea:	f06f 000a 	mvn.w	r0, #10
   117ee:	e7ba      	b.n	11766 <bt_gatt_notify_cb+0x4a>
		return -ENOTCONN;
   117f0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   117f4:	e7b7      	b.n	11766 <bt_gatt_notify_cb+0x4a>
   117f6:	bf00      	nop
   117f8:	200080d4 	.word	0x200080d4
   117fc:	000191a9 	.word	0x000191a9
   11800:	00011805 	.word	0x00011805

00011804 <notify_cb>:
{
   11804:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   11806:	4b3d      	ldr	r3, [pc, #244]	; (118fc <notify_cb+0xf8>)
{
   11808:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1180a:	6882      	ldr	r2, [r0, #8]
{
   1180c:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1180e:	429a      	cmp	r2, r3
{
   11810:	b087      	sub	sp, #28
	if (attr->write != bt_gatt_attr_write_ccc) {
   11812:	d002      	beq.n	1181a <notify_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
   11814:	2001      	movs	r0, #1
}
   11816:	b007      	add	sp, #28
   11818:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ccc = attr->user_data;
   1181a:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1181c:	4b38      	ldr	r3, [pc, #224]	; (11900 <notify_cb+0xfc>)
   1181e:	429e      	cmp	r6, r3
   11820:	d053      	beq.n	118ca <notify_cb+0xc6>
		if (cfg->value != data->type) {
   11822:	8932      	ldrh	r2, [r6, #8]
   11824:	89ab      	ldrh	r3, [r5, #12]
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   11826:	1c71      	adds	r1, r6, #1
		if (cfg->value != data->type) {
   11828:	429a      	cmp	r2, r3
   1182a:	d1f3      	bne.n	11814 <notify_cb+0x10>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1182c:	7830      	ldrb	r0, [r6, #0]
   1182e:	f7fd fe87 	bl	f540 <bt_conn_lookup_addr_le>
		if (!conn) {
   11832:	4604      	mov	r4, r0
   11834:	2800      	cmp	r0, #0
   11836:	d0ed      	beq.n	11814 <notify_cb+0x10>
		if (conn->state != BT_CONN_CONNECTED) {
   11838:	7a83      	ldrb	r3, [r0, #10]
   1183a:	2b07      	cmp	r3, #7
   1183c:	d005      	beq.n	1184a <notify_cb+0x46>
			bt_conn_unref(conn);
   1183e:	f006 ff52 	bl	186e6 <bt_conn_unref>
			continue;
   11842:	e7e7      	b.n	11814 <notify_cb+0x10>
			bt_conn_unref(conn);
   11844:	f006 ff4f 	bl	186e6 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   11848:	e7eb      	b.n	11822 <notify_cb+0x1e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1184a:	6973      	ldr	r3, [r6, #20]
   1184c:	b123      	cbz	r3, 11858 <notify_cb+0x54>
   1184e:	4639      	mov	r1, r7
   11850:	4798      	blx	r3
   11852:	b908      	cbnz	r0, 11858 <notify_cb+0x54>
			bt_conn_unref(conn);
   11854:	4620      	mov	r0, r4
   11856:	e7f2      	b.n	1183e <notify_cb+0x3a>
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   11858:	8a7b      	ldrh	r3, [r7, #18]
   1185a:	f003 0314 	and.w	r3, r3, #20
   1185e:	b153      	cbz	r3, 11876 <notify_cb+0x72>
			LOG_WRN("Link is not encrypted");
   11860:	4b28      	ldr	r3, [pc, #160]	; (11904 <notify_cb+0x100>)
   11862:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11866:	9305      	str	r3, [sp, #20]
   11868:	2302      	movs	r3, #2
   1186a:	4827      	ldr	r0, [pc, #156]	; (11908 <notify_cb+0x104>)
   1186c:	aa04      	add	r2, sp, #16
   1186e:	9304      	str	r3, [sp, #16]
   11870:	f007 fd07 	bl	19282 <z_log_msg_static_create.constprop.0>
   11874:	e7ee      	b.n	11854 <notify_cb+0x50>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   11876:	89ab      	ldrh	r3, [r5, #12]
   11878:	2b02      	cmp	r3, #2
   1187a:	d114      	bne.n	118a6 <notify_cb+0xa2>
   1187c:	8933      	ldrh	r3, [r6, #8]
   1187e:	079a      	lsls	r2, r3, #30
   11880:	d405      	bmi.n	1188e <notify_cb+0x8a>
		bt_conn_unref(conn);
   11882:	4620      	mov	r0, r4
   11884:	f006 ff2f 	bl	186e6 <bt_conn_unref>
		data->err = 0;
   11888:	2300      	movs	r3, #0
   1188a:	60ab      	str	r3, [r5, #8]
   1188c:	e7c2      	b.n	11814 <notify_cb+0x10>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1188e:	4620      	mov	r0, r4
   11890:	692a      	ldr	r2, [r5, #16]
   11892:	88a9      	ldrh	r1, [r5, #4]
   11894:	f7ff fd40 	bl	11318 <gatt_indicate>
			if (err == 0) {
   11898:	4606      	mov	r6, r0
   1189a:	b978      	cbnz	r0, 118bc <notify_cb+0xb8>
				data->ind_params->_ref++;
   1189c:	692a      	ldr	r2, [r5, #16]
   1189e:	7d93      	ldrb	r3, [r2, #22]
   118a0:	3301      	adds	r3, #1
   118a2:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   118a4:	e7ed      	b.n	11882 <notify_cb+0x7e>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   118a6:	2b01      	cmp	r3, #1
   118a8:	d1eb      	bne.n	11882 <notify_cb+0x7e>
   118aa:	8933      	ldrh	r3, [r6, #8]
   118ac:	07db      	lsls	r3, r3, #31
   118ae:	d5e8      	bpl.n	11882 <notify_cb+0x7e>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   118b0:	4620      	mov	r0, r4
   118b2:	692a      	ldr	r2, [r5, #16]
   118b4:	88a9      	ldrh	r1, [r5, #4]
   118b6:	f7ff fec9 	bl	1164c <gatt_notify>
   118ba:	4606      	mov	r6, r0
		bt_conn_unref(conn);
   118bc:	4620      	mov	r0, r4
   118be:	f006 ff12 	bl	186e6 <bt_conn_unref>
		if (err < 0) {
   118c2:	2e00      	cmp	r6, #0
   118c4:	dae0      	bge.n	11888 <notify_cb+0x84>
			return BT_GATT_ITER_STOP;
   118c6:	2000      	movs	r0, #0
   118c8:	e7a5      	b.n	11816 <notify_cb+0x12>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   118ca:	4c10      	ldr	r4, [pc, #64]	; (1190c <notify_cb+0x108>)
   118cc:	4910      	ldr	r1, [pc, #64]	; (11910 <notify_cb+0x10c>)
   118ce:	4620      	mov	r0, r4
   118d0:	f007 fcc1 	bl	19256 <bt_addr_le_eq>
   118d4:	2800      	cmp	r0, #0
   118d6:	d1a4      	bne.n	11822 <notify_cb+0x1e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   118d8:	2207      	movs	r2, #7
   118da:	4621      	mov	r1, r4
   118dc:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   118e0:	f7fd fe78 	bl	f5d4 <bt_conn_lookup_state_le>
			if (!conn) {
   118e4:	2800      	cmp	r0, #0
   118e6:	d1ad      	bne.n	11844 <notify_cb+0x40>
				sc = (struct sc_data *)data->ind_params->data;
   118e8:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   118ea:	4621      	mov	r1, r4
				sc = (struct sc_data *)data->ind_params->data;
   118ec:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   118ee:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   118f2:	8853      	ldrh	r3, [r2, #2]
   118f4:	8812      	ldrh	r2, [r2, #0]
   118f6:	f7ff fa8f 	bl	10e18 <sc_save>
				continue;
   118fa:	e792      	b.n	11822 <notify_cb+0x1e>
   118fc:	00010d21 	.word	0x00010d21
   11900:	2000835c 	.word	0x2000835c
   11904:	0001dd5f 	.word	0x0001dd5f
   11908:	0001b890 	.word	0x0001b890
   1190c:	20009bcf 	.word	0x20009bcf
   11910:	0001cc7b 	.word	0x0001cc7b

00011914 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   11914:	b507      	push	{r0, r1, r2, lr}
	struct conn_data data;

	LOG_DBG("conn %p", conn);

	data.conn = conn;
   11916:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
   11918:	2001      	movs	r0, #1
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1191a:	466b      	mov	r3, sp
   1191c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11920:	4a03      	ldr	r2, [pc, #12]	; (11930 <bt_gatt_connected+0x1c>)
	data.sec = BT_SECURITY_L1;
   11922:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   11926:	f007 fe01 	bl	1952c <bt_gatt_foreach_attr>
	err = bt_gatt_exchange_mtu(conn, &gatt_exchange_params);
	if (err) {
		LOG_WRN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
}
   1192a:	b003      	add	sp, #12
   1192c:	f85d fb04 	ldr.w	pc, [sp], #4
   11930:	00011561 	.word	0x00011561

00011934 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   11934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11936:	4605      	mov	r5, r0
   11938:	460e      	mov	r6, r1
   1193a:	4617      	mov	r7, r2
	return list->head;
   1193c:	4b06      	ldr	r3, [pc, #24]	; (11958 <bt_gatt_att_max_mtu_changed+0x24>)
   1193e:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   11940:	b14c      	cbz	r4, 11956 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   11942:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   11946:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   11948:	b11b      	cbz	r3, 11952 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1194a:	463a      	mov	r2, r7
   1194c:	4631      	mov	r1, r6
   1194e:	4628      	mov	r0, r5
   11950:	4798      	blx	r3
	return node->next;
   11952:	6864      	ldr	r4, [r4, #4]
   11954:	e7f4      	b.n	11940 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   11956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11958:	2000997c 	.word	0x2000997c

0001195c <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1195c:	b570      	push	{r4, r5, r6, lr}
   1195e:	4604      	mov	r4, r0
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   11960:	4603      	mov	r3, r0
   11962:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11966:	2001      	movs	r0, #1
   11968:	4a0d      	ldr	r2, [pc, #52]	; (119a0 <bt_gatt_disconnected+0x44>)
   1196a:	f007 fddf 	bl	1952c <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   1196e:	4620      	mov	r0, r4
   11970:	f7ff f99a 	bl	10ca8 <find_cf_cfg>
	if (!cfg) {
   11974:	4605      	mov	r5, r0
   11976:	b188      	cbz	r0, 1199c <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   11978:	f104 0688 	add.w	r6, r4, #136	; 0x88
   1197c:	4631      	mov	r1, r6
   1197e:	7a20      	ldrb	r0, [r4, #8]
   11980:	f006 fd5c 	bl	1843c <bt_addr_le_is_bonded>
   11984:	b920      	cbnz	r0, 11990 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   11986:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   11988:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   1198c:	f7ff ba2c 	b.w	10de8 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   11990:	4631      	mov	r1, r6
   11992:	1c68      	adds	r0, r5, #1
}
   11994:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   11998:	f007 bc70 	b.w	1927c <bt_addr_le_copy>
}
   1199c:	bd70      	pop	{r4, r5, r6, pc}
   1199e:	bf00      	nop
   119a0:	00010e85 	.word	0x00010e85

000119a4 <bt_smp_accept.part.0>:
	}

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   119a4:	b580      	push	{r7, lr}
   119a6:	af00      	add	r7, sp, #0
		*chan = &smp->chan;

		return 0;
	}

	LOG_ERR("No available SMP context for conn %p", conn);
   119a8:	b088      	sub	sp, #32
   119aa:	466a      	mov	r2, sp
   119ac:	4b07      	ldr	r3, [pc, #28]	; (119cc <bt_smp_accept.part.0+0x28>)
   119ae:	e9c2 3005 	strd	r3, r0, [r2, #20]
   119b2:	2303      	movs	r3, #3
   119b4:	f842 3f10 	str.w	r3, [r2, #16]!
   119b8:	2300      	movs	r3, #0
   119ba:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   119be:	4804      	ldr	r0, [pc, #16]	; (119d0 <bt_smp_accept.part.0+0x2c>)
   119c0:	f7f8 ff9c 	bl	a8fc <z_impl_z_log_msg_static_create>

	return -ENOMEM;
}
   119c4:	f06f 000b 	mvn.w	r0, #11
   119c8:	46bd      	mov	sp, r7
   119ca:	bd80      	pop	{r7, pc}
   119cc:	0001de30 	.word	0x0001de30
   119d0:	0001b8c0 	.word	0x0001b8c0

000119d4 <bt_smp_accept>:
		if (smp->chan.conn) {
   119d4:	4b04      	ldr	r3, [pc, #16]	; (119e8 <bt_smp_accept+0x14>)
   119d6:	681a      	ldr	r2, [r3, #0]
   119d8:	b10a      	cbz	r2, 119de <bt_smp_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   119da:	f7ff bfe3 	b.w	119a4 <bt_smp_accept.part.0>
		smp->chan.ops = &ops;
   119de:	4803      	ldr	r0, [pc, #12]	; (119ec <bt_smp_accept+0x18>)
   119e0:	6058      	str	r0, [r3, #4]
}
   119e2:	4610      	mov	r0, r2
		*chan = &smp->chan;
   119e4:	600b      	str	r3, [r1, #0]
}
   119e6:	4770      	bx	lr
   119e8:	20009984 	.word	0x20009984
   119ec:	0001c01c 	.word	0x0001c01c

000119f0 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   119f0:	222c      	movs	r2, #44	; 0x2c
   119f2:	4b02      	ldr	r3, [pc, #8]	; (119fc <net_buf_pool_get+0xc>)
   119f4:	fb02 3000 	mla	r0, r2, r0, r3
   119f8:	4770      	bx	lr
   119fa:	bf00      	nop
   119fc:	200086b8 	.word	0x200086b8

00011a00 <net_buf_id>:
int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   11a00:	212c      	movs	r1, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   11a02:	7a82      	ldrb	r2, [r0, #10]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   11a04:	4b05      	ldr	r3, [pc, #20]	; (11a1c <net_buf_id+0x1c>)
   11a06:	fb01 3302 	mla	r3, r1, r2, r3
   11a0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   11a0c:	7f1b      	ldrb	r3, [r3, #28]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   11a0e:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   11a10:	331b      	adds	r3, #27
   11a12:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   11a16:	fbb0 f0f3 	udiv	r0, r0, r3
   11a1a:	4770      	bx	lr
   11a1c:	200086b8 	.word	0x200086b8

00011a20 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   11a20:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   11a22:	242c      	movs	r4, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   11a24:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   11a26:	4b09      	ldr	r3, [pc, #36]	; (11a4c <fixed_data_alloc+0x2c>)
   11a28:	fb04 3302 	mla	r3, r4, r2, r3
   11a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	*size = MIN(fixed->data_size, *size);
   11a2e:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   11a30:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   11a32:	681a      	ldr	r2, [r3, #0]
   11a34:	4294      	cmp	r4, r2
   11a36:	bf94      	ite	ls
   11a38:	600c      	strls	r4, [r1, #0]
   11a3a:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   11a3c:	e9d3 5400 	ldrd	r5, r4, [r3]
   11a40:	f7ff ffde 	bl	11a00 <net_buf_id>
}
   11a44:	fb05 4000 	mla	r0, r5, r0, r4
   11a48:	bd38      	pop	{r3, r4, r5, pc}
   11a4a:	bf00      	nop
   11a4c:	200086b8 	.word	0x200086b8

00011a50 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   11a50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a54:	4605      	mov	r5, r0
   11a56:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   11a58:	4610      	mov	r0, r2
   11a5a:	4619      	mov	r1, r3
{
   11a5c:	4691      	mov	r9, r2
   11a5e:	4698      	mov	r8, r3
   11a60:	4617      	mov	r7, r2
   11a62:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   11a64:	f009 fb01 	bl	1b06a <sys_clock_timeout_end_calc>
   11a68:	4682      	mov	sl, r0
   11a6a:	468b      	mov	fp, r1
	__asm__ volatile(
   11a6c:	f04f 0320 	mov.w	r3, #32
   11a70:	f3ef 8111 	mrs	r1, BASEPRI
   11a74:	f383 8812 	msr	BASEPRI_MAX, r3
   11a78:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   11a7c:	8b6b      	ldrh	r3, [r5, #26]
   11a7e:	2b00      	cmp	r3, #0
   11a80:	d058      	beq.n	11b34 <net_buf_alloc_len+0xe4>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   11a82:	8b2a      	ldrh	r2, [r5, #24]
   11a84:	429a      	cmp	r2, r3
   11a86:	d93c      	bls.n	11b02 <net_buf_alloc_len+0xb2>
   11a88:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   11a8a:	2200      	movs	r2, #0
   11a8c:	2300      	movs	r3, #0
   11a8e:	4628      	mov	r0, r5
   11a90:	f003 fd84 	bl	1559c <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   11a94:	9900      	ldr	r1, [sp, #0]
   11a96:	4604      	mov	r4, r0
   11a98:	2800      	cmp	r0, #0
   11a9a:	d032      	beq.n	11b02 <net_buf_alloc_len+0xb2>
	__asm__ volatile(
   11a9c:	f381 8811 	msr	BASEPRI, r1
   11aa0:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   11aa4:	9b01      	ldr	r3, [sp, #4]
   11aa6:	2b00      	cmp	r3, #0
   11aa8:	d055      	beq.n	11b56 <net_buf_alloc_len+0x106>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   11aaa:	ea58 0309 	orrs.w	r3, r8, r9
   11aae:	d00f      	beq.n	11ad0 <net_buf_alloc_len+0x80>
   11ab0:	f1b8 3fff 	cmp.w	r8, #4294967295
   11ab4:	bf08      	it	eq
   11ab6:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   11aba:	d009      	beq.n	11ad0 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   11abc:	f004 fc92 	bl	163e4 <sys_clock_tick_get>
   11ac0:	ebba 0700 	subs.w	r7, sl, r0
   11ac4:	eb6b 0601 	sbc.w	r6, fp, r1

			if (remaining <= 0) {
   11ac8:	2e00      	cmp	r6, #0
   11aca:	bfbc      	itt	lt
   11acc:	2700      	movlt	r7, #0
   11ace:	463e      	movlt	r6, r7
	return pool->alloc->cb->alloc(buf, size, timeout);
   11ad0:	f04f 082c 	mov.w	r8, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   11ad4:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   11ad6:	4d25      	ldr	r5, [pc, #148]	; (11b6c <net_buf_alloc_len+0x11c>)
   11ad8:	463a      	mov	r2, r7
   11ada:	fb08 5303 	mla	r3, r8, r3, r5
   11ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11ae0:	4620      	mov	r0, r4
   11ae2:	681b      	ldr	r3, [r3, #0]
   11ae4:	a901      	add	r1, sp, #4
   11ae6:	f8d3 9000 	ldr.w	r9, [r3]
   11aea:	4633      	mov	r3, r6
   11aec:	47c8      	blx	r9
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   11aee:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   11af0:	2800      	cmp	r0, #0
   11af2:	d131      	bne.n	11b58 <net_buf_alloc_len+0x108>
	k_lifo_put(&pool->free, buf);
   11af4:	7aa0      	ldrb	r0, [r4, #10]
   11af6:	4621      	mov	r1, r4
   11af8:	fb00 5008 	mla	r0, r0, r8, r5
   11afc:	f009 f83e 	bl	1ab7c <k_queue_prepend>
}
   11b00:	e024      	b.n	11b4c <net_buf_alloc_len+0xfc>
		uninit_count = pool->uninit_count--;
   11b02:	8b68      	ldrh	r0, [r5, #26]
   11b04:	1e43      	subs	r3, r0, #1
   11b06:	836b      	strh	r3, [r5, #26]
   11b08:	f381 8811 	msr	BASEPRI, r1
   11b0c:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   11b10:	7f2b      	ldrb	r3, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   11b12:	8b2a      	ldrh	r2, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   11b14:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   11b16:	331b      	adds	r3, #27
   11b18:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   11b1c:	1a12      	subs	r2, r2, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   11b1e:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   11b22:	4b12      	ldr	r3, [pc, #72]	; (11b6c <net_buf_alloc_len+0x11c>)
   11b24:	4a12      	ldr	r2, [pc, #72]	; (11b70 <net_buf_alloc_len+0x120>)
   11b26:	1aeb      	subs	r3, r5, r3
   11b28:	109b      	asrs	r3, r3, #2
   11b2a:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   11b2c:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   11b2e:	7f2b      	ldrb	r3, [r5, #28]
   11b30:	72e3      	strb	r3, [r4, #11]
		goto success;
   11b32:	e7b7      	b.n	11aa4 <net_buf_alloc_len+0x54>
   11b34:	f381 8811 	msr	BASEPRI, r1
   11b38:	f3bf 8f6f 	isb	sy
   11b3c:	464a      	mov	r2, r9
   11b3e:	4643      	mov	r3, r8
   11b40:	4628      	mov	r0, r5
   11b42:	f003 fd2b 	bl	1559c <z_impl_k_queue_get>
	if (!buf) {
   11b46:	4604      	mov	r4, r0
   11b48:	2800      	cmp	r0, #0
   11b4a:	d1ab      	bne.n	11aa4 <net_buf_alloc_len+0x54>
		return NULL;
   11b4c:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   11b4e:	4620      	mov	r0, r4
   11b50:	b003      	add	sp, #12
   11b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   11b56:	6163      	str	r3, [r4, #20]
	buf->frags = NULL;
   11b58:	2300      	movs	r3, #0
	buf->ref   = 1U;
   11b5a:	2201      	movs	r2, #1
	buf->frags = NULL;
   11b5c:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   11b5e:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   11b60:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   11b62:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   11b64:	6963      	ldr	r3, [r4, #20]
   11b66:	8262      	strh	r2, [r4, #18]
   11b68:	60e3      	str	r3, [r4, #12]
	return buf;
   11b6a:	e7f0      	b.n	11b4e <net_buf_alloc_len+0xfe>
   11b6c:	200086b8 	.word	0x200086b8
   11b70:	ba2e8ba3 	.word	0xba2e8ba3

00011b74 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   11b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11b78:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   11b7a:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   11b7c:	272c      	movs	r7, #44	; 0x2c
   11b7e:	4d15      	ldr	r5, [pc, #84]	; (11bd4 <net_buf_unref+0x60>)
	while (buf) {
   11b80:	b90c      	cbnz	r4, 11b86 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   11b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   11b86:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   11b88:	f8d4 8004 	ldr.w	r8, [r4, #4]
		if (--buf->ref > 0) {
   11b8c:	3b01      	subs	r3, #1
   11b8e:	b2db      	uxtb	r3, r3
   11b90:	7223      	strb	r3, [r4, #8]
   11b92:	2b00      	cmp	r3, #0
   11b94:	d1f5      	bne.n	11b82 <net_buf_unref+0xe>
		if (buf->__buf) {
   11b96:	6961      	ldr	r1, [r4, #20]
   11b98:	b159      	cbz	r1, 11bb2 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   11b9a:	7a63      	ldrb	r3, [r4, #9]
   11b9c:	07db      	lsls	r3, r3, #31
   11b9e:	d407      	bmi.n	11bb0 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   11ba0:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   11ba2:	4620      	mov	r0, r4
   11ba4:	fb07 5303 	mla	r3, r7, r3, r5
   11ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11baa:	681b      	ldr	r3, [r3, #0]
   11bac:	689b      	ldr	r3, [r3, #8]
   11bae:	4798      	blx	r3
			buf->__buf = NULL;
   11bb0:	6166      	str	r6, [r4, #20]
		pool = net_buf_pool_get(buf->pool_id);
   11bb2:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   11bb4:	60e6      	str	r6, [r4, #12]
		if (pool->destroy) {
   11bb6:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   11bba:	6066      	str	r6, [r4, #4]
		if (pool->destroy) {
   11bbc:	6a1b      	ldr	r3, [r3, #32]
   11bbe:	b11b      	cbz	r3, 11bc8 <net_buf_unref+0x54>
			pool->destroy(buf);
   11bc0:	4620      	mov	r0, r4
   11bc2:	4798      	blx	r3
{
   11bc4:	4644      	mov	r4, r8
   11bc6:	e7db      	b.n	11b80 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   11bc8:	4621      	mov	r1, r4
   11bca:	fb00 5007 	mla	r0, r0, r7, r5
   11bce:	f008 ffd5 	bl	1ab7c <k_queue_prepend>
}
   11bd2:	e7f7      	b.n	11bc4 <net_buf_unref+0x50>
   11bd4:	200086b8 	.word	0x200086b8

00011bd8 <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
   11bd8:	2813      	cmp	r0, #19
   11bda:	d80e      	bhi.n	11bfa <adc_gain_invert+0x22>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
   11bdc:	4a08      	ldr	r2, [pc, #32]	; (11c00 <adc_gain_invert+0x28>)
   11bde:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
   11be2:	b153      	cbz	r3, 11bfa <adc_gain_invert+0x22>
   11be4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
   11be8:	7852      	ldrb	r2, [r2, #1]
   11bea:	b132      	cbz	r2, 11bfa <adc_gain_invert+0x22>
			*value = (gdp->mul * *value) / gdp->div;
   11bec:	6808      	ldr	r0, [r1, #0]
   11bee:	4343      	muls	r3, r0
   11bf0:	fb93 f3f2 	sdiv	r3, r3, r2
			rv = 0;
   11bf4:	2000      	movs	r0, #0
			*value = (gdp->mul * *value) / gdp->div;
   11bf6:	600b      	str	r3, [r1, #0]
			rv = 0;
   11bf8:	4770      	bx	lr
	int rv = -EINVAL;
   11bfa:	f06f 0015 	mvn.w	r0, #21
		}
	}

	return rv;
}
   11bfe:	4770      	bx	lr
   11c00:	0001de73 	.word	0x0001de73

00011c04 <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   11c04:	2201      	movs	r2, #1
   11c06:	4b05      	ldr	r3, [pc, #20]	; (11c1c <adc_context_start_sampling+0x18>)
   11c08:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   11c0c:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   11c10:	b109      	cbz	r1, 11c16 <adc_context_start_sampling+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11c12:	60da      	str	r2, [r3, #12]
}
   11c14:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11c16:	601a      	str	r2, [r3, #0]
   11c18:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   11c1a:	4770      	bx	lr
   11c1c:	4000e000 	.word	0x4000e000

00011c20 <adc_nrfx_channel_setup>:
{
   11c20:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   11c22:	7908      	ldrb	r0, [r1, #4]
{
   11c24:	b086      	sub	sp, #24
	uint8_t channel_id = channel_cfg->channel_id;
   11c26:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
   11c2a:	2c07      	cmp	r4, #7
   11c2c:	d823      	bhi.n	11c76 <adc_nrfx_channel_setup+0x56>
	switch (channel_cfg->gain) {
   11c2e:	780b      	ldrb	r3, [r1, #0]
   11c30:	2b0b      	cmp	r3, #11
   11c32:	d815      	bhi.n	11c60 <adc_nrfx_channel_setup+0x40>
   11c34:	e8df f003 	tbb	[pc, r3]
   11c38:	07070707 	.word	0x07070707
   11c3c:	14140614 	.word	0x14140614
   11c40:	1214100e 	.word	0x1214100e
		config.gain = NRF_SAADC_GAIN1_2;
   11c44:	2304      	movs	r3, #4
	switch (channel_cfg->reference) {
   11c46:	784a      	ldrb	r2, [r1, #1]
   11c48:	2a03      	cmp	r2, #3
   11c4a:	d018      	beq.n	11c7e <adc_nrfx_channel_setup+0x5e>
   11c4c:	2a04      	cmp	r2, #4
   11c4e:	d028      	beq.n	11ca2 <adc_nrfx_channel_setup+0x82>
		LOG_ERR("Selected ADC reference is not valid");
   11c50:	4b31      	ldr	r3, [pc, #196]	; (11d18 <adc_nrfx_channel_setup+0xf8>)
   11c52:	e006      	b.n	11c62 <adc_nrfx_channel_setup+0x42>
		config.gain = NRF_SAADC_GAIN1;
   11c54:	2305      	movs	r3, #5
		break;
   11c56:	e7f6      	b.n	11c46 <adc_nrfx_channel_setup+0x26>
		config.gain = NRF_SAADC_GAIN2;
   11c58:	2306      	movs	r3, #6
		break;
   11c5a:	e7f4      	b.n	11c46 <adc_nrfx_channel_setup+0x26>
		config.gain = NRF_SAADC_GAIN4;
   11c5c:	2307      	movs	r3, #7
		break;
   11c5e:	e7f2      	b.n	11c46 <adc_nrfx_channel_setup+0x26>
		LOG_ERR("Selected ADC gain is not valid");
   11c60:	4b2e      	ldr	r3, [pc, #184]	; (11d1c <adc_nrfx_channel_setup+0xfc>)
   11c62:	9305      	str	r3, [sp, #20]
   11c64:	2302      	movs	r3, #2
   11c66:	9304      	str	r3, [sp, #16]
   11c68:	2300      	movs	r3, #0
   11c6a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11c6e:	482c      	ldr	r0, [pc, #176]	; (11d20 <adc_nrfx_channel_setup+0x100>)
   11c70:	aa04      	add	r2, sp, #16
   11c72:	f7f8 fe43 	bl	a8fc <z_impl_z_log_msg_static_create>
		return -EINVAL;
   11c76:	f06f 0015 	mvn.w	r0, #21
}
   11c7a:	b006      	add	sp, #24
   11c7c:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->reference) {
   11c7e:	2501      	movs	r5, #1
	switch (channel_cfg->acquisition_time) {
   11c80:	f244 060a 	movw	r6, #16394	; 0x400a
   11c84:	884a      	ldrh	r2, [r1, #2]
   11c86:	42b2      	cmp	r2, r6
   11c88:	d03f      	beq.n	11d0a <adc_nrfx_channel_setup+0xea>
   11c8a:	d80c      	bhi.n	11ca6 <adc_nrfx_channel_setup+0x86>
   11c8c:	f244 0603 	movw	r6, #16387	; 0x4003
   11c90:	42b2      	cmp	r2, r6
   11c92:	d016      	beq.n	11cc2 <adc_nrfx_channel_setup+0xa2>
   11c94:	f244 0605 	movw	r6, #16389	; 0x4005
   11c98:	42b2      	cmp	r2, r6
   11c9a:	d034      	beq.n	11d06 <adc_nrfx_channel_setup+0xe6>
   11c9c:	b3aa      	cbz	r2, 11d0a <adc_nrfx_channel_setup+0xea>
		LOG_ERR("Selected ADC acquisition time is not valid");
   11c9e:	4b21      	ldr	r3, [pc, #132]	; (11d24 <adc_nrfx_channel_setup+0x104>)
   11ca0:	e7df      	b.n	11c62 <adc_nrfx_channel_setup+0x42>
	nrf_saadc_channel_config_t config = {
   11ca2:	2500      	movs	r5, #0
   11ca4:	e7ec      	b.n	11c80 <adc_nrfx_channel_setup+0x60>
	switch (channel_cfg->acquisition_time) {
   11ca6:	f244 0614 	movw	r6, #16404	; 0x4014
   11caa:	42b2      	cmp	r2, r6
   11cac:	d02f      	beq.n	11d0e <adc_nrfx_channel_setup+0xee>
   11cae:	f244 0628 	movw	r6, #16424	; 0x4028
   11cb2:	42b2      	cmp	r2, r6
   11cb4:	d02d      	beq.n	11d12 <adc_nrfx_channel_setup+0xf2>
   11cb6:	f244 060f 	movw	r6, #16399	; 0x400f
   11cba:	42b2      	cmp	r2, r6
   11cbc:	d1ef      	bne.n	11c9e <adc_nrfx_channel_setup+0x7e>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   11cbe:	2203      	movs	r2, #3
   11cc0:	e000      	b.n	11cc4 <adc_nrfx_channel_setup+0xa4>
	nrf_saadc_channel_config_t config = {
   11cc2:	2200      	movs	r2, #0
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   11cc4:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   11cc8:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   11cca:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    p_reg->CH[channel].PSELP = pselp;
   11cce:	2000      	movs	r0, #0
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   11cd0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   11cd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   11cd8:	0122      	lsls	r2, r4, #4
   11cda:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   11cde:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   11ce2:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   11ce6:	0123      	lsls	r3, r4, #4
   11ce8:	798a      	ldrb	r2, [r1, #6]
   11cea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11cee:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   11cf2:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   11cf6:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   11cfa:	4b0b      	ldr	r3, [pc, #44]	; (11d28 <adc_nrfx_channel_setup+0x108>)
   11cfc:	794a      	ldrb	r2, [r1, #5]
   11cfe:	4423      	add	r3, r4
   11d00:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	return 0;
   11d04:	e7b9      	b.n	11c7a <adc_nrfx_channel_setup+0x5a>
	switch (channel_cfg->acquisition_time) {
   11d06:	2201      	movs	r2, #1
   11d08:	e7dc      	b.n	11cc4 <adc_nrfx_channel_setup+0xa4>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   11d0a:	2202      	movs	r2, #2
   11d0c:	e7da      	b.n	11cc4 <adc_nrfx_channel_setup+0xa4>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   11d0e:	2204      	movs	r2, #4
   11d10:	e7d8      	b.n	11cc4 <adc_nrfx_channel_setup+0xa4>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   11d12:	2205      	movs	r2, #5
   11d14:	e7d6      	b.n	11cc4 <adc_nrfx_channel_setup+0xa4>
   11d16:	bf00      	nop
   11d18:	0001deba 	.word	0x0001deba
   11d1c:	0001de9b 	.word	0x0001de9b
   11d20:	0001b868 	.word	0x0001b868
   11d24:	0001dede 	.word	0x0001dede
   11d28:	20008160 	.word	0x20008160

00011d2c <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
   11d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11d30:	b088      	sub	sp, #32
   11d32:	460c      	mov	r4, r1
   11d34:	af02      	add	r7, sp, #8
	return z_impl_k_sem_take(sem, timeout);
   11d36:	f04f 33ff 	mov.w	r3, #4294967295
   11d3a:	f04f 32ff 	mov.w	r2, #4294967295
   11d3e:	4876      	ldr	r0, [pc, #472]	; (11f18 <adc_nrfx_read+0x1ec>)
   11d40:	f003 fc86 	bl	15650 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   11d44:	6866      	ldr	r6, [r4, #4]
	if (!selected_channels ||
   11d46:	1e73      	subs	r3, r6, #1
   11d48:	2bfe      	cmp	r3, #254	; 0xfe
   11d4a:	d90c      	bls.n	11d66 <adc_nrfx_read+0x3a>
		LOG_ERR("Invalid selection of channels");
   11d4c:	4b73      	ldr	r3, [pc, #460]	; (11f1c <adc_nrfx_read+0x1f0>)
		LOG_ERR(
   11d4e:	617b      	str	r3, [r7, #20]
   11d50:	2302      	movs	r3, #2
   11d52:	613b      	str	r3, [r7, #16]
   11d54:	2300      	movs	r3, #0
   11d56:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11d5a:	4871      	ldr	r0, [pc, #452]	; (11f20 <adc_nrfx_read+0x1f4>)
   11d5c:	f107 0210 	add.w	r2, r7, #16
   11d60:	f7f8 fdcc 	bl	a8fc <z_impl_z_log_msg_static_create>
	if (error) {
   11d64:	e01b      	b.n	11d9e <adc_nrfx_read+0x72>
   11d66:	2100      	movs	r1, #0
	active_channels = 0U;
   11d68:	460a      	mov	r2, r1
    p_reg->CH[channel].PSELP = pselp;
   11d6a:	4d6e      	ldr	r5, [pc, #440]	; (11f24 <adc_nrfx_read+0x1f8>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   11d6c:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 11f28 <adc_nrfx_read+0x1fc>
		if (selected_channels & BIT(channel_id)) {
   11d70:	fa26 f301 	lsr.w	r3, r6, r1
   11d74:	f013 0301 	ands.w	r3, r3, #1
   11d78:	d040      	beq.n	11dfc <adc_nrfx_read+0xd0>
			if (m_data.positive_inputs[channel_id] == 0U) {
   11d7a:	f81c 3001 	ldrb.w	r3, [ip, r1]
   11d7e:	b9c3      	cbnz	r3, 11db2 <adc_nrfx_read+0x86>
				LOG_ERR("Channel %u not configured",
   11d80:	466c      	mov	r4, sp
   11d82:	b088      	sub	sp, #32
   11d84:	aa02      	add	r2, sp, #8
   11d86:	4869      	ldr	r0, [pc, #420]	; (11f2c <adc_nrfx_read+0x200>)
   11d88:	e9c2 0105 	strd	r0, r1, [r2, #20]
   11d8c:	2103      	movs	r1, #3
   11d8e:	f842 1f10 	str.w	r1, [r2, #16]!
   11d92:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11d96:	4862      	ldr	r0, [pc, #392]	; (11f20 <adc_nrfx_read+0x1f4>)
   11d98:	f7f8 fdb0 	bl	a8fc <z_impl_z_log_msg_static_create>
   11d9c:	46a5      	mov	sp, r4
		return -EINVAL;
   11d9e:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
   11da2:	485d      	ldr	r0, [pc, #372]	; (11f18 <adc_nrfx_read+0x1ec>)
   11da4:	f003 fc2e 	bl	15604 <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
   11da8:	4620      	mov	r0, r4
   11daa:	3718      	adds	r7, #24
   11dac:	46bd      	mov	sp, r7
   11dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   11db2:	f894 e011 	ldrb.w	lr, [r4, #17]

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   11db6:	eb05 1801 	add.w	r8, r5, r1, lsl #4
   11dba:	f1be 0e00 	subs.w	lr, lr, #0
   11dbe:	bf18      	it	ne
   11dc0:	f04f 0e01 	movne.w	lr, #1
   11dc4:	f8d8 0518 	ldr.w	r0, [r8, #1304]	; 0x518
			++active_channels;
   11dc8:	3201      	adds	r2, #1
   11dca:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
   11dce:	ea40 600e 	orr.w	r0, r0, lr, lsl #24
   11dd2:	f8c8 0518 	str.w	r0, [r8, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   11dd6:	f101 0051 	add.w	r0, r1, #81	; 0x51
   11dda:	0100      	lsls	r0, r0, #4
   11ddc:	502b      	str	r3, [r5, r0]
   11dde:	b2d2      	uxtb	r2, r2
	} while (++channel_id < SAADC_CH_NUM);
   11de0:	3101      	adds	r1, #1
   11de2:	2908      	cmp	r1, #8
   11de4:	d1c4      	bne.n	11d70 <adc_nrfx_read+0x44>
	error = set_resolution(sequence);
   11de6:	7c23      	ldrb	r3, [r4, #16]
	switch (sequence->resolution) {
   11de8:	f1a3 0108 	sub.w	r1, r3, #8
   11dec:	2906      	cmp	r1, #6
   11dee:	d816      	bhi.n	11e1e <adc_nrfx_read+0xf2>
   11df0:	e8df f001 	tbb	[pc, r1]
   11df4:	15221520 	.word	0x15221520
   11df8:	1509      	.short	0x1509
   11dfa:	13          	.byte	0x13
   11dfb:	00          	.byte	0x00
   11dfc:	f101 0051 	add.w	r0, r1, #81	; 0x51
   11e00:	0100      	lsls	r0, r0, #4
   11e02:	502b      	str	r3, [r5, r0]
}
   11e04:	e7ec      	b.n	11de0 <adc_nrfx_read+0xb4>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   11e06:	2302      	movs	r3, #2
    p_reg->RESOLUTION = resolution;
   11e08:	4946      	ldr	r1, [pc, #280]	; (11f24 <adc_nrfx_read+0x1f8>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   11e0a:	2a01      	cmp	r2, #1
   11e0c:	f8c1 35f0 	str.w	r3, [r1, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   11e10:	7c63      	ldrb	r3, [r4, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   11e12:	d913      	bls.n	11e3c <adc_nrfx_read+0x110>
   11e14:	b1a3      	cbz	r3, 11e40 <adc_nrfx_read+0x114>
		LOG_ERR(
   11e16:	4b46      	ldr	r3, [pc, #280]	; (11f30 <adc_nrfx_read+0x204>)
   11e18:	e799      	b.n	11d4e <adc_nrfx_read+0x22>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   11e1a:	2303      	movs	r3, #3
		break;
   11e1c:	e7f4      	b.n	11e08 <adc_nrfx_read+0xdc>
		LOG_ERR("ADC resolution value %d is not valid",
   11e1e:	466c      	mov	r4, sp
   11e20:	b088      	sub	sp, #32
   11e22:	aa02      	add	r2, sp, #8
   11e24:	4943      	ldr	r1, [pc, #268]	; (11f34 <adc_nrfx_read+0x208>)
	switch (sequence->oversampling) {
   11e26:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Oversampling value %d is not valid",
   11e2a:	2303      	movs	r3, #3
   11e2c:	f842 3f10 	str.w	r3, [r2, #16]!
   11e30:	2300      	movs	r3, #0
   11e32:	e7ae      	b.n	11d92 <adc_nrfx_read+0x66>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   11e34:	2300      	movs	r3, #0
   11e36:	e7e7      	b.n	11e08 <adc_nrfx_read+0xdc>
	switch (sequence->resolution) {
   11e38:	2301      	movs	r3, #1
   11e3a:	e7e5      	b.n	11e08 <adc_nrfx_read+0xdc>
	switch (sequence->oversampling) {
   11e3c:	2b08      	cmp	r3, #8
   11e3e:	d81b      	bhi.n	11e78 <adc_nrfx_read+0x14c>
    p_reg->OVERSAMPLE = oversample;
   11e40:	f8c1 35f4 	str.w	r3, [r1, #1524]	; 0x5f4
	if (sequence->options) {
   11e44:	6821      	ldr	r1, [r4, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   11e46:	0053      	lsls	r3, r2, #1
	if (sequence->options) {
   11e48:	b9d9      	cbnz	r1, 11e82 <adc_nrfx_read+0x156>
	if (sequence->buffer_size < needed_buffer_size) {
   11e4a:	68e1      	ldr	r1, [r4, #12]
   11e4c:	4299      	cmp	r1, r3
   11e4e:	d21c      	bcs.n	11e8a <adc_nrfx_read+0x15e>
		LOG_ERR("Provided buffer is too small (%u/%u)",
   11e50:	466c      	mov	r4, sp
   11e52:	b088      	sub	sp, #32
   11e54:	aa02      	add	r2, sp, #8
   11e56:	61d3      	str	r3, [r2, #28]
   11e58:	2304      	movs	r3, #4
   11e5a:	4837      	ldr	r0, [pc, #220]	; (11f38 <adc_nrfx_read+0x20c>)
   11e5c:	e9c2 0105 	strd	r0, r1, [r2, #20]
   11e60:	f842 3f10 	str.w	r3, [r2, #16]!
   11e64:	2300      	movs	r3, #0
   11e66:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   11e6a:	482d      	ldr	r0, [pc, #180]	; (11f20 <adc_nrfx_read+0x1f4>)
   11e6c:	f7f8 fd46 	bl	a8fc <z_impl_z_log_msg_static_create>
   11e70:	46a5      	mov	sp, r4
		return -ENOMEM;
   11e72:	f06f 040b 	mvn.w	r4, #11
   11e76:	e794      	b.n	11da2 <adc_nrfx_read+0x76>
		LOG_ERR("Oversampling value %d is not valid",
   11e78:	466c      	mov	r4, sp
   11e7a:	b088      	sub	sp, #32
   11e7c:	aa02      	add	r2, sp, #8
   11e7e:	492f      	ldr	r1, [pc, #188]	; (11f3c <adc_nrfx_read+0x210>)
   11e80:	e7d1      	b.n	11e26 <adc_nrfx_read+0xfa>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   11e82:	8989      	ldrh	r1, [r1, #12]
   11e84:	fb01 3303 	mla	r3, r1, r3, r3
   11e88:	e7df      	b.n	11e4a <adc_nrfx_read+0x11e>
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   11e8a:	46a4      	mov	ip, r4
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   11e8c:	68a1      	ldr	r1, [r4, #8]
   11e8e:	4b25      	ldr	r3, [pc, #148]	; (11f24 <adc_nrfx_read+0x1f8>)
   11e90:	4d2b      	ldr	r5, [pc, #172]	; (11f40 <adc_nrfx_read+0x214>)
   11e92:	f8c3 162c 	str.w	r1, [r3, #1580]	; 0x62c
   11e96:	f105 0674 	add.w	r6, r5, #116	; 0x74
    p_reg->RESULT.MAXCNT = size;
   11e9a:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
   11e9e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   11ea2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   11ea4:	f8dc 3000 	ldr.w	r3, [ip]
   11ea8:	46ac      	mov	ip, r5
   11eaa:	6033      	str	r3, [r6, #0]
	ctx->status = 0;
   11eac:	2600      	movs	r6, #0
   11eae:	672e      	str	r6, [r5, #112]	; 0x70

	if (sequence->options) {
   11eb0:	6823      	ldr	r3, [r4, #0]
   11eb2:	b36b      	cbz	r3, 11f10 <adc_nrfx_read+0x1e4>
		ctx->options = *sequence->options;
   11eb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   11eb6:	f105 0488 	add.w	r4, r5, #136	; 0x88
   11eba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   11ebe:	676c      	str	r4, [r5, #116]	; 0x74
		ctx->sampling_index = 0U;
   11ec0:	f8a5 6098 	strh.w	r6, [r5, #152]	; 0x98

		if (ctx->options.interval_us != 0U) {
   11ec4:	b320      	cbz	r0, 11f10 <adc_nrfx_read+0x1e4>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11ec6:	e8dc 3fef 	ldaex	r3, [ip]
   11eca:	e8cc 6fe2 	stlex	r2, r6, [ip]
   11ece:	2a00      	cmp	r2, #0
   11ed0:	d1f9      	bne.n	11ec6 <adc_nrfx_read+0x19a>
   11ed2:	491c      	ldr	r1, [pc, #112]	; (11f44 <adc_nrfx_read+0x218>)
   11ed4:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   11ed8:	468c      	mov	ip, r1
   11eda:	4631      	mov	r1, r6
   11edc:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
   11ee0:	2300      	movs	r3, #0
   11ee2:	fbe0 c104 	umlal	ip, r1, r0, r4
   11ee6:	4a18      	ldr	r2, [pc, #96]	; (11f48 <adc_nrfx_read+0x21c>)
   11ee8:	4660      	mov	r0, ip
   11eea:	f7f6 f933 	bl	8154 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   11eee:	2200      	movs	r2, #0
   11ef0:	e9cd 0100 	strd	r0, r1, [sp]
   11ef4:	2300      	movs	r3, #0
   11ef6:	f105 0008 	add.w	r0, r5, #8
   11efa:	f004 faff 	bl	164fc <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   11efe:	f04f 32ff 	mov.w	r2, #4294967295
   11f02:	f04f 33ff 	mov.w	r3, #4294967295
   11f06:	4811      	ldr	r0, [pc, #68]	; (11f4c <adc_nrfx_read+0x220>)
   11f08:	f003 fba2 	bl	15650 <z_impl_k_sem_take>
	return ctx->status;
   11f0c:	6f2c      	ldr	r4, [r5, #112]	; 0x70
	return error;
   11f0e:	e748      	b.n	11da2 <adc_nrfx_read+0x76>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   11f10:	480b      	ldr	r0, [pc, #44]	; (11f40 <adc_nrfx_read+0x214>)
   11f12:	f7ff fe77 	bl	11c04 <adc_context_start_sampling>
   11f16:	e7f2      	b.n	11efe <adc_nrfx_read+0x1d2>
   11f18:	200081a0 	.word	0x200081a0
   11f1c:	0001df09 	.word	0x0001df09
   11f20:	0001b868 	.word	0x0001b868
   11f24:	4000e000 	.word	0x4000e000
   11f28:	20008200 	.word	0x20008200
   11f2c:	0001df27 	.word	0x0001df27
   11f30:	0001df66 	.word	0x0001df66
   11f34:	0001df41 	.word	0x0001df41
   11f38:	0001dfbb 	.word	0x0001dfbb
   11f3c:	0001df98 	.word	0x0001df98
   11f40:	20008160 	.word	0x20008160
   11f44:	000f423f 	.word	0x000f423f
   11f48:	000f4240 	.word	0x000f4240
   11f4c:	200081b8 	.word	0x200081b8

00011f50 <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   11f50:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11f52:	2400      	movs	r4, #0
   11f54:	4b0d      	ldr	r3, [pc, #52]	; (11f8c <init_saadc+0x3c>)
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   11f56:	200e      	movs	r0, #14
   11f58:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
   11f5c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   11f60:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   11f64:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   11f68:	2212      	movs	r2, #18
   11f6a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   11f6e:	f7f9 fae9 	bl	b544 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   11f72:	4622      	mov	r2, r4
   11f74:	2101      	movs	r1, #1
   11f76:	200e      	movs	r0, #14
   11f78:	f7f9 fb14 	bl	b5a4 <z_arm_irq_priority_set>
   11f7c:	4804      	ldr	r0, [pc, #16]	; (11f90 <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   11f7e:	6c83      	ldr	r3, [r0, #72]	; 0x48
   11f80:	b913      	cbnz	r3, 11f88 <init_saadc+0x38>
	z_impl_k_sem_give(sem);
   11f82:	3040      	adds	r0, #64	; 0x40
   11f84:	f003 fb3e 	bl	15604 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   11f88:	2000      	movs	r0, #0
   11f8a:	bd10      	pop	{r4, pc}
   11f8c:	4000e000 	.word	0x4000e000
   11f90:	20008160 	.word	0x20008160

00011f94 <saadc_irq_handler>:
{
   11f94:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11f96:	4b2d      	ldr	r3, [pc, #180]	; (1204c <saadc_irq_handler+0xb8>)
   11f98:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   11f9c:	2a00      	cmp	r2, #0
   11f9e:	d048      	beq.n	12032 <saadc_irq_handler+0x9e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11fa0:	2200      	movs	r2, #0
   11fa2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   11fa6:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11faa:	2101      	movs	r1, #1
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   11fac:	4c28      	ldr	r4, [pc, #160]	; (12050 <saadc_irq_handler+0xbc>)
   11fae:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   11fb0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   11fb4:	6f63      	ldr	r3, [r4, #116]	; 0x74
   11fb6:	4625      	mov	r5, r4
   11fb8:	b3b3      	cbz	r3, 12028 <saadc_irq_handler+0x94>
		adc_sequence_callback callback = ctx->options.callback;
   11fba:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
   11fbe:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
		if (callback) {
   11fc2:	b133      	cbz	r3, 11fd2 <saadc_irq_handler+0x3e>
			action = callback(dev,
   11fc4:	f104 0174 	add.w	r1, r4, #116	; 0x74
   11fc8:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   11fca:	2801      	cmp	r0, #1
   11fcc:	d014      	beq.n	11ff8 <saadc_irq_handler+0x64>
   11fce:	2802      	cmp	r0, #2
   11fd0:	d024      	beq.n	1201c <saadc_irq_handler+0x88>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   11fd2:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
   11fd6:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   11fda:	429a      	cmp	r2, r3
   11fdc:	d91e      	bls.n	1201c <saadc_irq_handler+0x88>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   11fde:	3301      	adds	r3, #1
   11fe0:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   11fe4:	4b19      	ldr	r3, [pc, #100]	; (1204c <saadc_irq_handler+0xb8>)
   11fe6:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   11fea:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   11fee:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   11ff0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   11ff4:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   11ff8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   11ffc:	b923      	cbnz	r3, 12008 <saadc_irq_handler+0x74>
}
   11ffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				adc_context_start_sampling(ctx);
   12002:	4813      	ldr	r0, [pc, #76]	; (12050 <saadc_irq_handler+0xbc>)
   12004:	f7ff bdfe 	b.w	11c04 <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   12008:	e8d5 3fef 	ldaex	r3, [r5]
   1200c:	1e5a      	subs	r2, r3, #1
   1200e:	e8c5 2fe1 	stlex	r1, r2, [r5]
   12012:	2900      	cmp	r1, #0
   12014:	d1f8      	bne.n	12008 <saadc_irq_handler+0x74>
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   12016:	2b01      	cmp	r3, #1
   12018:	dcf1      	bgt.n	11ffe <saadc_irq_handler+0x6a>
   1201a:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   1201c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   12020:	b113      	cbz	r3, 12028 <saadc_irq_handler+0x94>
	z_impl_k_timer_stop(timer);
   12022:	480c      	ldr	r0, [pc, #48]	; (12054 <saadc_irq_handler+0xc0>)
   12024:	f009 f84f 	bl	1b0c6 <z_impl_k_timer_stop>
   12028:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
   1202c:	480a      	ldr	r0, [pc, #40]	; (12058 <saadc_irq_handler+0xc4>)
   1202e:	f003 bae9 	b.w	15604 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12032:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   12036:	2900      	cmp	r1, #0
   12038:	d0ef      	beq.n	1201a <saadc_irq_handler+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1203a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1203e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12042:	2201      	movs	r2, #1
   12044:	609a      	str	r2, [r3, #8]
   12046:	601a      	str	r2, [r3, #0]
   12048:	605a      	str	r2, [r3, #4]
}
   1204a:	e7e6      	b.n	1201a <saadc_irq_handler+0x86>
   1204c:	4000e000 	.word	0x4000e000
   12050:	20008160 	.word	0x20008160
   12054:	20008168 	.word	0x20008168
   12058:	200081b8 	.word	0x200081b8

0001205c <bt_rpmsg_send>:
		LOG_HEXDUMP_DBG(buf->data, buf->len, "RX buf payload:");
	}
}

static int bt_rpmsg_send(struct net_buf *buf)
{
   1205c:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1205e:	7e01      	ldrb	r1, [r0, #24]
   12060:	4604      	mov	r4, r0
	int err;
	uint8_t pkt_indicator;

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   12062:	2902      	cmp	r1, #2
{
   12064:	af00      	add	r7, sp, #0
	switch (bt_buf_get_type(buf)) {
   12066:	d018      	beq.n	1209a <bt_rpmsg_send+0x3e>
   12068:	2904      	cmp	r1, #4
   1206a:	d015      	beq.n	12098 <bt_rpmsg_send+0x3c>
   1206c:	b339      	cbz	r1, 120be <bt_rpmsg_send+0x62>
		break;
	case BT_BUF_ISO_OUT:
		pkt_indicator = RPMSG_ISO;
		break;
	default:
		LOG_ERR("Unknown type %u", bt_buf_get_type(buf));
   1206e:	466d      	mov	r5, sp
   12070:	b088      	sub	sp, #32
   12072:	466a      	mov	r2, sp
   12074:	4b13      	ldr	r3, [pc, #76]	; (120c4 <bt_rpmsg_send+0x68>)
	switch (bt_buf_get_type(buf)) {
   12076:	e9c2 3105 	strd	r3, r1, [r2, #20]
	net_buf_push_u8(buf, pkt_indicator);

	LOG_HEXDUMP_DBG(buf->data, buf->len, "Final HCI buffer:");
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
	if (err < 0) {
		LOG_ERR("Failed to send (err %d)", err);
   1207a:	2303      	movs	r3, #3
   1207c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12080:	4811      	ldr	r0, [pc, #68]	; (120c8 <bt_rpmsg_send+0x6c>)
   12082:	f842 3f10 	str.w	r3, [r2, #16]!
   12086:	f007 fc23 	bl	198d0 <z_log_msg_static_create.constprop.0>
   1208a:	46ad      	mov	sp, r5
	}

done:
	net_buf_unref(buf);
   1208c:	4620      	mov	r0, r4
   1208e:	f7ff fd71 	bl	11b74 <net_buf_unref>
	return 0;
}
   12092:	2000      	movs	r0, #0
   12094:	46bd      	mov	sp, r7
   12096:	bdb0      	pop	{r4, r5, r7, pc}
		pkt_indicator = RPMSG_ISO;
   12098:	2105      	movs	r1, #5
	net_buf_simple_push_u8(&buf->b, val);
   1209a:	f104 000c 	add.w	r0, r4, #12
   1209e:	f007 fbd7 	bl	19850 <net_buf_simple_push_u8>
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
   120a2:	8a22      	ldrh	r2, [r4, #16]
   120a4:	68e1      	ldr	r1, [r4, #12]
   120a6:	4809      	ldr	r0, [pc, #36]	; (120cc <bt_rpmsg_send+0x70>)
   120a8:	f7f7 fe22 	bl	9cf0 <ipc_service_send>
	if (err < 0) {
   120ac:	2800      	cmp	r0, #0
   120ae:	daed      	bge.n	1208c <bt_rpmsg_send+0x30>
		LOG_ERR("Failed to send (err %d)", err);
   120b0:	466d      	mov	r5, sp
   120b2:	b088      	sub	sp, #32
   120b4:	466a      	mov	r2, sp
   120b6:	4b06      	ldr	r3, [pc, #24]	; (120d0 <bt_rpmsg_send+0x74>)
   120b8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   120bc:	e7dd      	b.n	1207a <bt_rpmsg_send+0x1e>
	switch (bt_buf_get_type(buf)) {
   120be:	2101      	movs	r1, #1
   120c0:	e7eb      	b.n	1209a <bt_rpmsg_send+0x3e>
   120c2:	bf00      	nop
   120c4:	0001dff8 	.word	0x0001dff8
   120c8:	0001b8a0 	.word	0x0001b8a0
   120cc:	200099b4 	.word	0x200099b4
   120d0:	0001e008 	.word	0x0001e008

000120d4 <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(void)
{
   120d4:	b5b0      	push	{r4, r5, r7, lr}

	int err;

	err = bt_hci_driver_register(&drv);
   120d6:	480c      	ldr	r0, [pc, #48]	; (12108 <bt_rpmsg_init+0x34>)
{
   120d8:	af00      	add	r7, sp, #0
	err = bt_hci_driver_register(&drv);
   120da:	f7fb fb79 	bl	d7d0 <bt_hci_driver_register>
	if (err < 0) {
   120de:	1e04      	subs	r4, r0, #0
   120e0:	da0e      	bge.n	12100 <bt_rpmsg_init+0x2c>
		LOG_ERR("Failed to register BT HIC driver (err %d)", err);
   120e2:	466d      	mov	r5, sp
   120e4:	b088      	sub	sp, #32
   120e6:	466a      	mov	r2, sp
   120e8:	4b08      	ldr	r3, [pc, #32]	; (1210c <bt_rpmsg_init+0x38>)
   120ea:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   120ee:	e9c2 3405 	strd	r3, r4, [r2, #20]
   120f2:	2303      	movs	r3, #3
   120f4:	4806      	ldr	r0, [pc, #24]	; (12110 <bt_rpmsg_init+0x3c>)
   120f6:	f842 3f10 	str.w	r3, [r2, #16]!
   120fa:	f007 fbe9 	bl	198d0 <z_log_msg_static_create.constprop.0>
   120fe:	46ad      	mov	sp, r5
	}

	return err;
}
   12100:	4620      	mov	r0, r4
   12102:	46bd      	mov	sp, r7
   12104:	bdb0      	pop	{r4, r5, r7, pc}
   12106:	bf00      	nop
   12108:	0001c05c 	.word	0x0001c05c
   1210c:	0001e020 	.word	0x0001e020
   12110:	0001b8a0 	.word	0x0001b8a0

00012114 <hci_ept_bound>:
   12114:	4801      	ldr	r0, [pc, #4]	; (1211c <hci_ept_bound+0x8>)
   12116:	f003 ba75 	b.w	15604 <z_impl_k_sem_give>
   1211a:	bf00      	nop
   1211c:	20008658 	.word	0x20008658

00012120 <bt_rpmsg_open>:
{
   12120:	b5b0      	push	{r4, r5, r7, lr}
	err = ipc_service_open_instance(hci_ipc_instance);
   12122:	481a      	ldr	r0, [pc, #104]	; (1218c <bt_rpmsg_open+0x6c>)
{
   12124:	af00      	add	r7, sp, #0
	err = ipc_service_open_instance(hci_ipc_instance);
   12126:	f7f7 fd83 	bl	9c30 <ipc_service_open_instance>
	if (err && (err != -EALREADY)) {
   1212a:	4604      	mov	r4, r0
   1212c:	b1a0      	cbz	r0, 12158 <bt_rpmsg_open+0x38>
   1212e:	f110 0f78 	cmn.w	r0, #120	; 0x78
   12132:	d011      	beq.n	12158 <bt_rpmsg_open+0x38>
		LOG_ERR("IPC service instance initialization failed: %d\n", err);
   12134:	466d      	mov	r5, sp
   12136:	b088      	sub	sp, #32
   12138:	466a      	mov	r2, sp
   1213a:	4b15      	ldr	r3, [pc, #84]	; (12190 <bt_rpmsg_open+0x70>)
		LOG_ERR("Endpoint binding failed with %d", err);
   1213c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   12140:	2303      	movs	r3, #3
   12142:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12146:	4813      	ldr	r0, [pc, #76]	; (12194 <bt_rpmsg_open+0x74>)
   12148:	f842 3f10 	str.w	r3, [r2, #16]!
   1214c:	f007 fbc0 	bl	198d0 <z_log_msg_static_create.constprop.0>
   12150:	46ad      	mov	sp, r5
}
   12152:	4620      	mov	r0, r4
   12154:	46bd      	mov	sp, r7
   12156:	bdb0      	pop	{r4, r5, r7, pc}
	err = ipc_service_register_endpoint(hci_ipc_instance, &hci_ept, &hci_ept_cfg);
   12158:	4a0f      	ldr	r2, [pc, #60]	; (12198 <bt_rpmsg_open+0x78>)
   1215a:	4910      	ldr	r1, [pc, #64]	; (1219c <bt_rpmsg_open+0x7c>)
   1215c:	480b      	ldr	r0, [pc, #44]	; (1218c <bt_rpmsg_open+0x6c>)
   1215e:	f7f7 fd95 	bl	9c8c <ipc_service_register_endpoint>
	if (err) {
   12162:	4604      	mov	r4, r0
   12164:	b120      	cbz	r0, 12170 <bt_rpmsg_open+0x50>
		LOG_ERR("Registering endpoint failed with %d", err);
   12166:	466d      	mov	r5, sp
   12168:	b088      	sub	sp, #32
   1216a:	466a      	mov	r2, sp
   1216c:	4b0c      	ldr	r3, [pc, #48]	; (121a0 <bt_rpmsg_open+0x80>)
   1216e:	e7e5      	b.n	1213c <bt_rpmsg_open+0x1c>
	return z_impl_k_sem_take(sem, timeout);
   12170:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   12174:	2300      	movs	r3, #0
   12176:	480b      	ldr	r0, [pc, #44]	; (121a4 <bt_rpmsg_open+0x84>)
   12178:	f003 fa6a 	bl	15650 <z_impl_k_sem_take>
	if (err) {
   1217c:	4604      	mov	r4, r0
   1217e:	2800      	cmp	r0, #0
   12180:	d0e7      	beq.n	12152 <bt_rpmsg_open+0x32>
		LOG_ERR("Endpoint binding failed with %d", err);
   12182:	466d      	mov	r5, sp
   12184:	b088      	sub	sp, #32
   12186:	466a      	mov	r2, sp
   12188:	4b07      	ldr	r3, [pc, #28]	; (121a8 <bt_rpmsg_open+0x88>)
   1218a:	e7d7      	b.n	1213c <bt_rpmsg_open+0x1c>
   1218c:	0001b534 	.word	0x0001b534
   12190:	0001e04a 	.word	0x0001e04a
   12194:	0001b8a0 	.word	0x0001b8a0
   12198:	2000838c 	.word	0x2000838c
   1219c:	200099b4 	.word	0x200099b4
   121a0:	0001e07a 	.word	0x0001e07a
   121a4:	20008658 	.word	0x20008658
   121a8:	0001e09e 	.word	0x0001e09e

000121ac <hci_ept_recv>:
{
   121ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121b0:	b089      	sub	sp, #36	; 0x24
	pkt_indicator = *data++;
   121b2:	4680      	mov	r8, r0
   121b4:	f818 9b01 	ldrb.w	r9, [r8], #1
{
   121b8:	4606      	mov	r6, r0
	switch (pkt_indicator) {
   121ba:	f1b9 0f04 	cmp.w	r9, #4
{
   121be:	460c      	mov	r4, r1
   121c0:	af00      	add	r7, sp, #0
	remaining -= sizeof(pkt_indicator);
   121c2:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
   121c6:	d00d      	beq.n	121e4 <hci_ept_recv+0x38>
   121c8:	f1b9 0f05 	cmp.w	r9, #5
   121cc:	f000 80a3 	beq.w	12316 <hci_ept_recv+0x16a>
   121d0:	f1b9 0f02 	cmp.w	r9, #2
   121d4:	f040 80cc 	bne.w	12370 <hci_ept_recv+0x1c4>
	if (remaining < sizeof(hdr)) {
   121d8:	2b03      	cmp	r3, #3
   121da:	d875      	bhi.n	122c8 <hci_ept_recv+0x11c>
		LOG_ERR("Not enough data for ACL header");
   121dc:	4b6c      	ldr	r3, [pc, #432]	; (12390 <hci_ept_recv+0x1e4>)
		LOG_ERR("No available ACL buffers!");
   121de:	e9c7 9306 	strd	r9, r3, [r7, #24]
   121e2:	e005      	b.n	121f0 <hci_ept_recv+0x44>
	if (remaining < sizeof(hdr)) {
   121e4:	2b01      	cmp	r3, #1
   121e6:	d80e      	bhi.n	12206 <hci_ept_recv+0x5a>
		LOG_ERR("Not enough data for event header");
   121e8:	4b6a      	ldr	r3, [pc, #424]	; (12394 <hci_ept_recv+0x1e8>)
		LOG_ERR("Event payload length is not correct");
   121ea:	61fb      	str	r3, [r7, #28]
   121ec:	2302      	movs	r3, #2
   121ee:	61bb      	str	r3, [r7, #24]
   121f0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   121f4:	4868      	ldr	r0, [pc, #416]	; (12398 <hci_ept_recv+0x1ec>)
   121f6:	f107 0218 	add.w	r2, r7, #24
   121fa:	f007 fb69 	bl	198d0 <z_log_msg_static_create.constprop.0>
}
   121fe:	3724      	adds	r7, #36	; 0x24
   12200:	46bd      	mov	sp, r7
   12202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (evt_type) {
   12206:	7843      	ldrb	r3, [r0, #1]
   12208:	2b3e      	cmp	r3, #62	; 0x3e
   1220a:	d13e      	bne.n	1228a <hci_ept_recv+0xde>
		switch (subevt_type) {
   1220c:	f890 a003 	ldrb.w	sl, [r0, #3]
   12210:	f1aa 0302 	sub.w	r3, sl, #2
   12214:	f1d3 0a00 	rsbs	sl, r3, #0
   12218:	eb4a 0a03 	adc.w	sl, sl, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
   1221c:	2202      	movs	r2, #2
   1221e:	4641      	mov	r1, r8
   12220:	1d38      	adds	r0, r7, #4
   12222:	f005 ffc4 	bl	181ae <memcpy>
	if (remaining != hdr.len) {
   12226:	797b      	ldrb	r3, [r7, #5]
	remaining -= sizeof(hdr);
   12228:	3c03      	subs	r4, #3
	if (remaining != hdr.len) {
   1222a:	429c      	cmp	r4, r3
   1222c:	d133      	bne.n	12296 <hci_ept_recv+0xea>
   1222e:	f1ba 0f00 	cmp.w	sl, #0
   12232:	d02d      	beq.n	12290 <hci_ept_recv+0xe4>
   12234:	f04f 0800 	mov.w	r8, #0
   12238:	f04f 0900 	mov.w	r9, #0
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   1223c:	f04f 0b02 	mov.w	fp, #2
		buf = bt_buf_get_evt(hdr.evt, discardable, discardable ? K_NO_WAIT : K_SECONDS(10));
   12240:	4642      	mov	r2, r8
   12242:	464b      	mov	r3, r9
   12244:	4651      	mov	r1, sl
   12246:	7938      	ldrb	r0, [r7, #4]
   12248:	f7fa f904 	bl	c454 <bt_buf_get_evt>
		if (!buf) {
   1224c:	4605      	mov	r5, r0
   1224e:	b320      	cbz	r0, 1229a <hci_ept_recv+0xee>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   12250:	f100 080c 	add.w	r8, r0, #12
   12254:	2202      	movs	r2, #2
   12256:	1d39      	adds	r1, r7, #4
   12258:	4640      	mov	r0, r8
   1225a:	f007 fae0 	bl	1981e <net_buf_simple_add_mem>
	return net_buf_simple_tailroom(&buf->b);
   1225e:	4640      	mov	r0, r8
   12260:	f007 fb1b 	bl	1989a <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   12264:	4284      	cmp	r4, r0
   12266:	d926      	bls.n	122b6 <hci_ept_recv+0x10a>
		LOG_ERR("Not enough space in buffer %zu/%zu", remaining, buf_tailroom);
   12268:	466e      	mov	r6, sp
   1226a:	b088      	sub	sp, #32
   1226c:	466a      	mov	r2, sp
   1226e:	4b4b      	ldr	r3, [pc, #300]	; (1239c <hci_ept_recv+0x1f0>)
   12270:	61d0      	str	r0, [r2, #28]
   12272:	e9c2 3405 	strd	r3, r4, [r2, #20]
   12276:	2304      	movs	r3, #4
   12278:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1227c:	4846      	ldr	r0, [pc, #280]	; (12398 <hci_ept_recv+0x1ec>)
   1227e:	f842 3f10 	str.w	r3, [r2, #16]!
   12282:	f007 fb25 	bl	198d0 <z_log_msg_static_create.constprop.0>
   12286:	46b5      	mov	sp, r6
   12288:	e03f      	b.n	1230a <hci_ept_recv+0x15e>
			return false;
   1228a:	f04f 0a00 	mov.w	sl, #0
   1228e:	e7c5      	b.n	1221c <hci_ept_recv+0x70>
   12290:	f44f 28a0 	mov.w	r8, #327680	; 0x50000
   12294:	e7d0      	b.n	12238 <hci_ept_recv+0x8c>
		LOG_ERR("Event payload length is not correct");
   12296:	4b42      	ldr	r3, [pc, #264]	; (123a0 <hci_ept_recv+0x1f4>)
   12298:	e7a7      	b.n	121ea <hci_ept_recv+0x3e>
			if (discardable) {
   1229a:	f1ba 0f00 	cmp.w	sl, #0
   1229e:	d1ae      	bne.n	121fe <hci_ept_recv+0x52>
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   122a0:	4b40      	ldr	r3, [pc, #256]	; (123a4 <hci_ept_recv+0x1f8>)
   122a2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   122a6:	e9c7 b306 	strd	fp, r3, [r7, #24]
   122aa:	483b      	ldr	r0, [pc, #236]	; (12398 <hci_ept_recv+0x1ec>)
   122ac:	f107 0218 	add.w	r2, r7, #24
   122b0:	f007 fb0e 	bl	198d0 <z_log_msg_static_create.constprop.0>
	} while (!buf);
   122b4:	e7c4      	b.n	12240 <hci_ept_recv+0x94>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   122b6:	4622      	mov	r2, r4
   122b8:	1cf1      	adds	r1, r6, #3
   122ba:	4640      	mov	r0, r8
   122bc:	f007 faaf 	bl	1981e <net_buf_simple_add_mem>
		bt_recv(buf);
   122c0:	4628      	mov	r0, r5
   122c2:	f7fb fa51 	bl	d768 <bt_recv>
}
   122c6:	e79a      	b.n	121fe <hci_ept_recv+0x52>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
   122c8:	2200      	movs	r2, #0
   122ca:	2300      	movs	r3, #0
   122cc:	2003      	movs	r0, #3
   122ce:	f7fa f88f 	bl	c3f0 <bt_buf_get_rx>
	if (buf) {
   122d2:	4605      	mov	r5, r0
   122d4:	b1e8      	cbz	r0, 12312 <hci_ept_recv+0x166>
		memcpy((void *)&hdr, data, sizeof(hdr));
   122d6:	2204      	movs	r2, #4
   122d8:	4641      	mov	r1, r8
   122da:	18b8      	adds	r0, r7, r2
   122dc:	f005 ff67 	bl	181ae <memcpy>
   122e0:	2204      	movs	r2, #4
   122e2:	f105 080c 	add.w	r8, r5, #12
   122e6:	4640      	mov	r0, r8
   122e8:	18b9      	adds	r1, r7, r2
   122ea:	f007 fa98 	bl	1981e <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   122ee:	88fb      	ldrh	r3, [r7, #6]
		remaining -= sizeof(hdr);
   122f0:	3c05      	subs	r4, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   122f2:	429c      	cmp	r4, r3
   122f4:	d033      	beq.n	1235e <hci_ept_recv+0x1b2>
		LOG_ERR("ACL payload length is not correct");
   122f6:	4b2c      	ldr	r3, [pc, #176]	; (123a8 <hci_ept_recv+0x1fc>)
   122f8:	e9c7 9306 	strd	r9, r3, [r7, #24]
		LOG_ERR("ISO payload length is not correct");
   122fc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12300:	4825      	ldr	r0, [pc, #148]	; (12398 <hci_ept_recv+0x1ec>)
   12302:	f107 0218 	add.w	r2, r7, #24
   12306:	f007 fae3 	bl	198d0 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   1230a:	4628      	mov	r0, r5
   1230c:	f7ff fc32 	bl	11b74 <net_buf_unref>
	if (buf) {
   12310:	e775      	b.n	121fe <hci_ept_recv+0x52>
		LOG_ERR("No available ACL buffers!");
   12312:	4b26      	ldr	r3, [pc, #152]	; (123ac <hci_ept_recv+0x200>)
   12314:	e763      	b.n	121de <hci_ept_recv+0x32>
	if (remaining < sizeof(hdr)) {
   12316:	2b03      	cmp	r3, #3
   12318:	d801      	bhi.n	1231e <hci_ept_recv+0x172>
		LOG_ERR("Not enough data for ISO header");
   1231a:	4b25      	ldr	r3, [pc, #148]	; (123b0 <hci_ept_recv+0x204>)
   1231c:	e765      	b.n	121ea <hci_ept_recv+0x3e>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
   1231e:	2200      	movs	r2, #0
   12320:	2300      	movs	r3, #0
   12322:	4648      	mov	r0, r9
   12324:	f7fa f864 	bl	c3f0 <bt_buf_get_rx>
	if (buf) {
   12328:	4605      	mov	r5, r0
   1232a:	b1b0      	cbz	r0, 1235a <hci_ept_recv+0x1ae>
		memcpy((void *)&hdr, data, sizeof(hdr));
   1232c:	2204      	movs	r2, #4
   1232e:	4641      	mov	r1, r8
   12330:	18b8      	adds	r0, r7, r2
   12332:	f005 ff3c 	bl	181ae <memcpy>
   12336:	2204      	movs	r2, #4
   12338:	f105 080c 	add.w	r8, r5, #12
   1233c:	4640      	mov	r0, r8
   1233e:	18b9      	adds	r1, r7, r2
   12340:	f007 fa6d 	bl	1981e <net_buf_simple_add_mem>
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   12344:	88fb      	ldrh	r3, [r7, #6]
		remaining -= sizeof(hdr);
   12346:	3c05      	subs	r4, #5
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   12348:	f3c3 030d 	ubfx	r3, r3, #0, #14
   1234c:	429c      	cmp	r4, r3
   1234e:	d006      	beq.n	1235e <hci_ept_recv+0x1b2>
		LOG_ERR("ISO payload length is not correct");
   12350:	4b18      	ldr	r3, [pc, #96]	; (123b4 <hci_ept_recv+0x208>)
   12352:	61fb      	str	r3, [r7, #28]
   12354:	2302      	movs	r3, #2
   12356:	61bb      	str	r3, [r7, #24]
   12358:	e7d0      	b.n	122fc <hci_ept_recv+0x150>
		LOG_ERR("No available ISO buffers!");
   1235a:	4b17      	ldr	r3, [pc, #92]	; (123b8 <hci_ept_recv+0x20c>)
   1235c:	e745      	b.n	121ea <hci_ept_recv+0x3e>
	return net_buf_simple_tailroom(&buf->b);
   1235e:	4640      	mov	r0, r8
   12360:	f007 fa9b 	bl	1989a <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   12364:	4284      	cmp	r4, r0
   12366:	f63f af7f 	bhi.w	12268 <hci_ept_recv+0xbc>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1236a:	4622      	mov	r2, r4
   1236c:	1d71      	adds	r1, r6, #5
   1236e:	e7a4      	b.n	122ba <hci_ept_recv+0x10e>
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   12370:	466c      	mov	r4, sp
   12372:	b088      	sub	sp, #32
   12374:	466a      	mov	r2, sp
   12376:	4b11      	ldr	r3, [pc, #68]	; (123bc <hci_ept_recv+0x210>)
   12378:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (pkt_indicator) {
   1237c:	e9c2 3905 	strd	r3, r9, [r2, #20]
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   12380:	2303      	movs	r3, #3
   12382:	4805      	ldr	r0, [pc, #20]	; (12398 <hci_ept_recv+0x1ec>)
   12384:	f842 3f10 	str.w	r3, [r2, #16]!
   12388:	f007 faa2 	bl	198d0 <z_log_msg_static_create.constprop.0>
   1238c:	46a5      	mov	sp, r4
   1238e:	e736      	b.n	121fe <hci_ept_recv+0x52>
   12390:	0001e15b 	.word	0x0001e15b
   12394:	0001e0be 	.word	0x0001e0be
   12398:	0001b8a0 	.word	0x0001b8a0
   1239c:	0001e138 	.word	0x0001e138
   123a0:	0001e0df 	.word	0x0001e0df
   123a4:	0001e103 	.word	0x0001e103
   123a8:	0001e194 	.word	0x0001e194
   123ac:	0001e17a 	.word	0x0001e17a
   123b0:	0001e1b6 	.word	0x0001e1b6
   123b4:	0001e1ef 	.word	0x0001e1ef
   123b8:	0001e1d5 	.word	0x0001e1d5
   123bc:	0001e211 	.word	0x0001e211

000123c0 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   123c0:	4b08      	ldr	r3, [pc, #32]	; (123e4 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   123c2:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   123c4:	1ac3      	subs	r3, r0, r3
{
   123c6:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   123c8:	4907      	ldr	r1, [pc, #28]	; (123e8 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   123ca:	109b      	asrs	r3, r3, #2
{
   123cc:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   123ce:	4359      	muls	r1, r3
   123d0:	2240      	movs	r2, #64	; 0x40
   123d2:	4806      	ldr	r0, [pc, #24]	; (123ec <onoff_stop+0x2c>)
   123d4:	f007 fa9b 	bl	1990e <stop>
	notify(mgr, res);
   123d8:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   123da:	4601      	mov	r1, r0
	notify(mgr, res);
   123dc:	4620      	mov	r0, r4
}
   123de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   123e2:	4718      	bx	r3
   123e4:	200099d0 	.word	0x200099d0
   123e8:	b6db6db7 	.word	0xb6db6db7
   123ec:	0001b4a4 	.word	0x0001b4a4

000123f0 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   123f0:	2340      	movs	r3, #64	; 0x40
{
   123f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   123f4:	4c0b      	ldr	r4, [pc, #44]	; (12424 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   123f6:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   123f8:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   123fa:	460b      	mov	r3, r1
{
   123fc:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   123fe:	490a      	ldr	r1, [pc, #40]	; (12428 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
   12400:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   12402:	4361      	muls	r1, r4
{
   12404:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   12406:	4a09      	ldr	r2, [pc, #36]	; (1242c <onoff_start+0x3c>)
   12408:	4809      	ldr	r0, [pc, #36]	; (12430 <onoff_start+0x40>)
   1240a:	f007 faac 	bl	19966 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1240e:	1e01      	subs	r1, r0, #0
   12410:	da05      	bge.n	1241e <onoff_start+0x2e>
		notify(mgr, err);
   12412:	4630      	mov	r0, r6
   12414:	462b      	mov	r3, r5
	}
}
   12416:	b002      	add	sp, #8
   12418:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   1241c:	4718      	bx	r3
}
   1241e:	b002      	add	sp, #8
   12420:	bd70      	pop	{r4, r5, r6, pc}
   12422:	bf00      	nop
   12424:	200099d0 	.word	0x200099d0
   12428:	b6db6db7 	.word	0xb6db6db7
   1242c:	000199d1 	.word	0x000199d1
   12430:	0001b4a4 	.word	0x0001b4a4

00012434 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   12434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   12438:	2200      	movs	r2, #0
   1243a:	2101      	movs	r1, #1
{
   1243c:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1243e:	2005      	movs	r0, #5
   12440:	f7f9 f8b0 	bl	b5a4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   12444:	4811      	ldr	r0, [pc, #68]	; (1248c <clk_init+0x58>)
   12446:	f001 fcb3 	bl	13db0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1244a:	4b11      	ldr	r3, [pc, #68]	; (12490 <clk_init+0x5c>)
   1244c:	4298      	cmp	r0, r3
   1244e:	d119      	bne.n	12484 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   12450:	f001 fcbe 	bl	13dd0 <nrfx_clock_enable>
   12454:	2400      	movs	r4, #0
	return &data->mgr[type];
   12456:	f04f 091c 	mov.w	r9, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1245a:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1245c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 12494 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
   12460:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   12462:	4641      	mov	r1, r8
   12464:	fb09 5004 	mla	r0, r9, r4, r5
   12468:	f004 fbd3 	bl	16c12 <onoff_manager_init>
		if (err < 0) {
   1246c:	2800      	cmp	r0, #0
   1246e:	db07      	blt.n	12480 <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   12470:	2301      	movs	r3, #1
   12472:	fb07 5504 	mla	r5, r7, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   12476:	441c      	add	r4, r3
   12478:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1247a:	67ab      	str	r3, [r5, #120]	; 0x78
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   1247c:	d1f0      	bne.n	12460 <clk_init+0x2c>
	}

	return 0;
   1247e:	2000      	movs	r0, #0
}
   12480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   12484:	f06f 0004 	mvn.w	r0, #4
   12488:	e7fa      	b.n	12480 <clk_init+0x4c>
   1248a:	bf00      	nop
   1248c:	000124cd 	.word	0x000124cd
   12490:	0bad0000 	.word	0x0bad0000
   12494:	0001c074 	.word	0x0001c074

00012498 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   12498:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1249a:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   1249c:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
   1249e:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   124a0:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   124a2:	4808      	ldr	r0, [pc, #32]	; (124c4 <clkstarted_handle.constprop.0+0x2c>)
   124a4:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   124a6:	3378      	adds	r3, #120	; 0x78
   124a8:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
   124aa:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	sub_data->cb = NULL;
   124ae:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
   124b0:	f007 fa1a 	bl	198e8 <set_on_state>
	if (callback) {
   124b4:	b12d      	cbz	r5, 124c2 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   124b6:	4632      	mov	r2, r6
   124b8:	462b      	mov	r3, r5
}
   124ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   124be:	4802      	ldr	r0, [pc, #8]	; (124c8 <clkstarted_handle.constprop.0+0x30>)
   124c0:	4718      	bx	r3
}
   124c2:	bd70      	pop	{r4, r5, r6, pc}
   124c4:	200099d0 	.word	0x200099d0
   124c8:	0001b4a4 	.word	0x0001b4a4

000124cc <clock_event_handler>:
	switch (event) {
   124cc:	2805      	cmp	r0, #5
   124ce:	d811      	bhi.n	124f4 <clock_event_handler+0x28>
   124d0:	e8df f000 	tbb	[pc, r0]
   124d4:	10100e03 	.word	0x10100e03
   124d8:	0a0c      	.short	0x0a0c
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   124da:	4b07      	ldr	r3, [pc, #28]	; (124f8 <clock_event_handler+0x2c>)
   124dc:	6f98      	ldr	r0, [r3, #120]	; 0x78
   124de:	f010 0007 	ands.w	r0, r0, #7
   124e2:	d107      	bne.n	124f4 <clock_event_handler+0x28>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   124e4:	f7ff bfd8 	b.w	12498 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
   124e8:	2002      	movs	r0, #2
   124ea:	e7fb      	b.n	124e4 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
   124ec:	2003      	movs	r0, #3
   124ee:	e7f9      	b.n	124e4 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   124f0:	2001      	movs	r0, #1
   124f2:	e7f7      	b.n	124e4 <clock_event_handler+0x18>
}
   124f4:	4770      	bx	lr
   124f6:	bf00      	nop
   124f8:	200099d0 	.word	0x200099d0

000124fc <generic_hfclk_start>:
{
   124fc:	b508      	push	{r3, lr}
	__asm__ volatile(
   124fe:	f04f 0320 	mov.w	r3, #32
   12502:	f3ef 8111 	mrs	r1, BASEPRI
   12506:	f383 8812 	msr	BASEPRI_MAX, r3
   1250a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1250e:	4a11      	ldr	r2, [pc, #68]	; (12554 <generic_hfclk_start+0x58>)
   12510:	6813      	ldr	r3, [r2, #0]
   12512:	f043 0002 	orr.w	r0, r3, #2
   12516:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   12518:	07da      	lsls	r2, r3, #31
   1251a:	d408      	bmi.n	1252e <generic_hfclk_start+0x32>
	__asm__ volatile(
   1251c:	f381 8811 	msr	BASEPRI, r1
   12520:	f3bf 8f6f 	isb	sy
}
   12524:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   12528:	2001      	movs	r0, #1
   1252a:	f001 bc65 	b.w	13df8 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1252e:	4b0a      	ldr	r3, [pc, #40]	; (12558 <generic_hfclk_start+0x5c>)
   12530:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   12534:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   12538:	07d3      	lsls	r3, r2, #31
   1253a:	d5ef      	bpl.n	1251c <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   1253c:	4807      	ldr	r0, [pc, #28]	; (1255c <generic_hfclk_start+0x60>)
   1253e:	f007 f9d3 	bl	198e8 <set_on_state>
   12542:	f381 8811 	msr	BASEPRI, r1
   12546:	f3bf 8f6f 	isb	sy
}
   1254a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1254e:	2000      	movs	r0, #0
   12550:	f7ff bfa2 	b.w	12498 <clkstarted_handle.constprop.0>
   12554:	20009a70 	.word	0x20009a70
   12558:	40005000 	.word	0x40005000
   1255c:	20009a48 	.word	0x20009a48

00012560 <api_blocking_start>:
{
   12560:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   12562:	2200      	movs	r2, #0
   12564:	2301      	movs	r3, #1
   12566:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1256a:	ab04      	add	r3, sp, #16
   1256c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   12570:	4a09      	ldr	r2, [pc, #36]	; (12598 <api_blocking_start+0x38>)
   12572:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   12574:	f8cd d000 	str.w	sp, [sp]
   12578:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1257c:	f007 fa21 	bl	199c2 <api_start>
	if (err < 0) {
   12580:	2800      	cmp	r0, #0
   12582:	db05      	blt.n	12590 <api_blocking_start+0x30>
   12584:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   12588:	2300      	movs	r3, #0
   1258a:	4668      	mov	r0, sp
   1258c:	f003 f860 	bl	15650 <z_impl_k_sem_take>
}
   12590:	b007      	add	sp, #28
   12592:	f85d fb04 	ldr.w	pc, [sp], #4
   12596:	bf00      	nop
   12598:	00019a07 	.word	0x00019a07

0001259c <generic_hfclk_stop>:
{
   1259c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1259e:	f04f 0320 	mov.w	r3, #32
   125a2:	f3ef 8411 	mrs	r4, BASEPRI
   125a6:	f383 8812 	msr	BASEPRI_MAX, r3
   125aa:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   125ae:	4a07      	ldr	r2, [pc, #28]	; (125cc <generic_hfclk_stop+0x30>)
   125b0:	6813      	ldr	r3, [r2, #0]
   125b2:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   125b6:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   125b8:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   125ba:	d402      	bmi.n	125c2 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   125bc:	2001      	movs	r0, #1
   125be:	f007 fb91 	bl	19ce4 <nrfx_clock_stop>
	__asm__ volatile(
   125c2:	f384 8811 	msr	BASEPRI, r4
   125c6:	f3bf 8f6f 	isb	sy
}
   125ca:	bd10      	pop	{r4, pc}
   125cc:	20009a70 	.word	0x20009a70

000125d0 <z_nrf_clock_control_lf_on>:
{
   125d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   125d4:	2201      	movs	r2, #1
   125d6:	4607      	mov	r7, r0
   125d8:	4935      	ldr	r1, [pc, #212]	; (126b0 <z_nrf_clock_control_lf_on+0xe0>)
   125da:	e8d1 3fef 	ldaex	r3, [r1]
   125de:	e8c1 2fe0 	stlex	r0, r2, [r1]
   125e2:	2800      	cmp	r0, #0
   125e4:	d1f9      	bne.n	125da <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   125e6:	b933      	cbnz	r3, 125f6 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   125e8:	4932      	ldr	r1, [pc, #200]	; (126b4 <z_nrf_clock_control_lf_on+0xe4>)
		err = onoff_request(mgr, &cli);
   125ea:	4833      	ldr	r0, [pc, #204]	; (126b8 <z_nrf_clock_control_lf_on+0xe8>)
   125ec:	604b      	str	r3, [r1, #4]
   125ee:	60cb      	str	r3, [r1, #12]
   125f0:	608a      	str	r2, [r1, #8]
   125f2:	f004 fb21 	bl	16c38 <onoff_request>
	switch (start_mode) {
   125f6:	1e7b      	subs	r3, r7, #1
   125f8:	2b01      	cmp	r3, #1
   125fa:	d828      	bhi.n	1264e <z_nrf_clock_control_lf_on+0x7e>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   125fc:	2f01      	cmp	r7, #1
   125fe:	d106      	bne.n	1260e <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   12600:	4b2e      	ldr	r3, [pc, #184]	; (126bc <z_nrf_clock_control_lf_on+0xec>)
   12602:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   12606:	f003 0303 	and.w	r3, r3, #3
   1260a:	2b02      	cmp	r3, #2
   1260c:	d01f      	beq.n	1264e <z_nrf_clock_control_lf_on+0x7e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1260e:	f008 fa09 	bl	1aa24 <k_is_in_isr>
   12612:	4605      	mov	r5, r0
   12614:	b9e8      	cbnz	r0, 12652 <z_nrf_clock_control_lf_on+0x82>
	return !z_sys_post_kernel;
   12616:	4b2a      	ldr	r3, [pc, #168]	; (126c0 <z_nrf_clock_control_lf_on+0xf0>)
   12618:	781b      	ldrb	r3, [r3, #0]
   1261a:	b1d3      	cbz	r3, 12652 <z_nrf_clock_control_lf_on+0x82>
    p_reg->INTENCLR = mask;
   1261c:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   1261e:	4606      	mov	r6, r0
   12620:	4b26      	ldr	r3, [pc, #152]	; (126bc <z_nrf_clock_control_lf_on+0xec>)
   12622:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   12626:	4c25      	ldr	r4, [pc, #148]	; (126bc <z_nrf_clock_control_lf_on+0xec>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12628:	f8df 8098 	ldr.w	r8, [pc, #152]	; 126c4 <z_nrf_clock_control_lf_on+0xf4>
   1262c:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   12630:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   12634:	03d2      	lsls	r2, r2, #15
   12636:	d516      	bpl.n	12666 <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   12638:	f003 0303 	and.w	r3, r3, #3
   1263c:	2b02      	cmp	r3, #2
   1263e:	d001      	beq.n	12644 <z_nrf_clock_control_lf_on+0x74>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   12640:	2f01      	cmp	r7, #1
   12642:	d110      	bne.n	12666 <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
   12644:	b375      	cbz	r5, 126a4 <z_nrf_clock_control_lf_on+0xd4>
   12646:	f386 8811 	msr	BASEPRI, r6
   1264a:	f3bf 8f6f 	isb	sy
}
   1264e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   12652:	f04f 0320 	mov.w	r3, #32
   12656:	f3ef 8611 	mrs	r6, BASEPRI
   1265a:	f383 8812 	msr	BASEPRI_MAX, r3
   1265e:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   12662:	2501      	movs	r5, #1
   12664:	e7df      	b.n	12626 <z_nrf_clock_control_lf_on+0x56>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   12666:	b1c5      	cbz	r5, 1269a <z_nrf_clock_control_lf_on+0xca>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   12668:	4630      	mov	r0, r6
   1266a:	f7f8 fef3 	bl	b454 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1266e:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   12672:	b2db      	uxtb	r3, r3
   12674:	2b01      	cmp	r3, #1
   12676:	d1d9      	bne.n	1262c <z_nrf_clock_control_lf_on+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   12678:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1267c:	2a00      	cmp	r2, #0
   1267e:	d0d5      	beq.n	1262c <z_nrf_clock_control_lf_on+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12680:	2200      	movs	r2, #0
   12682:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   12686:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1268a:	2202      	movs	r2, #2
   1268c:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   12690:	2220      	movs	r2, #32
   12692:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12696:	60a3      	str	r3, [r4, #8]
}
   12698:	e7c8      	b.n	1262c <z_nrf_clock_control_lf_on+0x5c>
	return z_impl_k_sleep(timeout);
   1269a:	2100      	movs	r1, #0
   1269c:	2021      	movs	r0, #33	; 0x21
   1269e:	f003 fccf 	bl	16040 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   126a2:	e7e4      	b.n	1266e <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
   126a4:	2202      	movs	r2, #2
   126a6:	4b05      	ldr	r3, [pc, #20]	; (126bc <z_nrf_clock_control_lf_on+0xec>)
   126a8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   126ac:	e7cf      	b.n	1264e <z_nrf_clock_control_lf_on+0x7e>
   126ae:	bf00      	nop
   126b0:	200099cc 	.word	0x200099cc
   126b4:	200099bc 	.word	0x200099bc
   126b8:	200099ec 	.word	0x200099ec
   126bc:	40005000 	.word	0x40005000
   126c0:	20009c8c 	.word	0x20009c8c
   126c4:	e000e100 	.word	0xe000e100

000126c8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
   126c8:	b508      	push	{r3, lr}
   126ca:	4807      	ldr	r0, [pc, #28]	; (126e8 <uart_console_init+0x20>)
   126cc:	f008 f8ea 	bl	1a8a4 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   126d0:	b138      	cbz	r0, 126e2 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   126d2:	4806      	ldr	r0, [pc, #24]	; (126ec <uart_console_init+0x24>)
   126d4:	f7f9 fdba 	bl	c24c <__stdout_hook_install>
	__printk_hook_install(console_out);
   126d8:	4804      	ldr	r0, [pc, #16]	; (126ec <uart_console_init+0x24>)
   126da:	f7f6 fcc7 	bl	906c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   126de:	2000      	movs	r0, #0
}
   126e0:	bd08      	pop	{r3, pc}
		return -ENODEV;
   126e2:	f06f 0012 	mvn.w	r0, #18
   126e6:	e7fb      	b.n	126e0 <uart_console_init+0x18>
   126e8:	0001b51c 	.word	0x0001b51c
   126ec:	000126f1 	.word	0x000126f1

000126f0 <console_out>:
	if ('\n' == c) {
   126f0:	280a      	cmp	r0, #10
{
   126f2:	b538      	push	{r3, r4, r5, lr}
   126f4:	4604      	mov	r4, r0
   126f6:	4d07      	ldr	r5, [pc, #28]	; (12714 <console_out+0x24>)
	if ('\n' == c) {
   126f8:	d104      	bne.n	12704 <console_out+0x14>
   126fa:	68ab      	ldr	r3, [r5, #8]
   126fc:	210d      	movs	r1, #13
   126fe:	4628      	mov	r0, r5
   12700:	685b      	ldr	r3, [r3, #4]
   12702:	4798      	blx	r3
   12704:	68ab      	ldr	r3, [r5, #8]
   12706:	4803      	ldr	r0, [pc, #12]	; (12714 <console_out+0x24>)
   12708:	685b      	ldr	r3, [r3, #4]
   1270a:	b2e1      	uxtb	r1, r4
   1270c:	4798      	blx	r3
}
   1270e:	4620      	mov	r0, r4
   12710:	bd38      	pop	{r3, r4, r5, pc}
   12712:	bf00      	nop
   12714:	0001b51c 	.word	0x0001b51c

00012718 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   12718:	b530      	push	{r4, r5, lr}
	return port->config;
   1271a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1271c:	f001 041f 	and.w	r4, r1, #31
   12720:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   12722:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   12726:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   12728:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1272c:	d105      	bne.n	1273a <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1272e:	4620      	mov	r0, r4
   12730:	f001 fe6a 	bl	14408 <nrfx_gpiote_trigger_disable>

		return 0;
   12734:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   12736:	b005      	add	sp, #20
   12738:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   1273a:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   1273c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   12740:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   12744:	d114      	bne.n	12770 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   12746:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1274a:	bf0c      	ite	eq
   1274c:	2304      	moveq	r3, #4
   1274e:	2305      	movne	r3, #5
   12750:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   12754:	2300      	movs	r3, #0
   12756:	4620      	mov	r0, r4
   12758:	4619      	mov	r1, r3
   1275a:	aa02      	add	r2, sp, #8
   1275c:	f001 fc92 	bl	14084 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   12760:	4b1f      	ldr	r3, [pc, #124]	; (127e0 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   12762:	4298      	cmp	r0, r3
   12764:	d138      	bne.n	127d8 <gpio_nrfx_pin_interrupt_configure+0xc0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   12766:	2101      	movs	r1, #1
   12768:	4620      	mov	r0, r4
   1276a:	f001 fe07 	bl	1437c <nrfx_gpiote_trigger_enable>
	return 0;
   1276e:	e7e1      	b.n	12734 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   12770:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   12774:	d025      	beq.n	127c2 <gpio_nrfx_pin_interrupt_configure+0xaa>
   12776:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1277a:	bf14      	ite	ne
   1277c:	2301      	movne	r3, #1
   1277e:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   12780:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   12784:	6883      	ldr	r3, [r0, #8]
   12786:	40cb      	lsrs	r3, r1
   12788:	07d9      	lsls	r1, r3, #31
   1278a:	d4e3      	bmi.n	12754 <gpio_nrfx_pin_interrupt_configure+0x3c>
   1278c:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   12790:	d1e0      	bne.n	12754 <gpio_nrfx_pin_interrupt_configure+0x3c>
        /* FALLTHROUGH */
        case 0: return NRF_P0;
#endif
#if defined(P1_FEATURE_PINS_PRESENT)
        /* FALLTHROUGH */
        case 1: return NRF_P1;
   12792:	4a14      	ldr	r2, [pc, #80]	; (127e4 <gpio_nrfx_pin_interrupt_configure+0xcc>)
   12794:	4814      	ldr	r0, [pc, #80]	; (127e8 <gpio_nrfx_pin_interrupt_configure+0xd0>)
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   12796:	0961      	lsrs	r1, r4, #5
        case 1: return NRF_P1;
   12798:	2901      	cmp	r1, #1
   1279a:	bf08      	it	eq
   1279c:	4602      	moveq	r2, r0
    *p_pin = pin_number & 0x1F;
   1279e:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   127a2:	3380      	adds	r3, #128	; 0x80
   127a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   127a8:	07db      	lsls	r3, r3, #31
   127aa:	d4d3      	bmi.n	12754 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   127ac:	f10d 0507 	add.w	r5, sp, #7
   127b0:	4629      	mov	r1, r5
   127b2:	4620      	mov	r0, r4
   127b4:	f001 fd8e 	bl	142d4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   127b8:	4b0c      	ldr	r3, [pc, #48]	; (127ec <gpio_nrfx_pin_interrupt_configure+0xd4>)
   127ba:	4298      	cmp	r0, r3
   127bc:	d003      	beq.n	127c6 <gpio_nrfx_pin_interrupt_configure+0xae>
		trigger_config.p_in_channel = &ch;
   127be:	9503      	str	r5, [sp, #12]
   127c0:	e7c8      	b.n	12754 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   127c2:	2303      	movs	r3, #3
   127c4:	e7dc      	b.n	12780 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   127c6:	4628      	mov	r0, r5
   127c8:	f001 fdd2 	bl	14370 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   127cc:	4b04      	ldr	r3, [pc, #16]	; (127e0 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   127ce:	4298      	cmp	r0, r3
   127d0:	d0f5      	beq.n	127be <gpio_nrfx_pin_interrupt_configure+0xa6>
				return -ENOMEM;
   127d2:	f06f 000b 	mvn.w	r0, #11
   127d6:	e7ae      	b.n	12736 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   127d8:	f06f 0015 	mvn.w	r0, #21
   127dc:	e7ab      	b.n	12736 <gpio_nrfx_pin_interrupt_configure+0x1e>
   127de:	bf00      	nop
   127e0:	0bad0000 	.word	0x0bad0000
   127e4:	40842500 	.word	0x40842500
   127e8:	40842800 	.word	0x40842800
   127ec:	0bad0004 	.word	0x0bad0004

000127f0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   127f0:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   127f2:	f001 fdad 	bl	14350 <nrfx_gpiote_is_init>
   127f6:	4604      	mov	r4, r0
   127f8:	b968      	cbnz	r0, 12816 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   127fa:	f001 fd81 	bl	14300 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   127fe:	4b08      	ldr	r3, [pc, #32]	; (12820 <gpio_nrfx_init+0x30>)
   12800:	4298      	cmp	r0, r3
   12802:	d10a      	bne.n	1281a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   12804:	4621      	mov	r1, r4
   12806:	4807      	ldr	r0, [pc, #28]	; (12824 <gpio_nrfx_init+0x34>)
   12808:	f001 fd5e 	bl	142c8 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1280c:	4622      	mov	r2, r4
   1280e:	2105      	movs	r1, #5
   12810:	202f      	movs	r0, #47	; 0x2f
   12812:	f7f8 fec7 	bl	b5a4 <z_arm_irq_priority_set>
		return 0;
   12816:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   12818:	bd10      	pop	{r4, pc}
		return -EIO;
   1281a:	f06f 0004 	mvn.w	r0, #4
   1281e:	e7fb      	b.n	12818 <gpio_nrfx_init+0x28>
   12820:	0bad0000 	.word	0x0bad0000
   12824:	00012829 	.word	0x00012829

00012828 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   12828:	0942      	lsrs	r2, r0, #5
{
   1282a:	4603      	mov	r3, r0
   1282c:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1282e:	d002      	beq.n	12836 <nrfx_gpio_handler+0xe>
   12830:	2a01      	cmp	r2, #1
   12832:	d017      	beq.n	12864 <nrfx_gpio_handler+0x3c>
}
   12834:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   12836:	4e0d      	ldr	r6, [pc, #52]	; (1286c <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
   12838:	6932      	ldr	r2, [r6, #16]
   1283a:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1283c:	2900      	cmp	r1, #0
   1283e:	d0f9      	beq.n	12834 <nrfx_gpio_handler+0xc>
   12840:	2501      	movs	r5, #1
    *p_pin = pin_number & 0x1F;
   12842:	f003 031f 	and.w	r3, r3, #31
   12846:	680c      	ldr	r4, [r1, #0]
   12848:	409d      	lsls	r5, r3
   1284a:	2900      	cmp	r1, #0
   1284c:	d0f2      	beq.n	12834 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   1284e:	688a      	ldr	r2, [r1, #8]
   12850:	402a      	ands	r2, r5
   12852:	d002      	beq.n	1285a <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   12854:	4630      	mov	r0, r6
   12856:	684b      	ldr	r3, [r1, #4]
   12858:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1285a:	b12c      	cbz	r4, 12868 <nrfx_gpio_handler+0x40>
   1285c:	6823      	ldr	r3, [r4, #0]
   1285e:	4621      	mov	r1, r4
   12860:	461c      	mov	r4, r3
   12862:	e7f2      	b.n	1284a <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   12864:	4e02      	ldr	r6, [pc, #8]	; (12870 <nrfx_gpio_handler+0x48>)
   12866:	e7e7      	b.n	12838 <nrfx_gpio_handler+0x10>
   12868:	4623      	mov	r3, r4
   1286a:	e7f8      	b.n	1285e <nrfx_gpio_handler+0x36>
   1286c:	0001b4d4 	.word	0x0001b4d4
   12870:	0001b4bc 	.word	0x0001b4bc

00012874 <gpio_nrfx_pin_configure>:
{
   12874:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   12878:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1287a:	f001 051f 	and.w	r5, r1, #31
   1287e:	7b3b      	ldrb	r3, [r7, #12]
{
   12880:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   12882:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   12886:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   12888:	4628      	mov	r0, r5
   1288a:	f10d 0103 	add.w	r1, sp, #3
   1288e:	f001 fd21 	bl	142d4 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   12892:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   12896:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   12898:	d10b      	bne.n	128b2 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1289a:	4628      	mov	r0, r5
   1289c:	f001 fddc 	bl	14458 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   128a0:	4b3c      	ldr	r3, [pc, #240]	; (12994 <gpio_nrfx_pin_configure+0x120>)
   128a2:	4598      	cmp	r8, r3
   128a4:	d103      	bne.n	128ae <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   128a6:	f89d 0003 	ldrb.w	r0, [sp, #3]
   128aa:	f001 fd5b 	bl	14364 <nrfx_gpiote_channel_free>
		return 0;
   128ae:	2000      	movs	r0, #0
   128b0:	e00c      	b.n	128cc <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   128b2:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   128b4:	4628      	mov	r0, r5
   128b6:	4619      	mov	r1, r3
   128b8:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   128ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   128be:	f001 fbe1 	bl	14084 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   128c2:	4b34      	ldr	r3, [pc, #208]	; (12994 <gpio_nrfx_pin_configure+0x120>)
   128c4:	4298      	cmp	r0, r3
   128c6:	d004      	beq.n	128d2 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   128c8:	f06f 0015 	mvn.w	r0, #21
}
   128cc:	b004      	add	sp, #16
   128ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   128d2:	4580      	cmp	r8, r0
   128d4:	d103      	bne.n	128de <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   128d6:	f89d 0003 	ldrb.w	r0, [sp, #3]
   128da:	f001 fd43 	bl	14364 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   128de:	03a3      	lsls	r3, r4, #14
   128e0:	d549      	bpl.n	12976 <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   128e2:	f240 3306 	movw	r3, #774	; 0x306
   128e6:	4023      	ands	r3, r4
   128e8:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   128ec:	d019      	beq.n	12922 <gpio_nrfx_pin_configure+0xae>
   128ee:	d80c      	bhi.n	1290a <gpio_nrfx_pin_configure+0x96>
   128f0:	2b06      	cmp	r3, #6
   128f2:	d017      	beq.n	12924 <gpio_nrfx_pin_configure+0xb0>
   128f4:	d804      	bhi.n	12900 <gpio_nrfx_pin_configure+0x8c>
   128f6:	b1ab      	cbz	r3, 12924 <gpio_nrfx_pin_configure+0xb0>
   128f8:	2b02      	cmp	r3, #2
   128fa:	d1e5      	bne.n	128c8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   128fc:	2304      	movs	r3, #4
   128fe:	e011      	b.n	12924 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   12900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   12904:	d1e0      	bne.n	128c8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   12906:	2301      	movs	r3, #1
   12908:	e00c      	b.n	12924 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1290a:	f240 2202 	movw	r2, #514	; 0x202
   1290e:	4293      	cmp	r3, r2
   12910:	d026      	beq.n	12960 <gpio_nrfx_pin_configure+0xec>
   12912:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   12916:	d025      	beq.n	12964 <gpio_nrfx_pin_configure+0xf0>
   12918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1291c:	d1d4      	bne.n	128c8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   1291e:	2302      	movs	r3, #2
   12920:	e000      	b.n	12924 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   12922:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   12924:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   12928:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1292c:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   12930:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   12932:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   12936:	bf4c      	ite	mi
   12938:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
   1293a:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1293e:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   12940:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   12944:	d510      	bpl.n	12968 <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   12946:	2301      	movs	r3, #1
   12948:	687a      	ldr	r2, [r7, #4]
   1294a:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   1294c:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1294e:	2200      	movs	r2, #0
   12950:	4628      	mov	r0, r5
   12952:	a901      	add	r1, sp, #4
   12954:	f001 fc44 	bl	141e0 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   12958:	4b0e      	ldr	r3, [pc, #56]	; (12994 <gpio_nrfx_pin_configure+0x120>)
   1295a:	4298      	cmp	r0, r3
   1295c:	d0a7      	beq.n	128ae <gpio_nrfx_pin_configure+0x3a>
   1295e:	e7b3      	b.n	128c8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   12960:	2305      	movs	r3, #5
   12962:	e7df      	b.n	12924 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   12964:	2303      	movs	r3, #3
   12966:	e7dd      	b.n	12924 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   12968:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1296a:	bf41      	itttt	mi
   1296c:	2301      	movmi	r3, #1
   1296e:	687a      	ldrmi	r2, [r7, #4]
   12970:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   12972:	60d3      	strmi	r3, [r2, #12]
}
   12974:	e7eb      	b.n	1294e <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
   12976:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   12978:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   1297c:	bf4c      	ite	mi
   1297e:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
   12980:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   12984:	461a      	mov	r2, r3
   12986:	4628      	mov	r0, r5
   12988:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   1298a:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1298e:	f001 fb79 	bl	14084 <nrfx_gpiote_input_configure>
   12992:	e7e1      	b.n	12958 <gpio_nrfx_pin_configure+0xe4>
   12994:	0bad0000 	.word	0x0bad0000

00012998 <mbox_nrf_init>:

	nrfx_ipc_config_load(&ch_config);
}

static int mbox_nrf_init(const struct device *dev)
{
   12998:	b510      	push	{r4, lr}
   1299a:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
   1299c:	6902      	ldr	r2, [r0, #16]
{
   1299e:	b0a8      	sub	sp, #160	; 0xa0

	data->dev = dev;
   129a0:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
   129a4:	4925      	ldr	r1, [pc, #148]	; (12a3c <mbox_nrf_init+0xa4>)
   129a6:	2000      	movs	r0, #0
   129a8:	f001 fe56 	bl	14658 <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   129ac:	2200      	movs	r2, #0
   129ae:	2101      	movs	r1, #1
   129b0:	202a      	movs	r0, #42	; 0x2a
   129b2:	f7f8 fdf7 	bl	b5a4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);
   129b6:	6864      	ldr	r4, [r4, #4]
	nrfx_ipc_config_t ch_config = { 0 };
   129b8:	2284      	movs	r2, #132	; 0x84
   129ba:	2100      	movs	r1, #0
   129bc:	a807      	add	r0, sp, #28
   129be:	f005 fc01 	bl	181c4 <memset>
	if (conf->tx_mask >= BIT(IPC_CONF_NUM)) {
   129c2:	6863      	ldr	r3, [r4, #4]
   129c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   129c8:	d30a      	bcc.n	129e0 <mbox_nrf_init+0x48>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
   129ca:	4b1d      	ldr	r3, [pc, #116]	; (12a40 <mbox_nrf_init+0xa8>)
   129cc:	9305      	str	r3, [sp, #20]
   129ce:	2302      	movs	r3, #2
   129d0:	9304      	str	r3, [sp, #16]
   129d2:	2300      	movs	r3, #0
   129d4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   129d8:	481a      	ldr	r0, [pc, #104]	; (12a44 <mbox_nrf_init+0xac>)
   129da:	aa04      	add	r2, sp, #16
   129dc:	f7f7 ff8e 	bl	a8fc <z_impl_z_log_msg_static_create>
	if (conf->rx_mask >= BIT(IPC_CONF_NUM)) {
   129e0:	6823      	ldr	r3, [r4, #0]
   129e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   129e6:	d30a      	bcc.n	129fe <mbox_nrf_init+0x66>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
   129e8:	4b17      	ldr	r3, [pc, #92]	; (12a48 <mbox_nrf_init+0xb0>)
   129ea:	9305      	str	r3, [sp, #20]
   129ec:	2302      	movs	r3, #2
   129ee:	9304      	str	r3, [sp, #16]
   129f0:	2300      	movs	r3, #0
   129f2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   129f6:	4813      	ldr	r0, [pc, #76]	; (12a44 <mbox_nrf_init+0xac>)
   129f8:	aa04      	add	r2, sp, #16
   129fa:	f7f7 ff7f 	bl	a8fc <z_impl_z_log_msg_static_create>
	ch_config.receive_events_enabled = 0;
   129fe:	2300      	movs	r3, #0
			ch_config.send_task_config[ch] = BIT(ch);
   12a00:	2001      	movs	r0, #1
	ch_config.receive_events_enabled = 0;
   12a02:	9327      	str	r3, [sp, #156]	; 0x9c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   12a04:	aa07      	add	r2, sp, #28
		if (conf->tx_mask & BIT(ch)) {
   12a06:	6861      	ldr	r1, [r4, #4]
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   12a08:	3204      	adds	r2, #4
		if (conf->tx_mask & BIT(ch)) {
   12a0a:	40d9      	lsrs	r1, r3
   12a0c:	07c9      	lsls	r1, r1, #31
			ch_config.send_task_config[ch] = BIT(ch);
   12a0e:	bf44      	itt	mi
   12a10:	fa00 f103 	lslmi.w	r1, r0, r3
   12a14:	f842 1c04 	strmi.w	r1, [r2, #-4]
		if (conf->rx_mask & BIT(ch)) {
   12a18:	6821      	ldr	r1, [r4, #0]
   12a1a:	40d9      	lsrs	r1, r3
   12a1c:	07c9      	lsls	r1, r1, #31
			ch_config.receive_event_config[ch] = BIT(ch);
   12a1e:	bf48      	it	mi
   12a20:	fa00 f103 	lslmi.w	r1, r0, r3
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   12a24:	f103 0301 	add.w	r3, r3, #1
			ch_config.receive_event_config[ch] = BIT(ch);
   12a28:	bf48      	it	mi
   12a2a:	63d1      	strmi	r1, [r2, #60]	; 0x3c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   12a2c:	2b10      	cmp	r3, #16
   12a2e:	d1ea      	bne.n	12a06 <mbox_nrf_init+0x6e>
	nrfx_ipc_config_load(&ch_config);
   12a30:	a807      	add	r0, sp, #28
   12a32:	f001 fe29 	bl	14688 <nrfx_ipc_config_load>

	return 0;
}
   12a36:	2000      	movs	r0, #0
   12a38:	b028      	add	sp, #160	; 0xa0
   12a3a:	bd10      	pop	{r4, pc}
   12a3c:	00012b41 	.word	0x00012b41
   12a40:	0001e2ad 	.word	0x0001e2ad
   12a44:	0001b908 	.word	0x0001b908
   12a48:	0001e2d9 	.word	0x0001e2d9

00012a4c <mbox_nrf_set_enabled>:
{
   12a4c:	b530      	push	{r4, r5, lr}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   12a4e:	290f      	cmp	r1, #15
{
   12a50:	460c      	mov	r4, r1
	struct mbox_nrf_data *data = dev->data;
   12a52:	6905      	ldr	r5, [r0, #16]
{
   12a54:	b087      	sub	sp, #28
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   12a56:	d842      	bhi.n	12ade <mbox_nrf_set_enabled+0x92>
   12a58:	6843      	ldr	r3, [r0, #4]
   12a5a:	681b      	ldr	r3, [r3, #0]
   12a5c:	40cb      	lsrs	r3, r1
   12a5e:	07db      	lsls	r3, r3, #31
   12a60:	d53d      	bpl.n	12ade <mbox_nrf_set_enabled+0x92>
	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
   12a62:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   12a66:	40cb      	lsrs	r3, r1
   12a68:	f003 0301 	and.w	r3, r3, #1
   12a6c:	b91a      	cbnz	r2, 12a76 <mbox_nrf_set_enabled+0x2a>
   12a6e:	bb13      	cbnz	r3, 12ab6 <mbox_nrf_set_enabled+0x6a>
		return -EALREADY;
   12a70:	f06f 0077 	mvn.w	r0, #119	; 0x77
   12a74:	e031      	b.n	12ada <mbox_nrf_set_enabled+0x8e>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
   12a76:	2b00      	cmp	r3, #0
   12a78:	d1fa      	bne.n	12a70 <mbox_nrf_set_enabled+0x24>
	if (enable && (data->cb[channel] == NULL)) {
   12a7a:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   12a7e:	b94b      	cbnz	r3, 12a94 <mbox_nrf_set_enabled+0x48>
		LOG_WRN("Enabling channel without a registered callback\n");
   12a80:	4a18      	ldr	r2, [pc, #96]	; (12ae4 <mbox_nrf_set_enabled+0x98>)
   12a82:	9205      	str	r2, [sp, #20]
   12a84:	2202      	movs	r2, #2
   12a86:	9204      	str	r2, [sp, #16]
   12a88:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   12a8c:	4816      	ldr	r0, [pc, #88]	; (12ae8 <mbox_nrf_set_enabled+0x9c>)
   12a8e:	aa04      	add	r2, sp, #16
   12a90:	f7f7 ff34 	bl	a8fc <z_impl_z_log_msg_static_create>
	if (enable && data->enabled_mask == 0) {
   12a94:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   12a98:	b913      	cbnz	r3, 12aa0 <mbox_nrf_set_enabled+0x54>
		irq_enable(DT_INST_IRQN(0));
   12a9a:	202a      	movs	r0, #42	; 0x2a
   12a9c:	f7f8 fd52 	bl	b544 <arch_irq_enable>
		data->enabled_mask |= BIT(channel);
   12aa0:	2201      	movs	r2, #1
   12aa2:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   12aa6:	40a2      	lsls	r2, r4
   12aa8:	4313      	orrs	r3, r2
   12aaa:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		nrfx_ipc_receive_event_enable(channel);
   12aae:	b2e0      	uxtb	r0, r4
   12ab0:	f001 fe0a 	bl	146c8 <nrfx_ipc_receive_event_enable>
   12ab4:	e00a      	b.n	12acc <mbox_nrf_set_enabled+0x80>
		nrfx_ipc_receive_event_disable(channel);
   12ab6:	b2c8      	uxtb	r0, r1
   12ab8:	f001 fe0e 	bl	146d8 <nrfx_ipc_receive_event_disable>
		data->enabled_mask &= ~BIT(channel);
   12abc:	2201      	movs	r2, #1
   12abe:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   12ac2:	40a2      	lsls	r2, r4
   12ac4:	ea23 0302 	bic.w	r3, r3, r2
   12ac8:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	if (data->enabled_mask == 0) {
   12acc:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   12ad0:	b913      	cbnz	r3, 12ad8 <mbox_nrf_set_enabled+0x8c>
		irq_disable(DT_INST_IRQN(0));
   12ad2:	202a      	movs	r0, #42	; 0x2a
   12ad4:	f7f8 fd44 	bl	b560 <arch_irq_disable>
	return 0;
   12ad8:	2000      	movs	r0, #0
}
   12ada:	b007      	add	sp, #28
   12adc:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   12ade:	f06f 0015 	mvn.w	r0, #21
   12ae2:	e7fa      	b.n	12ada <mbox_nrf_set_enabled+0x8e>
   12ae4:	0001e305 	.word	0x0001e305
   12ae8:	0001b908 	.word	0x0001b908

00012aec <mbox_nrf_send>:
{
   12aec:	b530      	push	{r4, r5, lr}
   12aee:	4605      	mov	r5, r0
   12af0:	460c      	mov	r4, r1
   12af2:	b087      	sub	sp, #28
	if (msg) {
   12af4:	b152      	cbz	r2, 12b0c <mbox_nrf_send+0x20>
		LOG_WRN("Sending data not supported");
   12af6:	4b10      	ldr	r3, [pc, #64]	; (12b38 <mbox_nrf_send+0x4c>)
   12af8:	9305      	str	r3, [sp, #20]
   12afa:	2302      	movs	r3, #2
   12afc:	9304      	str	r3, [sp, #16]
   12afe:	2300      	movs	r3, #0
   12b00:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   12b04:	480d      	ldr	r0, [pc, #52]	; (12b3c <mbox_nrf_send+0x50>)
   12b06:	aa04      	add	r2, sp, #16
   12b08:	f7f7 fef8 	bl	a8fc <z_impl_z_log_msg_static_create>
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
   12b0c:	2c0f      	cmp	r4, #15
   12b0e:	d80f      	bhi.n	12b30 <mbox_nrf_send+0x44>
   12b10:	686b      	ldr	r3, [r5, #4]
   12b12:	685b      	ldr	r3, [r3, #4]
   12b14:	40e3      	lsrs	r3, r4
   12b16:	07db      	lsls	r3, r3, #31
   12b18:	d50a      	bpl.n	12b30 <mbox_nrf_send+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12b1a:	2301      	movs	r3, #1
	return 0;
   12b1c:	2000      	movs	r0, #0
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
   12b1e:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12b20:	b2e4      	uxtb	r4, r4
   12b22:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   12b26:	f504 3428 	add.w	r4, r4, #172032	; 0x2a000
   12b2a:	6023      	str	r3, [r4, #0]
}
   12b2c:	b007      	add	sp, #28
   12b2e:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   12b30:	f06f 0015 	mvn.w	r0, #21
   12b34:	e7fa      	b.n	12b2c <mbox_nrf_send+0x40>
   12b36:	bf00      	nop
   12b38:	0001e335 	.word	0x0001e335
   12b3c:	0001b908 	.word	0x0001b908

00012b40 <mbox_dispatcher>:
{
   12b40:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev = data->dev;
   12b42:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   12b46:	280f      	cmp	r0, #15
{
   12b48:	4604      	mov	r4, r0
   12b4a:	460d      	mov	r5, r1
   12b4c:	6873      	ldr	r3, [r6, #4]
   12b4e:	b086      	sub	sp, #24
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   12b50:	d803      	bhi.n	12b5a <mbox_dispatcher+0x1a>
   12b52:	681b      	ldr	r3, [r3, #0]
   12b54:	40c3      	lsrs	r3, r0
   12b56:	07db      	lsls	r3, r3, #31
   12b58:	d40a      	bmi.n	12b70 <mbox_dispatcher+0x30>
		LOG_WRN("RX event on illegal channel");
   12b5a:	4b15      	ldr	r3, [pc, #84]	; (12bb0 <mbox_dispatcher+0x70>)
   12b5c:	9305      	str	r3, [sp, #20]
   12b5e:	2302      	movs	r3, #2
   12b60:	9304      	str	r3, [sp, #16]
   12b62:	2300      	movs	r3, #0
   12b64:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   12b68:	4812      	ldr	r0, [pc, #72]	; (12bb4 <mbox_dispatcher+0x74>)
   12b6a:	aa04      	add	r2, sp, #16
   12b6c:	f7f7 fec6 	bl	a8fc <z_impl_z_log_msg_static_create>
	if (!(data->enabled_mask & BIT(channel))) {
   12b70:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   12b74:	40e3      	lsrs	r3, r4
   12b76:	f013 0301 	ands.w	r3, r3, #1
   12b7a:	d109      	bne.n	12b90 <mbox_dispatcher+0x50>
		LOG_WRN("RX event on disabled channel");
   12b7c:	4a0e      	ldr	r2, [pc, #56]	; (12bb8 <mbox_dispatcher+0x78>)
   12b7e:	9205      	str	r2, [sp, #20]
   12b80:	2202      	movs	r2, #2
   12b82:	9204      	str	r2, [sp, #16]
   12b84:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   12b88:	480a      	ldr	r0, [pc, #40]	; (12bb4 <mbox_dispatcher+0x74>)
   12b8a:	aa04      	add	r2, sp, #16
   12b8c:	f7f7 feb6 	bl	a8fc <z_impl_z_log_msg_static_create>
	if (data->cb[channel] != NULL) {
   12b90:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   12b94:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
   12b98:	b145      	cbz	r5, 12bac <mbox_dispatcher+0x6c>
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   12b9a:	2300      	movs	r3, #0
   12b9c:	4621      	mov	r1, r4
   12b9e:	4630      	mov	r0, r6
   12ba0:	46ac      	mov	ip, r5
   12ba2:	6c12      	ldr	r2, [r2, #64]	; 0x40
}
   12ba4:	b006      	add	sp, #24
   12ba6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   12baa:	4760      	bx	ip
}
   12bac:	b006      	add	sp, #24
   12bae:	bd70      	pop	{r4, r5, r6, pc}
   12bb0:	0001e350 	.word	0x0001e350
   12bb4:	0001b908 	.word	0x0001b908
   12bb8:	0001e36c 	.word	0x0001e36c

00012bbc <pinctrl_configure_pins>:
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   12bbc:	f04f 0c01 	mov.w	ip, #1
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   12bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case 1: return NRF_P1;
   12bc4:	4e5b      	ldr	r6, [pc, #364]	; (12d34 <pinctrl_configure_pins+0x178>)
   12bc6:	4f5c      	ldr	r7, [pc, #368]	; (12d38 <pinctrl_configure_pins+0x17c>)
   12bc8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   12bcc:	4281      	cmp	r1, r0
   12bce:	d102      	bne.n	12bd6 <pinctrl_configure_pins+0x1a>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   12bd0:	2000      	movs	r0, #0
}
   12bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   12bd6:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   12bd8:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   12bdc:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
   12be0:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   12be2:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
   12be6:	bf08      	it	eq
   12be8:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   12bec:	2c22      	cmp	r4, #34	; 0x22
   12bee:	f200 809d 	bhi.w	12d2c <pinctrl_configure_pins+0x170>
   12bf2:	e8df f004 	tbb	[pc, r4]
   12bf6:	2312      	.short	0x2312
   12bf8:	3e2b4228 	.word	0x3e2b4228
   12bfc:	9b9b9b42 	.word	0x9b9b9b42
   12c00:	9b72459b 	.word	0x9b72459b
   12c04:	9b9b9b9b 	.word	0x9b9b9b9b
   12c08:	9b9b9b9b 	.word	0x9b9b9b9b
   12c0c:	83807d75 	.word	0x83807d75
   12c10:	869b9b9b 	.word	0x869b9b9b
   12c14:	95928f8c 	.word	0x95928f8c
   12c18:	98          	.byte	0x98
   12c19:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   12c1a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
   12c1e:	ea4f 1853 	mov.w	r8, r3, lsr #5
        case 1: return NRF_P1;
   12c22:	f1b8 0f01 	cmp.w	r8, #1
   12c26:	bf14      	ite	ne
   12c28:	46b6      	movne	lr, r6
   12c2a:	46be      	moveq	lr, r7
    *p_pin = pin_number & 0x1F;
   12c2c:	f003 041f 	and.w	r4, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   12c30:	fa0c f404 	lsl.w	r4, ip, r4
    p_reg->OUTSET = set_mask;
   12c34:	f8ce 4008 	str.w	r4, [lr, #8]
   12c38:	2401      	movs	r4, #1
   12c3a:	e002      	b.n	12c42 <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = pin;
   12c3c:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   12c40:	2400      	movs	r4, #0
   12c42:	46a6      	mov	lr, r4
   12c44:	e023      	b.n	12c8e <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = pin;
   12c46:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
   12c4a:	e7e8      	b.n	12c1e <pinctrl_configure_pins+0x62>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   12c4c:	2400      	movs	r4, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
   12c4e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return pin_number >> 5;
   12c52:	ea4f 1953 	mov.w	r9, r3, lsr #5
        case 1: return NRF_P1;
   12c56:	f1b9 0f01 	cmp.w	r9, #1
   12c5a:	bf14      	ite	ne
   12c5c:	46b0      	movne	r8, r6
   12c5e:	46b8      	moveq	r8, r7
    *p_pin = pin_number & 0x1F;
   12c60:	f003 0e1f 	and.w	lr, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   12c64:	fa0c fe0e 	lsl.w	lr, ip, lr
    p_reg->OUTCLR = clr_mask;
   12c68:	f8c8 e00c 	str.w	lr, [r8, #12]
   12c6c:	f04f 0e01 	mov.w	lr, #1
   12c70:	e00d      	b.n	12c8e <pinctrl_configure_pins+0xd2>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   12c72:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   12c76:	2401      	movs	r4, #1
   12c78:	e7eb      	b.n	12c52 <pinctrl_configure_pins+0x96>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   12c7a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
   12c7e:	e7df      	b.n	12c40 <pinctrl_configure_pins+0x84>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   12c80:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   12c84:	2d00      	cmp	r5, #0
   12c86:	d1db      	bne.n	12c40 <pinctrl_configure_pins+0x84>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   12c88:	2400      	movs	r4, #0
				drive = NRF_DRIVE_S0D1;
   12c8a:	2506      	movs	r5, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   12c8c:	46a6      	mov	lr, r4
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   12c8e:	f850 ab04 	ldr.w	sl, [r0], #4
    *p_pin = pin_number & 0x1F;
   12c92:	f003 091f 	and.w	r9, r3, #31
   12c96:	f40a 5800 	and.w	r8, sl, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   12c9a:	f1b8 0f00 	cmp.w	r8, #0
    return pin_number >> 5;
   12c9e:	ea4f 1353 	mov.w	r3, r3, lsr #5
   12ca2:	bf1c      	itt	ne
   12ca4:	2401      	movne	r4, #1
   12ca6:	f04f 0e00 	movne.w	lr, #0
        case 0: return NRF_P0;
   12caa:	2b01      	cmp	r3, #1
   12cac:	bf0c      	ite	eq
   12cae:	46b8      	moveq	r8, r7
   12cb0:	46b0      	movne	r8, r6
   12cb2:	eb08 0889 	add.w	r8, r8, r9, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   12cb6:	f8d8 3200 	ldr.w	r3, [r8, #512]	; 0x200
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   12cba:	f3ca 1ac1 	ubfx	sl, sl, #7, #2
   12cbe:	f003 49e0 	and.w	r9, r3, #1879048192	; 0x70000000
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   12cc2:	022b      	lsls	r3, r5, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   12cc4:	ea43 038a 	orr.w	r3, r3, sl, lsl #2
   12cc8:	ea43 030e 	orr.w	r3, r3, lr
   12ccc:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   12cd0:	ea43 0309 	orr.w	r3, r3, r9
    reg->PIN_CNF[pin_number] = cnf;
   12cd4:	f8c8 3200 	str.w	r3, [r8, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   12cd8:	e778      	b.n	12bcc <pinctrl_configure_pins+0x10>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   12cda:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   12cde:	e7d1      	b.n	12c84 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   12ce0:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   12ce4:	6804      	ldr	r4, [r0, #0]
   12ce6:	f3c4 3480 	ubfx	r4, r4, #14, #1
    if (value == 0)
   12cea:	2c00      	cmp	r4, #0
   12cec:	d0c3      	beq.n	12c76 <pinctrl_configure_pins+0xba>
   12cee:	e796      	b.n	12c1e <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   12cf0:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   12cf4:	e7f6      	b.n	12ce4 <pinctrl_configure_pins+0x128>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   12cf6:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   12cfa:	e7f3      	b.n	12ce4 <pinctrl_configure_pins+0x128>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   12cfc:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
   12d00:	e7f0      	b.n	12ce4 <pinctrl_configure_pins+0x128>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   12d02:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   12d06:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   12d08:	f04f 0e00 	mov.w	lr, #0
   12d0c:	e7bf      	b.n	12c8e <pinctrl_configure_pins+0xd2>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   12d0e:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
   12d12:	e784      	b.n	12c1e <pinctrl_configure_pins+0x62>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   12d14:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
   12d18:	e7f5      	b.n	12d06 <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   12d1a:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
   12d1e:	e7f2      	b.n	12d06 <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   12d20:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
   12d24:	e7ef      	b.n	12d06 <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   12d26:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
   12d2a:	e7ec      	b.n	12d06 <pinctrl_configure_pins+0x14a>
		switch (NRF_GET_FUN(pins[i])) {
   12d2c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   12d30:	e74f      	b.n	12bd2 <pinctrl_configure_pins+0x16>
   12d32:	bf00      	nop
   12d34:	40842500 	.word	0x40842500
   12d38:	40842800 	.word	0x40842800

00012d3c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   12d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   12d3e:	794b      	ldrb	r3, [r1, #5]
   12d40:	2b01      	cmp	r3, #1
   12d42:	d029      	beq.n	12d98 <uarte_nrfx_configure+0x5c>
   12d44:	2b03      	cmp	r3, #3
   12d46:	d124      	bne.n	12d92 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   12d48:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   12d4a:	798b      	ldrb	r3, [r1, #6]
   12d4c:	2b03      	cmp	r3, #3
   12d4e:	d120      	bne.n	12d92 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   12d50:	79ce      	ldrb	r6, [r1, #7]
   12d52:	b10e      	cbz	r6, 12d58 <uarte_nrfx_configure+0x1c>
   12d54:	2e01      	cmp	r6, #1
   12d56:	d11c      	bne.n	12d92 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   12d58:	790a      	ldrb	r2, [r1, #4]
   12d5a:	2a01      	cmp	r2, #1
   12d5c:	d01e      	beq.n	12d9c <uarte_nrfx_configure+0x60>
   12d5e:	2a02      	cmp	r2, #2
   12d60:	d020      	beq.n	12da4 <uarte_nrfx_configure+0x68>
   12d62:	b9b2      	cbnz	r2, 12d92 <uarte_nrfx_configure+0x56>
   12d64:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   12d66:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   12d68:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   12d6a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   12d6e:	f8d5 c000 	ldr.w	ip, [r5]
	switch (baudrate) {
   12d72:	d06e      	beq.n	12e52 <uarte_nrfx_configure+0x116>
   12d74:	d833      	bhi.n	12dde <uarte_nrfx_configure+0xa2>
   12d76:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   12d7a:	d06d      	beq.n	12e58 <uarte_nrfx_configure+0x11c>
   12d7c:	d81c      	bhi.n	12db8 <uarte_nrfx_configure+0x7c>
   12d7e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   12d82:	d06b      	beq.n	12e5c <uarte_nrfx_configure+0x120>
   12d84:	d810      	bhi.n	12da8 <uarte_nrfx_configure+0x6c>
   12d86:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   12d8a:	d06a      	beq.n	12e62 <uarte_nrfx_configure+0x126>
   12d8c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   12d90:	d06a      	beq.n	12e68 <uarte_nrfx_configure+0x12c>
		return -ENOTSUP;
   12d92:	f06f 0085 	mvn.w	r0, #133	; 0x85
   12d96:	e05b      	b.n	12e50 <uarte_nrfx_configure+0x114>
	switch (cfg->stop_bits) {
   12d98:	2700      	movs	r7, #0
   12d9a:	e7d6      	b.n	12d4a <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   12d9c:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   12da0:	220e      	movs	r2, #14
   12da2:	e7e0      	b.n	12d66 <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   12da4:	2400      	movs	r4, #0
   12da6:	e7fb      	b.n	12da0 <uarte_nrfx_configure+0x64>
	switch (baudrate) {
   12da8:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   12dac:	d05f      	beq.n	12e6e <uarte_nrfx_configure+0x132>
   12dae:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   12db2:	d1ee      	bne.n	12d92 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   12db4:	4b38      	ldr	r3, [pc, #224]	; (12e98 <uarte_nrfx_configure+0x15c>)
   12db6:	e03c      	b.n	12e32 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   12db8:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   12dbc:	d05a      	beq.n	12e74 <uarte_nrfx_configure+0x138>
   12dbe:	d807      	bhi.n	12dd0 <uarte_nrfx_configure+0x94>
   12dc0:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   12dc4:	d058      	beq.n	12e78 <uarte_nrfx_configure+0x13c>
   12dc6:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   12dca:	d1e2      	bne.n	12d92 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   12dcc:	4b33      	ldr	r3, [pc, #204]	; (12e9c <uarte_nrfx_configure+0x160>)
   12dce:	e030      	b.n	12e32 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   12dd0:	f647 2512 	movw	r5, #31250	; 0x7a12
   12dd4:	42ab      	cmp	r3, r5
   12dd6:	d1dc      	bne.n	12d92 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   12dd8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   12ddc:	e029      	b.n	12e32 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   12dde:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   12de2:	d04b      	beq.n	12e7c <uarte_nrfx_configure+0x140>
   12de4:	d813      	bhi.n	12e0e <uarte_nrfx_configure+0xd2>
   12de6:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   12dea:	d04a      	beq.n	12e82 <uarte_nrfx_configure+0x146>
   12dec:	d809      	bhi.n	12e02 <uarte_nrfx_configure+0xc6>
   12dee:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   12df2:	42ab      	cmp	r3, r5
   12df4:	d047      	beq.n	12e86 <uarte_nrfx_configure+0x14a>
   12df6:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   12dfa:	d1ca      	bne.n	12d92 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   12dfc:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   12e00:	e017      	b.n	12e32 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   12e02:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   12e06:	d1c4      	bne.n	12d92 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   12e08:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   12e0c:	e011      	b.n	12e32 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   12e0e:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   12e12:	d03b      	beq.n	12e8c <uarte_nrfx_configure+0x150>
   12e14:	d808      	bhi.n	12e28 <uarte_nrfx_configure+0xec>
   12e16:	4d22      	ldr	r5, [pc, #136]	; (12ea0 <uarte_nrfx_configure+0x164>)
   12e18:	42ab      	cmp	r3, r5
   12e1a:	d03a      	beq.n	12e92 <uarte_nrfx_configure+0x156>
   12e1c:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   12e20:	d1b7      	bne.n	12d92 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   12e22:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   12e26:	e004      	b.n	12e32 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   12e28:	4d1e      	ldr	r5, [pc, #120]	; (12ea4 <uarte_nrfx_configure+0x168>)
   12e2a:	42ab      	cmp	r3, r5
   12e2c:	d1b1      	bne.n	12d92 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   12e2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   12e32:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   12e34:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
	return config->uarte_regs;
   12e38:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->stop
   12e3a:	433a      	orrs	r2, r7
   12e3c:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
   12e3e:	4334      	orrs	r4, r6
   12e40:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   12e42:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   12e46:	1d2b      	adds	r3, r5, #4
   12e48:	c903      	ldmia	r1, {r0, r1}
   12e4a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   12e4e:	2000      	movs	r0, #0
}
   12e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   12e52:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   12e56:	e7ec      	b.n	12e32 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   12e58:	4b13      	ldr	r3, [pc, #76]	; (12ea8 <uarte_nrfx_configure+0x16c>)
   12e5a:	e7ea      	b.n	12e32 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   12e5c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   12e60:	e7e7      	b.n	12e32 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = 0x00014000;
   12e62:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   12e66:	e7e4      	b.n	12e32 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   12e68:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   12e6c:	e7e1      	b.n	12e32 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   12e6e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   12e72:	e7de      	b.n	12e32 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   12e74:	4b0d      	ldr	r3, [pc, #52]	; (12eac <uarte_nrfx_configure+0x170>)
   12e76:	e7dc      	b.n	12e32 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   12e78:	4b0d      	ldr	r3, [pc, #52]	; (12eb0 <uarte_nrfx_configure+0x174>)
   12e7a:	e7da      	b.n	12e32 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   12e7c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   12e80:	e7d7      	b.n	12e32 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   12e82:	4b0c      	ldr	r3, [pc, #48]	; (12eb4 <uarte_nrfx_configure+0x178>)
   12e84:	e7d5      	b.n	12e32 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   12e86:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   12e8a:	e7d2      	b.n	12e32 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   12e8c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   12e90:	e7cf      	b.n	12e32 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   12e92:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   12e96:	e7cc      	b.n	12e32 <uarte_nrfx_configure+0xf6>
   12e98:	0013b000 	.word	0x0013b000
   12e9c:	004ea000 	.word	0x004ea000
   12ea0:	0003d090 	.word	0x0003d090
   12ea4:	000f4240 	.word	0x000f4240
   12ea8:	00275000 	.word	0x00275000
   12eac:	0075c000 	.word	0x0075c000
   12eb0:	003af000 	.word	0x003af000
   12eb4:	013a9000 	.word	0x013a9000

00012eb8 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   12eb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12ebc:	4680      	mov	r8, r0
   12ebe:	b087      	sub	sp, #28
   12ec0:	2200      	movs	r2, #0
   12ec2:	2101      	movs	r1, #1
   12ec4:	2008      	movs	r0, #8
   12ec6:	f7f8 fb6d 	bl	b5a4 <z_arm_irq_priority_set>
   12eca:	2008      	movs	r0, #8
   12ecc:	f7f8 fb3a 	bl	b544 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   12ed0:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
   12ed2:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
   12ed6:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
   12eda:	683c      	ldr	r4, [r7, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   12edc:	466a      	mov	r2, sp
   12ede:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   12ee2:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   12ee6:	f8d7 900c 	ldr.w	r9, [r7, #12]
   12eea:	4648      	mov	r0, r9
   12eec:	f006 fe10 	bl	19b10 <pinctrl_lookup_state>
	if (ret < 0) {
   12ef0:	1e05      	subs	r5, r0, #0
   12ef2:	db25      	blt.n	12f40 <uarte_0_init+0x88>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   12ef4:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   12ef6:	f8d9 2000 	ldr.w	r2, [r9]
   12efa:	7919      	ldrb	r1, [r3, #4]
   12efc:	6818      	ldr	r0, [r3, #0]
   12efe:	f7ff fe5d 	bl	12bbc <pinctrl_configure_pins>
	if (err < 0) {
   12f02:	1e05      	subs	r5, r0, #0
   12f04:	db1c      	blt.n	12f40 <uarte_0_init+0x88>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   12f06:	4640      	mov	r0, r8
   12f08:	1d31      	adds	r1, r6, #4
   12f0a:	f7ff ff17 	bl	12d3c <uarte_nrfx_configure>
	if (err) {
   12f0e:	4605      	mov	r5, r0
   12f10:	b9b0      	cbnz	r0, 12f40 <uarte_0_init+0x88>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   12f12:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   12f14:	0799      	lsls	r1, r3, #30
   12f16:	d524      	bpl.n	12f62 <uarte_0_init+0xaa>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   12f18:	f106 0018 	add.w	r0, r6, #24
   12f1c:	f001 f81e 	bl	13f5c <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   12f20:	4b24      	ldr	r3, [pc, #144]	; (12fb4 <uarte_0_init+0xfc>)
   12f22:	4298      	cmp	r0, r3
   12f24:	d010      	beq.n	12f48 <uarte_0_init+0x90>
		LOG_ERR("Failed to allocate PPI Channel");
   12f26:	4b24      	ldr	r3, [pc, #144]	; (12fb8 <uarte_0_init+0x100>)
   12f28:	9305      	str	r3, [sp, #20]
   12f2a:	2302      	movs	r3, #2
   12f2c:	9304      	str	r3, [sp, #16]
   12f2e:	462b      	mov	r3, r5
		return -EIO;
   12f30:	f06f 0504 	mvn.w	r5, #4
   12f34:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12f38:	4820      	ldr	r0, [pc, #128]	; (12fbc <uarte_0_init+0x104>)
   12f3a:	aa04      	add	r2, sp, #16
   12f3c:	f7f7 fcde 	bl	a8fc <z_impl_z_log_msg_static_create>
UART_NRF_UARTE_DEVICE(0);
   12f40:	4628      	mov	r0, r5
   12f42:	b007      	add	sp, #28
   12f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12f48:	7e33      	ldrb	r3, [r6, #24]
   12f4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   12f4e:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   12f52:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   12f56:	2301      	movs	r3, #1
   12f58:	7e32      	ldrb	r2, [r6, #24]
   12f5a:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   12f5c:	4a18      	ldr	r2, [pc, #96]	; (12fc0 <uarte_0_init+0x108>)
   12f5e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   12f62:	2308      	movs	r3, #8
   12f64:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   12f68:	7a3b      	ldrb	r3, [r7, #8]
   12f6a:	b953      	cbnz	r3, 12f82 <uarte_0_init+0xca>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12f6c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   12f70:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   12f74:	6973      	ldr	r3, [r6, #20]
   12f76:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   12f7a:	2301      	movs	r3, #1
   12f7c:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12f80:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   12f82:	687b      	ldr	r3, [r7, #4]
   12f84:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   12f86:	bf5c      	itt	pl
   12f88:	f44f 7380 	movpl.w	r3, #256	; 0x100
   12f8c:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   12f90:	687b      	ldr	r3, [r7, #4]
   12f92:	06db      	lsls	r3, r3, #27
   12f94:	bf44      	itt	mi
   12f96:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   12f9a:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   12f9e:	6933      	ldr	r3, [r6, #16]
   12fa0:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   12fa4:	2300      	movs	r3, #0
   12fa6:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12faa:	2301      	movs	r3, #1
   12fac:	60a3      	str	r3, [r4, #8]
   12fae:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   12fb0:	e7c6      	b.n	12f40 <uarte_0_init+0x88>
   12fb2:	bf00      	nop
   12fb4:	0bad0000 	.word	0x0bad0000
   12fb8:	0001e3a2 	.word	0x0001e3a2
   12fbc:	0001b950 	.word	0x0001b950
   12fc0:	40017000 	.word	0x40017000

00012fc4 <uarte_nrfx_poll_out>:
{
   12fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12fc6:	4604      	mov	r4, r0
   12fc8:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
   12fca:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   12fcc:	f007 fd2a 	bl	1aa24 <k_is_in_isr>
   12fd0:	b9b0      	cbnz	r0, 13000 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   12fd2:	4b2e      	ldr	r3, [pc, #184]	; (1308c <uarte_nrfx_poll_out+0xc8>)
   12fd4:	781b      	ldrb	r3, [r3, #0]
   12fd6:	b19b      	cbz	r3, 13000 <uarte_nrfx_poll_out+0x3c>
{
   12fd8:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   12fda:	6860      	ldr	r0, [r4, #4]
   12fdc:	f006 fdce 	bl	19b7c <is_tx_ready.isra.0>
   12fe0:	bb00      	cbnz	r0, 13024 <uarte_nrfx_poll_out+0x60>
   12fe2:	2001      	movs	r0, #1
   12fe4:	f006 fe7c 	bl	19ce0 <nrfx_busy_wait>
   12fe8:	3e01      	subs	r6, #1
   12fea:	d1f6      	bne.n	12fda <uarte_nrfx_poll_out+0x16>
   12fec:	2100      	movs	r1, #0
   12fee:	2021      	movs	r0, #33	; 0x21
   12ff0:	f003 f826 	bl	16040 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   12ff4:	e7f0      	b.n	12fd8 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
   12ff6:	f386 8811 	msr	BASEPRI, r6
   12ffa:	f3bf 8f6f 	isb	sy
}
   12ffe:	e7f5      	b.n	12fec <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   13000:	f04f 0320 	mov.w	r3, #32
   13004:	f3ef 8611 	mrs	r6, BASEPRI
   13008:	f383 8812 	msr	BASEPRI_MAX, r3
   1300c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   13010:	6860      	ldr	r0, [r4, #4]
   13012:	4631      	mov	r1, r6
   13014:	f006 fdb2 	bl	19b7c <is_tx_ready.isra.0>
   13018:	b990      	cbnz	r0, 13040 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   1301a:	f386 8811 	msr	BASEPRI, r6
   1301e:	f3bf 8f6f 	isb	sy
}
   13022:	e7ed      	b.n	13000 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   13024:	f04f 0320 	mov.w	r3, #32
   13028:	f3ef 8611 	mrs	r6, BASEPRI
   1302c:	f383 8812 	msr	BASEPRI_MAX, r3
   13030:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   13034:	6860      	ldr	r0, [r4, #4]
   13036:	4631      	mov	r1, r6
   13038:	f006 fda0 	bl	19b7c <is_tx_ready.isra.0>
   1303c:	2800      	cmp	r0, #0
   1303e:	d0da      	beq.n	12ff6 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
   13040:	693b      	ldr	r3, [r7, #16]
   13042:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
   13044:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   13046:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
   13048:	6813      	ldr	r3, [r2, #0]
   1304a:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1304e:	2001      	movs	r0, #1
   13050:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13054:	2000      	movs	r0, #0
   13056:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   1305a:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
   1305e:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   13062:	6852      	ldr	r2, [r2, #4]
   13064:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
   13068:	06d2      	lsls	r2, r2, #27
   1306a:	d508      	bpl.n	1307e <uarte_nrfx_poll_out+0xba>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1306c:	2008      	movs	r0, #8
	return config->uarte_regs;
   1306e:	6862      	ldr	r2, [r4, #4]
   13070:	6812      	ldr	r2, [r2, #0]
   13072:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   13076:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1307a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1307e:	2201      	movs	r2, #1
   13080:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   13082:	f381 8811 	msr	BASEPRI, r1
   13086:	f3bf 8f6f 	isb	sy
}
   1308a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1308c:	20009c8c 	.word	0x20009c8c

00013090 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   13090:	2301      	movs	r3, #1
   13092:	4083      	lsls	r3, r0
{
   13094:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   13096:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13098:	4a0b      	ldr	r2, [pc, #44]	; (130c8 <compare_int_lock+0x38>)
   1309a:	e8d2 1fef 	ldaex	r1, [r2]
   1309e:	ea01 0504 	and.w	r5, r1, r4
   130a2:	e8c2 5fe6 	stlex	r6, r5, [r2]
   130a6:	2e00      	cmp	r6, #0
   130a8:	d1f7      	bne.n	1309a <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   130aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   130ae:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   130b0:	4806      	ldr	r0, [pc, #24]	; (130cc <compare_int_lock+0x3c>)
   130b2:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   130b6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   130ba:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   130be:	420b      	tst	r3, r1
}
   130c0:	bf14      	ite	ne
   130c2:	2001      	movne	r0, #1
   130c4:	2000      	moveq	r0, #0
   130c6:	bd70      	pop	{r4, r5, r6, pc}
   130c8:	20009b1c 	.word	0x20009b1c
   130cc:	40015000 	.word	0x40015000

000130d0 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   130d0:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   130d2:	490e      	ldr	r1, [pc, #56]	; (1310c <sys_clock_timeout_handler+0x3c>)
	return absolute_time & COUNTER_MAX;
   130d4:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   130d8:	e9d1 3400 	ldrd	r3, r4, [r1]
   130dc:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   130de:	18c3      	adds	r3, r0, r3
   130e0:	f144 0400 	adc.w	r4, r4, #0
   130e4:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   130e8:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   130ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   130f0:	d209      	bcs.n	13106 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   130f2:	4b07      	ldr	r3, [pc, #28]	; (13110 <sys_clock_timeout_handler+0x40>)
   130f4:	681b      	ldr	r3, [r3, #0]
   130f6:	0a1a      	lsrs	r2, r3, #8
   130f8:	061b      	lsls	r3, r3, #24
   130fa:	199c      	adds	r4, r3, r6
   130fc:	4b05      	ldr	r3, [pc, #20]	; (13114 <sys_clock_timeout_handler+0x44>)
   130fe:	f142 0500 	adc.w	r5, r2, #0
   13102:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   13106:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   13108:	f003 b902 	b.w	16310 <sys_clock_announce>
   1310c:	20009568 	.word	0x20009568
   13110:	20009b20 	.word	0x20009b20
   13114:	20009570 	.word	0x20009570

00013118 <compare_int_unlock>:
	if (key) {
   13118:	b1d9      	cbz	r1, 13152 <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
   1311a:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1311c:	4a0d      	ldr	r2, [pc, #52]	; (13154 <compare_int_unlock+0x3c>)
   1311e:	4083      	lsls	r3, r0
   13120:	e8d2 cfef 	ldaex	ip, [r2]
   13124:	ea4c 0c03 	orr.w	ip, ip, r3
   13128:	e8c2 cfe1 	stlex	r1, ip, [r2]
   1312c:	2900      	cmp	r1, #0
   1312e:	d1f7      	bne.n	13120 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   13130:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   13134:	4a08      	ldr	r2, [pc, #32]	; (13158 <compare_int_unlock+0x40>)
   13136:	4083      	lsls	r3, r0
   13138:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1313c:	4b07      	ldr	r3, [pc, #28]	; (1315c <compare_int_unlock+0x44>)
   1313e:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   13142:	40c3      	lsrs	r3, r0
   13144:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13146:	bf42      	ittt	mi
   13148:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   1314c:	4b04      	ldrmi	r3, [pc, #16]	; (13160 <compare_int_unlock+0x48>)
   1314e:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   13152:	4770      	bx	lr
   13154:	20009b1c 	.word	0x20009b1c
   13158:	40015000 	.word	0x40015000
   1315c:	20009b14 	.word	0x20009b14
   13160:	e000e100 	.word	0xe000e100

00013164 <z_nrf_rtc_timer_compare_evt_address_get>:
    p_reg->EVTENCLR = mask;
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
   13164:	b2c3      	uxtb	r3, r0
}
   13166:	4802      	ldr	r0, [pc, #8]	; (13170 <z_nrf_rtc_timer_compare_evt_address_get+0xc>)
   13168:	009b      	lsls	r3, r3, #2
   1316a:	4418      	add	r0, r3
   1316c:	4770      	bx	lr
   1316e:	bf00      	nop
   13170:	40015140 	.word	0x40015140

00013174 <z_nrf_rtc_timer_compare_read>:
    return p_reg->CC[ch];
   13174:	4b02      	ldr	r3, [pc, #8]	; (13180 <z_nrf_rtc_timer_compare_read+0xc>)
   13176:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1317a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   1317e:	4770      	bx	lr
   13180:	40015000 	.word	0x40015000

00013184 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   13184:	4b0d      	ldr	r3, [pc, #52]	; (131bc <z_nrf_rtc_timer_read+0x38>)
   13186:	6818      	ldr	r0, [r3, #0]
   13188:	0a01      	lsrs	r1, r0, #8
   1318a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1318c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   13190:	4b0b      	ldr	r3, [pc, #44]	; (131c0 <z_nrf_rtc_timer_read+0x3c>)
   13192:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   13196:	1818      	adds	r0, r3, r0
   13198:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1319c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   131a0:	d20a      	bcs.n	131b8 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   131a2:	4b08      	ldr	r3, [pc, #32]	; (131c4 <z_nrf_rtc_timer_read+0x40>)
   131a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   131a8:	4290      	cmp	r0, r2
   131aa:	eb71 0303 	sbcs.w	r3, r1, r3
   131ae:	d203      	bcs.n	131b8 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   131b0:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   131b4:	f141 0100 	adc.w	r1, r1, #0
}
   131b8:	4770      	bx	lr
   131ba:	bf00      	nop
   131bc:	20009b20 	.word	0x20009b20
   131c0:	40015000 	.word	0x40015000
   131c4:	20009570 	.word	0x20009570

000131c8 <compare_set>:
{
   131c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131cc:	4616      	mov	r6, r2
   131ce:	461f      	mov	r7, r3
   131d0:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
   131d2:	f7ff ff5d 	bl	13090 <compare_int_lock>
   131d6:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   131d8:	f7ff ffd4 	bl	13184 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   131dc:	42b0      	cmp	r0, r6
   131de:	eb71 0307 	sbcs.w	r3, r1, r7
   131e2:	d250      	bcs.n	13286 <compare_set+0xbe>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   131e4:	4b38      	ldr	r3, [pc, #224]	; (132c8 <compare_set+0x100>)
   131e6:	1a30      	subs	r0, r6, r0
   131e8:	eb67 0101 	sbc.w	r1, r7, r1
   131ec:	4298      	cmp	r0, r3
   131ee:	f171 0100 	sbcs.w	r1, r1, #0
   131f2:	d265      	bcs.n	132c0 <compare_set+0xf8>
		if (target_time != cc_data[chan].target_time) {
   131f4:	4b35      	ldr	r3, [pc, #212]	; (132cc <compare_set+0x104>)
   131f6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   131fa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   131fe:	429f      	cmp	r7, r3
   13200:	bf08      	it	eq
   13202:	4296      	cmpeq	r6, r2
   13204:	d049      	beq.n	1329a <compare_set+0xd2>
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   13206:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    p_reg->EVTENCLR = mask;
   1320a:	4931      	ldr	r1, [pc, #196]	; (132d0 <compare_set+0x108>)
   1320c:	fa09 f904 	lsl.w	r9, r9, r4
	event_clear(chan);
   13210:	4620      	mov	r0, r4
	return absolute_time & COUNTER_MAX;
   13212:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
   13216:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
   1321a:	f006 fcf9 	bl	19c10 <event_clear>
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   1321e:	f04f 0a03 	mov.w	sl, #3
	uint32_t cc_val = req_cc;
   13222:	4658      	mov	r0, fp
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   13224:	f104 0550 	add.w	r5, r4, #80	; 0x50
   13228:	00ad      	lsls	r5, r5, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1322a:	b2ad      	uxth	r5, r5
   1322c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
   13230:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   13234:	4a27      	ldr	r2, [pc, #156]	; (132d4 <compare_set+0x10c>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13236:	f505 35a8 	add.w	r5, r5, #86016	; 0x15000
    p_reg->CC[ch] = cc_val;
   1323a:	9301      	str	r3, [sp, #4]
   1323c:	f8dd c004 	ldr.w	ip, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   13240:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
   13244:	f841 302c 	str.w	r3, [r1, ip, lsl #2]
    p_reg->EVTENSET = mask;
   13248:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
   1324c:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   13250:	eba0 0008 	sub.w	r0, r0, r8
   13254:	3803      	subs	r0, #3
   13256:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   1325a:	4290      	cmp	r0, r2
   1325c:	d91d      	bls.n	1329a <compare_set+0xd2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1325e:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
   13260:	b160      	cbz	r0, 1327c <compare_set+0xb4>
     return p_reg->COUNTER;
   13262:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   13266:	eba8 000b 	sub.w	r0, r8, fp
   1326a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   1326e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   13272:	d912      	bls.n	1329a <compare_set+0xd2>
					event_clear(chan);
   13274:	4620      	mov	r0, r4
   13276:	f006 fccb 	bl	19c10 <event_clear>
   1327a:	4a16      	ldr	r2, [pc, #88]	; (132d4 <compare_set+0x10c>)
			cc_val = now + cc_inc;
   1327c:	eb0a 0008 	add.w	r0, sl, r8
			cc_inc++;
   13280:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
   13284:	e7da      	b.n	1323c <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   13286:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13288:	4a13      	ldr	r2, [pc, #76]	; (132d8 <compare_set+0x110>)
   1328a:	40a3      	lsls	r3, r4
   1328c:	e8d2 0fef 	ldaex	r0, [r2]
   13290:	4318      	orrs	r0, r3
   13292:	e8c2 0fe1 	stlex	r1, r0, [r2]
   13296:	2900      	cmp	r1, #0
   13298:	d1f8      	bne.n	1328c <compare_set+0xc4>
	return ret;
   1329a:	2500      	movs	r5, #0
	cc_data[chan].target_time = target_time;
   1329c:	490b      	ldr	r1, [pc, #44]	; (132cc <compare_set+0x104>)
	cc_data[chan].callback = handler;
   1329e:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   132a0:	0123      	lsls	r3, r4, #4
   132a2:	eb01 1204 	add.w	r2, r1, r4, lsl #4
	cc_data[chan].callback = handler;
   132a6:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
   132a8:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].user_context = user_data;
   132ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   132ae:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   132b0:	4620      	mov	r0, r4
   132b2:	9900      	ldr	r1, [sp, #0]
   132b4:	f7ff ff30 	bl	13118 <compare_int_unlock>
}
   132b8:	4628      	mov	r0, r5
   132ba:	b003      	add	sp, #12
   132bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
   132c0:	f06f 0515 	mvn.w	r5, #21
   132c4:	e7f4      	b.n	132b0 <compare_set+0xe8>
   132c6:	bf00      	nop
   132c8:	00800001 	.word	0x00800001
   132cc:	20009548 	.word	0x20009548
   132d0:	40015000 	.word	0x40015000
   132d4:	007ffffd 	.word	0x007ffffd
   132d8:	20009b14 	.word	0x20009b14

000132dc <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
   132dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENSET = mask;
   132de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    p_reg->PRESCALER = val;
   132e2:	2500      	movs	r5, #0
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   132e4:	f04f 30ff 	mov.w	r0, #4294967295
   132e8:	f04f 31ff 	mov.w	r1, #4294967295
    p_reg->INTENCLR = mask;
   132ec:	4c1c      	ldr	r4, [pc, #112]	; (13360 <sys_clock_driver_init+0x84>)
   132ee:	4b1d      	ldr	r3, [pc, #116]	; (13364 <sys_clock_driver_init+0x88>)
    p_reg->INTENSET = mask;
   132f0:	2602      	movs	r6, #2
    p_reg->INTENCLR = mask;
   132f2:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   132f6:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
   132fa:	4b1b      	ldr	r3, [pc, #108]	; (13368 <sys_clock_driver_init+0x8c>)
    p_reg->PRESCALER = val;
   132fc:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   13300:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   13304:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
   13308:	e9c3 0106 	strd	r0, r1, [r3, #24]
   1330c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13310:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   13314:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   13318:	4b14      	ldr	r3, [pc, #80]	; (1336c <sys_clock_driver_init+0x90>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1331a:	2101      	movs	r1, #1
   1331c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   13320:	2015      	movs	r0, #21
   13322:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   13326:	462a      	mov	r2, r5
   13328:	f7f8 f93c 	bl	b5a4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1332c:	2015      	movs	r0, #21
   1332e:	f7f8 f909 	bl	b544 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   13332:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   13334:	2203      	movs	r2, #3
   13336:	60a3      	str	r3, [r4, #8]
   13338:	6023      	str	r3, [r4, #0]
   1333a:	4b0d      	ldr	r3, [pc, #52]	; (13370 <sys_clock_driver_init+0x94>)
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1333c:	4628      	mov	r0, r5
	int_mask = BIT_MASK(CHAN_COUNT);
   1333e:	601a      	str	r2, [r3, #0]
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   13340:	4b0c      	ldr	r3, [pc, #48]	; (13374 <sys_clock_driver_init+0x98>)
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   13342:	4a0d      	ldr	r2, [pc, #52]	; (13378 <sys_clock_driver_init+0x9c>)
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   13344:	601e      	str	r6, [r3, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   13346:	4b0d      	ldr	r3, [pc, #52]	; (1337c <sys_clock_driver_init+0xa0>)
   13348:	9501      	str	r5, [sp, #4]
   1334a:	9300      	str	r3, [sp, #0]
   1334c:	2300      	movs	r3, #0
   1334e:	f7ff ff3b 	bl	131c8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   13352:	4630      	mov	r0, r6
   13354:	f7ff f93c 	bl	125d0 <z_nrf_clock_control_lf_on>

	return 0;
}
   13358:	4628      	mov	r0, r5
   1335a:	b002      	add	sp, #8
   1335c:	bd70      	pop	{r4, r5, r6, pc}
   1335e:	bf00      	nop
   13360:	40015000 	.word	0x40015000
   13364:	000f0003 	.word	0x000f0003
   13368:	20009548 	.word	0x20009548
   1336c:	e000e100 	.word	0xe000e100
   13370:	20009b1c 	.word	0x20009b1c
   13374:	20009b18 	.word	0x20009b18
   13378:	007fffff 	.word	0x007fffff
   1337c:	000130d1 	.word	0x000130d1

00013380 <rtc_nrf_isr>:
{
   13380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return p_reg->INTENSET & mask;
   13384:	4b39      	ldr	r3, [pc, #228]	; (1346c <rtc_nrf_isr+0xec>)
   13386:	b085      	sub	sp, #20
   13388:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1338c:	0792      	lsls	r2, r2, #30
   1338e:	d50b      	bpl.n	133a8 <rtc_nrf_isr+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13390:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   13394:	b142      	cbz	r2, 133a8 <rtc_nrf_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13396:	2200      	movs	r2, #0
   13398:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   1339c:	4a34      	ldr	r2, [pc, #208]	; (13470 <rtc_nrf_isr+0xf0>)
   1339e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   133a2:	6813      	ldr	r3, [r2, #0]
   133a4:	3301      	adds	r3, #1
   133a6:	6013      	str	r3, [r2, #0]
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   133a8:	4d32      	ldr	r5, [pc, #200]	; (13474 <rtc_nrf_isr+0xf4>)
   133aa:	2400      	movs	r4, #0
   133ac:	46a8      	mov	r8, r5
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   133ae:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    return p_reg->INTENSET & mask;
   133b2:	4f2e      	ldr	r7, [pc, #184]	; (1346c <rtc_nrf_isr+0xec>)
   133b4:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
   133b8:	fa06 f904 	lsl.w	r9, r6, r4
   133bc:	ea19 0f03 	tst.w	r9, r3
   133c0:	d02e      	beq.n	13420 <rtc_nrf_isr+0xa0>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   133c2:	2301      	movs	r3, #1
   133c4:	40a3      	lsls	r3, r4
   133c6:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   133c8:	492b      	ldr	r1, [pc, #172]	; (13478 <rtc_nrf_isr+0xf8>)
   133ca:	e8d1 2fef 	ldaex	r2, [r1]
   133ce:	ea02 0003 	and.w	r0, r2, r3
   133d2:	e8c1 0fec 	stlex	ip, r0, [r1]
   133d6:	f1bc 0f00 	cmp.w	ip, #0
   133da:	d1f6      	bne.n	133ca <rtc_nrf_isr+0x4a>
   133dc:	fa22 f304 	lsr.w	r3, r2, r4
   133e0:	07db      	lsls	r3, r3, #31
   133e2:	d403      	bmi.n	133ec <rtc_nrf_isr+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   133e4:	4b25      	ldr	r3, [pc, #148]	; (1347c <rtc_nrf_isr+0xfc>)
   133e6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   133ea:	b1cb      	cbz	r3, 13420 <rtc_nrf_isr+0xa0>
			event_clear(chan);
   133ec:	4620      	mov	r0, r4
   133ee:	f006 fc0f 	bl	19c10 <event_clear>
		curr_time = z_nrf_rtc_timer_read();
   133f2:	f7ff fec7 	bl	13184 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   133f6:	f04f 0220 	mov.w	r2, #32
   133fa:	f3ef 8311 	mrs	r3, BASEPRI
   133fe:	f382 8812 	msr	BASEPRI_MAX, r2
   13402:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   13406:	eb08 1c04 	add.w	ip, r8, r4, lsl #4
   1340a:	e9dc ab02 	ldrd	sl, fp, [ip, #8]
		if (curr_time >= expire_time) {
   1340e:	4550      	cmp	r0, sl
   13410:	eb71 010b 	sbcs.w	r1, r1, fp
   13414:	9302      	str	r3, [sp, #8]
   13416:	d20a      	bcs.n	1342e <rtc_nrf_isr+0xae>
	__asm__ volatile(
   13418:	f383 8811 	msr	BASEPRI, r3
   1341c:	f3bf 8f6f 	isb	sy
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   13420:	3510      	adds	r5, #16
   13422:	b114      	cbz	r4, 1342a <rtc_nrf_isr+0xaa>
}
   13424:	b005      	add	sp, #20
   13426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1342a:	2401      	movs	r4, #1
   1342c:	e7c2      	b.n	133b4 <rtc_nrf_isr+0x34>
			cc_data[chan].callback = NULL;
   1342e:	2000      	movs	r0, #0
			user_context = cc_data[chan].user_context;
   13430:	e9d5 1300 	ldrd	r1, r3, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   13434:	f04f 32ff 	mov.w	r2, #4294967295
			user_context = cc_data[chan].user_context;
   13438:	9303      	str	r3, [sp, #12]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1343a:	f04f 33ff 	mov.w	r3, #4294967295
			cc_data[chan].callback = NULL;
   1343e:	6028      	str	r0, [r5, #0]
    p_reg->EVTENCLR = mask;
   13440:	480a      	ldr	r0, [pc, #40]	; (1346c <rtc_nrf_isr+0xec>)
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   13442:	e9cc 2302 	strd	r2, r3, [ip, #8]
   13446:	f8c0 9348 	str.w	r9, [r0, #840]	; 0x348
			event_clear(chan);
   1344a:	4620      	mov	r0, r4
   1344c:	f006 fbe0 	bl	19c10 <event_clear>
   13450:	9b02      	ldr	r3, [sp, #8]
   13452:	f383 8811 	msr	BASEPRI, r3
   13456:	f3bf 8f6f 	isb	sy
		if (handler) {
   1345a:	2900      	cmp	r1, #0
   1345c:	d0e0      	beq.n	13420 <rtc_nrf_isr+0xa0>
			handler(chan, expire_time, user_context);
   1345e:	9b03      	ldr	r3, [sp, #12]
   13460:	4652      	mov	r2, sl
   13462:	9300      	str	r3, [sp, #0]
   13464:	465b      	mov	r3, fp
   13466:	4788      	blx	r1
   13468:	e7da      	b.n	13420 <rtc_nrf_isr+0xa0>
   1346a:	bf00      	nop
   1346c:	40015000 	.word	0x40015000
   13470:	20009b20 	.word	0x20009b20
   13474:	20009548 	.word	0x20009548
   13478:	20009b14 	.word	0x20009b14
   1347c:	40015140 	.word	0x40015140

00013480 <z_nrf_rtc_timer_chan_alloc>:
{
   13480:	b570      	push	{r4, r5, r6, lr}
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   13482:	2401      	movs	r4, #1
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
   13484:	4b0c      	ldr	r3, [pc, #48]	; (134b8 <z_nrf_rtc_timer_chan_alloc+0x38>)
   13486:	6818      	ldr	r0, [r3, #0]
   13488:	b190      	cbz	r0, 134b0 <z_nrf_rtc_timer_chan_alloc+0x30>
   1348a:	fab0 f080 	clz	r0, r0
   1348e:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   13492:	fa04 f100 	lsl.w	r1, r4, r0
   13496:	43c9      	mvns	r1, r1
   13498:	e8d3 2fef 	ldaex	r2, [r3]
   1349c:	ea02 0501 	and.w	r5, r2, r1
   134a0:	e8c3 5fe6 	stlex	r6, r5, [r3]
   134a4:	2e00      	cmp	r6, #0
   134a6:	d1f7      	bne.n	13498 <z_nrf_rtc_timer_chan_alloc+0x18>
	} while (!(prev & BIT(chan)));
   134a8:	40c2      	lsrs	r2, r0
   134aa:	07d2      	lsls	r2, r2, #31
   134ac:	d5eb      	bpl.n	13486 <z_nrf_rtc_timer_chan_alloc+0x6>
}
   134ae:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   134b0:	f06f 000b 	mvn.w	r0, #11
   134b4:	e7fb      	b.n	134ae <z_nrf_rtc_timer_chan_alloc+0x2e>
   134b6:	bf00      	nop
   134b8:	20009b18 	.word	0x20009b18

000134bc <z_nrf_rtc_timer_chan_free>:
	atomic_or(&alloc_mask, BIT(chan));
   134bc:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   134be:	4a05      	ldr	r2, [pc, #20]	; (134d4 <z_nrf_rtc_timer_chan_free+0x18>)
   134c0:	4083      	lsls	r3, r0
   134c2:	e8d2 0fef 	ldaex	r0, [r2]
   134c6:	4318      	orrs	r0, r3
   134c8:	e8c2 0fe1 	stlex	r1, r0, [r2]
   134cc:	2900      	cmp	r1, #0
   134ce:	d1f8      	bne.n	134c2 <z_nrf_rtc_timer_chan_free+0x6>
}
   134d0:	4770      	bx	lr
   134d2:	bf00      	nop
   134d4:	20009b18 	.word	0x20009b18

000134d8 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   134d8:	1c43      	adds	r3, r0, #1
{
   134da:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   134dc:	d021      	beq.n	13522 <sys_clock_set_timeout+0x4a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   134de:	2801      	cmp	r0, #1
   134e0:	dd21      	ble.n	13526 <sys_clock_set_timeout+0x4e>
   134e2:	4a12      	ldr	r2, [pc, #72]	; (1352c <sys_clock_set_timeout+0x54>)
   134e4:	4b12      	ldr	r3, [pc, #72]	; (13530 <sys_clock_set_timeout+0x58>)
   134e6:	4290      	cmp	r0, r2
   134e8:	bfd4      	ite	le
   134ea:	4604      	movle	r4, r0
   134ec:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   134ee:	f7ff fe49 	bl	13184 <z_nrf_rtc_timer_read>
   134f2:	4b10      	ldr	r3, [pc, #64]	; (13534 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
   134f4:	490e      	ldr	r1, [pc, #56]	; (13530 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   134f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   134fa:	1a80      	subs	r0, r0, r2
		cyc = 0;
   134fc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   13500:	bf28      	it	cs
   13502:	2400      	movcs	r4, #0
	cyc += unannounced;
   13504:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   13506:	428c      	cmp	r4, r1
   13508:	bf28      	it	cs
   1350a:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
   1350c:	2000      	movs	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1350e:	490a      	ldr	r1, [pc, #40]	; (13538 <sys_clock_set_timeout+0x60>)
	uint64_t target_time = cyc + last_count;
   13510:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   13512:	9001      	str	r0, [sp, #4]
   13514:	9100      	str	r1, [sp, #0]
   13516:	f143 0300 	adc.w	r3, r3, #0
   1351a:	f7ff fe55 	bl	131c8 <compare_set>
}
   1351e:	b002      	add	sp, #8
   13520:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
   13522:	4c03      	ldr	r4, [pc, #12]	; (13530 <sys_clock_set_timeout+0x58>)
   13524:	e7e3      	b.n	134ee <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   13526:	2401      	movs	r4, #1
   13528:	e7e1      	b.n	134ee <sys_clock_set_timeout+0x16>
   1352a:	bf00      	nop
   1352c:	007ffffe 	.word	0x007ffffe
   13530:	007fffff 	.word	0x007fffff
   13534:	20009568 	.word	0x20009568
   13538:	000130d1 	.word	0x000130d1

0001353c <sys_clock_elapsed>:
{
   1353c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1353e:	f7ff fe21 	bl	13184 <z_nrf_rtc_timer_read>
   13542:	4b02      	ldr	r3, [pc, #8]	; (1354c <sys_clock_elapsed+0x10>)
   13544:	681b      	ldr	r3, [r3, #0]
}
   13546:	1ac0      	subs	r0, r0, r3
   13548:	bd08      	pop	{r3, pc}
   1354a:	bf00      	nop
   1354c:	20009568 	.word	0x20009568

00013550 <get_buttons.part.0>:
	}

	return err;
}

static uint32_t get_buttons(void)
   13550:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
		int val;

		val = gpio_pin_get_dt(&buttons[i]);
		if (val < 0) {
			LOG_ERR("Cannot read gpio pin");
   13552:	4b07      	ldr	r3, [pc, #28]	; (13570 <get_buttons.part.0+0x20>)
   13554:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13558:	9305      	str	r3, [sp, #20]
   1355a:	2302      	movs	r3, #2
   1355c:	4805      	ldr	r0, [pc, #20]	; (13574 <get_buttons.part.0+0x24>)
   1355e:	aa04      	add	r2, sp, #16
   13560:	9304      	str	r3, [sp, #16]
   13562:	f006 fb95 	bl	19c90 <z_log_msg_static_create.constprop.0>
			ret |= 1U << i;
		}
	}

	return ret;
}
   13566:	2000      	movs	r0, #0
   13568:	b007      	add	sp, #28
   1356a:	f85d fb04 	ldr.w	pc, [sp], #4
   1356e:	bf00      	nop
   13570:	0001e3db 	.word	0x0001e3db
   13574:	0001b8d8 	.word	0x0001b8d8

00013578 <get_buttons>:
{
   13578:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	uint32_t ret = 0;
   1357c:	2400      	movs	r4, #0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_port_get(port, &value);
	if (ret == 0) {
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   1357e:	f04f 0801 	mov.w	r8, #1
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   13582:	4625      	mov	r5, r4
   13584:	4e12      	ldr	r6, [pc, #72]	; (135d0 <get_buttons+0x58>)
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
	return gpio_pin_get(spec->port, spec->pin);
   13586:	6830      	ldr	r0, [r6, #0]
   13588:	7937      	ldrb	r7, [r6, #4]
	const struct gpio_driver_data *const data =
   1358a:	f8d0 9010 	ldr.w	r9, [r0, #16]
	return api->port_get_raw(port, value);
   1358e:	6883      	ldr	r3, [r0, #8]
   13590:	a901      	add	r1, sp, #4
   13592:	685b      	ldr	r3, [r3, #4]
   13594:	4798      	blx	r3
	if (ret == 0) {
   13596:	2800      	cmp	r0, #0
   13598:	d00c      	beq.n	135b4 <get_buttons+0x3c>
		if (val < 0) {
   1359a:	db14      	blt.n	135c6 <get_buttons+0x4e>
			ret |= 1U << i;
   1359c:	fa08 f305 	lsl.w	r3, r8, r5
   135a0:	431c      	orrs	r4, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   135a2:	3501      	adds	r5, #1
   135a4:	2d04      	cmp	r5, #4
   135a6:	f106 0608 	add.w	r6, r6, #8
   135aa:	d1ec      	bne.n	13586 <get_buttons+0xe>
}
   135ac:	4620      	mov	r0, r4
   135ae:	b003      	add	sp, #12
   135b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*value ^= data->invert;
   135b4:	f8d9 2000 	ldr.w	r2, [r9]
   135b8:	9b01      	ldr	r3, [sp, #4]
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   135ba:	fa08 f707 	lsl.w	r7, r8, r7
		*value ^= data->invert;
   135be:	4053      	eors	r3, r2
		if (val) {
   135c0:	423b      	tst	r3, r7
   135c2:	d0ee      	beq.n	135a2 <get_buttons+0x2a>
   135c4:	e7ea      	b.n	1359c <get_buttons+0x24>
}
   135c6:	b003      	add	sp, #12
   135c8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   135cc:	f7ff bfc0 	b.w	13550 <get_buttons.part.0>
   135d0:	0001c19c 	.word	0x0001c19c

000135d4 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   135d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   135d8:	4607      	mov	r7, r0
   135da:	4688      	mov	r8, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   135dc:	2500      	movs	r5, #0
   135de:	4e14      	ldr	r6, [pc, #80]	; (13630 <dk_set_leds_state.part.0+0x5c>)
int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   135e0:	b086      	sub	sp, #24
		int val, err;

		if (BIT(i) & leds_on_mask) {
   135e2:	fa27 f205 	lsr.w	r2, r7, r5
   135e6:	f012 0201 	ands.w	r2, r2, #1
   135ea:	d117      	bne.n	1361c <dk_set_leds_state.part.0+0x48>
			val = 1;
		} else if (BIT(i) & leds_off_mask) {
   135ec:	fa28 f305 	lsr.w	r3, r8, r5
   135f0:	07db      	lsls	r3, r3, #31
   135f2:	d515      	bpl.n	13620 <dk_set_leds_state.part.0+0x4c>
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
   135f4:	7931      	ldrb	r1, [r6, #4]
   135f6:	6830      	ldr	r0, [r6, #0]
   135f8:	f006 fb3a 	bl	19c70 <gpio_pin_set>
		} else {
			continue;
		}

		err = gpio_pin_set_dt(&leds[i], val);
		if (err) {
   135fc:	4604      	mov	r4, r0
   135fe:	b178      	cbz	r0, 13620 <dk_set_leds_state.part.0+0x4c>
			LOG_ERR("Cannot write LED gpio");
   13600:	4b0c      	ldr	r3, [pc, #48]	; (13634 <dk_set_leds_state.part.0+0x60>)
   13602:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13606:	9305      	str	r3, [sp, #20]
   13608:	2302      	movs	r3, #2
   1360a:	480b      	ldr	r0, [pc, #44]	; (13638 <dk_set_leds_state.part.0+0x64>)
   1360c:	aa04      	add	r2, sp, #16
   1360e:	9304      	str	r3, [sp, #16]
   13610:	f006 fb3e 	bl	19c90 <z_log_msg_static_create.constprop.0>
			return err;
		}
	}

	return 0;
}
   13614:	4620      	mov	r0, r4
   13616:	b006      	add	sp, #24
   13618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			val = 1;
   1361c:	2201      	movs	r2, #1
   1361e:	e7e9      	b.n	135f4 <dk_set_leds_state.part.0+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   13620:	3501      	adds	r5, #1
   13622:	2d04      	cmp	r5, #4
   13624:	f106 0608 	add.w	r6, r6, #8
   13628:	d1db      	bne.n	135e2 <dk_set_leds_state.part.0+0xe>
	return 0;
   1362a:	2400      	movs	r4, #0
   1362c:	e7f2      	b.n	13614 <dk_set_leds_state.part.0+0x40>
   1362e:	bf00      	nop
   13630:	0001c17c 	.word	0x0001c17c
   13634:	0001e3f0 	.word	0x0001e3f0
   13638:	0001b8d8 	.word	0x0001b8d8

0001363c <callback_ctrl>:
{
   1363c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13640:	4680      	mov	r8, r0
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
   13642:	2600      	movs	r6, #0
   13644:	4d21      	ldr	r5, [pc, #132]	; (136cc <callback_ctrl+0x90>)
					 FLAGS_GPIO_0_1_ACTIVE :
   13646:	f8df 9088 	ldr.w	r9, [pc, #136]	; 136d0 <callback_ctrl+0x94>
			flags = ((buttons[i].port == GPIO0_DEV || buttons[i].port == GPIO1_DEV) ?
   1364a:	f8df a088 	ldr.w	sl, [pc, #136]	; 136d4 <callback_ctrl+0x98>
{
   1364e:	af00      	add	r7, sp, #0
			flags = ((buttons[i].port == GPIO0_DEV || buttons[i].port == GPIO1_DEV) ?
   13650:	6828      	ldr	r0, [r5, #0]
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   13652:	7929      	ldrb	r1, [r5, #4]
		if (enable) {
   13654:	f1b8 0f00 	cmp.w	r8, #0
   13658:	d02d      	beq.n	136b6 <callback_ctrl+0x7a>
					 FLAGS_GPIO_0_1_ACTIVE :
   1365a:	4548      	cmp	r0, r9
   1365c:	d01f      	beq.n	1369e <callback_ctrl+0x62>
			flags = ((buttons[i].port == GPIO0_DEV || buttons[i].port == GPIO1_DEV) ?
   1365e:	4550      	cmp	r0, sl
   13660:	d01d      	beq.n	1369e <callback_ctrl+0x62>
					 FLAGS_GPIO_0_1_ACTIVE :
   13662:	f04f 62e8 	mov.w	r2, #121634816	; 0x7400000
	const struct gpio_driver_api *api =
   13666:	6883      	ldr	r3, [r0, #8]
	return api->pin_interrupt_configure(port, pin, mode, trig);
   13668:	699c      	ldr	r4, [r3, #24]
   1366a:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
   1366e:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
   13672:	47a0      	blx	r4
		if (err) {
   13674:	4604      	mov	r4, r0
   13676:	b310      	cbz	r0, 136be <callback_ctrl+0x82>
			LOG_ERR("GPIO IRQ config failed, err: %d", err);
   13678:	466d      	mov	r5, sp
   1367a:	b088      	sub	sp, #32
   1367c:	466a      	mov	r2, sp
   1367e:	4b16      	ldr	r3, [pc, #88]	; (136d8 <callback_ctrl+0x9c>)
   13680:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13684:	e9c2 3005 	strd	r3, r0, [r2, #20]
   13688:	2303      	movs	r3, #3
   1368a:	4814      	ldr	r0, [pc, #80]	; (136dc <callback_ctrl+0xa0>)
   1368c:	f842 3f10 	str.w	r3, [r2, #16]!
   13690:	f006 fafe 	bl	19c90 <z_log_msg_static_create.constprop.0>
   13694:	46ad      	mov	sp, r5
}
   13696:	4620      	mov	r0, r4
   13698:	46bd      	mov	sp, r7
   1369a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   1369e:	2401      	movs	r4, #1
   136a0:	6902      	ldr	r2, [r0, #16]
   136a2:	408c      	lsls	r4, r1
   136a4:	6812      	ldr	r2, [r2, #0]
	const struct gpio_driver_api *api =
   136a6:	6883      	ldr	r3, [r0, #8]
					 FLAGS_GPIO_0_1_ACTIVE :
   136a8:	4214      	tst	r4, r2
   136aa:	bf14      	ite	ne
   136ac:	f04f 7230 	movne.w	r2, #46137344	; 0x2c00000
   136b0:	f04f 6298 	moveq.w	r2, #79691776	; 0x4c00000
   136b4:	e7d8      	b.n	13668 <callback_ctrl+0x2c>
			flags = GPIO_INT_DISABLE;
   136b6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   136ba:	6883      	ldr	r3, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   136bc:	e7d4      	b.n	13668 <callback_ctrl+0x2c>
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
   136be:	3601      	adds	r6, #1
   136c0:	2e04      	cmp	r6, #4
   136c2:	f105 0508 	add.w	r5, r5, #8
   136c6:	d1c3      	bne.n	13650 <callback_ctrl+0x14>
   136c8:	e7e5      	b.n	13696 <callback_ctrl+0x5a>
   136ca:	bf00      	nop
   136cc:	0001c19c 	.word	0x0001c19c
   136d0:	0001b4d4 	.word	0x0001b4d4
   136d4:	0001b4bc 	.word	0x0001b4bc
   136d8:	0001e406 	.word	0x0001e406
   136dc:	0001b8d8 	.word	0x0001b8d8

000136e0 <button_pressed>:
{
   136e0:	b530      	push	{r4, r5, lr}
   136e2:	b087      	sub	sp, #28
	__asm__ volatile(
   136e4:	f04f 0320 	mov.w	r3, #32
   136e8:	f3ef 8511 	mrs	r5, BASEPRI
   136ec:	f383 8812 	msr	BASEPRI_MAX, r3
   136f0:	f3bf 8f6f 	isb	sy
	switch (state) {
   136f4:	4c13      	ldr	r4, [pc, #76]	; (13744 <button_pressed+0x64>)
   136f6:	7823      	ldrb	r3, [r4, #0]
   136f8:	b9eb      	cbnz	r3, 13736 <button_pressed+0x56>
		if (gpio_dev == GPIO0_DEV || gpio_dev == GPIO1_DEV) {
   136fa:	4b13      	ldr	r3, [pc, #76]	; (13748 <button_pressed+0x68>)
   136fc:	4298      	cmp	r0, r3
   136fe:	d002      	beq.n	13706 <button_pressed+0x26>
   13700:	4b12      	ldr	r3, [pc, #72]	; (1374c <button_pressed+0x6c>)
   13702:	4298      	cmp	r0, r3
   13704:	d110      	bne.n	13728 <button_pressed+0x48>
			err = callback_ctrl(false);
   13706:	2000      	movs	r0, #0
   13708:	f7ff ff98 	bl	1363c <callback_ctrl>
			if (err) {
   1370c:	b148      	cbz	r0, 13722 <button_pressed+0x42>
				LOG_ERR("Failed disabling interrupts");
   1370e:	4b10      	ldr	r3, [pc, #64]	; (13750 <button_pressed+0x70>)
   13710:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13714:	9305      	str	r3, [sp, #20]
   13716:	2302      	movs	r3, #2
   13718:	480e      	ldr	r0, [pc, #56]	; (13754 <button_pressed+0x74>)
   1371a:	aa04      	add	r2, sp, #16
   1371c:	9304      	str	r3, [sp, #16]
   1371e:	f006 fab7 	bl	19c90 <z_log_msg_static_create.constprop.0>
			irq_enabled = false;
   13722:	2200      	movs	r2, #0
   13724:	4b0c      	ldr	r3, [pc, #48]	; (13758 <button_pressed+0x78>)
   13726:	701a      	strb	r2, [r3, #0]
		state = STATE_SCANNING;
   13728:	2301      	movs	r3, #1
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   1372a:	2221      	movs	r2, #33	; 0x21
		state = STATE_SCANNING;
   1372c:	7023      	strb	r3, [r4, #0]
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   1372e:	480b      	ldr	r0, [pc, #44]	; (1375c <button_pressed+0x7c>)
   13730:	2300      	movs	r3, #0
   13732:	f002 f9bd 	bl	15ab0 <k_work_reschedule>
	__asm__ volatile(
   13736:	f385 8811 	msr	BASEPRI, r5
   1373a:	f3bf 8f6f 	isb	sy
}
   1373e:	b007      	add	sp, #28
   13740:	bd30      	pop	{r4, r5, pc}
   13742:	bf00      	nop
   13744:	20009c8b 	.word	0x20009c8b
   13748:	0001b4d4 	.word	0x0001b4d4
   1374c:	0001b4bc 	.word	0x0001b4bc
   13750:	0001e426 	.word	0x0001e426
   13754:	0001b8d8 	.word	0x0001b8d8
   13758:	20009c8a 	.word	0x20009c8a
   1375c:	20009578 	.word	0x20009578

00013760 <buttons_scan_fn>:
{
   13760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (irq_enabled) {
   13764:	4f37      	ldr	r7, [pc, #220]	; (13844 <buttons_scan_fn+0xe4>)
{
   13766:	b086      	sub	sp, #24
	if (irq_enabled) {
   13768:	783b      	ldrb	r3, [r7, #0]
   1376a:	b17b      	cbz	r3, 1378c <buttons_scan_fn+0x2c>
		err = callback_ctrl(false);
   1376c:	2000      	movs	r0, #0
   1376e:	f7ff ff65 	bl	1363c <callback_ctrl>
		if (err) {
   13772:	b150      	cbz	r0, 1378a <buttons_scan_fn+0x2a>
			LOG_ERR("Cannot disable callbacks");
   13774:	4b34      	ldr	r3, [pc, #208]	; (13848 <buttons_scan_fn+0xe8>)
			LOG_ERR("Cannot enable callbacks");
   13776:	9305      	str	r3, [sp, #20]
   13778:	2302      	movs	r3, #2
   1377a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1377e:	4833      	ldr	r0, [pc, #204]	; (1384c <buttons_scan_fn+0xec>)
   13780:	aa04      	add	r2, sp, #16
   13782:	9304      	str	r3, [sp, #16]
   13784:	f006 fa84 	bl	19c90 <z_log_msg_static_create.constprop.0>
   13788:	e04c      	b.n	13824 <buttons_scan_fn+0xc4>
		irq_enabled = false;
   1378a:	7038      	strb	r0, [r7, #0]
	button_scan = get_buttons();
   1378c:	f7ff fef4 	bl	13578 <get_buttons>
   13790:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13792:	4b2f      	ldr	r3, [pc, #188]	; (13850 <buttons_scan_fn+0xf0>)
   13794:	e8d3 2fef 	ldaex	r2, [r3]
   13798:	e8c3 4fe1 	stlex	r1, r4, [r3]
   1379c:	2900      	cmp	r1, #0
   1379e:	d1f9      	bne.n	13794 <buttons_scan_fn+0x34>
	if (!initial_run) {
   137a0:	4b2c      	ldr	r3, [pc, #176]	; (13854 <buttons_scan_fn+0xf4>)
   137a2:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 13858 <buttons_scan_fn+0xf8>
   137a6:	781a      	ldrb	r2, [r3, #0]
   137a8:	bb4a      	cbnz	r2, 137fe <buttons_scan_fn+0x9e>
		if (button_scan != last_button_scan) {
   137aa:	f8d8 6000 	ldr.w	r6, [r8]
   137ae:	42a6      	cmp	r6, r4
   137b0:	d019      	beq.n	137e6 <buttons_scan_fn+0x86>
	if (button_handler_cb != NULL) {
   137b2:	4b2a      	ldr	r3, [pc, #168]	; (1385c <buttons_scan_fn+0xfc>)
			uint32_t has_changed = (button_scan ^ last_button_scan);
   137b4:	4066      	eors	r6, r4
	if (button_handler_cb != NULL) {
   137b6:	681b      	ldr	r3, [r3, #0]
   137b8:	b10b      	cbz	r3, 137be <buttons_scan_fn+0x5e>
		button_handler_cb(button_state, has_changed);
   137ba:	4631      	mov	r1, r6
   137bc:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   137be:	f04f 33ff 	mov.w	r3, #4294967295
   137c2:	f04f 32ff 	mov.w	r2, #4294967295
   137c6:	4826      	ldr	r0, [pc, #152]	; (13860 <buttons_scan_fn+0x100>)
   137c8:	f001 fe32 	bl	15430 <z_impl_k_mutex_lock>
	return list->head;
   137cc:	4b25      	ldr	r3, [pc, #148]	; (13864 <buttons_scan_fn+0x104>)
   137ce:	681d      	ldr	r5, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   137d0:	b135      	cbz	r5, 137e0 <buttons_scan_fn+0x80>
   137d2:	3d04      	subs	r5, #4
			handler->cb(button_state, has_changed);
   137d4:	682b      	ldr	r3, [r5, #0]
   137d6:	4631      	mov	r1, r6
   137d8:	4620      	mov	r0, r4
   137da:	4798      	blx	r3
	return node->next;
   137dc:	686d      	ldr	r5, [r5, #4]
   137de:	e7f7      	b.n	137d0 <buttons_scan_fn+0x70>
	return z_impl_k_mutex_unlock(mutex);
   137e0:	481f      	ldr	r0, [pc, #124]	; (13860 <buttons_scan_fn+0x100>)
   137e2:	f001 fe9f 	bl	15524 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   137e6:	f8c8 4000 	str.w	r4, [r8]
	if (button_scan != 0) {
   137ea:	b15c      	cbz	r4, 13804 <buttons_scan_fn+0xa4>
		k_work_reschedule(&buttons_scan,
   137ec:	f44f 72a4 	mov.w	r2, #328	; 0x148
   137f0:	2300      	movs	r3, #0
   137f2:	481d      	ldr	r0, [pc, #116]	; (13868 <buttons_scan_fn+0x108>)
}
   137f4:	b006      	add	sp, #24
   137f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_reschedule(&buttons_scan,
   137fa:	f002 b959 	b.w	15ab0 <k_work_reschedule>
		initial_run = false;
   137fe:	2200      	movs	r2, #0
   13800:	701a      	strb	r2, [r3, #0]
   13802:	e7f0      	b.n	137e6 <buttons_scan_fn+0x86>
	__asm__ volatile(
   13804:	f04f 0320 	mov.w	r3, #32
   13808:	f3ef 8611 	mrs	r6, BASEPRI
   1380c:	f383 8812 	msr	BASEPRI_MAX, r3
   13810:	f3bf 8f6f 	isb	sy
		switch (state) {
   13814:	4b15      	ldr	r3, [pc, #84]	; (1386c <buttons_scan_fn+0x10c>)
   13816:	781d      	ldrb	r5, [r3, #0]
   13818:	2d01      	cmp	r5, #1
   1381a:	d006      	beq.n	1382a <buttons_scan_fn+0xca>
	__asm__ volatile(
   1381c:	f386 8811 	msr	BASEPRI, r6
   13820:	f3bf 8f6f 	isb	sy
}
   13824:	b006      	add	sp, #24
   13826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = callback_ctrl(true);
   1382a:	4628      	mov	r0, r5
			state = STATE_WAITING;
   1382c:	701c      	strb	r4, [r3, #0]
			err = callback_ctrl(true);
   1382e:	f7ff ff05 	bl	1363c <callback_ctrl>
			irq_enabled = true;
   13832:	703d      	strb	r5, [r7, #0]
   13834:	f386 8811 	msr	BASEPRI, r6
   13838:	f3bf 8f6f 	isb	sy
		if (err) {
   1383c:	2800      	cmp	r0, #0
   1383e:	d0f1      	beq.n	13824 <buttons_scan_fn+0xc4>
			LOG_ERR("Cannot enable callbacks");
   13840:	4b0b      	ldr	r3, [pc, #44]	; (13870 <buttons_scan_fn+0x110>)
   13842:	e798      	b.n	13776 <buttons_scan_fn+0x16>
   13844:	20009c8a 	.word	0x20009c8a
   13848:	0001e442 	.word	0x0001e442
   1384c:	0001b8d8 	.word	0x0001b8d8
   13850:	20009b54 	.word	0x20009b54
   13854:	20008584 	.word	0x20008584
   13858:	20009b28 	.word	0x20009b28
   1385c:	20009b58 	.word	0x20009b58
   13860:	20009b2c 	.word	0x20009b2c
   13864:	20009b40 	.word	0x20009b40
   13868:	20009578 	.word	0x20009578
   1386c:	20009c8b 	.word	0x20009c8b
   13870:	0001e45b 	.word	0x0001e45b

00013874 <dk_leds_init>:
{
   13874:	b570      	push	{r4, r5, r6, lr}
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   13876:	2500      	movs	r5, #0
   13878:	4e10      	ldr	r6, [pc, #64]	; (138bc <dk_leds_init+0x48>)
{
   1387a:	b086      	sub	sp, #24
		err = gpio_pin_configure_dt(&leds[i], GPIO_OUTPUT);
   1387c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   13880:	4630      	mov	r0, r6
   13882:	f006 f9e0 	bl	19c46 <gpio_pin_configure_dt>
		if (err) {
   13886:	4604      	mov	r4, r0
   13888:	b950      	cbnz	r0, 138a0 <dk_leds_init+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1388a:	3501      	adds	r5, #1
   1388c:	2d04      	cmp	r5, #4
   1388e:	f106 0608 	add.w	r6, r6, #8
   13892:	d1f3      	bne.n	1387c <dk_leds_init+0x8>
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   13894:	210f      	movs	r1, #15
}
   13896:	b006      	add	sp, #24
   13898:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1389c:	f7ff be9a 	b.w	135d4 <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   138a0:	4b07      	ldr	r3, [pc, #28]	; (138c0 <dk_leds_init+0x4c>)
   138a2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   138a6:	9305      	str	r3, [sp, #20]
   138a8:	2302      	movs	r3, #2
   138aa:	4806      	ldr	r0, [pc, #24]	; (138c4 <dk_leds_init+0x50>)
   138ac:	aa04      	add	r2, sp, #16
   138ae:	9304      	str	r3, [sp, #16]
   138b0:	f006 f9ee 	bl	19c90 <z_log_msg_static_create.constprop.0>
}
   138b4:	4620      	mov	r0, r4
   138b6:	b006      	add	sp, #24
   138b8:	bd70      	pop	{r4, r5, r6, pc}
   138ba:	bf00      	nop
   138bc:	0001c17c 	.word	0x0001c17c
   138c0:	0001e473 	.word	0x0001e473
   138c4:	0001b8d8 	.word	0x0001b8d8

000138c8 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   138c8:	4b05      	ldr	r3, [pc, #20]	; (138e0 <dk_read_buttons+0x18>)
   138ca:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   138ce:	b100      	cbz	r0, 138d2 <dk_read_buttons+0xa>
		*button_state = current_state;
   138d0:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   138d2:	4804      	ldr	r0, [pc, #16]	; (138e4 <dk_read_buttons+0x1c>)
   138d4:	b111      	cbz	r1, 138dc <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   138d6:	6802      	ldr	r2, [r0, #0]
   138d8:	405a      	eors	r2, r3
   138da:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   138dc:	6003      	str	r3, [r0, #0]
}
   138de:	4770      	bx	lr
   138e0:	20009b54 	.word	0x20009b54
   138e4:	20009b24 	.word	0x20009b24

000138e8 <dk_buttons_init>:
{
   138e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	button_handler_cb = button_handler;
   138ec:	4b3a      	ldr	r3, [pc, #232]	; (139d8 <dk_buttons_init+0xf0>)
{
   138ee:	b087      	sub	sp, #28
	button_handler_cb = button_handler;
   138f0:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   138f2:	4d3a      	ldr	r5, [pc, #232]	; (139dc <dk_buttons_init+0xf4>)
   138f4:	483a      	ldr	r0, [pc, #232]	; (139e0 <dk_buttons_init+0xf8>)
   138f6:	f007 f8b1 	bl	1aa5c <z_impl_k_mutex_init>
   138fa:	462e      	mov	r6, r5
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   138fc:	2700      	movs	r7, #0
   138fe:	46a8      	mov	r8, r5
			GPIO_PULL_UP : GPIO_PULL_DOWN;
   13900:	88f3      	ldrh	r3, [r6, #6]
		err = gpio_pin_configure_dt(&buttons[i], GPIO_INPUT | flags);
   13902:	4630      	mov	r0, r6
			GPIO_PULL_UP : GPIO_PULL_DOWN;
   13904:	f013 0f01 	tst.w	r3, #1
   13908:	bf0c      	ite	eq
   1390a:	2120      	moveq	r1, #32
   1390c:	2110      	movne	r1, #16
		err = gpio_pin_configure_dt(&buttons[i], GPIO_INPUT | flags);
   1390e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
   13912:	f006 f998 	bl	19c46 <gpio_pin_configure_dt>
		if (err) {
   13916:	4604      	mov	r4, r0
   13918:	b168      	cbz	r0, 13936 <dk_buttons_init+0x4e>
			LOG_ERR("Cannot configure button gpio");
   1391a:	4b32      	ldr	r3, [pc, #200]	; (139e4 <dk_buttons_init+0xfc>)
			LOG_ERR("Cannot disable callbacks()");
   1391c:	9305      	str	r3, [sp, #20]
   1391e:	2302      	movs	r3, #2
   13920:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13924:	4830      	ldr	r0, [pc, #192]	; (139e8 <dk_buttons_init+0x100>)
   13926:	aa04      	add	r2, sp, #16
   13928:	9304      	str	r3, [sp, #16]
   1392a:	f006 f9b1 	bl	19c90 <z_log_msg_static_create.constprop.0>
}
   1392e:	4620      	mov	r0, r4
   13930:	b007      	add	sp, #28
   13932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   13936:	3701      	adds	r7, #1
   13938:	2f04      	cmp	r7, #4
   1393a:	f106 0608 	add.w	r6, r6, #8
   1393e:	d1df      	bne.n	13900 <dk_buttons_init+0x18>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   13940:	4606      	mov	r6, r0
	uint32_t pin_mask = 0;
   13942:	4607      	mov	r7, r0
		pin_mask |= BIT(buttons[i].pin);
   13944:	f04f 0901 	mov.w	r9, #1
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   13948:	6828      	ldr	r0, [r5, #0]
   1394a:	7929      	ldrb	r1, [r5, #4]
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1394c:	6883      	ldr	r3, [r0, #8]
   1394e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   13952:	699c      	ldr	r4, [r3, #24]
   13954:	2300      	movs	r3, #0
   13956:	47a0      	blx	r4
		if (err) {
   13958:	4604      	mov	r4, r0
   1395a:	b108      	cbz	r0, 13960 <dk_buttons_init+0x78>
			LOG_ERR("Cannot disable callbacks()");
   1395c:	4b23      	ldr	r3, [pc, #140]	; (139ec <dk_buttons_init+0x104>)
   1395e:	e7dd      	b.n	1391c <dk_buttons_init+0x34>
		pin_mask |= BIT(buttons[i].pin);
   13960:	792b      	ldrb	r3, [r5, #4]
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   13962:	3601      	adds	r6, #1
		pin_mask |= BIT(buttons[i].pin);
   13964:	fa09 f303 	lsl.w	r3, r9, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   13968:	2e04      	cmp	r6, #4
		pin_mask |= BIT(buttons[i].pin);
   1396a:	ea47 0703 	orr.w	r7, r7, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1396e:	f105 0508 	add.w	r5, r5, #8
   13972:	d1e9      	bne.n	13948 <dk_buttons_init+0x60>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   13974:	4605      	mov	r5, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   13976:	4e1e      	ldr	r6, [pc, #120]	; (139f0 <dk_buttons_init+0x108>)
   13978:	4b1e      	ldr	r3, [pc, #120]	; (139f4 <dk_buttons_init+0x10c>)
	callback->pin_mask = pin_mask;
   1397a:	e9c6 3701 	strd	r3, r7, [r6, #4]
		err = gpio_add_callback(buttons[i].port, &gpio_cb);
   1397e:	f858 0035 	ldr.w	r0, [r8, r5, lsl #3]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   13982:	6883      	ldr	r3, [r0, #8]
   13984:	69db      	ldr	r3, [r3, #28]
   13986:	b133      	cbz	r3, 13996 <dk_buttons_init+0xae>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   13988:	2201      	movs	r2, #1
   1398a:	4631      	mov	r1, r6
   1398c:	4798      	blx	r3
		if (err) {
   1398e:	4604      	mov	r4, r0
   13990:	b120      	cbz	r0, 1399c <dk_buttons_init+0xb4>
			LOG_ERR("Cannot add callback");
   13992:	4b19      	ldr	r3, [pc, #100]	; (139f8 <dk_buttons_init+0x110>)
   13994:	e7c2      	b.n	1391c <dk_buttons_init+0x34>
		return -ENOTSUP;
   13996:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1399a:	e7fa      	b.n	13992 <dk_buttons_init+0xaa>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1399c:	3501      	adds	r5, #1
   1399e:	2d04      	cmp	r5, #4
   139a0:	d1ed      	bne.n	1397e <dk_buttons_init+0x96>
	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
   139a2:	4916      	ldr	r1, [pc, #88]	; (139fc <dk_buttons_init+0x114>)
   139a4:	4816      	ldr	r0, [pc, #88]	; (13a00 <dk_buttons_init+0x118>)
   139a6:	f007 f9be 	bl	1ad26 <k_work_init_delayable>
	state = STATE_SCANNING;
   139aa:	2201      	movs	r2, #1
   139ac:	4b15      	ldr	r3, [pc, #84]	; (13a04 <dk_buttons_init+0x11c>)
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   139ae:	4814      	ldr	r0, [pc, #80]	; (13a00 <dk_buttons_init+0x118>)
	state = STATE_SCANNING;
   139b0:	701a      	strb	r2, [r3, #0]
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   139b2:	2300      	movs	r3, #0
   139b4:	2200      	movs	r2, #0
   139b6:	f002 f847 	bl	15a48 <k_work_schedule>
	dk_read_buttons(NULL, NULL);
   139ba:	4621      	mov	r1, r4
   139bc:	4620      	mov	r0, r4
   139be:	f7ff ff83 	bl	138c8 <dk_read_buttons>
	atomic_set(&my_buttons, (atomic_val_t)get_buttons());
   139c2:	f7ff fdd9 	bl	13578 <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   139c6:	4b10      	ldr	r3, [pc, #64]	; (13a08 <dk_buttons_init+0x120>)
   139c8:	e8d3 2fef 	ldaex	r2, [r3]
   139cc:	e8c3 0fe1 	stlex	r1, r0, [r3]
   139d0:	2900      	cmp	r1, #0
   139d2:	d0ac      	beq.n	1392e <dk_buttons_init+0x46>
   139d4:	e7f8      	b.n	139c8 <dk_buttons_init+0xe0>
   139d6:	bf00      	nop
   139d8:	20009b58 	.word	0x20009b58
   139dc:	0001c19c 	.word	0x0001c19c
   139e0:	20009b2c 	.word	0x20009b2c
   139e4:	0001e48d 	.word	0x0001e48d
   139e8:	0001b8d8 	.word	0x0001b8d8
   139ec:	0001e4aa 	.word	0x0001e4aa
   139f0:	20009b48 	.word	0x20009b48
   139f4:	000136e1 	.word	0x000136e1
   139f8:	0001e4c5 	.word	0x0001e4c5
   139fc:	00013761 	.word	0x00013761
   13a00:	20009578 	.word	0x20009578
   13a04:	20009c8b 	.word	0x20009c8b
   13a08:	20009b54 	.word	0x20009b54

00013a0c <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
   13a0c:	b510      	push	{r4, lr}
	int err;

	if (led_idx >= ARRAY_SIZE(leds)) {
   13a0e:	2803      	cmp	r0, #3
{
   13a10:	460a      	mov	r2, r1
   13a12:	b086      	sub	sp, #24
	if (led_idx >= ARRAY_SIZE(leds)) {
   13a14:	d90e      	bls.n	13a34 <dk_set_led+0x28>
		LOG_ERR("LED index out of the range");
   13a16:	4b12      	ldr	r3, [pc, #72]	; (13a60 <dk_set_led+0x54>)
		return -EINVAL;
   13a18:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("LED index out of the range");
   13a1c:	9305      	str	r3, [sp, #20]
   13a1e:	2302      	movs	r3, #2
   13a20:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13a24:	480f      	ldr	r0, [pc, #60]	; (13a64 <dk_set_led+0x58>)
   13a26:	aa04      	add	r2, sp, #16
   13a28:	9304      	str	r3, [sp, #16]
   13a2a:	f006 f931 	bl	19c90 <z_log_msg_static_create.constprop.0>
	err = gpio_pin_set_dt(&leds[led_idx], val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   13a2e:	4620      	mov	r0, r4
   13a30:	b006      	add	sp, #24
   13a32:	bd10      	pop	{r4, pc}
	return gpio_pin_set(spec->port, spec->pin, value);
   13a34:	4b0c      	ldr	r3, [pc, #48]	; (13a68 <dk_set_led+0x5c>)
   13a36:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   13a3a:	7909      	ldrb	r1, [r1, #4]
   13a3c:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
   13a40:	f006 f916 	bl	19c70 <gpio_pin_set>
	if (err) {
   13a44:	4604      	mov	r4, r0
   13a46:	2800      	cmp	r0, #0
   13a48:	d0f1      	beq.n	13a2e <dk_set_led+0x22>
		LOG_ERR("Cannot write LED gpio");
   13a4a:	4b08      	ldr	r3, [pc, #32]	; (13a6c <dk_set_led+0x60>)
   13a4c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13a50:	9305      	str	r3, [sp, #20]
   13a52:	2302      	movs	r3, #2
   13a54:	4803      	ldr	r0, [pc, #12]	; (13a64 <dk_set_led+0x58>)
   13a56:	aa04      	add	r2, sp, #16
   13a58:	9304      	str	r3, [sp, #16]
   13a5a:	f006 f919 	bl	19c90 <z_log_msg_static_create.constprop.0>
   13a5e:	e7e6      	b.n	13a2e <dk_set_led+0x22>
   13a60:	0001e4d9 	.word	0x0001e4d9
   13a64:	0001b8d8 	.word	0x0001b8d8
   13a68:	0001c17c 	.word	0x0001c17c
   13a6c:	0001e3f0 	.word	0x0001e3f0

00013a70 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   13a70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
   13a72:	f7f6 fe63 	bl	a73c <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   13a76:	4b07      	ldr	r3, [pc, #28]	; (13a94 <k_sys_fatal_error_handler+0x24>)
   13a78:	9305      	str	r3, [sp, #20]
   13a7a:	2302      	movs	r3, #2
   13a7c:	9304      	str	r3, [sp, #16]
   13a7e:	4806      	ldr	r0, [pc, #24]	; (13a98 <k_sys_fatal_error_handler+0x28>)
   13a80:	2300      	movs	r3, #0
   13a82:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13a86:	aa04      	add	r2, sp, #16
   13a88:	f7f6 ff38 	bl	a8fc <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   13a8c:	2000      	movs	r0, #0
   13a8e:	f7f8 f9bf 	bl	be10 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   13a92:	bf00      	nop
   13a94:	0001e508 	.word	0x0001e508
   13a98:	0001b8e0 	.word	0x0001b8e0

00013a9c <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   13a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13aa0:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   13aa2:	4b15      	ldr	r3, [pc, #84]	; (13af8 <tfm_ns_interface_dispatch+0x5c>)
   13aa4:	4604      	mov	r4, r0
   13aa6:	f893 8000 	ldrb.w	r8, [r3]
   13aaa:	460d      	mov	r5, r1
   13aac:	4616      	mov	r6, r2
   13aae:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();
	int tfm_ns_saved_prio;

	if (!is_pre_kernel) {
   13ab0:	f1b8 0f00 	cmp.w	r8, #0
   13ab4:	d115      	bne.n	13ae2 <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   13ab6:	4668      	mov	r0, sp
   13ab8:	f004 faf1 	bl	1809e <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   13abc:	463a      	mov	r2, r7
   13abe:	4631      	mov	r1, r6
   13ac0:	4628      	mov	r0, r5
   13ac2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   13ac4:	47a0      	blx	r4
   13ac6:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   13ac8:	4668      	mov	r0, sp
   13aca:	f004 fae9 	bl	180a0 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   13ace:	f1b8 0f00 	cmp.w	r8, #0
   13ad2:	d002      	beq.n	13ada <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   13ad4:	4809      	ldr	r0, [pc, #36]	; (13afc <tfm_ns_interface_dispatch+0x60>)
   13ad6:	f001 fd25 	bl	15524 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   13ada:	4620      	mov	r0, r4
   13adc:	b022      	add	sp, #136	; 0x88
   13ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   13ae2:	f04f 32ff 	mov.w	r2, #4294967295
   13ae6:	f04f 33ff 	mov.w	r3, #4294967295
   13aea:	4804      	ldr	r0, [pc, #16]	; (13afc <tfm_ns_interface_dispatch+0x60>)
   13aec:	f001 fca0 	bl	15430 <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   13af0:	2800      	cmp	r0, #0
   13af2:	d0e0      	beq.n	13ab6 <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   13af4:	241f      	movs	r4, #31
   13af6:	e7f0      	b.n	13ada <tfm_ns_interface_dispatch+0x3e>
   13af8:	20009c8c 	.word	0x20009c8c
   13afc:	20008644 	.word	0x20008644

00013b00 <tfm_platform_ioctl>:
enum tfm_platform_err_t
tfm_platform_ioctl(tfm_platform_ioctl_req_t request,
                   psa_invec *input, psa_outvec *output)
{
    tfm_platform_ioctl_req_t req = request;
    struct psa_invec in_vec[2] = { {0} };
   13b00:	2300      	movs	r3, #0
{
   13b02:	b500      	push	{lr}
   13b04:	b089      	sub	sp, #36	; 0x24
    struct psa_invec in_vec[2] = { {0} };
   13b06:	e9cd 3306 	strd	r3, r3, [sp, #24]
    size_t inlen, outlen;
    psa_status_t status = PSA_ERROR_CONNECTION_REFUSED;

    in_vec[0].base = &req;
   13b0a:	ab03      	add	r3, sp, #12
   13b0c:	9304      	str	r3, [sp, #16]
    in_vec[0].len = sizeof(req);
   13b0e:	2304      	movs	r3, #4
    tfm_platform_ioctl_req_t req = request;
   13b10:	9003      	str	r0, [sp, #12]
    in_vec[0].len = sizeof(req);
   13b12:	9305      	str	r3, [sp, #20]
    if (input != NULL) {
   13b14:	b1a9      	cbz	r1, 13b42 <tfm_platform_ioctl+0x42>
        in_vec[1].base = input->base;
   13b16:	680b      	ldr	r3, [r1, #0]
   13b18:	9306      	str	r3, [sp, #24]
        in_vec[1].len = input->len;
   13b1a:	684b      	ldr	r3, [r1, #4]
   13b1c:	9307      	str	r3, [sp, #28]
        inlen = 2;
   13b1e:	2302      	movs	r3, #2
    } else {
        inlen = 1;
    }

    if (output != NULL) {
   13b20:	1e11      	subs	r1, r2, #0
   13b22:	bf18      	it	ne
   13b24:	2101      	movne	r1, #1
        outlen = 1;
    } else {
        outlen = 0;
    }

    status = psa_call(TFM_PLATFORM_SERVICE_HANDLE,
   13b26:	4808      	ldr	r0, [pc, #32]	; (13b48 <tfm_platform_ioctl+0x48>)
   13b28:	e9cd 2100 	strd	r2, r1, [sp]
   13b2c:	f240 31f5 	movw	r1, #1013	; 0x3f5
   13b30:	aa04      	add	r2, sp, #16
   13b32:	f000 f82b 	bl	13b8c <psa_call>
                      TFM_PLATFORM_API_ID_IOCTL,
                      in_vec, inlen,
                      output, outlen);

    if (status < PSA_SUCCESS) {
   13b36:	2800      	cmp	r0, #0
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
    } else {
        return (enum tfm_platform_err_t)status;
    }
}
   13b38:	bfb8      	it	lt
   13b3a:	2001      	movlt	r0, #1
   13b3c:	b009      	add	sp, #36	; 0x24
   13b3e:	f85d fb04 	ldr.w	pc, [sp], #4
        inlen = 1;
   13b42:	2301      	movs	r3, #1
   13b44:	e7ec      	b.n	13b20 <tfm_platform_ioctl+0x20>
   13b46:	bf00      	nop
   13b48:	40000105 	.word	0x40000105

00013b4c <psa_generate_random>:
    return API_DISPATCH_NO_OUTVEC(in_vec);
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   13b4c:	b570      	push	{r4, r5, r6, lr}
    struct tfm_crypto_pack_iovec iov = {
   13b4e:	2630      	movs	r6, #48	; 0x30
{
   13b50:	b092      	sub	sp, #72	; 0x48
    struct tfm_crypto_pack_iovec iov = {
   13b52:	ab06      	add	r3, sp, #24
{
   13b54:	4605      	mov	r5, r0
   13b56:	460c      	mov	r4, r1
    struct tfm_crypto_pack_iovec iov = {
   13b58:	4632      	mov	r2, r6
   13b5a:	2100      	movs	r1, #0
   13b5c:	4618      	mov	r0, r3
   13b5e:	f004 fb31 	bl	181c4 <memset>

    psa_invec in_vec[] = {
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   13b62:	e9cd 5404 	strd	r5, r4, [sp, #16]
    psa_invec in_vec[] = {
   13b66:	e9cd 0602 	strd	r0, r6, [sp, #8]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   13b6a:	b154      	cbz	r4, 13b82 <psa_generate_random+0x36>
        return PSA_SUCCESS;
    }

    return API_DISPATCH(in_vec, out_vec);
   13b6c:	2301      	movs	r3, #1
   13b6e:	aa04      	add	r2, sp, #16
   13b70:	9200      	str	r2, [sp, #0]
   13b72:	2100      	movs	r1, #0
   13b74:	4804      	ldr	r0, [pc, #16]	; (13b88 <psa_generate_random+0x3c>)
   13b76:	9301      	str	r3, [sp, #4]
   13b78:	aa02      	add	r2, sp, #8
   13b7a:	f000 f807 	bl	13b8c <psa_call>
}
   13b7e:	b012      	add	sp, #72	; 0x48
   13b80:	bd70      	pop	{r4, r5, r6, pc}
        return PSA_SUCCESS;
   13b82:	4620      	mov	r0, r4
   13b84:	e7fb      	b.n	13b7e <psa_generate_random+0x32>
   13b86:	bf00      	nop
   13b88:	40000100 	.word	0x40000100

00013b8c <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   13b8c:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
   13b8e:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
   13b92:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
   13b96:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
   13b98:	d20d      	bcs.n	13bb6 <psa_call+0x2a>
        (type < INT16_MIN) ||
   13b9a:	ea43 0504 	orr.w	r5, r3, r4
   13b9e:	2dff      	cmp	r5, #255	; 0xff
   13ba0:	d809      	bhi.n	13bb6 <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   13ba2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
   13ba6:	4613      	mov	r3, r2
   13ba8:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   13bac:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   13bae:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
   13bb0:	4803      	ldr	r0, [pc, #12]	; (13bc0 <psa_call+0x34>)
   13bb2:	f7ff bf73 	b.w	13a9c <tfm_ns_interface_dispatch>
}
   13bb6:	f06f 0080 	mvn.w	r0, #128	; 0x80
   13bba:	bc30      	pop	{r4, r5}
   13bbc:	4770      	bx	lr
   13bbe:	bf00      	nop
   13bc0:	00007c11 	.word	0x00007c11

00013bc4 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   13bc4:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   13bc6:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   13bc8:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   13bca:	fab2 f382 	clz	r3, r2
   13bce:	f1c3 031f 	rsb	r3, r3, #31
   13bd2:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   13bd4:	fa05 f403 	lsl.w	r4, r5, r3
   13bd8:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   13bdc:	e8d0 6fef 	ldaex	r6, [r0]
   13be0:	4296      	cmp	r6, r2
   13be2:	d104      	bne.n	13bee <nrfx_flag32_alloc+0x2a>
   13be4:	e8c0 4fec 	stlex	ip, r4, [r0]
   13be8:	f1bc 0f00 	cmp.w	ip, #0
   13bec:	d1f6      	bne.n	13bdc <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   13bee:	d1eb      	bne.n	13bc8 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   13bf0:	4801      	ldr	r0, [pc, #4]	; (13bf8 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   13bf2:	700b      	strb	r3, [r1, #0]
}
   13bf4:	bd70      	pop	{r4, r5, r6, pc}
   13bf6:	bf00      	nop
   13bf8:	0bad0000 	.word	0x0bad0000

00013bfc <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   13bfc:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   13bfe:	6803      	ldr	r3, [r0, #0]
   13c00:	40cb      	lsrs	r3, r1
   13c02:	07db      	lsls	r3, r3, #31
   13c04:	d410      	bmi.n	13c28 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   13c06:	2301      	movs	r3, #1
   13c08:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   13c0a:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   13c0c:	ea43 0102 	orr.w	r1, r3, r2
   13c10:	e8d0 4fef 	ldaex	r4, [r0]
   13c14:	4294      	cmp	r4, r2
   13c16:	d104      	bne.n	13c22 <nrfx_flag32_free+0x26>
   13c18:	e8c0 1fec 	stlex	ip, r1, [r0]
   13c1c:	f1bc 0f00 	cmp.w	ip, #0
   13c20:	d1f6      	bne.n	13c10 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   13c22:	d1f2      	bne.n	13c0a <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   13c24:	4801      	ldr	r0, [pc, #4]	; (13c2c <nrfx_flag32_free+0x30>)
}
   13c26:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   13c28:	4801      	ldr	r0, [pc, #4]	; (13c30 <nrfx_flag32_free+0x34>)
   13c2a:	e7fc      	b.n	13c26 <nrfx_flag32_free+0x2a>
   13c2c:	0bad0000 	.word	0x0bad0000
   13c30:	0bad0004 	.word	0x0bad0004

00013c34 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   13c34:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch (domain)
   13c36:	2803      	cmp	r0, #3
   13c38:	f200 80a0 	bhi.w	13d7c <clock_stop+0x148>
   13c3c:	e8df f000 	tbb	[pc, r0]
   13c40:	32251802 	.word	0x32251802
    p_reg->INTENCLR = mask;
   13c44:	2202      	movs	r2, #2
   13c46:	4b59      	ldr	r3, [pc, #356]	; (13dac <clock_stop+0x178>)
   13c48:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13c4c:	2200      	movs	r2, #0
   13c4e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   13c52:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13c56:	2201      	movs	r2, #1
   13c58:	60da      	str	r2, [r3, #12]
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   13c5a:	2400      	movs	r4, #0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   13c5c:	2301      	movs	r3, #1
   13c5e:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   13c62:	2803      	cmp	r0, #3
   13c64:	f200 808a 	bhi.w	13d7c <clock_stop+0x148>
   13c68:	e8df f000 	tbb	[pc, r0]
   13c6c:	94736529 	.word	0x94736529
    p_reg->INTENCLR = mask;
   13c70:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13c72:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
   13c74:	4b4d      	ldr	r3, [pc, #308]	; (13dac <clock_stop+0x178>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   13c76:	f10d 0407 	add.w	r4, sp, #7
   13c7a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13c7e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   13c82:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13c86:	605a      	str	r2, [r3, #4]
   13c88:	e7e8      	b.n	13c5c <clock_stop+0x28>
    p_reg->INTENCLR = mask;
   13c8a:	f44f 7200 	mov.w	r2, #512	; 0x200
   13c8e:	4b47      	ldr	r3, [pc, #284]	; (13dac <clock_stop+0x178>)
   13c90:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13c94:	2200      	movs	r2, #0
   13c96:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   13c9a:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13c9e:	2201      	movs	r2, #1
   13ca0:	625a      	str	r2, [r3, #36]	; 0x24
   13ca2:	e7da      	b.n	13c5a <clock_stop+0x26>
    p_reg->INTENCLR = mask;
   13ca4:	f44f 7280 	mov.w	r2, #256	; 0x100
   13ca8:	4b40      	ldr	r3, [pc, #256]	; (13dac <clock_stop+0x178>)
   13caa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13cae:	2200      	movs	r2, #0
   13cb0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   13cb4:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13cb8:	2201      	movs	r2, #1
   13cba:	61da      	str	r2, [r3, #28]
   13cbc:	e7cd      	b.n	13c5a <clock_stop+0x26>
    switch (domain)
   13cbe:	f242 7510 	movw	r5, #10000	; 0x2710
   13cc2:	4e3a      	ldr	r6, [pc, #232]	; (13dac <clock_stop+0x178>)
            if (p_clk_src != NULL)
   13cc4:	b36c      	cbz	r4, 13d22 <clock_stop+0xee>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   13cc6:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   13cca:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   13cce:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   13cd0:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   13cd4:	03d9      	lsls	r1, r3, #15
   13cd6:	d551      	bpl.n	13d7c <clock_stop+0x148>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   13cd8:	f89d 0007 	ldrb.w	r0, [sp, #7]
   13cdc:	2801      	cmp	r0, #1
   13cde:	d14d      	bne.n	13d7c <clock_stop+0x148>
   13ce0:	f005 fffe 	bl	19ce0 <nrfx_busy_wait>
   13ce4:	3d01      	subs	r5, #1
   13ce6:	d1ed      	bne.n	13cc4 <clock_stop+0x90>
   13ce8:	e048      	b.n	13d7c <clock_stop+0x148>
   13cea:	f89d 0007 	ldrb.w	r0, [sp, #7]
   13cee:	2801      	cmp	r0, #1
   13cf0:	d144      	bne.n	13d7c <clock_stop+0x148>
   13cf2:	f005 fff5 	bl	19ce0 <nrfx_busy_wait>
   13cf6:	3d01      	subs	r5, #1
   13cf8:	d14f      	bne.n	13d9a <clock_stop+0x166>
   13cfa:	e03f      	b.n	13d7c <clock_stop+0x148>
   13cfc:	f89d 0007 	ldrb.w	r0, [sp, #7]
   13d00:	2801      	cmp	r0, #1
   13d02:	d13b      	bne.n	13d7c <clock_stop+0x148>
   13d04:	f005 ffec 	bl	19ce0 <nrfx_busy_wait>
   13d08:	3d01      	subs	r5, #1
   13d0a:	d037      	beq.n	13d7c <clock_stop+0x148>
            if (p_clk_src != NULL)
   13d0c:	b1bc      	cbz	r4, 13d3e <clock_stop+0x10a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   13d0e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   13d12:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   13d16:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   13d18:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   13d1c:	03db      	lsls	r3, r3, #15
   13d1e:	d52d      	bpl.n	13d7c <clock_stop+0x148>
   13d20:	e7ec      	b.n	13cfc <clock_stop+0xc8>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   13d22:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   13d26:	03da      	lsls	r2, r3, #15
   13d28:	d528      	bpl.n	13d7c <clock_stop+0x148>
   13d2a:	2001      	movs	r0, #1
   13d2c:	f005 ffd8 	bl	19ce0 <nrfx_busy_wait>
   13d30:	3d01      	subs	r5, #1
   13d32:	d1f6      	bne.n	13d22 <clock_stop+0xee>
   13d34:	e022      	b.n	13d7c <clock_stop+0x148>
    switch (domain)
   13d36:	f242 7510 	movw	r5, #10000	; 0x2710
   13d3a:	4e1c      	ldr	r6, [pc, #112]	; (13dac <clock_stop+0x178>)
   13d3c:	e7e6      	b.n	13d0c <clock_stop+0xd8>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   13d3e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   13d42:	03d8      	lsls	r0, r3, #15
   13d44:	d51a      	bpl.n	13d7c <clock_stop+0x148>
   13d46:	2001      	movs	r0, #1
   13d48:	f005 ffca 	bl	19ce0 <nrfx_busy_wait>
   13d4c:	3d01      	subs	r5, #1
   13d4e:	d1f6      	bne.n	13d3e <clock_stop+0x10a>
   13d50:	e014      	b.n	13d7c <clock_stop+0x148>
    switch (domain)
   13d52:	f242 7510 	movw	r5, #10000	; 0x2710
   13d56:	4e15      	ldr	r6, [pc, #84]	; (13dac <clock_stop+0x178>)
            if (p_clk_src != NULL)
   13d58:	b194      	cbz	r4, 13d80 <clock_stop+0x14c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   13d5a:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   13d5e:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   13d62:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   13d64:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   13d68:	03d9      	lsls	r1, r3, #15
   13d6a:	d507      	bpl.n	13d7c <clock_stop+0x148>
   13d6c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   13d70:	2801      	cmp	r0, #1
   13d72:	d103      	bne.n	13d7c <clock_stop+0x148>
   13d74:	f005 ffb4 	bl	19ce0 <nrfx_busy_wait>
   13d78:	3d01      	subs	r5, #1
   13d7a:	d1ed      	bne.n	13d58 <clock_stop+0x124>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   13d7c:	b002      	add	sp, #8
   13d7e:	bd70      	pop	{r4, r5, r6, pc}
   13d80:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   13d84:	03da      	lsls	r2, r3, #15
   13d86:	d5f9      	bpl.n	13d7c <clock_stop+0x148>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   13d88:	2001      	movs	r0, #1
   13d8a:	f005 ffa9 	bl	19ce0 <nrfx_busy_wait>
   13d8e:	3d01      	subs	r5, #1
   13d90:	d1f6      	bne.n	13d80 <clock_stop+0x14c>
   13d92:	e7f3      	b.n	13d7c <clock_stop+0x148>
    switch (domain)
   13d94:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   13d98:	4e04      	ldr	r6, [pc, #16]	; (13dac <clock_stop+0x178>)
   13d9a:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   13d9e:	03db      	lsls	r3, r3, #15
   13da0:	d5ec      	bpl.n	13d7c <clock_stop+0x148>
   13da2:	2c00      	cmp	r4, #0
   13da4:	d1a1      	bne.n	13cea <clock_stop+0xb6>
   13da6:	2001      	movs	r0, #1
   13da8:	e7a3      	b.n	13cf2 <clock_stop+0xbe>
   13daa:	bf00      	nop
   13dac:	40005000 	.word	0x40005000

00013db0 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   13db0:	4b04      	ldr	r3, [pc, #16]	; (13dc4 <nrfx_clock_init+0x14>)
   13db2:	791a      	ldrb	r2, [r3, #4]
   13db4:	b922      	cbnz	r2, 13dc0 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   13db6:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   13db8:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   13dba:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   13dbc:	4802      	ldr	r0, [pc, #8]	; (13dc8 <nrfx_clock_init+0x18>)
   13dbe:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   13dc0:	4802      	ldr	r0, [pc, #8]	; (13dcc <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   13dc2:	4770      	bx	lr
   13dc4:	20009b5c 	.word	0x20009b5c
   13dc8:	0bad0000 	.word	0x0bad0000
   13dcc:	0bad000c 	.word	0x0bad000c

00013dd0 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   13dd0:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   13dd2:	2005      	movs	r0, #5
   13dd4:	f7f7 fbd8 	bl	b588 <arch_irq_is_enabled>
   13dd8:	b910      	cbnz	r0, 13de0 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   13dda:	2005      	movs	r0, #5
   13ddc:	f7f7 fbb2 	bl	b544 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   13de0:	2201      	movs	r2, #1
   13de2:	4b04      	ldr	r3, [pc, #16]	; (13df4 <nrfx_clock_enable+0x24>)
   13de4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
   13de8:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   13dec:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   13df0:	bd08      	pop	{r3, pc}
   13df2:	bf00      	nop
   13df4:	40005000 	.word	0x40005000

00013df8 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   13df8:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   13dfa:	2803      	cmp	r0, #3
   13dfc:	d818      	bhi.n	13e30 <nrfx_clock_start+0x38>
   13dfe:	e8df f000 	tbb	[pc, r0]
   13e02:	3002      	.short	0x3002
   13e04:	483b      	.short	0x483b
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   13e06:	4a29      	ldr	r2, [pc, #164]	; (13eac <nrfx_clock_start+0xb4>)
   13e08:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   13e0c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   13e10:	03c9      	lsls	r1, r1, #15
   13e12:	d40e      	bmi.n	13e32 <nrfx_clock_start+0x3a>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   13e14:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                    // LF clock is already running. Inspect its source.
                    // If LF clock source is inappropriate then it will be stopped and modified.
                    // Ignore return value as LF clock will be started again regardless of the result.
                    (void)clock_lfclksrc_tweak(&lfclksrc);
                }
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   13e18:	07db      	lsls	r3, r3, #31
   13e1a:	d513      	bpl.n	13e44 <nrfx_clock_start+0x4c>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   13e1c:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
   13e20:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   13e24:	3b01      	subs	r3, #1
   13e26:	2b01      	cmp	r3, #1
   13e28:	d809      	bhi.n	13e3e <nrfx_clock_start+0x46>
    p_reg->INTENSET = mask;
   13e2a:	2302      	movs	r3, #2
   13e2c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   13e30:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   13e32:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   13e36:	2b02      	cmp	r3, #2
   13e38:	d005      	beq.n	13e46 <nrfx_clock_start+0x4e>
   13e3a:	2b01      	cmp	r3, #1
   13e3c:	d002      	beq.n	13e44 <nrfx_clock_start+0x4c>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   13e3e:	2000      	movs	r0, #0
   13e40:	f7ff fef8 	bl	13c34 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   13e44:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
   13e46:	4a19      	ldr	r2, [pc, #100]	; (13eac <nrfx_clock_start+0xb4>)
   13e48:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13e4c:	2300      	movs	r3, #0
   13e4e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   13e52:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   13e56:	2302      	movs	r3, #2
   13e58:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13e5c:	2301      	movs	r3, #1
   13e5e:	6093      	str	r3, [r2, #8]
}
   13e60:	e7e6      	b.n	13e30 <nrfx_clock_start+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13e62:	2200      	movs	r2, #0
   13e64:	4b11      	ldr	r3, [pc, #68]	; (13eac <nrfx_clock_start+0xb4>)
   13e66:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   13e6a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   13e6e:	2201      	movs	r2, #1
   13e70:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13e74:	601a      	str	r2, [r3, #0]
}
   13e76:	e7db      	b.n	13e30 <nrfx_clock_start+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13e78:	2200      	movs	r2, #0
   13e7a:	4b0c      	ldr	r3, [pc, #48]	; (13eac <nrfx_clock_start+0xb4>)
   13e7c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   13e80:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   13e84:	f44f 7200 	mov.w	r2, #512	; 0x200
   13e88:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13e8c:	2201      	movs	r2, #1
   13e8e:	621a      	str	r2, [r3, #32]
}
   13e90:	e7ce      	b.n	13e30 <nrfx_clock_start+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13e92:	2200      	movs	r2, #0
   13e94:	4b05      	ldr	r3, [pc, #20]	; (13eac <nrfx_clock_start+0xb4>)
   13e96:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   13e9a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   13e9e:	f44f 7280 	mov.w	r2, #256	; 0x100
   13ea2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13ea6:	2201      	movs	r2, #1
   13ea8:	619a      	str	r2, [r3, #24]
}
   13eaa:	e7c1      	b.n	13e30 <nrfx_clock_start+0x38>
   13eac:	40005000 	.word	0x40005000

00013eb0 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   13eb0:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   13eb2:	4b28      	ldr	r3, [pc, #160]	; (13f54 <nrfx_power_clock_irq_handler+0xa4>)
   13eb4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   13eb8:	b152      	cbz	r2, 13ed0 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13eba:	2000      	movs	r0, #0
   13ebc:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   13ec0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   13ec4:	2201      	movs	r2, #1
   13ec6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   13eca:	4b23      	ldr	r3, [pc, #140]	; (13f58 <nrfx_power_clock_irq_handler+0xa8>)
   13ecc:	681b      	ldr	r3, [r3, #0]
   13ece:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   13ed0:	4b20      	ldr	r3, [pc, #128]	; (13f54 <nrfx_power_clock_irq_handler+0xa4>)
   13ed2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   13ed6:	b18a      	cbz	r2, 13efc <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13ed8:	2200      	movs	r2, #0
   13eda:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   13ede:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   13ee2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   13ee6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   13eea:	f002 0203 	and.w	r2, r2, #3
   13eee:	2a01      	cmp	r2, #1
   13ef0:	f04f 0102 	mov.w	r1, #2
   13ef4:	d126      	bne.n	13f44 <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   13ef6:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13efa:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   13efc:	4b15      	ldr	r3, [pc, #84]	; (13f54 <nrfx_power_clock_irq_handler+0xa4>)
   13efe:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   13f02:	b162      	cbz	r2, 13f1e <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13f04:	2200      	movs	r2, #0
   13f06:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   13f0a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   13f0e:	f44f 7280 	mov.w	r2, #256	; 0x100
   13f12:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   13f16:	4b10      	ldr	r3, [pc, #64]	; (13f58 <nrfx_power_clock_irq_handler+0xa8>)
   13f18:	2004      	movs	r0, #4
   13f1a:	681b      	ldr	r3, [r3, #0]
   13f1c:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   13f1e:	4b0d      	ldr	r3, [pc, #52]	; (13f54 <nrfx_power_clock_irq_handler+0xa4>)
   13f20:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   13f24:	b1aa      	cbz	r2, 13f52 <nrfx_power_clock_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13f26:	2200      	movs	r2, #0
   13f28:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   13f2c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   13f30:	f44f 7200 	mov.w	r2, #512	; 0x200
   13f34:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   13f38:	4b07      	ldr	r3, [pc, #28]	; (13f58 <nrfx_power_clock_irq_handler+0xa8>)
   13f3a:	2005      	movs	r0, #5
    }
#endif
}
   13f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   13f40:	681b      	ldr	r3, [r3, #0]
   13f42:	4718      	bx	r3
   13f44:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   13f48:	4b03      	ldr	r3, [pc, #12]	; (13f58 <nrfx_power_clock_irq_handler+0xa8>)
   13f4a:	2001      	movs	r0, #1
   13f4c:	681b      	ldr	r3, [r3, #0]
   13f4e:	4798      	blx	r3
   13f50:	e7d4      	b.n	13efc <nrfx_power_clock_irq_handler+0x4c>
}
   13f52:	bd10      	pop	{r4, pc}
   13f54:	40005000 	.word	0x40005000
   13f58:	20009b5c 	.word	0x20009b5c

00013f5c <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   13f5c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   13f5e:	4801      	ldr	r0, [pc, #4]	; (13f64 <nrfx_dppi_channel_alloc+0x8>)
   13f60:	f7ff be30 	b.w	13bc4 <nrfx_flag32_alloc>
   13f64:	200083cc 	.word	0x200083cc

00013f68 <nrfx_dppi_channel_free>:
}

nrfx_err_t nrfx_dppi_channel_free(uint8_t channel)
{
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
   13f68:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   13f6a:	4a04      	ldr	r2, [pc, #16]	; (13f7c <nrfx_dppi_channel_free+0x14>)
   13f6c:	4083      	lsls	r3, r0
{
   13f6e:	4601      	mov	r1, r0
   13f70:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return nrfx_flag32_free(&m_allocated_channels, channel);
   13f74:	4802      	ldr	r0, [pc, #8]	; (13f80 <nrfx_dppi_channel_free+0x18>)
   13f76:	f7ff be41 	b.w	13bfc <nrfx_flag32_free>
   13f7a:	bf00      	nop
   13f7c:	40017000 	.word	0x40017000
   13f80:	200083cc 	.word	0x200083cc

00013f84 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   13f84:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   13f86:	f003 021f 	and.w	r2, r3, #31
   13f8a:	6002      	str	r2, [r0, #0]
}
   13f8c:	4a03      	ldr	r2, [pc, #12]	; (13f9c <nrf_gpio_pin_port_decode+0x18>)
   13f8e:	4804      	ldr	r0, [pc, #16]	; (13fa0 <nrf_gpio_pin_port_decode+0x1c>)
    return pin_number >> 5;
   13f90:	095b      	lsrs	r3, r3, #5
}
   13f92:	2b01      	cmp	r3, #1
   13f94:	bf18      	it	ne
   13f96:	4610      	movne	r0, r2
   13f98:	4770      	bx	lr
   13f9a:	bf00      	nop
   13f9c:	40842500 	.word	0x40842500
   13fa0:	40842800 	.word	0x40842800

00013fa4 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   13fa4:	4b03      	ldr	r3, [pc, #12]	; (13fb4 <pin_in_use_by_te+0x10>)
   13fa6:	3008      	adds	r0, #8
   13fa8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   13fac:	f3c0 1040 	ubfx	r0, r0, #5, #1
   13fb0:	4770      	bx	lr
   13fb2:	bf00      	nop
   13fb4:	200083d0 	.word	0x200083d0

00013fb8 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   13fb8:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   13fba:	4c0d      	ldr	r4, [pc, #52]	; (13ff0 <call_handler+0x38>)
   13fbc:	f100 0308 	add.w	r3, r0, #8
   13fc0:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   13fc4:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   13fc6:	05da      	lsls	r2, r3, #23
{
   13fc8:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   13fca:	d507      	bpl.n	13fdc <call_handler+0x24>
   13fcc:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   13fd0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   13fd4:	6852      	ldr	r2, [r2, #4]
   13fd6:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   13fda:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   13fdc:	68a3      	ldr	r3, [r4, #8]
   13fde:	b12b      	cbz	r3, 13fec <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   13fe0:	4631      	mov	r1, r6
   13fe2:	4628      	mov	r0, r5
   13fe4:	68e2      	ldr	r2, [r4, #12]
    }
}
   13fe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   13fea:	4718      	bx	r3
}
   13fec:	bd70      	pop	{r4, r5, r6, pc}
   13fee:	bf00      	nop
   13ff0:	200083d0 	.word	0x200083d0

00013ff4 <release_handler>:
{
   13ff4:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   13ff6:	4a12      	ldr	r2, [pc, #72]	; (14040 <release_handler+0x4c>)
   13ff8:	3008      	adds	r0, #8
   13ffa:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   13ffe:	05d9      	lsls	r1, r3, #23
   14000:	d51b      	bpl.n	1403a <release_handler+0x46>
   14002:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   14006:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1400a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1400e:	2000      	movs	r0, #0
   14010:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   14014:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   14018:	f413 7f80 	tst.w	r3, #256	; 0x100
   1401c:	d003      	beq.n	14026 <release_handler+0x32>
   1401e:	f3c3 2343 	ubfx	r3, r3, #9, #4
   14022:	4299      	cmp	r1, r3
   14024:	d009      	beq.n	1403a <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   14026:	3001      	adds	r0, #1
   14028:	2830      	cmp	r0, #48	; 0x30
   1402a:	d1f3      	bne.n	14014 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1402c:	2300      	movs	r3, #0
   1402e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   14032:	4804      	ldr	r0, [pc, #16]	; (14044 <release_handler+0x50>)
}
   14034:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   14036:	f7ff bde1 	b.w	13bfc <nrfx_flag32_free>
}
   1403a:	bc10      	pop	{r4}
   1403c:	4770      	bx	lr
   1403e:	bf00      	nop
   14040:	200083d0 	.word	0x200083d0
   14044:	20008444 	.word	0x20008444

00014048 <pin_handler_trigger_uninit>:
{
   14048:	b538      	push	{r3, r4, r5, lr}
   1404a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1404c:	f7ff ffaa 	bl	13fa4 <pin_in_use_by_te>
   14050:	4c0b      	ldr	r4, [pc, #44]	; (14080 <pin_handler_trigger_uninit+0x38>)
   14052:	f102 0508 	add.w	r5, r2, #8
   14056:	b160      	cbz	r0, 14072 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   14058:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1405a:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1405e:	0b5b      	lsrs	r3, r3, #13
   14060:	009b      	lsls	r3, r3, #2
   14062:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   14066:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   1406a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
   1406e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   14072:	4610      	mov	r0, r2
   14074:	f7ff ffbe 	bl	13ff4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   14078:	2300      	movs	r3, #0
   1407a:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1407e:	bd38      	pop	{r3, r4, r5, pc}
   14080:	200083d0 	.word	0x200083d0

00014084 <nrfx_gpiote_input_configure>:
{
   14084:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   14088:	4604      	mov	r4, r0
   1408a:	4690      	mov	r8, r2
   1408c:	461d      	mov	r5, r3
    if (p_input_config)
   1408e:	b301      	cbz	r1, 140d2 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   14090:	4e4f      	ldr	r6, [pc, #316]	; (141d0 <nrfx_gpiote_input_configure+0x14c>)
   14092:	f100 0708 	add.w	r7, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   14096:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   1409a:	079b      	lsls	r3, r3, #30
   1409c:	d502      	bpl.n	140a4 <nrfx_gpiote_input_configure+0x20>
   1409e:	f7ff ff81 	bl	13fa4 <pin_in_use_by_te>
   140a2:	bb28      	cbnz	r0, 140f0 <nrfx_gpiote_input_configure+0x6c>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   140a4:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   140a6:	4620      	mov	r0, r4
   140a8:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   140ac:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   140b0:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   140b4:	f10d 020f 	add.w	r2, sp, #15
   140b8:	460b      	mov	r3, r1
   140ba:	f10d 010e 	add.w	r1, sp, #14
   140be:	f005 fe13 	bl	19ce8 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   140c2:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   140c6:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   140ca:	f043 0301 	orr.w	r3, r3, #1
   140ce:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_trigger_config)
   140d2:	f1b8 0f00 	cmp.w	r8, #0
   140d6:	d02d      	beq.n	14134 <nrfx_gpiote_input_configure+0xb0>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   140d8:	4e3d      	ldr	r6, [pc, #244]	; (141d0 <nrfx_gpiote_input_configure+0x14c>)
   140da:	f104 0708 	add.w	r7, r4, #8
   140de:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   140e2:	f898 0000 	ldrb.w	r0, [r8]
        if (pin_is_output(pin))
   140e6:	078a      	lsls	r2, r1, #30
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   140e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
        if (pin_is_output(pin))
   140ec:	d502      	bpl.n	140f4 <nrfx_gpiote_input_configure+0x70>
            if (use_evt)
   140ee:	b1cb      	cbz	r3, 14124 <nrfx_gpiote_input_configure+0xa0>
            return NRFX_ERROR_INVALID_PARAM;
   140f0:	4838      	ldr	r0, [pc, #224]	; (141d4 <nrfx_gpiote_input_configure+0x150>)
   140f2:	e021      	b.n	14138 <nrfx_gpiote_input_configure+0xb4>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   140f4:	f021 0120 	bic.w	r1, r1, #32
   140f8:	04c9      	lsls	r1, r1, #19
   140fa:	0cc9      	lsrs	r1, r1, #19
   140fc:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
   14100:	b183      	cbz	r3, 14124 <nrfx_gpiote_input_configure+0xa0>
                if (!edge)
   14102:	2803      	cmp	r0, #3
   14104:	d8f4      	bhi.n	140f0 <nrfx_gpiote_input_configure+0x6c>
                uint8_t ch = *p_trigger_config->p_in_channel;
   14106:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1410a:	f893 c000 	ldrb.w	ip, [r3]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1410e:	4662      	mov	r2, ip
   14110:	0092      	lsls	r2, r2, #2
   14112:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   14116:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   1411a:	b980      	cbnz	r0, 1413e <nrfx_gpiote_input_configure+0xba>
    p_reg->CONFIG[idx] = 0;
   1411c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   14120:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   14124:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   14128:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1412c:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
   14130:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
   14134:	bb1d      	cbnz	r5, 1417e <nrfx_gpiote_input_configure+0xfa>
        err = NRFX_SUCCESS;
   14136:	4828      	ldr	r0, [pc, #160]	; (141d8 <nrfx_gpiote_input_configure+0x154>)
}
   14138:	b004      	add	sp, #16
   1413a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1413e:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   14142:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
   14146:	f023 0303 	bic.w	r3, r3, #3
   1414a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1414e:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   14152:	f041 0120 	orr.w	r1, r1, #32
   14156:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
   1415a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   1415e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14162:	0223      	lsls	r3, r4, #8
   14164:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   14168:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
   1416c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   14170:	ea43 030e 	orr.w	r3, r3, lr
   14174:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   14178:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
   1417c:	e7d2      	b.n	14124 <nrfx_gpiote_input_configure+0xa0>
    release_handler(pin);
   1417e:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   14180:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   14184:	f7ff ff36 	bl	13ff4 <release_handler>
    if (!handler)
   14188:	2e00      	cmp	r6, #0
   1418a:	d0d4      	beq.n	14136 <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1418c:	4d10      	ldr	r5, [pc, #64]	; (141d0 <nrfx_gpiote_input_configure+0x14c>)
   1418e:	e9d5 2300 	ldrd	r2, r3, [r5]
   14192:	4296      	cmp	r6, r2
   14194:	d101      	bne.n	1419a <nrfx_gpiote_input_configure+0x116>
   14196:	429f      	cmp	r7, r3
   14198:	d018      	beq.n	141cc <nrfx_gpiote_input_configure+0x148>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1419a:	4810      	ldr	r0, [pc, #64]	; (141dc <nrfx_gpiote_input_configure+0x158>)
   1419c:	f10d 010f 	add.w	r1, sp, #15
   141a0:	f7ff fd10 	bl	13bc4 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   141a4:	4b0c      	ldr	r3, [pc, #48]	; (141d8 <nrfx_gpiote_input_configure+0x154>)
   141a6:	4298      	cmp	r0, r3
   141a8:	d1c6      	bne.n	14138 <nrfx_gpiote_input_configure+0xb4>
        handler_id = (int32_t)id;
   141aa:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
   141ae:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   141b2:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   141b4:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   141b6:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   141ba:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   141be:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   141c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   141c6:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   141ca:	e7b4      	b.n	14136 <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   141cc:	2200      	movs	r2, #0
   141ce:	e7ee      	b.n	141ae <nrfx_gpiote_input_configure+0x12a>
   141d0:	200083d0 	.word	0x200083d0
   141d4:	0bad0004 	.word	0x0bad0004
   141d8:	0bad0000 	.word	0x0bad0000
   141dc:	20008444 	.word	0x20008444

000141e0 <nrfx_gpiote_output_configure>:
{
   141e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   141e2:	4604      	mov	r4, r0
   141e4:	4615      	mov	r5, r2
   141e6:	b085      	sub	sp, #20
    if (p_config)
   141e8:	b319      	cbz	r1, 14232 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   141ea:	4e34      	ldr	r6, [pc, #208]	; (142bc <nrfx_gpiote_output_configure+0xdc>)
   141ec:	f100 0708 	add.w	r7, r0, #8
   141f0:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   141f4:	0793      	lsls	r3, r2, #30
   141f6:	d403      	bmi.n	14200 <nrfx_gpiote_output_configure+0x20>
   141f8:	f7ff fed4 	bl	13fa4 <pin_in_use_by_te>
   141fc:	2800      	cmp	r0, #0
   141fe:	d15a      	bne.n	142b6 <nrfx_gpiote_output_configure+0xd6>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   14200:	f012 0f1c 	tst.w	r2, #28
   14204:	d002      	beq.n	1420c <nrfx_gpiote_output_configure+0x2c>
   14206:	784b      	ldrb	r3, [r1, #1]
   14208:	2b01      	cmp	r3, #1
   1420a:	d054      	beq.n	142b6 <nrfx_gpiote_output_configure+0xd6>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1420c:	2301      	movs	r3, #1
   1420e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   14212:	2300      	movs	r3, #0
   14214:	1c4a      	adds	r2, r1, #1
   14216:	e9cd 1300 	strd	r1, r3, [sp]
   1421a:	4620      	mov	r0, r4
   1421c:	1c8b      	adds	r3, r1, #2
   1421e:	f10d 010f 	add.w	r1, sp, #15
   14222:	f005 fd61 	bl	19ce8 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   14226:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   1422a:	f043 0303 	orr.w	r3, r3, #3
   1422e:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   14232:	b915      	cbnz	r5, 1423a <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   14234:	4822      	ldr	r0, [pc, #136]	; (142c0 <nrfx_gpiote_output_configure+0xe0>)
}
   14236:	b005      	add	sp, #20
   14238:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1423a:	4e20      	ldr	r6, [pc, #128]	; (142bc <nrfx_gpiote_output_configure+0xdc>)
   1423c:	f104 0708 	add.w	r7, r4, #8
   14240:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   14244:	0783      	lsls	r3, r0, #30
   14246:	d536      	bpl.n	142b6 <nrfx_gpiote_output_configure+0xd6>
        uint32_t ch = p_task_config->task_ch;
   14248:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   1424c:	2300      	movs	r3, #0
   1424e:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   14250:	f020 0020 	bic.w	r0, r0, #32
   14254:	0089      	lsls	r1, r1, #2
   14256:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1425a:	04c0      	lsls	r0, r0, #19
   1425c:	f501 313c 	add.w	r1, r1, #192512	; 0x2f000
   14260:	0cc0      	lsrs	r0, r0, #19
   14262:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   14266:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   1426a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1426e:	786a      	ldrb	r2, [r5, #1]
   14270:	2a00      	cmp	r2, #0
   14272:	d0df      	beq.n	14234 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   14274:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   14278:	78ad      	ldrb	r5, [r5, #2]
   1427a:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   1427e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   14282:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14286:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1428a:	0223      	lsls	r3, r4, #8
   1428c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   14290:	0412      	lsls	r2, r2, #16
   14292:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14296:	ea43 030e 	orr.w	r3, r3, lr
   1429a:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1429c:	052a      	lsls	r2, r5, #20
   1429e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   142a2:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   142a6:	4313      	orrs	r3, r2
   142a8:	f040 0020 	orr.w	r0, r0, #32
   142ac:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   142b0:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   142b4:	e7be      	b.n	14234 <nrfx_gpiote_output_configure+0x54>
{
   142b6:	4803      	ldr	r0, [pc, #12]	; (142c4 <nrfx_gpiote_output_configure+0xe4>)
   142b8:	e7bd      	b.n	14236 <nrfx_gpiote_output_configure+0x56>
   142ba:	bf00      	nop
   142bc:	200083d0 	.word	0x200083d0
   142c0:	0bad0000 	.word	0x0bad0000
   142c4:	0bad0004 	.word	0x0bad0004

000142c8 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   142c8:	4b01      	ldr	r3, [pc, #4]	; (142d0 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   142ca:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   142ce:	4770      	bx	lr
   142d0:	200083d0 	.word	0x200083d0

000142d4 <nrfx_gpiote_channel_get>:
{
   142d4:	b508      	push	{r3, lr}
   142d6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   142d8:	f7ff fe64 	bl	13fa4 <pin_in_use_by_te>
   142dc:	b138      	cbz	r0, 142ee <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   142de:	4b05      	ldr	r3, [pc, #20]	; (142f4 <nrfx_gpiote_channel_get+0x20>)
   142e0:	3208      	adds	r2, #8
   142e2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   142e6:	4804      	ldr	r0, [pc, #16]	; (142f8 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   142e8:	0b5b      	lsrs	r3, r3, #13
   142ea:	700b      	strb	r3, [r1, #0]
}
   142ec:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   142ee:	4803      	ldr	r0, [pc, #12]	; (142fc <nrfx_gpiote_channel_get+0x28>)
   142f0:	e7fc      	b.n	142ec <nrfx_gpiote_channel_get+0x18>
   142f2:	bf00      	nop
   142f4:	200083d0 	.word	0x200083d0
   142f8:	0bad0000 	.word	0x0bad0000
   142fc:	0bad0004 	.word	0x0bad0004

00014300 <nrfx_gpiote_init>:
{
   14300:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   14302:	4c0f      	ldr	r4, [pc, #60]	; (14340 <nrfx_gpiote_init+0x40>)
   14304:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   14308:	b9bd      	cbnz	r5, 1433a <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1430a:	2260      	movs	r2, #96	; 0x60
   1430c:	4629      	mov	r1, r5
   1430e:	f104 0010 	add.w	r0, r4, #16
   14312:	f003 ff57 	bl	181c4 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   14316:	202f      	movs	r0, #47	; 0x2f
   14318:	f7f7 f914 	bl	b544 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1431c:	4b09      	ldr	r3, [pc, #36]	; (14344 <nrfx_gpiote_init+0x44>)
    return err_code;
   1431e:	480a      	ldr	r0, [pc, #40]	; (14348 <nrfx_gpiote_init+0x48>)
   14320:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   14324:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   14328:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1432c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   14330:	2301      	movs	r3, #1
   14332:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   14336:	6763      	str	r3, [r4, #116]	; 0x74
}
   14338:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1433a:	4804      	ldr	r0, [pc, #16]	; (1434c <nrfx_gpiote_init+0x4c>)
   1433c:	e7fc      	b.n	14338 <nrfx_gpiote_init+0x38>
   1433e:	bf00      	nop
   14340:	200083d0 	.word	0x200083d0
   14344:	4002f000 	.word	0x4002f000
   14348:	0bad0000 	.word	0x0bad0000
   1434c:	0bad0005 	.word	0x0bad0005

00014350 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   14350:	4b03      	ldr	r3, [pc, #12]	; (14360 <nrfx_gpiote_is_init+0x10>)
   14352:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   14356:	3800      	subs	r0, #0
   14358:	bf18      	it	ne
   1435a:	2001      	movne	r0, #1
   1435c:	4770      	bx	lr
   1435e:	bf00      	nop
   14360:	200083d0 	.word	0x200083d0

00014364 <nrfx_gpiote_channel_free>:
{
   14364:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   14366:	4801      	ldr	r0, [pc, #4]	; (1436c <nrfx_gpiote_channel_free+0x8>)
   14368:	f7ff bc48 	b.w	13bfc <nrfx_flag32_free>
   1436c:	20008440 	.word	0x20008440

00014370 <nrfx_gpiote_channel_alloc>:
{
   14370:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   14372:	4801      	ldr	r0, [pc, #4]	; (14378 <nrfx_gpiote_channel_alloc+0x8>)
   14374:	f7ff bc26 	b.w	13bc4 <nrfx_flag32_alloc>
   14378:	20008440 	.word	0x20008440

0001437c <nrfx_gpiote_trigger_enable>:
{
   1437c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1437e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   14380:	f7ff fe10 	bl	13fa4 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   14384:	4b1d      	ldr	r3, [pc, #116]	; (143fc <nrfx_gpiote_trigger_enable+0x80>)
   14386:	f104 0208 	add.w	r2, r4, #8
   1438a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1438e:	b1d0      	cbz	r0, 143c6 <nrfx_gpiote_trigger_enable+0x4a>
   14390:	f013 0502 	ands.w	r5, r3, #2
   14394:	d117      	bne.n	143c6 <nrfx_gpiote_trigger_enable+0x4a>
    return ((uint32_t)p_reg + event);
   14396:	481a      	ldr	r0, [pc, #104]	; (14400 <nrfx_gpiote_trigger_enable+0x84>)
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   14398:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1439a:	009a      	lsls	r2, r3, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1439c:	5085      	str	r5, [r0, r2]
   1439e:	5880      	ldr	r0, [r0, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   143a0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   143a4:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   143a8:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   143ac:	f040 0001 	orr.w	r0, r0, #1
   143b0:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   143b4:	b129      	cbz	r1, 143c2 <nrfx_gpiote_trigger_enable+0x46>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   143b6:	2201      	movs	r2, #1
   143b8:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   143bc:	4a11      	ldr	r2, [pc, #68]	; (14404 <nrfx_gpiote_trigger_enable+0x88>)
   143be:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   143c2:	b003      	add	sp, #12
   143c4:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   143c6:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   143ca:	2b04      	cmp	r3, #4
   143cc:	d011      	beq.n	143f2 <nrfx_gpiote_trigger_enable+0x76>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   143ce:	2b05      	cmp	r3, #5
   143d0:	d011      	beq.n	143f6 <nrfx_gpiote_trigger_enable+0x7a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   143d2:	a801      	add	r0, sp, #4
   143d4:	9401      	str	r4, [sp, #4]
   143d6:	f7ff fdd5 	bl	13f84 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   143da:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   143dc:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   143de:	40d9      	lsrs	r1, r3
   143e0:	f001 0101 	and.w	r1, r1, #1
   143e4:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   143e6:	4620      	mov	r0, r4
}
   143e8:	b003      	add	sp, #12
   143ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   143ee:	f005 bcc4 	b.w	19d7a <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   143f2:	2103      	movs	r1, #3
   143f4:	e7f7      	b.n	143e6 <nrfx_gpiote_trigger_enable+0x6a>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   143f6:	2102      	movs	r1, #2
   143f8:	e7f5      	b.n	143e6 <nrfx_gpiote_trigger_enable+0x6a>
   143fa:	bf00      	nop
   143fc:	200083d0 	.word	0x200083d0
   14400:	4002f100 	.word	0x4002f100
   14404:	4002f000 	.word	0x4002f000

00014408 <nrfx_gpiote_trigger_disable>:
{
   14408:	b508      	push	{r3, lr}
   1440a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1440c:	f7ff fdca 	bl	13fa4 <pin_in_use_by_te>
   14410:	b1c0      	cbz	r0, 14444 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   14412:	4b0f      	ldr	r3, [pc, #60]	; (14450 <nrfx_gpiote_trigger_disable+0x48>)
   14414:	f102 0108 	add.w	r1, r2, #8
   14418:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1441c:	0799      	lsls	r1, r3, #30
   1441e:	d411      	bmi.n	14444 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   14420:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   14422:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   14424:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   14426:	490b      	ldr	r1, [pc, #44]	; (14454 <nrfx_gpiote_trigger_disable+0x4c>)
   14428:	009b      	lsls	r3, r3, #2
   1442a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1442e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   14432:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   14436:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1443a:	f022 0203 	bic.w	r2, r2, #3
   1443e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   14442:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   14444:	2100      	movs	r1, #0
}
   14446:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1444a:	4610      	mov	r0, r2
   1444c:	f005 bc95 	b.w	19d7a <nrf_gpio_cfg_sense_set>
   14450:	200083d0 	.word	0x200083d0
   14454:	4002f000 	.word	0x4002f000

00014458 <nrfx_gpiote_pin_uninit>:
{
   14458:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1445a:	4b10      	ldr	r3, [pc, #64]	; (1449c <nrfx_gpiote_pin_uninit+0x44>)
   1445c:	f100 0208 	add.w	r2, r0, #8
   14460:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   14464:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   14466:	07db      	lsls	r3, r3, #31
   14468:	d516      	bpl.n	14498 <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
   1446a:	f7ff ffcd 	bl	14408 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1446e:	4620      	mov	r0, r4
   14470:	f7ff fdea 	bl	14048 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   14474:	a801      	add	r0, sp, #4
   14476:	9401      	str	r4, [sp, #4]
   14478:	f7ff fd84 	bl	13f84 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1447c:	9b01      	ldr	r3, [sp, #4]
   1447e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   14482:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   14486:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1448a:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   1448e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
   14492:	4803      	ldr	r0, [pc, #12]	; (144a0 <nrfx_gpiote_pin_uninit+0x48>)
}
   14494:	b002      	add	sp, #8
   14496:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   14498:	4802      	ldr	r0, [pc, #8]	; (144a4 <nrfx_gpiote_pin_uninit+0x4c>)
   1449a:	e7fb      	b.n	14494 <nrfx_gpiote_pin_uninit+0x3c>
   1449c:	200083d0 	.word	0x200083d0
   144a0:	0bad0000 	.word	0x0bad0000
   144a4:	0bad0004 	.word	0x0bad0004

000144a8 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   144a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   144ac:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   144ae:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   144b0:	4634      	mov	r4, r6
{
   144b2:	4b63      	ldr	r3, [pc, #396]	; (14640 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   144b4:	4863      	ldr	r0, [pc, #396]	; (14644 <nrfx_gpiote_irq_handler+0x19c>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   144b6:	4964      	ldr	r1, [pc, #400]	; (14648 <nrfx_gpiote_irq_handler+0x1a0>)
{
   144b8:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   144ba:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   144bc:	b135      	cbz	r5, 144cc <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   144be:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   144c2:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   144c4:	bf1e      	ittt	ne
   144c6:	601c      	strne	r4, [r3, #0]
   144c8:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   144ca:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   144cc:	3304      	adds	r3, #4
   144ce:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   144d0:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   144d4:	d1f1      	bne.n	144ba <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   144d6:	f8df a16c 	ldr.w	sl, [pc, #364]	; 14644 <nrfx_gpiote_irq_handler+0x19c>
   144da:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   144de:	2b00      	cmp	r3, #0
   144e0:	f000 8091 	beq.w	14606 <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
   144e4:	f8df 8164 	ldr.w	r8, [pc, #356]	; 1464c <nrfx_gpiote_irq_handler+0x1a4>
   144e8:	f8d8 3020 	ldr.w	r3, [r8, #32]
   144ec:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   144ee:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   144f2:	4b57      	ldr	r3, [pc, #348]	; (14650 <nrfx_gpiote_irq_handler+0x1a8>)
   144f4:	6a1a      	ldr	r2, [r3, #32]
   144f6:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   144f8:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   144fa:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
   144fe:	f10d 0b10 	add.w	fp, sp, #16
   14502:	ea4f 1349 	mov.w	r3, r9, lsl #5
   14506:	9300      	str	r3, [sp, #0]
   14508:	e048      	b.n	1459c <nrfx_gpiote_irq_handler+0xf4>
                uint32_t pin = NRF_CTZ(latch[i]);
   1450a:	fa94 f4a4 	rbit	r4, r4
   1450e:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   14512:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   14514:	4a4f      	ldr	r2, [pc, #316]	; (14654 <nrfx_gpiote_irq_handler+0x1ac>)
                pin += 32 * i;
   14516:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   14518:	f104 0308 	add.w	r3, r4, #8
   1451c:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   14520:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   14522:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
   14524:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   14528:	fa03 f202 	lsl.w	r2, r3, r2
   1452c:	f81b 3000 	ldrb.w	r3, [fp, r0]
   14530:	9403      	str	r4, [sp, #12]
   14532:	ea23 0302 	bic.w	r3, r3, r2
   14536:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1453a:	a803      	add	r0, sp, #12
   1453c:	f7ff fd22 	bl	13f84 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   14540:	9b03      	ldr	r3, [sp, #12]
   14542:	08b9      	lsrs	r1, r7, #2
   14544:	3380      	adds	r3, #128	; 0x80
   14546:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   1454a:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   1454e:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   14550:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   14552:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   14556:	d52b      	bpl.n	145b0 <nrfx_gpiote_irq_handler+0x108>
        call_handler(pin, trigger);
   14558:	4620      	mov	r0, r4
   1455a:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1455c:	b2dd      	uxtb	r5, r3
   1455e:	f7ff fd2b 	bl	13fb8 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   14562:	a803      	add	r0, sp, #12
   14564:	9403      	str	r4, [sp, #12]
   14566:	f7ff fd0d 	bl	13f84 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1456a:	9b03      	ldr	r3, [sp, #12]
   1456c:	3380      	adds	r3, #128	; 0x80
   1456e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   14572:	f3c3 4301 	ubfx	r3, r3, #16, #2
   14576:	429d      	cmp	r5, r3
   14578:	d107      	bne.n	1458a <nrfx_gpiote_irq_handler+0xe2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1457a:	2100      	movs	r1, #0
   1457c:	4620      	mov	r0, r4
   1457e:	f005 fbfc 	bl	19d7a <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   14582:	4629      	mov	r1, r5
   14584:	4620      	mov	r0, r4
   14586:	f005 fbf8 	bl	19d7a <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1458a:	a803      	add	r0, sp, #12
   1458c:	9403      	str	r4, [sp, #12]
   1458e:	f7ff fcf9 	bl	13f84 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   14592:	2201      	movs	r2, #1
   14594:	9b03      	ldr	r3, [sp, #12]
   14596:	fa02 f303 	lsl.w	r3, r2, r3
   1459a:	6203      	str	r3, [r0, #32]
            while (latch[i])
   1459c:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
   145a0:	2c00      	cmp	r4, #0
   145a2:	d1b2      	bne.n	1450a <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   145a4:	f1b9 0f00 	cmp.w	r9, #0
   145a8:	d11d      	bne.n	145e6 <nrfx_gpiote_irq_handler+0x13e>
   145aa:	f04f 0901 	mov.w	r9, #1
   145ae:	e7a8      	b.n	14502 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   145b0:	2b02      	cmp	r3, #2
   145b2:	d10c      	bne.n	145ce <nrfx_gpiote_irq_handler+0x126>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   145b4:	2103      	movs	r1, #3
   145b6:	4620      	mov	r0, r4
   145b8:	f005 fbdf 	bl	19d7a <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   145bc:	f005 0305 	and.w	r3, r5, #5
   145c0:	2b01      	cmp	r3, #1
   145c2:	d1e2      	bne.n	1458a <nrfx_gpiote_irq_handler+0xe2>
            call_handler(pin, trigger);
   145c4:	4639      	mov	r1, r7
   145c6:	4620      	mov	r0, r4
   145c8:	f7ff fcf6 	bl	13fb8 <call_handler>
   145cc:	e7dd      	b.n	1458a <nrfx_gpiote_irq_handler+0xe2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   145ce:	2102      	movs	r1, #2
   145d0:	4620      	mov	r0, r4
   145d2:	9301      	str	r3, [sp, #4]
   145d4:	f005 fbd1 	bl	19d7a <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   145d8:	2d03      	cmp	r5, #3
   145da:	d0f3      	beq.n	145c4 <nrfx_gpiote_irq_handler+0x11c>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   145dc:	9b01      	ldr	r3, [sp, #4]
   145de:	2b03      	cmp	r3, #3
   145e0:	d1d3      	bne.n	1458a <nrfx_gpiote_irq_handler+0xe2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   145e2:	2d02      	cmp	r5, #2
   145e4:	e7ed      	b.n	145c2 <nrfx_gpiote_irq_handler+0x11a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   145e6:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
   145ea:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   145ee:	f8d8 3020 	ldr.w	r3, [r8, #32]
   145f2:	4917      	ldr	r1, [pc, #92]	; (14650 <nrfx_gpiote_irq_handler+0x1a8>)
   145f4:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   145f6:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   145fa:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
   145fc:	4313      	orrs	r3, r2
   145fe:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   14600:	620a      	str	r2, [r1, #32]
   14602:	f47f af7a 	bne.w	144fa <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
   14606:	2401      	movs	r4, #1
    while (mask)
   14608:	b916      	cbnz	r6, 14610 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1460a:	b007      	add	sp, #28
   1460c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   14610:	fa96 f3a6 	rbit	r3, r6
   14614:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   14618:	fa04 f203 	lsl.w	r2, r4, r3
   1461c:	009b      	lsls	r3, r3, #2
   1461e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   14622:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   14626:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1462a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1462e:	f3c0 2005 	ubfx	r0, r0, #8, #6
   14632:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   14636:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1463a:	f7ff fcbd 	bl	13fb8 <call_handler>
   1463e:	e7e3      	b.n	14608 <nrfx_gpiote_irq_handler+0x160>
   14640:	4002f100 	.word	0x4002f100
   14644:	4002f000 	.word	0x4002f000
   14648:	4002f120 	.word	0x4002f120
   1464c:	40842500 	.word	0x40842500
   14650:	40842800 	.word	0x40842800
   14654:	200083d0 	.word	0x200083d0

00014658 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   14658:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1465a:	4c08      	ldr	r4, [pc, #32]	; (1467c <nrfx_ipc_init+0x24>)
{
   1465c:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1465e:	7923      	ldrb	r3, [r4, #4]
{
   14660:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   14662:	b943      	cbnz	r3, 14676 <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   14664:	202a      	movs	r0, #42	; 0x2a
   14666:	f7f6 ff6d 	bl	b544 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1466a:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   1466c:	4804      	ldr	r0, [pc, #16]	; (14680 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1466e:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   14670:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   14672:	60a5      	str	r5, [r4, #8]
}
   14674:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   14676:	4803      	ldr	r0, [pc, #12]	; (14684 <nrfx_ipc_init+0x2c>)
   14678:	e7fc      	b.n	14674 <nrfx_ipc_init+0x1c>
   1467a:	bf00      	nop
   1467c:	20009b64 	.word	0x20009b64
   14680:	0bad0000 	.word	0x0bad0000
   14684:	0bad000c 	.word	0x0bad000c

00014688 <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   14688:	2300      	movs	r3, #0
{
   1468a:	b530      	push	{r4, r5, lr}
    p_reg->SEND_CNF[index] = channels_mask;
   1468c:	4a0d      	ldr	r2, [pc, #52]	; (146c4 <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   1468e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   14692:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   14696:	3301      	adds	r3, #1
   14698:	2b10      	cmp	r3, #16
   1469a:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   1469e:	d1f6      	bne.n	1468e <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   146a0:	2300      	movs	r3, #0
    p_reg->RECEIVE_CNF[index] = channels_mask;
   146a2:	4a08      	ldr	r2, [pc, #32]	; (146c4 <nrfx_ipc_config_load+0x3c>)
   146a4:	f100 013c 	add.w	r1, r0, #60	; 0x3c
   146a8:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   146ac:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   146b0:	3301      	adds	r3, #1
   146b2:	2b10      	cmp	r3, #16
   146b4:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   146b8:	d1f6      	bne.n	146a8 <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   146ba:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
   146be:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   146c2:	bd30      	pop	{r4, r5, pc}
   146c4:	4002a000 	.word	0x4002a000

000146c8 <nrfx_ipc_receive_event_enable>:
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   146c8:	2301      	movs	r3, #1
   146ca:	4a02      	ldr	r2, [pc, #8]	; (146d4 <nrfx_ipc_receive_event_enable+0xc>)
   146cc:	4083      	lsls	r3, r0
   146ce:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   146d2:	4770      	bx	lr
   146d4:	4002a000 	.word	0x4002a000

000146d8 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   146d8:	2301      	movs	r3, #1
    p_reg->INTENCLR = mask;
   146da:	4a02      	ldr	r2, [pc, #8]	; (146e4 <nrfx_ipc_receive_event_disable+0xc>)
   146dc:	4083      	lsls	r3, r0
   146de:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   146e2:	4770      	bx	lr
   146e4:	4002a000 	.word	0x4002a000

000146e8 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   146e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   146ea:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   146ec:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   146ee:	4b0b      	ldr	r3, [pc, #44]	; (1471c <nrfx_ipc_irq_handler+0x34>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   146f0:	4d0b      	ldr	r5, [pc, #44]	; (14720 <nrfx_ipc_irq_handler+0x38>)
   146f2:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   146f6:	b904      	cbnz	r4, 146fa <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   146f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   146fa:	fa94 f0a4 	rbit	r0, r4
   146fe:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   14702:	fa06 f300 	lsl.w	r3, r6, r0
   14706:	ea24 0403 	bic.w	r4, r4, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1470a:	4b06      	ldr	r3, [pc, #24]	; (14724 <nrfx_ipc_irq_handler+0x3c>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   1470c:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1470e:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   14710:	682b      	ldr	r3, [r5, #0]
   14712:	2b00      	cmp	r3, #0
   14714:	d0ef      	beq.n	146f6 <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   14716:	68a9      	ldr	r1, [r5, #8]
   14718:	4798      	blx	r3
   1471a:	e7ec      	b.n	146f6 <nrfx_ipc_irq_handler+0xe>
   1471c:	4002a000 	.word	0x4002a000
   14720:	20009b64 	.word	0x20009b64
   14724:	4002a100 	.word	0x4002a100

00014728 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   14728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1472c:	460e      	mov	r6, r1
   1472e:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   14730:	4d0c      	ldr	r5, [pc, #48]	; (14764 <metal_generic_dev_open+0x3c>)
   14732:	f855 4f18 	ldr.w	r4, [r5, #24]!
   14736:	42ac      	cmp	r4, r5
   14738:	d103      	bne.n	14742 <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   1473a:	f06f 0012 	mvn.w	r0, #18
   1473e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   14742:	4631      	mov	r1, r6
   14744:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   14748:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   1474c:	f003 fd00 	bl	18150 <strcmp>
   14750:	b930      	cbnz	r0, 14760 <metal_generic_dev_open+0x38>
			*device = dev;
   14752:	f8c7 8000 	str.w	r8, [r7]
			return metal_generic_dev_sys_open(dev);
   14756:	4640      	mov	r0, r8
}
   14758:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   1475c:	f005 bc1b 	b.w	19f96 <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   14760:	6824      	ldr	r4, [r4, #0]
   14762:	e7e8      	b.n	14736 <metal_generic_dev_open+0xe>
   14764:	20009b70 	.word	0x20009b70

00014768 <metal_bus_unregister>:
{
   14768:	b510      	push	{r4, lr}
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   1476a:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   1476e:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   14770:	6a41      	ldr	r1, [r0, #36]	; 0x24
	metal_list_del(&bus->node);
   14772:	f100 0324 	add.w	r3, r0, #36	; 0x24
   14776:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   14778:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	if (bus->ops.bus_close)
   1477c:	6843      	ldr	r3, [r0, #4]
{
   1477e:	4604      	mov	r4, r0
	if (bus->ops.bus_close)
   14780:	b103      	cbz	r3, 14784 <metal_bus_unregister+0x1c>
		bus->ops.bus_close(bus);
   14782:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
   14784:	4b05      	ldr	r3, [pc, #20]	; (1479c <metal_bus_unregister+0x34>)
   14786:	781a      	ldrb	r2, [r3, #0]
   14788:	2a06      	cmp	r2, #6
   1478a:	d905      	bls.n	14798 <metal_bus_unregister+0x30>
   1478c:	685b      	ldr	r3, [r3, #4]
   1478e:	b11b      	cbz	r3, 14798 <metal_bus_unregister+0x30>
   14790:	2007      	movs	r0, #7
   14792:	6822      	ldr	r2, [r4, #0]
   14794:	4902      	ldr	r1, [pc, #8]	; (147a0 <metal_bus_unregister+0x38>)
   14796:	4798      	blx	r3
}
   14798:	2000      	movs	r0, #0
   1479a:	bd10      	pop	{r4, pc}
   1479c:	20009b70 	.word	0x20009b70
   147a0:	0001e546 	.word	0x0001e546

000147a4 <metal_bus_find>:
{
   147a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   147a8:	4607      	mov	r7, r0
   147aa:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   147ac:	4e0b      	ldr	r6, [pc, #44]	; (147dc <metal_bus_find+0x38>)
   147ae:	f856 4f08 	ldr.w	r4, [r6, #8]!
   147b2:	42b4      	cmp	r4, r6
   147b4:	d102      	bne.n	147bc <metal_bus_find+0x18>
	return -ENOENT;
   147b6:	f06f 0001 	mvn.w	r0, #1
   147ba:	e00a      	b.n	147d2 <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   147bc:	4639      	mov	r1, r7
   147be:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   147c2:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   147c6:	f003 fcc3 	bl	18150 <strcmp>
   147ca:	b920      	cbnz	r0, 147d6 <metal_bus_find+0x32>
   147cc:	b11d      	cbz	r5, 147d6 <metal_bus_find+0x32>
			*result = bus;
   147ce:	f8c5 8000 	str.w	r8, [r5]
}
   147d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   147d6:	6824      	ldr	r4, [r4, #0]
   147d8:	e7eb      	b.n	147b2 <metal_bus_find+0xe>
   147da:	bf00      	nop
   147dc:	20009b70 	.word	0x20009b70

000147e0 <metal_bus_register>:
{
   147e0:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   147e2:	4604      	mov	r4, r0
   147e4:	b910      	cbnz	r0, 147ec <metal_bus_register+0xc>
		return -EINVAL;
   147e6:	f06f 0015 	mvn.w	r0, #21
}
   147ea:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   147ec:	6800      	ldr	r0, [r0, #0]
   147ee:	2800      	cmp	r0, #0
   147f0:	d0f9      	beq.n	147e6 <metal_bus_register+0x6>
   147f2:	f003 fc9d 	bl	18130 <strlen>
   147f6:	2800      	cmp	r0, #0
   147f8:	d0f5      	beq.n	147e6 <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   147fa:	2100      	movs	r1, #0
   147fc:	6820      	ldr	r0, [r4, #0]
   147fe:	f7ff ffd1 	bl	147a4 <metal_bus_find>
   14802:	b1c8      	cbz	r0, 14838 <metal_bus_register+0x58>
	metal_list_init(&bus->devices);
   14804:	f104 031c 	add.w	r3, r4, #28
	list->next = list;
   14808:	e9c4 3307 	strd	r3, r3, [r4, #28]
	new_node->prev = node->prev;
   1480c:	4b0c      	ldr	r3, [pc, #48]	; (14840 <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   1480e:	f104 0224 	add.w	r2, r4, #36	; 0x24
   14812:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   14814:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   14818:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   1481a:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   1481c:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   1481e:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   14820:	781a      	ldrb	r2, [r3, #0]
   14822:	2a06      	cmp	r2, #6
   14824:	d901      	bls.n	1482a <metal_bus_register+0x4a>
   14826:	685b      	ldr	r3, [r3, #4]
   14828:	b90b      	cbnz	r3, 1482e <metal_bus_register+0x4e>
	return 0;
   1482a:	2000      	movs	r0, #0
   1482c:	e7dd      	b.n	147ea <metal_bus_register+0xa>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   1482e:	2007      	movs	r0, #7
   14830:	6822      	ldr	r2, [r4, #0]
   14832:	4904      	ldr	r1, [pc, #16]	; (14844 <metal_bus_register+0x64>)
   14834:	4798      	blx	r3
   14836:	e7f8      	b.n	1482a <metal_bus_register+0x4a>
		return -EEXIST;
   14838:	f06f 0010 	mvn.w	r0, #16
   1483c:	e7d5      	b.n	147ea <metal_bus_register+0xa>
   1483e:	bf00      	nop
   14840:	20009b70 	.word	0x20009b70
   14844:	0001e548 	.word	0x0001e548

00014848 <metal_register_generic_device>:
{
   14848:	b510      	push	{r4, lr}
   1484a:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   1484c:	6800      	ldr	r0, [r0, #0]
   1484e:	b910      	cbnz	r0, 14856 <metal_register_generic_device+0xe>
		return -EINVAL;
   14850:	f06f 0015 	mvn.w	r0, #21
}
   14854:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   14856:	f003 fc6b 	bl	18130 <strlen>
   1485a:	2800      	cmp	r0, #0
   1485c:	d0f8      	beq.n	14850 <metal_register_generic_device+0x8>
   1485e:	68a3      	ldr	r3, [r4, #8]
   14860:	2b01      	cmp	r3, #1
   14862:	d8f5      	bhi.n	14850 <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   14864:	4b06      	ldr	r3, [pc, #24]	; (14880 <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   14866:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   1486a:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   1486c:	4b05      	ldr	r3, [pc, #20]	; (14884 <metal_register_generic_device+0x3c>)
   1486e:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   14870:	f103 0018 	add.w	r0, r3, #24
   14874:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   14876:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   14878:	61d9      	str	r1, [r3, #28]
	return 0;
   1487a:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   1487c:	6011      	str	r1, [r2, #0]
}
   1487e:	e7e9      	b.n	14854 <metal_register_generic_device+0xc>
   14880:	2000844c 	.word	0x2000844c
   14884:	20009b70 	.word	0x20009b70

00014888 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
   14888:	b538      	push	{r3, r4, r5, lr}
   1488a:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   1488c:	4c0d      	ldr	r4, [pc, #52]	; (148c4 <metal_init+0x3c>)
   1488e:	2220      	movs	r2, #32
   14890:	4620      	mov	r0, r4
   14892:	2100      	movs	r1, #0
   14894:	f003 fc96 	bl	181c4 <memset>

	_metal.common.log_handler   = params->log_handler;
   14898:	682b      	ldr	r3, [r5, #0]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   1489a:	4628      	mov	r0, r5
	_metal.common.log_handler   = params->log_handler;
   1489c:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
   1489e:	4623      	mov	r3, r4
   148a0:	792a      	ldrb	r2, [r5, #4]
   148a2:	f803 2b08 	strb.w	r2, [r3], #8
	list->next = list;
   148a6:	e9c4 3302 	strd	r3, r3, [r4, #8]
	list->prev = list;
   148aa:	f104 0310 	add.w	r3, r4, #16
	list->next = list;
   148ae:	e9c4 3304 	strd	r3, r3, [r4, #16]
	list->prev = list;
   148b2:	f104 0318 	add.w	r3, r4, #24
	list->next = list;
   148b6:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (error)
		return error;

	return error;
}
   148ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	error = metal_sys_init(params);
   148be:	f000 b80f 	b.w	148e0 <metal_sys_init>
   148c2:	bf00      	nop
   148c4:	20009b70 	.word	0x20009b70

000148c8 <metal_finish>:

void metal_finish(void)
{
   148c8:	b508      	push	{r3, lr}
	metal_sys_finish();
   148ca:	f000 f811 	bl	148f0 <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
}
   148ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	memset(&_metal, 0, sizeof(_metal));
   148d2:	2220      	movs	r2, #32
   148d4:	2100      	movs	r1, #0
   148d6:	4801      	ldr	r0, [pc, #4]	; (148dc <metal_finish+0x14>)
   148d8:	f003 bc74 	b.w	181c4 <memset>
   148dc:	20009b70 	.word	0x20009b70

000148e0 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   148e0:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   148e2:	4802      	ldr	r0, [pc, #8]	; (148ec <metal_sys_init+0xc>)
   148e4:	f7ff ff7c 	bl	147e0 <metal_bus_register>
	return 0;
}
   148e8:	2000      	movs	r0, #0
   148ea:	bd08      	pop	{r3, pc}
   148ec:	2000844c 	.word	0x2000844c

000148f0 <metal_sys_finish>:

void metal_sys_finish(void)
{
	metal_bus_unregister(&metal_generic_bus);
   148f0:	4801      	ldr	r0, [pc, #4]	; (148f8 <metal_sys_finish+0x8>)
   148f2:	f7ff bf39 	b.w	14768 <metal_bus_unregister>
   148f6:	bf00      	nop
   148f8:	2000844c 	.word	0x2000844c

000148fc <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   148fc:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   148fe:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   14900:	2b06      	cmp	r3, #6
{
   14902:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   14904:	bf88      	it	hi
   14906:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   14908:	4b09      	ldr	r3, [pc, #36]	; (14930 <metal_zephyr_log_handler+0x34>)
{
   1490a:	ac05      	add	r4, sp, #20
   1490c:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   14910:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   14914:	4807      	ldr	r0, [pc, #28]	; (14934 <metal_zephyr_log_handler+0x38>)
   14916:	f001 ff43 	bl	167a0 <printk>

	va_start(args, format);
	vprintk(format, args);
   1491a:	4621      	mov	r1, r4
   1491c:	4628      	mov	r0, r5
	va_start(args, format);
   1491e:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   14920:	f001 ff3c 	bl	1679c <vprintk>
	va_end(args);
}
   14924:	b002      	add	sp, #8
   14926:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1492a:	b003      	add	sp, #12
   1492c:	4770      	bx	lr
   1492e:	bf00      	nop
   14930:	0001c1bc 	.word	0x0001c1bc
   14934:	0001d213 	.word	0x0001d213

00014938 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   14938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1493c:	469a      	mov	sl, r3
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   1493e:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   14940:	4606      	mov	r6, r0
	if (nvqs > num_vrings)
   14942:	4293      	cmp	r3, r2
{
   14944:	4617      	mov	r7, r2
   14946:	b087      	sub	sp, #28
	if (nvqs > num_vrings)
   14948:	d341      	bcc.n	149ce <virtio_create_virtqueues+0x96>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   1494a:	2500      	movs	r5, #0
		vring_info = &vdev->vrings_info[i];
   1494c:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   14950:	42bd      	cmp	r5, r7
   14952:	d103      	bne.n	1495c <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   14954:	2000      	movs	r0, #0
}
   14956:	b007      	add	sp, #28
   14958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   1495c:	fb0b f805 	mul.w	r8, fp, r5
   14960:	f8d6 902c 	ldr.w	r9, [r6, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   14964:	69b2      	ldr	r2, [r6, #24]
		vring_info = &vdev->vrings_info[i];
   14966:	eb09 0408 	add.w	r4, r9, r8
		vring_alloc = &vring_info->info;
   1496a:	1d23      	adds	r3, r4, #4
   1496c:	9305      	str	r3, [sp, #20]
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   1496e:	b9ca      	cbnz	r2, 149a4 <virtio_create_virtqueues+0x6c>
			struct metal_io_region *io = vring_info->io;
   14970:	6960      	ldr	r0, [r4, #20]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   14972:	6861      	ldr	r1, [r4, #4]
   14974:	6803      	ldr	r3, [r0, #0]
			metal_io_block_set(io, offset, 0,
   14976:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   1497a:	1ac9      	subs	r1, r1, r3
						      vring_alloc->align));
   1497c:	68a3      	ldr	r3, [r4, #8]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   1497e:	f10c 0e03 	add.w	lr, ip, #3
	size = (size + align - 1) & ~(align - 1);
   14982:	1e5c      	subs	r4, r3, #1
   14984:	eb04 140c 	add.w	r4, r4, ip, lsl #4
   14988:	425b      	negs	r3, r3
   1498a:	eb04 044e 	add.w	r4, r4, lr, lsl #1
   1498e:	401c      	ands	r4, r3
	size += sizeof(struct vring_used) +
   14990:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
			metal_io_block_set(io, offset, 0,
   14994:	6884      	ldr	r4, [r0, #8]
   14996:	3306      	adds	r3, #6
   14998:	42a1      	cmp	r1, r4
   1499a:	bf28      	it	cs
   1499c:	f04f 31ff 	movcs.w	r1, #4294967295
   149a0:	f005 fac5 	bl	19f2e <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   149a4:	f859 3008 	ldr.w	r3, [r9, r8]
   149a8:	4630      	mov	r0, r6
   149aa:	9302      	str	r3, [sp, #8]
				       callbacks[i], vdev->func->notify,
   149ac:	6a33      	ldr	r3, [r6, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   149ae:	b2a9      	uxth	r1, r5
   149b0:	6a1b      	ldr	r3, [r3, #32]
   149b2:	9301      	str	r3, [sp, #4]
   149b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   149b6:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   149ba:	9300      	str	r3, [sp, #0]
   149bc:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
   149c0:	9b05      	ldr	r3, [sp, #20]
   149c2:	f005 fb2d 	bl	1a020 <virtqueue_create>
		if (ret)
   149c6:	2800      	cmp	r0, #0
   149c8:	d1c5      	bne.n	14956 <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   149ca:	3501      	adds	r5, #1
   149cc:	e7c0      	b.n	14950 <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   149ce:	4801      	ldr	r0, [pc, #4]	; (149d4 <virtio_create_virtqueues+0x9c>)
   149d0:	e7c1      	b.n	14956 <virtio_create_virtqueues+0x1e>
   149d2:	bf00      	nop
   149d4:	fffff440 	.word	0xfffff440

000149d8 <virtqueue_free>:
 *
 * @param vq        - Pointer to VirtIO queue control block
 *
 */
void virtqueue_free(struct virtqueue *vq)
{
   149d8:	b510      	push	{r4, lr}
	if (vq) {
   149da:	4604      	mov	r4, r0
   149dc:	b190      	cbz	r0, 14a04 <virtqueue_free+0x2c>
		if (vq->vq_free_cnt != vq->vq_nentries) {
   149de:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   149e0:	8943      	ldrh	r3, [r0, #10]
   149e2:	429a      	cmp	r2, r3
   149e4:	d009      	beq.n	149fa <virtqueue_free+0x22>
			metal_log(METAL_LOG_WARNING,
   149e6:	4b08      	ldr	r3, [pc, #32]	; (14a08 <virtqueue_free+0x30>)
   149e8:	781a      	ldrb	r2, [r3, #0]
   149ea:	2a03      	cmp	r2, #3
   149ec:	d905      	bls.n	149fa <virtqueue_free+0x22>
   149ee:	685b      	ldr	r3, [r3, #4]
   149f0:	b11b      	cbz	r3, 149fa <virtqueue_free+0x22>
   149f2:	6842      	ldr	r2, [r0, #4]
   149f4:	4905      	ldr	r1, [pc, #20]	; (14a0c <virtqueue_free+0x34>)
   149f6:	2004      	movs	r0, #4
   149f8:	4798      	blx	r3
	return k_malloc(size);
}

static inline void metal_free_memory(void *ptr)
{
	k_free(ptr);
   149fa:	4620      	mov	r0, r4
				  vq->vq_name);
		}

		metal_free_memory(vq);
	}
}
   149fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14a00:	f006 bce4 	b.w	1b3cc <k_free>
   14a04:	bd10      	pop	{r4, pc}
   14a06:	bf00      	nop
   14a08:	20009b70 	.word	0x20009b70
   14a0c:	0001e5f3 	.word	0x0001e5f3

00014a10 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   14a10:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx >= vq->vq_nentries) {
   14a12:	8944      	ldrh	r4, [r0, #10]
   14a14:	428c      	cmp	r4, r1
   14a16:	d912      	bls.n	14a3e <virtqueue_add_consumed_buffer+0x2e>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by driver, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   14a18:	6a03      	ldr	r3, [r0, #32]
   14a1a:	3c01      	subs	r4, #1
   14a1c:	885d      	ldrh	r5, [r3, #2]
   14a1e:	402c      	ands	r4, r5
   14a20:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
   14a24:	6059      	str	r1, [r3, #4]
	used_desc->len = len;
   14a26:	609a      	str	r2, [r3, #8]

	/* We still need to flush it because this is read by driver */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   14a28:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   14a2c:	6a02      	ldr	r2, [r0, #32]
   14a2e:	8853      	ldrh	r3, [r2, #2]
   14a30:	3301      	adds	r3, #1
   14a32:	8053      	strh	r3, [r2, #2]

	/* Used.idx is read by driver, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   14a34:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   14a36:	3301      	adds	r3, #1
   14a38:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   14a3a:	2000      	movs	r0, #0
}
   14a3c:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   14a3e:	4801      	ldr	r0, [pc, #4]	; (14a44 <virtqueue_add_consumed_buffer+0x34>)
   14a40:	e7fc      	b.n	14a3c <virtqueue_add_consumed_buffer+0x2c>
   14a42:	bf00      	nop
   14a44:	fffff441 	.word	0xfffff441

00014a48 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
   14a48:	b470      	push	{r4, r5, r6}
   14a4a:	9e03      	ldr	r6, [sp, #12]
   14a4c:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   14a4e:	b158      	cbz	r0, 14a68 <rpmsg_send_offchannel_raw+0x20>
   14a50:	6a00      	ldr	r0, [r0, #32]
   14a52:	b148      	cbz	r0, 14a68 <rpmsg_send_offchannel_raw+0x20>
   14a54:	b143      	cbz	r3, 14a68 <rpmsg_send_offchannel_raw+0x20>
   14a56:	3401      	adds	r4, #1
   14a58:	d006      	beq.n	14a68 <rpmsg_send_offchannel_raw+0x20>
   14a5a:	2e00      	cmp	r6, #0
   14a5c:	db04      	blt.n	14a68 <rpmsg_send_offchannel_raw+0x20>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   14a5e:	6f84      	ldr	r4, [r0, #120]	; 0x78
   14a60:	b114      	cbz	r4, 14a68 <rpmsg_send_offchannel_raw+0x20>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   14a62:	46a4      	mov	ip, r4
						     len, wait);

	return RPMSG_ERR_PARAM;
}
   14a64:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   14a66:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   14a68:	4801      	ldr	r0, [pc, #4]	; (14a70 <rpmsg_send_offchannel_raw+0x28>)
}
   14a6a:	bc70      	pop	{r4, r5, r6}
   14a6c:	4770      	bx	lr
   14a6e:	bf00      	nop
   14a70:	fffff82d 	.word	0xfffff82d

00014a74 <rpmsg_send_offchannel_nocopy>:
	return NULL;
}

int rpmsg_send_offchannel_nocopy(struct rpmsg_endpoint *ept, uint32_t src,
				 uint32_t dst, const void *data, int len)
{
   14a74:	b470      	push	{r4, r5, r6}
   14a76:	9e03      	ldr	r6, [sp, #12]
   14a78:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   14a7a:	b160      	cbz	r0, 14a96 <rpmsg_send_offchannel_nocopy+0x22>
   14a7c:	6a00      	ldr	r0, [r0, #32]
   14a7e:	b150      	cbz	r0, 14a96 <rpmsg_send_offchannel_nocopy+0x22>
   14a80:	b14b      	cbz	r3, 14a96 <rpmsg_send_offchannel_nocopy+0x22>
   14a82:	3401      	adds	r4, #1
   14a84:	d007      	beq.n	14a96 <rpmsg_send_offchannel_nocopy+0x22>
   14a86:	2e00      	cmp	r6, #0
   14a88:	db05      	blt.n	14a96 <rpmsg_send_offchannel_nocopy+0x22>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_nocopy)
   14a8a:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
   14a8e:	b114      	cbz	r4, 14a96 <rpmsg_send_offchannel_nocopy+0x22>
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   14a90:	46a4      	mov	ip, r4
							data, len);

	return RPMSG_ERR_PARAM;
}
   14a92:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   14a94:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   14a96:	4801      	ldr	r0, [pc, #4]	; (14a9c <rpmsg_send_offchannel_nocopy+0x28>)
}
   14a98:	bc70      	pop	{r4, r5, r6}
   14a9a:	4770      	bx	lr
   14a9c:	fffff82d 	.word	0xfffff82d

00014aa0 <rpmsg_register_endpoint>:
			     struct rpmsg_endpoint *ept,
			     const char *name,
			     uint32_t src, uint32_t dest,
			     rpmsg_ept_cb cb,
			     rpmsg_ns_unbind_cb ns_unbind_cb)
{
   14aa0:	b570      	push	{r4, r5, r6, lr}
   14aa2:	460c      	mov	r4, r1
   14aa4:	4611      	mov	r1, r2
   14aa6:	4605      	mov	r5, r0
   14aa8:	461e      	mov	r6, r3
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   14aaa:	4b0c      	ldr	r3, [pc, #48]	; (14adc <rpmsg_register_endpoint+0x3c>)
   14aac:	2220      	movs	r2, #32
   14aae:	2900      	cmp	r1, #0
   14ab0:	bf08      	it	eq
   14ab2:	4619      	moveq	r1, r3
   14ab4:	4620      	mov	r0, r4
   14ab6:	f003 fb27 	bl	18108 <strncpy>
	ept->addr = src;
	ept->dest_addr = dest;
   14aba:	9b04      	ldr	r3, [sp, #16]
	ept->addr = src;
   14abc:	6266      	str	r6, [r4, #36]	; 0x24
	ept->dest_addr = dest;
   14abe:	62a3      	str	r3, [r4, #40]	; 0x28
	ept->cb = cb;
   14ac0:	9b05      	ldr	r3, [sp, #20]
	ept->ns_unbind_cb = ns_unbind_cb;
	ept->rdev = rdev;
   14ac2:	6225      	str	r5, [r4, #32]
	ept->cb = cb;
   14ac4:	62e3      	str	r3, [r4, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   14ac6:	9b06      	ldr	r3, [sp, #24]
   14ac8:	6323      	str	r3, [r4, #48]	; 0x30
	new_node->prev = node->prev;
   14aca:	686a      	ldr	r2, [r5, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   14acc:	f104 0334 	add.w	r3, r4, #52	; 0x34
	new_node->next = node;
   14ad0:	e9c4 520d 	strd	r5, r2, [r4, #52]	; 0x34
	new_node->next->prev = new_node;
   14ad4:	606b      	str	r3, [r5, #4]
	new_node->prev->next = new_node;
   14ad6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   14ad8:	6013      	str	r3, [r2, #0]
}
   14ada:	bd70      	pop	{r4, r5, r6, pc}
   14adc:	0001e614 	.word	0x0001e614

00014ae0 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   14ae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   14ae4:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   14ae8:	460d      	mov	r5, r1
   14aea:	4692      	mov	sl, r2
   14aec:	461f      	mov	r7, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept || !rdev || !cb)
   14aee:	4606      	mov	r6, r0
   14af0:	2800      	cmp	r0, #0
   14af2:	d06c      	beq.n	14bce <rpmsg_create_ept+0xee>
   14af4:	2900      	cmp	r1, #0
   14af6:	d06a      	beq.n	14bce <rpmsg_create_ept+0xee>
   14af8:	f1b9 0f00 	cmp.w	r9, #0
   14afc:	d067      	beq.n	14bce <rpmsg_create_ept+0xee>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   14afe:	f101 0858 	add.w	r8, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   14b02:	4640      	mov	r0, r8
   14b04:	f005 fbf5 	bl	1a2f2 <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   14b08:	1c78      	adds	r0, r7, #1
   14b0a:	d140      	bne.n	14b8e <rpmsg_create_ept+0xae>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   14b0c:	6cac      	ldr	r4, [r5, #72]	; 0x48
   14b0e:	f105 0348 	add.w	r3, r5, #72	; 0x48
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   14b12:	f014 0401 	ands.w	r4, r4, #1
   14b16:	d00b      	beq.n	14b30 <rpmsg_create_ept+0x50>
	for (bit = start;
   14b18:	2400      	movs	r4, #0
	     bit++)
   14b1a:	3401      	adds	r4, #1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   14b1c:	2c80      	cmp	r4, #128	; 0x80
   14b1e:	d054      	beq.n	14bca <rpmsg_create_ept+0xea>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   14b20:	0962      	lsrs	r2, r4, #5
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   14b22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   14b26:	f004 011f 	and.w	r1, r4, #31
   14b2a:	40ca      	lsrs	r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   14b2c:	07d1      	lsls	r1, r2, #31
   14b2e:	d4f4      	bmi.n	14b1a <rpmsg_create_ept+0x3a>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   14b30:	2101      	movs	r1, #1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   14b32:	0960      	lsrs	r0, r4, #5
   14b34:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   14b38:	f504 6780 	add.w	r7, r4, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   14b3c:	f004 041f 	and.w	r4, r4, #31
   14b40:	40a1      	lsls	r1, r4
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   14b42:	430a      	orrs	r2, r1
   14b44:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		 * 1.Trust the author of predefined service
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_register_endpoint(rdev, ept, name, addr, dest, cb, unbind_cb);
   14b48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14b4a:	4652      	mov	r2, sl
   14b4c:	e9cd 9301 	strd	r9, r3, [sp, #4]
   14b50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14b52:	4631      	mov	r1, r6
   14b54:	9300      	str	r3, [sp, #0]
   14b56:	4628      	mov	r0, r5
   14b58:	463b      	mov	r3, r7
   14b5a:	f7ff ffa1 	bl	14aa0 <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   14b5e:	4640      	mov	r0, r8
   14b60:	f000 fd50 	bl	15604 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   14b64:	7834      	ldrb	r4, [r6, #0]
   14b66:	b174      	cbz	r4, 14b86 <rpmsg_create_ept+0xa6>
   14b68:	f895 4090 	ldrb.w	r4, [r5, #144]	; 0x90
   14b6c:	b15c      	cbz	r4, 14b86 <rpmsg_create_ept+0xa6>
   14b6e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   14b70:	3301      	adds	r3, #1
   14b72:	d12e      	bne.n	14bd2 <rpmsg_create_ept+0xf2>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   14b74:	2100      	movs	r1, #0
   14b76:	4630      	mov	r0, r6
   14b78:	f005 fbea 	bl	1a350 <rpmsg_send_ns_message>

	if (status)
   14b7c:	4604      	mov	r4, r0
   14b7e:	b110      	cbz	r0, 14b86 <rpmsg_create_ept+0xa6>
		rpmsg_unregister_endpoint(ept);
   14b80:	4630      	mov	r0, r6
   14b82:	f005 fbbc 	bl	1a2fe <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   14b86:	4620      	mov	r0, r4
   14b88:	b004      	add	sp, #16
   14b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   14b8e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   14b92:	d3d9      	bcc.n	14b48 <rpmsg_create_ept+0x68>
	addr -= RPMSG_RESERVED_ADDRESSES;
   14b94:	f5a7 6380 	sub.w	r3, r7, #1024	; 0x400
	if (addr >= 0 && addr < size)
   14b98:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   14b9a:	f105 0148 	add.w	r1, r5, #72	; 0x48
	if (addr >= 0 && addr < size)
   14b9e:	d80f      	bhi.n	14bc0 <rpmsg_create_ept+0xe0>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   14ba0:	0958      	lsrs	r0, r3, #5
   14ba2:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   14ba6:	f003 031f 	and.w	r3, r3, #31
   14baa:	fa24 f203 	lsr.w	r2, r4, r3
		if (!status) {
   14bae:	07d2      	lsls	r2, r2, #31
   14bb0:	d40b      	bmi.n	14bca <rpmsg_create_ept+0xea>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   14bb2:	2201      	movs	r2, #1
   14bb4:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   14bb8:	4323      	orrs	r3, r4
   14bba:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
   14bbe:	e7c3      	b.n	14b48 <rpmsg_create_ept+0x68>
   14bc0:	4c05      	ldr	r4, [pc, #20]	; (14bd8 <rpmsg_create_ept+0xf8>)
   14bc2:	4640      	mov	r0, r8
   14bc4:	f000 fd1e 	bl	15604 <z_impl_k_sem_give>
}
   14bc8:	e7dd      	b.n	14b86 <rpmsg_create_ept+0xa6>
			status = RPMSG_ERR_ADDR;
   14bca:	4c04      	ldr	r4, [pc, #16]	; (14bdc <rpmsg_create_ept+0xfc>)
   14bcc:	e7f9      	b.n	14bc2 <rpmsg_create_ept+0xe2>
		return RPMSG_ERR_PARAM;
   14bce:	4c02      	ldr	r4, [pc, #8]	; (14bd8 <rpmsg_create_ept+0xf8>)
   14bd0:	e7d9      	b.n	14b86 <rpmsg_create_ept+0xa6>
   14bd2:	2400      	movs	r4, #0
   14bd4:	e7d7      	b.n	14b86 <rpmsg_create_ept+0xa6>
   14bd6:	bf00      	nop
   14bd8:	fffff82d 	.word	0xfffff82d
   14bdc:	fffff829 	.word	0xfffff829

00014be0 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int len, int wait)
{
   14be0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14be4:	b085      	sub	sp, #20
   14be6:	460f      	mov	r7, r1
   14be8:	4690      	mov	r8, r2

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	/* Get the payload buffer. */
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   14bea:	a903      	add	r1, sp, #12
   14bec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
{
   14bee:	4605      	mov	r5, r0
   14bf0:	4699      	mov	r9, r3
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   14bf2:	f005 fdbd 	bl	1a770 <rpmsg_virtio_get_tx_payload_buffer>
	if (!buffer)
   14bf6:	4604      	mov	r4, r0
   14bf8:	b1e0      	cbz	r0, 14c34 <rpmsg_virtio_send_offchannel_raw+0x54>
		return RPMSG_ERR_NO_BUFF;

	/* Copy data to rpmsg buffer. */
	if (len > (int)buff_len)
   14bfa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   14bfc:	9b03      	ldr	r3, [sp, #12]
		len = buff_len;
	io = rvdev->shbuf_io;
   14bfe:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
   14c02:	429e      	cmp	r6, r3
   14c04:	bfa8      	it	ge
   14c06:	461e      	movge	r6, r3
   14c08:	6801      	ldr	r1, [r0, #0]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   14c0a:	f8d0 c008 	ldr.w	ip, [r0, #8]
   14c0e:	1a61      	subs	r1, r4, r1
   14c10:	4633      	mov	r3, r6
   14c12:	464a      	mov	r2, r9
   14c14:	4561      	cmp	r1, ip
   14c16:	bf28      	it	cs
   14c18:	f04f 31ff 	movcs.w	r1, #4294967295
   14c1c:	f005 f94d 	bl	19eba <metal_io_block_write>
				      data, len);
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");

	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
   14c20:	4623      	mov	r3, r4
   14c22:	4642      	mov	r2, r8
   14c24:	4639      	mov	r1, r7
   14c26:	4628      	mov	r0, r5
   14c28:	9600      	str	r6, [sp, #0]
   14c2a:	f005 fd41 	bl	1a6b0 <rpmsg_virtio_send_offchannel_nocopy>
}
   14c2e:	b005      	add	sp, #20
   14c30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return RPMSG_ERR_NO_BUFF;
   14c34:	4800      	ldr	r0, [pc, #0]	; (14c38 <rpmsg_virtio_send_offchannel_raw+0x58>)
   14c36:	e7fa      	b.n	14c2e <rpmsg_virtio_send_offchannel_raw+0x4e>
   14c38:	fffff82e 	.word	0xfffff82e

00014c3c <rpmsg_virtio_get_buffer_size>:

	return RPMSG_SUCCESS;
}

int rpmsg_virtio_get_buffer_size(struct rpmsg_device *rdev)
{
   14c3c:	b538      	push	{r3, r4, r5, lr}
	int size;
	struct rpmsg_virtio_device *rvdev;

	if (!rdev)
   14c3e:	4604      	mov	r4, r0
   14c40:	b1e0      	cbz	r0, 14c7c <rpmsg_virtio_get_buffer_size+0x40>
		return RPMSG_ERR_PARAM;
	metal_mutex_acquire(&rdev->lock);
   14c42:	f100 0558 	add.w	r5, r0, #88	; 0x58
   14c46:	4628      	mov	r0, r5
   14c48:	f005 fc12 	bl	1a470 <__metal_mutex_acquire>
}

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->role;
   14c4c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   14c50:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   14c52:	b953      	cbnz	r3, 14c6a <rpmsg_virtio_get_buffer_size+0x2e>
		length = rvdev->config.h2r_buf_size - sizeof(struct rpmsg_hdr);
   14c54:	f8d4 4094 	ldr.w	r4, [r4, #148]	; 0x94
   14c58:	3c10      	subs	r4, #16
	if (length <= 0) {
   14c5a:	2c00      	cmp	r4, #0
   14c5c:	dc00      	bgt.n	14c60 <rpmsg_virtio_get_buffer_size+0x24>
		length = RPMSG_ERR_NO_BUFF;
   14c5e:	4c08      	ldr	r4, [pc, #32]	; (14c80 <rpmsg_virtio_get_buffer_size+0x44>)
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   14c60:	4628      	mov	r0, r5
   14c62:	f005 fc03 	bl	1a46c <k_sem_give>
	rvdev = (struct rpmsg_virtio_device *)rdev;
	size = _rpmsg_virtio_get_buffer_size(rvdev);
	metal_mutex_release(&rdev->lock);
	return size;
}
   14c66:	4620      	mov	r0, r4
   14c68:	bd38      	pop	{r3, r4, r5, pc}
	if (role == RPMSG_REMOTE) {
   14c6a:	2b01      	cmp	r3, #1
   14c6c:	d1f7      	bne.n	14c5e <rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   14c6e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   14c72:	f005 fb26 	bl	1a2c2 <virtqueue_get_desc_size>
   14c76:	f1a0 0410 	sub.w	r4, r0, #16
   14c7a:	e7ee      	b.n	14c5a <rpmsg_virtio_get_buffer_size+0x1e>
		return RPMSG_ERR_PARAM;
   14c7c:	4c01      	ldr	r4, [pc, #4]	; (14c84 <rpmsg_virtio_get_buffer_size+0x48>)
   14c7e:	e7f2      	b.n	14c66 <rpmsg_virtio_get_buffer_size+0x2a>
   14c80:	fffff82e 	.word	0xfffff82e
   14c84:	fffff82d 	.word	0xfffff82d

00014c88 <rpmsg_init_vdev_with_config>:
				struct virtio_device *vdev,
				rpmsg_ns_bind_cb ns_bind_cb,
				struct metal_io_region *shm_io,
				struct rpmsg_virtio_shm_pool *shpool,
				const struct rpmsg_virtio_config *config)
{
   14c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14c8c:	b08a      	sub	sp, #40	; 0x28
   14c8e:	460d      	mov	r5, r1
   14c90:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	; 0x48
   14c94:	4690      	mov	r8, r2
   14c96:	461e      	mov	r6, r3
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	if (!rvdev || !vdev || !shm_io)
   14c98:	4604      	mov	r4, r0
   14c9a:	b920      	cbnz	r0, 14ca6 <rpmsg_init_vdev_with_config+0x1e>
		return RPMSG_ERR_PARAM;
   14c9c:	4f81      	ldr	r7, [pc, #516]	; (14ea4 <rpmsg_init_vdev_with_config+0x21c>)
	if (role == RPMSG_HOST)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_DEVICE_ONLY*/

	return status;
}
   14c9e:	4638      	mov	r0, r7
   14ca0:	b00a      	add	sp, #40	; 0x28
   14ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!rvdev || !vdev || !shm_io)
   14ca6:	2900      	cmp	r1, #0
   14ca8:	d0f8      	beq.n	14c9c <rpmsg_init_vdev_with_config+0x14>
   14caa:	2b00      	cmp	r3, #0
   14cac:	d0f6      	beq.n	14c9c <rpmsg_init_vdev_with_config+0x14>
	memset(rdev, 0, sizeof(*rdev));
   14cae:	2294      	movs	r2, #148	; 0x94
   14cb0:	2100      	movs	r1, #0
   14cb2:	f003 fa87 	bl	181c4 <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   14cb6:	2201      	movs	r2, #1
   14cb8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   14cbc:	4611      	mov	r1, r2
   14cbe:	f005 ff6b 	bl	1ab98 <z_impl_k_sem_init>
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   14cc2:	4b79      	ldr	r3, [pc, #484]	; (14ea8 <rpmsg_init_vdev_with_config+0x220>)
	rvdev->vdev = vdev;
   14cc4:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
	rdev->ns_bind_cb = ns_bind_cb;
   14cc8:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   14ccc:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   14cce:	67a3      	str	r3, [r4, #120]	; 0x78
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
   14cd0:	4b76      	ldr	r3, [pc, #472]	; (14eac <rpmsg_init_vdev_with_config+0x224>)
   14cd2:	67e3      	str	r3, [r4, #124]	; 0x7c
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
   14cd4:	4b76      	ldr	r3, [pc, #472]	; (14eb0 <rpmsg_init_vdev_with_config+0x228>)
   14cd6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
   14cda:	4b76      	ldr	r3, [pc, #472]	; (14eb4 <rpmsg_init_vdev_with_config+0x22c>)
   14cdc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
   14ce0:	4b75      	ldr	r3, [pc, #468]	; (14eb8 <rpmsg_init_vdev_with_config+0x230>)
   14ce2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	rdev->ops.release_tx_buffer = rpmsg_virtio_release_tx_buffer;
   14ce6:	4b75      	ldr	r3, [pc, #468]	; (14ebc <rpmsg_init_vdev_with_config+0x234>)
   14ce8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
   14cec:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   14cf0:	f8d3 8018 	ldr.w	r8, [r3, #24]
	if (role == RPMSG_HOST) {
   14cf4:	f1b8 0f00 	cmp.w	r8, #0
   14cf8:	d16e      	bne.n	14dd8 <rpmsg_init_vdev_with_config+0x150>
		if (config == NULL) {
   14cfa:	2f00      	cmp	r7, #0
   14cfc:	d0ce      	beq.n	14c9c <rpmsg_init_vdev_with_config+0x14>
		rvdev->config = *config;
   14cfe:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   14d02:	f104 0394 	add.w	r3, r4, #148	; 0x94
   14d06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	vdev->features = rpmsg_virtio_get_features(rvdev);
   14d0a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   14d0e:	6a03      	ldr	r3, [r0, #32]
   14d10:	689b      	ldr	r3, [r3, #8]
   14d12:	4798      	blx	r3
   14d14:	2300      	movs	r3, #0
   14d16:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   14d18:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   14d1c:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   14d1e:	f884 0090 	strb.w	r0, [r4, #144]	; 0x90
	if (role == RPMSG_HOST) {
   14d22:	f1b8 0f00 	cmp.w	r8, #0
   14d26:	d16d      	bne.n	14e04 <rpmsg_init_vdev_with_config+0x17c>
		rvdev->shpool = config->split_shpool ? shpool + 1 : shpool;
   14d28:	7a3b      	ldrb	r3, [r7, #8]
   14d2a:	2b00      	cmp	r3, #0
   14d2c:	d068      	beq.n	14e00 <rpmsg_init_vdev_with_config+0x178>
   14d2e:	f109 030c 	add.w	r3, r9, #12
   14d32:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		if (!shpool)
   14d36:	f1b9 0f00 	cmp.w	r9, #0
   14d3a:	d0af      	beq.n	14c9c <rpmsg_init_vdev_with_config+0x14>
		if (!shpool->size || !rvdev->shpool->size)
   14d3c:	f8d9 2008 	ldr.w	r2, [r9, #8]
   14d40:	2a00      	cmp	r2, #0
   14d42:	f000 80ad 	beq.w	14ea0 <rpmsg_init_vdev_with_config+0x218>
   14d46:	689b      	ldr	r3, [r3, #8]
   14d48:	2b00      	cmp	r3, #0
   14d4a:	f000 80a9 	beq.w	14ea0 <rpmsg_init_vdev_with_config+0x218>
		vq_names[0] = "rx_vq";
   14d4e:	4b5c      	ldr	r3, [pc, #368]	; (14ec0 <rpmsg_init_vdev_with_config+0x238>)
   14d50:	9304      	str	r3, [sp, #16]
		vq_names[1] = "tx_vq";
   14d52:	4b5c      	ldr	r3, [pc, #368]	; (14ec4 <rpmsg_init_vdev_with_config+0x23c>)
   14d54:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_rx_callback;
   14d56:	4b5c      	ldr	r3, [pc, #368]	; (14ec8 <rpmsg_init_vdev_with_config+0x240>)
   14d58:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_tx_callback;
   14d5a:	4b5c      	ldr	r3, [pc, #368]	; (14ecc <rpmsg_init_vdev_with_config+0x244>)
   14d5c:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   14d5e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   14d60:	681b      	ldr	r3, [r3, #0]
   14d62:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[1].vq;
   14d66:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   14d68:	699b      	ldr	r3, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   14d6a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	metal_list_init(&rvdev->reclaimer);
   14d6e:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
	list->next = list;
   14d72:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   14d76:	ab06      	add	r3, sp, #24
	rvdev->shbuf_io = shm_io;
   14d78:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
   14d7c:	9300      	str	r3, [sp, #0]
   14d7e:	2202      	movs	r2, #2
   14d80:	2100      	movs	r1, #0
   14d82:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   14d86:	ab04      	add	r3, sp, #16
   14d88:	f7ff fdd6 	bl	14938 <virtio_create_virtqueues>
	if (status != RPMSG_SUCCESS)
   14d8c:	4607      	mov	r7, r0
   14d8e:	2800      	cmp	r0, #0
   14d90:	d185      	bne.n	14c9e <rpmsg_init_vdev_with_config+0x16>
	virtqueue_disable_cb(rvdev->svq);
   14d92:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   14d96:	f005 fa2f 	bl	1a1f8 <virtqueue_disable_cb>
		vq = vdev->vrings_info[i].vq;
   14d9a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   14d9c:	681b      	ldr	r3, [r3, #0]
		vq->shm_io = shm_io;
   14d9e:	629e      	str	r6, [r3, #40]	; 0x28
		vq = vdev->vrings_info[i].vq;
   14da0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   14da2:	699b      	ldr	r3, [r3, #24]
		vq->shm_io = shm_io;
   14da4:	629e      	str	r6, [r3, #40]	; 0x28
	if (role == RPMSG_HOST) {
   14da6:	f1b8 0f00 	cmp.w	r8, #0
   14daa:	d161      	bne.n	14e70 <rpmsg_init_vdev_with_config+0x1e8>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   14dac:	46c2      	mov	sl, r8
		vqbuf.len = rvdev->config.r2h_buf_size;
   14dae:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   14db2:	9309      	str	r3, [sp, #36]	; 0x24
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   14db4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   14db8:	895b      	ldrh	r3, [r3, #10]
   14dba:	4553      	cmp	r3, sl
   14dbc:	d834      	bhi.n	14e28 <rpmsg_init_vdev_with_config+0x1a0>
	if (rdev->support_ns) {
   14dbe:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   14dc2:	e9c4 4400 	strd	r4, r4, [r4]
   14dc6:	2b00      	cmp	r3, #0
   14dc8:	d159      	bne.n	14e7e <rpmsg_init_vdev_with_config+0x1f6>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   14dca:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   14dce:	2104      	movs	r1, #4
   14dd0:	6a03      	ldr	r3, [r0, #32]
   14dd2:	685b      	ldr	r3, [r3, #4]
   14dd4:	4798      	blx	r3
}
   14dd6:	e762      	b.n	14c9e <rpmsg_init_vdev_with_config+0x16>
	if (role == RPMSG_REMOTE) {
   14dd8:	f1b8 0f01 	cmp.w	r8, #1
   14ddc:	d195      	bne.n	14d0a <rpmsg_init_vdev_with_config+0x82>
		status = rpmsg_virtio_get_status(rvdev);
   14dde:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	return rvdev->vdev->func->get_status(rvdev->vdev);
   14de2:	6a03      	ldr	r3, [r0, #32]
   14de4:	681b      	ldr	r3, [r3, #0]
   14de6:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   14de8:	0642      	lsls	r2, r0, #25
   14dea:	d506      	bpl.n	14dfa <rpmsg_init_vdev_with_config+0x172>
			rpmsg_virtio_set_status(rvdev, 0);
   14dec:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   14df0:	2100      	movs	r1, #0
   14df2:	6a03      	ldr	r3, [r0, #32]
   14df4:	685b      	ldr	r3, [r3, #4]
   14df6:	4798      	blx	r3
}
   14df8:	e7f1      	b.n	14dde <rpmsg_init_vdev_with_config+0x156>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   14dfa:	0743      	lsls	r3, r0, #29
   14dfc:	d5ef      	bpl.n	14dde <rpmsg_init_vdev_with_config+0x156>
   14dfe:	e784      	b.n	14d0a <rpmsg_init_vdev_with_config+0x82>
   14e00:	464b      	mov	r3, r9
   14e02:	e796      	b.n	14d32 <rpmsg_init_vdev_with_config+0xaa>
	if (role == RPMSG_REMOTE) {
   14e04:	f1b8 0f01 	cmp.w	r8, #1
   14e08:	d1b1      	bne.n	14d6e <rpmsg_init_vdev_with_config+0xe6>
		vq_names[0] = "tx_vq";
   14e0a:	4b2e      	ldr	r3, [pc, #184]	; (14ec4 <rpmsg_init_vdev_with_config+0x23c>)
   14e0c:	9304      	str	r3, [sp, #16]
		vq_names[1] = "rx_vq";
   14e0e:	4b2c      	ldr	r3, [pc, #176]	; (14ec0 <rpmsg_init_vdev_with_config+0x238>)
   14e10:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_tx_callback;
   14e12:	4b2e      	ldr	r3, [pc, #184]	; (14ecc <rpmsg_init_vdev_with_config+0x244>)
   14e14:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_rx_callback;
   14e16:	4b2c      	ldr	r3, [pc, #176]	; (14ec8 <rpmsg_init_vdev_with_config+0x240>)
   14e18:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   14e1a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   14e1c:	699b      	ldr	r3, [r3, #24]
   14e1e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[0].vq;
   14e22:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   14e24:	681b      	ldr	r3, [r3, #0]
   14e26:	e7a0      	b.n	14d6a <rpmsg_init_vdev_with_config+0xe2>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   14e28:	4648      	mov	r0, r9
   14e2a:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   14e2e:	f005 fc90 	bl	1a752 <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   14e32:	4605      	mov	r5, r0
   14e34:	b1c8      	cbz	r0, 14e6a <rpmsg_init_vdev_with_config+0x1e2>
   14e36:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   14e38:	9008      	str	r0, [sp, #32]
   14e3a:	1a41      	subs	r1, r0, r1

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   14e3c:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   14e3e:	2200      	movs	r2, #0
   14e40:	4281      	cmp	r1, r0
   14e42:	bf28      	it	cs
   14e44:	f04f 31ff 	movcs.w	r1, #4294967295
   14e48:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   14e4c:	4630      	mov	r0, r6
   14e4e:	f005 f86e 	bl	19f2e <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   14e52:	9500      	str	r5, [sp, #0]
   14e54:	2301      	movs	r3, #1
   14e56:	2200      	movs	r2, #0
   14e58:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   14e5c:	a908      	add	r1, sp, #32
   14e5e:	f005 f90c 	bl	1a07a <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   14e62:	b918      	cbnz	r0, 14e6c <rpmsg_init_vdev_with_config+0x1e4>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   14e64:	f10a 0a01 	add.w	sl, sl, #1
   14e68:	e7a4      	b.n	14db4 <rpmsg_init_vdev_with_config+0x12c>
				return RPMSG_ERR_NO_BUFF;
   14e6a:	4819      	ldr	r0, [pc, #100]	; (14ed0 <rpmsg_init_vdev_with_config+0x248>)
   14e6c:	4607      	mov	r7, r0
   14e6e:	e716      	b.n	14c9e <rpmsg_init_vdev_with_config+0x16>
	if (rdev->support_ns) {
   14e70:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   14e74:	e9c4 4400 	strd	r4, r4, [r4]
   14e78:	2b00      	cmp	r3, #0
   14e7a:	f43f af10 	beq.w	14c9e <rpmsg_init_vdev_with_config+0x16>
		rpmsg_register_endpoint(rdev, &rdev->ns_ept, "NS",
   14e7e:	2300      	movs	r3, #0
   14e80:	9302      	str	r3, [sp, #8]
   14e82:	4b14      	ldr	r3, [pc, #80]	; (14ed4 <rpmsg_init_vdev_with_config+0x24c>)
   14e84:	4620      	mov	r0, r4
   14e86:	9301      	str	r3, [sp, #4]
   14e88:	2335      	movs	r3, #53	; 0x35
   14e8a:	4a13      	ldr	r2, [pc, #76]	; (14ed8 <rpmsg_init_vdev_with_config+0x250>)
   14e8c:	9300      	str	r3, [sp, #0]
   14e8e:	f104 0108 	add.w	r1, r4, #8
   14e92:	f7ff fe05 	bl	14aa0 <rpmsg_register_endpoint>
	if (role == RPMSG_HOST)
   14e96:	f1b8 0f00 	cmp.w	r8, #0
   14e9a:	f47f af00 	bne.w	14c9e <rpmsg_init_vdev_with_config+0x16>
   14e9e:	e794      	b.n	14dca <rpmsg_init_vdev_with_config+0x142>
			return RPMSG_ERR_NO_BUFF;
   14ea0:	4f0b      	ldr	r7, [pc, #44]	; (14ed0 <rpmsg_init_vdev_with_config+0x248>)
   14ea2:	e6fc      	b.n	14c9e <rpmsg_init_vdev_with_config+0x16>
   14ea4:	fffff82d 	.word	0xfffff82d
   14ea8:	00014be1 	.word	0x00014be1
   14eac:	0001a45d 	.word	0x0001a45d
   14eb0:	0001a671 	.word	0x0001a671
   14eb4:	0001a771 	.word	0x0001a771
   14eb8:	0001a6b1 	.word	0x0001a6b1
   14ebc:	0001a47d 	.word	0x0001a47d
   14ec0:	0001e615 	.word	0x0001e615
   14ec4:	0001e61b 	.word	0x0001e61b
   14ec8:	0001a5bd 	.word	0x0001a5bd
   14ecc:	0001a46b 	.word	0x0001a46b
   14ed0:	fffff82e 	.word	0xfffff82e
   14ed4:	0001a4bf 	.word	0x0001a4bf
   14ed8:	0001e621 	.word	0x0001e621

00014edc <rpmsg_init_vdev>:
{
   14edc:	b5f0      	push	{r4, r5, r6, r7, lr}
   14ede:	4605      	mov	r5, r0
   14ee0:	460e      	mov	r6, r1
   14ee2:	4617      	mov	r7, r2
   14ee4:	b087      	sub	sp, #28
			   shpool, RPMSG_VIRTIO_DEFAULT_CONFIG);
   14ee6:	4a07      	ldr	r2, [pc, #28]	; (14f04 <rpmsg_init_vdev+0x28>)
   14ee8:	ac03      	add	r4, sp, #12
   14eea:	ca07      	ldmia	r2, {r0, r1, r2}
   14eec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return rpmsg_init_vdev_with_config(rvdev, vdev, ns_bind_cb, shm_io,
   14ef0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14ef2:	4631      	mov	r1, r6
   14ef4:	9200      	str	r2, [sp, #0]
   14ef6:	4628      	mov	r0, r5
   14ef8:	463a      	mov	r2, r7
   14efa:	9401      	str	r4, [sp, #4]
   14efc:	f7ff fec4 	bl	14c88 <rpmsg_init_vdev_with_config>
}
   14f00:	b007      	add	sp, #28
   14f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14f04:	0001b9dc 	.word	0x0001b9dc

00014f08 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   14f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14f0c:	b086      	sub	sp, #24
   14f0e:	4605      	mov	r5, r0
   14f10:	460e      	mov	r6, r1
   14f12:	af00      	add	r7, sp, #0
	__asm__ volatile(
   14f14:	f04f 0320 	mov.w	r3, #32
   14f18:	f3ef 8811 	mrs	r8, BASEPRI
   14f1c:	f383 8812 	msr	BASEPRI_MAX, r3
   14f20:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   14f24:	f001 f8a6 	bl	16074 <z_impl_z_current_get>
   14f28:	2d04      	cmp	r5, #4
   14f2a:	bf98      	it	ls
   14f2c:	4b2c      	ldrls	r3, [pc, #176]	; (14fe0 <z_fatal_error+0xd8>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   14f2e:	46e9      	mov	r9, sp
   14f30:	b08a      	sub	sp, #40	; 0x28
   14f32:	4604      	mov	r4, r0
   14f34:	466a      	mov	r2, sp
   14f36:	bf94      	ite	ls
   14f38:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
   14f3c:	4b29      	ldrhi	r3, [pc, #164]	; (14fe4 <z_fatal_error+0xdc>)
   14f3e:	61d3      	str	r3, [r2, #28]
   14f40:	f240 3301 	movw	r3, #769	; 0x301
   14f44:	f04f 0a00 	mov.w	sl, #0
   14f48:	8493      	strh	r3, [r2, #36]	; 0x24
   14f4a:	4927      	ldr	r1, [pc, #156]	; (14fe8 <z_fatal_error+0xe0>)
   14f4c:	4b27      	ldr	r3, [pc, #156]	; (14fec <z_fatal_error+0xe4>)
   14f4e:	e9c2 1505 	strd	r1, r5, [r2, #20]
   14f52:	f8c2 a020 	str.w	sl, [r2, #32]
   14f56:	f842 3f10 	str.w	r3, [r2, #16]!
   14f5a:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   14f5e:	4653      	mov	r3, sl
   14f60:	4823      	ldr	r0, [pc, #140]	; (14ff0 <z_fatal_error+0xe8>)
   14f62:	f7f5 fccb 	bl	a8fc <z_impl_z_log_msg_static_create>
   14f66:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   14f68:	b17e      	cbz	r6, 14f8a <z_fatal_error+0x82>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   14f6a:	69f3      	ldr	r3, [r6, #28]
   14f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   14f70:	b15b      	cbz	r3, 14f8a <z_fatal_error+0x82>
		LOG_ERR("Fault during interrupt handling\n");
   14f72:	4b20      	ldr	r3, [pc, #128]	; (14ff4 <z_fatal_error+0xec>)
   14f74:	617b      	str	r3, [r7, #20]
   14f76:	2302      	movs	r3, #2
   14f78:	613b      	str	r3, [r7, #16]
   14f7a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14f7e:	4653      	mov	r3, sl
   14f80:	481b      	ldr	r0, [pc, #108]	; (14ff0 <z_fatal_error+0xe8>)
   14f82:	f107 0210 	add.w	r2, r7, #16
   14f86:	f7f5 fcb9 	bl	a8fc <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   14f8a:	b12c      	cbz	r4, 14f98 <z_fatal_error+0x90>
   14f8c:	4620      	mov	r0, r4
   14f8e:	f005 fd52 	bl	1aa36 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   14f92:	b108      	cbz	r0, 14f98 <z_fatal_error+0x90>
   14f94:	7803      	ldrb	r3, [r0, #0]
   14f96:	b903      	cbnz	r3, 14f9a <z_fatal_error+0x92>
		thread_name = "unknown";
   14f98:	4817      	ldr	r0, [pc, #92]	; (14ff8 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   14f9a:	46e9      	mov	r9, sp
   14f9c:	b08a      	sub	sp, #40	; 0x28
   14f9e:	466a      	mov	r2, sp
   14fa0:	4b16      	ldr	r3, [pc, #88]	; (14ffc <z_fatal_error+0xf4>)
   14fa2:	61d0      	str	r0, [r2, #28]
   14fa4:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14fa8:	f240 3301 	movw	r3, #769	; 0x301
   14fac:	8413      	strh	r3, [r2, #32]
   14fae:	4b14      	ldr	r3, [pc, #80]	; (15000 <z_fatal_error+0xf8>)
   14fb0:	f842 3f10 	str.w	r3, [r2, #16]!
   14fb4:	2300      	movs	r3, #0
   14fb6:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   14fba:	480d      	ldr	r0, [pc, #52]	; (14ff0 <z_fatal_error+0xe8>)
   14fbc:	f7f5 fc9e 	bl	a8fc <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   14fc0:	4631      	mov	r1, r6
   14fc2:	46cd      	mov	sp, r9
   14fc4:	4628      	mov	r0, r5
   14fc6:	f7fe fd53 	bl	13a70 <k_sys_fatal_error_handler>
	__asm__ volatile(
   14fca:	f388 8811 	msr	BASEPRI, r8
   14fce:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   14fd2:	4620      	mov	r0, r4
   14fd4:	f7f6 ff66 	bl	bea4 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   14fd8:	3718      	adds	r7, #24
   14fda:	46bd      	mov	sp, r7
   14fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14fe0:	0001c1e0 	.word	0x0001c1e0
   14fe4:	0001e624 	.word	0x0001e624
   14fe8:	0001e632 	.word	0x0001e632
   14fec:	01000005 	.word	0x01000005
   14ff0:	0001b930 	.word	0x0001b930
   14ff4:	0001e65a 	.word	0x0001e65a
   14ff8:	0001cd06 	.word	0x0001cd06
   14ffc:	0001e67b 	.word	0x0001e67b
   15000:	01000004 	.word	0x01000004

00015004 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   15004:	4b10      	ldr	r3, [pc, #64]	; (15048 <z_sys_init_run_level+0x44>)
{
   15006:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   15008:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1500c:	3001      	adds	r0, #1
   1500e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   15012:	42a6      	cmp	r6, r4
   15014:	d800      	bhi.n	15018 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
   15016:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
   15018:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
   1501c:	b18d      	cbz	r5, 15042 <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
   1501e:	4628      	mov	r0, r5
   15020:	4798      	blx	r3
			if (rc != 0) {
   15022:	b138      	cbz	r0, 15034 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   15024:	2800      	cmp	r0, #0
   15026:	bfb8      	it	lt
   15028:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   1502a:	28ff      	cmp	r0, #255	; 0xff
   1502c:	bfa8      	it	ge
   1502e:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   15030:	68eb      	ldr	r3, [r5, #12]
   15032:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   15034:	68ea      	ldr	r2, [r5, #12]
   15036:	7853      	ldrb	r3, [r2, #1]
   15038:	f043 0301 	orr.w	r3, r3, #1
   1503c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1503e:	3408      	adds	r4, #8
   15040:	e7e7      	b.n	15012 <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
   15042:	4798      	blx	r3
   15044:	e7fb      	b.n	1503e <z_sys_init_run_level+0x3a>
   15046:	bf00      	nop
   15048:	0001c1f4 	.word	0x0001c1f4

0001504c <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1504c:	2201      	movs	r2, #1
{
   1504e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   15050:	4b09      	ldr	r3, [pc, #36]	; (15078 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   15052:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   15054:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   15056:	f7ff ffd5 	bl	15004 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1505a:	f001 fb29 	bl	166b0 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   1505e:	2004      	movs	r0, #4
   15060:	f7ff ffd0 	bl	15004 <z_sys_init_run_level>

	z_init_static_threads();
   15064:	f000 f96c 	bl	15340 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
   15068:	f7f3 fa50 	bl	850c <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1506c:	4a03      	ldr	r2, [pc, #12]	; (1507c <bg_thread_main+0x30>)
   1506e:	7b13      	ldrb	r3, [r2, #12]
   15070:	f023 0301 	bic.w	r3, r3, #1
   15074:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   15076:	bd08      	pop	{r3, pc}
   15078:	20009c8c 	.word	0x20009c8c
   1507c:	20009630 	.word	0x20009630

00015080 <z_bss_zero>:
{
   15080:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   15082:	4803      	ldr	r0, [pc, #12]	; (15090 <z_bss_zero+0x10>)
   15084:	4a03      	ldr	r2, [pc, #12]	; (15094 <z_bss_zero+0x14>)
   15086:	2100      	movs	r1, #0
   15088:	1a12      	subs	r2, r2, r0
   1508a:	f005 fc16 	bl	1a8ba <z_early_memset>
}
   1508e:	bd08      	pop	{r3, pc}
   15090:	200087f0 	.word	0x200087f0
   15094:	20009c90 	.word	0x20009c90

00015098 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   15098:	2388      	movs	r3, #136	; 0x88
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   1509a:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   1509c:	4e13      	ldr	r6, [pc, #76]	; (150ec <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   1509e:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   150a0:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   150a4:	2300      	movs	r3, #0
{
   150a6:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   150a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
   150ac:	220f      	movs	r2, #15
   150ae:	9301      	str	r3, [sp, #4]
   150b0:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   150b4:	2314      	movs	r3, #20
	z_setup_new_thread(thread, stack,
   150b6:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   150ba:	4d0d      	ldr	r5, [pc, #52]	; (150f0 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   150bc:	490d      	ldr	r1, [pc, #52]	; (150f4 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   150be:	fb03 5500 	mla	r5, r3, r0, r5
{
   150c2:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   150c4:	fb02 1100 	mla	r1, r2, r0, r1
   150c8:	4b0b      	ldr	r3, [pc, #44]	; (150f8 <z_init_cpu+0x60>)
   150ca:	4630      	mov	r0, r6
   150cc:	9500      	str	r5, [sp, #0]
   150ce:	f000 f8db 	bl	15288 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   150d2:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   150d4:	742c      	strb	r4, [r5, #16]
   150d6:	f023 0304 	bic.w	r3, r3, #4
   150da:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   150dc:	4b07      	ldr	r3, [pc, #28]	; (150fc <z_init_cpu+0x64>)
   150de:	3401      	adds	r4, #1
   150e0:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   150e4:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   150e6:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   150e8:	b006      	add	sp, #24
   150ea:	bd70      	pop	{r4, r5, r6, pc}
   150ec:	200095a8 	.word	0x200095a8
   150f0:	20009b90 	.word	0x20009b90
   150f4:	2000bde8 	.word	0x2000bde8
   150f8:	000153f9 	.word	0x000153f9
   150fc:	2000b5e8 	.word	0x2000b5e8

00015100 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   15100:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   15102:	2000      	movs	r0, #0
{
   15104:	b0a8      	sub	sp, #160	; 0xa0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   15106:	f7ff ff7d 	bl	15004 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   1510a:	4b2f      	ldr	r3, [pc, #188]	; (151c8 <z_cstart+0xc8>)
	uint32_t msp =
   1510c:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   15110:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   15114:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15118:	2400      	movs	r4, #0
   1511a:	23e0      	movs	r3, #224	; 0xe0
   1511c:	4d2b      	ldr	r5, [pc, #172]	; (151cc <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   1511e:	4e2c      	ldr	r6, [pc, #176]	; (151d0 <z_cstart+0xd0>)
   15120:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   15124:	77ec      	strb	r4, [r5, #31]
   15126:	762c      	strb	r4, [r5, #24]
   15128:	766c      	strb	r4, [r5, #25]
   1512a:	76ac      	strb	r4, [r5, #26]
   1512c:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   15130:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   15132:	4f28      	ldr	r7, [pc, #160]	; (151d4 <z_cstart+0xd4>)
   15134:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   15138:	626b      	str	r3, [r5, #36]	; 0x24
   1513a:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1513e:	f7f6 fe15 	bl	bd6c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   15142:	f7f6 f96d 	bl	b420 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   15146:	f04f 33ff 	mov.w	r3, #4294967295
   1514a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1514c:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1514e:	f7f7 f857 	bl	c200 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   15152:	f7f6 febd 	bl	bed0 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   15156:	f7f5 fa61 	bl	a61c <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1515a:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   1515e:	ad06      	add	r5, sp, #24
   15160:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   15162:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   15166:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   1516a:	f001 fa83 	bl	16674 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   1516e:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   15170:	f005 fb97 	bl	1a8a2 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   15174:	2001      	movs	r0, #1
   15176:	f7ff ff45 	bl	15004 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1517a:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   1517c:	4d16      	ldr	r5, [pc, #88]	; (151d8 <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1517e:	f7ff ff41 	bl	15004 <z_sys_init_run_level>
	z_sched_init();
   15182:	f000 fed3 	bl	15f2c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   15186:	4b15      	ldr	r3, [pc, #84]	; (151dc <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   15188:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1518a:	9305      	str	r3, [sp, #20]
   1518c:	2301      	movs	r3, #1
   1518e:	4914      	ldr	r1, [pc, #80]	; (151e0 <z_cstart+0xe0>)
   15190:	f44f 6200 	mov.w	r2, #2048	; 0x800
   15194:	e9cd 4303 	strd	r4, r3, [sp, #12]
   15198:	4628      	mov	r0, r5
   1519a:	463b      	mov	r3, r7
   1519c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   151a0:	9400      	str	r4, [sp, #0]
   151a2:	f000 f871 	bl	15288 <z_setup_new_thread>
   151a6:	4606      	mov	r6, r0
   151a8:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   151aa:	4628      	mov	r0, r5
   151ac:	f022 0204 	bic.w	r2, r2, #4
   151b0:	736a      	strb	r2, [r5, #13]
   151b2:	f005 fe4e 	bl	1ae52 <z_ready_thread>
	z_init_cpu(0);
   151b6:	4620      	mov	r0, r4
   151b8:	f7ff ff6e 	bl	15098 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   151bc:	463a      	mov	r2, r7
   151be:	4631      	mov	r1, r6
   151c0:	4628      	mov	r0, r5
   151c2:	f7f6 fa9f 	bl	b704 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   151c6:	bf00      	nop
   151c8:	2000b5e8 	.word	0x2000b5e8
   151cc:	e000ed00 	.word	0xe000ed00
   151d0:	20009b90 	.word	0x20009b90
   151d4:	0001504d 	.word	0x0001504d
   151d8:	20009630 	.word	0x20009630
   151dc:	0001e6dd 	.word	0x0001e6dd
   151e0:	2000bf28 	.word	0x2000bf28

000151e4 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
   151e4:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   151e6:	4c06      	ldr	r4, [pc, #24]	; (15200 <statics_init+0x1c>)
   151e8:	4d06      	ldr	r5, [pc, #24]	; (15204 <statics_init+0x20>)
   151ea:	42ac      	cmp	r4, r5
   151ec:	d301      	bcc.n	151f2 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   151ee:	2000      	movs	r0, #0
   151f0:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   151f2:	4620      	mov	r0, r4
   151f4:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   151f8:	f005 fb63 	bl	1a8c2 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   151fc:	3414      	adds	r4, #20
   151fe:	e7f4      	b.n	151ea <statics_init+0x6>
   15200:	20008630 	.word	0x20008630
   15204:	20008644 	.word	0x20008644

00015208 <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
	int rc = 0;
   15208:	2000      	movs	r0, #0
{
   1520a:	b538      	push	{r3, r4, r5, lr}

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1520c:	4c05      	ldr	r4, [pc, #20]	; (15224 <init_mem_slab_module+0x1c>)
   1520e:	4d06      	ldr	r5, [pc, #24]	; (15228 <init_mem_slab_module+0x20>)
   15210:	42ac      	cmp	r4, r5
   15212:	d300      	bcc.n	15216 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   15214:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   15216:	4620      	mov	r0, r4
   15218:	f005 fbc5 	bl	1a9a6 <create_free_list>
		if (rc < 0) {
   1521c:	2800      	cmp	r0, #0
   1521e:	dbf9      	blt.n	15214 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   15220:	341c      	adds	r4, #28
   15222:	e7f5      	b.n	15210 <init_mem_slab_module+0x8>
   15224:	200085dc 	.word	0x200085dc
   15228:	20008630 	.word	0x20008630

0001522c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1522c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1522e:	460c      	mov	r4, r1
	__asm__ volatile(
   15230:	f04f 0520 	mov.w	r5, #32
   15234:	f3ef 8111 	mrs	r1, BASEPRI
   15238:	f385 8812 	msr	BASEPRI_MAX, r5
   1523c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   15240:	6945      	ldr	r5, [r0, #20]
   15242:	b15d      	cbz	r5, 1525c <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   15244:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   15246:	682b      	ldr	r3, [r5, #0]
   15248:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1524a:	6983      	ldr	r3, [r0, #24]
   1524c:	3301      	adds	r3, #1
   1524e:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   15250:	2000      	movs	r0, #0
	__asm__ volatile(
   15252:	f381 8811 	msr	BASEPRI, r1
   15256:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   1525a:	e011      	b.n	15280 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1525c:	ea52 0603 	orrs.w	r6, r2, r3
   15260:	d103      	bne.n	1526a <k_mem_slab_alloc+0x3e>
		result = -ENOMEM;
   15262:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   15266:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   15268:	e7f3      	b.n	15252 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1526a:	e9cd 2300 	strd	r2, r3, [sp]
   1526e:	4602      	mov	r2, r0
   15270:	3008      	adds	r0, #8
   15272:	f000 fd65 	bl	15d40 <z_pend_curr>
		if (result == 0) {
   15276:	b918      	cbnz	r0, 15280 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   15278:	4b02      	ldr	r3, [pc, #8]	; (15284 <k_mem_slab_alloc+0x58>)
   1527a:	689b      	ldr	r3, [r3, #8]
   1527c:	695b      	ldr	r3, [r3, #20]
   1527e:	6023      	str	r3, [r4, #0]
}
   15280:	b002      	add	sp, #8
   15282:	bd70      	pop	{r4, r5, r6, pc}
   15284:	20009b90 	.word	0x20009b90

00015288 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   15288:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1528c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1528e:	f100 0558 	add.w	r5, r0, #88	; 0x58
   15292:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   15294:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   15296:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
   1529a:	2500      	movs	r5, #0
{
   1529c:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
   1529e:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   152a0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   152a2:	e9c0 5506 	strd	r5, r5, [r0, #24]
   152a6:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   152a8:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   152aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   152ac:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
   152b0:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   152b4:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   152b6:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   152b8:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   152ba:	9202      	str	r2, [sp, #8]
   152bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
   152be:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   152c2:	9201      	str	r2, [sp, #4]
   152c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   152c6:	9200      	str	r2, [sp, #0]
   152c8:	4642      	mov	r2, r8
   152ca:	f7f6 f9fb 	bl	b6c4 <arch_new_thread>
	if (!_current) {
   152ce:	4b05      	ldr	r3, [pc, #20]	; (152e4 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   152d0:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   152d2:	689b      	ldr	r3, [r3, #8]
   152d4:	b103      	cbz	r3, 152d8 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   152d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   152d8:	4640      	mov	r0, r8
   152da:	6763      	str	r3, [r4, #116]	; 0x74
   152dc:	b004      	add	sp, #16
   152de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   152e2:	bf00      	nop
   152e4:	20009b90 	.word	0x20009b90

000152e8 <z_impl_k_thread_create>:
{
   152e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   152ea:	2500      	movs	r5, #0
{
   152ec:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   152ee:	9505      	str	r5, [sp, #20]
   152f0:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   152f2:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   152f6:	9504      	str	r5, [sp, #16]
   152f8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   152fa:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   152fc:	9503      	str	r5, [sp, #12]
   152fe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   15300:	9502      	str	r5, [sp, #8]
   15302:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   15304:	9501      	str	r5, [sp, #4]
   15306:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   15308:	9500      	str	r5, [sp, #0]
   1530a:	f7ff ffbd 	bl	15288 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1530e:	f1b6 3fff 	cmp.w	r6, #4294967295
   15312:	bf08      	it	eq
   15314:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   15318:	d005      	beq.n	15326 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1531a:	ea56 0307 	orrs.w	r3, r6, r7
   1531e:	d105      	bne.n	1532c <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   15320:	4620      	mov	r0, r4
   15322:	f000 fd83 	bl	15e2c <z_sched_start>
}
   15326:	4620      	mov	r0, r4
   15328:	b007      	add	sp, #28
   1532a:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1532c:	463a      	mov	r2, r7
   1532e:	4633      	mov	r3, r6
   15330:	4902      	ldr	r1, [pc, #8]	; (1533c <z_impl_k_thread_create+0x54>)
   15332:	f104 0018 	add.w	r0, r4, #24
   15336:	f000 ff75 	bl	16224 <z_add_timeout>
   1533a:	e7f4      	b.n	15326 <z_impl_k_thread_create+0x3e>
   1533c:	0001aedb 	.word	0x0001aedb

00015340 <z_init_static_threads>:
{
   15340:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15344:	4c29      	ldr	r4, [pc, #164]	; (153ec <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   15346:	4d2a      	ldr	r5, [pc, #168]	; (153f0 <z_init_static_threads+0xb0>)
{
   15348:	b087      	sub	sp, #28
   1534a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   1534c:	42ae      	cmp	r6, r5
   1534e:	f104 042c 	add.w	r4, r4, #44	; 0x2c
   15352:	d30f      	bcc.n	15374 <z_init_static_threads+0x34>
	k_sched_lock();
   15354:	f000 fdba 	bl	15ecc <k_sched_lock>
   15358:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1535c:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   15360:	4c22      	ldr	r4, [pc, #136]	; (153ec <z_init_static_threads+0xac>)
   15362:	f8df 9090 	ldr.w	r9, [pc, #144]	; 153f4 <z_init_static_threads+0xb4>
   15366:	42ac      	cmp	r4, r5
   15368:	d320      	bcc.n	153ac <z_init_static_threads+0x6c>
}
   1536a:	b007      	add	sp, #28
   1536c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   15370:	f000 bdc0 	b.w	15ef4 <k_sched_unlock>
		z_setup_new_thread(
   15374:	f854 3c04 	ldr.w	r3, [r4, #-4]
   15378:	9305      	str	r3, [sp, #20]
   1537a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   1537e:	9304      	str	r3, [sp, #16]
   15380:	f854 3c10 	ldr.w	r3, [r4, #-16]
   15384:	9303      	str	r3, [sp, #12]
   15386:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1538a:	9302      	str	r3, [sp, #8]
   1538c:	f854 3c18 	ldr.w	r3, [r4, #-24]
   15390:	9301      	str	r3, [sp, #4]
   15392:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   15396:	9300      	str	r3, [sp, #0]
   15398:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
   1539c:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
   153a0:	f7ff ff72 	bl	15288 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   153a4:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   153a8:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   153aa:	e7ce      	b.n	1534a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   153ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
   153ae:	1c5a      	adds	r2, r3, #1
   153b0:	d00d      	beq.n	153ce <z_init_static_threads+0x8e>
   153b2:	2100      	movs	r1, #0
   153b4:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   153b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   153ba:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   153be:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   153c2:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   153c6:	d104      	bne.n	153d2 <z_init_static_threads+0x92>
	z_sched_start(thread);
   153c8:	4640      	mov	r0, r8
   153ca:	f000 fd2f 	bl	15e2c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   153ce:	342c      	adds	r4, #44	; 0x2c
   153d0:	e7c9      	b.n	15366 <z_init_static_threads+0x26>
   153d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   153d6:	2300      	movs	r3, #0
   153d8:	f7f2 febc 	bl	8154 <__aeabi_uldivmod>
   153dc:	4602      	mov	r2, r0
   153de:	460b      	mov	r3, r1
   153e0:	f108 0018 	add.w	r0, r8, #24
   153e4:	4649      	mov	r1, r9
   153e6:	f000 ff1d 	bl	16224 <z_add_timeout>
   153ea:	e7f0      	b.n	153ce <z_init_static_threads+0x8e>
   153ec:	0001b7a4 	.word	0x0001b7a4
   153f0:	0001b7d0 	.word	0x0001b7d0
   153f4:	0001aedb 	.word	0x0001aedb

000153f8 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   153f8:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   153fa:	4c0b      	ldr	r4, [pc, #44]	; (15428 <idle+0x30>)
   153fc:	4d0b      	ldr	r5, [pc, #44]	; (1542c <idle+0x34>)
	__asm__ volatile(
   153fe:	f04f 0220 	mov.w	r2, #32
   15402:	f3ef 8311 	mrs	r3, BASEPRI
   15406:	f382 8812 	msr	BASEPRI_MAX, r2
   1540a:	f3bf 8f6f 	isb	sy
   1540e:	f005 fe12 	bl	1b036 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   15412:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   15414:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   15416:	b913      	cbnz	r3, 1541e <idle+0x26>
	arch_cpu_idle();
   15418:	f7f6 f808 	bl	b42c <arch_cpu_idle>
}
   1541c:	e7ef      	b.n	153fe <idle+0x6>
   1541e:	f7f5 fdc1 	bl	afa4 <pm_system_suspend>
   15422:	2800      	cmp	r0, #0
   15424:	d1eb      	bne.n	153fe <idle+0x6>
   15426:	e7f7      	b.n	15418 <idle+0x20>
   15428:	20009b90 	.word	0x20009b90
   1542c:	20009c8c 	.word	0x20009c8c

00015430 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   15430:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   15434:	4604      	mov	r4, r0
   15436:	4617      	mov	r7, r2
   15438:	461e      	mov	r6, r3
   1543a:	f04f 0320 	mov.w	r3, #32
   1543e:	f3ef 8811 	mrs	r8, BASEPRI
   15442:	f383 8812 	msr	BASEPRI_MAX, r3
   15446:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1544a:	68c3      	ldr	r3, [r0, #12]
   1544c:	4a33      	ldr	r2, [pc, #204]	; (1551c <z_impl_k_mutex_lock+0xec>)
   1544e:	b17b      	cbz	r3, 15470 <z_impl_k_mutex_lock+0x40>
   15450:	6880      	ldr	r0, [r0, #8]
   15452:	6891      	ldr	r1, [r2, #8]
   15454:	4288      	cmp	r0, r1
   15456:	d019      	beq.n	1548c <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   15458:	ea57 0306 	orrs.w	r3, r7, r6
   1545c:	d118      	bne.n	15490 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1545e:	f388 8811 	msr	BASEPRI, r8
   15462:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   15466:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1546a:	b002      	add	sp, #8
   1546c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   15470:	6891      	ldr	r1, [r2, #8]
   15472:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   15476:	3301      	adds	r3, #1
   15478:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1547a:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1547c:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   1547e:	60a3      	str	r3, [r4, #8]
   15480:	f388 8811 	msr	BASEPRI, r8
   15484:	f3bf 8f6f 	isb	sy
		return 0;
   15488:	2000      	movs	r0, #0
   1548a:	e7ee      	b.n	1546a <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   1548c:	6921      	ldr	r1, [r4, #16]
   1548e:	e7f2      	b.n	15476 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   15490:	f991 100e 	ldrsb.w	r1, [r1, #14]
   15494:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   15498:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   1549c:	4299      	cmp	r1, r3
   1549e:	bfa8      	it	ge
   154a0:	4619      	movge	r1, r3
   154a2:	4291      	cmp	r1, r2
   154a4:	bfb8      	it	lt
   154a6:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   154a8:	428b      	cmp	r3, r1
   154aa:	dd2e      	ble.n	1550a <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   154ac:	f005 face 	bl	1aa4c <adjust_owner_prio.isra.0>
   154b0:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   154b2:	4622      	mov	r2, r4
   154b4:	4641      	mov	r1, r8
   154b6:	e9cd 7600 	strd	r7, r6, [sp]
   154ba:	4819      	ldr	r0, [pc, #100]	; (15520 <z_impl_k_mutex_lock+0xf0>)
   154bc:	f000 fc40 	bl	15d40 <z_pend_curr>
	if (got_mutex == 0) {
   154c0:	2800      	cmp	r0, #0
   154c2:	d0e1      	beq.n	15488 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   154c4:	f04f 0320 	mov.w	r3, #32
   154c8:	f3ef 8611 	mrs	r6, BASEPRI
   154cc:	f383 8812 	msr	BASEPRI_MAX, r3
   154d0:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   154d4:	68a0      	ldr	r0, [r4, #8]
   154d6:	b1d0      	cbz	r0, 1550e <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   154d8:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   154da:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   154dc:	429c      	cmp	r4, r3
   154de:	d00a      	beq.n	154f6 <z_impl_k_mutex_lock+0xc6>
   154e0:	b14b      	cbz	r3, 154f6 <z_impl_k_mutex_lock+0xc6>
   154e2:	f993 300e 	ldrsb.w	r3, [r3, #14]
   154e6:	4299      	cmp	r1, r3
   154e8:	bfa8      	it	ge
   154ea:	4619      	movge	r1, r3
   154ec:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   154f0:	4299      	cmp	r1, r3
   154f2:	bfb8      	it	lt
   154f4:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   154f6:	f005 faa9 	bl	1aa4c <adjust_owner_prio.isra.0>
   154fa:	b140      	cbz	r0, 1550e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   154fc:	4631      	mov	r1, r6
   154fe:	4808      	ldr	r0, [pc, #32]	; (15520 <z_impl_k_mutex_lock+0xf0>)
   15500:	f000 fc82 	bl	15e08 <z_reschedule>
	return -EAGAIN;
   15504:	f06f 000a 	mvn.w	r0, #10
   15508:	e7af      	b.n	1546a <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   1550a:	2500      	movs	r5, #0
   1550c:	e7d1      	b.n	154b2 <z_impl_k_mutex_lock+0x82>
	if (resched) {
   1550e:	2d00      	cmp	r5, #0
   15510:	d1f4      	bne.n	154fc <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   15512:	f386 8811 	msr	BASEPRI, r6
   15516:	f3bf 8f6f 	isb	sy
   1551a:	e7f3      	b.n	15504 <z_impl_k_mutex_lock+0xd4>
   1551c:	20009b90 	.word	0x20009b90
   15520:	20009c8d 	.word	0x20009c8d

00015524 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   15524:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   15526:	6883      	ldr	r3, [r0, #8]
{
   15528:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1552a:	b36b      	cbz	r3, 15588 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1552c:	4a19      	ldr	r2, [pc, #100]	; (15594 <z_impl_k_mutex_unlock+0x70>)
   1552e:	6892      	ldr	r2, [r2, #8]
   15530:	4293      	cmp	r3, r2
   15532:	d12c      	bne.n	1558e <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   15534:	68c3      	ldr	r3, [r0, #12]
   15536:	2b01      	cmp	r3, #1
   15538:	d903      	bls.n	15542 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   1553a:	3b01      	subs	r3, #1
   1553c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   1553e:	2000      	movs	r0, #0
}
   15540:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   15542:	f04f 0320 	mov.w	r3, #32
   15546:	f3ef 8511 	mrs	r5, BASEPRI
   1554a:	f383 8812 	msr	BASEPRI_MAX, r3
   1554e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   15552:	6901      	ldr	r1, [r0, #16]
   15554:	6880      	ldr	r0, [r0, #8]
   15556:	f005 fa79 	bl	1aa4c <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1555a:	4620      	mov	r0, r4
   1555c:	f005 fcd8 	bl	1af10 <z_unpend_first_thread>
	mutex->owner = new_owner;
   15560:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   15562:	b158      	cbz	r0, 1557c <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   15564:	f990 200e 	ldrsb.w	r2, [r0, #14]
   15568:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1556a:	2200      	movs	r2, #0
   1556c:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1556e:	f005 fc70 	bl	1ae52 <z_ready_thread>
		z_reschedule(&lock, key);
   15572:	4629      	mov	r1, r5
   15574:	4808      	ldr	r0, [pc, #32]	; (15598 <z_impl_k_mutex_unlock+0x74>)
   15576:	f000 fc47 	bl	15e08 <z_reschedule>
   1557a:	e7e0      	b.n	1553e <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   1557c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1557e:	f385 8811 	msr	BASEPRI, r5
   15582:	f3bf 8f6f 	isb	sy
   15586:	e7da      	b.n	1553e <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   15588:	f06f 0015 	mvn.w	r0, #21
   1558c:	e7d8      	b.n	15540 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   1558e:	f04f 30ff 	mov.w	r0, #4294967295
   15592:	e7d5      	b.n	15540 <z_impl_k_mutex_unlock+0x1c>
   15594:	20009b90 	.word	0x20009b90
   15598:	20009c8d 	.word	0x20009c8d

0001559c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1559c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1559e:	4611      	mov	r1, r2
	__asm__ volatile(
   155a0:	f04f 0220 	mov.w	r2, #32
   155a4:	f3ef 8511 	mrs	r5, BASEPRI
   155a8:	f382 8812 	msr	BASEPRI_MAX, r2
   155ac:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   155b0:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   155b2:	b19c      	cbz	r4, 155dc <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   155b4:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   155b6:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   155b8:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   155bc:	4294      	cmp	r4, r2
	list->head = node;
   155be:	6003      	str	r3, [r0, #0]
	list->tail = node;
   155c0:	bf08      	it	eq
   155c2:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   155c4:	2101      	movs	r1, #1
   155c6:	4620      	mov	r0, r4
   155c8:	f005 fab5 	bl	1ab36 <z_queue_node_peek>
   155cc:	4604      	mov	r4, r0
	__asm__ volatile(
   155ce:	f385 8811 	msr	BASEPRI, r5
   155d2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   155d6:	4620      	mov	r0, r4
   155d8:	b003      	add	sp, #12
   155da:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   155dc:	ea51 0203 	orrs.w	r2, r1, r3
   155e0:	d0f5      	beq.n	155ce <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   155e2:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   155e6:	e9cd 1300 	strd	r1, r3, [sp]
   155ea:	4610      	mov	r0, r2
   155ec:	4629      	mov	r1, r5
   155ee:	f000 fba7 	bl	15d40 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   155f2:	2800      	cmp	r0, #0
   155f4:	d1ef      	bne.n	155d6 <z_impl_k_queue_get+0x3a>
   155f6:	4b02      	ldr	r3, [pc, #8]	; (15600 <z_impl_k_queue_get+0x64>)
   155f8:	689b      	ldr	r3, [r3, #8]
   155fa:	695c      	ldr	r4, [r3, #20]
   155fc:	e7eb      	b.n	155d6 <z_impl_k_queue_get+0x3a>
   155fe:	bf00      	nop
   15600:	20009b90 	.word	0x20009b90

00015604 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   15604:	b538      	push	{r3, r4, r5, lr}
   15606:	4604      	mov	r4, r0
	__asm__ volatile(
   15608:	f04f 0320 	mov.w	r3, #32
   1560c:	f3ef 8511 	mrs	r5, BASEPRI
   15610:	f383 8812 	msr	BASEPRI_MAX, r3
   15614:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   15618:	f005 fc7a 	bl	1af10 <z_unpend_first_thread>

	if (thread != NULL) {
   1561c:	b148      	cbz	r0, 15632 <z_impl_k_sem_give+0x2e>
   1561e:	2200      	movs	r2, #0
   15620:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   15622:	f005 fc16 	bl	1ae52 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   15626:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   15628:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1562c:	4807      	ldr	r0, [pc, #28]	; (1564c <z_impl_k_sem_give+0x48>)
   1562e:	f000 bbeb 	b.w	15e08 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   15632:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   15636:	429a      	cmp	r2, r3
   15638:	bf18      	it	ne
   1563a:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1563c:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1563e:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   15640:	f104 0010 	add.w	r0, r4, #16
   15644:	f005 fe9c 	bl	1b380 <z_handle_obj_poll_events>
}
   15648:	e7ed      	b.n	15626 <z_impl_k_sem_give+0x22>
   1564a:	bf00      	nop
   1564c:	20009c8d 	.word	0x20009c8d

00015650 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   15650:	b513      	push	{r0, r1, r4, lr}
   15652:	f04f 0420 	mov.w	r4, #32
   15656:	f3ef 8111 	mrs	r1, BASEPRI
   1565a:	f384 8812 	msr	BASEPRI_MAX, r4
   1565e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   15662:	6884      	ldr	r4, [r0, #8]
   15664:	b144      	cbz	r4, 15678 <z_impl_k_sem_take+0x28>
		sem->count--;
   15666:	3c01      	subs	r4, #1
   15668:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   1566a:	f381 8811 	msr	BASEPRI, r1
   1566e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   15672:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   15674:	b002      	add	sp, #8
   15676:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   15678:	ea52 0403 	orrs.w	r4, r2, r3
   1567c:	d106      	bne.n	1568c <z_impl_k_sem_take+0x3c>
   1567e:	f381 8811 	msr	BASEPRI, r1
   15682:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   15686:	f06f 000f 	mvn.w	r0, #15
   1568a:	e7f3      	b.n	15674 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1568c:	e9cd 2300 	strd	r2, r3, [sp]
   15690:	4602      	mov	r2, r0
   15692:	4802      	ldr	r0, [pc, #8]	; (1569c <z_impl_k_sem_take+0x4c>)
   15694:	f000 fb54 	bl	15d40 <z_pend_curr>
	return ret;
   15698:	e7ec      	b.n	15674 <z_impl_k_sem_take+0x24>
   1569a:	bf00      	nop
   1569c:	20009c8d 	.word	0x20009c8d

000156a0 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
   156a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
   156a2:	2400      	movs	r4, #0
   156a4:	4b08      	ldr	r3, [pc, #32]	; (156c8 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   156a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
	struct k_work_queue_config cfg = {
   156aa:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   156ac:	ab02      	add	r3, sp, #8
   156ae:	9300      	str	r3, [sp, #0]
   156b0:	4906      	ldr	r1, [pc, #24]	; (156cc <k_sys_work_q_init+0x2c>)
   156b2:	f04f 33ff 	mov.w	r3, #4294967295
   156b6:	4806      	ldr	r0, [pc, #24]	; (156d0 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   156b8:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   156bc:	f000 f924 	bl	15908 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   156c0:	4620      	mov	r0, r4
   156c2:	b004      	add	sp, #16
   156c4:	bd10      	pop	{r4, pc}
   156c6:	bf00      	nop
   156c8:	0001e6e5 	.word	0x0001e6e5
   156cc:	2000c728 	.word	0x2000c728
   156d0:	200096b8 	.word	0x200096b8

000156d4 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   156d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156d8:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   156da:	f04f 38ff 	mov.w	r8, #4294967295
   156de:	f04f 39ff 	mov.w	r9, #4294967295
	return list->head;
   156e2:	4e48      	ldr	r6, [pc, #288]	; (15804 <work_queue_main+0x130>)
{
   156e4:	b085      	sub	sp, #20
	__asm__ volatile(
   156e6:	f04f 0320 	mov.w	r3, #32
   156ea:	f3ef 8711 	mrs	r7, BASEPRI
   156ee:	f383 8812 	msr	BASEPRI_MAX, r3
   156f2:	f3bf 8f6f 	isb	sy
   156f6:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
Z_GENLIST_GET(slist, snode)
   156fa:	b98d      	cbnz	r5, 15720 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   156fc:	2102      	movs	r1, #2
   156fe:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   15702:	f005 fa59 	bl	1abb8 <flag_test_and_clear>
   15706:	2800      	cmp	r0, #0
   15708:	d143      	bne.n	15792 <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1570a:	2300      	movs	r3, #0
   1570c:	4639      	mov	r1, r7
   1570e:	e9cd 8900 	strd	r8, r9, [sp]
   15712:	9302      	str	r3, [sp, #8]
   15714:	f104 0290 	add.w	r2, r4, #144	; 0x90
   15718:	483b      	ldr	r0, [pc, #236]	; (15808 <work_queue_main+0x134>)
   1571a:	f000 fd11 	bl	16140 <z_sched_wait>
			continue;
   1571e:	e7e2      	b.n	156e6 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15720:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
	return node->next;
   15724:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15726:	4295      	cmp	r5, r2
	list->head = node;
   15728:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	list->tail = node;
   1572c:	bf08      	it	eq
   1572e:	f8c4 308c 	streq.w	r3, [r4, #140]	; 0x8c
	*flagp |= BIT(bit);
   15732:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   15736:	f043 0302 	orr.w	r3, r3, #2
   1573a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	*flagp &= ~BIT(bit);
   1573e:	68eb      	ldr	r3, [r5, #12]
   15740:	f023 0304 	bic.w	r3, r3, #4
   15744:	f043 0301 	orr.w	r3, r3, #1
   15748:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   1574a:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   1574c:	f387 8811 	msr	BASEPRI, r7
   15750:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   15754:	4628      	mov	r0, r5
   15756:	4798      	blx	r3
	__asm__ volatile(
   15758:	f04f 0320 	mov.w	r3, #32
   1575c:	f3ef 8b11 	mrs	fp, BASEPRI
   15760:	f383 8812 	msr	BASEPRI_MAX, r3
   15764:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   15768:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1576a:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   1576c:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   15770:	d419      	bmi.n	157a6 <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   15772:	60ea      	str	r2, [r5, #12]
   15774:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   15778:	f023 0302 	bic.w	r3, r3, #2
   1577c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	__asm__ volatile(
   15780:	f38b 8811 	msr	BASEPRI, fp
   15784:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   15788:	05db      	lsls	r3, r3, #23
   1578a:	d4ac      	bmi.n	156e6 <work_queue_main+0x12>
	z_impl_k_yield();
   1578c:	f000 fbd6 	bl	15f3c <z_impl_k_yield>
}
   15790:	e7a9      	b.n	156e6 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   15792:	f104 0598 	add.w	r5, r4, #152	; 0x98
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   15796:	2200      	movs	r2, #0
   15798:	2101      	movs	r1, #1
   1579a:	4628      	mov	r0, r5
   1579c:	f005 fc12 	bl	1afc4 <z_sched_wake>
   157a0:	2800      	cmp	r0, #0
   157a2:	d1f8      	bne.n	15796 <work_queue_main+0xc2>
   157a4:	e7b1      	b.n	1570a <work_queue_main+0x36>
	return list->head;
   157a6:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   157a8:	f023 0303 	bic.w	r3, r3, #3
   157ac:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   157ae:	2800      	cmp	r0, #0
   157b0:	d0e0      	beq.n	15774 <work_queue_main+0xa0>
	return node->next;
   157b2:	2700      	movs	r7, #0
	parent->next = child;
   157b4:	463b      	mov	r3, r7
	return node->next;
   157b6:	f8d0 a000 	ldr.w	sl, [r0]
   157ba:	2800      	cmp	r0, #0
   157bc:	d0da      	beq.n	15774 <work_queue_main+0xa0>
		if (wc->work == work) {
   157be:	6842      	ldr	r2, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   157c0:	4601      	mov	r1, r0
		if (wc->work == work) {
   157c2:	4295      	cmp	r5, r2
   157c4:	d10c      	bne.n	157e0 <work_queue_main+0x10c>
   157c6:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   157c8:	b99f      	cbnz	r7, 157f2 <work_queue_main+0x11e>
   157ca:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   157cc:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   157ce:	4282      	cmp	r2, r0
   157d0:	d100      	bne.n	157d4 <work_queue_main+0x100>
	list->tail = node;
   157d2:	6071      	str	r1, [r6, #4]
	parent->next = child;
   157d4:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   157d8:	f7ff ff14 	bl	15604 <z_impl_k_sem_give>
}
   157dc:	4639      	mov	r1, r7
   157de:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   157e0:	f1ba 0f00 	cmp.w	sl, #0
   157e4:	d00b      	beq.n	157fe <work_queue_main+0x12a>
	return node->next;
   157e6:	f8da 2000 	ldr.w	r2, [sl]
   157ea:	4650      	mov	r0, sl
   157ec:	460f      	mov	r7, r1
   157ee:	4692      	mov	sl, r2
   157f0:	e7e3      	b.n	157ba <work_queue_main+0xe6>
	parent->next = child;
   157f2:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   157f4:	6872      	ldr	r2, [r6, #4]
   157f6:	4282      	cmp	r2, r0
	list->tail = node;
   157f8:	bf08      	it	eq
   157fa:	6077      	streq	r7, [r6, #4]
}
   157fc:	e7ea      	b.n	157d4 <work_queue_main+0x100>
   157fe:	4652      	mov	r2, sl
   15800:	e7f3      	b.n	157ea <work_queue_main+0x116>
   15802:	bf00      	nop
   15804:	20009bb4 	.word	0x20009bb4
   15808:	20009c8d 	.word	0x20009c8d

0001580c <cancel_sync_locked>:
{
   1580c:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1580e:	68c3      	ldr	r3, [r0, #12]
{
   15810:	4605      	mov	r5, r0
	return (*flagp & BIT(bit)) != 0U;
   15812:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   15816:	079b      	lsls	r3, r3, #30
{
   15818:	460c      	mov	r4, r1
	if (ret) {
   1581a:	d50d      	bpl.n	15838 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1581c:	2201      	movs	r2, #1
   1581e:	2100      	movs	r1, #0
   15820:	f104 0008 	add.w	r0, r4, #8
   15824:	f005 f9b8 	bl	1ab98 <z_impl_k_sem_init>
	parent->next = child;
   15828:	2300      	movs	r3, #0
   1582a:	6023      	str	r3, [r4, #0]
	return list->tail;
   1582c:	4b05      	ldr	r3, [pc, #20]	; (15844 <cancel_sync_locked+0x38>)
	canceler->work = work;
   1582e:	6065      	str	r5, [r4, #4]
   15830:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   15832:	b91a      	cbnz	r2, 1583c <cancel_sync_locked+0x30>
	list->head = node;
   15834:	e9c3 4400 	strd	r4, r4, [r3]
}
   15838:	4630      	mov	r0, r6
   1583a:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   1583c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1583e:	605c      	str	r4, [r3, #4]
}
   15840:	e7fa      	b.n	15838 <cancel_sync_locked+0x2c>
   15842:	bf00      	nop
   15844:	20009bb4 	.word	0x20009bb4

00015848 <submit_to_queue_locked>:
{
   15848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   1584a:	68c3      	ldr	r3, [r0, #12]
{
   1584c:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1584e:	079a      	lsls	r2, r3, #30
{
   15850:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   15852:	f3c3 0640 	ubfx	r6, r3, #1, #1
   15856:	d42c      	bmi.n	158b2 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   15858:	075b      	lsls	r3, r3, #29
   1585a:	d41a      	bmi.n	15892 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   1585c:	680b      	ldr	r3, [r1, #0]
   1585e:	b90b      	cbnz	r3, 15864 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   15860:	6883      	ldr	r3, [r0, #8]
   15862:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   15864:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   15866:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   15868:	bf42      	ittt	mi
   1586a:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
   1586c:	2602      	movmi	r6, #2
			*queuep = work->queue;
   1586e:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   15870:	683d      	ldr	r5, [r7, #0]
		ret = 1;
   15872:	bf58      	it	pl
   15874:	2601      	movpl	r6, #1
	if (queue == NULL) {
   15876:	2d00      	cmp	r5, #0
   15878:	d03a      	beq.n	158f0 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1587a:	4b1f      	ldr	r3, [pc, #124]	; (158f8 <submit_to_queue_locked+0xb0>)
   1587c:	689b      	ldr	r3, [r3, #8]
   1587e:	42ab      	cmp	r3, r5
   15880:	d00a      	beq.n	15898 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   15882:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   15886:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   15888:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1588c:	d414      	bmi.n	158b8 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   1588e:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   15892:	2300      	movs	r3, #0
   15894:	603b      	str	r3, [r7, #0]
	return ret;
   15896:	e025      	b.n	158e4 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   15898:	f005 f8c4 	bl	1aa24 <k_is_in_isr>
   1589c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   158a0:	2800      	cmp	r0, #0
   158a2:	d1f0      	bne.n	15886 <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   158a4:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   158a6:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   158aa:	d5f0      	bpl.n	1588e <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   158ac:	b152      	cbz	r2, 158c4 <submit_to_queue_locked+0x7c>
   158ae:	075b      	lsls	r3, r3, #29
   158b0:	d408      	bmi.n	158c4 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   158b2:	f06f 060f 	mvn.w	r6, #15
   158b6:	e7ec      	b.n	15892 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   158b8:	2a00      	cmp	r2, #0
   158ba:	d1fa      	bne.n	158b2 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   158bc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   158c0:	2b00      	cmp	r3, #0
   158c2:	d1f6      	bne.n	158b2 <submit_to_queue_locked+0x6a>
	parent->next = child;
   158c4:	2300      	movs	r3, #0
   158c6:	6023      	str	r3, [r4, #0]
	return list->tail;
   158c8:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
Z_GENLIST_APPEND(slist, snode)
   158cc:	b963      	cbnz	r3, 158e8 <submit_to_queue_locked+0xa0>
	list->head = node;
   158ce:	e9c5 4422 	strd	r4, r4, [r5, #136]	; 0x88
		(void)notify_queue_locked(queue);
   158d2:	4628      	mov	r0, r5
   158d4:	f005 f98a 	bl	1abec <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   158d8:	68e3      	ldr	r3, [r4, #12]
   158da:	f043 0304 	orr.w	r3, r3, #4
   158de:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   158e0:	683b      	ldr	r3, [r7, #0]
   158e2:	60a3      	str	r3, [r4, #8]
}
   158e4:	4630      	mov	r0, r6
   158e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   158e8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   158ea:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c
}
   158ee:	e7f0      	b.n	158d2 <submit_to_queue_locked+0x8a>
		return -EINVAL;
   158f0:	f06f 0615 	mvn.w	r6, #21
   158f4:	e7cd      	b.n	15892 <submit_to_queue_locked+0x4a>
   158f6:	bf00      	nop
   158f8:	20009b90 	.word	0x20009b90

000158fc <k_work_submit>:
{
   158fc:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   158fe:	4801      	ldr	r0, [pc, #4]	; (15904 <k_work_submit+0x8>)
   15900:	f005 b9fa 	b.w	1acf8 <k_work_submit_to_queue>
   15904:	200096b8 	.word	0x200096b8

00015908 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   15908:	b5f0      	push	{r4, r5, r6, r7, lr}
   1590a:	4604      	mov	r4, r0
	list->head = NULL;
   1590c:	2000      	movs	r0, #0
   1590e:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
   15910:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   15914:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   15916:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->tail = (sys_dnode_t *)list;
   1591a:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
   1591e:	f104 0098 	add.w	r0, r4, #152	; 0x98
   15922:	e9c4 0026 	strd	r0, r0, [r4, #152]	; 0x98

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   15926:	b31d      	cbz	r5, 15970 <k_work_queue_start+0x68>
   15928:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1592a:	2800      	cmp	r0, #0
   1592c:	f240 1001 	movw	r0, #257	; 0x101
   15930:	bf08      	it	eq
   15932:	2001      	moveq	r0, #1
	*flagp = flags;
   15934:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   15938:	2000      	movs	r0, #0
   1593a:	f04f 36ff 	mov.w	r6, #4294967295
   1593e:	f04f 37ff 	mov.w	r7, #4294967295
   15942:	e9cd 3003 	strd	r3, r0, [sp, #12]
   15946:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1594a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1594e:	4620      	mov	r0, r4
   15950:	4b08      	ldr	r3, [pc, #32]	; (15974 <k_work_queue_start+0x6c>)
   15952:	9400      	str	r4, [sp, #0]
   15954:	f7ff fcc8 	bl	152e8 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   15958:	b125      	cbz	r5, 15964 <k_work_queue_start+0x5c>
   1595a:	6829      	ldr	r1, [r5, #0]
   1595c:	b111      	cbz	r1, 15964 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   1595e:	4620      	mov	r0, r4
   15960:	f005 f866 	bl	1aa30 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   15964:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   15966:	b009      	add	sp, #36	; 0x24
   15968:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1596c:	f005 b865 	b.w	1aa3a <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   15970:	2001      	movs	r0, #1
   15972:	e7df      	b.n	15934 <k_work_queue_start+0x2c>
   15974:	000156d5 	.word	0x000156d5

00015978 <k_work_queue_drain>:

int k_work_queue_drain(struct k_work_q *queue,
		       bool plug)
{
   15978:	b530      	push	{r4, r5, lr}
   1597a:	460a      	mov	r2, r1
   1597c:	4604      	mov	r4, r0
   1597e:	b085      	sub	sp, #20
	__asm__ volatile(
   15980:	f04f 0320 	mov.w	r3, #32
   15984:	f3ef 8511 	mrs	r5, BASEPRI
   15988:	f383 8812 	msr	BASEPRI_MAX, r3
   1598c:	f3bf 8f6f 	isb	sy
	return *flagp;
   15990:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work_queue, drain, queue);

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (((flags_get(&queue->flags)
   15994:	f013 0f06 	tst.w	r3, #6
   15998:	d11d      	bne.n	159d6 <k_work_queue_drain+0x5e>
	      & (K_WORK_QUEUE_BUSY | K_WORK_QUEUE_DRAIN)) != 0U)
	    || plug
   1599a:	b1b1      	cbz	r1, 159ca <k_work_queue_drain+0x52>
	*flagp |= BIT(bit);
   1599c:	f043 030c 	orr.w	r3, r3, #12
   159a0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		flag_set(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
		if (plug) {
			flag_set(&queue->flags, K_WORK_QUEUE_PLUGGED_BIT);
		}

		notify_queue_locked(queue);
   159a4:	4620      	mov	r0, r4
   159a6:	f005 f921 	bl	1abec <notify_queue_locked.isra.0>
		ret = z_sched_wait(&lock, key, &queue->drainq,
   159aa:	2300      	movs	r3, #0
   159ac:	f04f 32ff 	mov.w	r2, #4294967295
   159b0:	9302      	str	r3, [sp, #8]
   159b2:	f04f 33ff 	mov.w	r3, #4294967295
   159b6:	4629      	mov	r1, r5
   159b8:	e9cd 2300 	strd	r2, r3, [sp]
   159bc:	480c      	ldr	r0, [pc, #48]	; (159f0 <k_work_queue_drain+0x78>)
   159be:	f104 0298 	add.w	r2, r4, #152	; 0x98
   159c2:	f000 fbbd 	bl	16140 <z_sched_wait>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, drain, queue, ret);

	return ret;
}
   159c6:	b005      	add	sp, #20
   159c8:	bd30      	pop	{r4, r5, pc}
	    || !sys_slist_is_empty(&queue->pending)) {
   159ca:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
   159ce:	b148      	cbz	r0, 159e4 <k_work_queue_drain+0x6c>
	*flagp |= BIT(bit);
   159d0:	f043 0304 	orr.w	r3, r3, #4
   159d4:	e7e4      	b.n	159a0 <k_work_queue_drain+0x28>
   159d6:	f043 0104 	orr.w	r1, r3, #4
   159da:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
		if (plug) {
   159de:	2a00      	cmp	r2, #0
   159e0:	d0e0      	beq.n	159a4 <k_work_queue_drain+0x2c>
   159e2:	e7db      	b.n	1599c <k_work_queue_drain+0x24>
	__asm__ volatile(
   159e4:	f385 8811 	msr	BASEPRI, r5
   159e8:	f3bf 8f6f 	isb	sy
	return ret;
   159ec:	e7eb      	b.n	159c6 <k_work_queue_drain+0x4e>
   159ee:	bf00      	nop
   159f0:	20009c8d 	.word	0x20009c8d

000159f4 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   159f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   159f6:	9001      	str	r0, [sp, #4]
   159f8:	4608      	mov	r0, r1
	__asm__ volatile(
   159fa:	f04f 0120 	mov.w	r1, #32
   159fe:	f3ef 8411 	mrs	r4, BASEPRI
   15a02:	f381 8812 	msr	BASEPRI_MAX, r1
   15a06:	f3bf 8f6f 	isb	sy
	return *flagp;
   15a0a:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   15a0c:	f011 0f0e 	tst.w	r1, #14
   15a10:	d116      	bne.n	15a40 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   15a12:	ea53 0502 	orrs.w	r5, r3, r2
   15a16:	d108      	bne.n	15a2a <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   15a18:	a901      	add	r1, sp, #4
   15a1a:	f7ff ff15 	bl	15848 <submit_to_queue_locked>
	__asm__ volatile(
   15a1e:	f384 8811 	msr	BASEPRI, r4
   15a22:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   15a26:	b003      	add	sp, #12
   15a28:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   15a2a:	f041 0108 	orr.w	r1, r1, #8
   15a2e:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   15a30:	9901      	ldr	r1, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   15a32:	3010      	adds	r0, #16
	dwork->queue = *queuep;
   15a34:	6181      	str	r1, [r0, #24]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   15a36:	4903      	ldr	r1, [pc, #12]	; (15a44 <k_work_schedule_for_queue+0x50>)
   15a38:	f000 fbf4 	bl	16224 <z_add_timeout>
	return ret;
   15a3c:	2001      	movs	r0, #1
   15a3e:	e7ee      	b.n	15a1e <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   15a40:	2000      	movs	r0, #0
   15a42:	e7ec      	b.n	15a1e <k_work_schedule_for_queue+0x2a>
   15a44:	0001ac61 	.word	0x0001ac61

00015a48 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   15a48:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   15a4a:	4801      	ldr	r0, [pc, #4]	; (15a50 <k_work_schedule+0x8>)
   15a4c:	f7ff bfd2 	b.w	159f4 <k_work_schedule_for_queue>
   15a50:	200096b8 	.word	0x200096b8

00015a54 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   15a54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15a56:	460c      	mov	r4, r1
   15a58:	4616      	mov	r6, r2
   15a5a:	461d      	mov	r5, r3
   15a5c:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   15a5e:	f04f 0320 	mov.w	r3, #32
   15a62:	f3ef 8711 	mrs	r7, BASEPRI
   15a66:	f383 8812 	msr	BASEPRI_MAX, r3
   15a6a:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   15a6e:	4608      	mov	r0, r1
   15a70:	f005 f8ad 	bl	1abce <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   15a74:	ea55 0306 	orrs.w	r3, r5, r6
   15a78:	d109      	bne.n	15a8e <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   15a7a:	4620      	mov	r0, r4
   15a7c:	a901      	add	r1, sp, #4
   15a7e:	f7ff fee3 	bl	15848 <submit_to_queue_locked>
	__asm__ volatile(
   15a82:	f387 8811 	msr	BASEPRI, r7
   15a86:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   15a8a:	b003      	add	sp, #12
   15a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   15a8e:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   15a90:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   15a94:	f043 0308 	orr.w	r3, r3, #8
   15a98:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   15a9a:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   15a9c:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   15a9e:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   15aa0:	4902      	ldr	r1, [pc, #8]	; (15aac <k_work_reschedule_for_queue+0x58>)
   15aa2:	462b      	mov	r3, r5
   15aa4:	f000 fbbe 	bl	16224 <z_add_timeout>
	return ret;
   15aa8:	2001      	movs	r0, #1
   15aaa:	e7ea      	b.n	15a82 <k_work_reschedule_for_queue+0x2e>
   15aac:	0001ac61 	.word	0x0001ac61

00015ab0 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   15ab0:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   15ab2:	4801      	ldr	r0, [pc, #4]	; (15ab8 <k_work_reschedule+0x8>)
   15ab4:	f7ff bfce 	b.w	15a54 <k_work_reschedule_for_queue>
   15ab8:	200096b8 	.word	0x200096b8

00015abc <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   15abc:	89c3      	ldrh	r3, [r0, #14]
   15abe:	2b7f      	cmp	r3, #127	; 0x7f
   15ac0:	d812      	bhi.n	15ae8 <sliceable+0x2c>
	int ret = slice_ticks;
   15ac2:	4b0a      	ldr	r3, [pc, #40]	; (15aec <sliceable+0x30>)
   15ac4:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   15ac6:	b163      	cbz	r3, 15ae2 <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   15ac8:	4b09      	ldr	r3, [pc, #36]	; (15af0 <sliceable+0x34>)
   15aca:	f990 200e 	ldrsb.w	r2, [r0, #14]
   15ace:	681b      	ldr	r3, [r3, #0]
   15ad0:	429a      	cmp	r2, r3
   15ad2:	db09      	blt.n	15ae8 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
   15ad4:	7b43      	ldrb	r3, [r0, #13]
   15ad6:	06db      	lsls	r3, r3, #27
   15ad8:	d106      	bne.n	15ae8 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   15ada:	4b06      	ldr	r3, [pc, #24]	; (15af4 <sliceable+0x38>)
   15adc:	1ac3      	subs	r3, r0, r3
   15ade:	bf18      	it	ne
   15ae0:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   15ae2:	f003 0001 	and.w	r0, r3, #1
   15ae6:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   15ae8:	2300      	movs	r3, #0
   15aea:	e7fa      	b.n	15ae2 <sliceable+0x26>
   15aec:	20009bc4 	.word	0x20009bc4
   15af0:	20009bc0 	.word	0x20009bc0
   15af4:	200095a8 	.word	0x200095a8

00015af8 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);

	slice_expired[cpu] = true;
   15af8:	2201      	movs	r2, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   15afa:	4b04      	ldr	r3, [pc, #16]	; (15b0c <slice_timeout+0x14>)
   15afc:	1ac0      	subs	r0, r0, r3
   15afe:	4b04      	ldr	r3, [pc, #16]	; (15b10 <slice_timeout+0x18>)
   15b00:	10c0      	asrs	r0, r0, #3
   15b02:	4358      	muls	r0, r3
	slice_expired[cpu] = true;
   15b04:	4b03      	ldr	r3, [pc, #12]	; (15b14 <slice_timeout+0x1c>)
   15b06:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   15b08:	4770      	bx	lr
   15b0a:	bf00      	nop
   15b0c:	20009760 	.word	0x20009760
   15b10:	aaaaaaab 	.word	0xaaaaaaab
   15b14:	20009c8d 	.word	0x20009c8d

00015b18 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
   15b18:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
   15b1a:	4b0e      	ldr	r3, [pc, #56]	; (15b54 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
   15b1c:	4c0e      	ldr	r4, [pc, #56]	; (15b58 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
   15b1e:	7c1e      	ldrb	r6, [r3, #16]
{
   15b20:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
   15b22:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   15b26:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   15b2a:	4620      	mov	r0, r4
   15b2c:	f005 fa6d 	bl	1b00a <z_abort_timeout>
	slice_expired[cpu] = false;
   15b30:	2200      	movs	r2, #0
   15b32:	4b0a      	ldr	r3, [pc, #40]	; (15b5c <z_reset_time_slice+0x44>)
	if (sliceable(curr)) {
   15b34:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
   15b36:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   15b38:	f7ff ffc0 	bl	15abc <sliceable>
   15b3c:	b148      	cbz	r0, 15b52 <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
   15b3e:	4b08      	ldr	r3, [pc, #32]	; (15b60 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   15b40:	4620      	mov	r0, r4
			      K_TICKS(slice_time(curr) - 1));
	}
}
   15b42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			      K_TICKS(slice_time(curr) - 1));
   15b46:	681a      	ldr	r2, [r3, #0]
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   15b48:	4906      	ldr	r1, [pc, #24]	; (15b64 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
   15b4a:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   15b4c:	17d3      	asrs	r3, r2, #31
   15b4e:	f000 bb69 	b.w	16224 <z_add_timeout>
}
   15b52:	bd70      	pop	{r4, r5, r6, pc}
   15b54:	20009b90 	.word	0x20009b90
   15b58:	20009760 	.word	0x20009760
   15b5c:	20009c8d 	.word	0x20009c8d
   15b60:	20009bc4 	.word	0x20009bc4
   15b64:	00015af9 	.word	0x00015af9

00015b68 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   15b68:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   15b6a:	4d0d      	ldr	r5, [pc, #52]	; (15ba0 <update_cache+0x38>)
   15b6c:	462b      	mov	r3, r5
   15b6e:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15b72:	429c      	cmp	r4, r3
   15b74:	d000      	beq.n	15b78 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   15b76:	b904      	cbnz	r4, 15b7a <update_cache+0x12>
   15b78:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   15b7a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   15b7c:	b938      	cbnz	r0, 15b8e <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   15b7e:	7b5a      	ldrb	r2, [r3, #13]
   15b80:	06d2      	lsls	r2, r2, #27
   15b82:	d104      	bne.n	15b8e <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   15b84:	69a2      	ldr	r2, [r4, #24]
   15b86:	b912      	cbnz	r2, 15b8e <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   15b88:	89da      	ldrh	r2, [r3, #14]
   15b8a:	2a7f      	cmp	r2, #127	; 0x7f
   15b8c:	d805      	bhi.n	15b9a <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   15b8e:	429c      	cmp	r4, r3
   15b90:	d002      	beq.n	15b98 <update_cache+0x30>
			z_reset_time_slice(thread);
   15b92:	4620      	mov	r0, r4
   15b94:	f7ff ffc0 	bl	15b18 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   15b98:	4623      	mov	r3, r4
   15b9a:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   15b9c:	bd38      	pop	{r3, r4, r5, pc}
   15b9e:	bf00      	nop
   15ba0:	20009b90 	.word	0x20009b90

00015ba4 <move_thread_to_end_of_prio_q>:
{
   15ba4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   15ba6:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   15baa:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   15bac:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   15bae:	7b43      	ldrb	r3, [r0, #13]
   15bb0:	da04      	bge.n	15bbc <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   15bb6:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   15bb8:	f005 f908 	bl	1adcc <sys_dlist_remove>
	return list->head == list;
   15bbc:	4a15      	ldr	r2, [pc, #84]	; (15c14 <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
   15bbe:	7b4b      	ldrb	r3, [r1, #13]
   15bc0:	4610      	mov	r0, r2
   15bc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   15bc6:	734b      	strb	r3, [r1, #13]
   15bc8:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   15bcc:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15bce:	4283      	cmp	r3, r0
   15bd0:	bf08      	it	eq
   15bd2:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15bd4:	b923      	cbnz	r3, 15be0 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   15bd6:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   15bda:	6021      	str	r1, [r4, #0]
	list->tail = node;
   15bdc:	6211      	str	r1, [r2, #32]
}
   15bde:	e00c      	b.n	15bfa <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   15be0:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   15be4:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   15be8:	42b5      	cmp	r5, r6
   15bea:	d00e      	beq.n	15c0a <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   15bec:	42ae      	cmp	r6, r5
   15bee:	dd0c      	ble.n	15c0a <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   15bf0:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   15bf2:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   15bf6:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   15bf8:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   15bfa:	6890      	ldr	r0, [r2, #8]
}
   15bfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   15c00:	1a43      	subs	r3, r0, r1
   15c02:	4258      	negs	r0, r3
   15c04:	4158      	adcs	r0, r3
   15c06:	f7ff bfaf 	b.w	15b68 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   15c0a:	429c      	cmp	r4, r3
   15c0c:	d0e3      	beq.n	15bd6 <move_thread_to_end_of_prio_q+0x32>
   15c0e:	681b      	ldr	r3, [r3, #0]
   15c10:	e7e0      	b.n	15bd4 <move_thread_to_end_of_prio_q+0x30>
   15c12:	bf00      	nop
   15c14:	20009b90 	.word	0x20009b90

00015c18 <ready_thread>:
{
   15c18:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   15c1a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   15c1e:	7b42      	ldrb	r2, [r0, #13]
   15c20:	2b00      	cmp	r3, #0
   15c22:	db29      	blt.n	15c78 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   15c24:	06d3      	lsls	r3, r2, #27
   15c26:	d127      	bne.n	15c78 <ready_thread+0x60>
	return node->next != NULL;
   15c28:	6983      	ldr	r3, [r0, #24]
   15c2a:	bb2b      	cbnz	r3, 15c78 <ready_thread+0x60>
	return list->head == list;
   15c2c:	4913      	ldr	r1, [pc, #76]	; (15c7c <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   15c2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   15c32:	7342      	strb	r2, [r0, #13]
   15c34:	460a      	mov	r2, r1
   15c36:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15c3a:	4294      	cmp	r4, r2
   15c3c:	bf18      	it	ne
   15c3e:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   15c40:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15c42:	b923      	cbnz	r3, 15c4e <ready_thread+0x36>
	node->prev = tail;
   15c44:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   15c48:	6020      	str	r0, [r4, #0]
	list->tail = node;
   15c4a:	6208      	str	r0, [r1, #32]
}
   15c4c:	e00c      	b.n	15c68 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   15c4e:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   15c52:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   15c56:	42b5      	cmp	r5, r6
   15c58:	d00a      	beq.n	15c70 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   15c5a:	42ae      	cmp	r6, r5
   15c5c:	dd08      	ble.n	15c70 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   15c5e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   15c60:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   15c64:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   15c66:	6058      	str	r0, [r3, #4]
		update_cache(0);
   15c68:	2000      	movs	r0, #0
}
   15c6a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   15c6c:	f7ff bf7c 	b.w	15b68 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   15c70:	42a3      	cmp	r3, r4
   15c72:	d0e7      	beq.n	15c44 <ready_thread+0x2c>
   15c74:	681b      	ldr	r3, [r3, #0]
   15c76:	e7e4      	b.n	15c42 <ready_thread+0x2a>
}
   15c78:	bc70      	pop	{r4, r5, r6}
   15c7a:	4770      	bx	lr
   15c7c:	20009b90 	.word	0x20009b90

00015c80 <unready_thread>:
{
   15c80:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   15c82:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   15c86:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   15c88:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   15c8a:	7b43      	ldrb	r3, [r0, #13]
   15c8c:	da04      	bge.n	15c98 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15c8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   15c92:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   15c94:	f005 f89a 	bl	1adcc <sys_dlist_remove>
	update_cache(thread == _current);
   15c98:	4b04      	ldr	r3, [pc, #16]	; (15cac <unready_thread+0x2c>)
   15c9a:	6898      	ldr	r0, [r3, #8]
   15c9c:	1a43      	subs	r3, r0, r1
   15c9e:	4258      	negs	r0, r3
   15ca0:	4158      	adcs	r0, r3
}
   15ca2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   15ca6:	f7ff bf5f 	b.w	15b68 <update_cache>
   15caa:	bf00      	nop
   15cac:	20009b90 	.word	0x20009b90

00015cb0 <pend_locked>:
{
   15cb0:	b570      	push	{r4, r5, r6, lr}
   15cb2:	4615      	mov	r5, r2
   15cb4:	461c      	mov	r4, r3
   15cb6:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   15cb8:	f005 f8a3 	bl	1ae02 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   15cbc:	f1b4 3fff 	cmp.w	r4, #4294967295
   15cc0:	bf08      	it	eq
   15cc2:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   15cc6:	d008      	beq.n	15cda <pend_locked+0x2a>
   15cc8:	462a      	mov	r2, r5
   15cca:	4623      	mov	r3, r4
   15ccc:	f106 0018 	add.w	r0, r6, #24
   15cd0:	4902      	ldr	r1, [pc, #8]	; (15cdc <pend_locked+0x2c>)
}
   15cd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15cd6:	f000 baa5 	b.w	16224 <z_add_timeout>
   15cda:	bd70      	pop	{r4, r5, r6, pc}
   15cdc:	0001aedb 	.word	0x0001aedb

00015ce0 <z_time_slice>:
{
   15ce0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   15ce2:	f04f 0320 	mov.w	r3, #32
   15ce6:	f3ef 8511 	mrs	r5, BASEPRI
   15cea:	f383 8812 	msr	BASEPRI_MAX, r3
   15cee:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
   15cf2:	4b10      	ldr	r3, [pc, #64]	; (15d34 <z_time_slice+0x54>)
	if (pending_current == curr) {
   15cf4:	4a10      	ldr	r2, [pc, #64]	; (15d38 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
   15cf6:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   15cf8:	6810      	ldr	r0, [r2, #0]
   15cfa:	42a0      	cmp	r0, r4
   15cfc:	d106      	bne.n	15d0c <z_time_slice+0x2c>
		z_reset_time_slice(curr);
   15cfe:	f7ff ff0b 	bl	15b18 <z_reset_time_slice>
	__asm__ volatile(
   15d02:	f385 8811 	msr	BASEPRI, r5
   15d06:	f3bf 8f6f 	isb	sy
}
   15d0a:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   15d0c:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   15d0e:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
   15d10:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   15d12:	4a0a      	ldr	r2, [pc, #40]	; (15d3c <z_time_slice+0x5c>)
   15d14:	5cd3      	ldrb	r3, [r2, r3]
   15d16:	2b00      	cmp	r3, #0
   15d18:	d0f3      	beq.n	15d02 <z_time_slice+0x22>
   15d1a:	4620      	mov	r0, r4
   15d1c:	f7ff fece 	bl	15abc <sliceable>
   15d20:	2800      	cmp	r0, #0
   15d22:	d0ee      	beq.n	15d02 <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
   15d24:	7b63      	ldrb	r3, [r4, #13]
   15d26:	06db      	lsls	r3, r3, #27
   15d28:	d102      	bne.n	15d30 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
   15d2a:	4620      	mov	r0, r4
   15d2c:	f7ff ff3a 	bl	15ba4 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
   15d30:	4620      	mov	r0, r4
   15d32:	e7e4      	b.n	15cfe <z_time_slice+0x1e>
   15d34:	20009b90 	.word	0x20009b90
   15d38:	20009bbc 	.word	0x20009bbc
   15d3c:	20009c8d 	.word	0x20009c8d

00015d40 <z_pend_curr>:
{
   15d40:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   15d42:	480c      	ldr	r0, [pc, #48]	; (15d74 <z_pend_curr+0x34>)
   15d44:	4d0c      	ldr	r5, [pc, #48]	; (15d78 <z_pend_curr+0x38>)
   15d46:	6886      	ldr	r6, [r0, #8]
{
   15d48:	460c      	mov	r4, r1
	pending_current = _current;
   15d4a:	602e      	str	r6, [r5, #0]
{
   15d4c:	4611      	mov	r1, r2
   15d4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   15d52:	f04f 0620 	mov.w	r6, #32
   15d56:	f3ef 8511 	mrs	r5, BASEPRI
   15d5a:	f386 8812 	msr	BASEPRI_MAX, r6
   15d5e:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   15d62:	6880      	ldr	r0, [r0, #8]
   15d64:	f7ff ffa4 	bl	15cb0 <pend_locked>
	ret = arch_swap(key);
   15d68:	4620      	mov	r0, r4
}
   15d6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15d6e:	f7f5 bc4f 	b.w	b610 <arch_swap>
   15d72:	bf00      	nop
   15d74:	20009b90 	.word	0x20009b90
   15d78:	20009bbc 	.word	0x20009bbc

00015d7c <z_set_prio>:
{
   15d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15d7e:	4604      	mov	r4, r0
   15d80:	f04f 0320 	mov.w	r3, #32
   15d84:	f3ef 8611 	mrs	r6, BASEPRI
   15d88:	f383 8812 	msr	BASEPRI_MAX, r3
   15d8c:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   15d90:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   15d92:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   15d94:	06da      	lsls	r2, r3, #27
   15d96:	d119      	bne.n	15dcc <z_set_prio+0x50>
	return node->next != NULL;
   15d98:	6985      	ldr	r5, [r0, #24]
   15d9a:	b9bd      	cbnz	r5, 15dcc <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15d9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   15da0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   15da2:	f005 f813 	bl	1adcc <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   15da6:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   15da8:	4a16      	ldr	r2, [pc, #88]	; (15e04 <z_set_prio+0x88>)
   15daa:	f063 037f 	orn	r3, r3, #127	; 0x7f
   15dae:	7343      	strb	r3, [r0, #13]
   15db0:	4613      	mov	r3, r2
				thread->base.prio = prio;
   15db2:	7381      	strb	r1, [r0, #14]
   15db4:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15db8:	4298      	cmp	r0, r3
   15dba:	bf18      	it	ne
   15dbc:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   15dbe:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15dc0:	b95d      	cbnz	r5, 15dda <z_set_prio+0x5e>
	node->prev = tail;
   15dc2:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   15dc6:	6004      	str	r4, [r0, #0]
	list->tail = node;
   15dc8:	6214      	str	r4, [r2, #32]
}
   15dca:	e011      	b.n	15df0 <z_set_prio+0x74>
   15dcc:	2000      	movs	r0, #0
			thread->base.prio = prio;
   15dce:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
   15dd0:	f386 8811 	msr	BASEPRI, r6
   15dd4:	f3bf 8f6f 	isb	sy
}
   15dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   15dda:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   15dde:	42b9      	cmp	r1, r7
   15de0:	d00b      	beq.n	15dfa <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   15de2:	428f      	cmp	r7, r1
   15de4:	dd09      	ble.n	15dfa <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   15de6:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   15de8:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   15dec:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   15dee:	606c      	str	r4, [r5, #4]
			update_cache(1);
   15df0:	2001      	movs	r0, #1
   15df2:	f7ff feb9 	bl	15b68 <update_cache>
   15df6:	2001      	movs	r0, #1
   15df8:	e7ea      	b.n	15dd0 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   15dfa:	42a8      	cmp	r0, r5
   15dfc:	d0e1      	beq.n	15dc2 <z_set_prio+0x46>
   15dfe:	682d      	ldr	r5, [r5, #0]
   15e00:	e7de      	b.n	15dc0 <z_set_prio+0x44>
   15e02:	bf00      	nop
   15e04:	20009b90 	.word	0x20009b90

00015e08 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   15e08:	b949      	cbnz	r1, 15e1e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   15e0a:	f3ef 8005 	mrs	r0, IPSR
   15e0e:	b930      	cbnz	r0, 15e1e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   15e10:	4b05      	ldr	r3, [pc, #20]	; (15e28 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   15e12:	699a      	ldr	r2, [r3, #24]
   15e14:	689b      	ldr	r3, [r3, #8]
   15e16:	429a      	cmp	r2, r3
   15e18:	d001      	beq.n	15e1e <z_reschedule+0x16>
   15e1a:	f7f5 bbf9 	b.w	b610 <arch_swap>
   15e1e:	f381 8811 	msr	BASEPRI, r1
   15e22:	f3bf 8f6f 	isb	sy
}
   15e26:	4770      	bx	lr
   15e28:	20009b90 	.word	0x20009b90

00015e2c <z_sched_start>:
{
   15e2c:	b510      	push	{r4, lr}
	__asm__ volatile(
   15e2e:	f04f 0220 	mov.w	r2, #32
   15e32:	f3ef 8411 	mrs	r4, BASEPRI
   15e36:	f382 8812 	msr	BASEPRI_MAX, r2
   15e3a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   15e3e:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   15e40:	0751      	lsls	r1, r2, #29
   15e42:	d404      	bmi.n	15e4e <z_sched_start+0x22>
	__asm__ volatile(
   15e44:	f384 8811 	msr	BASEPRI, r4
   15e48:	f3bf 8f6f 	isb	sy
}
   15e4c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   15e4e:	f022 0204 	bic.w	r2, r2, #4
   15e52:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   15e54:	f7ff fee0 	bl	15c18 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   15e58:	4621      	mov	r1, r4
}
   15e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   15e5e:	4801      	ldr	r0, [pc, #4]	; (15e64 <z_sched_start+0x38>)
   15e60:	f7ff bfd2 	b.w	15e08 <z_reschedule>
   15e64:	20009c8e 	.word	0x20009c8e

00015e68 <z_impl_k_thread_suspend>:
{
   15e68:	b570      	push	{r4, r5, r6, lr}
   15e6a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   15e6c:	3018      	adds	r0, #24
   15e6e:	f005 f8cc 	bl	1b00a <z_abort_timeout>
	__asm__ volatile(
   15e72:	f04f 0320 	mov.w	r3, #32
   15e76:	f3ef 8611 	mrs	r6, BASEPRI
   15e7a:	f383 8812 	msr	BASEPRI_MAX, r3
   15e7e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   15e82:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   15e86:	7b63      	ldrb	r3, [r4, #13]
   15e88:	2a00      	cmp	r2, #0
   15e8a:	da05      	bge.n	15e98 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15e8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
   15e90:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15e92:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   15e94:	f004 ff9a 	bl	1adcc <sys_dlist_remove>
		update_cache(thread == _current);
   15e98:	4d0b      	ldr	r5, [pc, #44]	; (15ec8 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   15e9a:	7b63      	ldrb	r3, [r4, #13]
   15e9c:	68a8      	ldr	r0, [r5, #8]
   15e9e:	f043 0310 	orr.w	r3, r3, #16
   15ea2:	7363      	strb	r3, [r4, #13]
   15ea4:	1b03      	subs	r3, r0, r4
   15ea6:	4258      	negs	r0, r3
   15ea8:	4158      	adcs	r0, r3
   15eaa:	f7ff fe5d 	bl	15b68 <update_cache>
	__asm__ volatile(
   15eae:	f386 8811 	msr	BASEPRI, r6
   15eb2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   15eb6:	68ab      	ldr	r3, [r5, #8]
   15eb8:	42a3      	cmp	r3, r4
   15eba:	d103      	bne.n	15ec4 <z_impl_k_thread_suspend+0x5c>
}
   15ebc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   15ec0:	f005 b866 	b.w	1af90 <z_reschedule_unlocked>
}
   15ec4:	bd70      	pop	{r4, r5, r6, pc}
   15ec6:	bf00      	nop
   15ec8:	20009b90 	.word	0x20009b90

00015ecc <k_sched_lock>:
	__asm__ volatile(
   15ecc:	f04f 0320 	mov.w	r3, #32
   15ed0:	f3ef 8111 	mrs	r1, BASEPRI
   15ed4:	f383 8812 	msr	BASEPRI_MAX, r3
   15ed8:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   15edc:	4b04      	ldr	r3, [pc, #16]	; (15ef0 <k_sched_lock+0x24>)
   15ede:	689a      	ldr	r2, [r3, #8]
   15ee0:	7bd3      	ldrb	r3, [r2, #15]
   15ee2:	3b01      	subs	r3, #1
   15ee4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   15ee6:	f381 8811 	msr	BASEPRI, r1
   15eea:	f3bf 8f6f 	isb	sy
}
   15eee:	4770      	bx	lr
   15ef0:	20009b90 	.word	0x20009b90

00015ef4 <k_sched_unlock>:
{
   15ef4:	b510      	push	{r4, lr}
	__asm__ volatile(
   15ef6:	f04f 0320 	mov.w	r3, #32
   15efa:	f3ef 8411 	mrs	r4, BASEPRI
   15efe:	f383 8812 	msr	BASEPRI_MAX, r3
   15f02:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   15f06:	4b08      	ldr	r3, [pc, #32]	; (15f28 <k_sched_unlock+0x34>)
		update_cache(0);
   15f08:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   15f0a:	689a      	ldr	r2, [r3, #8]
   15f0c:	7bd3      	ldrb	r3, [r2, #15]
   15f0e:	3301      	adds	r3, #1
   15f10:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   15f12:	f7ff fe29 	bl	15b68 <update_cache>
	__asm__ volatile(
   15f16:	f384 8811 	msr	BASEPRI, r4
   15f1a:	f3bf 8f6f 	isb	sy
}
   15f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   15f22:	f005 b835 	b.w	1af90 <z_reschedule_unlocked>
   15f26:	bf00      	nop
   15f28:	20009b90 	.word	0x20009b90

00015f2c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   15f2c:	4b02      	ldr	r3, [pc, #8]	; (15f38 <z_sched_init+0xc>)
   15f2e:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
   15f32:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
   15f36:	4770      	bx	lr
   15f38:	20009b90 	.word	0x20009b90

00015f3c <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   15f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   15f3e:	f04f 0320 	mov.w	r3, #32
   15f42:	f3ef 8511 	mrs	r5, BASEPRI
   15f46:	f383 8812 	msr	BASEPRI_MAX, r3
   15f4a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   15f4e:	4919      	ldr	r1, [pc, #100]	; (15fb4 <z_impl_k_yield+0x78>)
   15f50:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15f52:	7b43      	ldrb	r3, [r0, #13]
   15f54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   15f58:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   15f5a:	f004 ff37 	bl	1adcc <sys_dlist_remove>
	return list->head == list;
   15f5e:	4608      	mov	r0, r1
	}
	queue_thread(_current);
   15f60:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   15f62:	7b5a      	ldrb	r2, [r3, #13]
   15f64:	f062 027f 	orn	r2, r2, #127	; 0x7f
   15f68:	735a      	strb	r2, [r3, #13]
   15f6a:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
   15f6e:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15f70:	4282      	cmp	r2, r0
   15f72:	bf08      	it	eq
   15f74:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15f76:	b922      	cbnz	r2, 15f82 <z_impl_k_yield+0x46>
	node->prev = tail;
   15f78:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   15f7c:	6023      	str	r3, [r4, #0]
	list->tail = node;
   15f7e:	620b      	str	r3, [r1, #32]
}
   15f80:	e00c      	b.n	15f9c <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   15f82:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   15f86:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   15f8a:	42be      	cmp	r6, r7
   15f8c:	d00e      	beq.n	15fac <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   15f8e:	42b7      	cmp	r7, r6
   15f90:	dd0c      	ble.n	15fac <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   15f92:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   15f94:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   15f98:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   15f9a:	6053      	str	r3, [r2, #4]
	update_cache(1);
   15f9c:	2001      	movs	r0, #1
   15f9e:	f7ff fde3 	bl	15b68 <update_cache>
   15fa2:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   15fa4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   15fa8:	f7f5 bb32 	b.w	b610 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   15fac:	42a2      	cmp	r2, r4
   15fae:	d0e3      	beq.n	15f78 <z_impl_k_yield+0x3c>
   15fb0:	6812      	ldr	r2, [r2, #0]
   15fb2:	e7e0      	b.n	15f76 <z_impl_k_yield+0x3a>
   15fb4:	20009b90 	.word	0x20009b90

00015fb8 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   15fb8:	ea50 0301 	orrs.w	r3, r0, r1
{
   15fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15fc0:	4605      	mov	r5, r0
   15fc2:	460e      	mov	r6, r1
	if (ticks == 0) {
   15fc4:	d103      	bne.n	15fce <z_tick_sleep+0x16>
	z_impl_k_yield();
   15fc6:	f7ff ffb9 	bl	15f3c <z_impl_k_yield>
		k_yield();
		return 0;
   15fca:	2000      	movs	r0, #0
   15fcc:	e02c      	b.n	16028 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   15fce:	1c83      	adds	r3, r0, #2
   15fd0:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   15fd4:	db2a      	blt.n	1602c <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   15fd6:	f005 f83e 	bl	1b056 <sys_clock_tick_get_32>
   15fda:	182c      	adds	r4, r5, r0
   15fdc:	f04f 0320 	mov.w	r3, #32
   15fe0:	f3ef 8811 	mrs	r8, BASEPRI
   15fe4:	f383 8812 	msr	BASEPRI_MAX, r3
   15fe8:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   15fec:	4f11      	ldr	r7, [pc, #68]	; (16034 <z_tick_sleep+0x7c>)
   15fee:	4b12      	ldr	r3, [pc, #72]	; (16038 <z_tick_sleep+0x80>)
   15ff0:	68b8      	ldr	r0, [r7, #8]
   15ff2:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   15ff4:	f7ff fe44 	bl	15c80 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   15ff8:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   15ffa:	4910      	ldr	r1, [pc, #64]	; (1603c <z_tick_sleep+0x84>)
   15ffc:	462a      	mov	r2, r5
   15ffe:	4633      	mov	r3, r6
   16000:	3018      	adds	r0, #24
   16002:	f000 f90f 	bl	16224 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   16006:	68ba      	ldr	r2, [r7, #8]
   16008:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1600a:	7b53      	ldrb	r3, [r2, #13]
   1600c:	f043 0310 	orr.w	r3, r3, #16
   16010:	7353      	strb	r3, [r2, #13]
   16012:	f7f5 fafd 	bl	b610 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   16016:	f005 f81e 	bl	1b056 <sys_clock_tick_get_32>
   1601a:	1a20      	subs	r0, r4, r0
   1601c:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   16020:	2801      	cmp	r0, #1
   16022:	f173 0300 	sbcs.w	r3, r3, #0
   16026:	dbd0      	blt.n	15fca <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   16028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   1602c:	f06f 0401 	mvn.w	r4, #1
   16030:	1a24      	subs	r4, r4, r0
   16032:	e7d3      	b.n	15fdc <z_tick_sleep+0x24>
   16034:	20009b90 	.word	0x20009b90
   16038:	20009bbc 	.word	0x20009bbc
   1603c:	0001aedb 	.word	0x0001aedb

00016040 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   16040:	f1b1 3fff 	cmp.w	r1, #4294967295
   16044:	bf08      	it	eq
   16046:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1604a:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1604c:	d106      	bne.n	1605c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1604e:	4b08      	ldr	r3, [pc, #32]	; (16070 <z_impl_k_sleep+0x30>)
   16050:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   16052:	f7ff ff09 	bl	15e68 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   16056:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1605a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   1605c:	f7ff ffac 	bl	15fb8 <z_tick_sleep>
   16060:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   16064:	fb80 0303 	smull	r0, r3, r0, r3
   16068:	0bc0      	lsrs	r0, r0, #15
   1606a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1606e:	e7f4      	b.n	1605a <z_impl_k_sleep+0x1a>
   16070:	20009b90 	.word	0x20009b90

00016074 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   16074:	4b01      	ldr	r3, [pc, #4]	; (1607c <z_impl_z_current_get+0x8>)
   16076:	6898      	ldr	r0, [r3, #8]
   16078:	4770      	bx	lr
   1607a:	bf00      	nop
   1607c:	20009b90 	.word	0x20009b90

00016080 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   16080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16084:	4604      	mov	r4, r0
   16086:	f04f 0320 	mov.w	r3, #32
   1608a:	f3ef 8611 	mrs	r6, BASEPRI
   1608e:	f383 8812 	msr	BASEPRI_MAX, r3
   16092:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   16096:	7b03      	ldrb	r3, [r0, #12]
   16098:	07d9      	lsls	r1, r3, #31
   1609a:	d50b      	bpl.n	160b4 <z_thread_abort+0x34>
	__asm__ volatile(
   1609c:	f386 8811 	msr	BASEPRI, r6
   160a0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   160a4:	4040      	eors	r0, r0
   160a6:	f380 8811 	msr	BASEPRI, r0
   160aa:	f04f 0004 	mov.w	r0, #4
   160ae:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   160b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   160b4:	7b43      	ldrb	r3, [r0, #13]
   160b6:	071a      	lsls	r2, r3, #28
   160b8:	d504      	bpl.n	160c4 <z_thread_abort+0x44>
   160ba:	f386 8811 	msr	BASEPRI, r6
   160be:	f3bf 8f6f 	isb	sy
   160c2:	e7f5      	b.n	160b0 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   160c4:	f023 0220 	bic.w	r2, r3, #32
   160c8:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   160cc:	09d2      	lsrs	r2, r2, #7
   160ce:	d120      	bne.n	16112 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   160d0:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   160d2:	68a3      	ldr	r3, [r4, #8]
   160d4:	b113      	cbz	r3, 160dc <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   160d6:	4620      	mov	r0, r4
   160d8:	f004 fe80 	bl	1addc <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   160dc:	f104 0018 	add.w	r0, r4, #24
   160e0:	f004 ff93 	bl	1b00a <z_abort_timeout>
   160e4:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   160e8:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   160ec:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   160ee:	42bd      	cmp	r5, r7
   160f0:	d000      	beq.n	160f4 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   160f2:	b9b5      	cbnz	r5, 16122 <z_thread_abort+0xa2>
		update_cache(1);
   160f4:	2001      	movs	r0, #1
   160f6:	f7ff fd37 	bl	15b68 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   160fa:	4b10      	ldr	r3, [pc, #64]	; (1613c <z_thread_abort+0xbc>)
   160fc:	689b      	ldr	r3, [r3, #8]
   160fe:	42a3      	cmp	r3, r4
   16100:	d1db      	bne.n	160ba <z_thread_abort+0x3a>
   16102:	f3ef 8305 	mrs	r3, IPSR
   16106:	2b00      	cmp	r3, #0
   16108:	d1d7      	bne.n	160ba <z_thread_abort+0x3a>
   1610a:	4630      	mov	r0, r6
   1610c:	f7f5 fa80 	bl	b610 <arch_swap>
	return ret;
   16110:	e7d3      	b.n	160ba <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   16112:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   16116:	f043 0308 	orr.w	r3, r3, #8
   1611a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1611c:	f004 fe56 	bl	1adcc <sys_dlist_remove>
}
   16120:	e7d7      	b.n	160d2 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   16122:	4628      	mov	r0, r5
   16124:	f004 fe5a 	bl	1addc <unpend_thread_no_timeout>
   16128:	f105 0018 	add.w	r0, r5, #24
   1612c:	f004 ff6d 	bl	1b00a <z_abort_timeout>
		ready_thread(thread);
   16130:	4628      	mov	r0, r5
   16132:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   16136:	f7ff fd6f 	bl	15c18 <ready_thread>
   1613a:	e7d7      	b.n	160ec <z_thread_abort+0x6c>
   1613c:	20009b90 	.word	0x20009b90

00016140 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   16140:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   16142:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   16146:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   16148:	e9cd 6700 	strd	r6, r7, [sp]
   1614c:	f7ff fdf8 	bl	15d40 <z_pend_curr>

	if (data != NULL) {
   16150:	b11c      	cbz	r4, 1615a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   16152:	4b03      	ldr	r3, [pc, #12]	; (16160 <z_sched_wait+0x20>)
   16154:	689b      	ldr	r3, [r3, #8]
   16156:	695b      	ldr	r3, [r3, #20]
   16158:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1615a:	b002      	add	sp, #8
   1615c:	bdd0      	pop	{r4, r6, r7, pc}
   1615e:	bf00      	nop
   16160:	20009b90 	.word	0x20009b90

00016164 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   16164:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   16166:	4806      	ldr	r0, [pc, #24]	; (16180 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   16168:	4a06      	ldr	r2, [pc, #24]	; (16184 <z_data_copy+0x20>)
   1616a:	4907      	ldr	r1, [pc, #28]	; (16188 <z_data_copy+0x24>)
   1616c:	1a12      	subs	r2, r2, r0
   1616e:	f004 fba6 	bl	1a8be <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   16172:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   16176:	4a05      	ldr	r2, [pc, #20]	; (1618c <z_data_copy+0x28>)
   16178:	4905      	ldr	r1, [pc, #20]	; (16190 <z_data_copy+0x2c>)
   1617a:	4806      	ldr	r0, [pc, #24]	; (16194 <z_data_copy+0x30>)
   1617c:	f004 bb9f 	b.w	1a8be <z_early_memcpy>
   16180:	20008000 	.word	0x20008000
   16184:	200087ec 	.word	0x200087ec
   16188:	0001e720 	.word	0x0001e720
   1618c:	00000000 	.word	0x00000000
   16190:	0001e720 	.word	0x0001e720
   16194:	20008000 	.word	0x20008000

00016198 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   16198:	4b03      	ldr	r3, [pc, #12]	; (161a8 <elapsed+0x10>)
   1619a:	681b      	ldr	r3, [r3, #0]
   1619c:	b90b      	cbnz	r3, 161a2 <elapsed+0xa>
   1619e:	f7fd b9cd 	b.w	1353c <sys_clock_elapsed>
}
   161a2:	2000      	movs	r0, #0
   161a4:	4770      	bx	lr
   161a6:	bf00      	nop
   161a8:	20009bc8 	.word	0x20009bc8

000161ac <next_timeout>:

static int32_t next_timeout(void)
{
   161ac:	b510      	push	{r4, lr}
	return list->head == list;
   161ae:	4b0e      	ldr	r3, [pc, #56]	; (161e8 <next_timeout+0x3c>)
   161b0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   161b2:	429c      	cmp	r4, r3
   161b4:	d104      	bne.n	161c0 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   161b6:	f7ff ffef 	bl	16198 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   161ba:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
   161be:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   161c0:	f7ff ffea 	bl	16198 <elapsed>
	if ((to == NULL) ||
   161c4:	2c00      	cmp	r4, #0
   161c6:	d0f8      	beq.n	161ba <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   161c8:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   161cc:	1a1b      	subs	r3, r3, r0
   161ce:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   161d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   161d6:	f172 0100 	sbcs.w	r1, r2, #0
   161da:	daee      	bge.n	161ba <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   161dc:	2a00      	cmp	r2, #0
   161de:	bfac      	ite	ge
   161e0:	4618      	movge	r0, r3
   161e2:	2000      	movlt	r0, #0
	return ret;
   161e4:	e7eb      	b.n	161be <next_timeout+0x12>
   161e6:	bf00      	nop
   161e8:	20008478 	.word	0x20008478

000161ec <remove_timeout>:
{
   161ec:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   161ee:	b170      	cbz	r0, 1620e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   161f0:	4b0b      	ldr	r3, [pc, #44]	; (16220 <remove_timeout+0x34>)
   161f2:	685b      	ldr	r3, [r3, #4]
   161f4:	4298      	cmp	r0, r3
   161f6:	d00a      	beq.n	1620e <remove_timeout+0x22>
   161f8:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   161fa:	b143      	cbz	r3, 1620e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   161fc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   16200:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   16204:	1912      	adds	r2, r2, r4
   16206:	eb41 0105 	adc.w	r1, r1, r5
   1620a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   1620e:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   16212:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   16214:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   16216:	2300      	movs	r3, #0
	node->prev = NULL;
   16218:	e9c0 3300 	strd	r3, r3, [r0]
}
   1621c:	bd30      	pop	{r4, r5, pc}
   1621e:	bf00      	nop
   16220:	20008478 	.word	0x20008478

00016224 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   16224:	f1b3 3fff 	cmp.w	r3, #4294967295
   16228:	bf08      	it	eq
   1622a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1622e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16230:	4604      	mov	r4, r0
   16232:	461d      	mov	r5, r3
   16234:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   16236:	d05c      	beq.n	162f2 <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   16238:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   1623a:	f04f 0320 	mov.w	r3, #32
   1623e:	f3ef 8711 	mrs	r7, BASEPRI
   16242:	f383 8812 	msr	BASEPRI_MAX, r3
   16246:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1624a:	3201      	adds	r2, #1
   1624c:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   16250:	da24      	bge.n	1629c <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   16252:	f06f 0301 	mvn.w	r3, #1
   16256:	492c      	ldr	r1, [pc, #176]	; (16308 <z_add_timeout+0xe4>)
   16258:	e9d1 2000 	ldrd	r2, r0, [r1]
   1625c:	1a9b      	subs	r3, r3, r2
   1625e:	f04f 32ff 	mov.w	r2, #4294967295
   16262:	eb62 0000 	sbc.w	r0, r2, r0
   16266:	1b9e      	subs	r6, r3, r6
   16268:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   1626c:	2e01      	cmp	r6, #1
   1626e:	f170 0300 	sbcs.w	r3, r0, #0
   16272:	da01      	bge.n	16278 <z_add_timeout+0x54>
   16274:	2601      	movs	r6, #1
   16276:	2000      	movs	r0, #0
   16278:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   1627c:	4e23      	ldr	r6, [pc, #140]	; (1630c <z_add_timeout+0xe8>)
   1627e:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   16282:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16284:	45b4      	cmp	ip, r6
   16286:	bf08      	it	eq
   16288:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   1628c:	f1bc 0f00 	cmp.w	ip, #0
   16290:	d10d      	bne.n	162ae <z_add_timeout+0x8a>
	node->prev = tail;
   16292:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   16296:	602c      	str	r4, [r5, #0]
	list->tail = node;
   16298:	6074      	str	r4, [r6, #4]
}
   1629a:	e01c      	b.n	162d6 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   1629c:	f7ff ff7c 	bl	16198 <elapsed>
   162a0:	3601      	adds	r6, #1
   162a2:	f145 0500 	adc.w	r5, r5, #0
   162a6:	1836      	adds	r6, r6, r0
   162a8:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   162ac:	e7e4      	b.n	16278 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   162ae:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   162b2:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   162b6:	4293      	cmp	r3, r2
   162b8:	eb71 0e00 	sbcs.w	lr, r1, r0
   162bc:	da1a      	bge.n	162f4 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
   162be:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   162c0:	f8dc 3004 	ldr.w	r3, [ip, #4]
   162c4:	eb60 0001 	sbc.w	r0, r0, r1
   162c8:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   162cc:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   162d0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   162d2:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   162d6:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   162d8:	42b3      	cmp	r3, r6
   162da:	d006      	beq.n	162ea <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   162dc:	429c      	cmp	r4, r3
   162de:	d104      	bne.n	162ea <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
   162e0:	f7ff ff64 	bl	161ac <next_timeout>
   162e4:	2100      	movs	r1, #0
   162e6:	f7fd f8f7 	bl	134d8 <sys_clock_set_timeout>
	__asm__ volatile(
   162ea:	f387 8811 	msr	BASEPRI, r7
   162ee:	f3bf 8f6f 	isb	sy
		}
	}
}
   162f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   162f4:	1a9b      	subs	r3, r3, r2
   162f6:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   162fa:	45ac      	cmp	ip, r5
   162fc:	e9c4 3104 	strd	r3, r1, [r4, #16]
   16300:	d0c7      	beq.n	16292 <z_add_timeout+0x6e>
   16302:	f8dc c000 	ldr.w	ip, [ip]
   16306:	e7c1      	b.n	1628c <z_add_timeout+0x68>
   16308:	20009778 	.word	0x20009778
   1630c:	20008478 	.word	0x20008478

00016310 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
   16310:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
   16314:	f04f 0320 	mov.w	r3, #32
   16318:	f3ef 8c11 	mrs	ip, BASEPRI
   1631c:	f383 8812 	msr	BASEPRI_MAX, r3
   16320:	f3bf 8f6f 	isb	sy
	return list->head == list;
   16324:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 163d8 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   16328:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 163dc <sys_clock_announce+0xcc>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
   1632c:	2400      	movs	r4, #0
	announce_remaining = ticks;
   1632e:	f8c9 0000 	str.w	r0, [r9]
   16332:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
   16336:	2500      	movs	r5, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16338:	4550      	cmp	r0, sl
   1633a:	bf08      	it	eq
   1633c:	2000      	moveq	r0, #0
		curr_tick += dt;
   1633e:	4f28      	ldr	r7, [pc, #160]	; (163e0 <sys_clock_announce+0xd0>)
   16340:	46e0      	mov	r8, ip
   16342:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
   16346:	f8d9 3000 	ldr.w	r3, [r9]
   1634a:	b380      	cbz	r0, 163ae <sys_clock_announce+0x9e>
   1634c:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
   16350:	ea4f 7ee3 	mov.w	lr, r3, asr #31
   16354:	42b3      	cmp	r3, r6
   16356:	eb7e 0b0c 	sbcs.w	fp, lr, ip
   1635a:	da05      	bge.n	16368 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
   1635c:	1af6      	subs	r6, r6, r3
   1635e:	eb6c 040e 	sbc.w	r4, ip, lr
   16362:	e9c0 6404 	strd	r6, r4, [r0, #16]
   16366:	e022      	b.n	163ae <sys_clock_announce+0x9e>
		curr_tick += dt;
   16368:	18b2      	adds	r2, r6, r2
   1636a:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
   1636e:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
   16372:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
   16376:	f7ff ff39 	bl	161ec <remove_timeout>
	__asm__ volatile(
   1637a:	f388 8811 	msr	BASEPRI, r8
   1637e:	f3bf 8f6f 	isb	sy
		t->fn(t);
   16382:	6883      	ldr	r3, [r0, #8]
   16384:	4798      	blx	r3
	__asm__ volatile(
   16386:	f04f 0320 	mov.w	r3, #32
   1638a:	f3ef 8811 	mrs	r8, BASEPRI
   1638e:	f383 8812 	msr	BASEPRI_MAX, r3
   16392:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   16396:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
   1639a:	f8da 0000 	ldr.w	r0, [sl]
   1639e:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
   163a0:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
   163a2:	46c4      	mov	ip, r8
   163a4:	f8c9 3000 	str.w	r3, [r9]
   163a8:	d1ca      	bne.n	16340 <sys_clock_announce+0x30>
		curr_tick += dt;
   163aa:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   163ae:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   163b0:	189a      	adds	r2, r3, r2
   163b2:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
   163b6:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
   163ba:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
   163be:	f7ff fef5 	bl	161ac <next_timeout>
   163c2:	4621      	mov	r1, r4
   163c4:	f7fd f888 	bl	134d8 <sys_clock_set_timeout>
	__asm__ volatile(
   163c8:	f388 8811 	msr	BASEPRI, r8
   163cc:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
   163d0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
   163d4:	f7ff bc84 	b.w	15ce0 <z_time_slice>
   163d8:	20008478 	.word	0x20008478
   163dc:	20009bc8 	.word	0x20009bc8
   163e0:	20009778 	.word	0x20009778

000163e4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   163e4:	b510      	push	{r4, lr}
	__asm__ volatile(
   163e6:	f04f 0320 	mov.w	r3, #32
   163ea:	f3ef 8411 	mrs	r4, BASEPRI
   163ee:	f383 8812 	msr	BASEPRI_MAX, r3
   163f2:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   163f6:	f7ff fecf 	bl	16198 <elapsed>
   163fa:	4603      	mov	r3, r0
   163fc:	4a05      	ldr	r2, [pc, #20]	; (16414 <sys_clock_tick_get+0x30>)
   163fe:	e9d2 0100 	ldrd	r0, r1, [r2]
   16402:	1818      	adds	r0, r3, r0
   16404:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   16408:	f384 8811 	msr	BASEPRI, r4
   1640c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   16410:	bd10      	pop	{r4, pc}
   16412:	bf00      	nop
   16414:	20009778 	.word	0x20009778

00016418 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   16418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1641a:	4604      	mov	r4, r0
	__asm__ volatile(
   1641c:	f04f 0320 	mov.w	r3, #32
   16420:	f3ef 8711 	mrs	r7, BASEPRI
   16424:	f383 8812 	msr	BASEPRI_MAX, r3
   16428:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
   1642c:	6802      	ldr	r2, [r0, #0]
   1642e:	b122      	cbz	r2, 1643a <z_timer_expiration_handler+0x22>
	__asm__ volatile(
   16430:	f387 8811 	msr	BASEPRI, r7
   16434:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   16438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1643a:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
   1643e:	1c58      	adds	r0, r3, #1
   16440:	f146 0100 	adc.w	r1, r6, #0
   16444:	2802      	cmp	r0, #2
   16446:	f171 0100 	sbcs.w	r1, r1, #0
   1644a:	d327      	bcc.n	1649c <z_timer_expiration_handler+0x84>
		next.ticks = MAX(next.ticks - 1, 0);
   1644c:	2b01      	cmp	r3, #1
   1644e:	f176 0100 	sbcs.w	r1, r6, #0
   16452:	bfbc      	itt	lt
   16454:	2301      	movlt	r3, #1
   16456:	4616      	movlt	r6, r2
   16458:	1e5d      	subs	r5, r3, #1
   1645a:	f146 36ff 	adc.w	r6, r6, #4294967295
	return z_impl_k_uptime_ticks();
   1645e:	f004 fdfe 	bl	1b05e <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   16462:	3001      	adds	r0, #1
   16464:	f141 0100 	adc.w	r1, r1, #0
   16468:	1940      	adds	r0, r0, r5
   1646a:	eb46 0101 	adc.w	r1, r6, r1
   1646e:	2801      	cmp	r0, #1
   16470:	f171 0100 	sbcs.w	r1, r1, #0
   16474:	db3a      	blt.n	164ec <z_timer_expiration_handler+0xd4>
   16476:	f004 fdf2 	bl	1b05e <z_impl_k_uptime_ticks>
   1647a:	3001      	adds	r0, #1
   1647c:	f141 0100 	adc.w	r1, r1, #0
   16480:	f06f 0201 	mvn.w	r2, #1
   16484:	1940      	adds	r0, r0, r5
   16486:	eb46 0301 	adc.w	r3, r6, r1
   1648a:	f04f 31ff 	mov.w	r1, #4294967295
   1648e:	1a12      	subs	r2, r2, r0
   16490:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   16494:	4620      	mov	r0, r4
   16496:	4918      	ldr	r1, [pc, #96]	; (164f8 <z_timer_expiration_handler+0xe0>)
   16498:	f7ff fec4 	bl	16224 <z_add_timeout>
	timer->status += 1U;
   1649c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1649e:	3301      	adds	r3, #1
   164a0:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
   164a2:	6a23      	ldr	r3, [r4, #32]
   164a4:	b173      	cbz	r3, 164c4 <z_timer_expiration_handler+0xac>
   164a6:	f387 8811 	msr	BASEPRI, r7
   164aa:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
   164ae:	4620      	mov	r0, r4
   164b0:	6a23      	ldr	r3, [r4, #32]
   164b2:	4798      	blx	r3
	__asm__ volatile(
   164b4:	f04f 0320 	mov.w	r3, #32
   164b8:	f3ef 8711 	mrs	r7, BASEPRI
   164bc:	f383 8812 	msr	BASEPRI_MAX, r3
   164c0:	f3bf 8f6f 	isb	sy
	return list->head == list;
   164c4:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   164c8:	42a5      	cmp	r5, r4
   164ca:	d0b1      	beq.n	16430 <z_timer_expiration_handler+0x18>
	if (thread == NULL) {
   164cc:	2d00      	cmp	r5, #0
   164ce:	d0af      	beq.n	16430 <z_timer_expiration_handler+0x18>
	z_unpend_thread_no_timeout(thread);
   164d0:	4628      	mov	r0, r5
   164d2:	f004 fcce 	bl	1ae72 <z_unpend_thread_no_timeout>
   164d6:	2300      	movs	r3, #0
   164d8:	67eb      	str	r3, [r5, #124]	; 0x7c
	__asm__ volatile(
   164da:	f387 8811 	msr	BASEPRI, r7
   164de:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   164e2:	4628      	mov	r0, r5
}
   164e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   164e8:	f004 bcb3 	b.w	1ae52 <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   164ec:	f06f 0201 	mvn.w	r2, #1
   164f0:	f04f 33ff 	mov.w	r3, #4294967295
   164f4:	e7ce      	b.n	16494 <z_timer_expiration_handler+0x7c>
   164f6:	bf00      	nop
   164f8:	00016419 	.word	0x00016419

000164fc <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   164fc:	f1b3 3fff 	cmp.w	r3, #4294967295
   16500:	bf08      	it	eq
   16502:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   16506:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1650a:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   1650e:	4605      	mov	r5, r0
   16510:	461c      	mov	r4, r3
   16512:	4691      	mov	r9, r2
   16514:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   16516:	d01c      	beq.n	16552 <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
   16518:	1c53      	adds	r3, r2, #1
   1651a:	f174 33ff 	sbcs.w	r3, r4, #4294967295
   1651e:	db09      	blt.n	16534 <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
   16520:	2a01      	cmp	r2, #1
   16522:	f174 0300 	sbcs.w	r3, r4, #0
   16526:	bfbc      	itt	lt
   16528:	2201      	movlt	r2, #1
   1652a:	2400      	movlt	r4, #0
   1652c:	f112 39ff 	adds.w	r9, r2, #4294967295
   16530:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   16534:	4628      	mov	r0, r5
   16536:	f004 fd68 	bl	1b00a <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1653a:	2300      	movs	r3, #0
	timer->period = period;
   1653c:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
   16540:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   16542:	464a      	mov	r2, r9
   16544:	4643      	mov	r3, r8
   16546:	4628      	mov	r0, r5
		     duration);
}
   16548:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1654c:	4902      	ldr	r1, [pc, #8]	; (16558 <z_impl_k_timer_start+0x5c>)
   1654e:	f7ff be69 	b.w	16224 <z_add_timeout>
}
   16552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16556:	bf00      	nop
   16558:	00016419 	.word	0x00016419

0001655c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1655c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   16560:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   16562:	4b29      	ldr	r3, [pc, #164]	; (16608 <z_impl_k_poll+0xac>)
{
   16564:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   16566:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   16568:	2301      	movs	r3, #1
   1656a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   1656e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   16572:	ea52 0305 	orrs.w	r3, r2, r5
   16576:	bf0c      	ite	eq
   16578:	2301      	moveq	r3, #1
   1657a:	2300      	movne	r3, #0
   1657c:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   16580:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   16582:	f004 fdee 	bl	1b162 <register_events>
   16586:	4681      	mov	r9, r0
	__asm__ volatile(
   16588:	f04f 0320 	mov.w	r3, #32
   1658c:	f3ef 8a11 	mrs	sl, BASEPRI
   16590:	f383 8812 	msr	BASEPRI_MAX, r3
   16594:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   16598:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   1659c:	b964      	cbnz	r4, 165b8 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1659e:	4601      	mov	r1, r0
   165a0:	4652      	mov	r2, sl
   165a2:	4640      	mov	r0, r8
   165a4:	f004 feae 	bl	1b304 <clear_event_registrations>
	__asm__ volatile(
   165a8:	f38a 8811 	msr	BASEPRI, sl
   165ac:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   165b0:	4620      	mov	r0, r4
   165b2:	b002      	add	sp, #8
   165b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   165b8:	2300      	movs	r3, #0
   165ba:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   165be:	ea56 0305 	orrs.w	r3, r6, r5
   165c2:	d106      	bne.n	165d2 <z_impl_k_poll+0x76>
   165c4:	f38a 8811 	msr	BASEPRI, sl
   165c8:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   165cc:	f06f 040a 	mvn.w	r4, #10
   165d0:	e7ee      	b.n	165b0 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   165d2:	4651      	mov	r1, sl
   165d4:	e9cd 6500 	strd	r6, r5, [sp]
   165d8:	4a0c      	ldr	r2, [pc, #48]	; (1660c <z_impl_k_poll+0xb0>)
   165da:	480d      	ldr	r0, [pc, #52]	; (16610 <z_impl_k_poll+0xb4>)
   165dc:	f7ff fbb0 	bl	15d40 <z_pend_curr>
   165e0:	4604      	mov	r4, r0
	__asm__ volatile(
   165e2:	f04f 0320 	mov.w	r3, #32
   165e6:	f3ef 8511 	mrs	r5, BASEPRI
   165ea:	f383 8812 	msr	BASEPRI_MAX, r3
   165ee:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   165f2:	462a      	mov	r2, r5
   165f4:	4649      	mov	r1, r9
   165f6:	4640      	mov	r0, r8
   165f8:	f004 fe84 	bl	1b304 <clear_event_registrations>
	__asm__ volatile(
   165fc:	f385 8811 	msr	BASEPRI, r5
   16600:	f3bf 8f6f 	isb	sy
	return swap_rc;
   16604:	e7d4      	b.n	165b0 <z_impl_k_poll+0x54>
   16606:	bf00      	nop
   16608:	20009b90 	.word	0x20009b90
   1660c:	20008480 	.word	0x20008480
   16610:	20009c8e 	.word	0x20009c8e

00016614 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   16614:	b538      	push	{r3, r4, r5, lr}
   16616:	4603      	mov	r3, r0
	__asm__ volatile(
   16618:	f04f 0220 	mov.w	r2, #32
   1661c:	f3ef 8511 	mrs	r5, BASEPRI
   16620:	f382 8812 	msr	BASEPRI_MAX, r2
   16624:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   16628:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1662a:	2101      	movs	r1, #1
   1662c:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1662e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   16630:	4283      	cmp	r3, r0
   16632:	d106      	bne.n	16642 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   16634:	f385 8811 	msr	BASEPRI, r5
   16638:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   1663c:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   1663e:	4620      	mov	r0, r4
   16640:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   16642:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   16646:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   16648:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1664a:	2300      	movs	r3, #0
	node->prev = NULL;
   1664c:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   16650:	f004 fdfe 	bl	1b250 <signal_poll_event>
	z_reschedule(&lock, key);
   16654:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   16656:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   16658:	4801      	ldr	r0, [pc, #4]	; (16660 <z_impl_k_poll_signal_raise+0x4c>)
   1665a:	f7ff fbd5 	bl	15e08 <z_reschedule>
	return rc;
   1665e:	e7ee      	b.n	1663e <z_impl_k_poll_signal_raise+0x2a>
   16660:	20009c8e 	.word	0x20009c8e

00016664 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   16664:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   16666:	4601      	mov	r1, r0
   16668:	4801      	ldr	r0, [pc, #4]	; (16670 <k_aligned_alloc+0xc>)
   1666a:	f004 be9c 	b.w	1b3a6 <z_heap_aligned_alloc>
   1666e:	bf00      	nop
   16670:	20008630 	.word	0x20008630

00016674 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   16674:	4b01      	ldr	r3, [pc, #4]	; (1667c <k_thread_system_pool_assign+0x8>)
   16676:	6743      	str	r3, [r0, #116]	; 0x74
}
   16678:	4770      	bx	lr
   1667a:	bf00      	nop
   1667c:	20008630 	.word	0x20008630

00016680 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   16680:	b538      	push	{r3, r4, r5, lr}
   16682:	4604      	mov	r4, r0
   16684:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   16686:	f004 f9cd 	bl	1aa24 <k_is_in_isr>
   1668a:	b920      	cbnz	r0, 16696 <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1668c:	4b06      	ldr	r3, [pc, #24]	; (166a8 <z_thread_aligned_alloc+0x28>)
   1668e:	689b      	ldr	r3, [r3, #8]
   16690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   16692:	b90b      	cbnz	r3, 16698 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   16694:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   16696:	4b05      	ldr	r3, [pc, #20]	; (166ac <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   16698:	462a      	mov	r2, r5
   1669a:	4621      	mov	r1, r4
   1669c:	4618      	mov	r0, r3
}
   1669e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   166a2:	f004 be80 	b.w	1b3a6 <z_heap_aligned_alloc>
   166a6:	bf00      	nop
   166a8:	20009b90 	.word	0x20009b90
   166ac:	20008630 	.word	0x20008630

000166b0 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   166b0:	4801      	ldr	r0, [pc, #4]	; (166b8 <boot_banner+0x8>)
   166b2:	f000 b875 	b.w	167a0 <printk>
   166b6:	bf00      	nop
   166b8:	0001e6ee 	.word	0x0001e6ee

000166bc <app_led_cb>:
{
   166bc:	4601      	mov	r1, r0
	dk_set_led(USER_LED, led_state);
   166be:	2002      	movs	r0, #2
   166c0:	f7fd b9a4 	b.w	13a0c <dk_set_led>

000166c4 <indicate_cb>:
}
   166c4:	4770      	bx	lr

000166c6 <cbpprintf_external>:
{
   166c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   166ca:	4606      	mov	r6, r0
   166cc:	460d      	mov	r5, r1
   166ce:	4617      	mov	r7, r2
	if (buf == NULL) {
   166d0:	4698      	mov	r8, r3
   166d2:	b32b      	cbz	r3, 16720 <cbpprintf_external+0x5a>
	for (i = 0; i < s_nbr; i++) {
   166d4:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
   166d8:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   166dc:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   166e0:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   166e2:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   166e4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   166e8:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   166ec:	441c      	add	r4, r3
   166ee:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   166f0:	45ca      	cmp	sl, r9
   166f2:	d309      	bcc.n	16708 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   166f4:	4639      	mov	r1, r7
   166f6:	4630      	mov	r0, r6
   166f8:	46ac      	mov	ip, r5
   166fa:	f8d8 2004 	ldr.w	r2, [r8, #4]
   166fe:	f108 0308 	add.w	r3, r8, #8
}
   16702:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   16706:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   16708:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
   1670c:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
   16710:	4620      	mov	r0, r4
		*ps = s;
   16712:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   16716:	f001 fd0b 	bl	18130 <strlen>
   1671a:	3001      	adds	r0, #1
   1671c:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   1671e:	e7e7      	b.n	166f0 <cbpprintf_external+0x2a>
}
   16720:	f06f 0015 	mvn.w	r0, #21
   16724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00016728 <is_ptr>:
{
   16728:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   1672a:	2500      	movs	r5, #0
{
   1672c:	4602      	mov	r2, r0
	bool mod = false;
   1672e:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   16730:	4614      	mov	r4, r2
   16732:	f814 3b01 	ldrb.w	r3, [r4], #1
   16736:	b90b      	cbnz	r3, 1673c <is_ptr+0x14>
					return false;
   16738:	4618      	mov	r0, r3
   1673a:	e009      	b.n	16750 <is_ptr+0x28>
		if (mod) {
   1673c:	b198      	cbz	r0, 16766 <is_ptr+0x3e>
			if (cnt == n) {
   1673e:	428d      	cmp	r5, r1
   16740:	d107      	bne.n	16752 <is_ptr+0x2a>
				if (c == 'p') {
   16742:	2b70      	cmp	r3, #112	; 0x70
   16744:	d004      	beq.n	16750 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   16746:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   1674a:	2a3a      	cmp	r2, #58	; 0x3a
   1674c:	d80b      	bhi.n	16766 <is_ptr+0x3e>
					return false;
   1674e:	2000      	movs	r0, #0
}
   16750:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   16752:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   16756:	2e3a      	cmp	r6, #58	; 0x3a
   16758:	d805      	bhi.n	16766 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   1675a:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   1675c:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   1675e:	1c94      	adds	r4, r2, #2
   16760:	2b00      	cmp	r3, #0
   16762:	d0e9      	beq.n	16738 <is_ptr+0x10>
   16764:	2000      	movs	r0, #0
		if (c == '%') {
   16766:	2b25      	cmp	r3, #37	; 0x25
	while ((c = *fmt++) != '\0') {
   16768:	4622      	mov	r2, r4
			mod = !mod;
   1676a:	bf08      	it	eq
   1676c:	f080 0001 	eoreq.w	r0, r0, #1
   16770:	e7de      	b.n	16730 <is_ptr+0x8>

00016772 <arch_printk_char_out>:
}
   16772:	2000      	movs	r0, #0
   16774:	4770      	bx	lr

00016776 <str_out>:
{
   16776:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   16778:	688a      	ldr	r2, [r1, #8]
   1677a:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   1677c:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1677e:	b114      	cbz	r4, 16786 <str_out+0x10>
   16780:	684b      	ldr	r3, [r1, #4]
   16782:	4293      	cmp	r3, r2
   16784:	dc01      	bgt.n	1678a <str_out+0x14>
		ctx->count++;
   16786:	608d      	str	r5, [r1, #8]
}
   16788:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1678a:	3b01      	subs	r3, #1
   1678c:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1678e:	bf08      	it	eq
   16790:	2200      	moveq	r2, #0
   16792:	608d      	str	r5, [r1, #8]
   16794:	bf0c      	ite	eq
   16796:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   16798:	54a0      	strbne	r0, [r4, r2]
   1679a:	e7f5      	b.n	16788 <str_out+0x12>

0001679c <vprintk>:
		z_log_vprintk(fmt, ap);
   1679c:	f000 bf95 	b.w	176ca <z_log_vprintk>

000167a0 <printk>:
{
   167a0:	b40f      	push	{r0, r1, r2, r3}
   167a2:	b507      	push	{r0, r1, r2, lr}
   167a4:	a904      	add	r1, sp, #16
   167a6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   167aa:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   167ac:	f000 ff8d 	bl	176ca <z_log_vprintk>
}
   167b0:	b003      	add	sp, #12
   167b2:	f85d eb04 	ldr.w	lr, [sp], #4
   167b6:	b004      	add	sp, #16
   167b8:	4770      	bx	lr

000167ba <snprintk>:
{
   167ba:	b40c      	push	{r2, r3}
   167bc:	b507      	push	{r0, r1, r2, lr}
   167be:	ab04      	add	r3, sp, #16
   167c0:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   167c4:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   167c6:	f7f2 fc57 	bl	9078 <vsnprintk>
}
   167ca:	b003      	add	sp, #12
   167cc:	f85d eb04 	ldr.w	lr, [sp], #4
   167d0:	b002      	add	sp, #8
   167d2:	4770      	bx	lr

000167d4 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   167d4:	4604      	mov	r4, r0
   167d6:	b508      	push	{r3, lr}
   167d8:	4608      	mov	r0, r1
   167da:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   167dc:	461a      	mov	r2, r3
   167de:	47a0      	blx	r4
	return z_impl_z_current_get();
   167e0:	f7ff fc48 	bl	16074 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   167e4:	f7f5 fb5e 	bl	bea4 <z_impl_k_thread_abort>

000167e8 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   167e8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   167ec:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   167ee:	0840      	lsrs	r0, r0, #1
   167f0:	4770      	bx	lr

000167f2 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   167f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   167f4:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   167f6:	f7ff fff7 	bl	167e8 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   167fa:	fab0 f080 	clz	r0, r0
   167fe:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   16802:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   16806:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   1680a:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   1680c:	1d17      	adds	r7, r2, #4
{
   1680e:	460c      	mov	r4, r1
   16810:	3206      	adds	r2, #6
   16812:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   16814:	b956      	cbnz	r6, 1682c <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   16816:	2101      	movs	r1, #1
   16818:	fa01 f000 	lsl.w	r0, r1, r0
   1681c:	68d9      	ldr	r1, [r3, #12]
   1681e:	4301      	orrs	r1, r0
   16820:	60d9      	str	r1, [r3, #12]
		b->next = c;
   16822:	f8cc 4010 	str.w	r4, [ip, #16]
   16826:	53dd      	strh	r5, [r3, r7]
   16828:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   1682a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   1682c:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   1682e:	3104      	adds	r1, #4
   16830:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   16832:	53d8      	strh	r0, [r3, r7]
   16834:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   16838:	529e      	strh	r6, [r3, r2]
   1683a:	80c5      	strh	r5, [r0, #6]
   1683c:	525d      	strh	r5, [r3, r1]
   1683e:	e7f4      	b.n	1682a <free_list_add+0x38>

00016840 <free_list_remove_bidx>:
{
   16840:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   16842:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   16846:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   16848:	4299      	cmp	r1, r3
   1684a:	f102 0104 	add.w	r1, r2, #4
   1684e:	d10a      	bne.n	16866 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   16850:	2301      	movs	r3, #1
   16852:	fa03 f202 	lsl.w	r2, r3, r2
   16856:	68c3      	ldr	r3, [r0, #12]
   16858:	ea23 0302 	bic.w	r3, r3, r2
   1685c:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1685e:	2300      	movs	r3, #0
   16860:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   16864:	bd10      	pop	{r4, pc}
   16866:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   16868:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1686c:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   16870:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   16874:	80cb      	strh	r3, [r1, #6]
   16876:	8082      	strh	r2, [r0, #4]
}
   16878:	e7f4      	b.n	16864 <free_list_remove_bidx+0x24>

0001687a <free_list_remove>:
{
   1687a:	b508      	push	{r3, lr}
   1687c:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   1687e:	f7ff ffb3 	bl	167e8 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   16882:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   16886:	4618      	mov	r0, r3
}
   16888:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   1688c:	f1c2 021f 	rsb	r2, r2, #31
   16890:	f7ff bfd6 	b.w	16840 <free_list_remove_bidx>

00016894 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   16894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16898:	fab1 f581 	clz	r5, r1
   1689c:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   168a0:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   168a4:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   168a8:	4603      	mov	r3, r0
   168aa:	460e      	mov	r6, r1
	if (b->next) {
   168ac:	b1c2      	cbz	r2, 168e0 <alloc_chunk+0x4c>
   168ae:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   168b0:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   168b4:	4618      	mov	r0, r3
   168b6:	4621      	mov	r1, r4
   168b8:	f7ff ff96 	bl	167e8 <chunk_size>
   168bc:	42b0      	cmp	r0, r6
   168be:	d306      	bcc.n	168ce <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   168c0:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   168c2:	4618      	mov	r0, r3
   168c4:	f7ff ffbc 	bl	16840 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   168c8:	4620      	mov	r0, r4
   168ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   168ce:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   168d2:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   168d4:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   168d6:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   168da:	d001      	beq.n	168e0 <alloc_chunk+0x4c>
   168dc:	4282      	cmp	r2, r0
   168de:	d1e7      	bne.n	168b0 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   168e0:	f04f 34ff 	mov.w	r4, #4294967295
   168e4:	f1c5 0220 	rsb	r2, r5, #32
   168e8:	4094      	lsls	r4, r2
   168ea:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   168ec:	4014      	ands	r4, r2
   168ee:	d0eb      	beq.n	168c8 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   168f0:	fa94 f2a4 	rbit	r2, r4
   168f4:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   168f8:	1d11      	adds	r1, r2, #4
   168fa:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   168fe:	4621      	mov	r1, r4
   16900:	e7df      	b.n	168c2 <alloc_chunk+0x2e>

00016902 <merge_chunks>:
{
   16902:	b538      	push	{r3, r4, r5, lr}
   16904:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   16906:	f7ff ff6f 	bl	167e8 <chunk_size>
{
   1690a:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1690c:	4604      	mov	r4, r0
   1690e:	4611      	mov	r1, r2
   16910:	4618      	mov	r0, r3
   16912:	f7ff ff69 	bl	167e8 <chunk_size>
   16916:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   16918:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   1691a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1691e:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   16920:	4618      	mov	r0, r3
   16922:	f7ff ff61 	bl	167e8 <chunk_size>
	void *cmem = &buf[c];
   16926:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   16928:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   1692c:	bd38      	pop	{r3, r4, r5, pc}

0001692e <split_chunks>:
{
   1692e:	b538      	push	{r3, r4, r5, lr}
   16930:	460c      	mov	r4, r1
   16932:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   16934:	f7ff ff58 	bl	167e8 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   16938:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   1693a:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   1693c:	4405      	add	r5, r0
   1693e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   16942:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   16944:	8060      	strh	r0, [r4, #2]
   16946:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1694a:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   1694c:	8044      	strh	r4, [r0, #2]
   1694e:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   16952:	4618      	mov	r0, r3
   16954:	4611      	mov	r1, r2
   16956:	f7ff ff47 	bl	167e8 <chunk_size>
	void *cmem = &buf[c];
   1695a:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1695c:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   16960:	bd38      	pop	{r3, r4, r5, pc}

00016962 <free_chunk>:
{
   16962:	b538      	push	{r3, r4, r5, lr}
   16964:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   16966:	f7ff ff3f 	bl	167e8 <chunk_size>
   1696a:	460c      	mov	r4, r1
   1696c:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   1696e:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   16972:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   16974:	07da      	lsls	r2, r3, #31
   16976:	d40a      	bmi.n	1698e <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   16978:	4628      	mov	r0, r5
   1697a:	f7ff ff7e 	bl	1687a <free_list_remove>
	return c + chunk_size(h, c);
   1697e:	4621      	mov	r1, r4
   16980:	4628      	mov	r0, r5
   16982:	f7ff ff31 	bl	167e8 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   16986:	1822      	adds	r2, r4, r0
   16988:	4628      	mov	r0, r5
   1698a:	f7ff ffba 	bl	16902 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   1698e:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   16992:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   16994:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   16998:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   1699a:	07db      	lsls	r3, r3, #31
   1699c:	d40c      	bmi.n	169b8 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   1699e:	4628      	mov	r0, r5
   169a0:	f7ff ff6b 	bl	1687a <free_list_remove>
		return ((uint16_t *)cmem)[f];
   169a4:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   169a8:	4622      	mov	r2, r4
   169aa:	1a61      	subs	r1, r4, r1
   169ac:	4628      	mov	r0, r5
   169ae:	f7ff ffa8 	bl	16902 <merge_chunks>
   169b2:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   169b6:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   169b8:	4621      	mov	r1, r4
   169ba:	4628      	mov	r0, r5
}
   169bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   169c0:	f7ff bf17 	b.w	167f2 <free_list_add>

000169c4 <sys_heap_free>:
	if (mem == NULL) {
   169c4:	b161      	cbz	r1, 169e0 <sys_heap_free+0x1c>
   169c6:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   169c8:	3904      	subs	r1, #4
   169ca:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   169cc:	f021 0307 	bic.w	r3, r1, #7
   169d0:	4403      	add	r3, r0
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   169d2:	885a      	ldrh	r2, [r3, #2]
	free_chunk(h, c);
   169d4:	08c9      	lsrs	r1, r1, #3
   169d6:	f022 0201 	bic.w	r2, r2, #1
   169da:	805a      	strh	r2, [r3, #2]
   169dc:	f7ff bfc1 	b.w	16962 <free_chunk>
}
   169e0:	4770      	bx	lr

000169e2 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   169e2:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   169e4:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   169e6:	b909      	cbnz	r1, 169ec <sys_heap_alloc+0xa>
		return NULL;
   169e8:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   169ea:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   169ec:	68ab      	ldr	r3, [r5, #8]
   169ee:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   169f2:	d9f9      	bls.n	169e8 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   169f4:	310b      	adds	r1, #11
   169f6:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   169f8:	4621      	mov	r1, r4
   169fa:	4628      	mov	r0, r5
   169fc:	f7ff ff4a 	bl	16894 <alloc_chunk>
	if (c == 0U) {
   16a00:	4606      	mov	r6, r0
   16a02:	2800      	cmp	r0, #0
   16a04:	d0f0      	beq.n	169e8 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   16a06:	4601      	mov	r1, r0
   16a08:	4628      	mov	r0, r5
   16a0a:	f7ff feed 	bl	167e8 <chunk_size>
   16a0e:	42a0      	cmp	r0, r4
   16a10:	d907      	bls.n	16a22 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   16a12:	4628      	mov	r0, r5
   16a14:	1932      	adds	r2, r6, r4
   16a16:	f7ff ff8a 	bl	1692e <split_chunks>
		free_list_add(h, c + chunk_sz);
   16a1a:	4611      	mov	r1, r2
   16a1c:	4628      	mov	r0, r5
   16a1e:	f7ff fee8 	bl	167f2 <free_list_add>
	void *cmem = &buf[c];
   16a22:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   16a26:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   16a28:	8853      	ldrh	r3, [r2, #2]
   16a2a:	3004      	adds	r0, #4
   16a2c:	f043 0301 	orr.w	r3, r3, #1
   16a30:	8053      	strh	r3, [r2, #2]
	return mem;
   16a32:	e7da      	b.n	169ea <sys_heap_alloc+0x8>

00016a34 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   16a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16a38:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   16a3c:	ea19 0901 	ands.w	r9, r9, r1
{
   16a40:	460f      	mov	r7, r1
   16a42:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   16a44:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
   16a46:	d00c      	beq.n	16a62 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   16a48:	424b      	negs	r3, r1
   16a4a:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   16a4c:	2b04      	cmp	r3, #4
   16a4e:	461a      	mov	r2, r3
   16a50:	464f      	mov	r7, r9
   16a52:	bf28      	it	cs
   16a54:	2204      	movcs	r2, #4
	rew = align & -align;
   16a56:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   16a58:	b964      	cbnz	r4, 16a74 <sys_heap_aligned_alloc+0x40>
		return NULL;
   16a5a:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   16a5c:	4628      	mov	r0, r5
   16a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   16a62:	2904      	cmp	r1, #4
   16a64:	d804      	bhi.n	16a70 <sys_heap_aligned_alloc+0x3c>
}
   16a66:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   16a6a:	4611      	mov	r1, r2
   16a6c:	f7ff bfb9 	b.w	169e2 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   16a70:	2204      	movs	r2, #4
   16a72:	e7f1      	b.n	16a58 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   16a74:	68b3      	ldr	r3, [r6, #8]
   16a76:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   16a7a:	d9ee      	bls.n	16a5a <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   16a7c:	f104 010b 	add.w	r1, r4, #11
   16a80:	4439      	add	r1, r7
   16a82:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   16a84:	4630      	mov	r0, r6
   16a86:	08c9      	lsrs	r1, r1, #3
   16a88:	f7ff ff04 	bl	16894 <alloc_chunk>
	if (c0 == 0) {
   16a8c:	4680      	mov	r8, r0
   16a8e:	2800      	cmp	r0, #0
   16a90:	d0e3      	beq.n	16a5a <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   16a92:	f109 0504 	add.w	r5, r9, #4
   16a96:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   16a9a:	1e7b      	subs	r3, r7, #1
   16a9c:	4435      	add	r5, r6
   16a9e:	441d      	add	r5, r3
   16aa0:	427f      	negs	r7, r7
   16aa2:	403d      	ands	r5, r7
   16aa4:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   16aa8:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   16aaa:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   16aac:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   16aae:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   16ab0:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   16ab4:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   16ab6:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   16aba:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   16abe:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   16ac2:	d208      	bcs.n	16ad6 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   16ac4:	4601      	mov	r1, r0
   16ac6:	463a      	mov	r2, r7
   16ac8:	4630      	mov	r0, r6
   16aca:	f7ff ff30 	bl	1692e <split_chunks>
		free_list_add(h, c0);
   16ace:	4641      	mov	r1, r8
   16ad0:	4630      	mov	r0, r6
   16ad2:	f7ff fe8e 	bl	167f2 <free_list_add>
	return c + chunk_size(h, c);
   16ad6:	4639      	mov	r1, r7
   16ad8:	4630      	mov	r0, r6
   16ada:	f7ff fe85 	bl	167e8 <chunk_size>
   16ade:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   16ae0:	4284      	cmp	r4, r0
   16ae2:	d207      	bcs.n	16af4 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   16ae4:	4630      	mov	r0, r6
   16ae6:	4622      	mov	r2, r4
   16ae8:	f7ff ff21 	bl	1692e <split_chunks>
		free_list_add(h, c_end);
   16aec:	4621      	mov	r1, r4
   16aee:	4630      	mov	r0, r6
   16af0:	f7ff fe7f 	bl	167f2 <free_list_add>
	void *cmem = &buf[c];
   16af4:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   16af8:	8873      	ldrh	r3, [r6, #2]
   16afa:	f043 0301 	orr.w	r3, r3, #1
   16afe:	8073      	strh	r3, [r6, #2]
   16b00:	e7ac      	b.n	16a5c <sys_heap_aligned_alloc+0x28>

00016b02 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   16b02:	b4f0      	push	{r4, r5, r6, r7}
   16b04:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   16b06:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   16b08:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   16b0a:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   16b0c:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   16b10:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   16b14:	1a0e      	subs	r6, r1, r0
   16b16:	08f3      	lsrs	r3, r6, #3
	return 31 - __builtin_clz(usable_sz);
   16b18:	fab3 f283 	clz	r2, r3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   16b1c:	6020      	str	r0, [r4, #0]
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   16b1e:	2700      	movs	r7, #0
   16b20:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   16b22:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
   16b26:	00ad      	lsls	r5, r5, #2
	h->end_chunk = heap_sz;
   16b28:	6083      	str	r3, [r0, #8]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   16b2a:	3507      	adds	r5, #7
	h->avail_buckets = 0;
   16b2c:	f844 7f0c 	str.w	r7, [r4, #12]!
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   16b30:	f1c2 0220 	rsb	r2, r2, #32
   16b34:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   16b36:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   16b3a:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   16b3e:	4294      	cmp	r4, r2
   16b40:	d1fb      	bne.n	16b3a <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   16b42:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   16b44:	f042 0201 	orr.w	r2, r2, #1
   16b48:	8042      	strh	r2, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   16b4a:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   16b4c:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   16b4e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   16b52:	8007      	strh	r7, [r0, #0]
   16b54:	8065      	strh	r5, [r4, #2]
   16b56:	1984      	adds	r4, r0, r6
   16b58:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   16b5c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   16b60:	8067      	strh	r7, [r4, #2]
   16b62:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   16b64:	885a      	ldrh	r2, [r3, #2]
   16b66:	f042 0201 	orr.w	r2, r2, #1
   16b6a:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   16b6c:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   16b6e:	f7ff be40 	b.w	167f2 <free_list_add>

00016b72 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   16b72:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   16b74:	f013 0307 	ands.w	r3, r3, #7
   16b78:	d105      	bne.n	16b86 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   16b7a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   16b7c:	2b00      	cmp	r3, #0
   16b7e:	bf0c      	ite	eq
   16b80:	2000      	moveq	r0, #0
   16b82:	2003      	movne	r0, #3
   16b84:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   16b86:	2b02      	cmp	r3, #2
   16b88:	d105      	bne.n	16b96 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   16b8a:	8b40      	ldrh	r0, [r0, #26]
   16b8c:	fab0 f080 	clz	r0, r0
   16b90:	0940      	lsrs	r0, r0, #5
   16b92:	0080      	lsls	r0, r0, #2
   16b94:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   16b96:	2b01      	cmp	r3, #1
   16b98:	d105      	bne.n	16ba6 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   16b9a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   16b9c:	2b00      	cmp	r3, #0
   16b9e:	bf0c      	ite	eq
   16ba0:	2000      	moveq	r0, #0
   16ba2:	2005      	movne	r0, #5
   16ba4:	4770      	bx	lr
	int evt = EVT_NOP;
   16ba6:	2000      	movs	r0, #0
}
   16ba8:	4770      	bx	lr

00016baa <validate_args>:
{
   16baa:	b510      	push	{r4, lr}
   16bac:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   16bae:	b100      	cbz	r0, 16bb2 <validate_args+0x8>
   16bb0:	b911      	cbnz	r1, 16bb8 <validate_args+0xe>
		return -EINVAL;
   16bb2:	f06f 0015 	mvn.w	r0, #21
}
   16bb6:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   16bb8:	1d08      	adds	r0, r1, #4
   16bba:	f000 f895 	bl	16ce8 <sys_notify_validate>
	if ((rv == 0)
   16bbe:	2800      	cmp	r0, #0
   16bc0:	d1f9      	bne.n	16bb6 <validate_args+0xc>
	    && ((cli->notify.flags
   16bc2:	68a3      	ldr	r3, [r4, #8]
   16bc4:	2b03      	cmp	r3, #3
   16bc6:	d9f6      	bls.n	16bb6 <validate_args+0xc>
   16bc8:	e7f3      	b.n	16bb2 <validate_args+0x8>

00016bca <notify_one>:
{
   16bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16bce:	460d      	mov	r5, r1
   16bd0:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   16bd2:	4619      	mov	r1, r3
   16bd4:	1d28      	adds	r0, r5, #4
{
   16bd6:	4690      	mov	r8, r2
   16bd8:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   16bda:	f000 f899 	bl	16d10 <sys_notify_finalize>
	if (cb) {
   16bde:	4604      	mov	r4, r0
   16be0:	b138      	cbz	r0, 16bf2 <notify_one+0x28>
		cb(mgr, cli, state, res);
   16be2:	4633      	mov	r3, r6
   16be4:	4642      	mov	r2, r8
   16be6:	4629      	mov	r1, r5
   16be8:	4638      	mov	r0, r7
   16bea:	46a4      	mov	ip, r4
}
   16bec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   16bf0:	4760      	bx	ip
}
   16bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00016bf6 <transition_complete>:
{
   16bf6:	b410      	push	{r4}
	__asm__ volatile(
   16bf8:	f04f 0420 	mov.w	r4, #32
   16bfc:	f3ef 8211 	mrs	r2, BASEPRI
   16c00:	f384 8812 	msr	BASEPRI_MAX, r4
   16c04:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   16c08:	6141      	str	r1, [r0, #20]
}
   16c0a:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   16c0c:	2101      	movs	r1, #1
   16c0e:	f7f2 ba49 	b.w	90a4 <process_event>

00016c12 <onoff_manager_init>:
{
   16c12:	b538      	push	{r3, r4, r5, lr}
   16c14:	460c      	mov	r4, r1
	if ((mgr == NULL)
   16c16:	4605      	mov	r5, r0
   16c18:	b158      	cbz	r0, 16c32 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   16c1a:	b151      	cbz	r1, 16c32 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   16c1c:	680b      	ldr	r3, [r1, #0]
   16c1e:	b143      	cbz	r3, 16c32 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   16c20:	684b      	ldr	r3, [r1, #4]
   16c22:	b133      	cbz	r3, 16c32 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   16c24:	221c      	movs	r2, #28
   16c26:	2100      	movs	r1, #0
   16c28:	f001 facc 	bl	181c4 <memset>
	return 0;
   16c2c:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   16c2e:	612c      	str	r4, [r5, #16]
}
   16c30:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   16c32:	f06f 0015 	mvn.w	r0, #21
   16c36:	e7fb      	b.n	16c30 <onoff_manager_init+0x1e>

00016c38 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   16c38:	b570      	push	{r4, r5, r6, lr}
   16c3a:	4605      	mov	r5, r0
   16c3c:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   16c3e:	f7ff ffb4 	bl	16baa <validate_args>

	if (rv < 0) {
   16c42:	1e04      	subs	r4, r0, #0
   16c44:	db15      	blt.n	16c72 <onoff_request+0x3a>
   16c46:	f04f 0320 	mov.w	r3, #32
   16c4a:	f3ef 8211 	mrs	r2, BASEPRI
   16c4e:	f383 8812 	msr	BASEPRI_MAX, r3
   16c52:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   16c56:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16c5a:	8b6b      	ldrh	r3, [r5, #26]
   16c5c:	8b2c      	ldrh	r4, [r5, #24]
   16c5e:	428b      	cmp	r3, r1
   16c60:	f004 0407 	and.w	r4, r4, #7
   16c64:	d107      	bne.n	16c76 <onoff_request+0x3e>
	__asm__ volatile(
   16c66:	f382 8811 	msr	BASEPRI, r2
   16c6a:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   16c6e:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   16c72:	4620      	mov	r0, r4
   16c74:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   16c76:	2c02      	cmp	r4, #2
   16c78:	d10c      	bne.n	16c94 <onoff_request+0x5c>
		mgr->refs += 1U;
   16c7a:	3301      	adds	r3, #1
   16c7c:	836b      	strh	r3, [r5, #26]
   16c7e:	f382 8811 	msr	BASEPRI, r2
   16c82:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   16c86:	2300      	movs	r3, #0
   16c88:	4622      	mov	r2, r4
   16c8a:	4631      	mov	r1, r6
   16c8c:	4628      	mov	r0, r5
   16c8e:	f7ff ff9c 	bl	16bca <notify_one>
   16c92:	e7ee      	b.n	16c72 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   16c94:	2c06      	cmp	r4, #6
   16c96:	d814      	bhi.n	16cc2 <onoff_request+0x8a>
   16c98:	e8df f004 	tbb	[pc, r4]
   16c9c:	13131304 	.word	0x13131304
   16ca0:	1a04      	.short	0x1a04
   16ca2:	04          	.byte	0x04
   16ca3:	00          	.byte	0x00
	parent->next = child;
   16ca4:	2300      	movs	r3, #0
   16ca6:	6033      	str	r3, [r6, #0]
	return list->tail;
   16ca8:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   16caa:	b93b      	cbnz	r3, 16cbc <onoff_request+0x84>
	list->head = node;
   16cac:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   16cb0:	b9ac      	cbnz	r4, 16cde <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   16cb2:	2102      	movs	r1, #2
   16cb4:	4628      	mov	r0, r5
   16cb6:	f7f2 f9f5 	bl	90a4 <process_event>
   16cba:	e7da      	b.n	16c72 <onoff_request+0x3a>
	parent->next = child;
   16cbc:	601e      	str	r6, [r3, #0]
	list->tail = node;
   16cbe:	606e      	str	r6, [r5, #4]
}
   16cc0:	e7f6      	b.n	16cb0 <onoff_request+0x78>
   16cc2:	f382 8811 	msr	BASEPRI, r2
   16cc6:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   16cca:	f06f 0404 	mvn.w	r4, #4
   16cce:	e7d0      	b.n	16c72 <onoff_request+0x3a>
   16cd0:	f382 8811 	msr	BASEPRI, r2
   16cd4:	f3bf 8f6f 	isb	sy
   16cd8:	f06f 0485 	mvn.w	r4, #133	; 0x85
   16cdc:	e7c9      	b.n	16c72 <onoff_request+0x3a>
   16cde:	f382 8811 	msr	BASEPRI, r2
   16ce2:	f3bf 8f6f 	isb	sy
		if (notify) {
   16ce6:	e7c4      	b.n	16c72 <onoff_request+0x3a>

00016ce8 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   16ce8:	4603      	mov	r3, r0
   16cea:	b140      	cbz	r0, 16cfe <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   16cec:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   16cee:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   16cf2:	2a02      	cmp	r2, #2
   16cf4:	d006      	beq.n	16d04 <sys_notify_validate+0x1c>
   16cf6:	2a03      	cmp	r2, #3
   16cf8:	d004      	beq.n	16d04 <sys_notify_validate+0x1c>
   16cfa:	2a01      	cmp	r2, #1
   16cfc:	d005      	beq.n	16d0a <sys_notify_validate+0x22>
   16cfe:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   16d02:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   16d04:	681a      	ldr	r2, [r3, #0]
   16d06:	2a00      	cmp	r2, #0
   16d08:	d0f9      	beq.n	16cfe <sys_notify_validate+0x16>
		notify->result = 0;
   16d0a:	2000      	movs	r0, #0
   16d0c:	6098      	str	r0, [r3, #8]
   16d0e:	4770      	bx	lr

00016d10 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   16d10:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   16d12:	6842      	ldr	r2, [r0, #4]
   16d14:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
   16d16:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   16d1a:	2a02      	cmp	r2, #2
   16d1c:	f04f 0400 	mov.w	r4, #0
	notify->result = res;
   16d20:	6081      	str	r1, [r0, #8]
	switch (method) {
   16d22:	d007      	beq.n	16d34 <sys_notify_finalize+0x24>
   16d24:	2a03      	cmp	r2, #3
   16d26:	d002      	beq.n	16d2e <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   16d28:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   16d2a:	2000      	movs	r0, #0
   16d2c:	e001      	b.n	16d32 <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   16d2e:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   16d30:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   16d32:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   16d34:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   16d36:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   16d38:	2800      	cmp	r0, #0
   16d3a:	d0f6      	beq.n	16d2a <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   16d3c:	f7ff fc6a 	bl	16614 <z_impl_k_poll_signal_raise>
   16d40:	e7f3      	b.n	16d2a <sys_notify_finalize+0x1a>

00016d42 <encode_uint>:
{
   16d42:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d46:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
   16d48:	78d3      	ldrb	r3, [r2, #3]
{
   16d4a:	4680      	mov	r8, r0
	switch (specifier) {
   16d4c:	2b6f      	cmp	r3, #111	; 0x6f
{
   16d4e:	460f      	mov	r7, r1
   16d50:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   16d52:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   16d56:	d029      	beq.n	16dac <encode_uint+0x6a>
   16d58:	d824      	bhi.n	16da4 <encode_uint+0x62>
		return 10;
   16d5a:	2b58      	cmp	r3, #88	; 0x58
   16d5c:	bf0c      	ite	eq
   16d5e:	2610      	moveq	r6, #16
   16d60:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   16d62:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   16d66:	4632      	mov	r2, r6
   16d68:	2300      	movs	r3, #0
   16d6a:	4640      	mov	r0, r8
   16d6c:	4639      	mov	r1, r7
   16d6e:	f7f1 f9f1 	bl	8154 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   16d72:	2a09      	cmp	r2, #9
   16d74:	b2d4      	uxtb	r4, r2
   16d76:	d81e      	bhi.n	16db6 <encode_uint+0x74>
   16d78:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   16d7a:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   16d7c:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   16d7e:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   16d82:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   16d86:	d301      	bcc.n	16d8c <encode_uint+0x4a>
   16d88:	45d1      	cmp	r9, sl
   16d8a:	d811      	bhi.n	16db0 <encode_uint+0x6e>
	if (conv->flag_hash) {
   16d8c:	782b      	ldrb	r3, [r5, #0]
   16d8e:	069b      	lsls	r3, r3, #26
   16d90:	d505      	bpl.n	16d9e <encode_uint+0x5c>
		if (radix == 8) {
   16d92:	2e08      	cmp	r6, #8
   16d94:	d115      	bne.n	16dc2 <encode_uint+0x80>
			conv->altform_0 = true;
   16d96:	78ab      	ldrb	r3, [r5, #2]
   16d98:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   16d9c:	70ab      	strb	r3, [r5, #2]
}
   16d9e:	4648      	mov	r0, r9
   16da0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   16da4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   16da8:	2b70      	cmp	r3, #112	; 0x70
   16daa:	e7d7      	b.n	16d5c <encode_uint+0x1a>
	switch (specifier) {
   16dac:	2608      	movs	r6, #8
   16dae:	e7d8      	b.n	16d62 <encode_uint+0x20>
		value /= radix;
   16db0:	4680      	mov	r8, r0
   16db2:	460f      	mov	r7, r1
   16db4:	e7d7      	b.n	16d66 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   16db6:	f1bb 0f19 	cmp.w	fp, #25
   16dba:	bf94      	ite	ls
   16dbc:	3437      	addls	r4, #55	; 0x37
   16dbe:	3457      	addhi	r4, #87	; 0x57
   16dc0:	e7db      	b.n	16d7a <encode_uint+0x38>
		} else if (radix == 16) {
   16dc2:	2e10      	cmp	r6, #16
   16dc4:	d1eb      	bne.n	16d9e <encode_uint+0x5c>
			conv->altform_0c = true;
   16dc6:	78ab      	ldrb	r3, [r5, #2]
   16dc8:	f043 0310 	orr.w	r3, r3, #16
   16dcc:	e7e6      	b.n	16d9c <encode_uint+0x5a>

00016dce <outs>:
{
   16dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16dd2:	4607      	mov	r7, r0
   16dd4:	4688      	mov	r8, r1
   16dd6:	4615      	mov	r5, r2
   16dd8:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   16dda:	4614      	mov	r4, r2
   16ddc:	42b4      	cmp	r4, r6
   16dde:	d305      	bcc.n	16dec <outs+0x1e>
   16de0:	b10e      	cbz	r6, 16de6 <outs+0x18>
	return (int)count;
   16de2:	1b60      	subs	r0, r4, r5
   16de4:	e008      	b.n	16df8 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   16de6:	7823      	ldrb	r3, [r4, #0]
   16de8:	2b00      	cmp	r3, #0
   16dea:	d0fa      	beq.n	16de2 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   16dec:	4641      	mov	r1, r8
   16dee:	f814 0b01 	ldrb.w	r0, [r4], #1
   16df2:	47b8      	blx	r7
		if (rc < 0) {
   16df4:	2800      	cmp	r0, #0
   16df6:	daf1      	bge.n	16ddc <outs+0xe>
}
   16df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00016dfc <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   16dfc:	b40f      	push	{r0, r1, r2, r3}
   16dfe:	b507      	push	{r0, r1, r2, lr}
   16e00:	a904      	add	r1, sp, #16
   16e02:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   16e06:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   16e08:	f7ff fcc8 	bl	1679c <vprintk>

	va_end(ap);
}
   16e0c:	b003      	add	sp, #12
   16e0e:	f85d eb04 	ldr.w	lr, [sp], #4
   16e12:	b004      	add	sp, #16
   16e14:	4770      	bx	lr

00016e16 <free_space>:
 * @retval true when space was calculated until end of buffer (and there might
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
   16e16:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
   16e18:	6903      	ldr	r3, [r0, #16]
{
   16e1a:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
   16e1c:	f013 0008 	ands.w	r0, r3, #8
   16e20:	d109      	bne.n	16e36 <free_space+0x20>
		*res = 0;
		return false;
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   16e22:	6813      	ldr	r3, [r2, #0]
   16e24:	68d4      	ldr	r4, [r2, #12]
   16e26:	429c      	cmp	r4, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
   16e28:	bf9b      	ittet	ls
   16e2a:	2001      	movls	r0, #1
	*res = buffer->size - buffer->tmp_wr_idx;
   16e2c:	6a12      	ldrls	r2, [r2, #32]
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   16e2e:	1ae3      	subhi	r3, r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
   16e30:	1ad3      	subls	r3, r2, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   16e32:	600b      	str	r3, [r1, #0]
}
   16e34:	bd10      	pop	{r4, pc}
   16e36:	2300      	movs	r3, #0
		return false;
   16e38:	4618      	mov	r0, r3
   16e3a:	e7fa      	b.n	16e32 <free_space+0x1c>

00016e3c <get_usage>:

	return false;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   16e3c:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
   16e3e:	a901      	add	r1, sp, #4
{
   16e40:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   16e42:	f7ff ffe8 	bl	16e16 <free_space>
   16e46:	b120      	cbz	r0, 16e52 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   16e48:	9b01      	ldr	r3, [sp, #4]
   16e4a:	68e2      	ldr	r2, [r4, #12]
   16e4c:	3b01      	subs	r3, #1
   16e4e:	4413      	add	r3, r2
   16e50:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   16e52:	6a20      	ldr	r0, [r4, #32]
   16e54:	9b01      	ldr	r3, [sp, #4]
   16e56:	1ac0      	subs	r0, r0, r3
}
   16e58:	3801      	subs	r0, #1
   16e5a:	b002      	add	sp, #8
   16e5c:	bd10      	pop	{r4, pc}

00016e5e <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, int32_t val)
{
   16e5e:	b510      	push	{r4, lr}
   16e60:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   16e62:	1850      	adds	r0, r2, r1

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   16e64:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   16e66:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   16e68:	07d2      	lsls	r2, r2, #31
   16e6a:	d502      	bpl.n	16e72 <idx_inc+0x14>
		return i & (buffer->size - 1);
   16e6c:	3b01      	subs	r3, #1
   16e6e:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   16e70:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   16e72:	4298      	cmp	r0, r3
   16e74:	bf28      	it	cs
   16e76:	1ac0      	subcs	r0, r0, r3
   16e78:	e7fa      	b.n	16e70 <idx_inc+0x12>

00016e7a <rd_idx_inc>:
		buffer->flags |= MPSC_PBUF_FULL;
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
   16e7a:	b510      	push	{r4, lr}
   16e7c:	4604      	mov	r4, r0
   16e7e:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   16e80:	68c1      	ldr	r1, [r0, #12]
   16e82:	f7ff ffec 	bl	16e5e <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
   16e86:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   16e88:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
   16e8a:	f023 0308 	bic.w	r3, r3, #8
   16e8e:	6123      	str	r3, [r4, #16]
}
   16e90:	bd10      	pop	{r4, pc}

00016e92 <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   16e92:	b538      	push	{r3, r4, r5, lr}
   16e94:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   16e96:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
   16e98:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   16e9a:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   16e9c:	f043 0302 	orr.w	r3, r3, #2
{
   16ea0:	4604      	mov	r4, r0
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   16ea2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   16ea6:	6801      	ldr	r1, [r0, #0]
   16ea8:	462a      	mov	r2, r5
   16eaa:	f7ff ffd8 	bl	16e5e <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   16eae:	68e3      	ldr	r3, [r4, #12]
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   16eb0:	6861      	ldr	r1, [r4, #4]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   16eb2:	4298      	cmp	r0, r3
		buffer->flags |= MPSC_PBUF_FULL;
   16eb4:	bf08      	it	eq
   16eb6:	6923      	ldreq	r3, [r4, #16]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   16eb8:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
   16eba:	bf08      	it	eq
   16ebc:	f043 0308 	orreq.w	r3, r3, #8
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   16ec0:	462a      	mov	r2, r5
   16ec2:	4620      	mov	r0, r4
		buffer->flags |= MPSC_PBUF_FULL;
   16ec4:	bf08      	it	eq
   16ec6:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   16ec8:	f7ff ffc9 	bl	16e5e <idx_inc>
   16ecc:	6060      	str	r0, [r4, #4]
}
   16ece:	bd38      	pop	{r3, r4, r5, pc}

00016ed0 <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
   16ed0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   16ed4:	68c7      	ldr	r7, [r0, #12]
   16ed6:	69c6      	ldr	r6, [r0, #28]
{
   16ed8:	469b      	mov	fp, r3
	if (item->hdr.busy && !item->hdr.valid) {
   16eda:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
{
   16ede:	4604      	mov	r4, r0
	if (item->hdr.busy && !item->hdr.valid) {
   16ee0:	f003 0303 	and.w	r3, r3, #3
   16ee4:	2b02      	cmp	r3, #2
{
   16ee6:	4688      	mov	r8, r1
   16ee8:	4691      	mov	r9, r2
   16eea:	f04f 0300 	mov.w	r3, #0
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   16eee:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   16ef2:	d009      	beq.n	16f08 <drop_item_locked+0x38>
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
   16ef4:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
   16ef6:	f8cb 3000 	str.w	r3, [fp]
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
   16efa:	6923      	ldr	r3, [r4, #16]
   16efc:	0799      	lsls	r1, r3, #30
   16efe:	d410      	bmi.n	16f22 <_flash_used+0x12>
		return false;
   16f00:	2000      	movs	r0, #0
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
			       item, rd_wlen);
	}

	return true;
}
   16f02:	b003      	add	sp, #12
   16f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
   16f08:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
   16f0c:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
   16f0e:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
   16f10:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
   16f14:	d0f1      	beq.n	16efa <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
   16f16:	f7ff ffb0 	bl	16e7a <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   16f1a:	68e3      	ldr	r3, [r4, #12]
   16f1c:	60a3      	str	r3, [r4, #8]
		return true;
   16f1e:	2001      	movs	r0, #1
   16f20:	e7ef      	b.n	16f02 <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
   16f22:	69a3      	ldr	r3, [r4, #24]
   16f24:	4650      	mov	r0, sl
   16f26:	4798      	blx	r3
	return item->hdr.valid;
   16f28:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	uint32_t rd_wlen = buffer->get_wlen(item);
   16f2c:	4605      	mov	r5, r0
	if (!is_valid(item)) {
   16f2e:	07da      	lsls	r2, r3, #31
   16f30:	d5e6      	bpl.n	16f00 <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
   16f32:	f013 0302 	ands.w	r3, r3, #2
   16f36:	d01d      	beq.n	16f74 <_flash_used+0x64>
		if (free_wlen) {
   16f38:	f1b8 0f00 	cmp.w	r8, #0
   16f3c:	d003      	beq.n	16f46 <_flash_used+0x36>
			add_skip_item(buffer, free_wlen);
   16f3e:	4641      	mov	r1, r8
   16f40:	4620      	mov	r0, r4
   16f42:	f7ff ffa6 	bl	16e92 <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   16f46:	6861      	ldr	r1, [r4, #4]
   16f48:	462a      	mov	r2, r5
   16f4a:	4620      	mov	r0, r4
   16f4c:	f7ff ff87 	bl	16e5e <idx_inc>
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   16f50:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   16f54:	4299      	cmp	r1, r3
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   16f56:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   16f58:	d104      	bne.n	16f64 <_flash_used+0x54>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
   16f5a:	462a      	mov	r2, r5
   16f5c:	4620      	mov	r0, r4
   16f5e:	f7ff ff7e 	bl	16e5e <idx_inc>
   16f62:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
   16f64:	68a3      	ldr	r3, [r4, #8]
   16f66:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
   16f68:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
   16f6a:	6923      	ldr	r3, [r4, #16]
   16f6c:	f043 0308 	orr.w	r3, r3, #8
   16f70:	6123      	str	r3, [r4, #16]
   16f72:	e7d4      	b.n	16f1e <_flash_used+0xe>
		rd_idx_inc(buffer, rd_wlen);
   16f74:	4601      	mov	r1, r0
   16f76:	4620      	mov	r0, r4
   16f78:	9301      	str	r3, [sp, #4]
   16f7a:	f7ff ff7e 	bl	16e7a <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   16f7e:	68e2      	ldr	r2, [r4, #12]
   16f80:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
   16f82:	f1b8 0f00 	cmp.w	r8, #0
   16f86:	d004      	beq.n	16f92 <_flash_used+0x82>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
   16f88:	6821      	ldr	r1, [r4, #0]
   16f8a:	69e2      	ldr	r2, [r4, #28]
   16f8c:	9b01      	ldr	r3, [sp, #4]
   16f8e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
   16f92:	eb05 0208 	add.w	r2, r5, r8
   16f96:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   16f9a:	6821      	ldr	r1, [r4, #0]
   16f9c:	4620      	mov	r0, r4
   16f9e:	f7ff ff5e 	bl	16e5e <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
   16fa2:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   16fa4:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
   16fa6:	f043 0308 	orr.w	r3, r3, #8
   16faa:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
   16fac:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
   16fb0:	f36f 0300 	bfc	r3, #0, #1
   16fb4:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
   16fb8:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
   16fbc:	e7af      	b.n	16f1e <_flash_used+0xe>

00016fbe <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
   16fbe:	b570      	push	{r4, r5, r6, lr}
   16fc0:	4604      	mov	r4, r0
   16fc2:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
   16fc4:	f7ff ff4b 	bl	16e5e <idx_inc>

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
   16fc8:	6823      	ldr	r3, [r4, #0]
   16fca:	4283      	cmp	r3, r0
   16fcc:	d105      	bne.n	16fda <post_drop_action+0x1c>
		/* Operation not interrupted by another alloc. */
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
		buffer->flags &= ~MPSC_PBUF_FULL;
   16fce:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
   16fd0:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
   16fd2:	f023 0308 	bic.w	r3, r3, #8
   16fd6:	6123      	str	r3, [r4, #16]
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
	buffer->wr_idx = idx_inc(buffer,
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
   16fd8:	bd70      	pop	{r4, r5, r6, pc}
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   16fda:	69e2      	ldr	r2, [r4, #28]
	union mpsc_pbuf_generic skip = {
   16fdc:	00ab      	lsls	r3, r5, #2
   16fde:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   16fe2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
   16fe6:	6861      	ldr	r1, [r4, #4]
   16fe8:	462a      	mov	r2, r5
   16fea:	4620      	mov	r0, r4
   16fec:	f7ff ff37 	bl	16e5e <idx_inc>
   16ff0:	6060      	str	r0, [r4, #4]
   16ff2:	e7f1      	b.n	16fd8 <post_drop_action+0x1a>

00016ff4 <max_utilization_update>:
{
   16ff4:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   16ff6:	6903      	ldr	r3, [r0, #16]
{
   16ff8:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   16ffa:	075b      	lsls	r3, r3, #29
   16ffc:	d506      	bpl.n	1700c <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   16ffe:	6a45      	ldr	r5, [r0, #36]	; 0x24
   17000:	f7ff ff1c 	bl	16e3c <get_usage>
   17004:	4285      	cmp	r5, r0
   17006:	bf2c      	ite	cs
   17008:	6265      	strcs	r5, [r4, #36]	; 0x24
   1700a:	6260      	strcc	r0, [r4, #36]	; 0x24
}
   1700c:	bd38      	pop	{r3, r4, r5, pc}

0001700e <mpsc_pbuf_init>:
{
   1700e:	b538      	push	{r3, r4, r5, lr}
   17010:	460d      	mov	r5, r1
   17012:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   17014:	221c      	movs	r2, #28
   17016:	2100      	movs	r1, #0
   17018:	f001 f8d4 	bl	181c4 <memset>
	buffer->max_usage = 0;
   1701c:	2200      	movs	r2, #0
	buffer->get_wlen = cfg->get_wlen;
   1701e:	68eb      	ldr	r3, [r5, #12]
   17020:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   17022:	68ab      	ldr	r3, [r5, #8]
   17024:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   17026:	682b      	ldr	r3, [r5, #0]
   17028:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   1702a:	686b      	ldr	r3, [r5, #4]
	buffer->max_usage = 0;
   1702c:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->size = cfg->size;
   1702e:	6223      	str	r3, [r4, #32]
	buffer->flags = cfg->flags;
   17030:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
   17032:	b123      	cbz	r3, 1703e <mpsc_pbuf_init+0x30>
   17034:	1e59      	subs	r1, r3, #1
   17036:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   17038:	bf08      	it	eq
   1703a:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
   1703e:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   17040:	2201      	movs	r2, #1
   17042:	f104 0028 	add.w	r0, r4, #40	; 0x28
   17046:	2100      	movs	r1, #0
}
   17048:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1704c:	f003 bda4 	b.w	1ab98 <z_impl_k_sem_init>

00017050 <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   17050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
   17054:	2500      	movs	r5, #0
{
   17056:	b087      	sub	sp, #28
   17058:	9300      	str	r3, [sp, #0]
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
   1705a:	6a03      	ldr	r3, [r0, #32]
{
   1705c:	4604      	mov	r4, r0
	if (wlen > (buffer->size)) {
   1705e:	428b      	cmp	r3, r1
{
   17060:	460e      	mov	r6, r1
   17062:	4692      	mov	sl, r2
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
   17064:	46a9      	mov	r9, r5
	union mpsc_pbuf_generic *dropped_item = NULL;
   17066:	9503      	str	r5, [sp, #12]
	uint32_t tmp_wr_idx_shift = 0;
   17068:	9505      	str	r5, [sp, #20]
	if (wlen > (buffer->size)) {
   1706a:	d33a      	bcc.n	170e2 <mpsc_pbuf_alloc+0x92>
	__asm__ volatile(
   1706c:	f04f 0320 	mov.w	r3, #32
   17070:	f3ef 8b11 	mrs	fp, BASEPRI
   17074:	f383 8812 	msr	BASEPRI_MAX, r3
   17078:	f3bf 8f6f 	isb	sy
	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
   1707c:	9a05      	ldr	r2, [sp, #20]
   1707e:	46d8      	mov	r8, fp
   17080:	b12a      	cbz	r2, 1708e <mpsc_pbuf_alloc+0x3e>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
   17082:	4629      	mov	r1, r5
   17084:	4620      	mov	r0, r4
   17086:	f7ff ff9a 	bl	16fbe <post_drop_action>
			tmp_wr_idx_shift = 0;
   1708a:	2300      	movs	r3, #0
   1708c:	9305      	str	r3, [sp, #20]
		}

		wrap = free_space(buffer, &free_wlen);
   1708e:	a904      	add	r1, sp, #16
   17090:	4620      	mov	r0, r4
   17092:	f7ff fec0 	bl	16e16 <free_space>

		if (free_wlen >= wlen) {
   17096:	9904      	ldr	r1, [sp, #16]
		wrap = free_space(buffer, &free_wlen);
   17098:	4607      	mov	r7, r0
		if (free_wlen >= wlen) {
   1709a:	42b1      	cmp	r1, r6
   1709c:	d32a      	bcc.n	170f4 <mpsc_pbuf_alloc+0xa4>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   1709e:	6822      	ldr	r2, [r4, #0]
			item =
   170a0:	69e3      	ldr	r3, [r4, #28]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   170a2:	4620      	mov	r0, r4
			item->hdr.valid = 0;
   170a4:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			item =
   170a8:	eb03 0982 	add.w	r9, r3, r2, lsl #2
			item->hdr.valid = 0;
   170ac:	f021 0103 	bic.w	r1, r1, #3
   170b0:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   170b4:	6821      	ldr	r1, [r4, #0]
   170b6:	4632      	mov	r2, r6
   170b8:	f7ff fed1 	bl	16e5e <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   170bc:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   170be:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   170c0:	4298      	cmp	r0, r3
   170c2:	d012      	beq.n	170ea <mpsc_pbuf_alloc+0x9a>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
   170c4:	2700      	movs	r7, #0
	__asm__ volatile(
   170c6:	f388 8811 	msr	BASEPRI, r8
   170ca:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
   170ce:	9903      	ldr	r1, [sp, #12]
   170d0:	b129      	cbz	r1, 170de <mpsc_pbuf_alloc+0x8e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
   170d2:	6962      	ldr	r2, [r4, #20]
   170d4:	b10a      	cbz	r2, 170da <mpsc_pbuf_alloc+0x8a>
				buffer->notify_drop(buffer, dropped_item);
   170d6:	4620      	mov	r0, r4
   170d8:	4790      	blx	r2
			}
			dropped_item = NULL;
   170da:	2300      	movs	r3, #0
   170dc:	9303      	str	r3, [sp, #12]
		}
	} while (cont);
   170de:	2f00      	cmp	r7, #0
   170e0:	d1c4      	bne.n	1706c <mpsc_pbuf_alloc+0x1c>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   170e2:	4648      	mov	r0, r9
   170e4:	b007      	add	sp, #28
   170e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
   170ea:	6923      	ldr	r3, [r4, #16]
   170ec:	f043 0308 	orr.w	r3, r3, #8
   170f0:	6123      	str	r3, [r4, #16]
   170f2:	e7e7      	b.n	170c4 <mpsc_pbuf_alloc+0x74>
		} else if (wrap) {
   170f4:	b118      	cbz	r0, 170fe <mpsc_pbuf_alloc+0xae>
			add_skip_item(buffer, free_wlen);
   170f6:	4620      	mov	r0, r4
   170f8:	f7ff fecb 	bl	16e92 <add_skip_item>
			cont = true;
   170fc:	e7e3      	b.n	170c6 <mpsc_pbuf_alloc+0x76>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   170fe:	9b00      	ldr	r3, [sp, #0]
   17100:	ea5a 0303 	orrs.w	r3, sl, r3
   17104:	d01a      	beq.n	1713c <mpsc_pbuf_alloc+0xec>
   17106:	9101      	str	r1, [sp, #4]
   17108:	f003 fc8c 	bl	1aa24 <k_is_in_isr>
   1710c:	9901      	ldr	r1, [sp, #4]
   1710e:	b9a8      	cbnz	r0, 1713c <mpsc_pbuf_alloc+0xec>
   17110:	f38b 8811 	msr	BASEPRI, fp
   17114:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   17118:	4652      	mov	r2, sl
   1711a:	9b00      	ldr	r3, [sp, #0]
   1711c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   17120:	f7fe fa96 	bl	15650 <z_impl_k_sem_take>
	__asm__ volatile(
   17124:	f04f 0320 	mov.w	r3, #32
   17128:	f3ef 8811 	mrs	r8, BASEPRI
   1712c:	f383 8812 	msr	BASEPRI_MAX, r3
   17130:	f3bf 8f6f 	isb	sy
			cont = (err == 0) ? true : false;
   17134:	fab0 f780 	clz	r7, r0
   17138:	097f      	lsrs	r7, r7, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   1713a:	e7c4      	b.n	170c6 <mpsc_pbuf_alloc+0x76>
			cont = drop_item_locked(buffer, free_wlen,
   1713c:	4620      	mov	r0, r4
   1713e:	ab05      	add	r3, sp, #20
   17140:	aa03      	add	r2, sp, #12
			tmp_wr_idx_val = buffer->tmp_wr_idx;
   17142:	6825      	ldr	r5, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
   17144:	f7ff fec4 	bl	16ed0 <drop_item_locked>
   17148:	4607      	mov	r7, r0
   1714a:	e7bc      	b.n	170c6 <mpsc_pbuf_alloc+0x76>

0001714c <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   1714c:	b570      	push	{r4, r5, r6, lr}
   1714e:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   17150:	6983      	ldr	r3, [r0, #24]
   17152:	4608      	mov	r0, r1
{
   17154:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   17156:	4798      	blx	r3
   17158:	4602      	mov	r2, r0
   1715a:	f04f 0320 	mov.w	r3, #32
   1715e:	f3ef 8611 	mrs	r6, BASEPRI
   17162:	f383 8812 	msr	BASEPRI_MAX, r3
   17166:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   1716a:	782b      	ldrb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   1716c:	4620      	mov	r0, r4
	item->hdr.valid = 1;
   1716e:	f043 0301 	orr.w	r3, r3, #1
   17172:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   17174:	6861      	ldr	r1, [r4, #4]
   17176:	f7ff fe72 	bl	16e5e <idx_inc>
   1717a:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   1717c:	4620      	mov	r0, r4
   1717e:	f7ff ff39 	bl	16ff4 <max_utilization_update>
	__asm__ volatile(
   17182:	f386 8811 	msr	BASEPRI, r6
   17186:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
   1718a:	bd70      	pop	{r4, r5, r6, pc}

0001718c <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   1718c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1718e:	4604      	mov	r4, r0
	__asm__ volatile(
   17190:	f04f 0320 	mov.w	r3, #32
   17194:	f3ef 8611 	mrs	r6, BASEPRI
   17198:	f383 8812 	msr	BASEPRI_MAX, r3
   1719c:	f3bf 8f6f 	isb	sy
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   171a0:	6923      	ldr	r3, [r4, #16]
   171a2:	f013 0f08 	tst.w	r3, #8
   171a6:	68a3      	ldr	r3, [r4, #8]
   171a8:	d102      	bne.n	171b0 <mpsc_pbuf_claim+0x24>
   171aa:	6862      	ldr	r2, [r4, #4]
   171ac:	4293      	cmp	r3, r2
   171ae:	d900      	bls.n	171b2 <mpsc_pbuf_claim+0x26>
		*res = buffer->size - buffer->tmp_rd_idx;
   171b0:	6a22      	ldr	r2, [r4, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   171b2:	1ad2      	subs	r2, r2, r3

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
   171b4:	69e1      	ldr	r1, [r4, #28]

		if (!a || is_invalid(item)) {
   171b6:	b92a      	cbnz	r2, 171c4 <mpsc_pbuf_claim+0x38>
	__asm__ volatile(
   171b8:	f386 8811 	msr	BASEPRI, r6
   171bc:	f3bf 8f6f 	isb	sy
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
   171c0:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
   171c2:	e033      	b.n	1722c <mpsc_pbuf_claim+0xa0>
	return !item->hdr.valid && !item->hdr.busy;
   171c4:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		item = (union mpsc_pbuf_generic *)
   171c8:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
   171cc:	f012 0003 	ands.w	r0, r2, #3
   171d0:	d0f2      	beq.n	171b8 <mpsc_pbuf_claim+0x2c>
	if (item->hdr.busy && !item->hdr.valid) {
   171d2:	2802      	cmp	r0, #2
   171d4:	d103      	bne.n	171de <mpsc_pbuf_claim+0x52>
		return item->skip.len;
   171d6:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
   171da:	08ad      	lsrs	r5, r5, #2
   171dc:	d105      	bne.n	171ea <mpsc_pbuf_claim+0x5e>
   171de:	07d0      	lsls	r0, r2, #31
   171e0:	d412      	bmi.n	17208 <mpsc_pbuf_claim+0x7c>
					skip ? skip : buffer->get_wlen(item);
   171e2:	4638      	mov	r0, r7
   171e4:	69a3      	ldr	r3, [r4, #24]
   171e6:	4798      	blx	r3
   171e8:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   171ea:	68a1      	ldr	r1, [r4, #8]
   171ec:	462a      	mov	r2, r5
   171ee:	4620      	mov	r0, r4
   171f0:	f7ff fe35 	bl	16e5e <idx_inc>
				rd_idx_inc(buffer, inc);
   171f4:	4629      	mov	r1, r5
				buffer->tmp_rd_idx =
   171f6:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
   171f8:	4620      	mov	r0, r4
   171fa:	f7ff fe3e 	bl	16e7a <rd_idx_inc>
   171fe:	f386 8811 	msr	BASEPRI, r6
   17202:	f3bf 8f6f 	isb	sy
	} while (cont);
   17206:	e7c3      	b.n	17190 <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
   17208:	f042 0202 	orr.w	r2, r2, #2
   1720c:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
						buffer->get_wlen(item));
   17210:	69a3      	ldr	r3, [r4, #24]
   17212:	4638      	mov	r0, r7
					idx_inc(buffer, buffer->tmp_rd_idx,
   17214:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
   17216:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
   17218:	4629      	mov	r1, r5
						buffer->get_wlen(item));
   1721a:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
   1721c:	4620      	mov	r0, r4
   1721e:	f7ff fe1e 	bl	16e5e <idx_inc>
				buffer->tmp_rd_idx =
   17222:	60a0      	str	r0, [r4, #8]
   17224:	f386 8811 	msr	BASEPRI, r6
   17228:	f3bf 8f6f 	isb	sy
}
   1722c:	4638      	mov	r0, r7
   1722e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00017230 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   17230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17232:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   17234:	6983      	ldr	r3, [r0, #24]
   17236:	4608      	mov	r0, r1
{
   17238:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   1723a:	4798      	blx	r3
   1723c:	4606      	mov	r6, r0
	__asm__ volatile(
   1723e:	f04f 0320 	mov.w	r3, #32
   17242:	f3ef 8711 	mrs	r7, BASEPRI
   17246:	f383 8812 	msr	BASEPRI_MAX, r3
   1724a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   1724e:	782b      	ldrb	r3, [r5, #0]
   17250:	f36f 0300 	bfc	r3, #0, #1
   17254:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   17256:	6923      	ldr	r3, [r4, #16]
   17258:	079b      	lsls	r3, r3, #30
   1725a:	d505      	bpl.n	17268 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   1725c:	68e2      	ldr	r2, [r4, #12]
   1725e:	69e3      	ldr	r3, [r4, #28]
   17260:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   17264:	429d      	cmp	r5, r3
   17266:	d11a      	bne.n	1729e <mpsc_pbuf_free+0x6e>
		witem->hdr.busy = 0;
   17268:	782b      	ldrb	r3, [r5, #0]
   1726a:	f36f 0341 	bfc	r3, #1, #1
   1726e:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   17270:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   17274:	4299      	cmp	r1, r3
   17276:	d104      	bne.n	17282 <mpsc_pbuf_free+0x52>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
   17278:	4632      	mov	r2, r6
   1727a:	4620      	mov	r0, r4
   1727c:	f7ff fdef 	bl	16e5e <idx_inc>
   17280:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
   17282:	4631      	mov	r1, r6
   17284:	4620      	mov	r0, r4
   17286:	f7ff fdf8 	bl	16e7a <rd_idx_inc>
	__asm__ volatile(
   1728a:	f387 8811 	msr	BASEPRI, r7
   1728e:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   17292:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   17296:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1729a:	f7fe b9b3 	b.w	15604 <z_impl_k_sem_give>
		witem->skip.len = wlen;
   1729e:	682b      	ldr	r3, [r5, #0]
   172a0:	f360 039f 	bfi	r3, r0, #2, #30
   172a4:	602b      	str	r3, [r5, #0]
   172a6:	e7f0      	b.n	1728a <mpsc_pbuf_free+0x5a>

000172a8 <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   172a8:	6902      	ldr	r2, [r0, #16]
   172aa:	6883      	ldr	r3, [r0, #8]
   172ac:	0712      	lsls	r2, r2, #28
   172ae:	d402      	bmi.n	172b6 <mpsc_pbuf_is_pending+0xe>
   172b0:	6842      	ldr	r2, [r0, #4]
   172b2:	429a      	cmp	r2, r3
   172b4:	d200      	bcs.n	172b8 <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
   172b6:	6a02      	ldr	r2, [r0, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   172b8:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   172ba:	1e18      	subs	r0, r3, #0
   172bc:	bf18      	it	ne
   172be:	2001      	movne	r0, #1
   172c0:	4770      	bx	lr

000172c2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   172c2:	4770      	bx	lr

000172c4 <nordicsemi_nrf53_init>:
{
   172c4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   172c6:	f04f 0320 	mov.w	r3, #32
   172ca:	f3ef 8511 	mrs	r5, BASEPRI
   172ce:	f383 8812 	msr	BASEPRI_MAX, r3
   172d2:	f3bf 8f6f 	isb	sy
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
   172d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   172da:	2401      	movs	r4, #1
   172dc:	2202      	movs	r2, #2
		soc_secure_gpio_pin_mcu_select(forwarded_psels[i], NRF_GPIO_PIN_SEL_NETWORK);
   172de:	4621      	mov	r1, r4
   172e0:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
   172e4:	2021      	movs	r0, #33	; 0x21
   172e6:	f8c3 4704 	str.w	r4, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   172ea:	f8c3 4904 	str.w	r4, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   172ee:	f8c3 4b00 	str.w	r4, [r3, #2816]	; 0xb00
   172f2:	f000 f824 	bl	1733e <soc_secure_gpio_pin_mcu_select>
   172f6:	4621      	mov	r1, r4
   172f8:	2020      	movs	r0, #32
   172fa:	f000 f820 	bl	1733e <soc_secure_gpio_pin_mcu_select>
   172fe:	4621      	mov	r1, r4
   17300:	200b      	movs	r0, #11
   17302:	f000 f81c 	bl	1733e <soc_secure_gpio_pin_mcu_select>
   17306:	4621      	mov	r1, r4
   17308:	200a      	movs	r0, #10
   1730a:	f000 f818 	bl	1733e <soc_secure_gpio_pin_mcu_select>
	__asm__ volatile(
   1730e:	f385 8811 	msr	BASEPRI, r5
   17312:	f3bf 8f6f 	isb	sy
}
   17316:	2000      	movs	r0, #0
   17318:	bd38      	pop	{r3, r4, r5, pc}

0001731a <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   1731a:	2806      	cmp	r0, #6
   1731c:	d108      	bne.n	17330 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   1731e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   17322:	2201      	movs	r2, #1
   17324:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   17328:	f3bf 8f4f 	dsb	sy
        __WFE();
   1732c:	bf20      	wfe
    while (true)
   1732e:	e7fd      	b.n	1732c <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   17330:	4770      	bx	lr

00017332 <pm_state_exit_post_ops>:
   17332:	2300      	movs	r3, #0
   17334:	f383 8811 	msr	BASEPRI, r3
   17338:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1733c:	4770      	bx	lr

0001733e <soc_secure_gpio_pin_mcu_select>:
#include "tfm_platform_api.h"
#include "tfm_ioctl_api.h"

#if NRF_GPIO_HAS_SEL
void soc_secure_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_sel_t mcu)
{
   1733e:	b507      	push	{r0, r1, r2, lr}
	uint32_t result;
	enum tfm_platform_err_t err;

	err = tfm_platform_gpio_pin_mcu_select(pin_number, mcu, &result);
   17340:	aa01      	add	r2, sp, #4
   17342:	f002 fcb2 	bl	19caa <tfm_platform_gpio_pin_mcu_select>
	__ASSERT(err == TFM_PLATFORM_ERR_SUCCESS, "TFM platform error (%d)", err);
	__ASSERT(result == 0, "GPIO service error (%d)", result);
}
   17346:	b003      	add	sp, #12
   17348:	f85d fb04 	ldr.w	pc, [sp], #4

0001734c <z_log_msg_static_create.constprop.0>:
   1734c:	2300      	movs	r3, #0
   1734e:	f7f3 bad5 	b.w	a8fc <z_impl_z_log_msg_static_create>

00017352 <get_tx_buffer_size>:
	return data->tx_buffer_size;
   17352:	6903      	ldr	r3, [r0, #16]
}
   17354:	f8d3 0370 	ldr.w	r0, [r3, #880]	; 0x370
   17358:	4770      	bx	lr

0001735a <drop_tx_buffer>:
}
   1735a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1735e:	4770      	bx	lr

00017360 <release_rx_buffer>:
{
   17360:	4608      	mov	r0, r1
   17362:	b508      	push	{r3, lr}
   17364:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   17366:	b118      	cbz	r0, 17370 <release_rx_buffer+0x10>
	rpmsg_release_rx_buffer(&rpmsg_ept->ep, data);
   17368:	f003 f813 	bl	1a392 <rpmsg_release_rx_buffer>
	return 0;
   1736c:	2000      	movs	r0, #0
}
   1736e:	bd08      	pop	{r3, pc}
		return -ENOENT;
   17370:	f06f 0001 	mvn.w	r0, #1
   17374:	e7fb      	b.n	1736e <release_rx_buffer+0xe>

00017376 <hold_rx_buffer>:
{
   17376:	4608      	mov	r0, r1
   17378:	b508      	push	{r3, lr}
   1737a:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   1737c:	b118      	cbz	r0, 17386 <hold_rx_buffer+0x10>
	rpmsg_hold_rx_buffer(&rpmsg_ept->ep, data);
   1737e:	f003 f800 	bl	1a382 <rpmsg_hold_rx_buffer>
	return 0;
   17382:	2000      	movs	r0, #0
}
   17384:	bd08      	pop	{r3, pc}
		return -ENOENT;
   17386:	f06f 0001 	mvn.w	r0, #1
   1738a:	e7fb      	b.n	17384 <hold_rx_buffer+0xe>

0001738c <send_nocopy>:
{
   1738c:	b513      	push	{r0, r1, r4, lr}
   1738e:	4604      	mov	r4, r0
   17390:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17392:	6921      	ldr	r1, [r4, #16]
   17394:	f501 715b 	add.w	r1, r1, #876	; 0x36c
   17398:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
   1739c:	2902      	cmp	r1, #2
   1739e:	d109      	bne.n	173b4 <send_nocopy+0x28>
	if (len == 0) {
   173a0:	b15b      	cbz	r3, 173ba <send_nocopy+0x2e>
	if (!rpmsg_ept) {
   173a2:	b168      	cbz	r0, 173c0 <send_nocopy+0x34>
				    const void *data, int len)
{
	if (!ept)
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_nocopy(ept, ept->addr,
   173a4:	9300      	str	r3, [sp, #0]
   173a6:	4613      	mov	r3, r2
   173a8:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   173ac:	f7fd fb62 	bl	14a74 <rpmsg_send_offchannel_nocopy>
}
   173b0:	b002      	add	sp, #8
   173b2:	bd10      	pop	{r4, pc}
		return -EBUSY;
   173b4:	f06f 000f 	mvn.w	r0, #15
   173b8:	e7fa      	b.n	173b0 <send_nocopy+0x24>
		return -EBADMSG;
   173ba:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   173be:	e7f7      	b.n	173b0 <send_nocopy+0x24>
		return -ENOENT;
   173c0:	f06f 0001 	mvn.w	r0, #1
   173c4:	e7f4      	b.n	173b0 <send_nocopy+0x24>

000173c6 <get_tx_buffer>:
{
   173c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   173ca:	461c      	mov	r4, r3
   173cc:	e9dd 5308 	ldrd	r5, r3, [sp, #32]
   173d0:	4616      	mov	r6, r2
   173d2:	4698      	mov	r8, r3
	if (!rpmsg_ept) {
   173d4:	460f      	mov	r7, r1
	struct backend_data_t *data = instance->data;
   173d6:	6900      	ldr	r0, [r0, #16]
	if (!rpmsg_ept) {
   173d8:	b339      	cbz	r1, 1742a <get_tx_buffer+0x64>
	if (!r_data || !size) {
   173da:	b34a      	cbz	r2, 17430 <get_tx_buffer+0x6a>
   173dc:	b344      	cbz	r4, 17430 <get_tx_buffer+0x6a>
	if (!K_TIMEOUT_EQ(wait, K_FOREVER) && !K_TIMEOUT_EQ(wait, K_NO_WAIT)) {
   173de:	1c6a      	adds	r2, r5, #1
   173e0:	f143 0300 	adc.w	r3, r3, #0
   173e4:	2a02      	cmp	r2, #2
   173e6:	f173 0300 	sbcs.w	r3, r3, #0
   173ea:	d224      	bcs.n	17436 <get_tx_buffer+0x70>
	if ((*size) && (*size > data->tx_buffer_size)) {
   173ec:	6822      	ldr	r2, [r4, #0]
   173ee:	b142      	cbz	r2, 17402 <get_tx_buffer+0x3c>
   173f0:	f8d0 3370 	ldr.w	r3, [r0, #880]	; 0x370
   173f4:	429a      	cmp	r2, r3
   173f6:	d904      	bls.n	17402 <get_tx_buffer+0x3c>
		return -ENOMEM;
   173f8:	f06f 000b 	mvn.w	r0, #11
		*size = data->tx_buffer_size;
   173fc:	6023      	str	r3, [r4, #0]
}
   173fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		payload = rpmsg_get_tx_payload_buffer(&rpmsg_ept->ep, size,
   17402:	ea05 0908 	and.w	r9, r5, r8
   17406:	f109 0301 	add.w	r3, r9, #1
   1740a:	425a      	negs	r2, r3
   1740c:	415a      	adcs	r2, r3
   1740e:	4621      	mov	r1, r4
   17410:	4638      	mov	r0, r7
   17412:	f002 ffc7 	bl	1a3a4 <rpmsg_get_tx_payload_buffer>
	} while ((!payload) && K_TIMEOUT_EQ(wait, K_FOREVER));
   17416:	b988      	cbnz	r0, 1743c <get_tx_buffer+0x76>
   17418:	f1b8 3fff 	cmp.w	r8, #4294967295
   1741c:	bf08      	it	eq
   1741e:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   17422:	d0f0      	beq.n	17406 <get_tx_buffer+0x40>
		return -ENOBUFS;
   17424:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17428:	e7e9      	b.n	173fe <get_tx_buffer+0x38>
		return -ENOENT;
   1742a:	f06f 0001 	mvn.w	r0, #1
   1742e:	e7e6      	b.n	173fe <get_tx_buffer+0x38>
		return -EINVAL;
   17430:	f06f 0015 	mvn.w	r0, #21
   17434:	e7e3      	b.n	173fe <get_tx_buffer+0x38>
		return -ENOTSUP;
   17436:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1743a:	e7e0      	b.n	173fe <get_tx_buffer+0x38>
	(*r_data) = payload;
   1743c:	6030      	str	r0, [r6, #0]
	return 0;
   1743e:	2000      	movs	r0, #0
   17440:	e7dd      	b.n	173fe <get_tx_buffer+0x38>

00017442 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   17442:	f002 bff4 	b.w	1a42e <rpmsg_destroy_ept>

00017446 <get_ept_slot_with_name>:
{
   17446:	b538      	push	{r3, r4, r5, lr}
   17448:	460d      	mov	r5, r1
   1744a:	4604      	mov	r4, r0
		if (strcmp(name, rpmsg_ept->name) == 0) {
   1744c:	f100 0140 	add.w	r1, r0, #64	; 0x40
   17450:	4628      	mov	r0, r5
   17452:	f000 fe7d 	bl	18150 <strcmp>
   17456:	b130      	cbz	r0, 17466 <get_ept_slot_with_name+0x20>
   17458:	4628      	mov	r0, r5
   1745a:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   1745e:	f000 fe77 	bl	18150 <strcmp>
   17462:	b920      	cbnz	r0, 1746e <get_ept_slot_with_name+0x28>
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   17464:	2001      	movs	r0, #1
			return &rpmsg_inst->endpoint[i];
   17466:	2370      	movs	r3, #112	; 0x70
   17468:	fb03 4000 	mla	r0, r3, r0, r4
}
   1746c:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   1746e:	2000      	movs	r0, #0
   17470:	e7fc      	b.n	1746c <get_ept_slot_with_name+0x26>

00017472 <mbox_callback>:
	k_work_submit_to_queue(&data->mbox_wq, &data->mbox_work);
   17472:	f502 712c 	add.w	r1, r2, #688	; 0x2b0
   17476:	f502 7030 	add.w	r0, r2, #704	; 0x2c0
   1747a:	f003 bc3d 	b.w	1acf8 <k_work_submit_to_queue>

0001747e <mbox_callback_process>:
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   1747e:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
	virtqueue_notification(data->vr.vq[vq_id]);
   17482:	f5a0 702c 	sub.w	r0, r0, #688	; 0x2b0
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   17486:	3b00      	subs	r3, #0
   17488:	bf18      	it	ne
   1748a:	2301      	movne	r3, #1
	virtqueue_notification(data->vr.vq[vq_id]);
   1748c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   17490:	f8d0 029c 	ldr.w	r0, [r0, #668]	; 0x29c
   17494:	f002 bf27 	b.w	1a2e6 <virtqueue_notification>

00017498 <virtio_notify_cb>:
	if (conf->mbox_tx.dev) {
   17498:	68cb      	ldr	r3, [r1, #12]
   1749a:	b133      	cbz	r3, 174aa <virtio_notify_cb+0x12>
		(const struct mbox_driver_api *)channel->dev->api;
   1749c:	68c8      	ldr	r0, [r1, #12]
	if (api->send == NULL) {
   1749e:	6883      	ldr	r3, [r0, #8]
   174a0:	681b      	ldr	r3, [r3, #0]
   174a2:	b113      	cbz	r3, 174aa <virtio_notify_cb+0x12>
	return api->send(channel->dev, channel->id, msg);
   174a4:	2200      	movs	r2, #0
   174a6:	6909      	ldr	r1, [r1, #16]
   174a8:	4718      	bx	r3
}
   174aa:	4770      	bx	lr

000174ac <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   174ac:	f7fe b83a 	b.w	15524 <z_impl_k_mutex_unlock>

000174b0 <atomic_set.isra.0>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   174b0:	e8d0 3fef 	ldaex	r3, [r0]
   174b4:	e8c0 1fe2 	stlex	r2, r1, [r0]
   174b8:	2a00      	cmp	r2, #0
   174ba:	d1f9      	bne.n	174b0 <atomic_set.isra.0>
}
   174bc:	4770      	bx	lr

000174be <backend_init>:
{
   174be:	b510      	push	{r4, lr}
	data->role = conf->role;
   174c0:	6843      	ldr	r3, [r0, #4]
	struct backend_data_t *data = instance->data;
   174c2:	6904      	ldr	r4, [r0, #16]
	data->role = conf->role;
   174c4:	681b      	ldr	r3, [r3, #0]
   174c6:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
	return z_impl_k_mutex_init(mutex);
   174ca:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
   174ce:	f003 fac5 	bl	1aa5c <z_impl_k_mutex_init>
	atomic_set(&data->state, STATE_READY);
   174d2:	2100      	movs	r1, #0
   174d4:	f504 705b 	add.w	r0, r4, #876	; 0x36c
   174d8:	f7ff ffea 	bl	174b0 <atomic_set.isra.0>
}
   174dc:	4608      	mov	r0, r1
   174de:	bd10      	pop	{r4, pc}

000174e0 <ns_bind_cb>:
{
   174e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   174e4:	4617      	mov	r7, r2
	if (name == NULL || name[0] == '\0') {
   174e6:	460d      	mov	r5, r1
   174e8:	b379      	cbz	r1, 1754a <ns_bind_cb+0x6a>
   174ea:	780b      	ldrb	r3, [r1, #0]
   174ec:	b36b      	cbz	r3, 1754a <ns_bind_cb+0x6a>
	rpmsg_inst = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
   174ee:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
   174f2:	f5a4 78ce 	sub.w	r8, r4, #412	; 0x19c
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   174f6:	3414      	adds	r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   174f8:	f04f 32ff 	mov.w	r2, #4294967295
   174fc:	f04f 33ff 	mov.w	r3, #4294967295
   17500:	4620      	mov	r0, r4
   17502:	f7fd ff95 	bl	15430 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, name);
   17506:	462a      	mov	r2, r5
   17508:	4640      	mov	r0, r8
   1750a:	a901      	add	r1, sp, #4
   1750c:	f7f2 fc5e 	bl	9dcc <get_ept>
	if (rpmsg_ept == NULL) {
   17510:	9e01      	ldr	r6, [sp, #4]
   17512:	b92e      	cbnz	r6, 17520 <ns_bind_cb+0x40>
		k_mutex_unlock(&rpmsg_inst->mtx);
   17514:	4620      	mov	r0, r4
}
   17516:	b002      	add	sp, #8
   17518:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_mutex_unlock(&rpmsg_inst->mtx);
   1751c:	f7ff bfc6 	b.w	174ac <k_mutex_unlock.isra.0>
	if (ept_cached) {
   17520:	b158      	cbz	r0, 1753a <ns_bind_cb+0x5a>
		k_mutex_unlock(&rpmsg_inst->mtx);
   17522:	4620      	mov	r0, r4
   17524:	f7ff ffc2 	bl	174ac <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   17528:	463b      	mov	r3, r7
   1752a:	462a      	mov	r2, r5
   1752c:	4631      	mov	r1, r6
   1752e:	4640      	mov	r0, r8
}
   17530:	b002      	add	sp, #8
   17532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   17536:	f7f2 bc27 	b.w	9d88 <advertise_ept>
		strncpy(rpmsg_ept->name, name, sizeof(rpmsg_ept->name));
   1753a:	2220      	movs	r2, #32
   1753c:	4629      	mov	r1, r5
   1753e:	f106 0040 	add.w	r0, r6, #64	; 0x40
   17542:	f000 fde1 	bl	18108 <strncpy>
		rpmsg_ept->dest = dest;
   17546:	6637      	str	r7, [r6, #96]	; 0x60
   17548:	e7e4      	b.n	17514 <ns_bind_cb+0x34>
}
   1754a:	b002      	add	sp, #8
   1754c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017550 <ept_cb>:
{
   17550:	b510      	push	{r4, lr}
   17552:	4608      	mov	r0, r1
   17554:	9b02      	ldr	r3, [sp, #8]
	if (len == 0) {
   17556:	4611      	mov	r1, r2
   17558:	b952      	cbnz	r2, 17570 <ept_cb+0x20>
		if (!ept->bound) {
   1755a:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   1755e:	b92a      	cbnz	r2, 1756c <ept_cb+0x1c>
			ept->bound = true;
   17560:	2201      	movs	r2, #1
			bound_cb(ept);
   17562:	4618      	mov	r0, r3
			ept->bound = true;
   17564:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			bound_cb(ept);
   17568:	f7f2 fd82 	bl	a070 <bound_cb>
}
   1756c:	2000      	movs	r0, #0
   1756e:	bd10      	pop	{r4, pc}
	if (ept->cb->received) {
   17570:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   17572:	6854      	ldr	r4, [r2, #4]
   17574:	2c00      	cmp	r4, #0
   17576:	d0f9      	beq.n	1756c <ept_cb+0x1c>
		ept->cb->received(data, len, ept->priv);
   17578:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   1757a:	47a0      	blx	r4
   1757c:	e7f6      	b.n	1756c <ept_cb+0x1c>

0001757e <deregister_ept>:
{
   1757e:	b510      	push	{r4, lr}
   17580:	460c      	mov	r4, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17582:	6903      	ldr	r3, [r0, #16]
   17584:	f503 735b 	add.w	r3, r3, #876	; 0x36c
   17588:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
   1758c:	2b02      	cmp	r3, #2
   1758e:	d10a      	bne.n	175a6 <deregister_ept+0x28>
	if (!rpmsg_ept) {
   17590:	b161      	cbz	r1, 175ac <deregister_ept+0x2e>
	rpmsg_destroy_ept(&rpmsg_ept->ep);
   17592:	4608      	mov	r0, r1
   17594:	f002 ff4b 	bl	1a42e <rpmsg_destroy_ept>
	memset(rpmsg_ept, 0, sizeof(struct ipc_rpmsg_ept));
   17598:	2270      	movs	r2, #112	; 0x70
   1759a:	2100      	movs	r1, #0
   1759c:	4620      	mov	r0, r4
   1759e:	f000 fe11 	bl	181c4 <memset>
	return 0;
   175a2:	2000      	movs	r0, #0
}
   175a4:	bd10      	pop	{r4, pc}
		return -EBUSY;
   175a6:	f06f 000f 	mvn.w	r0, #15
   175aa:	e7fb      	b.n	175a4 <deregister_ept+0x26>
		return -ENOENT;
   175ac:	f06f 0001 	mvn.w	r0, #1
   175b0:	e7f8      	b.n	175a4 <deregister_ept+0x26>

000175b2 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   175b2:	f002 bf3c 	b.w	1a42e <rpmsg_destroy_ept>

000175b6 <ipc_rpmsg_deinit>:

int ipc_rpmsg_deinit(struct ipc_rpmsg_instance *instance,
		   unsigned int role)
{
   175b6:	b538      	push	{r3, r4, r5, lr}
   175b8:	460d      	mov	r5, r1
	if (!instance) {
   175ba:	4604      	mov	r4, r0
   175bc:	b160      	cbz	r0, 175d8 <ipc_rpmsg_deinit+0x22>
		return -EINVAL;
	}

	rpmsg_deinit_vdev(&instance->rvdev);
   175be:	30e0      	adds	r0, #224	; 0xe0
   175c0:	f003 f961 	bl	1a886 <rpmsg_deinit_vdev>

	if (role == RPMSG_HOST) {
   175c4:	b10d      	cbz	r5, 175ca <ipc_rpmsg_deinit+0x14>
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
	}

	return 0;
   175c6:	2000      	movs	r0, #0
}
   175c8:	bd38      	pop	{r3, r4, r5, pc}
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
   175ca:	220c      	movs	r2, #12
   175cc:	4629      	mov	r1, r5
   175ce:	f504 70ce 	add.w	r0, r4, #412	; 0x19c
   175d2:	f000 fdf7 	bl	181c4 <memset>
   175d6:	e7f6      	b.n	175c6 <ipc_rpmsg_deinit+0x10>
		return -EINVAL;
   175d8:	f06f 0015 	mvn.w	r0, #21
   175dc:	e7f4      	b.n	175c8 <ipc_rpmsg_deinit+0x12>

000175de <virtio_notify>:
	vr = CONTAINER_OF(vq->vq_dev, struct ipc_static_vrings, vdev);
   175de:	6802      	ldr	r2, [r0, #0]
	if (vr->notify_cb) {
   175e0:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   175e4:	b113      	cbz	r3, 175ec <virtio_notify+0xe>
		vr->notify_cb(vq, vr->priv);
   175e6:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
   175ea:	4718      	bx	r3
}
   175ec:	4770      	bx	lr

000175ee <virtio_set_features>:
}
   175ee:	4770      	bx	lr

000175f0 <virtio_set_status>:
	if (p_vdev->role != VIRTIO_DEV_DRIVER) {
   175f0:	6983      	ldr	r3, [r0, #24]
   175f2:	b913      	cbnz	r3, 175fa <virtio_set_status+0xa>
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
   175f4:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   175f8:	7019      	strb	r1, [r3, #0]
}
   175fa:	4770      	bx	lr

000175fc <virtio_get_features>:
}
   175fc:	2001      	movs	r0, #1
   175fe:	4770      	bx	lr

00017600 <virtio_get_status>:
	if (p_vdev->role == VIRTIO_DEV_DEVICE) {
   17600:	6983      	ldr	r3, [r0, #24]
   17602:	2b01      	cmp	r3, #1
   17604:	d104      	bne.n	17610 <virtio_get_status+0x10>
	return *(volatile uint8_t *)addr;
   17606:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   1760a:	7818      	ldrb	r0, [r3, #0]
   1760c:	b2c0      	uxtb	r0, r0
   1760e:	4770      	bx	lr
	ret = VIRTIO_CONFIG_STATUS_DRIVER_OK;
   17610:	2004      	movs	r0, #4
}
   17612:	4770      	bx	lr

00017614 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
   17614:	b538      	push	{r3, r4, r5, lr}
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
   17616:	00c4      	lsls	r4, r0, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
   17618:	3434      	adds	r4, #52	; 0x34
	return k_malloc(size);
   1761a:	4620      	mov	r0, r4
   1761c:	f003 fedd 	bl	1b3da <k_malloc>

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   17620:	4605      	mov	r5, r0
   17622:	b118      	cbz	r0, 1762c <virtqueue_allocate+0x18>
		memset(vqs, 0x00, vq_size);
   17624:	4622      	mov	r2, r4
   17626:	2100      	movs	r1, #0
   17628:	f000 fdcc 	bl	181c4 <memset>
	}

	return vqs;
}
   1762c:	4628      	mov	r0, r5
   1762e:	bd38      	pop	{r3, r4, r5, pc}

00017630 <ipc_static_vrings_deinit>:

int ipc_static_vrings_deinit(struct ipc_static_vrings *vr, unsigned int role)
{
   17630:	b538      	push	{r3, r4, r5, lr}
   17632:	4604      	mov	r4, r0
	memset(&vr->vdev, 0, sizeof(struct virtio_device));
   17634:	2230      	movs	r2, #48	; 0x30
   17636:	2100      	movs	r1, #0
   17638:	f000 fdc4 	bl	181c4 <memset>
	memset(&(vr->rvrings[RPMSG_VQ_1]), 0, sizeof(struct virtio_vring_info));
   1763c:	2218      	movs	r2, #24
   1763e:	2100      	movs	r1, #0
   17640:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   17644:	f000 fdbe 	bl	181c4 <memset>
	memset(&(vr->rvrings[RPMSG_VQ_0]), 0, sizeof(struct virtio_vring_info));
   17648:	2218      	movs	r2, #24
   1764a:	2100      	movs	r1, #0
   1764c:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
   17650:	f000 fdb8 	bl	181c4 <memset>
	virtqueue_free(vr->vq[RPMSG_VQ_1]);
   17654:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
   17658:	f7fd f9be 	bl	149d8 <virtqueue_free>
	virtqueue_free(vr->vq[RPMSG_VQ_0]);
   1765c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   17660:	f7fd f9ba 	bl	149d8 <virtqueue_free>
	vr->shm_io = 0;
   17664:	2300      	movs	r3, #0
	metal_device_close(&vr->shm_device);
   17666:	f104 0034 	add.w	r0, r4, #52	; 0x34
	vr->shm_io = 0;
   1766a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	metal_device_close(&vr->shm_device);
   1766e:	f002 fbbb 	bl	19de8 <metal_device_close>
	metal_finish();
   17672:	f7fd f929 	bl	148c8 <metal_finish>
	if (io->ops.close)
   17676:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	err = libmetal_teardown(vr);
	if (err != 0) {
		return err;
	}

	metal_io_finish(vr->shm_device.regions);
   17678:	f104 0540 	add.w	r5, r4, #64	; 0x40
   1767c:	b10b      	cbz	r3, 17682 <ipc_static_vrings_deinit+0x52>
		(*io->ops.close)(io);
   1767e:	4628      	mov	r0, r5
   17680:	4798      	blx	r3
	memset(io, 0, sizeof(*io));
   17682:	2238      	movs	r2, #56	; 0x38
   17684:	2100      	movs	r1, #0
   17686:	4628      	mov	r0, r5
   17688:	f000 fd9c 	bl	181c4 <memset>

	return 0;
}
   1768c:	2000      	movs	r0, #0
   1768e:	bd38      	pop	{r3, r4, r5, pc}

00017690 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
   17690:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   17692:	075b      	lsls	r3, r3, #29
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
   17694:	bf5f      	itttt	pl
   17696:	6803      	ldrpl	r3, [r0, #0]
   17698:	8842      	ldrhpl	r2, [r0, #2]
   1769a:	f3c3 234a 	ubfxpl	r3, r3, #9, #11
   1769e:	eb03 1012 	addpl.w	r0, r3, r2, lsr #4
   176a2:	bf5d      	ittte	pl
   176a4:	3017      	addpl	r0, #23
   176a6:	f020 0007 	bicpl.w	r0, r0, #7
   176aa:	0880      	lsrpl	r0, r0, #2
	return 0;
   176ac:	2000      	movmi	r0, #0
}
   176ae:	4770      	bx	lr

000176b0 <dummy_timestamp>:
}
   176b0:	2000      	movs	r0, #0
   176b2:	4770      	bx	lr

000176b4 <default_get_timestamp>:
   176b4:	f002 bac3 	b.w	19c3e <sys_clock_cycle_get_32>

000176b8 <atomic_inc>:
{
   176b8:	4603      	mov	r3, r0
}
   176ba:	e8d3 0fef 	ldaex	r0, [r3]
   176be:	1c42      	adds	r2, r0, #1
   176c0:	e8c3 2fe1 	stlex	r1, r2, [r3]
   176c4:	2900      	cmp	r1, #0
   176c6:	d1f8      	bne.n	176ba <atomic_inc+0x2>
   176c8:	4770      	bx	lr

000176ca <z_log_vprintk>:
{
   176ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   176cc:	2300      	movs	r3, #0
   176ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
   176d2:	461a      	mov	r2, r3
   176d4:	4619      	mov	r1, r3
   176d6:	4618      	mov	r0, r3
   176d8:	e9cd 3300 	strd	r3, r3, [sp]
   176dc:	f7f3 f992 	bl	aa04 <z_impl_z_log_msg_runtime_vcreate>
}
   176e0:	b005      	add	sp, #20
   176e2:	f85d fb04 	ldr.w	pc, [sp], #4

000176e6 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   176e6:	2001      	movs	r0, #1
   176e8:	f7f2 bf50 	b.w	a58c <z_log_dropped>

000176ec <z_log_get_tag>:
}
   176ec:	2000      	movs	r0, #0
   176ee:	4770      	bx	lr

000176f0 <z_cbprintf_cpy>:
{
   176f0:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   176f2:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   176f6:	1b9b      	subs	r3, r3, r6
   176f8:	428b      	cmp	r3, r1
{
   176fa:	460c      	mov	r4, r1
   176fc:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   176fe:	d30a      	bcc.n	17716 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   17700:	6813      	ldr	r3, [r2, #0]
   17702:	460a      	mov	r2, r1
   17704:	4601      	mov	r1, r0
   17706:	1998      	adds	r0, r3, r6
   17708:	f000 fd51 	bl	181ae <memcpy>
	return len;
   1770c:	4620      	mov	r0, r4
	desc->off += len;
   1770e:	68ab      	ldr	r3, [r5, #8]
   17710:	4423      	add	r3, r4
   17712:	60ab      	str	r3, [r5, #8]
}
   17714:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   17716:	f06f 001b 	mvn.w	r0, #27
   1771a:	e7fb      	b.n	17714 <z_cbprintf_cpy+0x24>

0001771c <z_log_msg_finalize>:
{
   1771c:	b570      	push	{r4, r5, r6, lr}
   1771e:	460e      	mov	r6, r1
   17720:	4615      	mov	r5, r2
   17722:	4619      	mov	r1, r3
	if (!msg) {
   17724:	4604      	mov	r4, r0
   17726:	b918      	cbnz	r0, 17730 <z_log_msg_finalize+0x14>
}
   17728:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   1772c:	f7f2 bf2e 	b.w	a58c <z_log_dropped>
	if (data) {
   17730:	b133      	cbz	r3, 17740 <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
   17732:	f3c2 234a 	ubfx	r3, r2, #9, #11
   17736:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
   17738:	0d12      	lsrs	r2, r2, #20
   1773a:	4418      	add	r0, r3
   1773c:	f000 fd37 	bl	181ae <memcpy>
	msg->hdr.source = source;
   17740:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   17744:	4620      	mov	r0, r4
}
   17746:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   1774a:	f7f3 b8a3 	b.w	a894 <z_log_msg_commit>

0001774e <buffer_write>:
{
   1774e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17750:	4606      	mov	r6, r0
   17752:	460d      	mov	r5, r1
   17754:	4614      	mov	r4, r2
   17756:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   17758:	4621      	mov	r1, r4
   1775a:	4628      	mov	r0, r5
   1775c:	463a      	mov	r2, r7
   1775e:	47b0      	blx	r6
	} while (len != 0);
   17760:	1a24      	subs	r4, r4, r0
		buf += processed;
   17762:	4405      	add	r5, r0
	} while (len != 0);
   17764:	d1f8      	bne.n	17758 <buffer_write+0xa>
}
   17766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00017768 <cbvprintf>:
{
   17768:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   1776a:	2400      	movs	r4, #0
   1776c:	9400      	str	r4, [sp, #0]
   1776e:	f7f1 fda7 	bl	92c0 <z_cbvprintf_impl>
}
   17772:	b002      	add	sp, #8
   17774:	bd10      	pop	{r4, pc}

00017776 <log_output_flush>:
{
   17776:	b510      	push	{r4, lr}
		     output->control_block->offset,
   17778:	6842      	ldr	r2, [r0, #4]
{
   1777a:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   1777c:	e9d2 2300 	ldrd	r2, r3, [r2]
   17780:	6881      	ldr	r1, [r0, #8]
   17782:	6800      	ldr	r0, [r0, #0]
   17784:	f7ff ffe3 	bl	1774e <buffer_write>
	output->control_block->offset = 0;
   17788:	2200      	movs	r2, #0
   1778a:	6863      	ldr	r3, [r4, #4]
   1778c:	601a      	str	r2, [r3, #0]
}
   1778e:	bd10      	pop	{r4, pc}

00017790 <out_func>:
{
   17790:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   17792:	684b      	ldr	r3, [r1, #4]
{
   17794:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   17796:	681a      	ldr	r2, [r3, #0]
   17798:	68cb      	ldr	r3, [r1, #12]
{
   1779a:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1779c:	429a      	cmp	r2, r3
   1779e:	d102      	bne.n	177a6 <out_func+0x16>
		log_output_flush(out_ctx);
   177a0:	4608      	mov	r0, r1
   177a2:	f7ff ffe8 	bl	17776 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   177a6:	6863      	ldr	r3, [r4, #4]
   177a8:	e8d3 2fef 	ldaex	r2, [r3]
   177ac:	1c51      	adds	r1, r2, #1
   177ae:	e8c3 1fe0 	stlex	r0, r1, [r3]
   177b2:	2800      	cmp	r0, #0
   177b4:	d1f8      	bne.n	177a8 <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
   177b6:	68a3      	ldr	r3, [r4, #8]
}
   177b8:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
   177ba:	549d      	strb	r5, [r3, r2]
}
   177bc:	bd38      	pop	{r3, r4, r5, pc}

000177be <cr_out_func>:
	if (c == '\n') {
   177be:	280a      	cmp	r0, #10
{
   177c0:	b538      	push	{r3, r4, r5, lr}
   177c2:	4604      	mov	r4, r0
   177c4:	460d      	mov	r5, r1
	if (c == '\n') {
   177c6:	d102      	bne.n	177ce <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   177c8:	200d      	movs	r0, #13
   177ca:	f7ff ffe1 	bl	17790 <out_func>
	out_func(c, ctx);
   177ce:	4629      	mov	r1, r5
   177d0:	4620      	mov	r0, r4
   177d2:	f7ff ffdd 	bl	17790 <out_func>
}
   177d6:	2000      	movs	r0, #0
   177d8:	bd38      	pop	{r3, r4, r5, pc}

000177da <log_backend_uart_init>:
}
   177da:	4770      	bx	lr

000177dc <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   177dc:	b538      	push	{r3, r4, r5, lr}
   177de:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   177e0:	42ab      	cmp	r3, r5
{
   177e2:	4611      	mov	r1, r2
   177e4:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   177e6:	d804      	bhi.n	177f2 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   177e8:	461a      	mov	r2, r3
   177ea:	f000 fce0 	bl	181ae <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   177ee:	4620      	mov	r0, r4
   177f0:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   177f2:	2400      	movs	r4, #0
   177f4:	e7fb      	b.n	177ee <_copy+0x12>

000177f6 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   177f6:	f000 bce5 	b.w	181c4 <memset>

000177fa <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   177fa:	09c3      	lsrs	r3, r0, #7
   177fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   17800:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   17804:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   17808:	b2c0      	uxtb	r0, r0
   1780a:	4770      	bx	lr

0001780c <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1780c:	78cb      	ldrb	r3, [r1, #3]
   1780e:	7802      	ldrb	r2, [r0, #0]
   17810:	4053      	eors	r3, r2
   17812:	7003      	strb	r3, [r0, #0]
   17814:	884b      	ldrh	r3, [r1, #2]
   17816:	7842      	ldrb	r2, [r0, #1]
   17818:	4053      	eors	r3, r2
   1781a:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1781c:	680a      	ldr	r2, [r1, #0]
   1781e:	7883      	ldrb	r3, [r0, #2]
   17820:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   17824:	7083      	strb	r3, [r0, #2]
   17826:	680a      	ldr	r2, [r1, #0]
   17828:	78c3      	ldrb	r3, [r0, #3]
   1782a:	4053      	eors	r3, r2
   1782c:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1782e:	79cb      	ldrb	r3, [r1, #7]
   17830:	7902      	ldrb	r2, [r0, #4]
   17832:	4053      	eors	r3, r2
   17834:	7103      	strb	r3, [r0, #4]
   17836:	88cb      	ldrh	r3, [r1, #6]
   17838:	7942      	ldrb	r2, [r0, #5]
   1783a:	4053      	eors	r3, r2
   1783c:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1783e:	684a      	ldr	r2, [r1, #4]
   17840:	7983      	ldrb	r3, [r0, #6]
   17842:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   17846:	7183      	strb	r3, [r0, #6]
   17848:	684a      	ldr	r2, [r1, #4]
   1784a:	79c3      	ldrb	r3, [r0, #7]
   1784c:	4053      	eors	r3, r2
   1784e:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   17850:	7acb      	ldrb	r3, [r1, #11]
   17852:	7a02      	ldrb	r2, [r0, #8]
   17854:	4053      	eors	r3, r2
   17856:	7203      	strb	r3, [r0, #8]
   17858:	7a42      	ldrb	r2, [r0, #9]
   1785a:	894b      	ldrh	r3, [r1, #10]
   1785c:	4053      	eors	r3, r2
   1785e:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   17860:	688a      	ldr	r2, [r1, #8]
   17862:	7a83      	ldrb	r3, [r0, #10]
   17864:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   17868:	7283      	strb	r3, [r0, #10]
   1786a:	688a      	ldr	r2, [r1, #8]
   1786c:	7ac3      	ldrb	r3, [r0, #11]
   1786e:	4053      	eors	r3, r2
   17870:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   17872:	7bcb      	ldrb	r3, [r1, #15]
   17874:	7b02      	ldrb	r2, [r0, #12]
   17876:	4053      	eors	r3, r2
   17878:	7303      	strb	r3, [r0, #12]
   1787a:	89cb      	ldrh	r3, [r1, #14]
   1787c:	7b42      	ldrb	r2, [r0, #13]
   1787e:	4053      	eors	r3, r2
   17880:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   17882:	68ca      	ldr	r2, [r1, #12]
   17884:	7b83      	ldrb	r3, [r0, #14]
   17886:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1788a:	7383      	strb	r3, [r0, #14]
   1788c:	68ca      	ldr	r2, [r1, #12]
   1788e:	7bc3      	ldrb	r3, [r0, #15]
   17890:	4053      	eors	r3, r2
   17892:	73c3      	strb	r3, [r0, #15]
}
   17894:	4770      	bx	lr

00017896 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   17896:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   17898:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1789a:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1789c:	f88d 2000 	strb.w	r2, [sp]
   178a0:	7942      	ldrb	r2, [r0, #5]
   178a2:	f88d 2001 	strb.w	r2, [sp, #1]
   178a6:	7a82      	ldrb	r2, [r0, #10]
   178a8:	f88d 2002 	strb.w	r2, [sp, #2]
   178ac:	7bc2      	ldrb	r2, [r0, #15]
   178ae:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   178b2:	7902      	ldrb	r2, [r0, #4]
   178b4:	f88d 2004 	strb.w	r2, [sp, #4]
   178b8:	7a42      	ldrb	r2, [r0, #9]
   178ba:	f88d 2005 	strb.w	r2, [sp, #5]
   178be:	7b82      	ldrb	r2, [r0, #14]
   178c0:	f88d 2006 	strb.w	r2, [sp, #6]
   178c4:	78c2      	ldrb	r2, [r0, #3]
   178c6:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   178ca:	7a02      	ldrb	r2, [r0, #8]
   178cc:	f88d 2008 	strb.w	r2, [sp, #8]
   178d0:	7b42      	ldrb	r2, [r0, #13]
   178d2:	f88d 2009 	strb.w	r2, [sp, #9]
   178d6:	7882      	ldrb	r2, [r0, #2]
   178d8:	f88d 200a 	strb.w	r2, [sp, #10]
   178dc:	79c2      	ldrb	r2, [r0, #7]
   178de:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   178e2:	7b02      	ldrb	r2, [r0, #12]
   178e4:	f88d 200c 	strb.w	r2, [sp, #12]
   178e8:	7842      	ldrb	r2, [r0, #1]
   178ea:	f88d 200d 	strb.w	r2, [sp, #13]
   178ee:	7982      	ldrb	r2, [r0, #6]
   178f0:	f88d 200e 	strb.w	r2, [sp, #14]
   178f4:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   178f8:	2310      	movs	r3, #16
   178fa:	466a      	mov	r2, sp
   178fc:	4619      	mov	r1, r3
   178fe:	f7ff ff6d 	bl	177dc <_copy>
}
   17902:	b005      	add	sp, #20
   17904:	f85d fb04 	ldr.w	pc, [sp], #4

00017908 <mult_row_column>:
{
   17908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1790a:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1790c:	7808      	ldrb	r0, [r1, #0]
{
   1790e:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   17910:	f7ff ff73 	bl	177fa <_double_byte>
   17914:	4605      	mov	r5, r0
   17916:	7860      	ldrb	r0, [r4, #1]
   17918:	f7ff ff6f 	bl	177fa <_double_byte>
   1791c:	78a2      	ldrb	r2, [r4, #2]
   1791e:	7863      	ldrb	r3, [r4, #1]
   17920:	4053      	eors	r3, r2
   17922:	78e2      	ldrb	r2, [r4, #3]
   17924:	4053      	eors	r3, r2
   17926:	405d      	eors	r5, r3
   17928:	4068      	eors	r0, r5
   1792a:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1792c:	7860      	ldrb	r0, [r4, #1]
   1792e:	7827      	ldrb	r7, [r4, #0]
   17930:	f7ff ff63 	bl	177fa <_double_byte>
   17934:	4605      	mov	r5, r0
   17936:	78a0      	ldrb	r0, [r4, #2]
   17938:	f7ff ff5f 	bl	177fa <_double_byte>
   1793c:	78a3      	ldrb	r3, [r4, #2]
   1793e:	405f      	eors	r7, r3
   17940:	78e3      	ldrb	r3, [r4, #3]
   17942:	405f      	eors	r7, r3
   17944:	407d      	eors	r5, r7
   17946:	4068      	eors	r0, r5
   17948:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1794a:	7863      	ldrb	r3, [r4, #1]
   1794c:	7827      	ldrb	r7, [r4, #0]
   1794e:	78a0      	ldrb	r0, [r4, #2]
   17950:	405f      	eors	r7, r3
   17952:	f7ff ff52 	bl	177fa <_double_byte>
   17956:	4605      	mov	r5, r0
   17958:	78e0      	ldrb	r0, [r4, #3]
   1795a:	f7ff ff4e 	bl	177fa <_double_byte>
   1795e:	78e3      	ldrb	r3, [r4, #3]
   17960:	405f      	eors	r7, r3
   17962:	407d      	eors	r5, r7
   17964:	4068      	eors	r0, r5
   17966:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   17968:	7820      	ldrb	r0, [r4, #0]
   1796a:	f7ff ff46 	bl	177fa <_double_byte>
   1796e:	7862      	ldrb	r2, [r4, #1]
   17970:	7823      	ldrb	r3, [r4, #0]
   17972:	4053      	eors	r3, r2
   17974:	78a2      	ldrb	r2, [r4, #2]
   17976:	4053      	eors	r3, r2
   17978:	ea80 0503 	eor.w	r5, r0, r3
   1797c:	78e0      	ldrb	r0, [r4, #3]
   1797e:	f7ff ff3c 	bl	177fa <_double_byte>
   17982:	b2ed      	uxtb	r5, r5
   17984:	4045      	eors	r5, r0
   17986:	70f5      	strb	r5, [r6, #3]
}
   17988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001798a <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1798a:	b570      	push	{r4, r5, r6, lr}
   1798c:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1798e:	4605      	mov	r5, r0
{
   17990:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   17992:	2800      	cmp	r0, #0
   17994:	d049      	beq.n	17a2a <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   17996:	2900      	cmp	r1, #0
   17998:	d049      	beq.n	17a2e <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1799a:	2a00      	cmp	r2, #0
   1799c:	d049      	beq.n	17a32 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1799e:	2310      	movs	r3, #16
   179a0:	460a      	mov	r2, r1
   179a2:	4668      	mov	r0, sp
   179a4:	4619      	mov	r1, r3
   179a6:	f7ff ff19 	bl	177dc <_copy>
	add_round_key(state, s->words);
   179aa:	4621      	mov	r1, r4
   179ac:	4668      	mov	r0, sp
   179ae:	f7ff ff2d 	bl	1780c <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   179b2:	3410      	adds	r4, #16
   179b4:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   179b8:	4668      	mov	r0, sp
   179ba:	f7f3 fbbb 	bl	b134 <sub_bytes>
		shift_rows(state);
   179be:	4668      	mov	r0, sp
   179c0:	f7ff ff69 	bl	17896 <shift_rows>
	mult_row_column(t, s);
   179c4:	4669      	mov	r1, sp
   179c6:	a804      	add	r0, sp, #16
   179c8:	f7ff ff9e 	bl	17908 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   179cc:	a901      	add	r1, sp, #4
   179ce:	a805      	add	r0, sp, #20
   179d0:	f7ff ff9a 	bl	17908 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   179d4:	a902      	add	r1, sp, #8
   179d6:	a806      	add	r0, sp, #24
   179d8:	f7ff ff96 	bl	17908 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   179dc:	a903      	add	r1, sp, #12
   179de:	a807      	add	r0, sp, #28
   179e0:	f7ff ff92 	bl	17908 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   179e4:	2310      	movs	r3, #16
   179e6:	4668      	mov	r0, sp
   179e8:	4619      	mov	r1, r3
   179ea:	eb0d 0203 	add.w	r2, sp, r3
   179ee:	f7ff fef5 	bl	177dc <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   179f2:	4621      	mov	r1, r4
   179f4:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   179f6:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   179f8:	f7ff ff08 	bl	1780c <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   179fc:	42b4      	cmp	r4, r6
   179fe:	d1db      	bne.n	179b8 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   17a00:	f7f3 fb98 	bl	b134 <sub_bytes>
	shift_rows(state);
   17a04:	4668      	mov	r0, sp
   17a06:	f7ff ff46 	bl	17896 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   17a0a:	4621      	mov	r1, r4
   17a0c:	4668      	mov	r0, sp
   17a0e:	f7ff fefd 	bl	1780c <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   17a12:	2310      	movs	r3, #16
   17a14:	466a      	mov	r2, sp
   17a16:	4619      	mov	r1, r3
   17a18:	4628      	mov	r0, r5
   17a1a:	f7ff fedf 	bl	177dc <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   17a1e:	4668      	mov	r0, sp
   17a20:	2210      	movs	r2, #16
   17a22:	2100      	movs	r1, #0
   17a24:	f7ff fee7 	bl	177f6 <_set>

	return TC_CRYPTO_SUCCESS;
   17a28:	2001      	movs	r0, #1
}
   17a2a:	b008      	add	sp, #32
   17a2c:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   17a2e:	4608      	mov	r0, r1
   17a30:	e7fb      	b.n	17a2a <tc_aes_encrypt+0xa0>
   17a32:	4610      	mov	r0, r2
   17a34:	e7f9      	b.n	17a2a <tc_aes_encrypt+0xa0>

00017a36 <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   17a36:	460a      	mov	r2, r1
{
   17a38:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   17a3a:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   17a3e:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   17a40:	2b00      	cmp	r3, #0
   17a42:	bfac      	ite	ge
   17a44:	2300      	movge	r3, #0
   17a46:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   17a48:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   17a4c:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   17a50:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   17a52:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   17a56:	d002      	beq.n	17a5e <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   17a58:	7813      	ldrb	r3, [r2, #0]
   17a5a:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   17a5c:	e7f4      	b.n	17a48 <gf_double+0x12>
	}
}
   17a5e:	bd10      	pop	{r4, pc}

00017a60 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   17a60:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   17a62:	b120      	cbz	r0, 17a6e <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   17a64:	2258      	movs	r2, #88	; 0x58
   17a66:	2100      	movs	r1, #0
   17a68:	f7ff fec5 	bl	177f6 <_set>
   17a6c:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   17a6e:	bd08      	pop	{r3, pc}

00017a70 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   17a70:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   17a72:	4604      	mov	r4, r0
   17a74:	b188      	cbz	r0, 17a9a <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   17a76:	2210      	movs	r2, #16
   17a78:	2100      	movs	r1, #0
   17a7a:	f7ff febc 	bl	177f6 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   17a7e:	2210      	movs	r2, #16
   17a80:	f104 0030 	add.w	r0, r4, #48	; 0x30
   17a84:	2100      	movs	r1, #0
   17a86:	f7ff feb6 	bl	177f6 <_set>
	s->leftover_offset = 0;
   17a8a:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   17a8c:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   17a8e:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   17a90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   17a94:	2001      	movs	r0, #1
   17a96:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   17a9a:	bd10      	pop	{r4, pc}

00017a9c <tc_cmac_setup>:
{
   17a9c:	b570      	push	{r4, r5, r6, lr}
   17a9e:	4604      	mov	r4, r0
   17aa0:	460d      	mov	r5, r1
   17aa2:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   17aa4:	b310      	cbz	r0, 17aec <tc_cmac_setup+0x50>
   17aa6:	b311      	cbz	r1, 17aee <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   17aa8:	2258      	movs	r2, #88	; 0x58
   17aaa:	2100      	movs	r1, #0
   17aac:	f7ff fea3 	bl	177f6 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   17ab0:	4629      	mov	r1, r5
   17ab2:	4630      	mov	r0, r6
	s->sched = sched;
   17ab4:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   17ab6:	f7f3 fb49 	bl	b14c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   17aba:	2210      	movs	r2, #16
   17abc:	2100      	movs	r1, #0
   17abe:	4620      	mov	r0, r4
   17ac0:	f7ff fe99 	bl	177f6 <_set>
	gf_double (s->K1, s->iv);
   17ac4:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   17ac8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   17aca:	4621      	mov	r1, r4
   17acc:	4620      	mov	r0, r4
   17ace:	f7ff ff5c 	bl	1798a <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   17ad2:	4621      	mov	r1, r4
   17ad4:	4628      	mov	r0, r5
   17ad6:	f7ff ffae 	bl	17a36 <gf_double>
	gf_double (s->K2, s->K1);
   17ada:	4629      	mov	r1, r5
   17adc:	f104 0020 	add.w	r0, r4, #32
   17ae0:	f7ff ffa9 	bl	17a36 <gf_double>
	tc_cmac_init(s);
   17ae4:	4620      	mov	r0, r4
   17ae6:	f7ff ffc3 	bl	17a70 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   17aea:	2001      	movs	r0, #1
}
   17aec:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   17aee:	4608      	mov	r0, r1
   17af0:	e7fc      	b.n	17aec <tc_cmac_setup+0x50>

00017af2 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   17af2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17af6:	460e      	mov	r6, r1
   17af8:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   17afa:	4604      	mov	r4, r0
   17afc:	2800      	cmp	r0, #0
   17afe:	d060      	beq.n	17bc2 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   17b00:	b1fa      	cbz	r2, 17b42 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   17b02:	2900      	cmp	r1, #0
   17b04:	d05d      	beq.n	17bc2 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   17b06:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   17b0a:	ea53 0102 	orrs.w	r1, r3, r2
   17b0e:	d058      	beq.n	17bc2 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   17b10:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   17b12:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   17b16:	f142 32ff 	adc.w	r2, r2, #4294967295
   17b1a:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   17b1e:	f1b8 0f00 	cmp.w	r8, #0
   17b22:	d02c      	beq.n	17b7e <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   17b24:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   17b28:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   17b2c:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   17b2e:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   17b30:	d20a      	bcs.n	17b48 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   17b32:	462b      	mov	r3, r5
   17b34:	4632      	mov	r2, r6
   17b36:	4629      	mov	r1, r5
   17b38:	f7ff fe50 	bl	177dc <_copy>
			s->leftover_offset += data_length;
   17b3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   17b3e:	442b      	add	r3, r5
   17b40:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   17b42:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   17b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   17b48:	463b      	mov	r3, r7
   17b4a:	4632      	mov	r2, r6
   17b4c:	4639      	mov	r1, r7
   17b4e:	f7ff fe45 	bl	177dc <_copy>
		s->leftover_offset = 0;
   17b52:	2300      	movs	r3, #0
   17b54:	3d10      	subs	r5, #16
   17b56:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   17b58:	4445      	add	r5, r8
		data += remaining_space;
   17b5a:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   17b5c:	1e63      	subs	r3, r4, #1
   17b5e:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   17b62:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   17b66:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   17b6a:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   17b6c:	ea82 0200 	eor.w	r2, r2, r0
   17b70:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   17b72:	d1f6      	bne.n	17b62 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   17b74:	4621      	mov	r1, r4
   17b76:	4620      	mov	r0, r4
   17b78:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   17b7a:	f7ff ff06 	bl	1798a <tc_aes_encrypt>
   17b7e:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   17b82:	2d10      	cmp	r5, #16
   17b84:	d80a      	bhi.n	17b9c <tc_cmac_update+0xaa>
	if (data_length > 0) {
   17b86:	2d00      	cmp	r5, #0
   17b88:	d0db      	beq.n	17b42 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   17b8a:	462b      	mov	r3, r5
   17b8c:	4632      	mov	r2, r6
   17b8e:	4629      	mov	r1, r5
   17b90:	f104 0030 	add.w	r0, r4, #48	; 0x30
   17b94:	f7ff fe22 	bl	177dc <_copy>
		s->leftover_offset = data_length;
   17b98:	6465      	str	r5, [r4, #68]	; 0x44
   17b9a:	e7d2      	b.n	17b42 <tc_cmac_update+0x50>
   17b9c:	1e63      	subs	r3, r4, #1
   17b9e:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   17ba0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   17ba4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   17ba8:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   17baa:	ea82 0200 	eor.w	r2, r2, r0
   17bae:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   17bb0:	d1f6      	bne.n	17ba0 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   17bb2:	4621      	mov	r1, r4
   17bb4:	4620      	mov	r0, r4
   17bb6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   17bb8:	f7ff fee7 	bl	1798a <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   17bbc:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   17bbe:	3d10      	subs	r5, #16
   17bc0:	e7df      	b.n	17b82 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   17bc2:	2000      	movs	r0, #0
   17bc4:	e7be      	b.n	17b44 <tc_cmac_update+0x52>

00017bc6 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   17bc6:	b570      	push	{r4, r5, r6, lr}
   17bc8:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   17bca:	4605      	mov	r5, r0
   17bcc:	b1f0      	cbz	r0, 17c0c <tc_cmac_final+0x46>
   17bce:	b371      	cbz	r1, 17c2e <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   17bd0:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   17bd2:	2a10      	cmp	r2, #16
   17bd4:	d11b      	bne.n	17c0e <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   17bd6:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   17bd8:	1e63      	subs	r3, r4, #1
   17bda:	3901      	subs	r1, #1
   17bdc:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   17be0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   17be4:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   17be8:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   17bea:	ea82 0206 	eor.w	r2, r2, r6
   17bee:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   17bf2:	ea82 0206 	eor.w	r2, r2, r6
   17bf6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   17bf8:	d1f2      	bne.n	17be0 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   17bfa:	4621      	mov	r1, r4
   17bfc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   17bfe:	4628      	mov	r0, r5
   17c00:	f7ff fec3 	bl	1798a <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   17c04:	4620      	mov	r0, r4
   17c06:	f7ff ff2b 	bl	17a60 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   17c0a:	2001      	movs	r0, #1
}
   17c0c:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   17c0e:	f102 0030 	add.w	r0, r2, #48	; 0x30
   17c12:	2100      	movs	r1, #0
   17c14:	f1c2 0210 	rsb	r2, r2, #16
   17c18:	4420      	add	r0, r4
   17c1a:	f7ff fdec 	bl	177f6 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   17c1e:	2280      	movs	r2, #128	; 0x80
   17c20:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   17c22:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   17c26:	4423      	add	r3, r4
   17c28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   17c2c:	e7d4      	b.n	17bd8 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   17c2e:	4608      	mov	r0, r1
   17c30:	e7ec      	b.n	17c0c <tc_cmac_final+0x46>

00017c32 <tc_sha256_update>:
{
   17c32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17c34:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   17c36:	b110      	cbz	r0, 17c3e <tc_sha256_update+0xc>
   17c38:	b1f9      	cbz	r1, 17c7a <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   17c3a:	b90a      	cbnz	r2, 17c40 <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   17c3c:	2001      	movs	r0, #1
}
   17c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   17c40:	2700      	movs	r7, #0
   17c42:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   17c44:	f100 0628 	add.w	r6, r0, #40	; 0x28
		s->leftover[s->leftover_offset++] = *(data++);
   17c48:	6e83      	ldr	r3, [r0, #104]	; 0x68
   17c4a:	1c5a      	adds	r2, r3, #1
   17c4c:	6682      	str	r2, [r0, #104]	; 0x68
   17c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
   17c52:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   17c54:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   17c56:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   17c5a:	d90b      	bls.n	17c74 <tc_sha256_update+0x42>
			compress(s->iv, s->leftover);
   17c5c:	4631      	mov	r1, r6
   17c5e:	f7f3 fac9 	bl	b1f4 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   17c62:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   17c66:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   17c6a:	f142 0200 	adc.w	r2, r2, #0
   17c6e:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   17c72:	6687      	str	r7, [r0, #104]	; 0x68
	while (datalen-- > 0) {
   17c74:	42a5      	cmp	r5, r4
   17c76:	d1e7      	bne.n	17c48 <tc_sha256_update+0x16>
   17c78:	e7e0      	b.n	17c3c <tc_sha256_update+0xa>
		return TC_CRYPTO_FAIL;
   17c7a:	4608      	mov	r0, r1
   17c7c:	e7df      	b.n	17c3e <tc_sha256_update+0xc>

00017c7e <tc_sha256_final>:
{
   17c7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17c80:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   17c82:	4605      	mov	r5, r0
   17c84:	2800      	cmp	r0, #0
   17c86:	d054      	beq.n	17d32 <tc_sha256_final+0xb4>
   17c88:	2900      	cmp	r1, #0
   17c8a:	d053      	beq.n	17d34 <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   17c8c:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   17c8e:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   17c92:	00d8      	lsls	r0, r3, #3
   17c94:	1812      	adds	r2, r2, r0
   17c96:	f141 0100 	adc.w	r1, r1, #0
   17c9a:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   17c9e:	2280      	movs	r2, #128	; 0x80
   17ca0:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   17ca2:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   17ca4:	4423      	add	r3, r4
   17ca6:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   17ca8:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   17cac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   17cb0:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   17cb4:	d90a      	bls.n	17ccc <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   17cb6:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   17cba:	4639      	mov	r1, r7
   17cbc:	4430      	add	r0, r6
   17cbe:	f7ff fd9a 	bl	177f6 <_set>
		compress(s->iv, s->leftover);
   17cc2:	4631      	mov	r1, r6
   17cc4:	4620      	mov	r0, r4
   17cc6:	f7f3 fa95 	bl	b1f4 <compress>
		s->leftover_offset = 0;
   17cca:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   17ccc:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   17cce:	2100      	movs	r1, #0
   17cd0:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   17cd4:	4430      	add	r0, r6
   17cd6:	f7ff fd8e 	bl	177f6 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   17cda:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   17cdc:	4631      	mov	r1, r6
   17cde:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   17ce0:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   17ce2:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   17ce4:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   17ce6:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   17cea:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   17cee:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   17cf0:	0e1b      	lsrs	r3, r3, #24
   17cf2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
   17cf6:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   17cf8:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   17cfc:	f7f3 fa7a 	bl	b1f4 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   17d00:	1d2b      	adds	r3, r5, #4
   17d02:	1f21      	subs	r1, r4, #4
   17d04:	3524      	adds	r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   17d06:	f851 2f04 	ldr.w	r2, [r1, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   17d0a:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   17d0c:	0e10      	lsrs	r0, r2, #24
   17d0e:	f803 0c08 	strb.w	r0, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   17d12:	0c10      	lsrs	r0, r2, #16
   17d14:	f803 0c07 	strb.w	r0, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   17d18:	0a10      	lsrs	r0, r2, #8
   17d1a:	f803 0c06 	strb.w	r0, [r3, #-6]
		*digest++ = (uint8_t)(t);
   17d1e:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   17d22:	42ab      	cmp	r3, r5
   17d24:	d1ef      	bne.n	17d06 <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   17d26:	4620      	mov	r0, r4
   17d28:	2270      	movs	r2, #112	; 0x70
   17d2a:	2100      	movs	r1, #0
   17d2c:	f7ff fd63 	bl	177f6 <_set>
	return TC_CRYPTO_SUCCESS;
   17d30:	2001      	movs	r0, #1
}
   17d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   17d34:	4608      	mov	r0, r1
   17d36:	e7fc      	b.n	17d32 <tc_sha256_final+0xb4>

00017d38 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   17d38:	b530      	push	{r4, r5, lr}
   17d3a:	1e43      	subs	r3, r0, #1
   17d3c:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   17d3e:	42a9      	cmp	r1, r5
   17d40:	d106      	bne.n	17d50 <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   17d42:	2136      	movs	r1, #54	; 0x36
   17d44:	245c      	movs	r4, #92	; 0x5c
   17d46:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   17d48:	1a13      	subs	r3, r2, r0
   17d4a:	2b3f      	cmp	r3, #63	; 0x3f
   17d4c:	d90c      	bls.n	17d68 <rekey+0x30>
	}
}
   17d4e:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   17d50:	780c      	ldrb	r4, [r1, #0]
   17d52:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   17d56:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   17d5a:	f811 4b01 	ldrb.w	r4, [r1], #1
   17d5e:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   17d62:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   17d66:	e7ea      	b.n	17d3e <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   17d68:	f802 1b01 	strb.w	r1, [r2], #1
   17d6c:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   17d70:	e7ea      	b.n	17d48 <rekey+0x10>

00017d72 <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   17d72:	b5f0      	push	{r4, r5, r6, r7, lr}
   17d74:	460e      	mov	r6, r1
   17d76:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   17d78:	4605      	mov	r5, r0
{
   17d7a:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   17d7c:	b1b8      	cbz	r0, 17dae <tc_hmac_set_key+0x3c>
   17d7e:	b341      	cbz	r1, 17dd2 <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   17d80:	b34a      	cbz	r2, 17dd6 <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   17d82:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   17d84:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   17d88:	d813      	bhi.n	17db2 <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   17d8a:	a810      	add	r0, sp, #64	; 0x40
   17d8c:	f7f3 fb1c 	bl	b3c8 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   17d90:	4622      	mov	r2, r4
   17d92:	4669      	mov	r1, sp
   17d94:	a810      	add	r0, sp, #64	; 0x40
   17d96:	f7ff ff4c 	bl	17c32 <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   17d9a:	a910      	add	r1, sp, #64	; 0x40
   17d9c:	a834      	add	r0, sp, #208	; 0xd0
   17d9e:	f7ff ff6e 	bl	17c7e <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   17da2:	4622      	mov	r2, r4
   17da4:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   17da6:	4638      	mov	r0, r7
   17da8:	f7ff ffc6 	bl	17d38 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   17dac:	2001      	movs	r0, #1
}
   17dae:	b04d      	add	sp, #308	; 0x134
   17db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   17db2:	f7f3 fb09 	bl	b3c8 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   17db6:	4622      	mov	r2, r4
   17db8:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   17dba:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   17dbe:	4628      	mov	r0, r5
   17dc0:	f7ff ff37 	bl	17c32 <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   17dc4:	4629      	mov	r1, r5
   17dc6:	4620      	mov	r0, r4
   17dc8:	f7ff ff59 	bl	17c7e <tc_sha256_final>
		rekey(ctx->key,
   17dcc:	2220      	movs	r2, #32
   17dce:	4621      	mov	r1, r4
   17dd0:	e7e9      	b.n	17da6 <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   17dd2:	4608      	mov	r0, r1
   17dd4:	e7eb      	b.n	17dae <tc_hmac_set_key+0x3c>
   17dd6:	4610      	mov	r0, r2
   17dd8:	e7e9      	b.n	17dae <tc_hmac_set_key+0x3c>

00017dda <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   17dda:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   17ddc:	4604      	mov	r4, r0
   17dde:	b140      	cbz	r0, 17df2 <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   17de0:	f7f3 faf2 	bl	b3c8 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   17de4:	2240      	movs	r2, #64	; 0x40
   17de6:	4620      	mov	r0, r4
   17de8:	f104 0170 	add.w	r1, r4, #112	; 0x70
   17dec:	f7ff ff21 	bl	17c32 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   17df0:	2001      	movs	r0, #1
}
   17df2:	bd10      	pop	{r4, pc}

00017df4 <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   17df4:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   17df6:	b110      	cbz	r0, 17dfe <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   17df8:	f7ff ff1b 	bl	17c32 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   17dfc:	2001      	movs	r0, #1
}
   17dfe:	bd08      	pop	{r3, pc}

00017e00 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   17e00:	b570      	push	{r4, r5, r6, lr}
   17e02:	460e      	mov	r6, r1
   17e04:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   17e06:	4605      	mov	r5, r0
   17e08:	b1f0      	cbz	r0, 17e48 <tc_hmac_final+0x48>
   17e0a:	2920      	cmp	r1, #32
   17e0c:	d11c      	bne.n	17e48 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   17e0e:	b1ea      	cbz	r2, 17e4c <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   17e10:	4611      	mov	r1, r2
   17e12:	f7ff ff34 	bl	17c7e <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   17e16:	4620      	mov	r0, r4
   17e18:	f7f3 fad6 	bl	b3c8 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   17e1c:	2240      	movs	r2, #64	; 0x40
   17e1e:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   17e22:	4620      	mov	r0, r4
   17e24:	f7ff ff05 	bl	17c32 <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   17e28:	4632      	mov	r2, r6
   17e2a:	4629      	mov	r1, r5
   17e2c:	4620      	mov	r0, r4
   17e2e:	f7ff ff00 	bl	17c32 <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   17e32:	4621      	mov	r1, r4
   17e34:	4628      	mov	r0, r5
   17e36:	f7ff ff22 	bl	17c7e <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   17e3a:	4620      	mov	r0, r4
   17e3c:	22f0      	movs	r2, #240	; 0xf0
   17e3e:	2100      	movs	r1, #0
   17e40:	f7ff fcd9 	bl	177f6 <_set>

	return TC_CRYPTO_SUCCESS;
   17e44:	2001      	movs	r0, #1
}
   17e46:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   17e48:	2000      	movs	r0, #0
   17e4a:	e7fc      	b.n	17e46 <tc_hmac_final+0x46>
   17e4c:	4610      	mov	r0, r2
   17e4e:	e7fa      	b.n	17e46 <tc_hmac_final+0x46>

00017e50 <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   17e50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e54:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   17e56:	f04f 0b01 	mov.w	fp, #1
{
   17e5a:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   17e5c:	2300      	movs	r3, #0
{
   17e5e:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   17e60:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   17e64:	4631      	mov	r1, r6
{
   17e66:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   17e68:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   17e6a:	f88d 3006 	strb.w	r3, [sp, #6]
{
   17e6e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   17e72:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   17e76:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   17e7a:	f7ff ff7a 	bl	17d72 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   17e7e:	4620      	mov	r0, r4
   17e80:	f7ff ffab 	bl	17dda <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   17e84:	2220      	movs	r2, #32
   17e86:	4629      	mov	r1, r5
   17e88:	4620      	mov	r0, r4
   17e8a:	f7ff ffb3 	bl	17df4 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   17e8e:	465a      	mov	r2, fp
   17e90:	4620      	mov	r0, r4
   17e92:	f10d 0106 	add.w	r1, sp, #6
   17e96:	f7ff ffad 	bl	17df4 <tc_hmac_update>

	if (data && datalen)
   17e9a:	f1b8 0f00 	cmp.w	r8, #0
   17e9e:	d007      	beq.n	17eb0 <update+0x60>
   17ea0:	f1b9 0f00 	cmp.w	r9, #0
   17ea4:	d004      	beq.n	17eb0 <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   17ea6:	464a      	mov	r2, r9
   17ea8:	4641      	mov	r1, r8
   17eaa:	4620      	mov	r0, r4
   17eac:	f7ff ffa2 	bl	17df4 <tc_hmac_update>
	if (additional_data && additional_datalen)
   17eb0:	b13f      	cbz	r7, 17ec2 <update+0x72>
   17eb2:	f1ba 0f00 	cmp.w	sl, #0
   17eb6:	d004      	beq.n	17ec2 <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   17eb8:	4652      	mov	r2, sl
   17eba:	4639      	mov	r1, r7
   17ebc:	4620      	mov	r0, r4
   17ebe:	f7ff ff99 	bl	17df4 <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   17ec2:	4622      	mov	r2, r4
   17ec4:	2120      	movs	r1, #32
   17ec6:	4630      	mov	r0, r6
   17ec8:	f7ff ff9a 	bl	17e00 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   17ecc:	2220      	movs	r2, #32
   17ece:	4631      	mov	r1, r6
   17ed0:	4620      	mov	r0, r4
   17ed2:	f7ff ff4e 	bl	17d72 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   17ed6:	4620      	mov	r0, r4
   17ed8:	f7ff ff7f 	bl	17dda <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   17edc:	2220      	movs	r2, #32
   17ede:	4629      	mov	r1, r5
   17ee0:	4620      	mov	r0, r4
   17ee2:	f7ff ff87 	bl	17df4 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   17ee6:	4622      	mov	r2, r4
   17ee8:	2120      	movs	r1, #32
   17eea:	4628      	mov	r0, r5
   17eec:	f7ff ff88 	bl	17e00 <tc_hmac_final>

	if (data == 0 || datalen == 0)
   17ef0:	f1b8 0f00 	cmp.w	r8, #0
   17ef4:	d03a      	beq.n	17f6c <update+0x11c>
   17ef6:	f1b9 0f00 	cmp.w	r9, #0
   17efa:	d037      	beq.n	17f6c <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   17efc:	2220      	movs	r2, #32
   17efe:	4631      	mov	r1, r6
   17f00:	4620      	mov	r0, r4
   17f02:	f7ff ff36 	bl	17d72 <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   17f06:	4620      	mov	r0, r4
   17f08:	f7ff ff67 	bl	17dda <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   17f0c:	2220      	movs	r2, #32
   17f0e:	4629      	mov	r1, r5
   17f10:	4620      	mov	r0, r4
   17f12:	f7ff ff6f 	bl	17df4 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   17f16:	2201      	movs	r2, #1
   17f18:	f10d 0107 	add.w	r1, sp, #7
   17f1c:	4620      	mov	r0, r4
   17f1e:	f7ff ff69 	bl	17df4 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   17f22:	464a      	mov	r2, r9
   17f24:	4641      	mov	r1, r8
   17f26:	4620      	mov	r0, r4
   17f28:	f7ff ff64 	bl	17df4 <tc_hmac_update>
	if (additional_data && additional_datalen)
   17f2c:	b13f      	cbz	r7, 17f3e <update+0xee>
   17f2e:	f1ba 0f00 	cmp.w	sl, #0
   17f32:	d004      	beq.n	17f3e <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   17f34:	4652      	mov	r2, sl
   17f36:	4639      	mov	r1, r7
   17f38:	4620      	mov	r0, r4
   17f3a:	f7ff ff5b 	bl	17df4 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   17f3e:	4622      	mov	r2, r4
   17f40:	2120      	movs	r1, #32
   17f42:	4630      	mov	r0, r6
   17f44:	f7ff ff5c 	bl	17e00 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   17f48:	2220      	movs	r2, #32
   17f4a:	4631      	mov	r1, r6
   17f4c:	4620      	mov	r0, r4
   17f4e:	f7ff ff10 	bl	17d72 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   17f52:	4620      	mov	r0, r4
   17f54:	f7ff ff41 	bl	17dda <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   17f58:	2220      	movs	r2, #32
   17f5a:	4629      	mov	r1, r5
   17f5c:	4620      	mov	r0, r4
   17f5e:	f7ff ff49 	bl	17df4 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   17f62:	4622      	mov	r2, r4
   17f64:	2120      	movs	r1, #32
   17f66:	4628      	mov	r0, r5
   17f68:	f7ff ff4a 	bl	17e00 <tc_hmac_final>
}
   17f6c:	b003      	add	sp, #12
   17f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017f72 <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   17f72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17f74:	460c      	mov	r4, r1
   17f76:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   17f78:	4605      	mov	r5, r0
   17f7a:	b1b0      	cbz	r0, 17faa <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   17f7c:	b1b9      	cbz	r1, 17fae <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   17f7e:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   17f80:	2220      	movs	r2, #32
   17f82:	2100      	movs	r1, #0
   17f84:	30f0      	adds	r0, #240	; 0xf0
   17f86:	f7ff fc36 	bl	177f6 <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   17f8a:	2220      	movs	r2, #32
   17f8c:	2101      	movs	r1, #1
   17f8e:	f505 7088 	add.w	r0, r5, #272	; 0x110
   17f92:	f7ff fc30 	bl	177f6 <_set>
	update(prng, personalization, plen, 0, 0);
   17f96:	4628      	mov	r0, r5
   17f98:	4633      	mov	r3, r6
   17f9a:	463a      	mov	r2, r7
   17f9c:	4621      	mov	r1, r4
   17f9e:	9600      	str	r6, [sp, #0]
   17fa0:	f7ff ff56 	bl	17e50 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   17fa4:	2001      	movs	r0, #1
	prng->countdown = 0;
   17fa6:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   17faa:	b003      	add	sp, #12
   17fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   17fae:	4608      	mov	r0, r1
   17fb0:	e7fb      	b.n	17faa <tc_hmac_prng_init+0x38>

00017fb2 <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   17fb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17fb4:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   17fb6:	4605      	mov	r5, r0
   17fb8:	b180      	cbz	r0, 17fdc <tc_hmac_prng_reseed+0x2a>
   17fba:	b179      	cbz	r1, 17fdc <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   17fbc:	2a1f      	cmp	r2, #31
   17fbe:	d90d      	bls.n	17fdc <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   17fc0:	b153      	cbz	r3, 17fd8 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   17fc2:	b16c      	cbz	r4, 17fe0 <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   17fc4:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   17fc6:	f7ff ff43 	bl	17e50 <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   17fca:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   17fce:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   17fd0:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   17fd4:	b003      	add	sp, #12
   17fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   17fd8:	9300      	str	r3, [sp, #0]
   17fda:	e7f4      	b.n	17fc6 <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   17fdc:	2000      	movs	r0, #0
   17fde:	e7f9      	b.n	17fd4 <tc_hmac_prng_reseed+0x22>
   17fe0:	4620      	mov	r0, r4
   17fe2:	e7f7      	b.n	17fd4 <tc_hmac_prng_reseed+0x22>

00017fe4 <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   17fe4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   17fe8:	460d      	mov	r5, r1
   17fea:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   17fec:	4680      	mov	r8, r0
   17fee:	b3d8      	cbz	r0, 18068 <tc_hmac_prng_generate+0x84>
   17ff0:	b3d2      	cbz	r2, 18068 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   17ff2:	1e4b      	subs	r3, r1, #1
   17ff4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   17ff8:	d236      	bcs.n	18068 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   17ffa:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   17ffe:	b3ab      	cbz	r3, 1806c <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   18000:	3b01      	subs	r3, #1
   18002:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   18006:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1800a:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1800e:	2220      	movs	r2, #32
   18010:	4649      	mov	r1, r9
   18012:	4620      	mov	r0, r4
   18014:	f7ff fead 	bl	17d72 <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   18018:	4620      	mov	r0, r4
   1801a:	f7ff fede 	bl	17dda <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1801e:	2220      	movs	r2, #32
   18020:	4639      	mov	r1, r7
   18022:	4620      	mov	r0, r4
   18024:	f7ff fee6 	bl	17df4 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   18028:	4622      	mov	r2, r4
   1802a:	2120      	movs	r1, #32
   1802c:	4638      	mov	r0, r7
   1802e:	f7ff fee7 	bl	17e00 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   18032:	2d20      	cmp	r5, #32
   18034:	462e      	mov	r6, r5
   18036:	bf28      	it	cs
   18038:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   1803a:	4640      	mov	r0, r8
   1803c:	4633      	mov	r3, r6
   1803e:	463a      	mov	r2, r7
   18040:	4631      	mov	r1, r6
   18042:	f7ff fbcb 	bl	177dc <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   18046:	2d20      	cmp	r5, #32
   18048:	bf38      	it	cc
   1804a:	2520      	movcc	r5, #32
	while (outlen != 0) {
   1804c:	3d20      	subs	r5, #32
		out += bufferlen;
   1804e:	44b0      	add	r8, r6
	while (outlen != 0) {
   18050:	d1dd      	bne.n	1800e <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   18052:	4620      	mov	r0, r4
   18054:	462b      	mov	r3, r5
   18056:	462a      	mov	r2, r5
   18058:	4629      	mov	r1, r5
   1805a:	9500      	str	r5, [sp, #0]
   1805c:	f7ff fef8 	bl	17e50 <update>

	return TC_CRYPTO_SUCCESS;
   18060:	2001      	movs	r0, #1
}
   18062:	b003      	add	sp, #12
   18064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   18068:	2000      	movs	r0, #0
   1806a:	e7fa      	b.n	18062 <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   1806c:	f04f 30ff 	mov.w	r0, #4294967295
   18070:	e7f7      	b.n	18062 <tc_hmac_prng_generate+0x7e>

00018072 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   18072:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   18074:	6800      	ldr	r0, [r0, #0]
   18076:	f7f3 b9ff 	b.w	b478 <z_arm_fatal_error>

0001807a <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1807a:	2100      	movs	r1, #0
   1807c:	2001      	movs	r0, #1
   1807e:	f7f3 b9fb 	b.w	b478 <z_arm_fatal_error>

00018082 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   18082:	b508      	push	{r3, lr}
	handler();
   18084:	f7f3 faa4 	bl	b5d0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   18088:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1808c:	f7f3 bb6e 	b.w	b76c <z_arm_exc_exit>

00018090 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   18090:	6e83      	ldr	r3, [r0, #104]	; 0x68
   18092:	f383 880b 	msr	PSPLIM, r3
}
   18096:	4770      	bx	lr

00018098 <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
   18098:	2300      	movs	r3, #0
   1809a:	f7f2 bc2f 	b.w	a8fc <z_impl_z_log_msg_static_create>

0001809e <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   1809e:	4770      	bx	lr

000180a0 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
   180a0:	4770      	bx	lr

000180a2 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   180a2:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   180a6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   180aa:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   180ac:	bf08      	it	eq
   180ae:	f06f 0015 	mvneq.w	r0, #21
   180b2:	4770      	bx	lr

000180b4 <mpu_configure_region>:
{
   180b4:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
   180b6:	890a      	ldrh	r2, [r1, #8]
   180b8:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   180ba:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   180bc:	684c      	ldr	r4, [r1, #4]
   180be:	f002 021f 	and.w	r2, r2, #31
{
   180c2:	b085      	sub	sp, #20
   180c4:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
   180c8:	9300      	str	r3, [sp, #0]
   180ca:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   180ce:	f023 031f 	bic.w	r3, r3, #31
   180d2:	1e62      	subs	r2, r4, #1
   180d4:	4413      	add	r3, r2
   180d6:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   180da:	2807      	cmp	r0, #7
   180dc:	9303      	str	r3, [sp, #12]
   180de:	d904      	bls.n	180ea <mpu_configure_region+0x36>
}
   180e0:	b005      	add	sp, #20
   180e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   180e6:	f7f3 bf29 	b.w	bf3c <region_allocate_and_init.part.0>
	region_init(index, region_conf);
   180ea:	4669      	mov	r1, sp
   180ec:	f7f3 ff0c 	bl	bf08 <region_init>
}
   180f0:	b005      	add	sp, #20
   180f2:	bd30      	pop	{r4, r5, pc}

000180f4 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   180f4:	4603      	mov	r3, r0
   180f6:	3901      	subs	r1, #1
   180f8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   180fc:	b90a      	cbnz	r2, 18102 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   180fe:	701a      	strb	r2, [r3, #0]

	return dest;
}
   18100:	4770      	bx	lr
		*d = *s;
   18102:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   18106:	e7f7      	b.n	180f8 <strcpy+0x4>

00018108 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   18108:	4603      	mov	r3, r0
{
   1810a:	b510      	push	{r4, lr}
   1810c:	3901      	subs	r1, #1
	while ((n > 0) && *s != '\0') {
   1810e:	b922      	cbnz	r2, 1811a <strncpy+0x12>
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   18110:	2100      	movs	r1, #0
   18112:	441a      	add	r2, r3
	while (n > 0) {
   18114:	4293      	cmp	r3, r2
   18116:	d108      	bne.n	1812a <strncpy+0x22>
		d++;
		n--;
	}

	return dest;
}
   18118:	bd10      	pop	{r4, pc}
	while ((n > 0) && *s != '\0') {
   1811a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1811e:	2c00      	cmp	r4, #0
   18120:	d0f6      	beq.n	18110 <strncpy+0x8>
		*d = *s;
   18122:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   18126:	3a01      	subs	r2, #1
   18128:	e7f1      	b.n	1810e <strncpy+0x6>
		*d = '\0';
   1812a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1812e:	e7f1      	b.n	18114 <strncpy+0xc>

00018130 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   18130:	4603      	mov	r3, r0
	size_t n = 0;
   18132:	2000      	movs	r0, #0

	while (*s != '\0') {
   18134:	5c1a      	ldrb	r2, [r3, r0]
   18136:	b902      	cbnz	r2, 1813a <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   18138:	4770      	bx	lr
		n++;
   1813a:	3001      	adds	r0, #1
   1813c:	e7fa      	b.n	18134 <strlen+0x4>

0001813e <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1813e:	4603      	mov	r3, r0
	size_t n = 0;
   18140:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   18142:	5c1a      	ldrb	r2, [r3, r0]
   18144:	b10a      	cbz	r2, 1814a <strnlen+0xc>
   18146:	4288      	cmp	r0, r1
   18148:	d100      	bne.n	1814c <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1814a:	4770      	bx	lr
		n++;
   1814c:	3001      	adds	r0, #1
   1814e:	e7f8      	b.n	18142 <strnlen+0x4>

00018150 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   18150:	1e43      	subs	r3, r0, #1
   18152:	3901      	subs	r1, #1
   18154:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   18158:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1815c:	4282      	cmp	r2, r0
   1815e:	d101      	bne.n	18164 <strcmp+0x14>
   18160:	2a00      	cmp	r2, #0
   18162:	d1f7      	bne.n	18154 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   18164:	1a10      	subs	r0, r2, r0
   18166:	4770      	bx	lr

00018168 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   18168:	b570      	push	{r4, r5, r6, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1816a:	460b      	mov	r3, r1
   1816c:	4605      	mov	r5, r0
   1816e:	b162      	cbz	r2, 1818a <strncmp+0x22>
   18170:	f810 6b01 	ldrb.w	r6, [r0], #1
   18174:	781c      	ldrb	r4, [r3, #0]
   18176:	3101      	adds	r1, #1
   18178:	42b4      	cmp	r4, r6
   1817a:	d100      	bne.n	1817e <strncmp+0x16>
   1817c:	b91c      	cbnz	r4, 18186 <strncmp+0x1e>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1817e:	782a      	ldrb	r2, [r5, #0]
   18180:	781b      	ldrb	r3, [r3, #0]
   18182:	1ad0      	subs	r0, r2, r3
   18184:	e002      	b.n	1818c <strncmp+0x24>
		n--;
   18186:	3a01      	subs	r2, #1
   18188:	e7ef      	b.n	1816a <strncmp+0x2>
	return (n == 0) ? 0 : (*s1 - *s2);
   1818a:	4610      	mov	r0, r2
}
   1818c:	bd70      	pop	{r4, r5, r6, pc}

0001818e <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1818e:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   18190:	b15a      	cbz	r2, 181aa <memcmp+0x1c>
   18192:	3901      	subs	r1, #1
   18194:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   18196:	f810 2b01 	ldrb.w	r2, [r0], #1
   1819a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1819e:	42a0      	cmp	r0, r4
   181a0:	d001      	beq.n	181a6 <memcmp+0x18>
   181a2:	429a      	cmp	r2, r3
   181a4:	d0f7      	beq.n	18196 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   181a6:	1ad0      	subs	r0, r2, r3
}
   181a8:	bd10      	pop	{r4, pc}
		return 0;
   181aa:	4610      	mov	r0, r2
   181ac:	e7fc      	b.n	181a8 <memcmp+0x1a>

000181ae <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   181ae:	b510      	push	{r4, lr}
   181b0:	1e43      	subs	r3, r0, #1
   181b2:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   181b4:	4291      	cmp	r1, r2
   181b6:	d100      	bne.n	181ba <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   181b8:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   181ba:	f811 4b01 	ldrb.w	r4, [r1], #1
   181be:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   181c2:	e7f7      	b.n	181b4 <memcpy+0x6>

000181c4 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   181c4:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
   181c6:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   181c8:	4402      	add	r2, r0
   181ca:	4293      	cmp	r3, r2
   181cc:	d100      	bne.n	181d0 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   181ce:	4770      	bx	lr
		*(d_byte++) = c_byte;
   181d0:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   181d4:	e7f9      	b.n	181ca <memset+0x6>

000181d6 <_stdout_hook_default>:
}
   181d6:	f04f 30ff 	mov.w	r0, #4294967295
   181da:	4770      	bx	lr

000181dc <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   181dc:	b510      	push	{r4, lr}
   181de:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   181e0:	7801      	ldrb	r1, [r0, #0]
   181e2:	7822      	ldrb	r2, [r4, #0]
{
   181e4:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   181e6:	428a      	cmp	r2, r1
   181e8:	d00f      	beq.n	1820a <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   181ea:	4669      	mov	r1, sp
   181ec:	f7f4 f8ca 	bl	c384 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   181f0:	4620      	mov	r0, r4
   181f2:	a905      	add	r1, sp, #20
   181f4:	f7f4 f8c6 	bl	c384 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   181f8:	2210      	movs	r2, #16
   181fa:	f10d 0115 	add.w	r1, sp, #21
   181fe:	f10d 0001 	add.w	r0, sp, #1
   18202:	f7ff ffc4 	bl	1818e <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   18206:	b00a      	add	sp, #40	; 0x28
   18208:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   1820a:	2a01      	cmp	r2, #1
   1820c:	d006      	beq.n	1821c <bt_uuid_cmp+0x40>
   1820e:	2a02      	cmp	r2, #2
   18210:	d007      	beq.n	18222 <bt_uuid_cmp+0x46>
   18212:	b972      	cbnz	r2, 18232 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   18214:	8840      	ldrh	r0, [r0, #2]
   18216:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   18218:	1ac0      	subs	r0, r0, r3
   1821a:	e7f4      	b.n	18206 <bt_uuid_cmp+0x2a>
   1821c:	6840      	ldr	r0, [r0, #4]
   1821e:	6863      	ldr	r3, [r4, #4]
   18220:	e7fa      	b.n	18218 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   18222:	2210      	movs	r2, #16
   18224:	1c61      	adds	r1, r4, #1
   18226:	3001      	adds	r0, #1
}
   18228:	b00a      	add	sp, #40	; 0x28
   1822a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1822e:	f7ff bfae 	b.w	1818e <memcmp>
	switch (u1->type) {
   18232:	f06f 0015 	mvn.w	r0, #21
   18236:	e7e6      	b.n	18206 <bt_uuid_cmp+0x2a>

00018238 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   18238:	2a04      	cmp	r2, #4
{
   1823a:	b510      	push	{r4, lr}
	switch (data_len) {
   1823c:	d00a      	beq.n	18254 <bt_uuid_create+0x1c>
   1823e:	2a10      	cmp	r2, #16
   18240:	d00d      	beq.n	1825e <bt_uuid_create+0x26>
   18242:	2a02      	cmp	r2, #2
   18244:	f04f 0300 	mov.w	r3, #0
   18248:	d10f      	bne.n	1826a <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   1824a:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1824c:	880b      	ldrh	r3, [r1, #0]
   1824e:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   18250:	2001      	movs	r0, #1
}
   18252:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   18254:	2301      	movs	r3, #1
   18256:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   18258:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1825a:	6043      	str	r3, [r0, #4]
		break;
   1825c:	e7f8      	b.n	18250 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   1825e:	2302      	movs	r3, #2
   18260:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   18264:	f7ff ffa3 	bl	181ae <memcpy>
		break;
   18268:	e7f2      	b.n	18250 <bt_uuid_create+0x18>
	switch (data_len) {
   1826a:	4618      	mov	r0, r3
   1826c:	e7f1      	b.n	18252 <bt_uuid_create+0x1a>

0001826e <bt_addr_le_create_static>:

#define ADDR_RESOLVED_BITMASK (0x02)

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1826e:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   18270:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   18272:	2106      	movs	r1, #6
{
   18274:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   18276:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1827a:	f7f6 fc93 	bl	eba4 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1827e:	b918      	cbnz	r0, 18288 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   18280:	79a3      	ldrb	r3, [r4, #6]
   18282:	f063 033f 	orn	r3, r3, #63	; 0x3f
   18286:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   18288:	bd10      	pop	{r4, pc}

0001828a <bt_addr_le_copy_resolved>:

	return 0;
}

void bt_addr_le_copy_resolved(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
   1828a:	b510      	push	{r4, lr}
   1828c:	4604      	mov	r4, r0
   1828e:	2207      	movs	r2, #7
   18290:	f7ff ff8d 	bl	181ae <memcpy>
	bt_addr_le_copy(dst, src);
	/* translate to "regular" address type */
	dst->type &= ~ADDR_RESOLVED_BITMASK;
   18294:	7823      	ldrb	r3, [r4, #0]
   18296:	f023 0302 	bic.w	r3, r3, #2
   1829a:	7023      	strb	r3, [r4, #0]
}
   1829c:	bd10      	pop	{r4, pc}

0001829e <bt_addr_le_is_resolved>:

bool bt_addr_le_is_resolved(const bt_addr_le_t *addr)
{
	return (addr->type & ADDR_RESOLVED_BITMASK) != 0;
   1829e:	7800      	ldrb	r0, [r0, #0]
}
   182a0:	f3c0 0040 	ubfx	r0, r0, #1, #1
   182a4:	4770      	bx	lr

000182a6 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   182a6:	280f      	cmp	r0, #15
   182a8:	d807      	bhi.n	182ba <bt_hci_evt_get_flags+0x14>
   182aa:	280d      	cmp	r0, #13
   182ac:	d80b      	bhi.n	182c6 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   182ae:	2805      	cmp	r0, #5
   182b0:	bf08      	it	eq
   182b2:	2003      	moveq	r0, #3
   182b4:	bf18      	it	ne
   182b6:	2002      	movne	r0, #2
   182b8:	4770      	bx	lr
	switch (evt) {
   182ba:	2813      	cmp	r0, #19
   182bc:	d003      	beq.n	182c6 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   182be:	281a      	cmp	r0, #26
   182c0:	bf08      	it	eq
   182c2:	2001      	moveq	r0, #1
   182c4:	e7f6      	b.n	182b4 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   182c6:	2001      	movs	r0, #1
	}
}
   182c8:	4770      	bx	lr

000182ca <hci_vendor_event>:
}
   182ca:	4770      	bx	lr

000182cc <atomic_or>:
{
   182cc:	4603      	mov	r3, r0
   182ce:	b510      	push	{r4, lr}
}
   182d0:	e8d3 0fef 	ldaex	r0, [r3]
   182d4:	ea40 0201 	orr.w	r2, r0, r1
   182d8:	e8c3 2fe4 	stlex	r4, r2, [r3]
   182dc:	2c00      	cmp	r4, #0
   182de:	d1f7      	bne.n	182d0 <atomic_or+0x4>
   182e0:	bd10      	pop	{r4, pc}

000182e2 <z_log_msg_static_create.constprop.0>:
   182e2:	2300      	movs	r3, #0
   182e4:	f7f2 bb0a 	b.w	a8fc <z_impl_z_log_msg_static_create>

000182e8 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   182e8:	e8d0 3fef 	ldaex	r3, [r0]
   182ec:	400b      	ands	r3, r1
   182ee:	e8c0 3fe2 	stlex	r2, r3, [r0]
   182f2:	2a00      	cmp	r2, #0
   182f4:	d1f8      	bne.n	182e8 <atomic_and.isra.0>
}
   182f6:	4770      	bx	lr

000182f8 <bt_hci_disconnect>:
{
   182f8:	b570      	push	{r4, r5, r6, lr}
   182fa:	4606      	mov	r6, r0
   182fc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   182fe:	f240 4006 	movw	r0, #1030	; 0x406
   18302:	2103      	movs	r1, #3
   18304:	f7f4 fd44 	bl	cd90 <bt_hci_cmd_create>
	if (!buf) {
   18308:	4604      	mov	r4, r0
   1830a:	b168      	cbz	r0, 18328 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   1830c:	2103      	movs	r1, #3
   1830e:	300c      	adds	r0, #12
   18310:	f001 fa7f 	bl	19812 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   18314:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   18316:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   18318:	4621      	mov	r1, r4
}
   1831a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1831e:	2200      	movs	r2, #0
   18320:	f240 4006 	movw	r0, #1030	; 0x406
   18324:	f7f4 bd6e 	b.w	ce04 <bt_hci_cmd_send_sync>
}
   18328:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1832c:	bd70      	pop	{r4, r5, r6, pc}

0001832e <bt_le_set_data_len>:
{
   1832e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18330:	4607      	mov	r7, r0
   18332:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   18334:	f242 0022 	movw	r0, #8226	; 0x2022
   18338:	2106      	movs	r1, #6
{
   1833a:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1833c:	f7f4 fd28 	bl	cd90 <bt_hci_cmd_create>
	if (!buf) {
   18340:	4604      	mov	r4, r0
   18342:	b178      	cbz	r0, 18364 <bt_le_set_data_len+0x36>
   18344:	2106      	movs	r1, #6
   18346:	300c      	adds	r0, #12
   18348:	f001 fa63 	bl	19812 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1834c:	883b      	ldrh	r3, [r7, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1834e:	8046      	strh	r6, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   18350:	8003      	strh	r3, [r0, #0]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   18352:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   18354:	4621      	mov	r1, r4
}
   18356:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   1835a:	2200      	movs	r2, #0
   1835c:	f242 0022 	movw	r0, #8226	; 0x2022
   18360:	f7f4 bd50 	b.w	ce04 <bt_hci_cmd_send_sync>
}
   18364:	f06f 0068 	mvn.w	r0, #104	; 0x68
   18368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001836a <bt_le_set_phy>:
{
   1836a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1836e:	4681      	mov	r9, r0
   18370:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   18372:	f242 0032 	movw	r0, #8242	; 0x2032
   18376:	2107      	movs	r1, #7
{
   18378:	4617      	mov	r7, r2
   1837a:	461e      	mov	r6, r3
   1837c:	f89d a020 	ldrb.w	sl, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   18380:	f7f4 fd06 	bl	cd90 <bt_hci_cmd_create>
	if (!buf) {
   18384:	4605      	mov	r5, r0
   18386:	b1a0      	cbz	r0, 183b2 <bt_le_set_phy+0x48>
   18388:	2107      	movs	r1, #7
   1838a:	300c      	adds	r0, #12
   1838c:	f001 fa41 	bl	19812 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   18390:	f8b9 3000 	ldrh.w	r3, [r9]
	cp->all_phys = all_phys;
   18394:	f880 8002 	strb.w	r8, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   18398:	8003      	strh	r3, [r0, #0]
	cp->tx_phys = pref_tx_phy;
   1839a:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1839c:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   1839e:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   183a2:	4629      	mov	r1, r5
}
   183a4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   183a8:	2200      	movs	r2, #0
   183aa:	f242 0032 	movw	r0, #8242	; 0x2032
   183ae:	f7f4 bd29 	b.w	ce04 <bt_hci_cmd_send_sync>
}
   183b2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   183b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000183ba <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   183ba:	68c0      	ldr	r0, [r0, #12]
   183bc:	f7f4 bdf6 	b.w	cfac <bt_hci_le_enh_conn_complete>

000183c0 <bt_le_conn_params_valid>:
{
   183c0:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   183c2:	8803      	ldrh	r3, [r0, #0]
   183c4:	8842      	ldrh	r2, [r0, #2]
   183c6:	4293      	cmp	r3, r2
   183c8:	d819      	bhi.n	183fe <bt_le_conn_params_valid+0x3e>
   183ca:	2b05      	cmp	r3, #5
   183cc:	d917      	bls.n	183fe <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   183ce:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   183d2:	d814      	bhi.n	183fe <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   183d4:	8883      	ldrh	r3, [r0, #4]
   183d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   183da:	d210      	bcs.n	183fe <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   183dc:	f640 4476 	movw	r4, #3190	; 0xc76
   183e0:	88c0      	ldrh	r0, [r0, #6]
   183e2:	f1a0 010a 	sub.w	r1, r0, #10
   183e6:	b289      	uxth	r1, r1
   183e8:	42a1      	cmp	r1, r4
   183ea:	d808      	bhi.n	183fe <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   183ec:	3301      	adds	r3, #1
   183ee:	b29b      	uxth	r3, r3
   183f0:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   183f2:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   183f6:	bf34      	ite	cc
   183f8:	2001      	movcc	r0, #1
   183fa:	2000      	movcs	r0, #0
}
   183fc:	bd10      	pop	{r4, pc}
		return false;
   183fe:	2000      	movs	r0, #0
   18400:	e7fc      	b.n	183fc <bt_le_conn_params_valid+0x3c>

00018402 <le_conn_param_neg_reply>:
{
   18402:	b570      	push	{r4, r5, r6, lr}
   18404:	4606      	mov	r6, r0
   18406:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   18408:	f242 0021 	movw	r0, #8225	; 0x2021
   1840c:	2103      	movs	r1, #3
   1840e:	f7f4 fcbf 	bl	cd90 <bt_hci_cmd_create>
	if (!buf) {
   18412:	4604      	mov	r4, r0
   18414:	b918      	cbnz	r0, 1841e <le_conn_param_neg_reply+0x1c>
}
   18416:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1841a:	f7f4 b8b1 	b.w	c580 <le_conn_param_neg_reply.part.0>
   1841e:	2103      	movs	r1, #3
   18420:	300c      	adds	r0, #12
   18422:	f001 f9f6 	bl	19812 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   18426:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   18428:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1842a:	4621      	mov	r1, r4
}
   1842c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   18430:	f242 0021 	movw	r0, #8225	; 0x2021
   18434:	f7f4 bf6a 	b.w	d30c <bt_hci_cmd_send>

00018438 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   18438:	2000      	movs	r0, #0
   1843a:	4770      	bx	lr

0001843c <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   1843c:	2000      	movs	r0, #0
   1843e:	4770      	bx	lr

00018440 <bt_addr_le_eq>:
	return memcmp(a, b, sizeof(*a));
   18440:	2207      	movs	r2, #7
{
   18442:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   18444:	f7ff fea3 	bl	1818e <memcmp>
}
   18448:	fab0 f080 	clz	r0, r0
   1844c:	0940      	lsrs	r0, r0, #5
   1844e:	bd08      	pop	{r3, pc}

00018450 <z_log_msg_static_create.constprop.0>:
   18450:	2300      	movs	r3, #0
   18452:	f7f2 ba53 	b.w	a8fc <z_impl_z_log_msg_static_create>

00018456 <bt_lookup_id_addr>:
	return addr;
   18456:	2800      	cmp	r0, #0
}
   18458:	bf0c      	ite	eq
   1845a:	4608      	moveq	r0, r1
   1845c:	2000      	movne	r0, #0
   1845e:	4770      	bx	lr

00018460 <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   18460:	b118      	cbz	r0, 1846a <bt_id_set_adv_random_addr+0xa>
   18462:	b111      	cbz	r1, 1846a <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   18464:	4608      	mov	r0, r1
   18466:	f7f5 bdff 	b.w	e068 <set_random_address>
}
   1846a:	f06f 0015 	mvn.w	r0, #21
   1846e:	4770      	bx	lr

00018470 <bt_id_set_adv_private_addr>:
{
   18470:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   18472:	4604      	mov	r4, r0
   18474:	b180      	cbz	r0, 18498 <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   18476:	2106      	movs	r1, #6
   18478:	4668      	mov	r0, sp
   1847a:	f7f6 fb93 	bl	eba4 <bt_rand>
	if (err) {
   1847e:	b948      	cbnz	r0, 18494 <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   18480:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   18484:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   18486:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1848a:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   1848c:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   18490:	f7ff ffe6 	bl	18460 <bt_id_set_adv_random_addr>
}
   18494:	b002      	add	sp, #8
   18496:	bd10      	pop	{r4, pc}
		return -EINVAL;
   18498:	f06f 0015 	mvn.w	r0, #21
   1849c:	e7fa      	b.n	18494 <bt_id_set_adv_private_addr+0x24>

0001849e <bt_id_adv_random_addr_check>:
}
   1849e:	3800      	subs	r0, #0
   184a0:	bf18      	it	ne
   184a2:	2001      	movne	r0, #1
   184a4:	4770      	bx	lr

000184a6 <get_adv_channel_map>:
{
   184a6:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   184a8:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   184ac:	bf0c      	ite	eq
   184ae:	2007      	moveq	r0, #7
   184b0:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   184b2:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   184b4:	bf48      	it	mi
   184b6:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   184ba:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   184bc:	bf48      	it	mi
   184be:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   184c2:	4770      	bx	lr

000184c4 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   184c4:	e8d0 0faf 	lda	r0, [r0]
}
   184c8:	4770      	bx	lr

000184ca <atomic_and>:
{
   184ca:	4603      	mov	r3, r0
   184cc:	b510      	push	{r4, lr}
}
   184ce:	e8d3 0fef 	ldaex	r0, [r3]
   184d2:	ea00 0201 	and.w	r2, r0, r1
   184d6:	e8c3 2fe4 	stlex	r4, r2, [r3]
   184da:	2c00      	cmp	r4, #0
   184dc:	d1f7      	bne.n	184ce <atomic_and+0x4>
   184de:	bd10      	pop	{r4, pc}

000184e0 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   184e0:	2301      	movs	r3, #1
{
   184e2:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   184e4:	fa03 f101 	lsl.w	r1, r3, r1
{
   184e8:	4604      	mov	r4, r0
	if (val) {
   184ea:	b142      	cbz	r2, 184fe <atomic_set_bit_to+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   184ec:	e8d4 3fef 	ldaex	r3, [r4]
   184f0:	430b      	orrs	r3, r1
   184f2:	e8c4 3fe2 	stlex	r2, r3, [r4]
   184f6:	2a00      	cmp	r2, #0
   184f8:	d1f8      	bne.n	184ec <atomic_set_bit_to+0xc>
	}
}
   184fa:	bc10      	pop	{r4}
   184fc:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   184fe:	43c9      	mvns	r1, r1
}
   18500:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18502:	f7ff bfe2 	b.w	184ca <atomic_and>

00018506 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   18506:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1850a:	b087      	sub	sp, #28
   1850c:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   18510:	4605      	mov	r5, r0
   18512:	460c      	mov	r4, r1
   18514:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   18516:	2100      	movs	r1, #0
   18518:	2210      	movs	r2, #16
   1851a:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   1851c:	461f      	mov	r7, r3
   1851e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   18522:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
   18526:	f7ff fe4d 	bl	181c4 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   1852a:	b9ce      	cbnz	r6, 18560 <le_adv_update.constprop.0+0x5a>
		d[0].len = ad_len;
   1852c:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   18530:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   18532:	f242 0008 	movw	r0, #8200	; 0x2008
   18536:	a902      	add	r1, sp, #8
   18538:	f7f5 ffa6 	bl	e488 <hci_set_ad>
		if (err) {
   1853c:	4604      	mov	r4, r0
   1853e:	b958      	cbnz	r0, 18558 <le_adv_update.constprop.0+0x52>
	if (scannable) {
   18540:	f1ba 0f00 	cmp.w	sl, #0
   18544:	d13a      	bne.n	185bc <le_adv_update.constprop.0+0xb6>
   18546:	3510      	adds	r5, #16
   18548:	e8d5 3fef 	ldaex	r3, [r5]
   1854c:	f043 0304 	orr.w	r3, r3, #4
   18550:	e8c5 3fe2 	stlex	r2, r3, [r5]
   18554:	2a00      	cmp	r2, #0
   18556:	d1f7      	bne.n	18548 <le_adv_update.constprop.0+0x42>
}
   18558:	4620      	mov	r0, r4
   1855a:	b007      	add	sp, #28
   1855c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   18560:	f7f5 fd66 	bl	e030 <bt_get_name>
   18564:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   18566:	b9e4      	cbnz	r4, 185a2 <le_adv_update.constprop.0+0x9c>
   18568:	bb37      	cbnz	r7, 185b8 <le_adv_update.constprop.0+0xb2>
		data = (struct bt_data)BT_DATA(
   1856a:	4658      	mov	r0, fp
   1856c:	f7ff fde0 	bl	18130 <strlen>
   18570:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   18572:	2e01      	cmp	r6, #1
		d[0].data = ad;
   18574:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   18578:	f88d 3000 	strb.w	r3, [sp]
   1857c:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   18580:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   18584:	d1d4      	bne.n	18530 <le_adv_update.constprop.0+0x2a>
			d_len = 2;
   18586:	2202      	movs	r2, #2
			d[1].data = &data;
   18588:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   1858c:	9605      	str	r6, [sp, #20]
			d_len = 2;
   1858e:	e7d0      	b.n	18532 <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   18590:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   18594:	3a08      	subs	r2, #8
   18596:	2a01      	cmp	r2, #1
   18598:	d924      	bls.n	185e4 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   1859a:	3301      	adds	r3, #1
   1859c:	4598      	cmp	r8, r3
   1859e:	d1f7      	bne.n	18590 <le_adv_update.constprop.0+0x8a>
   185a0:	e7e2      	b.n	18568 <le_adv_update.constprop.0+0x62>
   185a2:	2300      	movs	r3, #0
   185a4:	e7fa      	b.n	1859c <le_adv_update.constprop.0+0x96>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   185a6:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   185aa:	3a08      	subs	r2, #8
   185ac:	2a01      	cmp	r2, #1
   185ae:	d919      	bls.n	185e4 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   185b0:	3301      	adds	r3, #1
   185b2:	4599      	cmp	r9, r3
   185b4:	d1f7      	bne.n	185a6 <le_adv_update.constprop.0+0xa0>
   185b6:	e7d8      	b.n	1856a <le_adv_update.constprop.0+0x64>
   185b8:	2300      	movs	r3, #0
   185ba:	e7fa      	b.n	185b2 <le_adv_update.constprop.0+0xac>
		d[0].data = sd;
   185bc:	2201      	movs	r2, #1
		if (name_type == ADV_NAME_TYPE_SD) {
   185be:	2e02      	cmp	r6, #2
			d[1].len = 1;
   185c0:	bf08      	it	eq
   185c2:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   185c4:	f242 0009 	movw	r0, #8201	; 0x2009
			d_len = 2;
   185c8:	bf08      	it	eq
   185ca:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   185cc:	a902      	add	r1, sp, #8
			d[1].data = &data;
   185ce:	bf08      	it	eq
   185d0:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   185d4:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   185d8:	f7f5 ff56 	bl	e488 <hci_set_ad>
		if (err) {
   185dc:	2800      	cmp	r0, #0
   185de:	d0b2      	beq.n	18546 <le_adv_update.constprop.0+0x40>
   185e0:	4604      	mov	r4, r0
   185e2:	e7b9      	b.n	18558 <le_adv_update.constprop.0+0x52>
			return -EINVAL;
   185e4:	f06f 0415 	mvn.w	r4, #21
   185e8:	e7b6      	b.n	18558 <le_adv_update.constprop.0+0x52>

000185ea <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   185ea:	6843      	ldr	r3, [r0, #4]
   185ec:	f013 0008 	ands.w	r0, r3, #8
   185f0:	d00a      	beq.n	18608 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   185f2:	035a      	lsls	r2, r3, #13
   185f4:	d407      	bmi.n	18606 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   185f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   185fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   185fe:	bf14      	ite	ne
   18600:	2002      	movne	r0, #2
   18602:	2001      	moveq	r0, #1
   18604:	4770      	bx	lr
   18606:	2001      	movs	r0, #1
}
   18608:	4770      	bx	lr

0001860a <bt_le_adv_set_enable_legacy>:
{
   1860a:	b570      	push	{r4, r5, r6, lr}
   1860c:	4606      	mov	r6, r0
   1860e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   18610:	f242 000a 	movw	r0, #8202	; 0x200a
   18614:	2101      	movs	r1, #1
{
   18616:	b086      	sub	sp, #24
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   18618:	f7f4 fbba 	bl	cd90 <bt_hci_cmd_create>
	if (!buf) {
   1861c:	4604      	mov	r4, r0
   1861e:	b1b0      	cbz	r0, 1864e <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   18620:	300c      	adds	r0, #12
	if (enable) {
   18622:	b195      	cbz	r5, 1864a <bt_le_adv_set_enable_legacy+0x40>
   18624:	2101      	movs	r1, #1
   18626:	f001 f903 	bl	19830 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   1862a:	4620      	mov	r0, r4
   1862c:	f106 0210 	add.w	r2, r6, #16
   18630:	a903      	add	r1, sp, #12
   18632:	2307      	movs	r3, #7
   18634:	9500      	str	r5, [sp, #0]
   18636:	f7f4 fb99 	bl	cd6c <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   1863a:	2200      	movs	r2, #0
   1863c:	4621      	mov	r1, r4
   1863e:	f242 000a 	movw	r0, #8202	; 0x200a
   18642:	f7f4 fbdf 	bl	ce04 <bt_hci_cmd_send_sync>
}
   18646:	b006      	add	sp, #24
   18648:	bd70      	pop	{r4, r5, r6, pc}
   1864a:	4629      	mov	r1, r5
   1864c:	e7eb      	b.n	18626 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   1864e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   18652:	e7f8      	b.n	18646 <bt_le_adv_set_enable_legacy+0x3c>

00018654 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   18654:	3018      	adds	r0, #24
   18656:	f002 bb74 	b.w	1ad42 <k_work_cancel_delayable>

0001865a <z_log_msg_static_create.constprop.0>:
   1865a:	2300      	movs	r3, #0
   1865c:	f7f2 b94e 	b.w	a8fc <z_impl_z_log_msg_static_create>

00018660 <tx_complete_work>:
	tx_notify(conn);
   18660:	3828      	subs	r0, #40	; 0x28
   18662:	f7f6 baef 	b.w	ec44 <tx_notify>

00018666 <bt_conn_reset_rx_state>:
{
   18666:	b510      	push	{r4, lr}
   18668:	4604      	mov	r4, r0
	if (!conn->rx) {
   1866a:	6900      	ldr	r0, [r0, #16]
   1866c:	b118      	cbz	r0, 18676 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1866e:	f7f9 fa81 	bl	11b74 <net_buf_unref>
	conn->rx = NULL;
   18672:	2300      	movs	r3, #0
   18674:	6123      	str	r3, [r4, #16]
}
   18676:	bd10      	pop	{r4, pc}

00018678 <conn_cleanup>:
{
   18678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1867c:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   1867e:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   18680:	f104 0638 	add.w	r6, r4, #56	; 0x38
   18684:	2300      	movs	r3, #0
   18686:	2200      	movs	r2, #0
   18688:	4630      	mov	r0, r6
   1868a:	f001 f867 	bl	1975c <net_buf_get>
   1868e:	4603      	mov	r3, r0
   18690:	b950      	cbnz	r0, 186a8 <conn_cleanup+0x30>
	bt_conn_reset_rx_state(conn);
   18692:	4620      	mov	r0, r4
   18694:	f7ff ffe7 	bl	18666 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   18698:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1869c:	2200      	movs	r2, #0
}
   1869e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   186a2:	2300      	movs	r3, #0
   186a4:	f7fd ba04 	b.w	15ab0 <k_work_reschedule>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   186a8:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   186aa:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   186ac:	f7f9 fa62 	bl	11b74 <net_buf_unref>
		if (tx) {
   186b0:	2d00      	cmp	r5, #0
   186b2:	d0e7      	beq.n	18684 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   186b4:	4629      	mov	r1, r5
   186b6:	4620      	mov	r0, r4
   186b8:	f7f6 faf4 	bl	eca4 <conn_tx_destroy>
   186bc:	e7e0      	b.n	18680 <conn_cleanup+0x8>

000186be <bt_conn_ref>:
{
   186be:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   186c0:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   186c4:	e8d2 3faf 	lda	r3, [r2]
		if (!old) {
   186c8:	b15b      	cbz	r3, 186e2 <bt_conn_ref+0x24>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   186ca:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   186cc:	e8d2 4fef 	ldaex	r4, [r2]
   186d0:	429c      	cmp	r4, r3
   186d2:	d104      	bne.n	186de <bt_conn_ref+0x20>
   186d4:	e8c2 1fec 	stlex	ip, r1, [r2]
   186d8:	f1bc 0f00 	cmp.w	ip, #0
   186dc:	d1f6      	bne.n	186cc <bt_conn_ref+0xe>
   186de:	d1f1      	bne.n	186c4 <bt_conn_ref+0x6>
}
   186e0:	bd10      	pop	{r4, pc}
			return NULL;
   186e2:	4618      	mov	r0, r3
   186e4:	e7fc      	b.n	186e0 <bt_conn_ref+0x22>

000186e6 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   186e6:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   186ea:	e8d3 2fef 	ldaex	r2, [r3]
   186ee:	3a01      	subs	r2, #1
   186f0:	e8c3 2fe1 	stlex	r1, r2, [r3]
   186f4:	2900      	cmp	r1, #0
   186f6:	d1f8      	bne.n	186ea <bt_conn_unref+0x4>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   186f8:	f240 1201 	movw	r2, #257	; 0x101
   186fc:	8841      	ldrh	r1, [r0, #2]
   186fe:	4291      	cmp	r1, r2
   18700:	d104      	bne.n	1870c <bt_conn_unref+0x26>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18702:	e8d3 3faf 	lda	r3, [r3]
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   18706:	b90b      	cbnz	r3, 1870c <bt_conn_unref+0x26>
		bt_le_adv_resume();
   18708:	f7f6 b974 	b.w	e9f4 <bt_le_adv_resume>
}
   1870c:	4770      	bx	lr

0001870e <conn_lookup_handle>:
{
   1870e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18712:	4607      	mov	r7, r0
   18714:	460e      	mov	r6, r1
   18716:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   18718:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1871a:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1871e:	42b4      	cmp	r4, r6
   18720:	d103      	bne.n	1872a <conn_lookup_handle+0x1c>
	return NULL;
   18722:	2300      	movs	r3, #0
}
   18724:	4618      	mov	r0, r3
   18726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1872a:	fb09 7004 	mla	r0, r9, r4, r7
   1872e:	f7ff ffc6 	bl	186be <bt_conn_ref>
   18732:	4603      	mov	r3, r0
		if (!conn) {
   18734:	b158      	cbz	r0, 1874e <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   18736:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   18738:	2d01      	cmp	r5, #1
   1873a:	d002      	beq.n	18742 <conn_lookup_handle+0x34>
   1873c:	3d07      	subs	r5, #7
   1873e:	2d01      	cmp	r5, #1
   18740:	d803      	bhi.n	1874a <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   18742:	881a      	ldrh	r2, [r3, #0]
   18744:	4542      	cmp	r2, r8
   18746:	d0ed      	beq.n	18724 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   18748:	4618      	mov	r0, r3
   1874a:	f7ff ffcc 	bl	186e6 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1874e:	3401      	adds	r4, #1
   18750:	e7e5      	b.n	1871e <conn_lookup_handle+0x10>

00018752 <bt_conn_connected>:
{
   18752:	b510      	push	{r4, lr}
   18754:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   18756:	f7f7 f915 	bl	f984 <bt_l2cap_connected>
	notify_connected(conn);
   1875a:	4620      	mov	r0, r4
}
   1875c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   18760:	f7f6 ba3e 	b.w	ebe0 <notify_connected>

00018764 <bt_conn_is_peer_addr_le>:
{
   18764:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   18766:	7a03      	ldrb	r3, [r0, #8]
{
   18768:	4604      	mov	r4, r0
	if (id != conn->id) {
   1876a:	428b      	cmp	r3, r1
{
   1876c:	4615      	mov	r5, r2
	if (id != conn->id) {
   1876e:	d115      	bne.n	1879c <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   18770:	f100 0188 	add.w	r1, r0, #136	; 0x88
   18774:	2207      	movs	r2, #7
   18776:	4628      	mov	r0, r5
   18778:	f7ff fd09 	bl	1818e <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   1877c:	b180      	cbz	r0, 187a0 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1877e:	78e3      	ldrb	r3, [r4, #3]
   18780:	2207      	movs	r2, #7
   18782:	b943      	cbnz	r3, 18796 <bt_conn_is_peer_addr_le+0x32>
   18784:	f104 0196 	add.w	r1, r4, #150	; 0x96
   18788:	4628      	mov	r0, r5
   1878a:	f7ff fd00 	bl	1818e <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   1878e:	fab0 f080 	clz	r0, r0
   18792:	0940      	lsrs	r0, r0, #5
}
   18794:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   18796:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1879a:	e7f5      	b.n	18788 <bt_conn_is_peer_addr_le+0x24>
		return false;
   1879c:	2000      	movs	r0, #0
   1879e:	e7f9      	b.n	18794 <bt_conn_is_peer_addr_le+0x30>
		return true;
   187a0:	2001      	movs	r0, #1
   187a2:	e7f7      	b.n	18794 <bt_conn_is_peer_addr_le+0x30>

000187a4 <bt_conn_le_conn_update>:
{
   187a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   187a6:	4607      	mov	r7, r0
   187a8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   187aa:	f242 0013 	movw	r0, #8211	; 0x2013
   187ae:	210e      	movs	r1, #14
   187b0:	f7f4 faee 	bl	cd90 <bt_hci_cmd_create>
	if (!buf) {
   187b4:	4606      	mov	r6, r0
   187b6:	b1d0      	cbz	r0, 187ee <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   187b8:	210e      	movs	r1, #14
   187ba:	300c      	adds	r0, #12
   187bc:	f001 f829 	bl	19812 <net_buf_simple_add>
   187c0:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   187c2:	220e      	movs	r2, #14
   187c4:	2100      	movs	r1, #0
   187c6:	f7ff fcfd 	bl	181c4 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   187ca:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   187cc:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   187ce:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   187d0:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   187d2:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   187d4:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   187d6:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   187d8:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   187dc:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   187de:	88ab      	ldrh	r3, [r5, #4]
   187e0:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   187e2:	88eb      	ldrh	r3, [r5, #6]
   187e4:	8123      	strh	r3, [r4, #8]
}
   187e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   187ea:	f7f4 bb0b 	b.w	ce04 <bt_hci_cmd_send_sync>
}
   187ee:	f06f 0068 	mvn.w	r0, #104	; 0x68
   187f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000187f4 <l2cap_connected>:
}
   187f4:	4770      	bx	lr

000187f6 <z_log_msg_static_create.constprop.0>:
   187f6:	2300      	movs	r3, #0
   187f8:	f7f2 b880 	b.w	a8fc <z_impl_z_log_msg_static_create>

000187fc <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   187fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   187fe:	4605      	mov	r5, r0
   18800:	460f      	mov	r7, r1
   18802:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   18804:	2300      	movs	r3, #0
   18806:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1880a:	2104      	movs	r1, #4
   1880c:	2000      	movs	r0, #0
   1880e:	f7f6 fde1 	bl	f3d4 <bt_conn_create_pdu_timeout>
	if (!buf) {
   18812:	4604      	mov	r4, r0
   18814:	b920      	cbnz	r0, 18820 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   18816:	4628      	mov	r0, r5
}
   18818:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1881c:	f7f7 b876 	b.w	f90c <l2cap_create_le_sig_pdu.part.0>
   18820:	2104      	movs	r1, #4
   18822:	300c      	adds	r0, #12
   18824:	f000 fff5 	bl	19812 <net_buf_simple_add>
	hdr->code = code;
   18828:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   1882a:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1882c:	8046      	strh	r6, [r0, #2]
}
   1882e:	4620      	mov	r0, r4
   18830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00018832 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   18832:	4770      	bx	lr

00018834 <bt_l2cap_chan_del>:
{
   18834:	b570      	push	{r4, r5, r6, lr}
   18836:	4604      	mov	r4, r0
	if (!chan->conn) {
   18838:	e9d0 3500 	ldrd	r3, r5, [r0]
   1883c:	b123      	cbz	r3, 18848 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1883e:	686b      	ldr	r3, [r5, #4]
   18840:	b103      	cbz	r3, 18844 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   18842:	4798      	blx	r3
	chan->conn = NULL;
   18844:	2300      	movs	r3, #0
   18846:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   18848:	68e3      	ldr	r3, [r4, #12]
   1884a:	b10b      	cbz	r3, 18850 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1884c:	4620      	mov	r0, r4
   1884e:	4798      	blx	r3
	if (ops->released) {
   18850:	6a2b      	ldr	r3, [r5, #32]
   18852:	b11b      	cbz	r3, 1885c <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   18854:	4620      	mov	r0, r4
}
   18856:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1885a:	4718      	bx	r3
}
   1885c:	bd70      	pop	{r4, r5, r6, pc}

0001885e <bt_l2cap_disconnected>:
{
   1885e:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   18860:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   18862:	b130      	cbz	r0, 18872 <bt_l2cap_disconnected+0x14>
	return node->next;
   18864:	f850 4908 	ldr.w	r4, [r0], #-8
   18868:	b104      	cbz	r4, 1886c <bt_l2cap_disconnected+0xe>
   1886a:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1886c:	f7ff ffe2 	bl	18834 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   18870:	b904      	cbnz	r4, 18874 <bt_l2cap_disconnected+0x16>
}
   18872:	bd38      	pop	{r3, r4, r5, pc}
   18874:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   18876:	b12d      	cbz	r5, 18884 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   18878:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1887a:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   1887c:	f7ff ffda 	bl	18834 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   18880:	462c      	mov	r4, r5
   18882:	e7f7      	b.n	18874 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   18884:	4620      	mov	r0, r4
}
   18886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   1888a:	f7ff bfd3 	b.w	18834 <bt_l2cap_chan_del>

0001888e <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1888e:	3104      	adds	r1, #4
   18890:	f7f6 bda0 	b.w	f3d4 <bt_conn_create_pdu_timeout>

00018894 <bt_l2cap_send_cb>:
{
   18894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18898:	4614      	mov	r4, r2
   1889a:	4605      	mov	r5, r0
   1889c:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1889e:	f102 000c 	add.w	r0, r2, #12
   188a2:	2104      	movs	r1, #4
   188a4:	461e      	mov	r6, r3
   188a6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   188aa:	f000 ffc9 	bl	19840 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   188ae:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   188b0:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   188b2:	3a04      	subs	r2, #4
   188b4:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   188b6:	4643      	mov	r3, r8
   188b8:	4632      	mov	r2, r6
   188ba:	4621      	mov	r1, r4
   188bc:	4628      	mov	r0, r5
}
   188be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   188c2:	f7f6 bbbb 	b.w	f03c <bt_conn_send_cb>

000188c6 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   188c6:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   188c8:	b128      	cbz	r0, 188d6 <bt_l2cap_le_lookup_rx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   188ca:	8983      	ldrh	r3, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   188cc:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   188ce:	428b      	cmp	r3, r1
   188d0:	d001      	beq.n	188d6 <bt_l2cap_le_lookup_rx_cid+0x10>
	return node->next;
   188d2:	6880      	ldr	r0, [r0, #8]
   188d4:	e7f8      	b.n	188c8 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   188d6:	4770      	bx	lr

000188d8 <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   188d8:	4770      	bx	lr

000188da <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   188da:	4603      	mov	r3, r0
	return list->head;
   188dc:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   188de:	b128      	cbz	r0, 188ec <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   188e0:	6859      	ldr	r1, [r3, #4]
	return node->next;
   188e2:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   188e4:	4288      	cmp	r0, r1
	list->head = node;
   188e6:	601a      	str	r2, [r3, #0]
	list->tail = node;
   188e8:	bf08      	it	eq
   188ea:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   188ec:	4770      	bx	lr

000188ee <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   188ee:	4603      	mov	r3, r0
	size_t bytes = 0;
   188f0:	2000      	movs	r0, #0

	while (buf) {
   188f2:	b903      	cbnz	r3, 188f6 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   188f4:	4770      	bx	lr
		bytes += buf->len;
   188f6:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   188f8:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   188fa:	4410      	add	r0, r2
		buf = buf->frags;
   188fc:	e7f9      	b.n	188f2 <net_buf_frags_len+0x4>

000188fe <attr_read_type_cb>:
{
   188fe:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   18900:	68d4      	ldr	r4, [r2, #12]
   18902:	3102      	adds	r1, #2
   18904:	7823      	ldrb	r3, [r4, #0]
   18906:	b913      	cbnz	r3, 1890e <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   18908:	7021      	strb	r1, [r4, #0]
	return true;
   1890a:	2001      	movs	r0, #1
}
   1890c:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1890e:	428b      	cmp	r3, r1
   18910:	d0fb      	beq.n	1890a <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   18912:	8a03      	ldrh	r3, [r0, #16]
   18914:	3b02      	subs	r3, #2
   18916:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   18918:	2000      	movs	r0, #0
   1891a:	6110      	str	r0, [r2, #16]
		return false;
   1891c:	e7f6      	b.n	1890c <attr_read_type_cb+0xe>

0001891e <att_prepare_write_req>:
}
   1891e:	2006      	movs	r0, #6
   18920:	4770      	bx	lr

00018922 <atomic_test_bit>:
   18922:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   18926:	4108      	asrs	r0, r1
}
   18928:	f000 0001 	and.w	r0, r0, #1
   1892c:	4770      	bx	lr

0001892e <write_cb>:
{
   1892e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   18930:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   18932:	4601      	mov	r1, r0
{
   18934:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   18936:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1893a:	6820      	ldr	r0, [r4, #0]
   1893c:	f000 fe01 	bl	19542 <bt_gatt_check_perm>
   18940:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   18942:	bb00      	cbnz	r0, 18986 <write_cb+0x58>
	if (!data->req) {
   18944:	7a23      	ldrb	r3, [r4, #8]
   18946:	b1b3      	cbz	r3, 18976 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   18948:	f1a3 0218 	sub.w	r2, r3, #24
   1894c:	4253      	negs	r3, r2
   1894e:	4153      	adcs	r3, r2
   18950:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   18952:	9301      	str	r3, [sp, #4]
   18954:	8a63      	ldrh	r3, [r4, #18]
   18956:	4629      	mov	r1, r5
   18958:	9300      	str	r3, [sp, #0]
   1895a:	68ae      	ldr	r6, [r5, #8]
   1895c:	8a23      	ldrh	r3, [r4, #16]
   1895e:	68e2      	ldr	r2, [r4, #12]
   18960:	6820      	ldr	r0, [r4, #0]
   18962:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   18964:	2800      	cmp	r0, #0
   18966:	db08      	blt.n	1897a <write_cb+0x4c>
   18968:	8a23      	ldrh	r3, [r4, #16]
   1896a:	4298      	cmp	r0, r3
   1896c:	d10e      	bne.n	1898c <write_cb+0x5e>
	data->err = 0U;
   1896e:	2300      	movs	r3, #0
	return BT_GATT_ITER_CONTINUE;
   18970:	2001      	movs	r0, #1
	data->err = 0U;
   18972:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   18974:	e008      	b.n	18988 <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   18976:	2302      	movs	r3, #2
   18978:	e7eb      	b.n	18952 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   1897a:	f110 0fff 	cmn.w	r0, #255	; 0xff
   1897e:	d305      	bcc.n	1898c <write_cb+0x5e>
		return -err;
   18980:	4240      	negs	r0, r0
   18982:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   18984:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   18986:	2000      	movs	r0, #0
}
   18988:	b002      	add	sp, #8
   1898a:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   1898c:	200e      	movs	r0, #14
   1898e:	e7f9      	b.n	18984 <write_cb+0x56>

00018990 <bt_gatt_foreach_attr>:
{
   18990:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   18992:	e9cd 2301 	strd	r2, r3, [sp, #4]
   18996:	2300      	movs	r3, #0
   18998:	461a      	mov	r2, r3
   1899a:	9300      	str	r3, [sp, #0]
   1899c:	f7f8 fbc8 	bl	11130 <bt_gatt_foreach_attr_type>
}
   189a0:	b005      	add	sp, #20
   189a2:	f85d fb04 	ldr.w	pc, [sp], #4

000189a6 <find_info_cb>:
{
   189a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   189a8:	6893      	ldr	r3, [r2, #8]
{
   189aa:	4605      	mov	r5, r0
   189ac:	460e      	mov	r6, r1
   189ae:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   189b0:	6817      	ldr	r7, [r2, #0]
	if (!data->rsp) {
   189b2:	b963      	cbnz	r3, 189ce <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   189b4:	6850      	ldr	r0, [r2, #4]
   189b6:	2101      	movs	r1, #1
   189b8:	300c      	adds	r0, #12
   189ba:	f000 ff2a 	bl	19812 <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   189be:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   189c0:	682b      	ldr	r3, [r5, #0]
   189c2:	781b      	ldrb	r3, [r3, #0]
   189c4:	2b00      	cmp	r3, #0
   189c6:	bf14      	ite	ne
   189c8:	2302      	movne	r3, #2
   189ca:	2301      	moveq	r3, #1
   189cc:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   189ce:	68a3      	ldr	r3, [r4, #8]
   189d0:	781b      	ldrb	r3, [r3, #0]
   189d2:	2b01      	cmp	r3, #1
   189d4:	d003      	beq.n	189de <find_info_cb+0x38>
   189d6:	2b02      	cmp	r3, #2
   189d8:	d019      	beq.n	18a0e <find_info_cb+0x68>
   189da:	2000      	movs	r0, #0
   189dc:	e016      	b.n	18a0c <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   189de:	682b      	ldr	r3, [r5, #0]
   189e0:	781b      	ldrb	r3, [r3, #0]
   189e2:	2b00      	cmp	r3, #0
   189e4:	d1f9      	bne.n	189da <find_info_cb+0x34>
   189e6:	6860      	ldr	r0, [r4, #4]
   189e8:	2104      	movs	r1, #4
   189ea:	300c      	adds	r0, #12
   189ec:	f000 ff11 	bl	19812 <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   189f0:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   189f2:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   189f4:	682a      	ldr	r2, [r5, #0]
   189f6:	68e3      	ldr	r3, [r4, #12]
   189f8:	8852      	ldrh	r2, [r2, #2]
   189fa:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   189fc:	6863      	ldr	r3, [r4, #4]
   189fe:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   18a00:	8a1b      	ldrh	r3, [r3, #16]
   18a02:	1ac0      	subs	r0, r0, r3
   18a04:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   18a06:	bf94      	ite	ls
   18a08:	2000      	movls	r0, #0
   18a0a:	2001      	movhi	r0, #1
}
   18a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   18a0e:	682b      	ldr	r3, [r5, #0]
   18a10:	781b      	ldrb	r3, [r3, #0]
   18a12:	2b02      	cmp	r3, #2
   18a14:	d1e1      	bne.n	189da <find_info_cb+0x34>
   18a16:	6860      	ldr	r0, [r4, #4]
   18a18:	2112      	movs	r1, #18
   18a1a:	300c      	adds	r0, #12
   18a1c:	f000 fef9 	bl	19812 <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   18a20:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   18a22:	8006      	strh	r6, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   18a24:	6829      	ldr	r1, [r5, #0]
   18a26:	68e0      	ldr	r0, [r4, #12]
   18a28:	2210      	movs	r2, #16
   18a2a:	3101      	adds	r1, #1
   18a2c:	3002      	adds	r0, #2
   18a2e:	f7ff fbbe 	bl	181ae <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   18a32:	6863      	ldr	r3, [r4, #4]
   18a34:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   18a36:	8a1b      	ldrh	r3, [r3, #16]
   18a38:	1ac0      	subs	r0, r0, r3
   18a3a:	2812      	cmp	r0, #18
   18a3c:	e7e3      	b.n	18a06 <find_info_cb+0x60>

00018a3e <att_chan_mtu_updated>:
{
   18a3e:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   18a40:	6805      	ldr	r5, [r0, #0]
	return list->head;
   18a42:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18a44:	b352      	cbz	r2, 18a9c <att_chan_mtu_updated+0x5e>
	return node->next;
   18a46:	6813      	ldr	r3, [r2, #0]
   18a48:	b103      	cbz	r3, 18a4c <att_chan_mtu_updated+0xe>
   18a4a:	3b88      	subs	r3, #136	; 0x88
   18a4c:	f1a2 0488 	sub.w	r4, r2, #136	; 0x88
   18a50:	2200      	movs	r2, #0
   18a52:	4611      	mov	r1, r2
   18a54:	e000      	b.n	18a58 <att_chan_mtu_updated+0x1a>
   18a56:	3b88      	subs	r3, #136	; 0x88
		if (chan == updated_chan) {
   18a58:	4284      	cmp	r4, r0
   18a5a:	d007      	beq.n	18a6c <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   18a5c:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   18a5e:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   18a60:	42b1      	cmp	r1, r6
   18a62:	bf38      	it	cc
   18a64:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   18a66:	42a2      	cmp	r2, r4
   18a68:	bf38      	it	cc
   18a6a:	4622      	movcc	r2, r4
   18a6c:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18a6e:	b12b      	cbz	r3, 18a7c <att_chan_mtu_updated+0x3e>
   18a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   18a74:	2b00      	cmp	r3, #0
   18a76:	d1ee      	bne.n	18a56 <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   18a78:	4284      	cmp	r4, r0
   18a7a:	d1ef      	bne.n	18a5c <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   18a7c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   18a7e:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   18a80:	428b      	cmp	r3, r1
   18a82:	d801      	bhi.n	18a88 <att_chan_mtu_updated+0x4a>
   18a84:	4290      	cmp	r0, r2
   18a86:	d90b      	bls.n	18aa0 <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   18a88:	4282      	cmp	r2, r0
   18a8a:	bf38      	it	cc
   18a8c:	4602      	movcc	r2, r0
   18a8e:	4299      	cmp	r1, r3
   18a90:	6828      	ldr	r0, [r5, #0]
   18a92:	bf38      	it	cc
   18a94:	4619      	movcc	r1, r3
}
   18a96:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   18a98:	f7f8 bf4c 	b.w	11934 <bt_gatt_att_max_mtu_changed>
   18a9c:	4611      	mov	r1, r2
   18a9e:	e7ed      	b.n	18a7c <att_chan_mtu_updated+0x3e>
}
   18aa0:	bc70      	pop	{r4, r5, r6}
   18aa2:	4770      	bx	lr

00018aa4 <attr_read_group_cb>:
	if (!data->rsp->len) {
   18aa4:	68d0      	ldr	r0, [r2, #12]
   18aa6:	3104      	adds	r1, #4
   18aa8:	7803      	ldrb	r3, [r0, #0]
   18aaa:	b913      	cbnz	r3, 18ab2 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   18aac:	7001      	strb	r1, [r0, #0]
	return true;
   18aae:	2001      	movs	r0, #1
   18ab0:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   18ab2:	428b      	cmp	r3, r1
   18ab4:	d0fb      	beq.n	18aae <attr_read_group_cb+0xa>
		data->group = NULL;
   18ab6:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   18ab8:	6891      	ldr	r1, [r2, #8]
   18aba:	8a0b      	ldrh	r3, [r1, #16]
   18abc:	3b04      	subs	r3, #4
   18abe:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   18ac0:	6110      	str	r0, [r2, #16]
}
   18ac2:	4770      	bx	lr

00018ac4 <z_log_msg_static_create.constprop.0>:
   18ac4:	2300      	movs	r3, #0
   18ac6:	f7f1 bf19 	b.w	a8fc <z_impl_z_log_msg_static_create>

00018aca <chan_req_send>:
{
   18aca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18acc:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   18ace:	6888      	ldr	r0, [r1, #8]
   18ad0:	f7ff ff0d 	bl	188ee <net_buf_frags_len>
   18ad4:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
{
   18ad6:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   18ad8:	4283      	cmp	r3, r0
   18ada:	d30b      	bcc.n	18af4 <chan_req_send+0x2a>
	req->buf = NULL;
   18adc:	2600      	movs	r6, #0
	chan->req = req;
   18ade:	63a9      	str	r1, [r5, #56]	; 0x38
	buf = req->buf;
   18ae0:	688f      	ldr	r7, [r1, #8]
	return chan_send(chan, buf);
   18ae2:	4628      	mov	r0, r5
	req->buf = NULL;
   18ae4:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   18ae6:	4639      	mov	r1, r7
   18ae8:	f7f7 f98c 	bl	fe04 <chan_send>
	if (err) {
   18aec:	b108      	cbz	r0, 18af2 <chan_req_send+0x28>
		req->buf = buf;
   18aee:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   18af0:	63ae      	str	r6, [r5, #56]	; 0x38
}
   18af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   18af4:	f06f 0079 	mvn.w	r0, #121	; 0x79
   18af8:	e7fb      	b.n	18af2 <chan_req_send+0x28>

00018afa <process_queue>:
{
   18afa:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   18afc:	2200      	movs	r2, #0
{
   18afe:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   18b00:	2300      	movs	r3, #0
   18b02:	4608      	mov	r0, r1
{
   18b04:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   18b06:	f000 fe29 	bl	1975c <net_buf_get>
	if (buf) {
   18b0a:	4605      	mov	r5, r0
   18b0c:	b158      	cbz	r0, 18b26 <process_queue+0x2c>
	return chan_send(chan, buf);
   18b0e:	4601      	mov	r1, r0
   18b10:	4620      	mov	r0, r4
   18b12:	f7f7 f977 	bl	fe04 <chan_send>
		if (err) {
   18b16:	4604      	mov	r4, r0
   18b18:	b118      	cbz	r0, 18b22 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   18b1a:	4629      	mov	r1, r5
   18b1c:	4630      	mov	r0, r6
   18b1e:	f002 f82d 	bl	1ab7c <k_queue_prepend>
}
   18b22:	4620      	mov	r0, r4
   18b24:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   18b26:	f06f 0401 	mvn.w	r4, #1
   18b2a:	e7fa      	b.n	18b22 <process_queue+0x28>

00018b2c <bt_att_chan_send_rsp>:
{
   18b2c:	b538      	push	{r3, r4, r5, lr}
   18b2e:	4604      	mov	r4, r0
   18b30:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   18b32:	f7f7 f967 	bl	fe04 <chan_send>
	if (err) {
   18b36:	b130      	cbz	r0, 18b46 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   18b38:	4629      	mov	r1, r5
   18b3a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
}
   18b3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   18b42:	f000 be3a 	b.w	197ba <net_buf_put>
}
   18b46:	bd38      	pop	{r3, r4, r5, pc}

00018b48 <att_chan_read>:
{
   18b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b4c:	4680      	mov	r8, r0
   18b4e:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   18b50:	4610      	mov	r0, r2
{
   18b52:	4699      	mov	r9, r3
   18b54:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   18b56:	f7ff feca 	bl	188ee <net_buf_frags_len>
   18b5a:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
{
   18b5e:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   18b60:	4283      	cmp	r3, r0
   18b62:	d97a      	bls.n	18c5a <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   18b64:	f8d8 3004 	ldr.w	r3, [r8, #4]
	frag = net_buf_frag_last(buf);
   18b68:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   18b6a:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   18b6c:	f000 fe2b 	bl	197c6 <net_buf_frag_last>
	size_t len, total = 0;
   18b70:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   18b74:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   18b76:	4630      	mov	r0, r6
   18b78:	f7ff feb9 	bl	188ee <net_buf_frags_len>
   18b7c:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   18b80:	f105 070c 	add.w	r7, r5, #12
   18b84:	1a24      	subs	r4, r4, r0
   18b86:	4638      	mov	r0, r7
   18b88:	f000 fe87 	bl	1989a <net_buf_simple_tailroom>
   18b8c:	4284      	cmp	r4, r0
   18b8e:	d211      	bcs.n	18bb4 <att_chan_read+0x6c>
   18b90:	4630      	mov	r0, r6
   18b92:	f7ff feac 	bl	188ee <net_buf_frags_len>
   18b96:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   18b9a:	1a24      	subs	r4, r4, r0
		if (!len) {
   18b9c:	bb34      	cbnz	r4, 18bec <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   18b9e:	7ab0      	ldrb	r0, [r6, #10]
   18ba0:	f7f8 ff26 	bl	119f0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   18ba4:	2200      	movs	r2, #0
   18ba6:	2300      	movs	r3, #0
   18ba8:	f000 fdd3 	bl	19752 <net_buf_alloc_fixed>
			if (!frag) {
   18bac:	4605      	mov	r5, r0
   18bae:	b930      	cbnz	r0, 18bbe <att_chan_read+0x76>
	return total;
   18bb0:	4657      	mov	r7, sl
   18bb2:	e02c      	b.n	18c0e <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   18bb4:	4638      	mov	r0, r7
   18bb6:	f000 fe70 	bl	1989a <net_buf_simple_tailroom>
   18bba:	4604      	mov	r4, r0
   18bbc:	e7ee      	b.n	18b9c <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   18bbe:	4601      	mov	r1, r0
   18bc0:	4630      	mov	r0, r6
   18bc2:	f000 fe11 	bl	197e8 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   18bc6:	4630      	mov	r0, r6
   18bc8:	f7ff fe91 	bl	188ee <net_buf_frags_len>
   18bcc:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   18bd0:	f105 070c 	add.w	r7, r5, #12
   18bd4:	1a24      	subs	r4, r4, r0
   18bd6:	4638      	mov	r0, r7
   18bd8:	f000 fe5f 	bl	1989a <net_buf_simple_tailroom>
   18bdc:	4284      	cmp	r4, r0
   18bde:	d21a      	bcs.n	18c16 <att_chan_read+0xce>
   18be0:	4630      	mov	r0, r6
   18be2:	f7ff fe84 	bl	188ee <net_buf_frags_len>
   18be6:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   18bea:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   18bec:	68e9      	ldr	r1, [r5, #12]
   18bee:	8a2a      	ldrh	r2, [r5, #16]
   18bf0:	f8cd 9000 	str.w	r9, [sp]
   18bf4:	f8db 7004 	ldr.w	r7, [fp, #4]
   18bf8:	440a      	add	r2, r1
   18bfa:	9803      	ldr	r0, [sp, #12]
   18bfc:	4659      	mov	r1, fp
   18bfe:	b2a3      	uxth	r3, r4
   18c00:	47b8      	blx	r7
		if (read < 0) {
   18c02:	1e07      	subs	r7, r0, #0
   18c04:	da0c      	bge.n	18c20 <att_chan_read+0xd8>
				return total;
   18c06:	f1ba 0f00 	cmp.w	sl, #0
   18c0a:	bf18      	it	ne
   18c0c:	4657      	movne	r7, sl
}
   18c0e:	4638      	mov	r0, r7
   18c10:	b005      	add	sp, #20
   18c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c16:	4638      	mov	r0, r7
   18c18:	f000 fe3f 	bl	1989a <net_buf_simple_tailroom>
   18c1c:	4604      	mov	r4, r0
   18c1e:	e7e5      	b.n	18bec <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   18c20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18c22:	b993      	cbnz	r3, 18c4a <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   18c24:	4639      	mov	r1, r7
   18c26:	f105 000c 	add.w	r0, r5, #12
   18c2a:	f000 fdf2 	bl	19812 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   18c2e:	4630      	mov	r0, r6
   18c30:	f7ff fe5d 	bl	188ee <net_buf_frags_len>
   18c34:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   18c38:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   18c3a:	4283      	cmp	r3, r0
		total += read;
   18c3c:	44ba      	add	sl, r7
		offset += read;
   18c3e:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   18c42:	d9b5      	bls.n	18bb0 <att_chan_read+0x68>
   18c44:	42a7      	cmp	r7, r4
   18c46:	d096      	beq.n	18b76 <att_chan_read+0x2e>
   18c48:	e7b2      	b.n	18bb0 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   18c4a:	4639      	mov	r1, r7
   18c4c:	4628      	mov	r0, r5
   18c4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   18c50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18c52:	4798      	blx	r3
   18c54:	2800      	cmp	r0, #0
   18c56:	d1e5      	bne.n	18c24 <att_chan_read+0xdc>
   18c58:	e7aa      	b.n	18bb0 <att_chan_read+0x68>
		return 0;
   18c5a:	2700      	movs	r7, #0
   18c5c:	e7d7      	b.n	18c0e <att_chan_read+0xc6>

00018c5e <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18c5e:	2200      	movs	r2, #0
	return list->head;
   18c60:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18c62:	b903      	cbnz	r3, 18c66 <sys_slist_find_and_remove.isra.0+0x8>
   18c64:	4770      	bx	lr
   18c66:	428b      	cmp	r3, r1
   18c68:	d10f      	bne.n	18c8a <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   18c6a:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   18c6c:	b93a      	cbnz	r2, 18c7e <sys_slist_find_and_remove.isra.0+0x20>
   18c6e:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   18c70:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   18c72:	4291      	cmp	r1, r2
   18c74:	d100      	bne.n	18c78 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   18c76:	6043      	str	r3, [r0, #4]
	parent->next = child;
   18c78:	2300      	movs	r3, #0
   18c7a:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   18c7c:	4770      	bx	lr
	parent->next = child;
   18c7e:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   18c80:	6843      	ldr	r3, [r0, #4]
   18c82:	4299      	cmp	r1, r3
	list->tail = node;
   18c84:	bf08      	it	eq
   18c86:	6042      	streq	r2, [r0, #4]
}
   18c88:	e7f6      	b.n	18c78 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   18c8a:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18c8c:	681b      	ldr	r3, [r3, #0]
   18c8e:	e7e8      	b.n	18c62 <sys_slist_find_and_remove.isra.0+0x4>

00018c90 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   18c90:	2301      	movs	r3, #1
   18c92:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18c94:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18c96:	e8d0 2fef 	ldaex	r2, [r0]
   18c9a:	401a      	ands	r2, r3
   18c9c:	e8c0 2fe1 	stlex	r1, r2, [r0]
   18ca0:	2900      	cmp	r1, #0
   18ca2:	d1f8      	bne.n	18c96 <atomic_clear_bit+0x6>
}
   18ca4:	4770      	bx	lr

00018ca6 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   18ca6:	2006      	movs	r0, #6
   18ca8:	4770      	bx	lr

00018caa <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   18caa:	2301      	movs	r3, #1
{
   18cac:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   18cae:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18cb2:	e8d0 3fef 	ldaex	r3, [r0]
   18cb6:	ea43 0201 	orr.w	r2, r3, r1
   18cba:	e8c0 2fe4 	stlex	r4, r2, [r0]
   18cbe:	2c00      	cmp	r4, #0
   18cc0:	d1f7      	bne.n	18cb2 <atomic_test_and_set_bit+0x8>
	return (old & mask) != 0;
   18cc2:	4219      	tst	r1, r3
}
   18cc4:	bf14      	ite	ne
   18cc6:	2001      	movne	r0, #1
   18cc8:	2000      	moveq	r0, #0
   18cca:	bd10      	pop	{r4, pc}

00018ccc <read_cb>:
{
   18ccc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	data->err = 0x00;
   18cce:	2300      	movs	r3, #0
{
   18cd0:	4605      	mov	r5, r0
	struct bt_att_chan *chan = data->chan;
   18cd2:	6816      	ldr	r6, [r2, #0]
{
   18cd4:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   18cd6:	6870      	ldr	r0, [r6, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   18cd8:	4629      	mov	r1, r5
	data->err = 0x00;
   18cda:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   18cdc:	2295      	movs	r2, #149	; 0x95
   18cde:	f000 fc30 	bl	19542 <bt_gatt_check_perm>
   18ce2:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   18ce4:	b980      	cbnz	r0, 18d08 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   18ce6:	e9cd 0000 	strd	r0, r0, [sp]
   18cea:	4629      	mov	r1, r5
   18cec:	4630      	mov	r0, r6
   18cee:	88a3      	ldrh	r3, [r4, #4]
   18cf0:	68a2      	ldr	r2, [r4, #8]
   18cf2:	f7ff ff29 	bl	18b48 <att_chan_read>
	if (ret < 0) {
   18cf6:	2800      	cmp	r0, #0
   18cf8:	da09      	bge.n	18d0e <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   18cfa:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   18cfe:	bf32      	itee	cc
   18d00:	200e      	movcc	r0, #14
		return -err;
   18d02:	4240      	negcs	r0, r0
   18d04:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(ret);
   18d06:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   18d08:	2000      	movs	r0, #0
}
   18d0a:	b002      	add	sp, #8
   18d0c:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   18d0e:	2001      	movs	r0, #1
   18d10:	e7fb      	b.n	18d0a <read_cb+0x3e>

00018d12 <read_vl_cb>:
{
   18d12:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	data->err = 0x00;
   18d16:	2300      	movs	r3, #0
{
   18d18:	4606      	mov	r6, r0
	struct bt_att_chan *chan = data->chan;
   18d1a:	f8d2 8000 	ldr.w	r8, [r2]
{
   18d1e:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   18d20:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   18d24:	4631      	mov	r1, r6
	data->err = 0x00;
   18d26:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   18d28:	2295      	movs	r2, #149	; 0x95
   18d2a:	f000 fc0a 	bl	19542 <bt_gatt_check_perm>
   18d2e:	4605      	mov	r5, r0
   18d30:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   18d32:	b9e0      	cbnz	r0, 18d6e <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   18d34:	68a0      	ldr	r0, [r4, #8]
   18d36:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   18d3a:	8a02      	ldrh	r2, [r0, #16]
   18d3c:	1a9b      	subs	r3, r3, r2
   18d3e:	2b01      	cmp	r3, #1
   18d40:	dd15      	ble.n	18d6e <read_vl_cb+0x5c>
   18d42:	2102      	movs	r1, #2
   18d44:	300c      	adds	r0, #12
   18d46:	f000 fd64 	bl	19812 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   18d4a:	e9cd 5500 	strd	r5, r5, [sp]
   18d4e:	4607      	mov	r7, r0
   18d50:	88a3      	ldrh	r3, [r4, #4]
   18d52:	4631      	mov	r1, r6
   18d54:	4640      	mov	r0, r8
   18d56:	68a2      	ldr	r2, [r4, #8]
   18d58:	f7ff fef6 	bl	18b48 <att_chan_read>
	if (read < 0) {
   18d5c:	1e03      	subs	r3, r0, #0
   18d5e:	da0a      	bge.n	18d76 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   18d60:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   18d64:	bf32      	itee	cc
   18d66:	230e      	movcc	r3, #14
		return -err;
   18d68:	425b      	negcs	r3, r3
   18d6a:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(read);
   18d6c:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   18d6e:	2000      	movs	r0, #0
}
   18d70:	b002      	add	sp, #8
   18d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return BT_GATT_ITER_CONTINUE;
   18d76:	2001      	movs	r0, #1
	rsp->len = read;
   18d78:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   18d7a:	e7f9      	b.n	18d70 <read_vl_cb+0x5e>

00018d7c <bt_att_sent>:
{
   18d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att *att = chan->att;
   18d7e:	f850 4c04 	ldr.w	r4, [r0, #-4]
{
   18d82:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   18d84:	1f07      	subs	r7, r0, #4
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   18d86:	2104      	movs	r1, #4
   18d88:	3030      	adds	r0, #48	; 0x30
   18d8a:	f7ff ff81 	bl	18c90 <atomic_clear_bit>
	if (!att) {
   18d8e:	b304      	cbz	r4, 18dd2 <bt_att_sent+0x56>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   18d90:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   18d92:	b98b      	cbnz	r3, 18db8 <bt_att_sent+0x3c>
   18d94:	6863      	ldr	r3, [r4, #4]
   18d96:	b17b      	cbz	r3, 18db8 <bt_att_sent+0x3c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   18d98:	1d20      	adds	r0, r4, #4
   18d9a:	f7ff fd9e 	bl	188da <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   18d9e:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   18da0:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   18da2:	4638      	mov	r0, r7
   18da4:	f7ff fe91 	bl	18aca <chan_req_send>
   18da8:	2800      	cmp	r0, #0
   18daa:	da12      	bge.n	18dd2 <bt_att_sent+0x56>
	return list->head;
   18dac:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   18dae:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   18db0:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   18db2:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   18db4:	b903      	cbnz	r3, 18db8 <bt_att_sent+0x3c>
	list->tail = node;
   18db6:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   18db8:	4638      	mov	r0, r7
   18dba:	f105 0138 	add.w	r1, r5, #56	; 0x38
   18dbe:	f7ff fe9c 	bl	18afa <process_queue>
	if (!err) {
   18dc2:	b130      	cbz	r0, 18dd2 <bt_att_sent+0x56>
	(void)process_queue(chan, &att->tx_queue);
   18dc4:	4638      	mov	r0, r7
   18dc6:	f104 010c 	add.w	r1, r4, #12
}
   18dca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   18dce:	f7ff be94 	b.w	18afa <process_queue>
}
   18dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00018dd4 <att_req_send_process>:
{
   18dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   18dd8:	6a44      	ldr	r4, [r0, #36]	; 0x24
   18dda:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18ddc:	2c00      	cmp	r4, #0
   18dde:	d03a      	beq.n	18e56 <att_req_send_process+0x82>
	return node->next;
   18de0:	f854 6988 	ldr.w	r6, [r4], #-136
   18de4:	b106      	cbz	r6, 18de8 <att_req_send_process+0x14>
   18de6:	3e88      	subs	r6, #136	; 0x88
{
   18de8:	2300      	movs	r3, #0
		req = get_first_req_matching_chan(&att->reqs, chan);
   18dea:	f108 0704 	add.w	r7, r8, #4
{
   18dee:	461d      	mov	r5, r3
   18df0:	e013      	b.n	18e1a <att_req_send_process+0x46>
		if (!req && prev &&
   18df2:	b1bb      	cbz	r3, 18e24 <att_req_send_process+0x50>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   18df4:	2103      	movs	r1, #3
   18df6:	f104 0034 	add.w	r0, r4, #52	; 0x34
   18dfa:	f7ff fd92 	bl	18922 <atomic_test_bit>
   18dfe:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   18e00:	f103 0034 	add.w	r0, r3, #52	; 0x34
   18e04:	f7ff fd8d 	bl	18922 <atomic_test_bit>
		if (!req && prev &&
   18e08:	4282      	cmp	r2, r0
   18e0a:	d10b      	bne.n	18e24 <att_req_send_process+0x50>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18e0c:	b31e      	cbz	r6, 18e56 <att_req_send_process+0x82>
   18e0e:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
   18e12:	b102      	cbz	r2, 18e16 <att_req_send_process+0x42>
   18e14:	3a88      	subs	r2, #136	; 0x88
{
   18e16:	4634      	mov	r4, r6
   18e18:	4616      	mov	r6, r2
		if (chan->req) {
   18e1a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   18e1c:	2a00      	cmp	r2, #0
   18e1e:	d1f5      	bne.n	18e0c <att_req_send_process+0x38>
		if (!req && prev &&
   18e20:	2d00      	cmp	r5, #0
   18e22:	d0e6      	beq.n	18df2 <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   18e24:	4638      	mov	r0, r7
   18e26:	f7ff fd58 	bl	188da <sys_slist_get>
	if (node) {
   18e2a:	4605      	mov	r5, r0
   18e2c:	b908      	cbnz	r0, 18e32 <att_req_send_process+0x5e>
   18e2e:	4623      	mov	r3, r4
   18e30:	e7ec      	b.n	18e0c <att_req_send_process+0x38>
	return chan_req_send(chan, req);
   18e32:	4601      	mov	r1, r0
   18e34:	4620      	mov	r0, r4
   18e36:	f7ff fe48 	bl	18aca <chan_req_send>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   18e3a:	2800      	cmp	r0, #0
   18e3c:	da0b      	bge.n	18e56 <att_req_send_process+0x82>
	return list->head;
   18e3e:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   18e42:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   18e44:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   18e48:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   18e4c:	2b00      	cmp	r3, #0
   18e4e:	d1ee      	bne.n	18e2e <att_req_send_process+0x5a>
	list->tail = node;
   18e50:	f8c8 5008 	str.w	r5, [r8, #8]
}
   18e54:	e7eb      	b.n	18e2e <att_req_send_process+0x5a>
}
   18e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018e5a <bt_att_status>:
{
   18e5a:	b538      	push	{r3, r4, r5, lr}
   18e5c:	4605      	mov	r5, r0
   18e5e:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   18e60:	2100      	movs	r1, #0
   18e62:	f7ff fd5e 	bl	18922 <atomic_test_bit>
   18e66:	b1b8      	cbz	r0, 18e98 <bt_att_status+0x3e>
	if (!chan->att) {
   18e68:	f855 0c04 	ldr.w	r0, [r5, #-4]
   18e6c:	b1a0      	cbz	r0, 18e98 <bt_att_status+0x3e>
	if (chan->req) {
   18e6e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   18e70:	b993      	cbnz	r3, 18e98 <bt_att_status+0x3e>
	node = sys_slist_get(&chan->att->reqs);
   18e72:	3004      	adds	r0, #4
   18e74:	f7ff fd31 	bl	188da <sys_slist_get>
	if (!node) {
   18e78:	4604      	mov	r4, r0
   18e7a:	b168      	cbz	r0, 18e98 <bt_att_status+0x3e>
	return chan_req_send(chan, req);
   18e7c:	4601      	mov	r1, r0
   18e7e:	1f28      	subs	r0, r5, #4
   18e80:	f7ff fe23 	bl	18aca <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   18e84:	2800      	cmp	r0, #0
   18e86:	da07      	bge.n	18e98 <bt_att_status+0x3e>
	sys_slist_prepend(&chan->att->reqs, node);
   18e88:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   18e8c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   18e8e:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   18e90:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   18e92:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   18e94:	b902      	cbnz	r2, 18e98 <bt_att_status+0x3e>
	list->tail = node;
   18e96:	609c      	str	r4, [r3, #8]
}
   18e98:	bd38      	pop	{r3, r4, r5, pc}

00018e9a <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   18e9a:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   18e9c:	6883      	ldr	r3, [r0, #8]
   18e9e:	699b      	ldr	r3, [r3, #24]
   18ea0:	b10b      	cbz	r3, 18ea6 <att_sent+0xc>
		chan->ops->sent(chan);
   18ea2:	3004      	adds	r0, #4
   18ea4:	4718      	bx	r3
}
   18ea6:	4770      	bx	lr

00018ea8 <att_unknown>:
{
   18ea8:	b510      	push	{r4, lr}
   18eaa:	460c      	mov	r4, r1
	if (!err) {
   18eac:	b90a      	cbnz	r2, 18eb2 <att_unknown+0xa>
		att_sent(conn, user_data);
   18eae:	f7ff fff4 	bl	18e9a <att_sent>
	tx_meta_data_free(user_data);
   18eb2:	4620      	mov	r0, r4
}
   18eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   18eb8:	f7f6 bed6 	b.w	fc68 <tx_meta_data_free>

00018ebc <att_tx_complete>:
{
   18ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18ec0:	4606      	mov	r6, r0
   18ec2:	460d      	mov	r5, r1
	if (!err) {
   18ec4:	4614      	mov	r4, r2
   18ec6:	b122      	cbz	r2, 18ed2 <att_tx_complete+0x16>
}
   18ec8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   18ecc:	4608      	mov	r0, r1
   18ece:	f7f6 becb 	b.w	fc68 <tx_meta_data_free>
		att_sent(conn, user_data);
   18ed2:	f7ff ffe2 	bl	18e9a <att_sent>
	bt_gatt_complete_func_t func = data->func;
   18ed6:	68af      	ldr	r7, [r5, #8]
	tx_meta_data_free(data);
   18ed8:	4628      	mov	r0, r5
	uint16_t attr_count = data->attr_count;
   18eda:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   18ede:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   18ee2:	f7f6 fec1 	bl	fc68 <tx_meta_data_free>
	if (!err && func) {
   18ee6:	b92f      	cbnz	r7, 18ef4 <att_tx_complete+0x38>
}
   18ee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   18eec:	4649      	mov	r1, r9
   18eee:	4630      	mov	r0, r6
   18ef0:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   18ef2:	3401      	adds	r4, #1
   18ef4:	b2a3      	uxth	r3, r4
   18ef6:	4543      	cmp	r3, r8
   18ef8:	d3f8      	bcc.n	18eec <att_tx_complete+0x30>
   18efa:	e7f5      	b.n	18ee8 <att_tx_complete+0x2c>

00018efc <att_req_sent>:
{
   18efc:	b510      	push	{r4, lr}
   18efe:	460c      	mov	r4, r1
	if (!err) {
   18f00:	b90a      	cbnz	r2, 18f06 <att_req_sent+0xa>
		att_sent(conn, user_data);
   18f02:	f7ff ffca 	bl	18e9a <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   18f06:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   18f08:	6b83      	ldr	r3, [r0, #56]	; 0x38
   18f0a:	b12b      	cbz	r3, 18f18 <att_req_sent+0x1c>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   18f0c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   18f10:	2300      	movs	r3, #0
   18f12:	3058      	adds	r0, #88	; 0x58
   18f14:	f7fc fdcc 	bl	15ab0 <k_work_reschedule>
	tx_meta_data_free(user_data);
   18f18:	4620      	mov	r0, r4
}
   18f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   18f1e:	f7f6 bea3 	b.w	fc68 <tx_meta_data_free>

00018f22 <att_cfm_sent>:
{
   18f22:	b510      	push	{r4, lr}
   18f24:	460c      	mov	r4, r1
	if (!err) {
   18f26:	b90a      	cbnz	r2, 18f2c <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   18f28:	f7ff ffb7 	bl	18e9a <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   18f2c:	6820      	ldr	r0, [r4, #0]
   18f2e:	2101      	movs	r1, #1
   18f30:	3034      	adds	r0, #52	; 0x34
   18f32:	f7ff fead 	bl	18c90 <atomic_clear_bit>
	tx_meta_data_free(data);
   18f36:	4620      	mov	r0, r4
}
   18f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   18f3c:	f7f6 be94 	b.w	fc68 <tx_meta_data_free>

00018f40 <att_rsp_sent>:
{
   18f40:	b510      	push	{r4, lr}
   18f42:	460c      	mov	r4, r1
	if (!err) {
   18f44:	b90a      	cbnz	r2, 18f4a <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   18f46:	f7ff ffa8 	bl	18e9a <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   18f4a:	6820      	ldr	r0, [r4, #0]
   18f4c:	2100      	movs	r1, #0
   18f4e:	3034      	adds	r0, #52	; 0x34
   18f50:	f7ff fe9e 	bl	18c90 <atomic_clear_bit>
	tx_meta_data_free(data);
   18f54:	4620      	mov	r0, r4
}
   18f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   18f5a:	f7f6 be85 	b.w	fc68 <tx_meta_data_free>

00018f5e <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   18f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18f62:	4688      	mov	r8, r1
   18f64:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   18f66:	2101      	movs	r1, #1
   18f68:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   18f6a:	4605      	mov	r5, r0
   18f6c:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   18f6e:	f7f7 f941 	bl	101f4 <bt_att_chan_create_pdu>
	if (!buf) {
   18f72:	4604      	mov	r4, r0
   18f74:	b170      	cbz	r0, 18f94 <send_err_rsp.part.0+0x36>
   18f76:	2104      	movs	r1, #4
   18f78:	300c      	adds	r0, #12
   18f7a:	f000 fc4a 	bl	19812 <net_buf_simple_add>
	rsp->request = req;
   18f7e:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   18f82:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   18f86:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   18f88:	4621      	mov	r1, r4
   18f8a:	4628      	mov	r0, r5
}
   18f8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   18f90:	f7ff bdcc 	b.w	18b2c <bt_att_chan_send_rsp>
}
   18f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018f98 <att_write_req>:
{
   18f98:	b537      	push	{r0, r1, r2, r4, r5, lr}
   18f9a:	460c      	mov	r4, r1
   18f9c:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   18f9e:	f101 000c 	add.w	r0, r1, #12
   18fa2:	f000 fc6e 	bl	19882 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   18fa6:	8a22      	ldrh	r2, [r4, #16]
   18fa8:	4603      	mov	r3, r0
   18faa:	9201      	str	r2, [sp, #4]
   18fac:	68e2      	ldr	r2, [r4, #12]
   18fae:	2112      	movs	r1, #18
   18fb0:	9200      	str	r2, [sp, #0]
   18fb2:	4628      	mov	r0, r5
   18fb4:	2213      	movs	r2, #19
   18fb6:	f7f7 fa41 	bl	1043c <att_write_rsp.constprop.0>
}
   18fba:	b003      	add	sp, #12
   18fbc:	bd30      	pop	{r4, r5, pc}

00018fbe <att_write_cmd>:
{
   18fbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
   18fc0:	460c      	mov	r4, r1
   18fc2:	4605      	mov	r5, r0
   18fc4:	f101 000c 	add.w	r0, r1, #12
   18fc8:	f000 fc5b 	bl	19882 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   18fcc:	8a22      	ldrh	r2, [r4, #16]
   18fce:	4603      	mov	r3, r0
   18fd0:	9201      	str	r2, [sp, #4]
   18fd2:	68e2      	ldr	r2, [r4, #12]
   18fd4:	4628      	mov	r0, r5
   18fd6:	9200      	str	r2, [sp, #0]
   18fd8:	2200      	movs	r2, #0
   18fda:	4611      	mov	r1, r2
   18fdc:	f7f7 fa2e 	bl	1043c <att_write_rsp.constprop.0>
}
   18fe0:	b003      	add	sp, #12
   18fe2:	bd30      	pop	{r4, r5, pc}

00018fe4 <att_read_blob_req>:
{
   18fe4:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   18fe6:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   18fe8:	210c      	movs	r1, #12
   18fea:	8813      	ldrh	r3, [r2, #0]
   18fec:	8852      	ldrh	r2, [r2, #2]
   18fee:	9200      	str	r2, [sp, #0]
   18ff0:	220d      	movs	r2, #13
   18ff2:	f7f7 fbe7 	bl	107c4 <att_read_rsp>
}
   18ff6:	b003      	add	sp, #12
   18ff8:	f85d fb04 	ldr.w	pc, [sp], #4

00018ffc <att_read_req>:
{
   18ffc:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   18ffe:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   19000:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   19002:	210a      	movs	r1, #10
   19004:	881b      	ldrh	r3, [r3, #0]
   19006:	9200      	str	r2, [sp, #0]
   19008:	220b      	movs	r2, #11
   1900a:	f7f7 fbdb 	bl	107c4 <att_read_rsp>
}
   1900e:	b003      	add	sp, #12
   19010:	f85d fb04 	ldr.w	pc, [sp], #4

00019014 <att_mtu_req>:
{
   19014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19016:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   19018:	f850 2b34 	ldr.w	r2, [r0], #52
{
   1901c:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1901e:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   19020:	6816      	ldr	r6, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   19022:	f7ff fc7e 	bl	18922 <atomic_test_bit>
   19026:	4604      	mov	r4, r0
   19028:	b9d8      	cbnz	r0, 19062 <att_mtu_req+0x4e>
	mtu_client = sys_le16_to_cpu(req->mtu);
   1902a:	68db      	ldr	r3, [r3, #12]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1902c:	881b      	ldrh	r3, [r3, #0]
   1902e:	2b16      	cmp	r3, #22
   19030:	d919      	bls.n	19066 <att_mtu_req+0x52>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   19032:	4630      	mov	r0, r6
   19034:	2202      	movs	r2, #2
   19036:	f7f7 fa65 	bl	10504 <bt_att_create_pdu>
	if (!pdu) {
   1903a:	4606      	mov	r6, r0
   1903c:	b1a8      	cbz	r0, 1906a <att_mtu_req+0x56>
	return net_buf_simple_add(&buf->b, len);
   1903e:	2102      	movs	r1, #2
   19040:	300c      	adds	r0, #12
   19042:	f000 fbe6 	bl	19812 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   19046:	2717      	movs	r7, #23
	bt_att_chan_send_rsp(chan, pdu);
   19048:	4631      	mov	r1, r6
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1904a:	7007      	strb	r7, [r0, #0]
   1904c:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   1904e:	4628      	mov	r0, r5
   19050:	f7ff fd6c 	bl	18b2c <bt_att_chan_send_rsp>
	att_chan_mtu_updated(chan);
   19054:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   19056:	836f      	strh	r7, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   19058:	856f      	strh	r7, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   1905a:	f7ff fcf0 	bl	18a3e <att_chan_mtu_updated>
	return 0;
   1905e:	4620      	mov	r0, r4
}
   19060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   19062:	2006      	movs	r0, #6
   19064:	e7fc      	b.n	19060 <att_mtu_req+0x4c>
		return BT_ATT_ERR_INVALID_PDU;
   19066:	2004      	movs	r0, #4
   19068:	e7fa      	b.n	19060 <att_mtu_req+0x4c>
		return BT_ATT_ERR_UNLIKELY;
   1906a:	200e      	movs	r0, #14
   1906c:	e7f8      	b.n	19060 <att_mtu_req+0x4c>

0001906e <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1906e:	8a0a      	ldrh	r2, [r1, #16]
   19070:	2300      	movs	r3, #0
   19072:	68c9      	ldr	r1, [r1, #12]
   19074:	f7f7 bd52 	b.w	10b1c <att_handle_rsp>

00019078 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   19078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1907a:	460d      	mov	r5, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   1907c:	f7f6 ff3a 	bl	fef4 <att_get>
	if (!att) {
   19080:	4604      	mov	r4, r0
   19082:	b940      	cbnz	r0, 19096 <bt_att_send+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   19084:	69a8      	ldr	r0, [r5, #24]
   19086:	f7f6 fdef 	bl	fc68 <tx_meta_data_free>
		net_buf_unref(buf);
   1908a:	4628      	mov	r0, r5
   1908c:	f7f8 fd72 	bl	11b74 <net_buf_unref>
		return -ENOTCONN;
   19090:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   19094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   19096:	f100 060c 	add.w	r6, r0, #12
   1909a:	4629      	mov	r1, r5
   1909c:	4630      	mov	r0, r6
   1909e:	f000 fb8c 	bl	197ba <net_buf_put>
	return list->head;
   190a2:	6a65      	ldr	r5, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   190a4:	b14d      	cbz	r5, 190ba <bt_att_send+0x42>
	return node->next;
   190a6:	f855 4988 	ldr.w	r4, [r5], #-136
   190aa:	b104      	cbz	r4, 190ae <bt_att_send+0x36>
   190ac:	3c88      	subs	r4, #136	; 0x88
		err = process_queue(chan, &att->tx_queue);
   190ae:	4631      	mov	r1, r6
   190b0:	4628      	mov	r0, r5
   190b2:	f7ff fd22 	bl	18afa <process_queue>
		if (!err) {
   190b6:	4603      	mov	r3, r0
   190b8:	b980      	cbnz	r0, 190dc <bt_att_send+0x64>
	return 0;
   190ba:	2000      	movs	r0, #0
   190bc:	e7ea      	b.n	19094 <bt_att_send+0x1c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   190be:	2103      	movs	r1, #3
   190c0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   190c4:	f7ff fc2d 	bl	18922 <atomic_test_bit>
   190c8:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   190ca:	f105 0034 	add.w	r0, r5, #52	; 0x34
   190ce:	f7ff fc28 	bl	18922 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   190d2:	4287      	cmp	r7, r0
   190d4:	f06f 0301 	mvn.w	r3, #1
   190d8:	d107      	bne.n	190ea <bt_att_send+0x72>
   190da:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   190dc:	2c00      	cmp	r4, #0
   190de:	d0ec      	beq.n	190ba <bt_att_send+0x42>
   190e0:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   190e4:	b922      	cbnz	r2, 190f0 <bt_att_send+0x78>
		if (err == -ENOENT && prev &&
   190e6:	3302      	adds	r3, #2
   190e8:	d0e9      	beq.n	190be <bt_att_send+0x46>
{
   190ea:	4625      	mov	r5, r4
   190ec:	4614      	mov	r4, r2
   190ee:	e7de      	b.n	190ae <bt_att_send+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   190f0:	3a88      	subs	r2, #136	; 0x88
   190f2:	e7f8      	b.n	190e6 <bt_att_send+0x6e>

000190f4 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   190f4:	b510      	push	{r4, lr}
   190f6:	460c      	mov	r4, r1
	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   190f8:	f7f6 fefc 	bl	fef4 <att_get>
	if (!att) {
   190fc:	b160      	cbz	r0, 19118 <bt_att_req_send+0x24>
	parent->next = child;
   190fe:	2300      	movs	r3, #0
   19100:	6023      	str	r3, [r4, #0]
	return list->tail;
   19102:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   19104:	b92b      	cbnz	r3, 19112 <bt_att_req_send+0x1e>
	list->head = node;
   19106:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1910a:	f7ff fe63 	bl	18dd4 <att_req_send_process>

	return 0;
   1910e:	2000      	movs	r0, #0
}
   19110:	bd10      	pop	{r4, pc}
	parent->next = child;
   19112:	601c      	str	r4, [r3, #0]
	list->tail = node;
   19114:	6084      	str	r4, [r0, #8]
}
   19116:	e7f8      	b.n	1910a <bt_att_req_send+0x16>
		return -ENOTCONN;
   19118:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1911c:	e7f8      	b.n	19110 <bt_att_req_send+0x1c>

0001911e <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   1911e:	2001      	movs	r0, #1
   19120:	4770      	bx	lr

00019122 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   19122:	b510      	push	{r4, lr}
	struct bt_att *att = att_get(conn);
   19124:	f7f6 fee6 	bl	fef4 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   19128:	b150      	cbz	r0, 19140 <bt_att_clear_out_of_sync_sent+0x1e>
	return list->head;
   1912a:	6a44      	ldr	r4, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1912c:	b144      	cbz	r4, 19140 <bt_att_clear_out_of_sync_sent+0x1e>
   1912e:	3c88      	subs	r4, #136	; 0x88
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
   19130:	f104 0034 	add.w	r0, r4, #52	; 0x34
   19134:	2105      	movs	r1, #5
   19136:	f7ff fdab 	bl	18c90 <atomic_clear_bit>
	return node->next;
   1913a:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
   1913e:	e7f5      	b.n	1912c <bt_att_clear_out_of_sync_sent+0xa>
	}
}
   19140:	bd10      	pop	{r4, pc}

00019142 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   19142:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   19144:	2104      	movs	r1, #4
   19146:	f7ff fbbe 	bl	188c6 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   1914a:	b128      	cbz	r0, 19158 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   1914c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   19150:	2105      	movs	r1, #5
   19152:	3030      	adds	r0, #48	; 0x30
   19154:	f7ff bbe5 	b.w	18922 <atomic_test_bit>
}
   19158:	bd08      	pop	{r3, pc}

0001915a <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1915a:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   1915c:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   19160:	2201      	movs	r2, #1
	data->chan_opt = chan_opt;
   19162:	7403      	strb	r3, [r0, #16]
	data->attr_count = 1;
   19164:	8082      	strh	r2, [r0, #4]
}
   19166:	4770      	bx	lr

00019168 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   19168:	6010      	str	r0, [r2, #0]
}
   1916a:	2000      	movs	r0, #0
   1916c:	4770      	bx	lr

0001916e <gatt_ccc_changed>:
{
   1916e:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   19170:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   19172:	895a      	ldrh	r2, [r3, #10]
   19174:	428a      	cmp	r2, r1
   19176:	d003      	beq.n	19180 <gatt_ccc_changed+0x12>
		ccc->value = value;
   19178:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   1917a:	68db      	ldr	r3, [r3, #12]
   1917c:	b103      	cbz	r3, 19180 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   1917e:	4718      	bx	r3
}
   19180:	4770      	bx	lr

00019182 <gatt_indicate_rsp>:
{
   19182:	b510      	push	{r4, lr}
   19184:	9c02      	ldr	r4, [sp, #8]
   19186:	460a      	mov	r2, r1
	if (params->func) {
   19188:	68a3      	ldr	r3, [r4, #8]
   1918a:	b10b      	cbz	r3, 19190 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   1918c:	4621      	mov	r1, r4
   1918e:	4798      	blx	r3
	params->_ref--;
   19190:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   19192:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   19194:	3b01      	subs	r3, #1
   19196:	b2db      	uxtb	r3, r3
   19198:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1919a:	b122      	cbz	r2, 191a6 <gatt_indicate_rsp+0x24>
   1919c:	b91b      	cbnz	r3, 191a6 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   1919e:	4620      	mov	r0, r4
}
   191a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   191a4:	4710      	bx	r2
}
   191a6:	bd10      	pop	{r4, pc}

000191a8 <match_uuid>:
	data->attr = attr;
   191a8:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   191aa:	8091      	strh	r1, [r2, #4]
}
   191ac:	2000      	movs	r0, #0
   191ae:	4770      	bx	lr

000191b0 <gen_hash_m>:
{
   191b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   191b2:	6807      	ldr	r7, [r0, #0]
{
   191b4:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   191b6:	783d      	ldrb	r5, [r7, #0]
{
   191b8:	4614      	mov	r4, r2
   191ba:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   191bc:	b9dd      	cbnz	r5, 191f6 <gen_hash_m+0x46>
	switch (u16->val) {
   191be:	887b      	ldrh	r3, [r7, #2]
   191c0:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   191c4:	d004      	beq.n	191d0 <gen_hash_m+0x20>
   191c6:	d810      	bhi.n	191ea <gen_hash_m+0x3a>
   191c8:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   191cc:	2b03      	cmp	r3, #3
   191ce:	d812      	bhi.n	191f6 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   191d0:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   191d4:	2202      	movs	r2, #2
   191d6:	4620      	mov	r0, r4
   191d8:	f10d 010a 	add.w	r1, sp, #10
   191dc:	f7fe fc89 	bl	17af2 <tc_cmac_update>
   191e0:	b968      	cbnz	r0, 191fe <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   191e2:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   191e6:	65a2      	str	r2, [r4, #88]	; 0x58
   191e8:	e006      	b.n	191f8 <gen_hash_m+0x48>
	switch (u16->val) {
   191ea:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   191ee:	33ff      	adds	r3, #255	; 0xff
   191f0:	b29b      	uxth	r3, r3
   191f2:	2b04      	cmp	r3, #4
   191f4:	d91e      	bls.n	19234 <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   191f6:	2501      	movs	r5, #1
}
   191f8:	4628      	mov	r0, r5
   191fa:	b009      	add	sp, #36	; 0x24
   191fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   191fe:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   19200:	2202      	movs	r2, #2
   19202:	4620      	mov	r0, r4
   19204:	f10d 010a 	add.w	r1, sp, #10
		value = sys_cpu_to_le16(u16->val);
   19208:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1920c:	f7fe fc71 	bl	17af2 <tc_cmac_update>
   19210:	2800      	cmp	r0, #0
   19212:	d0e6      	beq.n	191e2 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   19214:	2000      	movs	r0, #0
   19216:	9000      	str	r0, [sp, #0]
   19218:	aa03      	add	r2, sp, #12
   1921a:	2313      	movs	r3, #19
   1921c:	4631      	mov	r1, r6
   1921e:	6877      	ldr	r7, [r6, #4]
   19220:	47b8      	blx	r7
		if (len < 0) {
   19222:	1e02      	subs	r2, r0, #0
   19224:	dbdf      	blt.n	191e6 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   19226:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   19228:	4620      	mov	r0, r4
   1922a:	f7fe fc62 	bl	17af2 <tc_cmac_update>
   1922e:	2800      	cmp	r0, #0
   19230:	d1e1      	bne.n	191f6 <gen_hash_m+0x46>
   19232:	e7d6      	b.n	191e2 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   19234:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   19238:	2202      	movs	r2, #2
   1923a:	4620      	mov	r0, r4
   1923c:	f10d 010a 	add.w	r1, sp, #10
   19240:	f7fe fc57 	bl	17af2 <tc_cmac_update>
   19244:	2800      	cmp	r0, #0
   19246:	d0cc      	beq.n	191e2 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   19248:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1924a:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   1924c:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   19250:	f10d 010a 	add.w	r1, sp, #10
   19254:	e7e8      	b.n	19228 <gen_hash_m+0x78>

00019256 <bt_addr_le_eq>:
   19256:	2207      	movs	r2, #7
{
   19258:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   1925a:	f7fe ff98 	bl	1818e <memcmp>
}
   1925e:	fab0 f080 	clz	r0, r0
   19262:	0940      	lsrs	r0, r0, #5
   19264:	bd08      	pop	{r3, pc}

00019266 <atomic_or>:
{
   19266:	4603      	mov	r3, r0
   19268:	b510      	push	{r4, lr}
}
   1926a:	e8d3 0fef 	ldaex	r0, [r3]
   1926e:	ea40 0201 	orr.w	r2, r0, r1
   19272:	e8c3 2fe4 	stlex	r4, r2, [r3]
   19276:	2c00      	cmp	r4, #0
   19278:	d1f7      	bne.n	1926a <atomic_or+0x4>
   1927a:	bd10      	pop	{r4, pc}

0001927c <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1927c:	2207      	movs	r2, #7
   1927e:	f7fe bf96 	b.w	181ae <memcpy>

00019282 <z_log_msg_static_create.constprop.0>:
   19282:	2300      	movs	r3, #0
   19284:	f7f1 bb3a 	b.w	a8fc <z_impl_z_log_msg_static_create>

00019288 <sc_clear>:
{
   19288:	b570      	push	{r4, r5, r6, lr}
   1928a:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1928c:	f100 0688 	add.w	r6, r0, #136	; 0x88
   19290:	4631      	mov	r1, r6
   19292:	7a00      	ldrb	r0, [r0, #8]
   19294:	f7ff f8d2 	bl	1843c <bt_addr_le_is_bonded>
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   19298:	4631      	mov	r1, r6
   1929a:	7a20      	ldrb	r0, [r4, #8]
   1929c:	f7f7 fd1c 	bl	10cd8 <find_sc_cfg>
	if (!cfg) {
   192a0:	b128      	cbz	r0, 192ae <sc_clear+0x26>
}
   192a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   192a6:	220c      	movs	r2, #12
   192a8:	2100      	movs	r1, #0
   192aa:	f7fe bf8b 	b.w	181c4 <memset>
}
   192ae:	bd70      	pop	{r4, r5, r6, pc}

000192b0 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   192b0:	2a02      	cmp	r2, #2
{
   192b2:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   192b4:	d108      	bne.n	192c8 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   192b6:	2300      	movs	r3, #0
   192b8:	f100 0188 	add.w	r1, r0, #136	; 0x88
   192bc:	461a      	mov	r2, r3
   192be:	7a00      	ldrb	r0, [r0, #8]
   192c0:	f7f7 fdaa 	bl	10e18 <sc_save>
}
   192c4:	2002      	movs	r0, #2
   192c6:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   192c8:	f7ff ffde 	bl	19288 <sc_clear>
   192cc:	e7fa      	b.n	192c4 <sc_ccc_cfg_write+0x14>

000192ce <read_appearance>:
{
   192ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   192d0:	4615      	mov	r5, r2
   192d2:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   192d6:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   192d8:	f7ff f8ae 	bl	18438 <bt_get_appearance>
	if (offset > value_len) {
   192dc:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   192de:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   192e2:	d80e      	bhi.n	19302 <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   192e4:	f1c6 0402 	rsb	r4, r6, #2
   192e8:	42bc      	cmp	r4, r7
   192ea:	bfa8      	it	ge
   192ec:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   192ee:	f10d 0306 	add.w	r3, sp, #6
   192f2:	4622      	mov	r2, r4
   192f4:	4628      	mov	r0, r5
   192f6:	1999      	adds	r1, r3, r6
   192f8:	f7fe ff59 	bl	181ae <memcpy>
}
   192fc:	4620      	mov	r0, r4
   192fe:	b003      	add	sp, #12
   19300:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19302:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   19306:	e7f9      	b.n	192fc <read_appearance+0x2e>

00019308 <read_name>:
{
   19308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1930c:	4698      	mov	r8, r3
   1930e:	4615      	mov	r5, r2
   19310:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	const char *name = bt_get_name();
   19314:	f7f4 fe8c 	bl	e030 <bt_get_name>
   19318:	4607      	mov	r7, r0
				 strlen(name));
   1931a:	f7fe ff09 	bl	18130 <strlen>
	if (offset > value_len) {
   1931e:	b283      	uxth	r3, r0
   19320:	42b3      	cmp	r3, r6
   19322:	d30c      	bcc.n	1933e <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   19324:	1b9c      	subs	r4, r3, r6
   19326:	4544      	cmp	r4, r8
   19328:	bfa8      	it	ge
   1932a:	4644      	movge	r4, r8
   1932c:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1932e:	4622      	mov	r2, r4
   19330:	4628      	mov	r0, r5
   19332:	19b9      	adds	r1, r7, r6
   19334:	f7fe ff3b 	bl	181ae <memcpy>
}
   19338:	4620      	mov	r0, r4
   1933a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1933e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   19342:	e7f9      	b.n	19338 <read_name+0x30>

00019344 <cf_read>:
{
   19344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19346:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   19348:	2300      	movs	r3, #0
{
   1934a:	4615      	mov	r5, r2
   1934c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   19350:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg = find_cf_cfg(conn);
   19354:	f7f7 fca8 	bl	10ca8 <find_cf_cfg>
	if (cfg) {
   19358:	b128      	cbz	r0, 19366 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1935a:	f100 0108 	add.w	r1, r0, #8
   1935e:	2201      	movs	r2, #1
   19360:	a801      	add	r0, sp, #4
   19362:	f7fe ff24 	bl	181ae <memcpy>
	if (offset > value_len) {
   19366:	2e01      	cmp	r6, #1
   19368:	d80d      	bhi.n	19386 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1936a:	f1c6 0401 	rsb	r4, r6, #1
   1936e:	42bc      	cmp	r4, r7
   19370:	bfa8      	it	ge
   19372:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   19374:	ab01      	add	r3, sp, #4
   19376:	4622      	mov	r2, r4
   19378:	4628      	mov	r0, r5
   1937a:	1999      	adds	r1, r3, r6
   1937c:	f7fe ff17 	bl	181ae <memcpy>
}
   19380:	4620      	mov	r0, r4
   19382:	b003      	add	sp, #12
   19384:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19386:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1938a:	e7f9      	b.n	19380 <cf_read+0x3c>

0001938c <bt_gatt_attr_read_service>:
{
   1938c:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   1938e:	68c9      	ldr	r1, [r1, #12]
{
   19390:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   19392:	780a      	ldrb	r2, [r1, #0]
{
   19394:	461c      	mov	r4, r3
   19396:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   1939a:	b992      	cbnz	r2, 193c2 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1939c:	884a      	ldrh	r2, [r1, #2]
	if (offset > value_len) {
   1939e:	2b02      	cmp	r3, #2
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   193a0:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   193a4:	d818      	bhi.n	193d8 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   193a6:	f1c3 0202 	rsb	r2, r3, #2
   193aa:	4294      	cmp	r4, r2
   193ac:	bfa8      	it	ge
   193ae:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   193b0:	4622      	mov	r2, r4
   193b2:	f10d 0106 	add.w	r1, sp, #6
   193b6:	4419      	add	r1, r3
   193b8:	f7fe fef9 	bl	181ae <memcpy>
}
   193bc:	4620      	mov	r0, r4
   193be:	b002      	add	sp, #8
   193c0:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   193c2:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   193c4:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   193c8:	d806      	bhi.n	193d8 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   193ca:	f1c3 0210 	rsb	r2, r3, #16
   193ce:	4294      	cmp	r4, r2
   193d0:	bfa8      	it	ge
   193d2:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   193d4:	4622      	mov	r2, r4
   193d6:	e7ee      	b.n	193b6 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   193d8:	f06f 0406 	mvn.w	r4, #6
   193dc:	e7ee      	b.n	193bc <bt_gatt_attr_read_service+0x30>

000193de <bt_gatt_attr_read_ccc>:
{
   193de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   193e0:	68c9      	ldr	r1, [r1, #12]
{
   193e2:	4615      	mov	r5, r2
   193e4:	461f      	mov	r7, r3
   193e6:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	cfg = find_ccc_cfg(conn, ccc);
   193ea:	f7f7 fc85 	bl	10cf8 <find_ccc_cfg>
	if (cfg) {
   193ee:	b100      	cbz	r0, 193f2 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   193f0:	8900      	ldrh	r0, [r0, #8]
	if (offset > value_len) {
   193f2:	2e02      	cmp	r6, #2
   193f4:	f8ad 0006 	strh.w	r0, [sp, #6]
   193f8:	d80e      	bhi.n	19418 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   193fa:	f1c6 0402 	rsb	r4, r6, #2
   193fe:	42bc      	cmp	r4, r7
   19400:	bfa8      	it	ge
   19402:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   19404:	f10d 0306 	add.w	r3, sp, #6
   19408:	4622      	mov	r2, r4
   1940a:	4628      	mov	r0, r5
   1940c:	1999      	adds	r1, r3, r6
   1940e:	f7fe fece 	bl	181ae <memcpy>
}
   19412:	4620      	mov	r0, r4
   19414:	b003      	add	sp, #12
   19416:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19418:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1941c:	e7f9      	b.n	19412 <bt_gatt_attr_read_ccc+0x34>

0001941e <set_change_aware_no_store.constprop.0.isra.0>:
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1941e:	2101      	movs	r1, #1
   19420:	300c      	adds	r0, #12
   19422:	f7ff bf20 	b.w	19266 <atomic_or>

00019426 <sc_restore_rsp>:
{
   19426:	b538      	push	{r3, r4, r5, lr}
   19428:	4604      	mov	r4, r0
   1942a:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   1942c:	f7ff fe77 	bl	1911e <bt_att_fixed_chan_only>
   19430:	b140      	cbz	r0, 19444 <sc_restore_rsp+0x1e>
		cfg = find_cf_cfg(conn);
   19432:	4620      	mov	r0, r4
   19434:	f7f7 fc38 	bl	10ca8 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   19438:	b120      	cbz	r0, 19444 <sc_restore_rsp+0x1e>
   1943a:	7a03      	ldrb	r3, [r0, #8]
   1943c:	07db      	lsls	r3, r3, #31
   1943e:	d501      	bpl.n	19444 <sc_restore_rsp+0x1e>
	bool changed = set_change_aware_no_store(cfg, aware);
   19440:	f7ff ffed 	bl	1941e <set_change_aware_no_store.constprop.0.isra.0>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   19444:	b965      	cbnz	r5, 19460 <sc_restore_rsp+0x3a>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   19446:	7a20      	ldrb	r0, [r4, #8]
   19448:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1944c:	f7f7 fc44 	bl	10cd8 <find_sc_cfg>
		if (sc_cfg) {
   19450:	b130      	cbz	r0, 19460 <sc_restore_rsp+0x3a>
	memset(&cfg->data, 0, sizeof(cfg->data));
   19452:	4629      	mov	r1, r5
}
   19454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   19458:	2204      	movs	r2, #4
   1945a:	3008      	adds	r0, #8
   1945c:	f7fe beb2 	b.w	181c4 <memset>
}
   19460:	bd38      	pop	{r3, r4, r5, pc}

00019462 <bt_gatt_attr_read>:
{
   19462:	b510      	push	{r4, lr}
   19464:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   19468:	f8bd 4010 	ldrh.w	r4, [sp, #16]
   1946c:	4610      	mov	r0, r2
	if (offset > value_len) {
   1946e:	42a1      	cmp	r1, r4
   19470:	d80b      	bhi.n	1948a <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   19472:	1a64      	subs	r4, r4, r1
   19474:	429c      	cmp	r4, r3
   19476:	bfa8      	it	ge
   19478:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1947a:	9b03      	ldr	r3, [sp, #12]
   1947c:	b2a4      	uxth	r4, r4
   1947e:	4622      	mov	r2, r4
   19480:	4419      	add	r1, r3
   19482:	f7fe fe94 	bl	181ae <memcpy>
}
   19486:	4620      	mov	r0, r4
   19488:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1948a:	f06f 0406 	mvn.w	r4, #6
   1948e:	e7fa      	b.n	19486 <bt_gatt_attr_read+0x24>

00019490 <bt_gatt_attr_value_handle>:
{
   19490:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   19492:	4604      	mov	r4, r0
   19494:	b910      	cbnz	r0, 1949c <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   19496:	2000      	movs	r0, #0
}
   19498:	b002      	add	sp, #8
   1949a:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1949c:	2300      	movs	r3, #0
   1949e:	f88d 3004 	strb.w	r3, [sp, #4]
   194a2:	f642 0303 	movw	r3, #10243	; 0x2803
   194a6:	6800      	ldr	r0, [r0, #0]
   194a8:	a901      	add	r1, sp, #4
   194aa:	f8ad 3006 	strh.w	r3, [sp, #6]
   194ae:	f7fe fe95 	bl	181dc <bt_uuid_cmp>
   194b2:	2800      	cmp	r0, #0
   194b4:	d1ef      	bne.n	19496 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   194b6:	68e3      	ldr	r3, [r4, #12]
   194b8:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   194ba:	2800      	cmp	r0, #0
   194bc:	d1ec      	bne.n	19498 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   194be:	4620      	mov	r0, r4
   194c0:	f7f7 fe06 	bl	110d0 <bt_gatt_attr_get_handle>
   194c4:	3001      	adds	r0, #1
   194c6:	b280      	uxth	r0, r0
	return handle;
   194c8:	e7e6      	b.n	19498 <bt_gatt_attr_value_handle+0x8>

000194ca <bt_gatt_attr_read_chrc>:
{
   194ca:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   194cc:	68cc      	ldr	r4, [r1, #12]
{
   194ce:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   194d0:	79a3      	ldrb	r3, [r4, #6]
{
   194d2:	b087      	sub	sp, #28
   194d4:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   194d6:	f88d 3004 	strb.w	r3, [sp, #4]
{
   194da:	4615      	mov	r5, r2
   194dc:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   194e0:	f7ff ffd6 	bl	19490 <bt_gatt_attr_value_handle>
   194e4:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   194e8:	6821      	ldr	r1, [r4, #0]
   194ea:	780b      	ldrb	r3, [r1, #0]
   194ec:	b99b      	cbnz	r3, 19516 <bt_gatt_attr_read_chrc+0x4c>
		value_len += 2U;
   194ee:	2405      	movs	r4, #5
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   194f0:	884b      	ldrh	r3, [r1, #2]
   194f2:	f8ad 3007 	strh.w	r3, [sp, #7]
	if (offset > value_len) {
   194f6:	42b4      	cmp	r4, r6
   194f8:	d315      	bcc.n	19526 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   194fa:	1ba4      	subs	r4, r4, r6
   194fc:	42bc      	cmp	r4, r7
   194fe:	bfa8      	it	ge
   19500:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   19502:	ab01      	add	r3, sp, #4
   19504:	b2a4      	uxth	r4, r4
   19506:	4622      	mov	r2, r4
   19508:	4628      	mov	r0, r5
   1950a:	1999      	adds	r1, r3, r6
   1950c:	f7fe fe4f 	bl	181ae <memcpy>
}
   19510:	4620      	mov	r0, r4
   19512:	b007      	add	sp, #28
   19514:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   19516:	2210      	movs	r2, #16
   19518:	3101      	adds	r1, #1
   1951a:	f10d 0007 	add.w	r0, sp, #7
   1951e:	f7fe fe46 	bl	181ae <memcpy>
		value_len += 16U;
   19522:	2413      	movs	r4, #19
   19524:	e7e7      	b.n	194f6 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19526:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1952a:	e7f1      	b.n	19510 <bt_gatt_attr_read_chrc+0x46>

0001952c <bt_gatt_foreach_attr>:
{
   1952c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1952e:	e9cd 2301 	strd	r2, r3, [sp, #4]
   19532:	2300      	movs	r3, #0
   19534:	461a      	mov	r2, r3
   19536:	9300      	str	r3, [sp, #0]
   19538:	f7f7 fdfa 	bl	11130 <bt_gatt_foreach_attr_type>
}
   1953c:	b005      	add	sp, #20
   1953e:	f85d fb04 	ldr.w	pc, [sp], #4

00019542 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   19542:	f012 0f01 	tst.w	r2, #1
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   19546:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   19548:	d004      	beq.n	19554 <bt_gatt_check_perm+0x12>
   1954a:	f013 0f95 	tst.w	r3, #149	; 0x95
   1954e:	d010      	beq.n	19572 <bt_gatt_check_perm+0x30>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   19550:	6848      	ldr	r0, [r1, #4]
   19552:	b170      	cbz	r0, 19572 <bt_gatt_check_perm+0x30>
	if ((mask & BT_GATT_PERM_WRITE) &&
   19554:	f012 0f02 	tst.w	r2, #2
   19558:	d004      	beq.n	19564 <bt_gatt_check_perm+0x22>
   1955a:	f413 7f95 	tst.w	r3, #298	; 0x12a
   1955e:	d00a      	beq.n	19576 <bt_gatt_check_perm+0x34>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   19560:	6889      	ldr	r1, [r1, #8]
   19562:	b141      	cbz	r1, 19576 <bt_gatt_check_perm+0x34>
	mask &= attr->perm;
   19564:	401a      	ands	r2, r3
	return 0;
   19566:	f012 0f3c 	tst.w	r2, #60	; 0x3c
   1956a:	bf14      	ite	ne
   1956c:	2005      	movne	r0, #5
   1956e:	2000      	moveq	r0, #0
   19570:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   19572:	2002      	movs	r0, #2
   19574:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   19576:	2003      	movs	r0, #3
}
   19578:	4770      	bx	lr

0001957a <bt_gatt_is_subscribed>:
{
   1957a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1957e:	7a83      	ldrb	r3, [r0, #10]
{
   19580:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   19582:	2b07      	cmp	r3, #7
{
   19584:	460c      	mov	r4, r1
   19586:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   19588:	d110      	bne.n	195ac <bt_gatt_is_subscribed+0x32>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   1958a:	2300      	movs	r3, #0
   1958c:	f88d 300c 	strb.w	r3, [sp, #12]
   19590:	f642 0303 	movw	r3, #10243	; 0x2803
   19594:	6820      	ldr	r0, [r4, #0]
   19596:	a903      	add	r1, sp, #12
   19598:	f8ad 300e 	strh.w	r3, [sp, #14]
   1959c:	f7fe fe1e 	bl	181dc <bt_uuid_cmp>
   195a0:	b960      	cbnz	r0, 195bc <bt_gatt_is_subscribed+0x42>
		if (!(chrc->properties &
   195a2:	68e3      	ldr	r3, [r4, #12]
   195a4:	799b      	ldrb	r3, [r3, #6]
   195a6:	f013 0f30 	tst.w	r3, #48	; 0x30
   195aa:	d103      	bne.n	195b4 <bt_gatt_is_subscribed+0x3a>
		return false;
   195ac:	2000      	movs	r0, #0
}
   195ae:	b004      	add	sp, #16
   195b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   195b4:	4620      	mov	r0, r4
   195b6:	f7f7 fe9d 	bl	112f4 <bt_gatt_attr_next>
   195ba:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   195bc:	2300      	movs	r3, #0
   195be:	6820      	ldr	r0, [r4, #0]
   195c0:	f88d 300c 	strb.w	r3, [sp, #12]
   195c4:	f642 1302 	movw	r3, #10498	; 0x2902
   195c8:	a903      	add	r1, sp, #12
   195ca:	f8ad 300e 	strh.w	r3, [sp, #14]
   195ce:	f7fe fe05 	bl	181dc <bt_uuid_cmp>
   195d2:	b118      	cbz	r0, 195dc <bt_gatt_is_subscribed+0x62>
		attr = bt_gatt_attr_next(attr);
   195d4:	4620      	mov	r0, r4
   195d6:	f7f7 fe8d 	bl	112f4 <bt_gatt_attr_next>
   195da:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   195dc:	2600      	movs	r6, #0
   195de:	f642 1802 	movw	r8, #10498	; 0x2902
   195e2:	6820      	ldr	r0, [r4, #0]
   195e4:	4669      	mov	r1, sp
   195e6:	f88d 6000 	strb.w	r6, [sp]
   195ea:	f8ad 8002 	strh.w	r8, [sp, #2]
   195ee:	f7fe fdf5 	bl	181dc <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   195f2:	b9d8      	cbnz	r0, 1962c <bt_gatt_is_subscribed+0xb2>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   195f4:	2300      	movs	r3, #0
   195f6:	6820      	ldr	r0, [r4, #0]
   195f8:	f88d 300c 	strb.w	r3, [sp, #12]
   195fc:	f642 1302 	movw	r3, #10498	; 0x2902
   19600:	a903      	add	r1, sp, #12
   19602:	f8ad 300e 	strh.w	r3, [sp, #14]
   19606:	f7fe fde9 	bl	181dc <bt_uuid_cmp>
   1960a:	2800      	cmp	r0, #0
   1960c:	d1ce      	bne.n	195ac <bt_gatt_is_subscribed+0x32>
	ccc = attr->user_data;
   1960e:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   19610:	4628      	mov	r0, r5
   19612:	4622      	mov	r2, r4
   19614:	f812 1b01 	ldrb.w	r1, [r2], #1
   19618:	f7ff f8a4 	bl	18764 <bt_conn_is_peer_addr_le>
   1961c:	2800      	cmp	r0, #0
   1961e:	d0c5      	beq.n	195ac <bt_gatt_is_subscribed+0x32>
   19620:	8923      	ldrh	r3, [r4, #8]
   19622:	421f      	tst	r7, r3
   19624:	bf14      	ite	ne
   19626:	2001      	movne	r0, #1
   19628:	2000      	moveq	r0, #0
   1962a:	e7c0      	b.n	195ae <bt_gatt_is_subscribed+0x34>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1962c:	f642 0303 	movw	r3, #10243	; 0x2803
   19630:	6820      	ldr	r0, [r4, #0]
   19632:	a901      	add	r1, sp, #4
   19634:	f88d 6004 	strb.w	r6, [sp, #4]
   19638:	f8ad 3006 	strh.w	r3, [sp, #6]
   1963c:	f7fe fdce 	bl	181dc <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   19640:	2800      	cmp	r0, #0
   19642:	d0d7      	beq.n	195f4 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   19644:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   19648:	6820      	ldr	r0, [r4, #0]
   1964a:	a902      	add	r1, sp, #8
   1964c:	f88d 6008 	strb.w	r6, [sp, #8]
   19650:	f8ad 300a 	strh.w	r3, [sp, #10]
   19654:	f7fe fdc2 	bl	181dc <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   19658:	2800      	cmp	r0, #0
   1965a:	d0cb      	beq.n	195f4 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1965c:	f642 0301 	movw	r3, #10241	; 0x2801
   19660:	6820      	ldr	r0, [r4, #0]
   19662:	a903      	add	r1, sp, #12
   19664:	f88d 600c 	strb.w	r6, [sp, #12]
   19668:	f8ad 300e 	strh.w	r3, [sp, #14]
   1966c:	f7fe fdb6 	bl	181dc <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   19670:	2800      	cmp	r0, #0
   19672:	d0bf      	beq.n	195f4 <bt_gatt_is_subscribed+0x7a>
		attr = bt_gatt_attr_next(attr);
   19674:	4620      	mov	r0, r4
   19676:	f7f7 fe3d 	bl	112f4 <bt_gatt_attr_next>
		if (!attr) {
   1967a:	4604      	mov	r4, r0
   1967c:	2800      	cmp	r0, #0
   1967e:	d1b0      	bne.n	195e2 <bt_gatt_is_subscribed+0x68>
   19680:	e794      	b.n	195ac <bt_gatt_is_subscribed+0x32>

00019682 <bt_gatt_change_aware>:
{
   19682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19686:	4605      	mov	r5, r0
   19688:	4688      	mov	r8, r1
	cfg = find_cf_cfg(conn);
   1968a:	f7f7 fb0d 	bl	10ca8 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1968e:	4604      	mov	r4, r0
   19690:	b1e0      	cbz	r0, 196cc <bt_gatt_change_aware+0x4a>
   19692:	7a03      	ldrb	r3, [r0, #8]
   19694:	07da      	lsls	r2, r3, #31
   19696:	d519      	bpl.n	196cc <bt_gatt_change_aware+0x4a>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   19698:	f100 060c 	add.w	r6, r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1969c:	e8d6 7faf 	lda	r7, [r6]
   196a0:	f017 0701 	ands.w	r7, r7, #1
   196a4:	d112      	bne.n	196cc <bt_gatt_change_aware+0x4a>
	if (!req) {
   196a6:	f1b8 0f00 	cmp.w	r8, #0
   196aa:	d010      	beq.n	196ce <bt_gatt_change_aware+0x4c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   196ac:	e8d6 3fef 	ldaex	r3, [r6]
   196b0:	f023 0202 	bic.w	r2, r3, #2
   196b4:	e8c6 2fe1 	stlex	r1, r2, [r6]
   196b8:	2900      	cmp	r1, #0
   196ba:	d1f7      	bne.n	196ac <bt_gatt_change_aware+0x2a>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   196bc:	079b      	lsls	r3, r3, #30
		bt_att_clear_out_of_sync_sent(conn);
   196be:	4628      	mov	r0, r5
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   196c0:	d508      	bpl.n	196d4 <bt_gatt_change_aware+0x52>
		bt_att_clear_out_of_sync_sent(conn);
   196c2:	f7ff fd2e 	bl	19122 <bt_att_clear_out_of_sync_sent>
	bool changed = set_change_aware_no_store(cfg, aware);
   196c6:	4620      	mov	r0, r4
   196c8:	f7ff fea9 	bl	1941e <set_change_aware_no_store.constprop.0.isra.0>
		return true;
   196cc:	2701      	movs	r7, #1
}
   196ce:	4638      	mov	r0, r7
   196d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   196d4:	f7ff fd23 	bl	1911e <bt_att_fixed_chan_only>
   196d8:	2800      	cmp	r0, #0
   196da:	d0f8      	beq.n	196ce <bt_gatt_change_aware+0x4c>
   196dc:	4628      	mov	r0, r5
   196de:	f7ff fd30 	bl	19142 <bt_att_out_of_sync_sent_on_fixed>
   196e2:	2800      	cmp	r0, #0
   196e4:	d0f3      	beq.n	196ce <bt_gatt_change_aware+0x4c>
   196e6:	e8d6 3fef 	ldaex	r3, [r6]
   196ea:	f023 0302 	bic.w	r3, r3, #2
   196ee:	e8c6 3fe2 	stlex	r2, r3, [r6]
   196f2:	2a00      	cmp	r2, #0
   196f4:	d1f7      	bne.n	196e6 <bt_gatt_change_aware+0x64>
		bt_att_clear_out_of_sync_sent(conn);
   196f6:	4628      	mov	r0, r5
   196f8:	e7e3      	b.n	196c2 <bt_gatt_change_aware+0x40>

000196fa <bt_smp_recv>:
{
   196fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   196fc:	2100      	movs	r1, #0
   196fe:	f04f 32ff 	mov.w	r2, #4294967295
   19702:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   19706:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   19708:	4608      	mov	r0, r1
   1970a:	f7ff f8c0 	bl	1888e <bt_l2cap_create_pdu_timeout>
   1970e:	f100 060c 	add.w	r6, r0, #12
   19712:	4604      	mov	r4, r0
   19714:	2101      	movs	r1, #1
   19716:	4630      	mov	r0, r6
   19718:	f000 f87b 	bl	19812 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1971c:	2505      	movs	r5, #5
   1971e:	2101      	movs	r1, #1
   19720:	7005      	strb	r5, [r0, #0]
   19722:	4630      	mov	r0, r6
   19724:	f000 f875 	bl	19812 <net_buf_simple_add>
   19728:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1972a:	7005      	strb	r5, [r0, #0]
   1972c:	4622      	mov	r2, r4
   1972e:	2106      	movs	r1, #6
   19730:	4638      	mov	r0, r7
   19732:	9300      	str	r3, [sp, #0]
   19734:	f7ff f8ae 	bl	18894 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   19738:	b110      	cbz	r0, 19740 <bt_smp_recv+0x46>
		net_buf_unref(buf);
   1973a:	4620      	mov	r0, r4
   1973c:	f7f8 fa1a 	bl	11b74 <net_buf_unref>
}
   19740:	2000      	movs	r0, #0
   19742:	b003      	add	sp, #12
   19744:	bdf0      	pop	{r4, r5, r6, r7, pc}

00019746 <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   19746:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1974a:	4770      	bx	lr

0001974c <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   1974c:	2000      	movs	r0, #0
   1974e:	4770      	bx	lr

00019750 <fixed_data_unref>:
}
   19750:	4770      	bx	lr

00019752 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19752:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   19754:	6849      	ldr	r1, [r1, #4]
   19756:	6809      	ldr	r1, [r1, #0]
   19758:	f7f8 b97a 	b.w	11a50 <net_buf_alloc_len>

0001975c <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   1975c:	f7fb bf1e 	b.w	1559c <z_impl_k_queue_get>

00019760 <net_buf_slist_put>:
	__asm__ volatile(
   19760:	f04f 0320 	mov.w	r3, #32
   19764:	f3ef 8211 	mrs	r2, BASEPRI
   19768:	f383 8812 	msr	BASEPRI_MAX, r3
   1976c:	f3bf 8f6f 	isb	sy
	parent->next = child;
   19770:	2300      	movs	r3, #0
   19772:	600b      	str	r3, [r1, #0]
	return list->tail;
   19774:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   19776:	b933      	cbnz	r3, 19786 <net_buf_slist_put+0x26>
	list->head = node;
   19778:	e9c0 1100 	strd	r1, r1, [r0]
	__asm__ volatile(
   1977c:	f382 8811 	msr	BASEPRI, r2
   19780:	f3bf 8f6f 	isb	sy
}
   19784:	4770      	bx	lr
	parent->next = child;
   19786:	6019      	str	r1, [r3, #0]
	list->tail = node;
   19788:	6041      	str	r1, [r0, #4]
}
   1978a:	e7f7      	b.n	1977c <net_buf_slist_put+0x1c>

0001978c <net_buf_slist_get>:
{
   1978c:	4603      	mov	r3, r0
   1978e:	b510      	push	{r4, lr}
	__asm__ volatile(
   19790:	f04f 0220 	mov.w	r2, #32
   19794:	f3ef 8111 	mrs	r1, BASEPRI
   19798:	f382 8812 	msr	BASEPRI_MAX, r2
   1979c:	f3bf 8f6f 	isb	sy
	return list->head;
   197a0:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   197a2:	b128      	cbz	r0, 197b0 <net_buf_slist_get+0x24>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   197a4:	685c      	ldr	r4, [r3, #4]
	return node->next;
   197a6:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   197a8:	42a0      	cmp	r0, r4
	list->head = node;
   197aa:	601a      	str	r2, [r3, #0]
	list->tail = node;
   197ac:	bf08      	it	eq
   197ae:	605a      	streq	r2, [r3, #4]
	__asm__ volatile(
   197b0:	f381 8811 	msr	BASEPRI, r1
   197b4:	f3bf 8f6f 	isb	sy
}
   197b8:	bd10      	pop	{r4, pc}

000197ba <net_buf_put>:
	k_fifo_put(fifo, buf);
   197ba:	f001 b9d4 	b.w	1ab66 <k_queue_append>

000197be <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   197be:	7a02      	ldrb	r2, [r0, #8]
   197c0:	3201      	adds	r2, #1
   197c2:	7202      	strb	r2, [r0, #8]
	return buf;
}
   197c4:	4770      	bx	lr

000197c6 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   197c6:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   197c8:	4618      	mov	r0, r3
   197ca:	685b      	ldr	r3, [r3, #4]
   197cc:	2b00      	cmp	r3, #0
   197ce:	d1fb      	bne.n	197c8 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   197d0:	4770      	bx	lr

000197d2 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   197d2:	6842      	ldr	r2, [r0, #4]
{
   197d4:	b510      	push	{r4, lr}
	if (parent->frags) {
   197d6:	b12a      	cbz	r2, 197e4 <net_buf_frag_insert+0x12>
   197d8:	460b      	mov	r3, r1
	while (buf->frags) {
   197da:	461c      	mov	r4, r3
   197dc:	685b      	ldr	r3, [r3, #4]
   197de:	2b00      	cmp	r3, #0
   197e0:	d1fb      	bne.n	197da <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   197e2:	6062      	str	r2, [r4, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   197e4:	6041      	str	r1, [r0, #4]
}
   197e6:	bd10      	pop	{r4, pc}

000197e8 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   197e8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   197ea:	4604      	mov	r4, r0
   197ec:	b920      	cbnz	r0, 197f8 <net_buf_frag_add+0x10>
		return net_buf_ref(frag);
   197ee:	4608      	mov	r0, r1
	buf->ref++;
   197f0:	7a0b      	ldrb	r3, [r1, #8]
   197f2:	3301      	adds	r3, #1
   197f4:	720b      	strb	r3, [r1, #8]
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   197f6:	bd10      	pop	{r4, pc}
   197f8:	4603      	mov	r3, r0
	while (buf->frags) {
   197fa:	4618      	mov	r0, r3
   197fc:	685b      	ldr	r3, [r3, #4]
   197fe:	2b00      	cmp	r3, #0
   19800:	d1fb      	bne.n	197fa <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   19802:	f7ff ffe6 	bl	197d2 <net_buf_frag_insert>
   19806:	4620      	mov	r0, r4
   19808:	e7f5      	b.n	197f6 <net_buf_frag_add+0xe>

0001980a <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_SIMPLE_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1980a:	6883      	ldr	r3, [r0, #8]
   1980c:	440b      	add	r3, r1
   1980e:	6003      	str	r3, [r0, #0]
}
   19810:	4770      	bx	lr

00019812 <net_buf_simple_add>:
	return buf->data + buf->len;
   19812:	8883      	ldrh	r3, [r0, #4]
   19814:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   19816:	4419      	add	r1, r3
   19818:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1981a:	18d0      	adds	r0, r2, r3
   1981c:	4770      	bx	lr

0001981e <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1981e:	b430      	push	{r4, r5}
   19820:	8884      	ldrh	r4, [r0, #4]
   19822:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   19824:	18a3      	adds	r3, r4, r2
   19826:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   19828:	1928      	adds	r0, r5, r4
}
   1982a:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1982c:	f7fe bcbf 	b.w	181ae <memcpy>

00019830 <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   19830:	b510      	push	{r4, lr}
   19832:	8883      	ldrh	r3, [r0, #4]
   19834:	6802      	ldr	r2, [r0, #0]
	buf->len += len;
   19836:	1c5c      	adds	r4, r3, #1
   19838:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   1983a:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   1983c:	18d0      	adds	r0, r2, r3
   1983e:	bd10      	pop	{r4, pc}

00019840 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   19840:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   19842:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   19844:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   19846:	1a40      	subs	r0, r0, r1
	buf->len += len;
   19848:	4411      	add	r1, r2
	buf->data -= len;
   1984a:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1984c:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   1984e:	4770      	bx	lr

00019850 <net_buf_simple_push_u8>:
	buf->data -= len;
   19850:	6802      	ldr	r2, [r0, #0]
   19852:	1e53      	subs	r3, r2, #1
   19854:	6003      	str	r3, [r0, #0]
	buf->len += len;
   19856:	8883      	ldrh	r3, [r0, #4]
   19858:	3301      	adds	r3, #1
   1985a:	8083      	strh	r3, [r0, #4]

void net_buf_simple_push_u8(struct net_buf_simple *buf, uint8_t val)
{
	uint8_t *data = net_buf_simple_push(buf, 1);

	*data = val;
   1985c:	f802 1c01 	strb.w	r1, [r2, #-1]
}
   19860:	4770      	bx	lr

00019862 <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   19862:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   19864:	8882      	ldrh	r2, [r0, #4]
   19866:	1a52      	subs	r2, r2, r1
   19868:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1986a:	6800      	ldr	r0, [r0, #0]
   1986c:	4408      	add	r0, r1
   1986e:	6018      	str	r0, [r3, #0]
}
   19870:	4770      	bx	lr

00019872 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   19872:	4603      	mov	r3, r0
	void *data = buf->data;
   19874:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   19876:	889a      	ldrh	r2, [r3, #4]
   19878:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1987a:	4401      	add	r1, r0
	buf->len -= len;
   1987c:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1987e:	6019      	str	r1, [r3, #0]

	return data;
}
   19880:	4770      	bx	lr

00019882 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   19882:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   19884:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   19886:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   19888:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1988a:	f7ff ffea 	bl	19862 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1988e:	4620      	mov	r0, r4
   19890:	bd10      	pop	{r4, pc}

00019892 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   19892:	6802      	ldr	r2, [r0, #0]
   19894:	6880      	ldr	r0, [r0, #8]
}
   19896:	1a10      	subs	r0, r2, r0
   19898:	4770      	bx	lr

0001989a <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1989a:	8883      	ldrh	r3, [r0, #4]
   1989c:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   1989e:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   198a0:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   198a2:	6803      	ldr	r3, [r0, #0]
   198a4:	1a5b      	subs	r3, r3, r1
}
   198a6:	1ad0      	subs	r0, r2, r3
   198a8:	4770      	bx	lr

000198aa <adc_context_on_timer_expired>:
{
   198aa:	b410      	push	{r4}
   198ac:	4603      	mov	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   198ae:	3808      	subs	r0, #8
   198b0:	e8d0 2fef 	ldaex	r2, [r0]
   198b4:	1c51      	adds	r1, r2, #1
   198b6:	e8c0 1fe4 	stlex	r4, r1, [r0]
   198ba:	2c00      	cmp	r4, #0
   198bc:	d1f8      	bne.n	198b0 <adc_context_on_timer_expired+0x6>
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   198be:	b912      	cbnz	r2, 198c6 <adc_context_on_timer_expired+0x1c>
}
   198c0:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
   198c2:	f7f8 b99f 	b.w	11c04 <adc_context_start_sampling>
		ctx->status = -EBUSY;
   198c6:	f06f 020f 	mvn.w	r2, #15
}
   198ca:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
   198cc:	669a      	str	r2, [r3, #104]	; 0x68
}
   198ce:	4770      	bx	lr

000198d0 <z_log_msg_static_create.constprop.0>:
   198d0:	2300      	movs	r3, #0
   198d2:	f7f1 b813 	b.w	a8fc <z_impl_z_log_msg_static_create>

000198d6 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   198d6:	220c      	movs	r2, #12
   198d8:	6903      	ldr	r3, [r0, #16]
   198da:	b2c9      	uxtb	r1, r1
   198dc:	fb01 3302 	mla	r3, r1, r2, r3
   198e0:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
   198e2:	f000 0007 	and.w	r0, r0, #7
   198e6:	4770      	bx	lr

000198e8 <set_on_state>:
	__asm__ volatile(
   198e8:	f04f 0320 	mov.w	r3, #32
   198ec:	f3ef 8211 	mrs	r2, BASEPRI
   198f0:	f383 8812 	msr	BASEPRI_MAX, r3
   198f4:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   198f8:	6803      	ldr	r3, [r0, #0]
   198fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   198fe:	f043 0302 	orr.w	r3, r3, #2
   19902:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   19904:	f382 8811 	msr	BASEPRI, r2
   19908:	f3bf 8f6f 	isb	sy
}
   1990c:	4770      	bx	lr

0001990e <stop>:
{
   1990e:	b570      	push	{r4, r5, r6, lr}
   19910:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   19912:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   19914:	f04f 0420 	mov.w	r4, #32
   19918:	f3ef 8511 	mrs	r5, BASEPRI
   1991c:	f384 8812 	msr	BASEPRI_MAX, r4
   19920:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   19924:	260c      	movs	r6, #12
   19926:	fb06 3401 	mla	r4, r6, r1, r3
   1992a:	6fa4      	ldr	r4, [r4, #120]	; 0x78
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1992c:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   19930:	d008      	beq.n	19944 <stop+0x36>
   19932:	42a2      	cmp	r2, r4
   19934:	d006      	beq.n	19944 <stop+0x36>
	__asm__ volatile(
   19936:	f385 8811 	msr	BASEPRI, r5
   1993a:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   1993e:	f04f 30ff 	mov.w	r0, #4294967295
}
   19942:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   19944:	2201      	movs	r2, #1
   19946:	4371      	muls	r1, r6
   19948:	440b      	add	r3, r1
   1994a:	679a      	str	r2, [r3, #120]	; 0x78
   1994c:	f385 8811 	msr	BASEPRI, r5
   19950:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   19954:	6843      	ldr	r3, [r0, #4]
   19956:	440b      	add	r3, r1
   19958:	685b      	ldr	r3, [r3, #4]
   1995a:	4798      	blx	r3
	return 0;
   1995c:	2000      	movs	r0, #0
   1995e:	e7f0      	b.n	19942 <stop+0x34>

00019960 <api_stop>:
	return stop(dev, subsys, CTX_API);
   19960:	2280      	movs	r2, #128	; 0x80
   19962:	f7ff bfd4 	b.w	1990e <stop>

00019966 <async_start>:
{
   19966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19968:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   1996a:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   1996c:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1996e:	f04f 0520 	mov.w	r5, #32
   19972:	f3ef 8611 	mrs	r6, BASEPRI
   19976:	f385 8812 	msr	BASEPRI_MAX, r5
   1997a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1997e:	250c      	movs	r5, #12
   19980:	4369      	muls	r1, r5
   19982:	440c      	add	r4, r1
   19984:	6fa5      	ldr	r5, [r4, #120]	; 0x78
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   19986:	f005 0c07 	and.w	ip, r5, #7
   1998a:	f1bc 0f01 	cmp.w	ip, #1
   1998e:	d10b      	bne.n	199a8 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   19990:	67a7      	str	r7, [r4, #120]	; 0x78
	__asm__ volatile(
   19992:	f386 8811 	msr	BASEPRI, r6
   19996:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   1999a:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
   1999e:	6843      	ldr	r3, [r0, #4]
   199a0:	585b      	ldr	r3, [r3, r1]
   199a2:	4798      	blx	r3
	return 0;
   199a4:	2000      	movs	r0, #0
}
   199a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   199a8:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   199ac:	42af      	cmp	r7, r5
   199ae:	f386 8811 	msr	BASEPRI, r6
   199b2:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   199b6:	bf0c      	ite	eq
   199b8:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   199bc:	f04f 30ff 	movne.w	r0, #4294967295
   199c0:	e7f1      	b.n	199a6 <async_start+0x40>

000199c2 <api_start>:
{
   199c2:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   199c4:	2480      	movs	r4, #128	; 0x80
   199c6:	9400      	str	r4, [sp, #0]
   199c8:	f7ff ffcd 	bl	19966 <async_start>
}
   199cc:	b002      	add	sp, #8
   199ce:	bd10      	pop	{r4, pc}

000199d0 <onoff_started_callback>:
{
   199d0:	b410      	push	{r4}
	notify(mgr, 0);
   199d2:	241c      	movs	r4, #28
	return &data->mgr[type];
   199d4:	6900      	ldr	r0, [r0, #16]
   199d6:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   199d8:	fb03 0004 	mla	r0, r3, r4, r0
   199dc:	2100      	movs	r1, #0
}
   199de:	bc10      	pop	{r4}
	notify(mgr, 0);
   199e0:	4710      	bx	r2

000199e2 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   199e2:	2003      	movs	r0, #3
   199e4:	f7fa ba08 	b.w	13df8 <nrfx_clock_start>

000199e8 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   199e8:	2002      	movs	r0, #2
   199ea:	f7fa ba05 	b.w	13df8 <nrfx_clock_start>

000199ee <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   199ee:	2000      	movs	r0, #0
   199f0:	f7fa ba02 	b.w	13df8 <nrfx_clock_start>

000199f4 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   199f4:	2003      	movs	r0, #3
   199f6:	f000 b975 	b.w	19ce4 <nrfx_clock_stop>

000199fa <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   199fa:	2002      	movs	r0, #2
   199fc:	f000 b972 	b.w	19ce4 <nrfx_clock_stop>

00019a00 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   19a00:	2000      	movs	r0, #0
   19a02:	f000 b96f 	b.w	19ce4 <nrfx_clock_stop>

00019a06 <blocking_start_callback>:
{
   19a06:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   19a08:	f7fb bdfc 	b.w	15604 <z_impl_k_sem_give>

00019a0c <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   19a0c:	2000      	movs	r0, #0
   19a0e:	4770      	bx	lr

00019a10 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   19a10:	b538      	push	{r3, r4, r5, lr}
   19a12:	460c      	mov	r4, r1
   19a14:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   19a16:	f7f4 fb03 	bl	e020 <bt_is_ready>
   19a1a:	b128      	cbz	r0, 19a28 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   19a1c:	4629      	mov	r1, r5
   19a1e:	4620      	mov	r0, r4
}
   19a20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   19a24:	f7f3 ba96 	b.w	cf54 <bt_hci_le_rand>
}
   19a28:	f06f 000a 	mvn.w	r0, #10
   19a2c:	bd38      	pop	{r3, r4, r5, pc}

00019a2e <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
   19a2e:	4608      	mov	r0, r1
   19a30:	b508      	push	{r3, lr}
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
   19a32:	4611      	mov	r1, r2
   19a34:	f7fa f88a 	bl	13b4c <psa_generate_random>
	if (status != PSA_SUCCESS) {
		return -EIO;
   19a38:	2800      	cmp	r0, #0
	}

	return 0;
}
   19a3a:	bf18      	it	ne
   19a3c:	f06f 0004 	mvnne.w	r0, #4
   19a40:	bd08      	pop	{r3, pc}

00019a42 <entropy_psa_crypto_rng_init>:
{
   19a42:	b508      	push	{r3, lr}
	status = psa_crypto_init();
   19a44:	f000 f92f 	bl	19ca6 <psa_crypto_init>
		return -EIO;
   19a48:	2800      	cmp	r0, #0
}
   19a4a:	bf18      	it	ne
   19a4c:	f06f 0004 	mvnne.w	r0, #4
   19a50:	bd08      	pop	{r3, pc}

00019a52 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   19a52:	6843      	ldr	r3, [r0, #4]
}
   19a54:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   19a56:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   19a58:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   19a5a:	600b      	str	r3, [r1, #0]
}
   19a5c:	4770      	bx	lr

00019a5e <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   19a5e:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   19a60:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   19a64:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   19a66:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   19a6a:	6098      	str	r0, [r3, #8]
}
   19a6c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   19a6e:	60d9      	str	r1, [r3, #12]
   19a70:	4770      	bx	lr

00019a72 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   19a72:	6843      	ldr	r3, [r0, #4]
}
   19a74:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   19a76:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   19a78:	6099      	str	r1, [r3, #8]
}
   19a7a:	4770      	bx	lr

00019a7c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   19a7c:	6843      	ldr	r3, [r0, #4]
}
   19a7e:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   19a80:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   19a82:	60d9      	str	r1, [r3, #12]
}
   19a84:	4770      	bx	lr

00019a86 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   19a86:	6843      	ldr	r3, [r0, #4]
   19a88:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   19a8a:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   19a8c:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   19a90:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   19a92:	6090      	str	r0, [r2, #8]
}
   19a94:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   19a96:	60d3      	str	r3, [r2, #12]
   19a98:	4770      	bx	lr

00019a9a <gpio_nrfx_manage_callback>:
{
   19a9a:	b510      	push	{r4, lr}
	return port->data;
   19a9c:	6903      	ldr	r3, [r0, #16]
	return list->head;
   19a9e:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   19aa0:	b1f8      	cbz	r0, 19ae2 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   19aa2:	4288      	cmp	r0, r1
   19aa4:	d119      	bne.n	19ada <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   19aa6:	689c      	ldr	r4, [r3, #8]
	return node->next;
   19aa8:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   19aaa:	42a1      	cmp	r1, r4
	list->head = node;
   19aac:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   19aae:	d100      	bne.n	19ab2 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   19ab0:	6098      	str	r0, [r3, #8]
	parent->next = child;
   19ab2:	2000      	movs	r0, #0
   19ab4:	6008      	str	r0, [r1, #0]
	if (set) {
   19ab6:	b12a      	cbz	r2, 19ac4 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   19ab8:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   19aba:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   19abc:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   19abe:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   19ac0:	b902      	cbnz	r2, 19ac4 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   19ac2:	6099      	str	r1, [r3, #8]
	return 0;
   19ac4:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   19ac6:	e010      	b.n	19aea <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   19ac8:	4281      	cmp	r1, r0
   19aca:	d106      	bne.n	19ada <gpio_nrfx_manage_callback+0x40>
	return node->next;
   19acc:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   19ace:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   19ad0:	6898      	ldr	r0, [r3, #8]
   19ad2:	4281      	cmp	r1, r0
   19ad4:	d1ed      	bne.n	19ab2 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   19ad6:	609c      	str	r4, [r3, #8]
}
   19ad8:	e7eb      	b.n	19ab2 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   19ada:	4604      	mov	r4, r0
   19adc:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   19ade:	2800      	cmp	r0, #0
   19ae0:	d1f2      	bne.n	19ac8 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   19ae2:	2a00      	cmp	r2, #0
   19ae4:	d1e8      	bne.n	19ab8 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   19ae6:	f06f 0015 	mvn.w	r0, #21
}
   19aea:	bd10      	pop	{r4, pc}

00019aec <mbox_nrf_register_callback>:
{
   19aec:	b510      	push	{r4, lr}
	struct mbox_nrf_data *data = dev->data;
   19aee:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
   19af0:	290f      	cmp	r1, #15
	data->cb[channel] = cb;
   19af2:	bf9f      	itttt	ls
   19af4:	eb00 0481 	addls.w	r4, r0, r1, lsl #2
   19af8:	f840 2021 	strls.w	r2, [r0, r1, lsl #2]
	data->user_data[channel] = user_data;
   19afc:	6423      	strls	r3, [r4, #64]	; 0x40
	return 0;
   19afe:	2000      	movls	r0, #0
		return -EINVAL;
   19b00:	bf88      	it	hi
   19b02:	f06f 0015 	mvnhi.w	r0, #21
}
   19b06:	bd10      	pop	{r4, pc}

00019b08 <mbox_nrf_mtu_get>:
}
   19b08:	2000      	movs	r0, #0
   19b0a:	4770      	bx	lr

00019b0c <mbox_nrf_max_channels_get>:
}
   19b0c:	2010      	movs	r0, #16
   19b0e:	4770      	bx	lr

00019b10 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   19b10:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   19b12:	6843      	ldr	r3, [r0, #4]
   19b14:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   19b16:	7a05      	ldrb	r5, [r0, #8]
   19b18:	6844      	ldr	r4, [r0, #4]
   19b1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   19b1e:	42a3      	cmp	r3, r4
   19b20:	d302      	bcc.n	19b28 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   19b22:	f06f 0001 	mvn.w	r0, #1
}
   19b26:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   19b28:	795c      	ldrb	r4, [r3, #5]
   19b2a:	428c      	cmp	r4, r1
   19b2c:	d001      	beq.n	19b32 <pinctrl_lookup_state+0x22>
		(*state)++;
   19b2e:	3308      	adds	r3, #8
   19b30:	e7f0      	b.n	19b14 <pinctrl_lookup_state+0x4>
			return 0;
   19b32:	2000      	movs	r0, #0
   19b34:	e7f7      	b.n	19b26 <pinctrl_lookup_state+0x16>

00019b36 <uarte_nrfx_config_get>:
{
   19b36:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   19b38:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   19b3a:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   19b3e:	e883 0003 	stmia.w	r3, {r0, r1}
}
   19b42:	2000      	movs	r0, #0
   19b44:	4770      	bx	lr

00019b46 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   19b46:	6843      	ldr	r3, [r0, #4]
   19b48:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   19b4a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   19b4e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   19b52:	4770      	bx	lr

00019b54 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   19b54:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   19b56:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   19b58:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19b5a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   19b5e:	b150      	cbz	r0, 19b76 <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19b60:	2000      	movs	r0, #0
	*c = *data->rx_data;
   19b62:	6952      	ldr	r2, [r2, #20]
   19b64:	7812      	ldrb	r2, [r2, #0]
   19b66:	700a      	strb	r2, [r1, #0]
   19b68:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   19b6c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19b70:	2201      	movs	r2, #1
   19b72:	601a      	str	r2, [r3, #0]
	return 0;
   19b74:	4770      	bx	lr
		return -1;
   19b76:	f04f 30ff 	mov.w	r0, #4294967295
}
   19b7a:	4770      	bx	lr

00019b7c <is_tx_ready.isra.0>:
	return config->uarte_regs;
   19b7c:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   19b7e:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19b80:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   19b84:	b940      	cbnz	r0, 19b98 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   19b86:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   19b88:	079b      	lsls	r3, r3, #30
   19b8a:	d406      	bmi.n	19b9a <is_tx_ready.isra.0+0x1e>
   19b8c:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   19b90:	3800      	subs	r0, #0
   19b92:	bf18      	it	ne
   19b94:	2001      	movne	r0, #1
   19b96:	4770      	bx	lr
   19b98:	2001      	movs	r0, #1
}
   19b9a:	4770      	bx	lr

00019b9c <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   19b9c:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   19b9e:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   19ba0:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   19ba4:	05c9      	lsls	r1, r1, #23
   19ba6:	d518      	bpl.n	19bda <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19ba8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   19bac:	b1a9      	cbz	r1, 19bda <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   19bae:	f04f 0020 	mov.w	r0, #32
   19bb2:	f3ef 8111 	mrs	r1, BASEPRI
   19bb6:	f380 8812 	msr	BASEPRI_MAX, r0
   19bba:	f3bf 8f6f 	isb	sy
   19bbe:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   19bc2:	b130      	cbz	r0, 19bd2 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19bc4:	2000      	movs	r0, #0
   19bc6:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   19bca:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19bce:	2001      	movs	r0, #1
   19bd0:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   19bd2:	f381 8811 	msr	BASEPRI, r1
   19bd6:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   19bda:	6852      	ldr	r2, [r2, #4]
   19bdc:	06d2      	lsls	r2, r2, #27
   19bde:	d515      	bpl.n	19c0c <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   19be0:	f04f 0120 	mov.w	r1, #32
   19be4:	f3ef 8211 	mrs	r2, BASEPRI
   19be8:	f381 8812 	msr	BASEPRI_MAX, r1
   19bec:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19bf0:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   19bf4:	b111      	cbz	r1, 19bfc <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   19bf6:	2100      	movs	r1, #0
   19bf8:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   19bfc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   19c00:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   19c04:	f382 8811 	msr	BASEPRI, r2
   19c08:	f3bf 8f6f 	isb	sy
}
   19c0c:	4770      	bx	lr

00019c0e <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   19c0e:	4770      	bx	lr

00019c10 <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   19c10:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   19c12:	f100 0350 	add.w	r3, r0, #80	; 0x50
   19c16:	009b      	lsls	r3, r3, #2
   19c18:	b29b      	uxth	r3, r3
   19c1a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   19c1e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   19c22:	601a      	str	r2, [r3, #0]
   19c24:	681b      	ldr	r3, [r3, #0]
}
   19c26:	4770      	bx	lr

00019c28 <z_nrf_rtc_timer_capture_task_address_get>:
	if (chan == 0) {
   19c28:	b130      	cbz	r0, 19c38 <z_nrf_rtc_timer_capture_task_address_get+0x10>
	nrf_rtc_task_t task = offsetof(NRF_RTC_Type, TASKS_CAPTURE[chan]);
   19c2a:	3010      	adds	r0, #16
   19c2c:	0080      	lsls	r0, r0, #2
    return (uint32_t)p_reg + task;
   19c2e:	b2c0      	uxtb	r0, r0
   19c30:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   19c34:	f500 30a8 	add.w	r0, r0, #86016	; 0x15000
}
   19c38:	4770      	bx	lr

00019c3a <z_nrf_rtc_timer_set>:
	return compare_set(chan, target_time, handler, user_data);
   19c3a:	f7f9 bac5 	b.w	131c8 <compare_set>

00019c3e <sys_clock_cycle_get_32>:
{
   19c3e:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   19c40:	f7f9 faa0 	bl	13184 <z_nrf_rtc_timer_read>
}
   19c44:	bd08      	pop	{r3, pc}

00019c46 <gpio_pin_configure_dt>:
{
   19c46:	4603      	mov	r3, r0
   19c48:	b470      	push	{r4, r5, r6}
   19c4a:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
   19c4c:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   19c4e:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   19c50:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
   19c52:	4322      	orrs	r2, r4
		data->invert |= (gpio_port_pins_t)BIT(pin);
   19c54:	2401      	movs	r4, #1
	struct gpio_driver_data *data =
   19c56:	6905      	ldr	r5, [r0, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   19c58:	408c      	lsls	r4, r1
   19c5a:	682b      	ldr	r3, [r5, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   19c5c:	f012 0f01 	tst.w	r2, #1
	const struct gpio_driver_api *api =
   19c60:	6886      	ldr	r6, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   19c62:	bf14      	ite	ne
   19c64:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   19c66:	43a3      	biceq	r3, r4
   19c68:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
   19c6a:	6833      	ldr	r3, [r6, #0]
}
   19c6c:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
   19c6e:	4718      	bx	r3

00019c70 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   19c70:	2301      	movs	r3, #1
   19c72:	fa03 f101 	lsl.w	r1, r3, r1
   19c76:	6903      	ldr	r3, [r0, #16]
   19c78:	681b      	ldr	r3, [r3, #0]
   19c7a:	4219      	tst	r1, r3
   19c7c:	d003      	beq.n	19c86 <gpio_pin_set+0x16>
	if (value != 0)	{
   19c7e:	b122      	cbz	r2, 19c8a <gpio_pin_set+0x1a>
	return api->port_clear_bits_raw(port, pins);
   19c80:	6883      	ldr	r3, [r0, #8]
   19c82:	691b      	ldr	r3, [r3, #16]
   19c84:	e003      	b.n	19c8e <gpio_pin_set+0x1e>
	if (value != 0)	{
   19c86:	2a00      	cmp	r2, #0
   19c88:	d0fa      	beq.n	19c80 <gpio_pin_set+0x10>
	return api->port_set_bits_raw(port, pins);
   19c8a:	6883      	ldr	r3, [r0, #8]
   19c8c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   19c8e:	4718      	bx	r3

00019c90 <z_log_msg_static_create.constprop.0>:
   19c90:	2300      	movs	r3, #0
   19c92:	f7f0 be33 	b.w	a8fc <z_impl_z_log_msg_static_create>

00019c96 <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   19c96:	2101      	movs	r1, #1
   19c98:	f7f9 beb8 	b.w	13a0c <dk_set_led>

00019c9c <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   19c9c:	2100      	movs	r1, #0
   19c9e:	f7f9 beb5 	b.w	13a0c <dk_set_led>

00019ca2 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   19ca2:	2000      	movs	r0, #0
   19ca4:	4770      	bx	lr

00019ca6 <psa_crypto_init>:
}
   19ca6:	2000      	movs	r0, #0
   19ca8:	4770      	bx	lr

00019caa <tfm_platform_gpio_pin_mcu_select>:
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_gpio_service_args args;
	struct tfm_gpio_service_out out;

	args.type = TFM_GPIO_SERVICE_TYPE_PIN_MCU_SELECT;
   19caa:	2300      	movs	r3, #0
{
   19cac:	b510      	push	{r4, lr}
   19cae:	b088      	sub	sp, #32
	args.mcu_select.pin_number = pin_number;
   19cb0:	e9cd 3005 	strd	r3, r0, [sp, #20]
	args.mcu_select.mcu = mcu;

	in_vec.base = (const void *)&args;
   19cb4:	ab05      	add	r3, sp, #20
   19cb6:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   19cb8:	230c      	movs	r3, #12
   19cba:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   19cbc:	2304      	movs	r3, #4
{
   19cbe:	4614      	mov	r4, r2
	args.mcu_select.mcu = mcu;
   19cc0:	9107      	str	r1, [sp, #28]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   19cc2:	aa03      	add	r2, sp, #12
   19cc4:	eb0d 0103 	add.w	r1, sp, r3
   19cc8:	2001      	movs	r0, #1
	out_vec.len = sizeof(out);
   19cca:	9304      	str	r3, [sp, #16]
	out_vec.base = (void *)&out;
   19ccc:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   19cd0:	f7f9 ff16 	bl	13b00 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   19cd4:	9b00      	ldr	r3, [sp, #0]
   19cd6:	6023      	str	r3, [r4, #0]

	return ret;
#else
	return TFM_PLATFORM_ERR_NOT_SUPPORTED;
#endif
}
   19cd8:	b008      	add	sp, #32
   19cda:	bd10      	pop	{r4, pc}

00019cdc <SystemInit>:
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif
}
   19cdc:	4770      	bx	lr

00019cde <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   19cde:	4700      	bx	r0

00019ce0 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   19ce0:	f001 b9bf 	b.w	1b062 <z_impl_k_busy_wait>

00019ce4 <nrfx_clock_stop>:
    clock_stop(domain);
   19ce4:	f7f9 bfa6 	b.w	13c34 <clock_stop>

00019ce8 <nrf_gpio_reconfigure>:
{
   19ce8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19cea:	4616      	mov	r6, r2
   19cec:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   19cf0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   19cf2:	a801      	add	r0, sp, #4
{
   19cf4:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   19cf6:	f7fa f945 	bl	13f84 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   19cfa:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   19cfc:	f1b6 0c00 	subs.w	ip, r6, #0
   19d00:	bf18      	it	ne
   19d02:	f04f 0c01 	movne.w	ip, #1
   19d06:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   19d0a:	1e0b      	subs	r3, r1, #0
   19d0c:	bf18      	it	ne
   19d0e:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   19d10:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   19d12:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   19d16:	bf14      	ite	ne
   19d18:	f04f 0c0c 	movne.w	ip, #12
   19d1c:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   19d20:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   19d22:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   19d26:	bf14      	ite	ne
   19d28:	f44f 6c70 	movne.w	ip, #3840	; 0xf00
   19d2c:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   19d30:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   19d32:	ea43 030c 	orr.w	r3, r3, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   19d36:	bf14      	ite	ne
   19d38:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   19d3c:	f04f 0c00 	moveq.w	ip, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   19d40:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   19d44:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   19d48:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   19d4c:	b101      	cbz	r1, 19d50 <nrf_gpio_reconfigure+0x68>
   19d4e:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   19d50:	b10e      	cbz	r6, 19d56 <nrf_gpio_reconfigure+0x6e>
   19d52:	7836      	ldrb	r6, [r6, #0]
   19d54:	0076      	lsls	r6, r6, #1
   19d56:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   19d58:	b10d      	cbz	r5, 19d5e <nrf_gpio_reconfigure+0x76>
   19d5a:	782d      	ldrb	r5, [r5, #0]
   19d5c:	00ad      	lsls	r5, r5, #2
   19d5e:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   19d60:	b10c      	cbz	r4, 19d66 <nrf_gpio_reconfigure+0x7e>
   19d62:	7824      	ldrb	r4, [r4, #0]
   19d64:	0224      	lsls	r4, r4, #8
   19d66:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   19d68:	b10f      	cbz	r7, 19d6e <nrf_gpio_reconfigure+0x86>
   19d6a:	783f      	ldrb	r7, [r7, #0]
   19d6c:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   19d6e:	430c      	orrs	r4, r1
   19d70:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   19d72:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   19d76:	b003      	add	sp, #12
   19d78:	bdf0      	pop	{r4, r5, r6, r7, pc}

00019d7a <nrf_gpio_cfg_sense_set>:
{
   19d7a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   19d7c:	f10d 030f 	add.w	r3, sp, #15
   19d80:	9301      	str	r3, [sp, #4]
   19d82:	2300      	movs	r3, #0
{
   19d84:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   19d88:	461a      	mov	r2, r3
   19d8a:	4619      	mov	r1, r3
   19d8c:	9300      	str	r3, [sp, #0]
   19d8e:	f7ff ffab 	bl	19ce8 <nrf_gpio_reconfigure>
}
   19d92:	b005      	add	sp, #20
   19d94:	f85d fb04 	ldr.w	pc, [sp], #4

00019d98 <metal_device_open>:
{
   19d98:	b573      	push	{r0, r1, r4, r5, r6, lr}
   19d9a:	460c      	mov	r4, r1
   19d9c:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   19d9e:	4606      	mov	r6, r0
   19da0:	b918      	cbnz	r0, 19daa <metal_device_open+0x12>
		return -EINVAL;
   19da2:	f06f 0015 	mvn.w	r0, #21
}
   19da6:	b002      	add	sp, #8
   19da8:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   19daa:	f7fe f9c1 	bl	18130 <strlen>
   19dae:	2800      	cmp	r0, #0
   19db0:	d0f7      	beq.n	19da2 <metal_device_open+0xa>
   19db2:	2c00      	cmp	r4, #0
   19db4:	d0f5      	beq.n	19da2 <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   19db6:	4620      	mov	r0, r4
   19db8:	f7fe f9ba 	bl	18130 <strlen>
   19dbc:	2800      	cmp	r0, #0
   19dbe:	d0f0      	beq.n	19da2 <metal_device_open+0xa>
   19dc0:	2d00      	cmp	r5, #0
   19dc2:	d0ee      	beq.n	19da2 <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   19dc4:	4630      	mov	r0, r6
   19dc6:	a901      	add	r1, sp, #4
   19dc8:	f7fa fcec 	bl	147a4 <metal_bus_find>
	if (error)
   19dcc:	2800      	cmp	r0, #0
   19dce:	d1ea      	bne.n	19da6 <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   19dd0:	9801      	ldr	r0, [sp, #4]
   19dd2:	6883      	ldr	r3, [r0, #8]
   19dd4:	b12b      	cbz	r3, 19de2 <metal_device_open+0x4a>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   19dd6:	462a      	mov	r2, r5
   19dd8:	4621      	mov	r1, r4
}
   19dda:	b002      	add	sp, #8
   19ddc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   19de0:	4718      	bx	r3
		return -ENODEV;
   19de2:	f06f 0012 	mvn.w	r0, #18
   19de6:	e7de      	b.n	19da6 <metal_device_open+0xe>

00019de8 <metal_device_close>:
{
   19de8:	4601      	mov	r1, r0
	if (device->bus->ops.dev_close)
   19dea:	6840      	ldr	r0, [r0, #4]
   19dec:	68c3      	ldr	r3, [r0, #12]
   19dee:	b103      	cbz	r3, 19df2 <metal_device_close+0xa>
		device->bus->ops.dev_close(device->bus, device);
   19df0:	4718      	bx	r3
}
   19df2:	4770      	bx	lr

00019df4 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
   19df4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19df8:	b089      	sub	sp, #36	; 0x24
   19dfa:	9e10      	ldr	r6, [sp, #64]	; 0x40
   19dfc:	4604      	mov	r4, r0
   19dfe:	4689      	mov	r9, r1
   19e00:	4690      	mov	r8, r2
	const struct metal_io_ops nops = {
   19e02:	2100      	movs	r1, #0
   19e04:	2220      	movs	r2, #32
   19e06:	4668      	mov	r0, sp
{
   19e08:	461f      	mov	r7, r3
   19e0a:	9d12      	ldr	r5, [sp, #72]	; 0x48
	const struct metal_io_ops nops = {
   19e0c:	f7fe f9da 	bl	181c4 <memset>

	io->virt = virt;
	io->physmap = physmap;
	io->size = size;
	io->page_shift = page_shift;
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
   19e10:	2e1f      	cmp	r6, #31
		/* avoid overflow */
		io->page_mask = -1UL;
	else
		io->page_mask = (1UL << page_shift) - 1UL;
   19e12:	bf97      	itett	ls
   19e14:	2301      	movls	r3, #1
		io->page_mask = -1UL;
   19e16:	f04f 33ff 	movhi.w	r3, #4294967295
		io->page_mask = (1UL << page_shift) - 1UL;
   19e1a:	40b3      	lslls	r3, r6
   19e1c:	f103 33ff 	addls.w	r3, r3, #4294967295
   19e20:	6123      	str	r3, [r4, #16]
	io->mem_flags = mem_flags;
   19e22:	9b11      	ldr	r3, [sp, #68]	; 0x44
	io->physmap = physmap;
   19e24:	e9c4 9800 	strd	r9, r8, [r4]
	io->page_shift = page_shift;
   19e28:	e9c4 7602 	strd	r7, r6, [r4, #8]
	io->mem_flags = mem_flags;
   19e2c:	6163      	str	r3, [r4, #20]
	io->ops = ops ? *ops : nops;
   19e2e:	3418      	adds	r4, #24
   19e30:	b145      	cbz	r5, 19e44 <metal_io_init+0x50>
   19e32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   19e34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   19e36:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   19e3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
}
   19e3e:	b009      	add	sp, #36	; 0x24
   19e40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	io->ops = ops ? *ops : nops;
   19e44:	466d      	mov	r5, sp
   19e46:	e7f4      	b.n	19e32 <metal_io_init+0x3e>

00019e48 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   19e48:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   19e4a:	6804      	ldr	r4, [r0, #0]
		: NULL);
   19e4c:	1c66      	adds	r6, r4, #1
   19e4e:	d031      	beq.n	19eb4 <metal_io_block_read+0x6c>
	return (io->virt != METAL_BAD_VA && offset < io->size
   19e50:	6885      	ldr	r5, [r0, #8]
   19e52:	42a9      	cmp	r1, r5
   19e54:	d22e      	bcs.n	19eb4 <metal_io_block_read+0x6c>
	unsigned char *ptr = metal_io_virt(io, offset);
	unsigned char *dest = dst;
	int retlen;

	if (!ptr)
   19e56:	1864      	adds	r4, r4, r1
   19e58:	d02c      	beq.n	19eb4 <metal_io_block_read+0x6c>
		return -ERANGE;
	if ((offset + len) > io->size)
   19e5a:	185e      	adds	r6, r3, r1
   19e5c:	42ae      	cmp	r6, r5
		len = io->size - offset;
   19e5e:	bf88      	it	hi
   19e60:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   19e62:	6a05      	ldr	r5, [r0, #32]
   19e64:	b135      	cbz	r5, 19e74 <metal_io_block_read+0x2c>
		retlen = (*io->ops.block_read)(
   19e66:	9300      	str	r3, [sp, #0]
   19e68:	2305      	movs	r3, #5
   19e6a:	47a8      	blx	r5
   19e6c:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   19e6e:	4618      	mov	r0, r3
   19e70:	b002      	add	sp, #8
   19e72:	bd70      	pop	{r4, r5, r6, pc}
		atomic_thread_fence(memory_order_seq_cst);
   19e74:	f3bf 8f5b 	dmb	ish
		while ( len && (
   19e78:	4619      	mov	r1, r3
   19e7a:	1aa4      	subs	r4, r4, r2
   19e7c:	1910      	adds	r0, r2, r4
   19e7e:	b119      	cbz	r1, 19e88 <metal_io_block_read+0x40>
			((uintptr_t)dest % sizeof(int)) ||
   19e80:	ea40 0502 	orr.w	r5, r0, r2
   19e84:	07ad      	lsls	r5, r5, #30
   19e86:	d10a      	bne.n	19e9e <metal_io_block_read+0x56>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   19e88:	2903      	cmp	r1, #3
   19e8a:	dc0d      	bgt.n	19ea8 <metal_io_block_read+0x60>
   19e8c:	3801      	subs	r0, #1
   19e8e:	4411      	add	r1, r2
		for (; len != 0; dest++, ptr++, len--)
   19e90:	428a      	cmp	r2, r1
   19e92:	d0ec      	beq.n	19e6e <metal_io_block_read+0x26>
				*(const unsigned char *)ptr;
   19e94:	f810 4f01 	ldrb.w	r4, [r0, #1]!
			*(unsigned char *)dest =
   19e98:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   19e9c:	e7f8      	b.n	19e90 <metal_io_block_read+0x48>
				*(const unsigned char *)ptr;
   19e9e:	7800      	ldrb	r0, [r0, #0]
			len--;
   19ea0:	3901      	subs	r1, #1
			*(unsigned char *)dest =
   19ea2:	f802 0b01 	strb.w	r0, [r2], #1
			len--;
   19ea6:	e7e9      	b.n	19e7c <metal_io_block_read+0x34>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   19ea8:	f850 4b04 	ldr.w	r4, [r0], #4
   19eac:	3904      	subs	r1, #4
   19eae:	f842 4b04 	str.w	r4, [r2], #4
					ptr += sizeof(int),
   19eb2:	e7e9      	b.n	19e88 <metal_io_block_read+0x40>
		return -ERANGE;
   19eb4:	f06f 0321 	mvn.w	r3, #33	; 0x21
   19eb8:	e7d9      	b.n	19e6e <metal_io_block_read+0x26>

00019eba <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   19eba:	b573      	push	{r0, r1, r4, r5, r6, lr}
   19ebc:	6804      	ldr	r4, [r0, #0]
		: NULL);
   19ebe:	1c65      	adds	r5, r4, #1
   19ec0:	d032      	beq.n	19f28 <metal_io_block_write+0x6e>
	return (io->virt != METAL_BAD_VA && offset < io->size
   19ec2:	6885      	ldr	r5, [r0, #8]
   19ec4:	42a9      	cmp	r1, r5
   19ec6:	d22f      	bcs.n	19f28 <metal_io_block_write+0x6e>
	unsigned char *ptr = metal_io_virt(io, offset);
	const unsigned char *source = src;
	int retlen;

	if (!ptr)
   19ec8:	1864      	adds	r4, r4, r1
   19eca:	d02d      	beq.n	19f28 <metal_io_block_write+0x6e>
		return -ERANGE;
	if ((offset + len) > io->size)
   19ecc:	185e      	adds	r6, r3, r1
   19ece:	42ae      	cmp	r6, r5
		len = io->size - offset;
   19ed0:	bf88      	it	hi
   19ed2:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   19ed4:	6a45      	ldr	r5, [r0, #36]	; 0x24
   19ed6:	b1cd      	cbz	r5, 19f0c <metal_io_block_write+0x52>
		retlen = (*io->ops.block_write)(
   19ed8:	9300      	str	r3, [sp, #0]
   19eda:	2305      	movs	r3, #5
   19edc:	47a8      	blx	r5
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   19ede:	b002      	add	sp, #8
   19ee0:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   19ee2:	f812 5b01 	ldrb.w	r5, [r2], #1
			len--;
   19ee6:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   19ee8:	7005      	strb	r5, [r0, #0]
			len--;
   19eea:	4615      	mov	r5, r2
   19eec:	18a0      	adds	r0, r4, r2
		while ( len && (
   19eee:	b119      	cbz	r1, 19ef8 <metal_io_block_write+0x3e>
			((uintptr_t)ptr % sizeof(int)) ||
   19ef0:	ea40 0602 	orr.w	r6, r0, r2
   19ef4:	07b6      	lsls	r6, r6, #30
   19ef6:	d1f4      	bne.n	19ee2 <metal_io_block_write+0x28>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   19ef8:	2903      	cmp	r1, #3
   19efa:	dc0a      	bgt.n	19f12 <metal_io_block_write+0x58>
   19efc:	3d01      	subs	r5, #1
   19efe:	4401      	add	r1, r0
		for (; len != 0; ptr++, source++, len--)
   19f00:	4288      	cmp	r0, r1
   19f02:	d10c      	bne.n	19f1e <metal_io_block_write+0x64>
		atomic_thread_fence(memory_order_seq_cst);
   19f04:	f3bf 8f5b 	dmb	ish
	retlen = len;
   19f08:	4618      	mov	r0, r3
   19f0a:	e7e8      	b.n	19ede <metal_io_block_write+0x24>
   19f0c:	4619      	mov	r1, r3
   19f0e:	1aa4      	subs	r4, r4, r2
   19f10:	e7eb      	b.n	19eea <metal_io_block_write+0x30>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   19f12:	f855 2b04 	ldr.w	r2, [r5], #4
   19f16:	3904      	subs	r1, #4
   19f18:	f840 2b04 	str.w	r2, [r0], #4
					source += sizeof(int),
   19f1c:	e7ec      	b.n	19ef8 <metal_io_block_write+0x3e>
				*(const unsigned char *)source;
   19f1e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
			*(unsigned char *)ptr =
   19f22:	f800 2b01 	strb.w	r2, [r0], #1
		for (; len != 0; ptr++, source++, len--)
   19f26:	e7eb      	b.n	19f00 <metal_io_block_write+0x46>
		return -ERANGE;
   19f28:	f06f 0021 	mvn.w	r0, #33	; 0x21
   19f2c:	e7d7      	b.n	19ede <metal_io_block_write+0x24>

00019f2e <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   19f2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   19f30:	6804      	ldr	r4, [r0, #0]
   19f32:	461d      	mov	r5, r3
		: NULL);
   19f34:	1c66      	adds	r6, r4, #1
   19f36:	d02b      	beq.n	19f90 <metal_io_block_set+0x62>
	return (io->virt != METAL_BAD_VA && offset < io->size
   19f38:	6883      	ldr	r3, [r0, #8]
   19f3a:	4299      	cmp	r1, r3
   19f3c:	d228      	bcs.n	19f90 <metal_io_block_set+0x62>
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (!ptr)
   19f3e:	1864      	adds	r4, r4, r1
   19f40:	d026      	beq.n	19f90 <metal_io_block_set+0x62>
		return -ERANGE;
	if ((offset + len) > io->size)
   19f42:	186e      	adds	r6, r5, r1
   19f44:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   19f46:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   19f48:	bf88      	it	hi
   19f4a:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   19f4c:	b12e      	cbz	r6, 19f5a <metal_io_block_set+0x2c>
		(*io->ops.block_set)(
   19f4e:	2305      	movs	r3, #5
   19f50:	9500      	str	r5, [sp, #0]
   19f52:	47b0      	blx	r6
			*(unsigned int *)ptr = cint;
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
   19f54:	4628      	mov	r0, r5
}
   19f56:	b002      	add	sp, #8
   19f58:	bd70      	pop	{r4, r5, r6, pc}
		: NULL);
   19f5a:	4621      	mov	r1, r4
   19f5c:	462b      	mov	r3, r5
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   19f5e:	b94b      	cbnz	r3, 19f74 <metal_io_block_set+0x46>
   19f60:	440b      	add	r3, r1
		for (; len != 0; ptr++, len--)
   19f62:	4299      	cmp	r1, r3
   19f64:	d111      	bne.n	19f8a <metal_io_block_set+0x5c>
		atomic_thread_fence(memory_order_seq_cst);
   19f66:	f3bf 8f5b 	dmb	ish
   19f6a:	e7f3      	b.n	19f54 <metal_io_block_set+0x26>
			*(unsigned char *)ptr = (unsigned char) value;
   19f6c:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   19f70:	3b01      	subs	r3, #1
   19f72:	e7f4      	b.n	19f5e <metal_io_block_set+0x30>
   19f74:	0788      	lsls	r0, r1, #30
   19f76:	d1f9      	bne.n	19f6c <metal_io_block_set+0x3e>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   19f78:	f04f 3001 	mov.w	r0, #16843009	; 0x1010101
   19f7c:	4350      	muls	r0, r2
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   19f7e:	2b03      	cmp	r3, #3
   19f80:	ddee      	ble.n	19f60 <metal_io_block_set+0x32>
			*(unsigned int *)ptr = cint;
   19f82:	f841 0b04 	str.w	r0, [r1], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   19f86:	3b04      	subs	r3, #4
   19f88:	e7f9      	b.n	19f7e <metal_io_block_set+0x50>
			*(unsigned char *)ptr = (unsigned char) value;
   19f8a:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len != 0; ptr++, len--)
   19f8e:	e7e8      	b.n	19f62 <metal_io_block_set+0x34>
		return -ERANGE;
   19f90:	f06f 0021 	mvn.w	r0, #33	; 0x21
   19f94:	e7df      	b.n	19f56 <metal_io_block_set+0x28>

00019f96 <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   19f96:	2000      	movs	r0, #0
   19f98:	4770      	bx	lr

00019f9a <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   19f9a:	b410      	push	{r4}
	if (!io->ops.offset_to_phys) {
   19f9c:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   19f9e:	4602      	mov	r2, r0
   19fa0:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   19fa2:	b984      	cbnz	r4, 19fc6 <metal_io_phys+0x2c>
		unsigned long page = (io->page_shift >=
   19fa4:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
   19fa6:	291f      	cmp	r1, #31
   19fa8:	bf98      	it	ls
   19faa:	fa23 f401 	lsrls.w	r4, r3, r1
		return (io->physmap && offset < io->size
   19fae:	6841      	ldr	r1, [r0, #4]
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   19fb0:	b161      	cbz	r1, 19fcc <metal_io_phys+0x32>
		return (io->physmap && offset < io->size
   19fb2:	6880      	ldr	r0, [r0, #8]
   19fb4:	4283      	cmp	r3, r0
   19fb6:	d209      	bcs.n	19fcc <metal_io_phys+0x32>
			? io->physmap[page] + (offset & io->page_mask)
   19fb8:	6910      	ldr	r0, [r2, #16]
   19fba:	4018      	ands	r0, r3
			: METAL_BAD_PHYS);
   19fbc:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
   19fc0:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   19fc2:	bc10      	pop	{r4}
   19fc4:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   19fc6:	4623      	mov	r3, r4
}
   19fc8:	bc10      	pop	{r4}
	return io->ops.offset_to_phys(io, offset);
   19fca:	4718      	bx	r3
			: METAL_BAD_PHYS);
   19fcc:	f04f 30ff 	mov.w	r0, #4294967295
   19fd0:	e7f7      	b.n	19fc2 <metal_io_phys+0x28>

00019fd2 <metal_io_phys_to_virt>:
 * @param[in]	phys	Physical address within segment.
 * @return	NULL if out of range, or corresponding virtual address.
 */
static inline void *
metal_io_phys_to_virt(struct metal_io_region *io, metal_phys_addr_t phys)
{
   19fd2:	b570      	push	{r4, r5, r6, lr}
	if (!io->ops.phys_to_offset) {
   19fd4:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
   19fd6:	4605      	mov	r5, r0
   19fd8:	460e      	mov	r6, r1
	if (!io->ops.phys_to_offset) {
   19fda:	b9e3      	cbnz	r3, 1a016 <metal_io_phys_to_virt+0x44>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   19fdc:	6904      	ldr	r4, [r0, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   19fde:	1c62      	adds	r2, r4, #1
   19fe0:	bf09      	itett	eq
   19fe2:	6843      	ldreq	r3, [r0, #4]
   19fe4:	400c      	andne	r4, r1
   19fe6:	681c      	ldreq	r4, [r3, #0]
   19fe8:	1b0c      	subeq	r4, r1, r4
			if (metal_io_phys(io, offset) == phys)
   19fea:	4621      	mov	r1, r4
   19fec:	4628      	mov	r0, r5
   19fee:	f7ff ffd4 	bl	19f9a <metal_io_phys>
   19ff2:	4286      	cmp	r6, r0
   19ff4:	d007      	beq.n	1a006 <metal_io_phys_to_virt+0x34>
			offset += io->page_mask + 1;
   19ff6:	692b      	ldr	r3, [r5, #16]
   19ff8:	3301      	adds	r3, #1
   19ffa:	441c      	add	r4, r3
		} while (offset < io->size);
   19ffc:	68ab      	ldr	r3, [r5, #8]
   19ffe:	429c      	cmp	r4, r3
   1a000:	d3f3      	bcc.n	19fea <metal_io_phys_to_virt+0x18>
		return METAL_BAD_OFFSET;
   1a002:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   1a006:	6828      	ldr	r0, [r5, #0]
		: NULL);
   1a008:	1c43      	adds	r3, r0, #1
   1a00a:	d007      	beq.n	1a01c <metal_io_phys_to_virt+0x4a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1a00c:	68ab      	ldr	r3, [r5, #8]
   1a00e:	42a3      	cmp	r3, r4
   1a010:	d904      	bls.n	1a01c <metal_io_phys_to_virt+0x4a>
		? (void *)((uintptr_t)io->virt + offset)
   1a012:	4420      	add	r0, r4
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
}
   1a014:	bd70      	pop	{r4, r5, r6, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   1a016:	4798      	blx	r3
   1a018:	4604      	mov	r4, r0
   1a01a:	e7f4      	b.n	1a006 <metal_io_phys_to_virt+0x34>
		: NULL);
   1a01c:	2000      	movs	r0, #0
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
   1a01e:	e7f9      	b.n	1a014 <metal_io_phys_to_virt+0x42>

0001a020 <virtqueue_create>:
{
   1a020:	b530      	push	{r4, r5, lr}
   1a022:	9c05      	ldr	r4, [sp, #20]
		vq->vq_name = name;
   1a024:	e9c4 0200 	strd	r0, r2, [r4]
		vq->callback = callback;
   1a028:	9a03      	ldr	r2, [sp, #12]
		vq->vq_queue_index = id;
   1a02a:	8121      	strh	r1, [r4, #8]
		vq->vq_nentries = ring->num_descs;
   1a02c:	8919      	ldrh	r1, [r3, #8]
		vq->callback = callback;
   1a02e:	60e2      	str	r2, [r4, #12]
		vq->notify = notify;
   1a030:	9a04      	ldr	r2, [sp, #16]
		vq->vq_nentries = ring->num_descs;
   1a032:	8161      	strh	r1, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   1a034:	84a1      	strh	r1, [r4, #36]	; 0x24
		vq->notify = notify;
   1a036:	6122      	str	r2, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   1a038:	e9d3 2500 	ldrd	r2, r5, [r3]
static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   1a03c:	eb02 1301 	add.w	r3, r2, r1, lsl #4
	vr->desc = (struct vring_desc *)p;
   1a040:	e9c4 1205 	strd	r1, r2, [r4, #20]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1a044:	1c8a      	adds	r2, r1, #2
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   1a046:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1a048:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	      align - 1) & ~(align - 1));
   1a04c:	1c6a      	adds	r2, r5, #1
   1a04e:	4413      	add	r3, r2
   1a050:	426d      	negs	r5, r5
   1a052:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   1a054:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_DEVICE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1a056:	6983      	ldr	r3, [r0, #24]
   1a058:	b953      	cbnz	r3, 1a070 <virtqueue_create+0x50>
		int i;

		for (i = 0; i < size - 1; i++)
   1a05a:	3901      	subs	r1, #1
			vr->desc[i].next = i + 1;
   1a05c:	69a2      	ldr	r2, [r4, #24]
		for (i = 0; i < size - 1; i++)
   1a05e:	428b      	cmp	r3, r1
			vr->desc[i].next = i + 1;
   1a060:	eb02 1203 	add.w	r2, r2, r3, lsl #4
		for (i = 0; i < size - 1; i++)
   1a064:	db06      	blt.n	1a074 <virtqueue_create+0x54>
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   1a066:	2300      	movs	r3, #0
   1a068:	7393      	strb	r3, [r2, #14]
   1a06a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1a06e:	73d3      	strb	r3, [r2, #15]
}
   1a070:	2000      	movs	r0, #0
   1a072:	bd30      	pop	{r4, r5, pc}
			vr->desc[i].next = i + 1;
   1a074:	3301      	adds	r3, #1
   1a076:	81d3      	strh	r3, [r2, #14]
		for (i = 0; i < size - 1; i++)
   1a078:	e7f0      	b.n	1a05c <virtqueue_create+0x3c>

0001a07a <virtqueue_add_buffer>:
{
   1a07a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		head_idx = vq->vq_desc_head_idx;
   1a07e:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	; 0x2c
{
   1a082:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1a084:	4655      	mov	r5, sl
   1a086:	2600      	movs	r6, #0
{
   1a088:	b085      	sub	sp, #20
	needed = readable + writable;
   1a08a:	eb02 0803 	add.w	r8, r2, r3
{
   1a08e:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   1a090:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a092:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
		dxp->ndescs = needed;
   1a096:	fa1f fb88 	uxth.w	fp, r8
		dxp->cookie = cookie;
   1a09a:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   1a09c:	f8a3 b038 	strh.w	fp, [r3, #56]	; 0x38
		if (i < needed - 1)
   1a0a0:	f108 32ff 	add.w	r2, r8, #4294967295
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   1a0a4:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1a0a6:	1d0f      	adds	r7, r1, #4
		if (i < needed - 1)
   1a0a8:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1a0aa:	45b0      	cmp	r8, r6
   1a0ac:	dc1a      	bgt.n	1a0e4 <virtqueue_add_buffer+0x6a>
		vq->vq_free_cnt -= needed;
   1a0ae:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		vq->vq_desc_head_idx = idx;
   1a0b0:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   1a0b2:	eba3 030b 	sub.w	r3, r3, fp
   1a0b6:	84a3      	strh	r3, [r4, #36]	; 0x24
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 *
	 * CACHE: avail is never written by remote, so it is safe to not invalidate here
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1a0b8:	69e3      	ldr	r3, [r4, #28]
   1a0ba:	8961      	ldrh	r1, [r4, #10]
   1a0bc:	885a      	ldrh	r2, [r3, #2]
   1a0be:	3901      	subs	r1, #1
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   1a0c0:	400a      	ands	r2, r1
   1a0c2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   1a0c6:	f8a3 a004 	strh.w	sl, [r3, #4]

	/* We still need to flush the ring */
	VRING_FLUSH(vq->vq_ring.avail->ring[avail_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   1a0ca:	f3bf 8f5b 	dmb	ish
}
   1a0ce:	2000      	movs	r0, #0

	vq->vq_ring.avail->idx++;
   1a0d0:	69e2      	ldr	r2, [r4, #28]
   1a0d2:	8853      	ldrh	r3, [r2, #2]
   1a0d4:	3301      	adds	r3, #1
   1a0d6:	8053      	strh	r3, [r2, #2]

	/* And the index */
	VRING_FLUSH(vq->vq_ring.avail->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   1a0d8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1a0da:	3301      	adds	r3, #1
   1a0dc:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   1a0de:	b005      	add	sp, #20
   1a0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   1a0e4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1a0e6:	012a      	lsls	r2, r5, #4
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1a0e8:	f857 1c04 	ldr.w	r1, [r7, #-4]
   1a0ec:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   1a0f0:	9302      	str	r3, [sp, #8]
   1a0f2:	6803      	ldr	r3, [r0, #0]
   1a0f4:	9203      	str	r2, [sp, #12]
   1a0f6:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   1a0f8:	6883      	ldr	r3, [r0, #8]
   1a0fa:	3708      	adds	r7, #8
   1a0fc:	4299      	cmp	r1, r3
   1a0fe:	bf28      	it	cs
   1a100:	f04f 31ff 	movcs.w	r1, #4294967295
   1a104:	f7ff ff49 	bl	19f9a <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1a108:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1a10c:	5098      	str	r0, [r3, r2]
   1a10e:	2200      	movs	r2, #0
   1a110:	606a      	str	r2, [r5, #4]
		dp->len = buf_list[i].len;
   1a112:	f857 2c08 	ldr.w	r2, [r7, #-8]
   1a116:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   1a118:	9a01      	ldr	r2, [sp, #4]
   1a11a:	4296      	cmp	r6, r2
   1a11c:	bfac      	ite	ge
   1a11e:	2200      	movge	r2, #0
   1a120:	2201      	movlt	r2, #1
		if (i >= readable)
   1a122:	45b1      	cmp	r9, r6
			dp->flags |= VRING_DESC_F_WRITE;
   1a124:	bfd8      	it	le
   1a126:	f042 0202 	orrle.w	r2, r2, #2
   1a12a:	81aa      	strh	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1a12c:	3601      	adds	r6, #1
   1a12e:	89ed      	ldrh	r5, [r5, #14]
   1a130:	e7bb      	b.n	1a0aa <virtqueue_add_buffer+0x30>

0001a132 <virtqueue_get_buffer>:
{
   1a132:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   1a134:	b350      	cbz	r0, 1a18c <virtqueue_get_buffer+0x5a>
   1a136:	6a05      	ldr	r5, [r0, #32]
   1a138:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
   1a13a:	886b      	ldrh	r3, [r5, #2]
   1a13c:	42a3      	cmp	r3, r4
   1a13e:	d030      	beq.n	1a1a2 <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   1a140:	1c63      	adds	r3, r4, #1
   1a142:	85c3      	strh	r3, [r0, #46]	; 0x2e
   1a144:	8943      	ldrh	r3, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   1a146:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   1a14a:	3b01      	subs	r3, #1
   1a14c:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   1a14e:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   1a152:	686b      	ldr	r3, [r5, #4]
   1a154:	b29e      	uxth	r6, r3
	if (len)
   1a156:	b109      	cbz	r1, 1a15c <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   1a158:	68ad      	ldr	r5, [r5, #8]
   1a15a:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   1a15c:	f8d0 c018 	ldr.w	ip, [r0, #24]
   1a160:	b29b      	uxth	r3, r3
   1a162:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   1a166:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   1a16a:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   1a16c:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   1a16e:	442f      	add	r7, r5
	dxp->ndescs--;
   1a170:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   1a172:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   1a174:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   1a176:	898d      	ldrh	r5, [r1, #12]
   1a178:	076f      	lsls	r7, r5, #29
   1a17a:	d50e      	bpl.n	1a19a <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   1a17c:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   1a17e:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   1a180:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   1a182:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   1a184:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   1a186:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   1a188:	b102      	cbz	r2, 1a18c <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   1a18a:	8014      	strh	r4, [r2, #0]
}
   1a18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   1a18e:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   1a190:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   1a192:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   1a194:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   1a198:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   1a19a:	898d      	ldrh	r5, [r1, #12]
   1a19c:	07ed      	lsls	r5, r5, #31
   1a19e:	d4f6      	bmi.n	1a18e <virtqueue_get_buffer+0x5c>
   1a1a0:	e7ec      	b.n	1a17c <virtqueue_get_buffer+0x4a>
		return NULL;
   1a1a2:	2000      	movs	r0, #0
   1a1a4:	e7f2      	b.n	1a18c <virtqueue_get_buffer+0x5a>

0001a1a6 <virtqueue_get_buffer_length>:
	return vq->vq_ring.desc[idx].len;
   1a1a6:	6983      	ldr	r3, [r0, #24]
   1a1a8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
}
   1a1ac:	6898      	ldr	r0, [r3, #8]
   1a1ae:	4770      	bx	lr

0001a1b0 <virtqueue_get_available_buffer>:
{
   1a1b0:	b570      	push	{r4, r5, r6, lr}
	atomic_thread_fence(memory_order_seq_cst);
   1a1b2:	f3bf 8f5b 	dmb	ish
{
   1a1b6:	460d      	mov	r5, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1a1b8:	69c1      	ldr	r1, [r0, #28]
{
   1a1ba:	4616      	mov	r6, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1a1bc:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   1a1be:	884a      	ldrh	r2, [r1, #2]
{
   1a1c0:	4604      	mov	r4, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1a1c2:	429a      	cmp	r2, r3
   1a1c4:	d016      	beq.n	1a1f4 <virtqueue_get_available_buffer+0x44>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   1a1c6:	1c5a      	adds	r2, r3, #1
   1a1c8:	8602      	strh	r2, [r0, #48]	; 0x30
   1a1ca:	8942      	ldrh	r2, [r0, #10]
   1a1cc:	3a01      	subs	r2, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   1a1ce:	4013      	ands	r3, r2
   1a1d0:	eb01 0143 	add.w	r1, r1, r3, lsl #1
   1a1d4:	888a      	ldrh	r2, [r1, #4]
   1a1d6:	802a      	strh	r2, [r5, #0]
   1a1d8:	b293      	uxth	r3, r2
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   1a1da:	6982      	ldr	r2, [r0, #24]
   1a1dc:	011b      	lsls	r3, r3, #4
	return metal_io_phys_to_virt(io, phys);
   1a1de:	58d1      	ldr	r1, [r2, r3]
   1a1e0:	6a80      	ldr	r0, [r0, #40]	; 0x28
   1a1e2:	f7ff fef6 	bl	19fd2 <metal_io_phys_to_virt>
	*len = vq->vq_ring.desc[*avail_idx].len;
   1a1e6:	882a      	ldrh	r2, [r5, #0]
   1a1e8:	69a3      	ldr	r3, [r4, #24]
   1a1ea:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1a1ee:	689b      	ldr	r3, [r3, #8]
   1a1f0:	6033      	str	r3, [r6, #0]
}
   1a1f2:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1a1f4:	2000      	movs	r0, #0
   1a1f6:	e7fc      	b.n	1a1f2 <virtqueue_get_available_buffer+0x42>

0001a1f8 <virtqueue_disable_cb>:
{
   1a1f8:	b510      	push	{r4, lr}
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1a1fa:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1a1fc:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1a1fe:	6912      	ldr	r2, [r2, #16]
   1a200:	0092      	lsls	r2, r2, #2
   1a202:	d517      	bpl.n	1a234 <virtqueue_disable_cb+0x3c>
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1a204:	b943      	cbnz	r3, 1a218 <virtqueue_disable_cb+0x20>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1a206:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
			vring_used_event(&vq->vq_ring) =
   1a208:	69c2      	ldr	r2, [r0, #28]
   1a20a:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1a20c:	8944      	ldrh	r4, [r0, #10]
   1a20e:	3b01      	subs	r3, #1
   1a210:	1b1b      	subs	r3, r3, r4
			vring_used_event(&vq->vq_ring) =
   1a212:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   1a216:	8093      	strh	r3, [r2, #4]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   1a218:	6803      	ldr	r3, [r0, #0]
   1a21a:	699b      	ldr	r3, [r3, #24]
   1a21c:	2b01      	cmp	r3, #1
   1a21e:	d108      	bne.n	1a232 <virtqueue_disable_cb+0x3a>
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1a220:	8e03      	ldrh	r3, [r0, #48]	; 0x30
			vring_avail_event(&vq->vq_ring) =
   1a222:	6a02      	ldr	r2, [r0, #32]
   1a224:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1a226:	8940      	ldrh	r0, [r0, #10]
   1a228:	3b01      	subs	r3, #1
   1a22a:	1a1b      	subs	r3, r3, r0
			vring_avail_event(&vq->vq_ring) =
   1a22c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   1a230:	8093      	strh	r3, [r2, #4]
}
   1a232:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1a234:	b923      	cbnz	r3, 1a240 <virtqueue_disable_cb+0x48>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   1a236:	69c2      	ldr	r2, [r0, #28]
   1a238:	8813      	ldrh	r3, [r2, #0]
   1a23a:	f043 0301 	orr.w	r3, r3, #1
   1a23e:	8013      	strh	r3, [r2, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   1a240:	6803      	ldr	r3, [r0, #0]
   1a242:	699b      	ldr	r3, [r3, #24]
   1a244:	2b01      	cmp	r3, #1
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   1a246:	bf01      	itttt	eq
   1a248:	6a02      	ldreq	r2, [r0, #32]
   1a24a:	8813      	ldrheq	r3, [r2, #0]
   1a24c:	f043 0301 	orreq.w	r3, r3, #1
   1a250:	8013      	strheq	r3, [r2, #0]
}
   1a252:	e7ee      	b.n	1a232 <virtqueue_disable_cb+0x3a>

0001a254 <virtqueue_kick>:
{
   1a254:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   1a256:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1a25a:	6803      	ldr	r3, [r0, #0]
{
   1a25c:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1a25e:	691a      	ldr	r2, [r3, #16]
   1a260:	699b      	ldr	r3, [r3, #24]
   1a262:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   1a266:	d01a      	beq.n	1a29e <virtqueue_kick+0x4a>
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1a268:	b97b      	cbnz	r3, 1a28a <virtqueue_kick+0x36>
			/* CACHE: no need to invalidate avail */
			new_idx = vq->vq_ring.avail->idx;
   1a26a:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_avail_event(&vq->vq_ring));
			event_idx = vring_avail_event(&vq->vq_ring);
   1a26c:	6a02      	ldr	r2, [r0, #32]
			new_idx = vq->vq_ring.avail->idx;
   1a26e:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   1a270:	6941      	ldr	r1, [r0, #20]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   1a272:	3b01      	subs	r3, #1
   1a274:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
   1a278:	8892      	ldrh	r2, [r2, #4]
   1a27a:	1a9b      	subs	r3, r3, r2
	if (vq_ring_must_notify(vq))
   1a27c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   1a27e:	b29b      	uxth	r3, r3
   1a280:	429a      	cmp	r2, r3
   1a282:	d814      	bhi.n	1a2ae <virtqueue_kick+0x5a>
	vq->vq_queued_cnt = 0;
   1a284:	2300      	movs	r3, #0
   1a286:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   1a288:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   1a28a:	2b01      	cmp	r3, #1
   1a28c:	d1fa      	bne.n	1a284 <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   1a28e:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   1a290:	69c2      	ldr	r2, [r0, #28]
			new_idx = vq->vq_ring.used->idx;
   1a292:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   1a294:	6941      	ldr	r1, [r0, #20]
   1a296:	3b01      	subs	r3, #1
   1a298:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   1a29c:	e7ec      	b.n	1a278 <virtqueue_kick+0x24>
						prev_idx) != 0;
		}
#endif /*VIRTIO_DRIVER_ONLY*/
	} else {
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   1a29e:	b963      	cbnz	r3, 1a2ba <virtqueue_kick+0x66>
			VRING_INVALIDATE(vq->vq_ring.used->flags);
			return (vq->vq_ring.used->flags &
   1a2a0:	6a03      	ldr	r3, [r0, #32]
		}
#endif /*VIRTIO_DEVICE_ONLY*/
#ifndef VIRTIO_DRIVER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
   1a2a2:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   1a2a4:	43db      	mvns	r3, r3
   1a2a6:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   1a2aa:	2b00      	cmp	r3, #0
   1a2ac:	d0ea      	beq.n	1a284 <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   1a2ae:	6923      	ldr	r3, [r4, #16]
   1a2b0:	2b00      	cmp	r3, #0
   1a2b2:	d0e7      	beq.n	1a284 <virtqueue_kick+0x30>
		vq->notify(vq);
   1a2b4:	4620      	mov	r0, r4
   1a2b6:	4798      	blx	r3
   1a2b8:	e7e4      	b.n	1a284 <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   1a2ba:	2b01      	cmp	r3, #1
   1a2bc:	d1e2      	bne.n	1a284 <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   1a2be:	69c3      	ldr	r3, [r0, #28]
   1a2c0:	e7ef      	b.n	1a2a2 <virtqueue_kick+0x4e>

0001a2c2 <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1a2c2:	69c3      	ldr	r3, [r0, #28]
   1a2c4:	8e02      	ldrh	r2, [r0, #48]	; 0x30
   1a2c6:	8859      	ldrh	r1, [r3, #2]
   1a2c8:	4291      	cmp	r1, r2
   1a2ca:	d00a      	beq.n	1a2e2 <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   1a2cc:	8941      	ldrh	r1, [r0, #10]
   1a2ce:	3901      	subs	r1, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   1a2d0:	400a      	ands	r2, r1
   1a2d2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   1a2d6:	889a      	ldrh	r2, [r3, #4]
   1a2d8:	6983      	ldr	r3, [r0, #24]
   1a2da:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1a2de:	6898      	ldr	r0, [r3, #8]
	return len;
   1a2e0:	4770      	bx	lr
		return 0;
   1a2e2:	2000      	movs	r0, #0
}
   1a2e4:	4770      	bx	lr

0001a2e6 <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   1a2e6:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   1a2ea:	68c3      	ldr	r3, [r0, #12]
   1a2ec:	b103      	cbz	r3, 1a2f0 <virtqueue_notification+0xa>
		vq->callback(vq);
   1a2ee:	4718      	bx	r3
}
   1a2f0:	4770      	bx	lr

0001a2f2 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1a2f2:	f04f 32ff 	mov.w	r2, #4294967295
   1a2f6:	f04f 33ff 	mov.w	r3, #4294967295
   1a2fa:	f7fb b9a9 	b.w	15650 <z_impl_k_sem_take>

0001a2fe <rpmsg_unregister_endpoint>:
{
   1a2fe:	b570      	push	{r4, r5, r6, lr}
   1a300:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   1a302:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   1a304:	f105 0658 	add.w	r6, r5, #88	; 0x58
   1a308:	4630      	mov	r0, r6
   1a30a:	f7ff fff2 	bl	1a2f2 <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   1a30e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a310:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
   1a314:	2b7f      	cmp	r3, #127	; 0x7f
   1a316:	d80b      	bhi.n	1a330 <rpmsg_unregister_endpoint+0x32>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1a318:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   1a31a:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   1a31c:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1a31e:	f003 031f 	and.w	r3, r3, #31
   1a322:	409a      	lsls	r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   1a324:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   1a328:	ea23 0302 	bic.w	r3, r3, r2
   1a32c:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
	node->next->prev = node->prev;
   1a330:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   1a334:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   1a336:	6b61      	ldr	r1, [r4, #52]	; 0x34
	metal_list_del(&ept->node);
   1a338:	f104 0334 	add.w	r3, r4, #52	; 0x34
   1a33c:	6011      	str	r1, [r2, #0]
	node->next = node;
   1a33e:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   1a342:	2300      	movs	r3, #0
   1a344:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   1a346:	4630      	mov	r0, r6
}
   1a348:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a34c:	f7fb b95a 	b.w	15604 <z_impl_k_sem_give>

0001a350 <rpmsg_send_ns_message>:
{
   1a350:	b510      	push	{r4, lr}
   1a352:	b08c      	sub	sp, #48	; 0x30
	ns_msg.addr = ept->addr;
   1a354:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
   1a356:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   1a358:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   1a35a:	2220      	movs	r2, #32
   1a35c:	4601      	mov	r1, r0
   1a35e:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   1a360:	930a      	str	r3, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   1a362:	f7fd fed1 	bl	18108 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   1a366:	2328      	movs	r3, #40	; 0x28
   1a368:	2201      	movs	r2, #1
   1a36a:	e9cd 3200 	strd	r3, r2, [sp]
   1a36e:	4620      	mov	r0, r4
   1a370:	2235      	movs	r2, #53	; 0x35
   1a372:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1a374:	ab02      	add	r3, sp, #8
   1a376:	f7fa fb67 	bl	14a48 <rpmsg_send_offchannel_raw>
}
   1a37a:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   1a37e:	b00c      	add	sp, #48	; 0x30
   1a380:	bd10      	pop	{r4, pc}

0001a382 <rpmsg_hold_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   1a382:	b128      	cbz	r0, 1a390 <rpmsg_hold_rx_buffer+0xe>
   1a384:	6a00      	ldr	r0, [r0, #32]
   1a386:	b118      	cbz	r0, 1a390 <rpmsg_hold_rx_buffer+0xe>
   1a388:	b111      	cbz	r1, 1a390 <rpmsg_hold_rx_buffer+0xe>
	if (rdev->ops.hold_rx_buffer)
   1a38a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   1a38c:	b103      	cbz	r3, 1a390 <rpmsg_hold_rx_buffer+0xe>
		rdev->ops.hold_rx_buffer(rdev, rxbuf);
   1a38e:	4718      	bx	r3
}
   1a390:	4770      	bx	lr

0001a392 <rpmsg_release_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   1a392:	b130      	cbz	r0, 1a3a2 <rpmsg_release_rx_buffer+0x10>
   1a394:	6a00      	ldr	r0, [r0, #32]
   1a396:	b120      	cbz	r0, 1a3a2 <rpmsg_release_rx_buffer+0x10>
   1a398:	b119      	cbz	r1, 1a3a2 <rpmsg_release_rx_buffer+0x10>
	if (rdev->ops.release_rx_buffer)
   1a39a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   1a39e:	b103      	cbz	r3, 1a3a2 <rpmsg_release_rx_buffer+0x10>
		rdev->ops.release_rx_buffer(rdev, rxbuf);
   1a3a0:	4718      	bx	r3
}
   1a3a2:	4770      	bx	lr

0001a3a4 <rpmsg_get_tx_payload_buffer>:
	if (!ept || !ept->rdev || !len)
   1a3a4:	b130      	cbz	r0, 1a3b4 <rpmsg_get_tx_payload_buffer+0x10>
   1a3a6:	6a00      	ldr	r0, [r0, #32]
   1a3a8:	b120      	cbz	r0, 1a3b4 <rpmsg_get_tx_payload_buffer+0x10>
   1a3aa:	b119      	cbz	r1, 1a3b4 <rpmsg_get_tx_payload_buffer+0x10>
	if (rdev->ops.get_tx_payload_buffer)
   1a3ac:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
   1a3b0:	b103      	cbz	r3, 1a3b4 <rpmsg_get_tx_payload_buffer+0x10>
		return rdev->ops.get_tx_payload_buffer(rdev, len, wait);
   1a3b2:	4718      	bx	r3
}
   1a3b4:	2000      	movs	r0, #0
   1a3b6:	4770      	bx	lr

0001a3b8 <rpmsg_get_endpoint>:
{
   1a3b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a3bc:	4606      	mov	r6, r0
   1a3be:	4688      	mov	r8, r1
   1a3c0:	4617      	mov	r7, r2
   1a3c2:	4699      	mov	r9, r3
	metal_list_for_each(&rdev->endpoints, node) {
   1a3c4:	6804      	ldr	r4, [r0, #0]
   1a3c6:	42a6      	cmp	r6, r4
   1a3c8:	d101      	bne.n	1a3ce <rpmsg_get_endpoint+0x16>
	return NULL;
   1a3ca:	2500      	movs	r5, #0
   1a3cc:	e023      	b.n	1a416 <rpmsg_get_endpoint+0x5e>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1a3ce:	1c7a      	adds	r2, r7, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   1a3d0:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1a3d4:	d002      	beq.n	1a3dc <rpmsg_get_endpoint+0x24>
   1a3d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1a3d8:	42bb      	cmp	r3, r7
   1a3da:	d01c      	beq.n	1a416 <rpmsg_get_endpoint+0x5e>
		if (name)
   1a3dc:	f1b8 0f00 	cmp.w	r8, #0
   1a3e0:	d101      	bne.n	1a3e6 <rpmsg_get_endpoint+0x2e>
	metal_list_for_each(&rdev->endpoints, node) {
   1a3e2:	6824      	ldr	r4, [r4, #0]
   1a3e4:	e7ef      	b.n	1a3c6 <rpmsg_get_endpoint+0xe>
			name_match = !strncmp(ept->name, name,
   1a3e6:	2220      	movs	r2, #32
   1a3e8:	4641      	mov	r1, r8
   1a3ea:	4628      	mov	r0, r5
   1a3ec:	f7fd febc 	bl	18168 <strncmp>
		if (!name || !name_match)
   1a3f0:	2800      	cmp	r0, #0
   1a3f2:	d1f6      	bne.n	1a3e2 <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   1a3f4:	f1b9 3fff 	cmp.w	r9, #4294967295
   1a3f8:	d002      	beq.n	1a400 <rpmsg_get_endpoint+0x48>
   1a3fa:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1a3fc:	454b      	cmp	r3, r9
   1a3fe:	d00a      	beq.n	1a416 <rpmsg_get_endpoint+0x5e>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   1a400:	1c7b      	adds	r3, r7, #1
   1a402:	d00b      	beq.n	1a41c <rpmsg_get_endpoint+0x64>
	metal_list_for_each(&rdev->endpoints, node) {
   1a404:	6824      	ldr	r4, [r4, #0]
   1a406:	42b4      	cmp	r4, r6
   1a408:	d0df      	beq.n	1a3ca <rpmsg_get_endpoint+0x12>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1a40a:	f854 3c10 	ldr.w	r3, [r4, #-16]
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   1a40e:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1a412:	429f      	cmp	r7, r3
   1a414:	d1e7      	bne.n	1a3e6 <rpmsg_get_endpoint+0x2e>
}
   1a416:	4628      	mov	r0, r5
   1a418:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   1a41c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1a41e:	3301      	adds	r3, #1
   1a420:	d0f9      	beq.n	1a416 <rpmsg_get_endpoint+0x5e>
	metal_list_for_each(&rdev->endpoints, node) {
   1a422:	6824      	ldr	r4, [r4, #0]
   1a424:	42b4      	cmp	r4, r6
   1a426:	d0d0      	beq.n	1a3ca <rpmsg_get_endpoint+0x12>
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   1a428:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1a42c:	e7d6      	b.n	1a3dc <rpmsg_get_endpoint+0x24>

0001a42e <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   1a42e:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev)
   1a430:	4604      	mov	r4, r0
   1a432:	b190      	cbz	r0, 1a45a <rpmsg_destroy_ept+0x2c>
   1a434:	6a03      	ldr	r3, [r0, #32]
   1a436:	b183      	cbz	r3, 1a45a <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;

	if (ept->name[0] && rdev->support_ns &&
   1a438:	7802      	ldrb	r2, [r0, #0]
   1a43a:	b14a      	cbz	r2, 1a450 <rpmsg_destroy_ept+0x22>
   1a43c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
   1a440:	b133      	cbz	r3, 1a450 <rpmsg_destroy_ept+0x22>
   1a442:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1a444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1a448:	d302      	bcc.n	1a450 <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   1a44a:	2101      	movs	r1, #1
   1a44c:	f7ff ff80 	bl	1a350 <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   1a450:	4620      	mov	r0, r4
}
   1a452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   1a456:	f7ff bf52 	b.w	1a2fe <rpmsg_unregister_endpoint>
}
   1a45a:	bd10      	pop	{r4, pc}

0001a45c <rpmsg_virtio_hold_rx_buffer>:
	rp_hdr->reserved |= RPMSG_BUF_HELD;
   1a45c:	f851 3c08 	ldr.w	r3, [r1, #-8]
   1a460:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1a464:	f841 3c08 	str.w	r3, [r1, #-8]
}
   1a468:	4770      	bx	lr

0001a46a <rpmsg_virtio_tx_callback>:
}
   1a46a:	4770      	bx	lr

0001a46c <k_sem_give>:
   1a46c:	f7fb b8ca 	b.w	15604 <z_impl_k_sem_give>

0001a470 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1a470:	f04f 32ff 	mov.w	r2, #4294967295
   1a474:	f04f 33ff 	mov.w	r3, #4294967295
   1a478:	f7fb b8ea 	b.w	15650 <z_impl_k_sem_take>

0001a47c <rpmsg_virtio_release_tx_buffer>:
{
   1a47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a47e:	460c      	mov	r4, r1
   1a480:	4605      	mov	r5, r0
	idx = rp_hdr->reserved;
   1a482:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   1a486:	f100 0758 	add.w	r7, r0, #88	; 0x58
   1a48a:	4638      	mov	r0, r7
	idx = rp_hdr->reserved;
   1a48c:	b2b6      	uxth	r6, r6
   1a48e:	f7ff ffef 	bl	1a470 <__metal_mutex_acquire>
	r_desc->idx = idx;
   1a492:	f824 6c08 	strh.w	r6, [r4, #-8]
	new_node->prev = node->prev;
   1a496:	f8d5 20b8 	ldr.w	r2, [r5, #184]	; 0xb8
	metal_list_add_tail(&rvdev->reclaimer, &r_desc->node);
   1a49a:	f1a4 0310 	sub.w	r3, r4, #16
   1a49e:	f844 2c0c 	str.w	r2, [r4, #-12]
   1a4a2:	f105 02b4 	add.w	r2, r5, #180	; 0xb4
	new_node->next = node;
   1a4a6:	f844 2c10 	str.w	r2, [r4, #-16]
	new_node->next->prev = new_node;
   1a4aa:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	new_node->prev->next = new_node;
   1a4ae:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   1a4b2:	4638      	mov	r0, r7
   1a4b4:	6013      	str	r3, [r2, #0]
   1a4b6:	f7ff ffd9 	bl	1a46c <k_sem_give>
}
   1a4ba:	2000      	movs	r0, #0
   1a4bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a4be <rpmsg_virtio_ns_callback>:
{
   1a4be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_device *rdev = ept->rdev;
   1a4c2:	6a05      	ldr	r5, [r0, #32]
	if (len != sizeof(*ns_msg))
   1a4c4:	2a28      	cmp	r2, #40	; 0x28
{
   1a4c6:	460f      	mov	r7, r1
	struct metal_io_region *io = rvdev->shbuf_io;
   1a4c8:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
{
   1a4cc:	b088      	sub	sp, #32
	if (len != sizeof(*ns_msg))
   1a4ce:	d126      	bne.n	1a51e <rpmsg_virtio_ns_callback+0x60>
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1a4d0:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1a4d2:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   1a4d4:	1a79      	subs	r1, r7, r1
	metal_io_block_read(io,
   1a4d6:	42a1      	cmp	r1, r4
   1a4d8:	bf28      	it	cs
   1a4da:	f04f 31ff 	movcs.w	r1, #4294967295
   1a4de:	2320      	movs	r3, #32
   1a4e0:	466a      	mov	r2, sp
   1a4e2:	f7ff fcb1 	bl	19e48 <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   1a4e6:	f105 0658 	add.w	r6, r5, #88	; 0x58
	dest = ns_msg->addr;
   1a4ea:	f8d7 8020 	ldr.w	r8, [r7, #32]
   1a4ee:	4630      	mov	r0, r6
   1a4f0:	f7ff ffbe 	bl	1a470 <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   1a4f4:	4643      	mov	r3, r8
   1a4f6:	f04f 32ff 	mov.w	r2, #4294967295
   1a4fa:	4669      	mov	r1, sp
   1a4fc:	4628      	mov	r0, r5
   1a4fe:	f7ff ff5b 	bl	1a3b8 <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   1a502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   1a504:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   1a506:	07db      	lsls	r3, r3, #31
   1a508:	d519      	bpl.n	1a53e <rpmsg_virtio_ns_callback+0x80>
		if (_ept)
   1a50a:	b960      	cbnz	r0, 1a526 <rpmsg_virtio_ns_callback+0x68>
   1a50c:	4630      	mov	r0, r6
   1a50e:	f7ff ffad 	bl	1a46c <k_sem_give>
		if (rdev->ns_unbind_cb)
   1a512:	6f6b      	ldr	r3, [r5, #116]	; 0x74
			if (rdev->ns_bind_cb)
   1a514:	b11b      	cbz	r3, 1a51e <rpmsg_virtio_ns_callback+0x60>
				rdev->ns_bind_cb(rdev, name, dest);
   1a516:	4642      	mov	r2, r8
   1a518:	4669      	mov	r1, sp
   1a51a:	4628      	mov	r0, r5
   1a51c:	4798      	blx	r3
}
   1a51e:	2000      	movs	r0, #0
   1a520:	b008      	add	sp, #32
   1a522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			_ept->dest_addr = RPMSG_ADDR_ANY;
   1a526:	f04f 33ff 	mov.w	r3, #4294967295
   1a52a:	6283      	str	r3, [r0, #40]	; 0x28
   1a52c:	4630      	mov	r0, r6
   1a52e:	f7ff ff9d 	bl	1a46c <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   1a532:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1a534:	2b00      	cmp	r3, #0
   1a536:	d0ec      	beq.n	1a512 <rpmsg_virtio_ns_callback+0x54>
			_ept->ns_unbind_cb(_ept);
   1a538:	4620      	mov	r0, r4
   1a53a:	4798      	blx	r3
   1a53c:	e7e9      	b.n	1a512 <rpmsg_virtio_ns_callback+0x54>
		if (!_ept) {
   1a53e:	b920      	cbnz	r0, 1a54a <rpmsg_virtio_ns_callback+0x8c>
   1a540:	4630      	mov	r0, r6
   1a542:	f7ff ff93 	bl	1a46c <k_sem_give>
			if (rdev->ns_bind_cb)
   1a546:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   1a548:	e7e4      	b.n	1a514 <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = dest;
   1a54a:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
   1a54e:	4630      	mov	r0, r6
   1a550:	f7ff ff8c 	bl	1a46c <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   1a554:	e7e3      	b.n	1a51e <rpmsg_virtio_ns_callback+0x60>

0001a556 <rpmsg_virtio_get_rx_buffer>:
{
   1a556:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   1a558:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
   1a55c:	4613      	mov	r3, r2
   1a55e:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_HOST) {
   1a560:	b925      	cbnz	r5, 1a56c <rpmsg_virtio_get_rx_buffer+0x16>
}
   1a562:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   1a564:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   1a568:	f7ff bde3 	b.w	1a132 <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   1a56c:	2d01      	cmp	r5, #1
   1a56e:	d106      	bne.n	1a57e <rpmsg_virtio_get_rx_buffer+0x28>
}
   1a570:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   1a572:	460a      	mov	r2, r1
   1a574:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   1a578:	4619      	mov	r1, r3
   1a57a:	f7ff be19 	b.w	1a1b0 <virtqueue_get_available_buffer>
}
   1a57e:	2000      	movs	r0, #0
   1a580:	bc30      	pop	{r4, r5}
   1a582:	4770      	bx	lr

0001a584 <rpmsg_virtio_return_buffer>:
{
   1a584:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1a586:	460c      	mov	r4, r1
   1a588:	4619      	mov	r1, r3
   1a58a:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
   1a58e:	699d      	ldr	r5, [r3, #24]
	if (role == RPMSG_HOST) {
   1a590:	b95d      	cbnz	r5, 1a5aa <rpmsg_virtio_return_buffer+0x26>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   1a592:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   1a594:	e9cd 4202 	strd	r4, r2, [sp, #8]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   1a598:	2301      	movs	r3, #1
   1a59a:	462a      	mov	r2, r5
   1a59c:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   1a5a0:	a902      	add	r1, sp, #8
   1a5a2:	f7ff fd6a 	bl	1a07a <virtqueue_add_buffer>
}
   1a5a6:	b004      	add	sp, #16
   1a5a8:	bd70      	pop	{r4, r5, r6, pc}
	if (role == RPMSG_REMOTE) {
   1a5aa:	2d01      	cmp	r5, #1
   1a5ac:	d1fb      	bne.n	1a5a6 <rpmsg_virtio_return_buffer+0x22>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   1a5ae:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
}
   1a5b2:	b004      	add	sp, #16
   1a5b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   1a5b8:	f7fa ba2a 	b.w	14a10 <virtqueue_add_consumed_buffer>

0001a5bc <rpmsg_virtio_rx_callback>:
{
   1a5bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   1a5c0:	6803      	ldr	r3, [r0, #0]
   1a5c2:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	metal_mutex_acquire(&rdev->lock);
   1a5c4:	f107 0658 	add.w	r6, r7, #88	; 0x58
	__metal_mutex_acquire(mutex);
   1a5c8:	4630      	mov	r0, r6
   1a5ca:	f7ff ff51 	bl	1a470 <__metal_mutex_acquire>
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1a5ce:	4638      	mov	r0, r7
   1a5d0:	f10d 020a 	add.w	r2, sp, #10
   1a5d4:	a903      	add	r1, sp, #12
   1a5d6:	f7ff ffbe 	bl	1a556 <rpmsg_virtio_get_rx_buffer>
   1a5da:	4604      	mov	r4, r0
   1a5dc:	4630      	mov	r0, r6
   1a5de:	f7ff ff45 	bl	1a46c <k_sem_give>
	while (rp_hdr) {
   1a5e2:	2c00      	cmp	r4, #0
   1a5e4:	d041      	beq.n	1a66a <rpmsg_virtio_rx_callback+0xae>
		rp_hdr->reserved = idx;
   1a5e6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1a5ea:	4630      	mov	r0, r6
   1a5ec:	60a3      	str	r3, [r4, #8]
   1a5ee:	f7ff ff3f 	bl	1a470 <__metal_mutex_acquire>
			     rpmsg_ns_unbind_cb ns_unbind_cb);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   1a5f2:	f04f 33ff 	mov.w	r3, #4294967295
   1a5f6:	2100      	movs	r1, #0
   1a5f8:	4638      	mov	r0, r7
   1a5fa:	6862      	ldr	r2, [r4, #4]
   1a5fc:	f7ff fedc 	bl	1a3b8 <rpmsg_get_endpoint>
   1a600:	4605      	mov	r5, r0
   1a602:	4630      	mov	r0, r6
   1a604:	f7ff ff32 	bl	1a46c <k_sem_give>
		if (ept) {
   1a608:	b17d      	cbz	r5, 1a62a <rpmsg_virtio_rx_callback+0x6e>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1a60a:	6aab      	ldr	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1a60c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1a60e:	3301      	adds	r3, #1
				ept->dest_addr = rp_hdr->src;
   1a610:	bf08      	it	eq
   1a612:	6823      	ldreq	r3, [r4, #0]
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1a614:	4628      	mov	r0, r5
				ept->dest_addr = rp_hdr->src;
   1a616:	bf08      	it	eq
   1a618:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1a61a:	6823      	ldr	r3, [r4, #0]
   1a61c:	89a2      	ldrh	r2, [r4, #12]
   1a61e:	9100      	str	r1, [sp, #0]
   1a620:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   1a624:	f104 0110 	add.w	r1, r4, #16
   1a628:	47c0      	blx	r8
   1a62a:	4630      	mov	r0, r6
   1a62c:	f7ff ff20 	bl	1a470 <__metal_mutex_acquire>
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
   1a630:	68a3      	ldr	r3, [r4, #8]
   1a632:	2b00      	cmp	r3, #0
   1a634:	db06      	blt.n	1a644 <rpmsg_virtio_rx_callback+0x88>
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1a636:	4621      	mov	r1, r4
   1a638:	4638      	mov	r0, r7
   1a63a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1a63e:	9a03      	ldr	r2, [sp, #12]
   1a640:	f7ff ffa0 	bl	1a584 <rpmsg_virtio_return_buffer>
		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1a644:	4638      	mov	r0, r7
   1a646:	f10d 020a 	add.w	r2, sp, #10
   1a64a:	a903      	add	r1, sp, #12
   1a64c:	f7ff ff83 	bl	1a556 <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   1a650:	4604      	mov	r4, r0
   1a652:	b118      	cbz	r0, 1a65c <rpmsg_virtio_rx_callback+0xa0>
   1a654:	4630      	mov	r0, r6
   1a656:	f7ff ff09 	bl	1a46c <k_sem_give>
	while (rp_hdr) {
   1a65a:	e7c4      	b.n	1a5e6 <rpmsg_virtio_rx_callback+0x2a>
			virtqueue_kick(rvdev->rvq);
   1a65c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   1a660:	f7ff fdf8 	bl	1a254 <virtqueue_kick>
   1a664:	4630      	mov	r0, r6
   1a666:	f7ff ff01 	bl	1a46c <k_sem_give>
}
   1a66a:	b004      	add	sp, #16
   1a66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a670 <rpmsg_virtio_release_rx_buffer>:
{
   1a670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a672:	4604      	mov	r4, r0
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   1a674:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   1a678:	f100 0758 	add.w	r7, r0, #88	; 0x58
   1a67c:	4638      	mov	r0, r7
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   1a67e:	b2b6      	uxth	r6, r6
{
   1a680:	460d      	mov	r5, r1
   1a682:	f7ff fef5 	bl	1a470 <__metal_mutex_acquire>
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   1a686:	4631      	mov	r1, r6
   1a688:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   1a68c:	f7ff fd8b 	bl	1a1a6 <virtqueue_get_buffer_length>
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1a690:	4633      	mov	r3, r6
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   1a692:	4602      	mov	r2, r0
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1a694:	f1a5 0110 	sub.w	r1, r5, #16
   1a698:	4620      	mov	r0, r4
   1a69a:	f7ff ff73 	bl	1a584 <rpmsg_virtio_return_buffer>
	virtqueue_kick(rvdev->rvq);
   1a69e:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   1a6a2:	f7ff fdd7 	bl	1a254 <virtqueue_kick>
   1a6a6:	4638      	mov	r0, r7
}
   1a6a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1a6ac:	f7ff bede 	b.w	1a46c <k_sem_give>

0001a6b0 <rpmsg_virtio_send_offchannel_nocopy>:
{
   1a6b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	hdr = RPMSG_LOCATE_HDR(data);
   1a6b4:	f1a3 0610 	sub.w	r6, r3, #16
	idx = hdr->reserved;
   1a6b8:	f853 5c08 	ldr.w	r5, [r3, #-8]
	rp_hdr.reserved = 0;
   1a6bc:	2300      	movs	r3, #0
{
   1a6be:	b088      	sub	sp, #32
	rp_hdr.reserved = 0;
   1a6c0:	9306      	str	r3, [sp, #24]
	rp_hdr.flags = 0;
   1a6c2:	f8ad 301e 	strh.w	r3, [sp, #30]
{
   1a6c6:	4604      	mov	r4, r0
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   1a6c8:	2310      	movs	r3, #16
	rp_hdr.src = src;
   1a6ca:	e9cd 1204 	strd	r1, r2, [sp, #16]
{
   1a6ce:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	io = rvdev->shbuf_io;
   1a6d0:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
	rp_hdr.len = len;
   1a6d4:	f8ad 701c 	strh.w	r7, [sp, #28]
   1a6d8:	6801      	ldr	r1, [r0, #0]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   1a6da:	f8d0 c008 	ldr.w	ip, [r0, #8]
   1a6de:	1a71      	subs	r1, r6, r1
   1a6e0:	eb0d 0203 	add.w	r2, sp, r3
   1a6e4:	4561      	cmp	r1, ip
   1a6e6:	bf28      	it	cs
   1a6e8:	f04f 31ff 	movcs.w	r1, #4294967295
	metal_mutex_acquire(&rdev->lock);
   1a6ec:	f104 0858 	add.w	r8, r4, #88	; 0x58
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   1a6f0:	f7ff fbe3 	bl	19eba <metal_io_block_write>
   1a6f4:	4640      	mov	r0, r8
   1a6f6:	f7ff febb 	bl	1a470 <__metal_mutex_acquire>
   1a6fa:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	idx = hdr->reserved;
   1a6fe:	b2ad      	uxth	r5, r5
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_HOST)
   1a700:	699b      	ldr	r3, [r3, #24]
   1a702:	b9cb      	cbnz	r3, 1a738 <rpmsg_virtio_send_offchannel_nocopy+0x88>
		buff_len = rvdev->config.h2r_buf_size;
   1a704:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   1a708:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   1a70c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1a710:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   1a712:	b9c3      	cbnz	r3, 1a746 <rpmsg_virtio_send_offchannel_nocopy+0x96>
		vqbuf.len = len;
   1a714:	e9cd 6202 	strd	r6, r2, [sp, #8]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   1a718:	9600      	str	r6, [sp, #0]
   1a71a:	2201      	movs	r2, #1
   1a71c:	a902      	add	r1, sp, #8
   1a71e:	f7ff fcac 	bl	1a07a <virtqueue_add_buffer>
	virtqueue_kick(rvdev->svq);
   1a722:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1a726:	f7ff fd95 	bl	1a254 <virtqueue_kick>
   1a72a:	4640      	mov	r0, r8
   1a72c:	f7ff fe9e 	bl	1a46c <k_sem_give>
}
   1a730:	4638      	mov	r0, r7
   1a732:	b008      	add	sp, #32
   1a734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
   1a738:	4629      	mov	r1, r5
   1a73a:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1a73e:	f7ff fd32 	bl	1a1a6 <virtqueue_get_buffer_length>
   1a742:	4602      	mov	r2, r0
   1a744:	e7e0      	b.n	1a708 <rpmsg_virtio_send_offchannel_nocopy+0x58>
	if (role == RPMSG_REMOTE) {
   1a746:	2b01      	cmp	r3, #1
   1a748:	d1eb      	bne.n	1a722 <rpmsg_virtio_send_offchannel_nocopy+0x72>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   1a74a:	4629      	mov	r1, r5
   1a74c:	f7fa f960 	bl	14a10 <virtqueue_add_consumed_buffer>
   1a750:	e7e7      	b.n	1a722 <rpmsg_virtio_send_offchannel_nocopy+0x72>

0001a752 <rpmsg_virtio_shm_pool_get_buffer>:
{
   1a752:	b510      	push	{r4, lr}
	if (!shpool || size == 0 || shpool->avail < size)
   1a754:	b148      	cbz	r0, 1a76a <rpmsg_virtio_shm_pool_get_buffer+0x18>
   1a756:	b149      	cbz	r1, 1a76c <rpmsg_virtio_shm_pool_get_buffer+0x1a>
   1a758:	6843      	ldr	r3, [r0, #4]
   1a75a:	428b      	cmp	r3, r1
   1a75c:	d306      	bcc.n	1a76c <rpmsg_virtio_shm_pool_get_buffer+0x1a>
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1a75e:	6882      	ldr	r2, [r0, #8]
   1a760:	6804      	ldr	r4, [r0, #0]
   1a762:	1ad2      	subs	r2, r2, r3
	shpool->avail -= size;
   1a764:	1a5b      	subs	r3, r3, r1
   1a766:	6043      	str	r3, [r0, #4]
	return buffer;
   1a768:	18a0      	adds	r0, r4, r2
}
   1a76a:	bd10      	pop	{r4, pc}
		return NULL;
   1a76c:	2000      	movs	r0, #0
   1a76e:	e7fc      	b.n	1a76a <rpmsg_virtio_shm_pool_get_buffer+0x18>

0001a770 <rpmsg_virtio_get_tx_payload_buffer>:
{
   1a770:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1a774:	4605      	mov	r5, r0
   1a776:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   1a77a:	460e      	mov	r6, r1
	return rvdev->vdev->func->get_status(rvdev->vdev);
   1a77c:	6a03      	ldr	r3, [r0, #32]
   1a77e:	4617      	mov	r7, r2
   1a780:	681b      	ldr	r3, [r3, #0]
   1a782:	4798      	blx	r3
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
   1a784:	0743      	lsls	r3, r0, #29
   1a786:	d403      	bmi.n	1a790 <rpmsg_virtio_get_tx_payload_buffer+0x20>
		return NULL;
   1a788:	2000      	movs	r0, #0
}
   1a78a:	b002      	add	sp, #8
   1a78c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   1a790:	f643 2398 	movw	r3, #15000	; 0x3a98
   1a794:	2f00      	cmp	r7, #0
   1a796:	bf18      	it	ne
   1a798:	461f      	movne	r7, r3
		metal_mutex_acquire(&rdev->lock);
   1a79a:	f105 0858 	add.w	r8, r5, #88	; 0x58
	node = metal_list_first(&rvdev->reclaimer);
   1a79e:	f105 0ab4 	add.w	sl, r5, #180	; 0xb4
   1a7a2:	4640      	mov	r0, r8
   1a7a4:	f7ff fe64 	bl	1a470 <__metal_mutex_acquire>
	return list->next == list;
   1a7a8:	f8d5 40b4 	ldr.w	r4, [r5, #180]	; 0xb4
	return rvdev->vdev->role;
   1a7ac:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
}

static inline struct metal_list *metal_list_first(struct metal_list *list)
{
	return metal_list_is_empty(list) ? NULL : list->next;
   1a7b0:	4554      	cmp	r4, sl
   1a7b2:	f8d3 9018 	ldr.w	r9, [r3, #24]
   1a7b6:	d025      	beq.n	1a804 <rpmsg_virtio_get_tx_payload_buffer+0x94>
	if (node) {
   1a7b8:	b324      	cbz	r4, 1a804 <rpmsg_virtio_get_tx_payload_buffer+0x94>
	node->next->prev = node->prev;
   1a7ba:	e9d4 2300 	ldrd	r2, r3, [r4]
   1a7be:	6053      	str	r3, [r2, #4]
	node->prev->next = node->next;
   1a7c0:	6822      	ldr	r2, [r4, #0]
   1a7c2:	601a      	str	r2, [r3, #0]
	node->next = node;
   1a7c4:	e9c4 4400 	strd	r4, r4, [r4]
		if (role == RPMSG_HOST)
   1a7c8:	f1b9 0f00 	cmp.w	r9, #0
   1a7cc:	d10e      	bne.n	1a7ec <rpmsg_virtio_get_tx_payload_buffer+0x7c>
			*len = rvdev->config.h2r_buf_size;
   1a7ce:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   1a7d2:	6033      	str	r3, [r6, #0]
   1a7d4:	4640      	mov	r0, r8
   1a7d6:	f7ff fe49 	bl	1a46c <k_sem_give>
	rp_hdr->reserved = idx;
   1a7da:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return RPMSG_LOCATE_DATA(rp_hdr);
   1a7de:	f104 0010 	add.w	r0, r4, #16
	rp_hdr->reserved = idx;
   1a7e2:	60a3      	str	r3, [r4, #8]
	*len -= sizeof(struct rpmsg_hdr);
   1a7e4:	6833      	ldr	r3, [r6, #0]
   1a7e6:	3b10      	subs	r3, #16
   1a7e8:	6033      	str	r3, [r6, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
   1a7ea:	e7ce      	b.n	1a78a <rpmsg_virtio_get_tx_payload_buffer+0x1a>
		if (role == RPMSG_REMOTE) {
   1a7ec:	f1b9 0f01 	cmp.w	r9, #1
   1a7f0:	d1f0      	bne.n	1a7d4 <rpmsg_virtio_get_tx_payload_buffer+0x64>
			*idx = r_desc->idx;
   1a7f2:	8921      	ldrh	r1, [r4, #8]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   1a7f4:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
			*idx = r_desc->idx;
   1a7f8:	f8ad 1006 	strh.w	r1, [sp, #6]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   1a7fc:	f7ff fcd3 	bl	1a1a6 <virtqueue_get_buffer_length>
   1a800:	6030      	str	r0, [r6, #0]
   1a802:	e7e7      	b.n	1a7d4 <rpmsg_virtio_get_tx_payload_buffer+0x64>
	} else if (role == RPMSG_HOST) {
   1a804:	f1b9 0f00 	cmp.w	r9, #0
   1a808:	d12a      	bne.n	1a860 <rpmsg_virtio_get_tx_payload_buffer+0xf0>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   1a80a:	4631      	mov	r1, r6
   1a80c:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   1a810:	f10d 0206 	add.w	r2, sp, #6
   1a814:	f7ff fc8d 	bl	1a132 <virtqueue_get_buffer>
		if (!data && rvdev->svq->vq_free_cnt) {
   1a818:	4604      	mov	r4, r0
   1a81a:	2800      	cmp	r0, #0
   1a81c:	d1da      	bne.n	1a7d4 <rpmsg_virtio_get_tx_payload_buffer+0x64>
   1a81e:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
   1a822:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1a824:	b953      	cbnz	r3, 1a83c <rpmsg_virtio_get_tx_payload_buffer+0xcc>
   1a826:	4640      	mov	r0, r8
   1a828:	f7ff fe20 	bl	1a46c <k_sem_give>
		if (rp_hdr || !tick_count)
   1a82c:	2f00      	cmp	r7, #0
   1a82e:	d0ab      	beq.n	1a788 <rpmsg_virtio_get_tx_payload_buffer+0x18>
	return z_impl_k_sleep(timeout);
   1a830:	2021      	movs	r0, #33	; 0x21
   1a832:	2100      	movs	r1, #0
   1a834:	f7fb fc04 	bl	16040 <z_impl_k_sleep>
		tick_count--;
   1a838:	3f01      	subs	r7, #1
		metal_mutex_acquire(&rdev->lock);
   1a83a:	e7b2      	b.n	1a7a2 <rpmsg_virtio_get_tx_payload_buffer+0x32>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   1a83c:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
   1a840:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
   1a844:	f7ff ff85 	bl	1a752 <rpmsg_virtio_shm_pool_get_buffer>
   1a848:	4604      	mov	r4, r0
			*len = rvdev->config.h2r_buf_size;
   1a84a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
			*idx = 0;
   1a84e:	f8ad 9006 	strh.w	r9, [sp, #6]
			*len = rvdev->config.h2r_buf_size;
   1a852:	6033      	str	r3, [r6, #0]
   1a854:	4640      	mov	r0, r8
   1a856:	f7ff fe09 	bl	1a46c <k_sem_give>
		if (rp_hdr || !tick_count)
   1a85a:	2c00      	cmp	r4, #0
   1a85c:	d0e6      	beq.n	1a82c <rpmsg_virtio_get_tx_payload_buffer+0xbc>
   1a85e:	e7bc      	b.n	1a7da <rpmsg_virtio_get_tx_payload_buffer+0x6a>
	} else if (role == RPMSG_REMOTE) {
   1a860:	f1b9 0f01 	cmp.w	r9, #1
   1a864:	d1df      	bne.n	1a826 <rpmsg_virtio_get_tx_payload_buffer+0xb6>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   1a866:	4632      	mov	r2, r6
   1a868:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   1a86c:	f10d 0106 	add.w	r1, sp, #6
   1a870:	f7ff fc9e 	bl	1a1b0 <virtqueue_get_available_buffer>
   1a874:	4604      	mov	r4, r0
   1a876:	e7ed      	b.n	1a854 <rpmsg_virtio_get_tx_payload_buffer+0xe4>

0001a878 <rpmsg_virtio_init_shm_pool>:
	if (!shpool || !shb || size == 0)
   1a878:	b120      	cbz	r0, 1a884 <rpmsg_virtio_init_shm_pool+0xc>
   1a87a:	b119      	cbz	r1, 1a884 <rpmsg_virtio_init_shm_pool+0xc>
   1a87c:	b112      	cbz	r2, 1a884 <rpmsg_virtio_init_shm_pool+0xc>
	shpool->avail = size;
   1a87e:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   1a882:	6001      	str	r1, [r0, #0]
}
   1a884:	4770      	bx	lr

0001a886 <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
   1a886:	b510      	push	{r4, lr}
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	if (rvdev) {
   1a888:	4604      	mov	r4, r0
   1a88a:	b918      	cbnz	r0, 1a894 <rpmsg_deinit_vdev+0xe>
		rvdev->rvq = 0;
		rvdev->svq = 0;

		metal_mutex_deinit(&rdev->lock);
	}
}
   1a88c:	bd10      	pop	{r4, pc}
			rpmsg_destroy_ept(ept);
   1a88e:	3834      	subs	r0, #52	; 0x34
   1a890:	f7ff fdcd 	bl	1a42e <rpmsg_destroy_ept>
	return list->next == list;
   1a894:	6820      	ldr	r0, [r4, #0]
		while (!metal_list_is_empty(&rdev->endpoints)) {
   1a896:	4284      	cmp	r4, r0
   1a898:	d1f9      	bne.n	1a88e <rpmsg_deinit_vdev+0x8>
		rvdev->rvq = 0;
   1a89a:	2300      	movs	r3, #0
		rvdev->svq = 0;
   1a89c:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
}
   1a8a0:	e7f4      	b.n	1a88c <rpmsg_deinit_vdev+0x6>

0001a8a2 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   1a8a2:	4770      	bx	lr

0001a8a4 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1a8a4:	b140      	cbz	r0, 1a8b8 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1a8a6:	68c3      	ldr	r3, [r0, #12]
   1a8a8:	7858      	ldrb	r0, [r3, #1]
   1a8aa:	f010 0001 	ands.w	r0, r0, #1
   1a8ae:	bf1e      	ittt	ne
   1a8b0:	7818      	ldrbne	r0, [r3, #0]
   1a8b2:	fab0 f080 	clzne	r0, r0
   1a8b6:	0940      	lsrne	r0, r0, #5
}
   1a8b8:	4770      	bx	lr

0001a8ba <z_early_memset>:
	(void) memset(dst, c, n);
   1a8ba:	f7fd bc83 	b.w	181c4 <memset>

0001a8be <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   1a8be:	f7fd bc76 	b.w	181ae <memcpy>

0001a8c2 <k_heap_init>:
{
   1a8c2:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   1a8c4:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1a8c8:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1a8cc:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1a8ce:	f7fc b918 	b.w	16b02 <sys_heap_init>

0001a8d2 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1a8d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a8d6:	b085      	sub	sp, #20
   1a8d8:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   1a8dc:	4607      	mov	r7, r0
   1a8de:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1a8e0:	4650      	mov	r0, sl
   1a8e2:	4621      	mov	r1, r4
{
   1a8e4:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1a8e6:	f000 fbc0 	bl	1b06a <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1a8ea:	f1b4 3fff 	cmp.w	r4, #4294967295
   1a8ee:	bf08      	it	eq
   1a8f0:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1a8f4:	4605      	mov	r5, r0
   1a8f6:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1a8f8:	bf04      	itt	eq
   1a8fa:	f04f 35ff 	moveq.w	r5, #4294967295
   1a8fe:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1a902:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   1a906:	f04f 0320 	mov.w	r3, #32
   1a90a:	f3ef 8411 	mrs	r4, BASEPRI
   1a90e:	f383 8812 	msr	BASEPRI_MAX, r3
   1a912:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1a916:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1a91a:	464a      	mov	r2, r9
   1a91c:	4641      	mov	r1, r8
   1a91e:	4638      	mov	r0, r7
   1a920:	f7fc f888 	bl	16a34 <sys_heap_aligned_alloc>
   1a924:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   1a926:	f7fb fd5d 	bl	163e4 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1a92a:	9b03      	ldr	r3, [sp, #12]
   1a92c:	b13b      	cbz	r3, 1a93e <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   1a92e:	f384 8811 	msr	BASEPRI, r4
   1a932:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1a936:	4618      	mov	r0, r3
   1a938:	b005      	add	sp, #20
   1a93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   1a93e:	1a28      	subs	r0, r5, r0
   1a940:	eb66 0101 	sbc.w	r1, r6, r1
   1a944:	2801      	cmp	r0, #1
   1a946:	f171 0200 	sbcs.w	r2, r1, #0
   1a94a:	dbf0      	blt.n	1a92e <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1a94c:	e9cd 0100 	strd	r0, r1, [sp]
   1a950:	465a      	mov	r2, fp
   1a952:	4621      	mov	r1, r4
   1a954:	4650      	mov	r0, sl
   1a956:	f7fb f9f3 	bl	15d40 <z_pend_curr>
	__asm__ volatile(
   1a95a:	f04f 0320 	mov.w	r3, #32
   1a95e:	f3ef 8411 	mrs	r4, BASEPRI
   1a962:	f383 8812 	msr	BASEPRI_MAX, r3
   1a966:	f3bf 8f6f 	isb	sy
	return k;
   1a96a:	e7d6      	b.n	1a91a <k_heap_aligned_alloc+0x48>

0001a96c <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1a96c:	b538      	push	{r3, r4, r5, lr}
   1a96e:	4604      	mov	r4, r0
   1a970:	f04f 0320 	mov.w	r3, #32
   1a974:	f3ef 8511 	mrs	r5, BASEPRI
   1a978:	f383 8812 	msr	BASEPRI_MAX, r3
   1a97c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   1a980:	f7fc f820 	bl	169c4 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1a984:	f104 000c 	add.w	r0, r4, #12
   1a988:	f000 fb0c 	bl	1afa4 <z_unpend_all>
   1a98c:	b130      	cbz	r0, 1a99c <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   1a98e:	4629      	mov	r1, r5
   1a990:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1a994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   1a998:	f7fb ba36 	b.w	15e08 <z_reschedule>
	__asm__ volatile(
   1a99c:	f385 8811 	msr	BASEPRI, r5
   1a9a0:	f3bf 8f6f 	isb	sy
}
   1a9a4:	bd38      	pop	{r3, r4, r5, pc}

0001a9a6 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1a9a6:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   1a9aa:	4313      	orrs	r3, r2
   1a9ac:	f013 0303 	ands.w	r3, r3, #3
   1a9b0:	d10c      	bne.n	1a9cc <create_free_list+0x26>
	slab->free_list = NULL;
   1a9b2:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1a9b4:	6881      	ldr	r1, [r0, #8]
   1a9b6:	4299      	cmp	r1, r3
   1a9b8:	d801      	bhi.n	1a9be <create_free_list+0x18>
	return 0;
   1a9ba:	2000      	movs	r0, #0
   1a9bc:	4770      	bx	lr
		*(char **)p = slab->free_list;
   1a9be:	6941      	ldr	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1a9c0:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   1a9c2:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   1a9c4:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   1a9c6:	6142      	str	r2, [r0, #20]
		p += slab->block_size;
   1a9c8:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   1a9ca:	e7f3      	b.n	1a9b4 <create_free_list+0xe>
		return -EINVAL;
   1a9cc:	f06f 0015 	mvn.w	r0, #21
}
   1a9d0:	4770      	bx	lr

0001a9d2 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1a9d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a9d4:	4604      	mov	r4, r0
   1a9d6:	460d      	mov	r5, r1
	__asm__ volatile(
   1a9d8:	f04f 0320 	mov.w	r3, #32
   1a9dc:	f3ef 8611 	mrs	r6, BASEPRI
   1a9e0:	f383 8812 	msr	BASEPRI_MAX, r3
   1a9e4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1a9e8:	6947      	ldr	r7, [r0, #20]
   1a9ea:	b977      	cbnz	r7, 1aa0a <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1a9ec:	f000 fa90 	bl	1af10 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1a9f0:	b158      	cbz	r0, 1aa0a <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1a9f2:	682a      	ldr	r2, [r5, #0]
   1a9f4:	67c7      	str	r7, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1a9f6:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   1a9f8:	f000 fa2b 	bl	1ae52 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1a9fc:	4631      	mov	r1, r6
   1a9fe:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1aa02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   1aa06:	f7fb b9ff 	b.w	15e08 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1aa0a:	682b      	ldr	r3, [r5, #0]
   1aa0c:	6962      	ldr	r2, [r4, #20]
   1aa0e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1aa10:	682b      	ldr	r3, [r5, #0]
   1aa12:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1aa14:	69a3      	ldr	r3, [r4, #24]
   1aa16:	3b01      	subs	r3, #1
   1aa18:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1aa1a:	f386 8811 	msr	BASEPRI, r6
   1aa1e:	f3bf 8f6f 	isb	sy
}
   1aa22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001aa24 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1aa24:	f3ef 8005 	mrs	r0, IPSR
}
   1aa28:	3800      	subs	r0, #0
   1aa2a:	bf18      	it	ne
   1aa2c:	2001      	movne	r0, #1
   1aa2e:	4770      	bx	lr

0001aa30 <z_impl_k_thread_name_set>:
}
   1aa30:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1aa34:	4770      	bx	lr

0001aa36 <k_thread_name_get>:
}
   1aa36:	2000      	movs	r0, #0
   1aa38:	4770      	bx	lr

0001aa3a <z_impl_k_thread_start>:
	z_sched_start(thread);
   1aa3a:	f7fb b9f7 	b.w	15e2c <z_sched_start>

0001aa3e <z_pm_save_idle_exit>:
{
   1aa3e:	b508      	push	{r3, lr}
	pm_system_resume();
   1aa40:	f7f0 fa78 	bl	af34 <pm_system_resume>
}
   1aa44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   1aa48:	f7ff b8e1 	b.w	19c0e <sys_clock_idle_exit>

0001aa4c <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   1aa4c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1aa50:	428b      	cmp	r3, r1
   1aa52:	d001      	beq.n	1aa58 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   1aa54:	f7fb b992 	b.w	15d7c <z_set_prio>
}
   1aa58:	2000      	movs	r0, #0
   1aa5a:	4770      	bx	lr

0001aa5c <z_impl_k_mutex_init>:
{
   1aa5c:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1aa5e:	2000      	movs	r0, #0
   1aa60:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   1aa64:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   1aa68:	4770      	bx	lr

0001aa6a <queue_insert>:
{
   1aa6a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1aa6e:	4699      	mov	r9, r3
   1aa70:	4604      	mov	r4, r0
   1aa72:	460d      	mov	r5, r1
   1aa74:	4690      	mov	r8, r2
   1aa76:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1aa7a:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1aa7e:	f04f 0220 	mov.w	r2, #32
   1aa82:	f3ef 8711 	mrs	r7, BASEPRI
   1aa86:	f382 8812 	msr	BASEPRI_MAX, r2
   1aa8a:	f3bf 8f6f 	isb	sy
	if (is_append) {
   1aa8e:	b103      	cbz	r3, 1aa92 <queue_insert+0x28>
	return list->tail;
   1aa90:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1aa92:	4630      	mov	r0, r6
   1aa94:	f000 fa3c 	bl	1af10 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1aa98:	b158      	cbz	r0, 1aab2 <queue_insert+0x48>
   1aa9a:	2300      	movs	r3, #0
   1aa9c:	f8c0 8014 	str.w	r8, [r0, #20]
   1aaa0:	67c3      	str	r3, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   1aaa2:	f000 f9d6 	bl	1ae52 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   1aaa6:	4630      	mov	r0, r6
   1aaa8:	4639      	mov	r1, r7
   1aaaa:	f7fb f9ad 	bl	15e08 <z_reschedule>
		return 0;
   1aaae:	2000      	movs	r0, #0
   1aab0:	e00c      	b.n	1aacc <queue_insert+0x62>
	if (alloc) {
   1aab2:	f1b9 0f00 	cmp.w	r9, #0
   1aab6:	d01b      	beq.n	1aaf0 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   1aab8:	2108      	movs	r1, #8
   1aaba:	f7fb fde1 	bl	16680 <z_thread_aligned_alloc>
		if (anode == NULL) {
   1aabe:	b938      	cbnz	r0, 1aad0 <queue_insert+0x66>
	__asm__ volatile(
   1aac0:	f387 8811 	msr	BASEPRI, r7
   1aac4:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1aac8:	f06f 000b 	mvn.w	r0, #11
}
   1aacc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   1aad0:	2201      	movs	r2, #1
		anode->data = data;
   1aad2:	f8c0 8004 	str.w	r8, [r0, #4]
   1aad6:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1aad8:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1aada:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   1aade:	b95d      	cbnz	r5, 1aaf8 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1aae0:	6822      	ldr	r2, [r4, #0]
   1aae2:	430a      	orrs	r2, r1
   1aae4:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1aae6:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   1aae8:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1aaea:	b96a      	cbnz	r2, 1ab08 <queue_insert+0x9e>
	list->tail = node;
   1aaec:	6060      	str	r0, [r4, #4]
}
   1aaee:	e00b      	b.n	1ab08 <queue_insert+0x9e>
}
   1aaf0:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   1aaf2:	f8c8 9000 	str.w	r9, [r8]
}
   1aaf6:	e7ef      	b.n	1aad8 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1aaf8:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1aafa:	2a03      	cmp	r2, #3
   1aafc:	d810      	bhi.n	1ab20 <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1aafe:	6001      	str	r1, [r0, #0]
	return list->tail;
   1ab00:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1ab02:	b939      	cbnz	r1, 1ab14 <queue_insert+0xaa>
	list->head = node;
   1ab04:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1ab08:	2104      	movs	r1, #4
   1ab0a:	f104 0010 	add.w	r0, r4, #16
   1ab0e:	f000 fc37 	bl	1b380 <z_handle_obj_poll_events>
   1ab12:	e7c8      	b.n	1aaa6 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1ab14:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1ab16:	f002 0203 	and.w	r2, r2, #3
   1ab1a:	4302      	orrs	r2, r0
   1ab1c:	600a      	str	r2, [r1, #0]
   1ab1e:	e7e5      	b.n	1aaec <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1ab20:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1ab24:	430a      	orrs	r2, r1
   1ab26:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1ab28:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1ab2a:	f002 0203 	and.w	r2, r2, #3
   1ab2e:	ea40 0302 	orr.w	r3, r0, r2
   1ab32:	602b      	str	r3, [r5, #0]
}
   1ab34:	e7e8      	b.n	1ab08 <queue_insert+0x9e>

0001ab36 <z_queue_node_peek>:
{
   1ab36:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1ab38:	4604      	mov	r4, r0
   1ab3a:	b130      	cbz	r0, 1ab4a <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1ab3c:	6802      	ldr	r2, [r0, #0]
   1ab3e:	0793      	lsls	r3, r2, #30
   1ab40:	d003      	beq.n	1ab4a <z_queue_node_peek+0x14>
		ret = anode->data;
   1ab42:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1ab44:	b109      	cbz	r1, 1ab4a <z_queue_node_peek+0x14>
			k_free(anode);
   1ab46:	f000 fc41 	bl	1b3cc <k_free>
}
   1ab4a:	4620      	mov	r0, r4
   1ab4c:	bd10      	pop	{r4, pc}

0001ab4e <z_impl_k_queue_init>:
	list->head = NULL;
   1ab4e:	2300      	movs	r3, #0
	list->tail = NULL;
   1ab50:	e9c0 3300 	strd	r3, r3, [r0]
   1ab54:	f100 0308 	add.w	r3, r0, #8
   1ab58:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   1ab5c:	f100 0310 	add.w	r3, r0, #16
   1ab60:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   1ab64:	4770      	bx	lr

0001ab66 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   1ab66:	2301      	movs	r3, #1
{
   1ab68:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1ab6a:	9300      	str	r3, [sp, #0]
   1ab6c:	2300      	movs	r3, #0
{
   1ab6e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1ab70:	4619      	mov	r1, r3
   1ab72:	f7ff ff7a 	bl	1aa6a <queue_insert>
}
   1ab76:	b003      	add	sp, #12
   1ab78:	f85d fb04 	ldr.w	pc, [sp], #4

0001ab7c <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   1ab7c:	2300      	movs	r3, #0
{
   1ab7e:	b507      	push	{r0, r1, r2, lr}
   1ab80:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1ab82:	9300      	str	r3, [sp, #0]
   1ab84:	4619      	mov	r1, r3
   1ab86:	f7ff ff70 	bl	1aa6a <queue_insert>
}
   1ab8a:	b003      	add	sp, #12
   1ab8c:	f85d fb04 	ldr.w	pc, [sp], #4

0001ab90 <z_impl_k_queue_peek_head>:
	return true;
}

void *z_impl_k_queue_peek_head(struct k_queue *queue)
{
	void *ret = z_queue_node_peek(sys_sflist_peek_head(&queue->data_q), false);
   1ab90:	2100      	movs	r1, #0
   1ab92:	6800      	ldr	r0, [r0, #0]
   1ab94:	f7ff bfcf 	b.w	1ab36 <z_queue_node_peek>

0001ab98 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1ab98:	b15a      	cbz	r2, 1abb2 <z_impl_k_sem_init+0x1a>
   1ab9a:	428a      	cmp	r2, r1
   1ab9c:	d309      	bcc.n	1abb2 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1ab9e:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1aba2:	e9c0 1202 	strd	r1, r2, [r0, #8]
   1aba6:	e9c0 0000 	strd	r0, r0, [r0]
   1abaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1abae:	2000      	movs	r0, #0
   1abb0:	4770      	bx	lr
		return -EINVAL;
   1abb2:	f06f 0015 	mvn.w	r0, #21
}
   1abb6:	4770      	bx	lr

0001abb8 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   1abb8:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   1abba:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   1abbc:	408b      	lsls	r3, r1
   1abbe:	ea22 0303 	bic.w	r3, r2, r3
   1abc2:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   1abc4:	fa22 f001 	lsr.w	r0, r2, r1
}
   1abc8:	f000 0001 	and.w	r0, r0, #1
   1abcc:	4770      	bx	lr

0001abce <unschedule_locked>:
{
   1abce:	b510      	push	{r4, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1abd0:	2103      	movs	r1, #3
{
   1abd2:	4604      	mov	r4, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1abd4:	300c      	adds	r0, #12
   1abd6:	f7ff ffef 	bl	1abb8 <flag_test_and_clear>
   1abda:	b130      	cbz	r0, 1abea <unschedule_locked+0x1c>
		ret = z_abort_timeout(&dwork->timeout) == 0;
   1abdc:	f104 0010 	add.w	r0, r4, #16
   1abe0:	f000 fa13 	bl	1b00a <z_abort_timeout>
   1abe4:	fab0 f080 	clz	r0, r0
   1abe8:	0940      	lsrs	r0, r0, #5
}
   1abea:	bd10      	pop	{r4, pc}

0001abec <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   1abec:	b120      	cbz	r0, 1abf8 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1abee:	2200      	movs	r2, #0
   1abf0:	3090      	adds	r0, #144	; 0x90
   1abf2:	4611      	mov	r1, r2
   1abf4:	f000 b9e6 	b.w	1afc4 <z_sched_wake>
}
   1abf8:	4770      	bx	lr

0001abfa <cancel_async_locked>:
{
   1abfa:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1abfc:	68c3      	ldr	r3, [r0, #12]
{
   1abfe:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1ac00:	f3c3 0640 	ubfx	r6, r3, #1, #1
   1ac04:	079b      	lsls	r3, r3, #30
   1ac06:	d416      	bmi.n	1ac36 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   1ac08:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   1ac0a:	2102      	movs	r1, #2
   1ac0c:	300c      	adds	r0, #12
   1ac0e:	f7ff ffd3 	bl	1abb8 <flag_test_and_clear>
   1ac12:	b180      	cbz	r0, 1ac36 <cancel_async_locked+0x3c>
	return list->head;
   1ac14:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ac18:	b16a      	cbz	r2, 1ac36 <cancel_async_locked+0x3c>
   1ac1a:	4294      	cmp	r4, r2
   1ac1c:	d11d      	bne.n	1ac5a <cancel_async_locked+0x60>
	return node->next;
   1ac1e:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ac20:	b99e      	cbnz	r6, 1ac4a <cancel_async_locked+0x50>
   1ac22:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	list->head = node;
   1ac26:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
Z_GENLIST_REMOVE(slist, snode)
   1ac2a:	429c      	cmp	r4, r3
   1ac2c:	d101      	bne.n	1ac32 <cancel_async_locked+0x38>
	list->tail = node;
   1ac2e:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
	parent->next = child;
   1ac32:	2300      	movs	r3, #0
   1ac34:	6023      	str	r3, [r4, #0]
	return *flagp;
   1ac36:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   1ac38:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   1ac3c:	bf1e      	ittt	ne
   1ac3e:	f043 0302 	orrne.w	r3, r3, #2
   1ac42:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   1ac44:	f040 0002 	orrne.w	r0, r0, #2
}
   1ac48:	bd70      	pop	{r4, r5, r6, pc}
   1ac4a:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ac4c:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
   1ac50:	4294      	cmp	r4, r2
	list->tail = node;
   1ac52:	bf08      	it	eq
   1ac54:	f8c5 608c 	streq.w	r6, [r5, #140]	; 0x8c
}
   1ac58:	e7eb      	b.n	1ac32 <cancel_async_locked+0x38>
	return node->next;
   1ac5a:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ac5c:	6812      	ldr	r2, [r2, #0]
   1ac5e:	e7db      	b.n	1ac18 <cancel_async_locked+0x1e>

0001ac60 <work_timeout>:
{
   1ac60:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1ac62:	4604      	mov	r4, r0
	__asm__ volatile(
   1ac64:	f04f 0320 	mov.w	r3, #32
   1ac68:	f3ef 8511 	mrs	r5, BASEPRI
   1ac6c:	f383 8812 	msr	BASEPRI_MAX, r3
   1ac70:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   1ac74:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1ac76:	f1a0 0610 	sub.w	r6, r0, #16
   1ac7a:	2103      	movs	r1, #3
   1ac7c:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   1ac7e:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1ac80:	f7ff ff9a 	bl	1abb8 <flag_test_and_clear>
   1ac84:	b128      	cbz	r0, 1ac92 <work_timeout+0x32>
		queue = dw->queue;
   1ac86:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   1ac88:	4630      	mov	r0, r6
   1ac8a:	a901      	add	r1, sp, #4
		queue = dw->queue;
   1ac8c:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   1ac8e:	f7fa fddb 	bl	15848 <submit_to_queue_locked>
	__asm__ volatile(
   1ac92:	f385 8811 	msr	BASEPRI, r5
   1ac96:	f3bf 8f6f 	isb	sy
}
   1ac9a:	b002      	add	sp, #8
   1ac9c:	bd70      	pop	{r4, r5, r6, pc}

0001ac9e <k_work_init>:
{
   1ac9e:	b538      	push	{r3, r4, r5, lr}
   1aca0:	4604      	mov	r4, r0
   1aca2:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1aca4:	2210      	movs	r2, #16
   1aca6:	2100      	movs	r1, #0
   1aca8:	f7fd fa8c 	bl	181c4 <memset>
   1acac:	6065      	str	r5, [r4, #4]
}
   1acae:	bd38      	pop	{r3, r4, r5, pc}

0001acb0 <k_work_busy_get>:
	__asm__ volatile(
   1acb0:	f04f 0220 	mov.w	r2, #32
   1acb4:	f3ef 8311 	mrs	r3, BASEPRI
   1acb8:	f382 8812 	msr	BASEPRI_MAX, r2
   1acbc:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   1acc0:	68c0      	ldr	r0, [r0, #12]
   1acc2:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   1acc6:	f383 8811 	msr	BASEPRI, r3
   1acca:	f3bf 8f6f 	isb	sy
}
   1acce:	4770      	bx	lr

0001acd0 <z_work_submit_to_queue>:
{
   1acd0:	b513      	push	{r0, r1, r4, lr}
   1acd2:	9001      	str	r0, [sp, #4]
   1acd4:	4608      	mov	r0, r1
	__asm__ volatile(
   1acd6:	f04f 0320 	mov.w	r3, #32
   1acda:	f3ef 8411 	mrs	r4, BASEPRI
   1acde:	f383 8812 	msr	BASEPRI_MAX, r3
   1ace2:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   1ace6:	a901      	add	r1, sp, #4
   1ace8:	f7fa fdae 	bl	15848 <submit_to_queue_locked>
	__asm__ volatile(
   1acec:	f384 8811 	msr	BASEPRI, r4
   1acf0:	f3bf 8f6f 	isb	sy
}
   1acf4:	b002      	add	sp, #8
   1acf6:	bd10      	pop	{r4, pc}

0001acf8 <k_work_submit_to_queue>:
{
   1acf8:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   1acfa:	f7ff ffe9 	bl	1acd0 <z_work_submit_to_queue>
	if (ret > 0) {
   1acfe:	1e04      	subs	r4, r0, #0
   1ad00:	dd09      	ble.n	1ad16 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   1ad02:	f04f 0320 	mov.w	r3, #32
   1ad06:	f3ef 8011 	mrs	r0, BASEPRI
   1ad0a:	f383 8812 	msr	BASEPRI_MAX, r3
   1ad0e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1ad12:	f000 f931 	bl	1af78 <z_reschedule_irqlock>
}
   1ad16:	4620      	mov	r0, r4
   1ad18:	bd10      	pop	{r4, pc}

0001ad1a <k_work_queue_init>:
{
   1ad1a:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   1ad1c:	22a8      	movs	r2, #168	; 0xa8
   1ad1e:	2100      	movs	r1, #0
   1ad20:	f7fd fa50 	bl	181c4 <memset>
}
   1ad24:	bd08      	pop	{r3, pc}

0001ad26 <k_work_init_delayable>:
{
   1ad26:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   1ad28:	2230      	movs	r2, #48	; 0x30
{
   1ad2a:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   1ad2c:	2100      	movs	r1, #0
{
   1ad2e:	4604      	mov	r4, r0
	*dwork = (struct k_work_delayable){
   1ad30:	f7fd fa48 	bl	181c4 <memset>
   1ad34:	f44f 7380 	mov.w	r3, #256	; 0x100
   1ad38:	6065      	str	r5, [r4, #4]
   1ad3a:	60e3      	str	r3, [r4, #12]
}
   1ad3c:	bd38      	pop	{r3, r4, r5, pc}

0001ad3e <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   1ad3e:	f7ff bfb7 	b.w	1acb0 <k_work_busy_get>

0001ad42 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   1ad42:	b538      	push	{r3, r4, r5, lr}
   1ad44:	4604      	mov	r4, r0
   1ad46:	f04f 0320 	mov.w	r3, #32
   1ad4a:	f3ef 8511 	mrs	r5, BASEPRI
   1ad4e:	f383 8812 	msr	BASEPRI_MAX, r3
   1ad52:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   1ad56:	f7ff ff3a 	bl	1abce <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1ad5a:	4620      	mov	r0, r4
   1ad5c:	f7ff ff4d 	bl	1abfa <cancel_async_locked>
	__asm__ volatile(
   1ad60:	f385 8811 	msr	BASEPRI, r5
   1ad64:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   1ad68:	bd38      	pop	{r3, r4, r5, pc}

0001ad6a <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   1ad6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ad6c:	4604      	mov	r4, r0
   1ad6e:	460d      	mov	r5, r1
	__asm__ volatile(
   1ad70:	f04f 0320 	mov.w	r3, #32
   1ad74:	f3ef 8611 	mrs	r6, BASEPRI
   1ad78:	f383 8812 	msr	BASEPRI_MAX, r3
   1ad7c:	f3bf 8f6f 	isb	sy
	return *flagp;
   1ad80:	68c3      	ldr	r3, [r0, #12]
   1ad82:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   1ad86:	2b00      	cmp	r3, #0
   1ad88:	bf14      	ite	ne
   1ad8a:	2701      	movne	r7, #1
   1ad8c:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   1ad8e:	d105      	bne.n	1ad9c <k_work_cancel_delayable_sync+0x32>
	__asm__ volatile(
   1ad90:	f386 8811 	msr	BASEPRI, r6
   1ad94:	f3bf 8f6f 	isb	sy
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   1ad98:	4638      	mov	r0, r7
   1ad9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	(void)unschedule_locked(dwork);
   1ad9c:	f7ff ff17 	bl	1abce <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1ada0:	4620      	mov	r0, r4
   1ada2:	f7ff ff2a 	bl	1abfa <cancel_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   1ada6:	4629      	mov	r1, r5
   1ada8:	4620      	mov	r0, r4
   1adaa:	f7fa fd2f 	bl	1580c <cancel_sync_locked>
   1adae:	f386 8811 	msr	BASEPRI, r6
   1adb2:	f3bf 8f6f 	isb	sy
	if (need_wait) {
   1adb6:	2800      	cmp	r0, #0
   1adb8:	d0ee      	beq.n	1ad98 <k_work_cancel_delayable_sync+0x2e>
	return z_impl_k_sem_take(sem, timeout);
   1adba:	f04f 32ff 	mov.w	r2, #4294967295
   1adbe:	f04f 33ff 	mov.w	r3, #4294967295
   1adc2:	f105 0008 	add.w	r0, r5, #8
   1adc6:	f7fa fc43 	bl	15650 <z_impl_k_sem_take>
   1adca:	e7e5      	b.n	1ad98 <k_work_cancel_delayable_sync+0x2e>

0001adcc <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   1adcc:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1add0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1add2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1add4:	2300      	movs	r3, #0
	node->prev = NULL;
   1add6:	e9c0 3300 	strd	r3, r3, [r0]
}
   1adda:	4770      	bx	lr

0001addc <unpend_thread_no_timeout>:
{
   1addc:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   1adde:	f7ff fff5 	bl	1adcc <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1ade2:	7b43      	ldrb	r3, [r0, #13]
   1ade4:	f023 0302 	bic.w	r3, r3, #2
   1ade8:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   1adea:	2300      	movs	r3, #0
   1adec:	6083      	str	r3, [r0, #8]
}
   1adee:	bd08      	pop	{r3, pc}

0001adf0 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1adf0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1adf4:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   1adf8:	4283      	cmp	r3, r0
		return b2 - b1;
   1adfa:	bf14      	ite	ne
   1adfc:	1ac0      	subne	r0, r0, r3
	return 0;
   1adfe:	2000      	moveq	r0, #0
}
   1ae00:	4770      	bx	lr

0001ae02 <add_to_waitq_locked>:
{
   1ae02:	b538      	push	{r3, r4, r5, lr}
   1ae04:	4604      	mov	r4, r0
   1ae06:	460d      	mov	r5, r1
	unready_thread(thread);
   1ae08:	f7fa ff3a 	bl	15c80 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1ae0c:	7b63      	ldrb	r3, [r4, #13]
   1ae0e:	f043 0302 	orr.w	r3, r3, #2
   1ae12:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1ae14:	b1e5      	cbz	r5, 1ae50 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   1ae16:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   1ae18:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ae1a:	429d      	cmp	r5, r3
   1ae1c:	d109      	bne.n	1ae32 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   1ae1e:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   1ae20:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   1ae24:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1ae26:	606c      	str	r4, [r5, #4]
}
   1ae28:	e012      	b.n	1ae50 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1ae2a:	686a      	ldr	r2, [r5, #4]
   1ae2c:	4293      	cmp	r3, r2
   1ae2e:	d0f6      	beq.n	1ae1e <add_to_waitq_locked+0x1c>
   1ae30:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ae32:	2b00      	cmp	r3, #0
   1ae34:	d0f3      	beq.n	1ae1e <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   1ae36:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1ae3a:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   1ae3e:	428a      	cmp	r2, r1
   1ae40:	d0f3      	beq.n	1ae2a <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1ae42:	4291      	cmp	r1, r2
   1ae44:	ddf1      	ble.n	1ae2a <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   1ae46:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1ae48:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1ae4c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1ae4e:	605c      	str	r4, [r3, #4]
}
   1ae50:	bd38      	pop	{r3, r4, r5, pc}

0001ae52 <z_ready_thread>:
{
   1ae52:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ae54:	f04f 0320 	mov.w	r3, #32
   1ae58:	f3ef 8411 	mrs	r4, BASEPRI
   1ae5c:	f383 8812 	msr	BASEPRI_MAX, r3
   1ae60:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   1ae64:	f7fa fed8 	bl	15c18 <ready_thread>
	__asm__ volatile(
   1ae68:	f384 8811 	msr	BASEPRI, r4
   1ae6c:	f3bf 8f6f 	isb	sy
}
   1ae70:	bd10      	pop	{r4, pc}

0001ae72 <z_unpend_thread_no_timeout>:
{
   1ae72:	b508      	push	{r3, lr}
	__asm__ volatile(
   1ae74:	f04f 0220 	mov.w	r2, #32
   1ae78:	f3ef 8111 	mrs	r1, BASEPRI
   1ae7c:	f382 8812 	msr	BASEPRI_MAX, r2
   1ae80:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   1ae84:	6883      	ldr	r3, [r0, #8]
   1ae86:	b10b      	cbz	r3, 1ae8c <z_unpend_thread_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
   1ae88:	f7ff ffa8 	bl	1addc <unpend_thread_no_timeout>
	__asm__ volatile(
   1ae8c:	f381 8811 	msr	BASEPRI, r1
   1ae90:	f3bf 8f6f 	isb	sy
}
   1ae94:	bd08      	pop	{r3, pc}

0001ae96 <z_sched_wake_thread>:
{
   1ae96:	b538      	push	{r3, r4, r5, lr}
   1ae98:	4604      	mov	r4, r0
	__asm__ volatile(
   1ae9a:	f04f 0320 	mov.w	r3, #32
   1ae9e:	f3ef 8511 	mrs	r5, BASEPRI
   1aea2:	f383 8812 	msr	BASEPRI_MAX, r3
   1aea6:	f3bf 8f6f 	isb	sy
		if (!killed) {
   1aeaa:	7b43      	ldrb	r3, [r0, #13]
   1aeac:	f013 0f28 	tst.w	r3, #40	; 0x28
   1aeb0:	d10b      	bne.n	1aeca <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
   1aeb2:	6883      	ldr	r3, [r0, #8]
   1aeb4:	b10b      	cbz	r3, 1aeba <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
   1aeb6:	f7ff ff91 	bl	1addc <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1aeba:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
   1aebc:	b951      	cbnz	r1, 1aed4 <z_sched_wake_thread+0x3e>
   1aebe:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
			ready_thread(thread);
   1aec2:	4620      	mov	r0, r4
   1aec4:	7363      	strb	r3, [r4, #13]
   1aec6:	f7fa fea7 	bl	15c18 <ready_thread>
	__asm__ volatile(
   1aeca:	f385 8811 	msr	BASEPRI, r5
   1aece:	f3bf 8f6f 	isb	sy
}
   1aed2:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1aed4:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
   1aed8:	e7f3      	b.n	1aec2 <z_sched_wake_thread+0x2c>

0001aeda <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
   1aeda:	2101      	movs	r1, #1
   1aedc:	3818      	subs	r0, #24
   1aede:	f7ff bfda 	b.w	1ae96 <z_sched_wake_thread>

0001aee2 <z_unpend1_no_timeout>:
{
   1aee2:	b508      	push	{r3, lr}
   1aee4:	4603      	mov	r3, r0
	__asm__ volatile(
   1aee6:	f04f 0220 	mov.w	r2, #32
   1aeea:	f3ef 8111 	mrs	r1, BASEPRI
   1aeee:	f382 8812 	msr	BASEPRI_MAX, r2
   1aef2:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1aef6:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1aef8:	4283      	cmp	r3, r0
   1aefa:	d007      	beq.n	1af0c <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   1aefc:	b108      	cbz	r0, 1af02 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   1aefe:	f7ff ff6d 	bl	1addc <unpend_thread_no_timeout>
	__asm__ volatile(
   1af02:	f381 8811 	msr	BASEPRI, r1
   1af06:	f3bf 8f6f 	isb	sy
}
   1af0a:	bd08      	pop	{r3, pc}
   1af0c:	2000      	movs	r0, #0
   1af0e:	e7f8      	b.n	1af02 <z_unpend1_no_timeout+0x20>

0001af10 <z_unpend_first_thread>:
{
   1af10:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1af12:	f04f 0320 	mov.w	r3, #32
   1af16:	f3ef 8511 	mrs	r5, BASEPRI
   1af1a:	f383 8812 	msr	BASEPRI_MAX, r3
   1af1e:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1af22:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1af24:	42a0      	cmp	r0, r4
   1af26:	d00d      	beq.n	1af44 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   1af28:	b134      	cbz	r4, 1af38 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   1af2a:	4620      	mov	r0, r4
   1af2c:	f7ff ff56 	bl	1addc <unpend_thread_no_timeout>
   1af30:	f104 0018 	add.w	r0, r4, #24
   1af34:	f000 f869 	bl	1b00a <z_abort_timeout>
	__asm__ volatile(
   1af38:	f385 8811 	msr	BASEPRI, r5
   1af3c:	f3bf 8f6f 	isb	sy
}
   1af40:	4620      	mov	r0, r4
   1af42:	bd38      	pop	{r3, r4, r5, pc}
   1af44:	2400      	movs	r4, #0
   1af46:	e7f7      	b.n	1af38 <z_unpend_first_thread+0x28>

0001af48 <z_unpend_thread>:
{
   1af48:	4601      	mov	r1, r0
   1af4a:	b510      	push	{r4, lr}
	__asm__ volatile(
   1af4c:	f04f 0320 	mov.w	r3, #32
   1af50:	f3ef 8411 	mrs	r4, BASEPRI
   1af54:	f383 8812 	msr	BASEPRI_MAX, r3
   1af58:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   1af5c:	6883      	ldr	r3, [r0, #8]
   1af5e:	b10b      	cbz	r3, 1af64 <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
   1af60:	f7ff ff3c 	bl	1addc <unpend_thread_no_timeout>
	__asm__ volatile(
   1af64:	f384 8811 	msr	BASEPRI, r4
   1af68:	f3bf 8f6f 	isb	sy
}
   1af6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1af70:	f101 0018 	add.w	r0, r1, #24
   1af74:	f000 b849 	b.w	1b00a <z_abort_timeout>

0001af78 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1af78:	4603      	mov	r3, r0
   1af7a:	b920      	cbnz	r0, 1af86 <z_reschedule_irqlock+0xe>
   1af7c:	f3ef 8205 	mrs	r2, IPSR
   1af80:	b90a      	cbnz	r2, 1af86 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   1af82:	f7f0 bb45 	b.w	b610 <arch_swap>
   1af86:	f383 8811 	msr	BASEPRI, r3
   1af8a:	f3bf 8f6f 	isb	sy
}
   1af8e:	4770      	bx	lr

0001af90 <z_reschedule_unlocked>:
	__asm__ volatile(
   1af90:	f04f 0320 	mov.w	r3, #32
   1af94:	f3ef 8011 	mrs	r0, BASEPRI
   1af98:	f383 8812 	msr	BASEPRI_MAX, r3
   1af9c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1afa0:	f7ff bfea 	b.w	1af78 <z_reschedule_irqlock>

0001afa4 <z_unpend_all>:
{
   1afa4:	b538      	push	{r3, r4, r5, lr}
   1afa6:	4605      	mov	r5, r0
	int need_sched = 0;
   1afa8:	2000      	movs	r0, #0
	return list->head == list;
   1afaa:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1afac:	42a5      	cmp	r5, r4
   1afae:	d000      	beq.n	1afb2 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1afb0:	b904      	cbnz	r4, 1afb4 <z_unpend_all+0x10>
}
   1afb2:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1afb4:	4620      	mov	r0, r4
   1afb6:	f7ff ffc7 	bl	1af48 <z_unpend_thread>
		z_ready_thread(thread);
   1afba:	4620      	mov	r0, r4
   1afbc:	f7ff ff49 	bl	1ae52 <z_ready_thread>
		need_sched = 1;
   1afc0:	2001      	movs	r0, #1
   1afc2:	e7f2      	b.n	1afaa <z_unpend_all+0x6>

0001afc4 <z_sched_wake>:
{
   1afc4:	b538      	push	{r3, r4, r5, lr}
   1afc6:	f04f 0320 	mov.w	r3, #32
   1afca:	f3ef 8511 	mrs	r5, BASEPRI
   1afce:	f383 8812 	msr	BASEPRI_MAX, r3
   1afd2:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1afd6:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1afd8:	42a0      	cmp	r0, r4
   1afda:	d012      	beq.n	1b002 <z_sched_wake+0x3e>
		if (thread != NULL) {
   1afdc:	b19c      	cbz	r4, 1b006 <z_sched_wake+0x42>
   1afde:	67e1      	str	r1, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   1afe0:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   1afe2:	4620      	mov	r0, r4
   1afe4:	f7ff fefa 	bl	1addc <unpend_thread_no_timeout>
   1afe8:	f104 0018 	add.w	r0, r4, #24
   1afec:	f000 f80d 	bl	1b00a <z_abort_timeout>
			ready_thread(thread);
   1aff0:	4620      	mov	r0, r4
   1aff2:	f7fa fe11 	bl	15c18 <ready_thread>
			ret = true;
   1aff6:	2001      	movs	r0, #1
	__asm__ volatile(
   1aff8:	f385 8811 	msr	BASEPRI, r5
   1affc:	f3bf 8f6f 	isb	sy
}
   1b000:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   1b002:	2000      	movs	r0, #0
   1b004:	e7f8      	b.n	1aff8 <z_sched_wake+0x34>
   1b006:	4620      	mov	r0, r4
   1b008:	e7f6      	b.n	1aff8 <z_sched_wake+0x34>

0001b00a <z_abort_timeout>:
{
   1b00a:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b00c:	f04f 0220 	mov.w	r2, #32
   1b010:	f3ef 8411 	mrs	r4, BASEPRI
   1b014:	f382 8812 	msr	BASEPRI_MAX, r2
   1b018:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1b01c:	6803      	ldr	r3, [r0, #0]
   1b01e:	b13b      	cbz	r3, 1b030 <z_abort_timeout+0x26>
			remove_timeout(to);
   1b020:	f7fb f8e4 	bl	161ec <remove_timeout>
			ret = 0;
   1b024:	2000      	movs	r0, #0
	__asm__ volatile(
   1b026:	f384 8811 	msr	BASEPRI, r4
   1b02a:	f3bf 8f6f 	isb	sy
}
   1b02e:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1b030:	f06f 0015 	mvn.w	r0, #21
   1b034:	e7f7      	b.n	1b026 <z_abort_timeout+0x1c>

0001b036 <z_get_next_timeout_expiry>:
{
   1b036:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b038:	f04f 0320 	mov.w	r3, #32
   1b03c:	f3ef 8411 	mrs	r4, BASEPRI
   1b040:	f383 8812 	msr	BASEPRI_MAX, r3
   1b044:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1b048:	f7fb f8b0 	bl	161ac <next_timeout>
	__asm__ volatile(
   1b04c:	f384 8811 	msr	BASEPRI, r4
   1b050:	f3bf 8f6f 	isb	sy
}
   1b054:	bd10      	pop	{r4, pc}

0001b056 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1b056:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1b058:	f7fb f9c4 	bl	163e4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1b05c:	bd08      	pop	{r3, pc}

0001b05e <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   1b05e:	f7fb b9c1 	b.w	163e4 <sys_clock_tick_get>

0001b062 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1b062:	b108      	cbz	r0, 1b068 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1b064:	f7ee bd12 	b.w	9a8c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1b068:	4770      	bx	lr

0001b06a <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b06a:	f1b1 3fff 	cmp.w	r1, #4294967295
   1b06e:	bf08      	it	eq
   1b070:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1b074:	b538      	push	{r3, r4, r5, lr}
   1b076:	460c      	mov	r4, r1
   1b078:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b07a:	d014      	beq.n	1b0a6 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1b07c:	4308      	orrs	r0, r1
   1b07e:	d103      	bne.n	1b088 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   1b080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   1b084:	f7fb b9ae 	b.w	163e4 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1b088:	f06f 0001 	mvn.w	r0, #1
   1b08c:	f04f 33ff 	mov.w	r3, #4294967295
   1b090:	1b40      	subs	r0, r0, r5
   1b092:	eb63 0101 	sbc.w	r1, r3, r1
   1b096:	2900      	cmp	r1, #0
   1b098:	da04      	bge.n	1b0a4 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   1b09a:	f7fb f9a3 	bl	163e4 <sys_clock_tick_get>
   1b09e:	1940      	adds	r0, r0, r5
   1b0a0:	eb41 0104 	adc.w	r1, r1, r4
}
   1b0a4:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   1b0a6:	f04f 30ff 	mov.w	r0, #4294967295
   1b0aa:	4601      	mov	r1, r0
   1b0ac:	e7fa      	b.n	1b0a4 <sys_clock_timeout_end_calc+0x3a>

0001b0ae <k_timer_init>:
	timer->status = 0U;
   1b0ae:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   1b0b0:	e9c0 1208 	strd	r1, r2, [r0, #32]
   1b0b4:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   1b0b8:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   1b0bc:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   1b0c0:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   1b0c2:	6343      	str	r3, [r0, #52]	; 0x34
}
   1b0c4:	4770      	bx	lr

0001b0c6 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1b0c6:	b510      	push	{r4, lr}
   1b0c8:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   1b0ca:	f7ff ff9e 	bl	1b00a <z_abort_timeout>

	if (inactive) {
   1b0ce:	b9b0      	cbnz	r0, 1b0fe <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   1b0d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b0d2:	b10b      	cbz	r3, 1b0d8 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1b0d4:	4620      	mov	r0, r4
   1b0d6:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   1b0d8:	f104 0018 	add.w	r0, r4, #24
   1b0dc:	f7ff ff01 	bl	1aee2 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   1b0e0:	b168      	cbz	r0, 1b0fe <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   1b0e2:	f7ff feb6 	bl	1ae52 <z_ready_thread>
	__asm__ volatile(
   1b0e6:	f04f 0320 	mov.w	r3, #32
   1b0ea:	f3ef 8011 	mrs	r0, BASEPRI
   1b0ee:	f383 8812 	msr	BASEPRI_MAX, r3
   1b0f2:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   1b0f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b0fa:	f7ff bf3d 	b.w	1af78 <z_reschedule_irqlock>
   1b0fe:	bd10      	pop	{r4, pc}

0001b100 <add_event>:
{
   1b100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b102:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1b104:	e9d0 1300 	ldrd	r1, r3, [r0]
   1b108:	4288      	cmp	r0, r1
   1b10a:	4604      	mov	r4, r0
   1b10c:	d105      	bne.n	1b11a <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   1b10e:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   1b110:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   1b114:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1b116:	6065      	str	r5, [r4, #4]
   1b118:	e01d      	b.n	1b156 <add_event+0x56>
	if ((pending == NULL) ||
   1b11a:	2b00      	cmp	r3, #0
   1b11c:	d0f7      	beq.n	1b10e <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1b11e:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1b120:	b100      	cbz	r0, 1b124 <add_event+0x24>
   1b122:	3860      	subs	r0, #96	; 0x60
   1b124:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1b128:	4639      	mov	r1, r7
   1b12a:	f7ff fe61 	bl	1adf0 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1b12e:	2800      	cmp	r0, #0
   1b130:	dced      	bgt.n	1b10e <add_event+0xe>
	return list->head == list;
   1b132:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b134:	42b4      	cmp	r4, r6
   1b136:	d0ea      	beq.n	1b10e <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1b138:	2e00      	cmp	r6, #0
   1b13a:	d0e8      	beq.n	1b10e <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   1b13c:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1b13e:	b101      	cbz	r1, 1b142 <add_event+0x42>
   1b140:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   1b142:	4638      	mov	r0, r7
   1b144:	f7ff fe54 	bl	1adf0 <z_sched_prio_cmp>
   1b148:	2800      	cmp	r0, #0
   1b14a:	dd05      	ble.n	1b158 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   1b14c:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1b14e:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   1b152:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1b154:	6075      	str	r5, [r6, #4]
}
   1b156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1b158:	6863      	ldr	r3, [r4, #4]
   1b15a:	429e      	cmp	r6, r3
   1b15c:	d0d7      	beq.n	1b10e <add_event+0xe>
   1b15e:	6836      	ldr	r6, [r6, #0]
   1b160:	e7ea      	b.n	1b138 <add_event+0x38>

0001b162 <register_events>:
{
   1b162:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1b166:	2500      	movs	r5, #0
{
   1b168:	468b      	mov	fp, r1
   1b16a:	4614      	mov	r4, r2
   1b16c:	461f      	mov	r7, r3
   1b16e:	4682      	mov	sl, r0
	int events_registered = 0;
   1b170:	462e      	mov	r6, r5
	event->poller = NULL;
   1b172:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   1b174:	455d      	cmp	r5, fp
   1b176:	db02      	blt.n	1b17e <register_events+0x1c>
}
   1b178:	4630      	mov	r0, r6
   1b17a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b17e:	f04f 0320 	mov.w	r3, #32
   1b182:	f3ef 8911 	mrs	r9, BASEPRI
   1b186:	f383 8812 	msr	BASEPRI_MAX, r3
   1b18a:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1b18e:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1b192:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1b196:	3b01      	subs	r3, #1
   1b198:	2b07      	cmp	r3, #7
   1b19a:	d80f      	bhi.n	1b1bc <register_events+0x5a>
   1b19c:	e8df f003 	tbb	[pc, r3]
   1b1a0:	0a0e041e 	.word	0x0a0e041e
   1b1a4:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   1b1a8:	f8da 3010 	ldr.w	r3, [sl, #16]
   1b1ac:	689b      	ldr	r3, [r3, #8]
   1b1ae:	b12b      	cbz	r3, 1b1bc <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1b1b0:	2302      	movs	r3, #2
   1b1b2:	e020      	b.n	1b1f6 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   1b1b4:	f8da 3010 	ldr.w	r3, [sl, #16]
   1b1b8:	681b      	ldr	r3, [r3, #0]
   1b1ba:	bb8b      	cbnz	r3, 1b220 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   1b1bc:	bb47      	cbnz	r7, 1b210 <register_events+0xae>
   1b1be:	7823      	ldrb	r3, [r4, #0]
   1b1c0:	b333      	cbz	r3, 1b210 <register_events+0xae>
	switch (event->type) {
   1b1c2:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1b1c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1b1ca:	3b01      	subs	r3, #1
   1b1cc:	2b07      	cmp	r3, #7
   1b1ce:	d830      	bhi.n	1b232 <register_events+0xd0>
   1b1d0:	e8df f003 	tbb	[pc, r3]
   1b1d4:	282f2833 	.word	0x282f2833
   1b1d8:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   1b1dc:	f8da 3010 	ldr.w	r3, [sl, #16]
   1b1e0:	689b      	ldr	r3, [r3, #8]
   1b1e2:	2b00      	cmp	r3, #0
   1b1e4:	d0ea      	beq.n	1b1bc <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   1b1e6:	2301      	movs	r3, #1
   1b1e8:	e005      	b.n	1b1f6 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   1b1ea:	f8da 3010 	ldr.w	r3, [sl, #16]
   1b1ee:	6a1b      	ldr	r3, [r3, #32]
   1b1f0:	2b00      	cmp	r3, #0
   1b1f2:	d0e3      	beq.n	1b1bc <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   1b1f4:	2310      	movs	r3, #16
	event->state |= state;
   1b1f6:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   1b1fa:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   1b1fe:	f3c2 3186 	ubfx	r1, r2, #14, #7
   1b202:	430b      	orrs	r3, r1
   1b204:	f363 3294 	bfi	r2, r3, #14, #7
   1b208:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   1b20c:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   1b210:	f389 8811 	msr	BASEPRI, r9
   1b214:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1b218:	3501      	adds	r5, #1
   1b21a:	f10a 0a14 	add.w	sl, sl, #20
   1b21e:	e7a9      	b.n	1b174 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1b220:	2304      	movs	r3, #4
   1b222:	e7e8      	b.n	1b1f6 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   1b224:	4622      	mov	r2, r4
   1b226:	4651      	mov	r1, sl
   1b228:	f8da 0010 	ldr.w	r0, [sl, #16]
   1b22c:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   1b22e:	f7ff ff67 	bl	1b100 <add_event>
	event->poller = poller;
   1b232:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   1b236:	3601      	adds	r6, #1
   1b238:	e7ea      	b.n	1b210 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   1b23a:	4622      	mov	r2, r4
   1b23c:	4651      	mov	r1, sl
   1b23e:	f8da 0010 	ldr.w	r0, [sl, #16]
   1b242:	e7f4      	b.n	1b22e <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   1b244:	f8da 0010 	ldr.w	r0, [sl, #16]
   1b248:	4622      	mov	r2, r4
   1b24a:	4651      	mov	r1, sl
   1b24c:	3024      	adds	r0, #36	; 0x24
   1b24e:	e7ee      	b.n	1b22e <register_events+0xcc>

0001b250 <signal_poll_event>:
{
   1b250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1b254:	6884      	ldr	r4, [r0, #8]
{
   1b256:	4605      	mov	r5, r0
   1b258:	460e      	mov	r6, r1
	if (poller != NULL) {
   1b25a:	b144      	cbz	r4, 1b26e <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   1b25c:	7863      	ldrb	r3, [r4, #1]
   1b25e:	2b01      	cmp	r3, #1
   1b260:	d12e      	bne.n	1b2c0 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   1b262:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1b266:	f013 0302 	ands.w	r3, r3, #2
   1b26a:	d10a      	bne.n	1b282 <signal_poll_event+0x32>
		poller->is_polling = false;
   1b26c:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   1b26e:	2000      	movs	r0, #0
	event->state |= state;
   1b270:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   1b272:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1b274:	f3c3 3286 	ubfx	r2, r3, #14, #7
   1b278:	4316      	orrs	r6, r2
   1b27a:	f366 3394 	bfi	r3, r6, #14, #7
   1b27e:	60eb      	str	r3, [r5, #12]
	return retcode;
   1b280:	e03e      	b.n	1b300 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   1b282:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   1b286:	f1b3 3fff 	cmp.w	r3, #4294967295
   1b28a:	bf08      	it	eq
   1b28c:	f112 0f02 	cmneq.w	r2, #2
   1b290:	d032      	beq.n	1b2f8 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1b292:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   1b296:	4640      	mov	r0, r8
   1b298:	f7ff fe56 	bl	1af48 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1b29c:	2e08      	cmp	r6, #8
   1b29e:	bf0c      	ite	eq
   1b2a0:	f06f 0303 	mvneq.w	r3, #3
   1b2a4:	2300      	movne	r3, #0
   1b2a6:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1b2a8:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1b2ac:	06db      	lsls	r3, r3, #27
   1b2ae:	d109      	bne.n	1b2c4 <signal_poll_event+0x74>
   1b2b0:	f854 7c48 	ldr.w	r7, [r4, #-72]
   1b2b4:	b937      	cbnz	r7, 1b2c4 <signal_poll_event+0x74>
	z_ready_thread(thread);
   1b2b6:	4640      	mov	r0, r8
   1b2b8:	f7ff fdcb 	bl	1ae52 <z_ready_thread>
		poller->is_polling = false;
   1b2bc:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1b2be:	e7d6      	b.n	1b26e <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   1b2c0:	2b02      	cmp	r3, #2
   1b2c2:	d001      	beq.n	1b2c8 <signal_poll_event+0x78>
		poller->is_polling = false;
   1b2c4:	2300      	movs	r3, #0
   1b2c6:	e7d1      	b.n	1b26c <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1b2c8:	7823      	ldrb	r3, [r4, #0]
   1b2ca:	2b00      	cmp	r3, #0
   1b2cc:	d0cf      	beq.n	1b26e <signal_poll_event+0x1e>
   1b2ce:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1b2d2:	2f00      	cmp	r7, #0
   1b2d4:	d0f2      	beq.n	1b2bc <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1b2d6:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1b2da:	f1a4 0914 	sub.w	r9, r4, #20
   1b2de:	f104 0014 	add.w	r0, r4, #20
   1b2e2:	f7ff fe92 	bl	1b00a <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   1b2e6:	4649      	mov	r1, r9
   1b2e8:	4638      	mov	r0, r7
		twork->poll_result = 0;
   1b2ea:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   1b2ee:	f7ff fcef 	bl	1acd0 <z_work_submit_to_queue>
		poller->is_polling = false;
   1b2f2:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1b2f6:	e7ba      	b.n	1b26e <signal_poll_event+0x1e>
		poller->is_polling = false;
   1b2f8:	2300      	movs	r3, #0
		return -EAGAIN;
   1b2fa:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   1b2fe:	7023      	strb	r3, [r4, #0]
}
   1b300:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001b304 <clear_event_registrations>:
	while (num_events--) {
   1b304:	2314      	movs	r3, #20
{
   1b306:	b5f0      	push	{r4, r5, r6, r7, lr}
	event->poller = NULL;
   1b308:	2400      	movs	r4, #0
	switch (event->type) {
   1b30a:	f44f 768b 	mov.w	r6, #278	; 0x116
   1b30e:	fb03 0001 	mla	r0, r3, r1, r0
	while (num_events--) {
   1b312:	b901      	cbnz	r1, 1b316 <clear_event_registrations+0x12>
}
   1b314:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   1b316:	f810 3c07 	ldrb.w	r3, [r0, #-7]
   1b31a:	f1a0 0714 	sub.w	r7, r0, #20
   1b31e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1b322:	2b08      	cmp	r3, #8
	event->poller = NULL;
   1b324:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   1b328:	d80c      	bhi.n	1b344 <clear_event_registrations+0x40>
   1b32a:	fa26 f303 	lsr.w	r3, r6, r3
   1b32e:	07db      	lsls	r3, r3, #31
   1b330:	d508      	bpl.n	1b344 <clear_event_registrations+0x40>
	return node->next != NULL;
   1b332:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1b336:	b12b      	cbz	r3, 1b344 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   1b338:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   1b33c:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   1b33e:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1b340:	e940 4405 	strd	r4, r4, [r0, #-20]
   1b344:	f382 8811 	msr	BASEPRI, r2
   1b348:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1b34c:	f04f 0320 	mov.w	r3, #32
   1b350:	f3ef 8211 	mrs	r2, BASEPRI
   1b354:	f383 8812 	msr	BASEPRI_MAX, r3
   1b358:	f3bf 8f6f 	isb	sy
   1b35c:	4638      	mov	r0, r7
   1b35e:	3901      	subs	r1, #1
   1b360:	e7d7      	b.n	1b312 <clear_event_registrations+0xe>

0001b362 <k_poll_event_init>:
{
   1b362:	b510      	push	{r4, lr}
	event->poller = NULL;
   1b364:	2400      	movs	r4, #0
	event->type = type;
   1b366:	0552      	lsls	r2, r2, #21
   1b368:	0209      	lsls	r1, r1, #8
   1b36a:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   1b36e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
   1b372:	430a      	orrs	r2, r1
   1b374:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   1b376:	6084      	str	r4, [r0, #8]
	event->type = type;
   1b378:	430a      	orrs	r2, r1
	event->obj = obj;
   1b37a:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   1b37e:	bd10      	pop	{r4, pc}

0001b380 <z_handle_obj_poll_events>:
{
   1b380:	4603      	mov	r3, r0
	return list->head == list;
   1b382:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1b384:	4283      	cmp	r3, r0
   1b386:	d008      	beq.n	1b39a <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   1b388:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1b38c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1b38e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1b390:	2300      	movs	r3, #0
	node->prev = NULL;
   1b392:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1b396:	f7ff bf5b 	b.w	1b250 <signal_poll_event>
}
   1b39a:	4770      	bx	lr

0001b39c <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   1b39c:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   1b39e:	e9c0 0000 	strd	r0, r0, [r0]
   1b3a2:	6083      	str	r3, [r0, #8]
}
   1b3a4:	4770      	bx	lr

0001b3a6 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1b3a6:	3204      	adds	r2, #4
{
   1b3a8:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1b3aa:	4604      	mov	r4, r0
   1b3ac:	d208      	bcs.n	1b3c0 <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1b3ae:	2600      	movs	r6, #0
   1b3b0:	2700      	movs	r7, #0
   1b3b2:	f041 0104 	orr.w	r1, r1, #4
   1b3b6:	e9cd 6700 	strd	r6, r7, [sp]
   1b3ba:	f7ff fa8a 	bl	1a8d2 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1b3be:	b910      	cbnz	r0, 1b3c6 <z_heap_aligned_alloc+0x20>
		return NULL;
   1b3c0:	2000      	movs	r0, #0
}
   1b3c2:	b002      	add	sp, #8
   1b3c4:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   1b3c6:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   1b3ca:	e7fa      	b.n	1b3c2 <z_heap_aligned_alloc+0x1c>

0001b3cc <k_free>:
	if (ptr != NULL) {
   1b3cc:	b120      	cbz	r0, 1b3d8 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   1b3ce:	1f01      	subs	r1, r0, #4
   1b3d0:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1b3d4:	f7ff baca 	b.w	1a96c <k_heap_free>
}
   1b3d8:	4770      	bx	lr

0001b3da <k_malloc>:
{
   1b3da:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   1b3dc:	2004      	movs	r0, #4
   1b3de:	f7fb b941 	b.w	16664 <k_aligned_alloc>

0001b3e2 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   1b3e2:	4770      	bx	lr
